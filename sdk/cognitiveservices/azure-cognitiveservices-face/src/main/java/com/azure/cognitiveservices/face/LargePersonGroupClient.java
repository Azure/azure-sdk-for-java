// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.face;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous FaceClient type. */
@ServiceClient(builder = LargePersonGroupClientBuilder.class)
public final class LargePersonGroupClient {
    @Generated private final LargePersonGroupAsyncClient asyncClient;

    /**
     * Initializes an instance of LargePersonGroupClient class.
     *
     * @param asyncClient the async client.
     */
    @Generated
    LargePersonGroupClient(LargePersonGroupAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Create a new large person group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel. &lt;br /&gt; A large person group is the container of the uploaded person data, including face
     * recognition feature, and up to 1,000,000 people. &lt;br /&gt; After creation, use [LargePersonGroup Person -
     * Create](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/create) to add person into the group,
     * and call [LargePersonGroup - Train](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/train) to get
     * this group ready for [Face - Identify](https://docs.microsoft.com/rest/api/faceapi/face/identify). &lt;br /&gt;
     * No image will be stored. Only the person's extracted face features and userData will be stored on server until
     * [LargePersonGroup Person - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/delete) or
     * [LargePersonGroup - Delete](https://docs.microsoft.com/rest/api/faceapi/largepersongroup/delete) is called.
     * &lt;br/&gt;'recognitionModel' should be specified to associate with this large person group. The default value
     * for 'recognitionModel' is 'recognition_01', if the latest model needed, please explicitly specify the model you
     * need in this parameter. New faces that are added to an existing large person group will use the recognition model
     * that's already associated with the collection. Existing face features in a large person group can't be updated to
     * features extracted by another version of recognition model. Please refer to [Specify a face recognition
     * model](https://docs.microsoft.com/azure/cognitive-services/face/face-api-how-to-topics/specify-recognition-model).
     *
     * <p>Large person group quota: * Free-tier subscription quota: 1,000 large person groups. * S0-tier subscription
     * quota: 1,000,000 large person groups.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param body Request body for creating new large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createWithResponse(
            String largePersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.createWithResponse(largePersonGroupId, body, requestOptions).block();
    }

    /**
     * Delete an existing large person group. Persisted face features of all people in the large person group will also
     * be deleted.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.deleteWithResponse(largePersonGroupId, requestOptions).block();
    }

    /**
     * Retrieve the information of a large person group, including its name, userData and recognitionModel. This API
     * returns large person group information only, use [LargePersonGroup Person -
     * List](https://docs.microsoft.com/rest/api/faceapi/largepersongroupperson/list) instead to retrieve person
     * information under the large person group.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     largePersonGroupId: String
     *     name: String
     *     userData: String
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return large person group object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.getWithResponse(largePersonGroupId, requestOptions).block();
    }

    /**
     * Update an existing large person group's display name and userData. The properties which does not appear in
     * request body will not be updated.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     name: String
     *     userData: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param body Request body for updating large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(
            String largePersonGroupId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.updateWithResponse(largePersonGroupId, body, requestOptions).block();
    }

    /**
     * Retrieve the training status of a large person group (completed or ongoing).
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     status: String(nonstarted/running/succeeded/failed)
     *     created: String
     *     lastAction: String
     *     lastSuccessfulTraining: String
     *     message: String
     * }
     * }</pre>
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training status object along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getTrainingStatusWithResponse(
            String largePersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.getTrainingStatusWithResponse(largePersonGroupId, requestOptions).block();
    }

    /**
     * List all existing large person groups’ largePersonGroupId, name, userData and recognitionModel.&lt;br /&gt; *
     * Large person groups are stored in alphabetical order of largePersonGroupId. * "start" parameter (string,
     * optional) is a user-provided largePersonGroupId value that returned entries have larger ids by string comparison.
     * "start" set to empty to indicate return from the first item. * "top" parameter (int, optional) specifies the
     * number of entries to return. A maximal of 1000 entries can be returned in one call. To fetch more, you can
     * specify "start" with the last returned entry’s Id of the current call. &lt;br /&gt; For example, total 5 large
     * person groups: "group1", ..., "group5". &lt;br /&gt; "start=&amp;top=" will return all 5 groups. &lt;br /&gt;
     * "start=&amp;top=2" will return "group1", "group2". &lt;br /&gt; "start=group2&amp;top=3" will return "group3",
     * "group4", "group5".
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>List large person groups from the least largePersonGroupId greater than the "start".</td></tr>
     *     <tr><td>top</td><td>String</td><td>No</td><td>The number of large person groups to list.</td></tr>
     *     <tr><td>returnRecognitionModel</td><td>String</td><td>No</td><td>A value indicating whether the operation should return 'recognitionModel' in response.</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * [
     *     {
     *         largePersonGroupId: String
     *         name: String
     *         userData: String
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return an array of large person groups along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listWithResponse(RequestOptions requestOptions) {
        return this.asyncClient.listWithResponse(requestOptions).block();
    }

    /**
     * Queue a large person group training task, the training task may not be started immediately.
     *
     * @param largePersonGroupId Id referencing a particular large person group.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> trainWithResponse(String largePersonGroupId, RequestOptions requestOptions) {
        return this.asyncClient.trainWithResponse(largePersonGroupId, requestOptions).block();
    }
}
