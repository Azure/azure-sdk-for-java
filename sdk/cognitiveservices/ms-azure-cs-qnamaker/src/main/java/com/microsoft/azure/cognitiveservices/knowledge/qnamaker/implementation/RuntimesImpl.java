/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.knowledge.qnamaker.implementation;

import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.TrainOptionalParameter;
import retrofit2.Retrofit;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Runtimes;
import com.google.common.base.Joiner;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.FeedbackRecordDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.FeedbackRecordsDTO;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QnASearchResultList;
import com.microsoft.azure.cognitiveservices.knowledge.qnamaker.models.QueryDTO;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Runtimes.
 */
public class RuntimesImpl implements Runtimes {
    /** The Retrofit service to perform REST calls. */
    private RuntimesService service;
    /** The service client containing this operation class. */
    private QnAMakerRuntimeClientImpl client;

    /**
     * Initializes an instance of RuntimesImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RuntimesImpl(Retrofit retrofit, QnAMakerRuntimeClientImpl client) {
        this.service = retrofit.create(RuntimesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for Runtimes to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RuntimesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Runtimes generateAnswer" })
        @POST("knowledgebases/{kbId}/generateAnswer")
        Observable<Response<ResponseBody>> generateAnswer(@Path("kbId") String kbId, @Body QueryDTO generateAnswerPayload, @Header("accept-language") String acceptLanguage, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.cognitiveservices.knowledge.qnamaker.Runtimes train" })
        @POST("knowledgebases/{kbId}/train")
        Observable<Response<ResponseBody>> train(@Path("kbId") String kbId, @Header("accept-language") String acceptLanguage, @Body FeedbackRecordsDTO trainPayload, @Header("x-ms-parameterized-host") String parameterizedHost, @Header("User-Agent") String userAgent);

    }

    /**
     * GenerateAnswer call to query the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the QnASearchResultList object if successful.
     */
    public QnASearchResultList generateAnswer(String kbId, QueryDTO generateAnswerPayload) {
        return generateAnswerWithServiceResponseAsync(kbId, generateAnswerPayload).toBlocking().single().body();
    }

    /**
     * GenerateAnswer call to query the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<QnASearchResultList> generateAnswerAsync(String kbId, QueryDTO generateAnswerPayload, final ServiceCallback<QnASearchResultList> serviceCallback) {
        return ServiceFuture.fromResponse(generateAnswerWithServiceResponseAsync(kbId, generateAnswerPayload), serviceCallback);
    }

    /**
     * GenerateAnswer call to query the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QnASearchResultList object
     */
    public Observable<QnASearchResultList> generateAnswerAsync(String kbId, QueryDTO generateAnswerPayload) {
        return generateAnswerWithServiceResponseAsync(kbId, generateAnswerPayload).map(new Func1<ServiceResponse<QnASearchResultList>, QnASearchResultList>() {
            @Override
            public QnASearchResultList call(ServiceResponse<QnASearchResultList> response) {
                return response.body();
            }
        });
    }

    /**
     * GenerateAnswer call to query the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param generateAnswerPayload Post body of the request.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the QnASearchResultList object
     */
    public Observable<ServiceResponse<QnASearchResultList>> generateAnswerWithServiceResponseAsync(String kbId, QueryDTO generateAnswerPayload) {
        if (this.client.runtimeEndpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.runtimeEndpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        if (generateAnswerPayload == null) {
            throw new IllegalArgumentException("Parameter generateAnswerPayload is required and cannot be null.");
        }
        Validator.validate(generateAnswerPayload);
        String parameterizedHost = Joiner.on(", ").join("{RuntimeEndpoint}", this.client.runtimeEndpoint());
        return service.generateAnswer(kbId, generateAnswerPayload, this.client.acceptLanguage(), parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<QnASearchResultList>>>() {
                @Override
                public Observable<ServiceResponse<QnASearchResultList>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<QnASearchResultList> clientResponse = generateAnswerDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<QnASearchResultList> generateAnswerDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<QnASearchResultList, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<QnASearchResultList>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }


    /**
     * Train call to add suggestions to the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param trainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void train(String kbId, TrainOptionalParameter trainOptionalParameter) {
        trainWithServiceResponseAsync(kbId, trainOptionalParameter).toBlocking().single().body();
    }

    /**
     * Train call to add suggestions to the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param trainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> trainAsync(String kbId, TrainOptionalParameter trainOptionalParameter, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(trainWithServiceResponseAsync(kbId, trainOptionalParameter), serviceCallback);
    }

    /**
     * Train call to add suggestions to the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param trainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> trainAsync(String kbId, TrainOptionalParameter trainOptionalParameter) {
        return trainWithServiceResponseAsync(kbId, trainOptionalParameter).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Train call to add suggestions to the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param trainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String kbId, TrainOptionalParameter trainOptionalParameter) {
        if (this.client.runtimeEndpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.runtimeEndpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        final List<FeedbackRecordDTO> feedbackRecords = trainOptionalParameter != null ? trainOptionalParameter.feedbackRecords() : null;

        return trainWithServiceResponseAsync(kbId, feedbackRecords);
    }

    /**
     * Train call to add suggestions to the knowledgebase.
     *
     * @param kbId Knowledgebase id.
     * @param feedbackRecords List of feedback records.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> trainWithServiceResponseAsync(String kbId, List<FeedbackRecordDTO> feedbackRecords) {
        if (this.client.runtimeEndpoint() == null) {
            throw new IllegalArgumentException("Parameter this.client.runtimeEndpoint() is required and cannot be null.");
        }
        if (kbId == null) {
            throw new IllegalArgumentException("Parameter kbId is required and cannot be null.");
        }
        Validator.validate(feedbackRecords);
        FeedbackRecordsDTO trainPayload = new FeedbackRecordsDTO();
        trainPayload.withFeedbackRecords(feedbackRecords);
        String parameterizedHost = Joiner.on(", ").join("{RuntimeEndpoint}", this.client.runtimeEndpoint());
        return service.train(kbId, this.client.acceptLanguage(), trainPayload, parameterizedHost, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = trainDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> trainDelegate(Response<ResponseBody> response) throws ErrorResponseException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ErrorResponseException>newInstance(this.client.serializerAdapter())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ErrorResponseException.class)
                .build(response);
    }

    @Override
    public RuntimesTrainParameters train() {
        return new RuntimesTrainParameters(this);
    }

    /**
     * Internal class implementing RuntimesTrainDefinition.
     */
    class RuntimesTrainParameters implements RuntimesTrainDefinition {
        private RuntimesImpl parent;
        private String kbId;
        private List<FeedbackRecordDTO> feedbackRecords;

        /**
         * Constructor.
         * @param parent the parent object.
         */
        RuntimesTrainParameters(RuntimesImpl parent) {
            this.parent = parent;
        }

        @Override
        public RuntimesTrainParameters withKbId(String kbId) {
            this.kbId = kbId;
            return this;
        }

        @Override
        public RuntimesTrainParameters withFeedbackRecords(List<FeedbackRecordDTO> feedbackRecords) {
            this.feedbackRecords = feedbackRecords;
            return this;
        }

        @Override
        public void execute() {
        trainWithServiceResponseAsync(kbId, feedbackRecords).toBlocking().single().body();
    }

        @Override
        public Observable<Void> executeAsync() {
            return trainWithServiceResponseAsync(kbId, feedbackRecords).map(new Func1<ServiceResponse<Void>, Void>() {
                @Override
                public Void call(ServiceResponse<Void> response) {
                    return response.body();
                }
            });
        }
    }

}
