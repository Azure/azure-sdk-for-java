// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

package textanalytics.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.implementation.RestProxy;
import reactor.core.publisher.Mono;
import textanalytics.models.LanguageBatchInput;
import textanalytics.models.MultiLanguageBatchInput;

/**
 * Initializes a new instance of the TextAnalyticsAPI type.
 */
public final class TextAnalyticsAPIImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private TextAnalyticsAPIService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints (protocol and hostname, for example: https://westus.api.cognitive.microsoft.com).
     *
     * @param endpoint the endpoint value.
     */
    TextAnalyticsAPIImpl setEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of TextAnalyticsAPI client.
     */
    public TextAnalyticsAPIImpl() {
        this(RestProxy.createDefaultPipeline());
    }

    /**
     * Initializes an instance of TextAnalyticsAPI client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public TextAnalyticsAPIImpl(HttpPipeline httpPipeline) {
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(TextAnalyticsAPIService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for TextAnalyticsAPI to be used
     * by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/text/analytics/v3.0-preview.1")
    @ServiceInterface(name = "TextAnalyticsAPI")
    private interface TextAnalyticsAPIService {
        @Post("entities/recognition/general")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> /entities/recognition/general(@HostParam("Endpoint") String endpoint, @QueryParam("model-version") String modelVersion, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);

        @Post("entities/recognition/pii")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> /entities/recognition/pii(@HostParam("Endpoint") String endpoint, @QueryParam("model-version") String modelVersion, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);

        @Post("entities/linking")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> /entities/linking(@HostParam("Endpoint") String endpoint, @QueryParam("model-version") String modelVersion, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);

        @Post("keyPhrases")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> /keyPhrases(@HostParam("Endpoint") String endpoint, @QueryParam("model-version") String modelVersion, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);

        @Post("languages")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> /languages(@HostParam("Endpoint") String endpoint, @QueryParam("model-version") String modelVersion, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") LanguageBatchInput languageBatchInput);

        @Post("sentiment")
        @ExpectedResponses({200, 500})
        Mono<SimpleResponse<Object>> /sentiment(@HostParam("Endpoint") String endpoint, @QueryParam("model-version") String modelVersion, @QueryParam("showStats") Boolean showStats, @BodyParam("application/json; charset=utf-8") MultiLanguageBatchInput multiLanguageBatchInput);
    }

    /**
     * Named Entity Recognition
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href="https://aka.ms/taner"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. For the list of enabled languages, check &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt;.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /entities/recognition/generalWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput) {
        final String modelVersion = null;
        final Boolean showStats = null;
        return service./entities/recognition/general(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Named Entity Recognition
     * The API returns a list of general named entities in a given document. For the list of supported entity types, check &lt;a href="https://aka.ms/taner"&gt;Supported Entity Types in Text Analytics API&lt;/a&gt;. For the list of enabled languages, check &lt;a href="https://aka.ms/talangs"&gt;Supported languages in Text Analytics API&lt;/a&gt;.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain input and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /entities/recognition/generalWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput, String modelVersion, Boolean showStats) {
        return service./entities/recognition/general(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Entities containing personal information
     * The API returns a list of personal information entities (\"SSN\", \"Bank Account\" etc) in the document. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /entities/recognition/piiWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput) {
        final String modelVersion = null;
        final Boolean showStats = null;
        return service./entities/recognition/pii(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Entities containing personal information
     * The API returns a list of personal information entities (\"SSN\", \"Bank Account\" etc) in the document. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain input and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /entities/recognition/piiWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput, String modelVersion, Boolean showStats) {
        return service./entities/recognition/pii(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Linked entities from a well-known knowledge base
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /entities/linkingWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput) {
        final String modelVersion = null;
        final Boolean showStats = null;
        return service./entities/linking(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Linked entities from a well-known knowledge base
     * The API returns a list of recognized entities with links to a well-known knowledge base. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain input and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /entities/linkingWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput, String modelVersion, Boolean showStats) {
        return service./entities/linking(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Key Phrases
     * The API returns a list of strings denoting the key phrases in the input text. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze. Documents can now contain a language field to indicate the text language.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /keyPhrasesWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput) {
        final String modelVersion = null;
        final Boolean showStats = null;
        return service./keyPhrases(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Key Phrases
     * The API returns a list of strings denoting the key phrases in the input text. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze. Documents can now contain a language field to indicate the text language.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain input and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /keyPhrasesWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput, String modelVersion, Boolean showStats) {
        return service./keyPhrases(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Detect Language
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param languageBatchInput Collection of documents to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /languagesWithRestResponseAsync(LanguageBatchInput languageBatchInput) {
        final String modelVersion = null;
        final Boolean showStats = null;
        return service./languages(this.getEndpoint(), modelVersion, showStats, languageBatchInput);
    }

    /**
     * Detect Language
     * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1 indicate 100% certainty that the identified language is true. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param languageBatchInput Collection of documents to analyze.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain input and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /languagesWithRestResponseAsync(LanguageBatchInput languageBatchInput, String modelVersion, Boolean showStats) {
        return service./languages(this.getEndpoint(), modelVersion, showStats, languageBatchInput);
    }

    /**
     * Sentiment
     * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /sentimentWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput) {
        final String modelVersion = null;
        final Boolean showStats = null;
        return service./sentiment(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }

    /**
     * Sentiment
     * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class (Positive, Negative, and Neutral) for the document and each sentence within it. See the &amp;lt;a href="https://aka.ms/talangs"&amp;gt;Supported languages in Text Analytics API&amp;lt;/a&amp;gt; for the list of enabled languages.
     *
     * @param multiLanguageBatchInput Collection of documents to analyze.
     * @param modelVersion (Optional) This value indicates which model will be used for scoring. If a model-version is not specified, the API should default to the latest, non-preview version.
     * @param showStats (Optional) if set to true, response will contain input and document level statistics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @return a Mono which performs the network request upon subscription.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<Object>> /sentimentWithRestResponseAsync(MultiLanguageBatchInput multiLanguageBatchInput, String modelVersion, Boolean showStats) {
        return service./sentiment(this.getEndpoint(), modelVersion, showStats, multiLanguageBatchInput);
    }
}
