/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring;

import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AppVersionSettingObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import java.io.IOException;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Settings.
 */
public interface Settings {

    /**
     * Gets the settings in a version of the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AppVersionSettingObject&gt; object if successful.
     */
    List<AppVersionSettingObject> list(UUID appId, String versionId);

    /**
     * Gets the settings in a version of the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AppVersionSettingObject&gt; object
     */
    Observable<List<AppVersionSettingObject>> listAsync(UUID appId, String versionId);



    /**
     * Updates the settings in a version of the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listOfAppVersionSettingObject A list of the updated application version settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus update(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject);

    /**
     * Updates the settings in a version of the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listOfAppVersionSettingObject A list of the updated application version settings.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateAsync(UUID appId, String versionId, List<AppVersionSettingObject> listOfAppVersionSettingObject);


}
