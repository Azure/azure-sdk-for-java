/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.cognitiveservices.language.luis.authoring;

import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListIntentsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddEntityOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListHierarchicalEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListCompositeEntitiesOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListClosedListsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListPrebuiltsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ListModelsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExamplesMethodOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.DeleteIntentOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatchClosedListOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetIntentSuggestionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetEntitySuggestionsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCustomPrebuiltDomainModelsOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddHierarchicalEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddCompositeEntityChildOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetRegexEntityInfosOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.GetPatternAnyEntityInfosOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateClosedListEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateRegexEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCompositeEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreatePatternAnyEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateHierarchicalEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CreateCustomPrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AddExplicitListItemOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateClosedListEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateRegexEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCompositeEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdatePatternAnyEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateHierarchicalEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateCustomPrebuiltEntityRoleOptionalParameter;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.UpdateExplicitListItemOptionalParameter;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.AvailablePrebuiltEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ClosedListModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CompositeEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.CustomPrebuiltModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntitiesSuggestionExample;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.EntityRole;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ErrorResponseException;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ExplicitListItem;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalChildEntity;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.HierarchicalEntityModel;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentClassifier;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.IntentsSuggestionExample;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.LabelTextObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.ModelInfoResponse;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.OperationStatus;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PatternAnyModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltDomainModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.PrebuiltEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexEntityExtractor;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelCreateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.RegexModelUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListBaseUpdateObject;
import com.microsoft.azure.cognitiveservices.language.luis.authoring.models.WordListObject;
import java.util.List;
import java.util.UUID;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Models.
 */
public interface Models {
    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID addIntent(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter);

    /**
     * Adds an intent classifier to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> addIntentAsync(UUID appId, String versionId, AddIntentOptionalParameter addIntentOptionalParameter);

    /**
     * Adds an intent classifier to the application.
     *
     * @return the first stage of the addIntent call
     */
    ModelsAddIntentDefinitionStages.WithAppId addIntent();

    /**
     * Grouping of addIntent definition stages.
     */
    interface ModelsAddIntentDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsAddIntentDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Name of the new entity extractor.
             *
             * @return next definition stage
             */
            ModelsAddIntentDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsAddIntentDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of addIntent definition.
     */
    interface ModelsAddIntentDefinition extends
        ModelsAddIntentDefinitionStages.WithAppId,
        ModelsAddIntentDefinitionStages.WithVersionId,
        ModelsAddIntentDefinitionStages.WithExecute {
    }

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentClassifier&gt; object if successful.
     */
    @Deprecated
    List<IntentClassifier> listIntents(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter);

    /**
     * Gets information about the intent models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listIntentsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    @Deprecated
    Observable<List<IntentClassifier>> listIntentsAsync(UUID appId, String versionId, ListIntentsOptionalParameter listIntentsOptionalParameter);

    /**
     * Gets information about the intent models.
     *
     * @return the first stage of the listIntents call
     */
    ModelsListIntentsDefinitionStages.WithAppId listIntents();

    /**
     * Grouping of listIntents definition stages.
     */
    interface ModelsListIntentsDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListIntentsDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListIntentsDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListIntentsDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListIntentsDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;IntentClassifier&gt; object if successful.
             */
            List<IntentClassifier> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;IntentClassifier&gt; object
             */
            Observable<List<IntentClassifier>> executeAsync();
        }
    }

    /**
     * The entirety of listIntents definition.
     */
    interface ModelsListIntentsDefinition extends
        ModelsListIntentsDefinitionStages.WithAppId,
        ModelsListIntentsDefinitionStages.WithVersionId,
        ModelsListIntentsDefinitionStages.WithExecute {
    }

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID addEntity(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter);

    /**
     * Adds an entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> addEntityAsync(UUID appId, String versionId, AddEntityOptionalParameter addEntityOptionalParameter);

    /**
     * Adds an entity extractor to the application.
     *
     * @return the first stage of the addEntity call
     */
    ModelsAddEntityDefinitionStages.WithAppId addEntity();

    /**
     * Grouping of addEntity definition stages.
     */
    interface ModelsAddEntityDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsAddEntityDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Name of the new entity extractor.
             *
             * @return next definition stage
             */
            ModelsAddEntityDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsAddEntityDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of addEntity definition.
     */
    interface ModelsAddEntityDefinition extends
        ModelsAddEntityDefinitionStages.WithAppId,
        ModelsAddEntityDefinitionStages.WithVersionId,
        ModelsAddEntityDefinitionStages.WithExecute {
    }

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<EntityExtractor> listEntities(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter);

    /**
     * Gets information about the entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<EntityExtractor>> listEntitiesAsync(UUID appId, String versionId, ListEntitiesOptionalParameter listEntitiesOptionalParameter);

    /**
     * Gets information about the entity models.
     *
     * @return the first stage of the listEntities call
     */
    ModelsListEntitiesDefinitionStages.WithAppId listEntities();

    /**
     * Grouping of listEntities definition stages.
     */
    interface ModelsListEntitiesDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListEntitiesDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListEntitiesDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListEntitiesDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListEntitiesDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;EntityExtractor&gt; object if successful.
             */
            List<EntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;EntityExtractor&gt; object
             */
            Observable<List<EntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of listEntities definition.
     */
    interface ModelsListEntitiesDefinition extends
        ModelsListEntitiesDefinitionStages.WithAppId,
        ModelsListEntitiesDefinitionStages.WithVersionId,
        ModelsListEntitiesDefinitionStages.WithExecute {
    }


    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addHierarchicalEntity(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject);

    /**
     * Adds a hierarchical entity extractor to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hierarchicalModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addHierarchicalEntityAsync(UUID appId, String versionId, HierarchicalEntityModel hierarchicalModelCreateObject);


    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;HierarchicalEntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<HierarchicalEntityExtractor> listHierarchicalEntities(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter);

    /**
     * Gets information about the hierarchical entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listHierarchicalEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;HierarchicalEntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<HierarchicalEntityExtractor>> listHierarchicalEntitiesAsync(UUID appId, String versionId, ListHierarchicalEntitiesOptionalParameter listHierarchicalEntitiesOptionalParameter);

    /**
     * Gets information about the hierarchical entity models.
     *
     * @return the first stage of the listHierarchicalEntities call
     */
    ModelsListHierarchicalEntitiesDefinitionStages.WithAppId listHierarchicalEntities();

    /**
     * Grouping of listHierarchicalEntities definition stages.
     */
    interface ModelsListHierarchicalEntitiesDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListHierarchicalEntitiesDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListHierarchicalEntitiesDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListHierarchicalEntitiesDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListHierarchicalEntitiesDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;HierarchicalEntityExtractor&gt; object if successful.
             */
            List<HierarchicalEntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;HierarchicalEntityExtractor&gt; object
             */
            Observable<List<HierarchicalEntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of listHierarchicalEntities definition.
     */
    interface ModelsListHierarchicalEntitiesDefinition extends
        ModelsListHierarchicalEntitiesDefinitionStages.WithAppId,
        ModelsListHierarchicalEntitiesDefinitionStages.WithVersionId,
        ModelsListHierarchicalEntitiesDefinitionStages.WithExecute {
    }


    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCompositeEntity(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject);

    /**
     * Adds a composite entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param compositeModelCreateObject A model containing the name and children of the new entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCompositeEntityAsync(UUID appId, String versionId, CompositeEntityModel compositeModelCreateObject);


    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CompositeEntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<CompositeEntityExtractor> listCompositeEntities(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter);

    /**
     * Gets information about the composite entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listCompositeEntitiesOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CompositeEntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<CompositeEntityExtractor>> listCompositeEntitiesAsync(UUID appId, String versionId, ListCompositeEntitiesOptionalParameter listCompositeEntitiesOptionalParameter);

    /**
     * Gets information about the composite entity models.
     *
     * @return the first stage of the listCompositeEntities call
     */
    ModelsListCompositeEntitiesDefinitionStages.WithAppId listCompositeEntities();

    /**
     * Grouping of listCompositeEntities definition stages.
     */
    interface ModelsListCompositeEntitiesDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListCompositeEntitiesDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListCompositeEntitiesDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListCompositeEntitiesDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListCompositeEntitiesDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;CompositeEntityExtractor&gt; object if successful.
             */
            List<CompositeEntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;CompositeEntityExtractor&gt; object
             */
            Observable<List<CompositeEntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of listCompositeEntities definition.
     */
    interface ModelsListCompositeEntitiesDefinition extends
        ModelsListCompositeEntitiesDefinitionStages.WithAppId,
        ModelsListCompositeEntitiesDefinitionStages.WithVersionId,
        ModelsListCompositeEntitiesDefinitionStages.WithExecute {
    }

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ClosedListEntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<ClosedListEntityExtractor> listClosedLists(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter);

    /**
     * Gets information about the closedlist models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listClosedListsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ClosedListEntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<ClosedListEntityExtractor>> listClosedListsAsync(UUID appId, String versionId, ListClosedListsOptionalParameter listClosedListsOptionalParameter);

    /**
     * Gets information about the closedlist models.
     *
     * @return the first stage of the listClosedLists call
     */
    ModelsListClosedListsDefinitionStages.WithAppId listClosedLists();

    /**
     * Grouping of listClosedLists definition stages.
     */
    interface ModelsListClosedListsDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListClosedListsDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListClosedListsDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListClosedListsDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListClosedListsDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;ClosedListEntityExtractor&gt; object if successful.
             */
            List<ClosedListEntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;ClosedListEntityExtractor&gt; object
             */
            Observable<List<ClosedListEntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of listClosedLists definition.
     */
    interface ModelsListClosedListsDefinition extends
        ModelsListClosedListsDefinitionStages.WithAppId,
        ModelsListClosedListsDefinitionStages.WithVersionId,
        ModelsListClosedListsDefinitionStages.WithExecute {
    }


    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addClosedList(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject);

    /**
     * Adds a closed list model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param closedListModelCreateObject A model containing the name and words for the new closed list entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addClosedListAsync(UUID appId, String versionId, ClosedListModelCreateObject closedListModelCreateObject);



    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
     */
    List<PrebuiltEntityExtractor> addPrebuilt(UUID appId, String versionId, List<String> prebuiltExtractorNames);

    /**
     * Adds a list of prebuilt entity extractors to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltExtractorNames An array of prebuilt entity extractor names.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    Observable<List<PrebuiltEntityExtractor>> addPrebuiltAsync(UUID appId, String versionId, List<String> prebuiltExtractorNames);


    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<PrebuiltEntityExtractor> listPrebuilts(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter);

    /**
     * Gets information about the prebuilt entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listPrebuiltsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<PrebuiltEntityExtractor>> listPrebuiltsAsync(UUID appId, String versionId, ListPrebuiltsOptionalParameter listPrebuiltsOptionalParameter);

    /**
     * Gets information about the prebuilt entity models.
     *
     * @return the first stage of the listPrebuilts call
     */
    ModelsListPrebuiltsDefinitionStages.WithAppId listPrebuilts();

    /**
     * Grouping of listPrebuilts definition stages.
     */
    interface ModelsListPrebuiltsDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListPrebuiltsDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListPrebuiltsDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListPrebuiltsDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListPrebuiltsDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;PrebuiltEntityExtractor&gt; object if successful.
             */
            List<PrebuiltEntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;PrebuiltEntityExtractor&gt; object
             */
            Observable<List<PrebuiltEntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of listPrebuilts definition.
     */
    interface ModelsListPrebuiltsDefinition extends
        ModelsListPrebuiltsDefinitionStages.WithAppId,
        ModelsListPrebuiltsDefinitionStages.WithVersionId,
        ModelsListPrebuiltsDefinitionStages.WithExecute {
    }


    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;AvailablePrebuiltEntityModel&gt; object if successful.
     */
    List<AvailablePrebuiltEntityModel> listPrebuiltEntities(UUID appId, String versionId);

    /**
     * Gets all the available prebuilt entity extractors for the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;AvailablePrebuiltEntityModel&gt; object
     */
    Observable<List<AvailablePrebuiltEntityModel>> listPrebuiltEntitiesAsync(UUID appId, String versionId);


    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ModelInfoResponse&gt; object if successful.
     */
    @Deprecated
    List<ModelInfoResponse> listModels(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter);

    /**
     * Gets information about the application version models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param listModelsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ModelInfoResponse&gt; object
     */
    @Deprecated
    Observable<List<ModelInfoResponse>> listModelsAsync(UUID appId, String versionId, ListModelsOptionalParameter listModelsOptionalParameter);

    /**
     * Gets information about the application version models.
     *
     * @return the first stage of the listModels call
     */
    ModelsListModelsDefinitionStages.WithAppId listModels();

    /**
     * Grouping of listModels definition stages.
     */
    interface ModelsListModelsDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsListModelsDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsListModelsDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsListModelsDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsListModelsDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;ModelInfoResponse&gt; object if successful.
             */
            List<ModelInfoResponse> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;ModelInfoResponse&gt; object
             */
            Observable<List<ModelInfoResponse>> executeAsync();
        }
    }

    /**
     * The entirety of listModels definition.
     */
    interface ModelsListModelsDefinition extends
        ModelsListModelsDefinitionStages.WithAppId,
        ModelsListModelsDefinitionStages.WithVersionId,
        ModelsListModelsDefinitionStages.WithExecute {
    }

    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param examplesMethodOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;LabelTextObject&gt; object if successful.
     */
    @Deprecated
    List<LabelTextObject> examplesMethod(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter);

    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param modelId The ID (GUID) of the model.
     * @param examplesMethodOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;LabelTextObject&gt; object
     */
    @Deprecated
    Observable<List<LabelTextObject>> examplesMethodAsync(UUID appId, String versionId, String modelId, ExamplesMethodOptionalParameter examplesMethodOptionalParameter);

    /**
     * Gets the utterances for the given model in the given app version.
     *
     * @return the first stage of the examplesMethod call
     */
    ModelsExamplesMethodDefinitionStages.WithAppId examplesMethod();

    /**
     * Grouping of examplesMethod definition stages.
     */
    interface ModelsExamplesMethodDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithModelId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify modelId.
         */
        interface WithModelId {
            /**
             * The ID (GUID) of the model.
             *
             * @return next definition stage
             */
            ModelsExamplesMethodDefinitionStages.WithExecute withModelId(String modelId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsExamplesMethodDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsExamplesMethodDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsExamplesMethodDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;LabelTextObject&gt; object if successful.
             */
            List<LabelTextObject> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;LabelTextObject&gt; object
             */
            Observable<List<LabelTextObject>> executeAsync();
        }
    }

    /**
     * The entirety of examplesMethod definition.
     */
    interface ModelsExamplesMethodDefinition extends
        ModelsExamplesMethodDefinitionStages.WithAppId,
        ModelsExamplesMethodDefinitionStages.WithVersionId,
        ModelsExamplesMethodDefinitionStages.WithModelId,
        ModelsExamplesMethodDefinitionStages.WithExecute {
    }


    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IntentClassifier object if successful.
     */
    IntentClassifier getIntent(UUID appId, String versionId, UUID intentId);

    /**
     * Gets information about the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IntentClassifier object
     */
    Observable<IntentClassifier> getIntentAsync(UUID appId, String versionId, UUID intentId);


    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateIntent(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter);

    /**
     * Updates the name of an intent classifier.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param updateIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateIntentAsync(UUID appId, String versionId, UUID intentId, UpdateIntentOptionalParameter updateIntentOptionalParameter);

    /**
     * Updates the name of an intent classifier.
     *
     * @return the first stage of the updateIntent call
     */
    ModelsUpdateIntentDefinitionStages.WithAppId updateIntent();

    /**
     * Grouping of updateIntent definition stages.
     */
    interface ModelsUpdateIntentDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithIntentId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify intentId.
         */
        interface WithIntentId {
            /**
             * The intent classifier ID.
             *
             * @return next definition stage
             */
            ModelsUpdateIntentDefinitionStages.WithExecute withIntentId(UUID intentId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity's new name.
             *
             * @return next definition stage
             */
            ModelsUpdateIntentDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateIntentDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateIntent definition.
     */
    interface ModelsUpdateIntentDefinition extends
        ModelsUpdateIntentDefinitionStages.WithAppId,
        ModelsUpdateIntentDefinitionStages.WithVersionId,
        ModelsUpdateIntentDefinitionStages.WithIntentId,
        ModelsUpdateIntentDefinitionStages.WithExecute {
    }

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus deleteIntent(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter);

    /**
     * Deletes an intent classifier from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param deleteIntentOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> deleteIntentAsync(UUID appId, String versionId, UUID intentId, DeleteIntentOptionalParameter deleteIntentOptionalParameter);

    /**
     * Deletes an intent classifier from the application.
     *
     * @return the first stage of the deleteIntent call
     */
    ModelsDeleteIntentDefinitionStages.WithAppId deleteIntent();

    /**
     * Grouping of deleteIntent definition stages.
     */
    interface ModelsDeleteIntentDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithIntentId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify intentId.
         */
        interface WithIntentId {
            /**
             * The intent classifier ID.
             *
             * @return next definition stage
             */
            ModelsDeleteIntentDefinitionStages.WithExecute withIntentId(UUID intentId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Also delete the intent's utterances (true). Or move the utterances to the None intent (false - the default
             *   value).
             *
             * @return next definition stage
             */
            ModelsDeleteIntentDefinitionStages.WithExecute withDeleteUtterances(Boolean deleteUtterances);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsDeleteIntentDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of deleteIntent definition.
     */
    interface ModelsDeleteIntentDefinition extends
        ModelsDeleteIntentDefinitionStages.WithAppId,
        ModelsDeleteIntentDefinitionStages.WithVersionId,
        ModelsDeleteIntentDefinitionStages.WithIntentId,
        ModelsDeleteIntentDefinitionStages.WithExecute {
    }


    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityExtractor object if successful.
     */
    EntityExtractor getEntity(UUID appId, String versionId, UUID entityId);

    /**
     * Gets information about the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityExtractor object
     */
    Observable<EntityExtractor> getEntityAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateEntity(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter);

    /**
     * Updates the name of an entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @param updateEntityOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateEntityAsync(UUID appId, String versionId, UUID entityId, UpdateEntityOptionalParameter updateEntityOptionalParameter);

    /**
     * Updates the name of an entity extractor.
     *
     * @return the first stage of the updateEntity call
     */
    ModelsUpdateEntityDefinitionStages.WithAppId updateEntity();

    /**
     * Grouping of updateEntity definition stages.
     */
    interface ModelsUpdateEntityDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity extractor ID.
             *
             * @return next definition stage
             */
            ModelsUpdateEntityDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity's new name.
             *
             * @return next definition stage
             */
            ModelsUpdateEntityDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateEntityDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateEntity definition.
     */
    interface ModelsUpdateEntityDefinition extends
        ModelsUpdateEntityDefinitionStages.WithAppId,
        ModelsUpdateEntityDefinitionStages.WithVersionId,
        ModelsUpdateEntityDefinitionStages.WithEntityId,
        ModelsUpdateEntityDefinitionStages.WithExecute {
    }


    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteEntity(UUID appId, String versionId, UUID entityId);

    /**
     * Deletes an entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteEntityAsync(UUID appId, String versionId, UUID entityId);



    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HierarchicalEntityExtractor object if successful.
     */
    HierarchicalEntityExtractor getHierarchicalEntity(UUID appId, String versionId, UUID hEntityId);

    /**
     * Gets information about the hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalEntityExtractor object
     */
    Observable<HierarchicalEntityExtractor> getHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId);



    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateHierarchicalEntity(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject);

    /**
     * Updates the name and children of a hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hierarchicalModelUpdateObject Model containing names of the children of the hierarchical entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId, HierarchicalEntityModel hierarchicalModelUpdateObject);



    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteHierarchicalEntity(UUID appId, String versionId, UUID hEntityId);

    /**
     * Deletes a hierarchical entity extractor from the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteHierarchicalEntityAsync(UUID appId, String versionId, UUID hEntityId);



    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CompositeEntityExtractor object if successful.
     */
    CompositeEntityExtractor getCompositeEntity(UUID appId, String versionId, UUID cEntityId);

    /**
     * Gets information about the composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CompositeEntityExtractor object
     */
    Observable<CompositeEntityExtractor> getCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId);



    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateCompositeEntity(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject);

    /**
     * Updates the composite entity extractor.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param compositeModelUpdateObject A model object containing the new entity extractor name and children.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId, CompositeEntityModel compositeModelUpdateObject);



    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCompositeEntity(UUID appId, String versionId, UUID cEntityId);

    /**
     * Deletes a composite entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCompositeEntityAsync(UUID appId, String versionId, UUID cEntityId);



    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ClosedListEntityExtractor object if successful.
     */
    ClosedListEntityExtractor getClosedList(UUID appId, String versionId, UUID clEntityId);

    /**
     * Gets information of a closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ClosedListEntityExtractor object
     */
    Observable<ClosedListEntityExtractor> getClosedListAsync(UUID appId, String versionId, UUID clEntityId);



    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateClosedList(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject);

    /**
     * Updates the closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param closedListModelUpdateObject The new entity name and words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateClosedListAsync(UUID appId, String versionId, UUID clEntityId, ClosedListModelUpdateObject closedListModelUpdateObject);


    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus patchClosedList(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter);

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @param patchClosedListOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> patchClosedListAsync(UUID appId, String versionId, UUID clEntityId, PatchClosedListOptionalParameter patchClosedListOptionalParameter);

    /**
     * Adds a batch of sublists to an existing closedlist.
     *
     * @return the first stage of the patchClosedList call
     */
    ModelsPatchClosedListDefinitionStages.WithAppId patchClosedList();

    /**
     * Grouping of patchClosedList definition stages.
     */
    interface ModelsPatchClosedListDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithClEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify clEntityId.
         */
        interface WithClEntityId {
            /**
             * The closed list model ID.
             *
             * @return next definition stage
             */
            ModelsPatchClosedListDefinitionStages.WithExecute withClEntityId(UUID clEntityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * Sublists to add.
             *
             * @return next definition stage
             */
            ModelsPatchClosedListDefinitionStages.WithExecute withSubLists(List<WordListObject> subLists);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsPatchClosedListDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of patchClosedList definition.
     */
    interface ModelsPatchClosedListDefinition extends
        ModelsPatchClosedListDefinitionStages.WithAppId,
        ModelsPatchClosedListDefinitionStages.WithVersionId,
        ModelsPatchClosedListDefinitionStages.WithClEntityId,
        ModelsPatchClosedListDefinitionStages.WithExecute {
    }


    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteClosedList(UUID appId, String versionId, UUID clEntityId);

    /**
     * Deletes a closed list model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteClosedListAsync(UUID appId, String versionId, UUID clEntityId);



    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrebuiltEntityExtractor object if successful.
     */
    PrebuiltEntityExtractor getPrebuilt(UUID appId, String versionId, UUID prebuiltId);

    /**
     * Gets information about the prebuilt entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrebuiltEntityExtractor object
     */
    Observable<PrebuiltEntityExtractor> getPrebuiltAsync(UUID appId, String versionId, UUID prebuiltId);



    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePrebuilt(UUID appId, String versionId, UUID prebuiltId);

    /**
     * Deletes a prebuilt entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltId The prebuilt entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePrebuiltAsync(UUID appId, String versionId, UUID prebuiltId);



    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteSubList(UUID appId, String versionId, UUID clEntityId, int subListId);

    /**
     * Deletes a sublist of a specific closed list model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId);



    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateSubList(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject);

    /**
     * Updates one of the closed list's sublists.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param subListId The sublist ID.
     * @param wordListBaseUpdateObject A sublist update object containing the new canonical form and the list of words.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateSubListAsync(UUID appId, String versionId, UUID clEntityId, int subListId, WordListBaseUpdateObject wordListBaseUpdateObject);


    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentsSuggestionExample&gt; object if successful.
     */
    @Deprecated
    List<IntentsSuggestionExample> getIntentSuggestions(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter);

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param intentId The intent classifier ID.
     * @param getIntentSuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentsSuggestionExample&gt; object
     */
    @Deprecated
    Observable<List<IntentsSuggestionExample>> getIntentSuggestionsAsync(UUID appId, String versionId, UUID intentId, GetIntentSuggestionsOptionalParameter getIntentSuggestionsOptionalParameter);

    /**
     * Suggests examples that would improve the accuracy of the intent model.
     *
     * @return the first stage of the getIntentSuggestions call
     */
    ModelsGetIntentSuggestionsDefinitionStages.WithAppId getIntentSuggestions();

    /**
     * Grouping of getIntentSuggestions definition stages.
     */
    interface ModelsGetIntentSuggestionsDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithIntentId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify intentId.
         */
        interface WithIntentId {
            /**
             * The intent classifier ID.
             *
             * @return next definition stage
             */
            ModelsGetIntentSuggestionsDefinitionStages.WithExecute withIntentId(UUID intentId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsGetIntentSuggestionsDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsGetIntentSuggestionsDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;IntentsSuggestionExample&gt; object if successful.
             */
            List<IntentsSuggestionExample> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;IntentsSuggestionExample&gt; object
             */
            Observable<List<IntentsSuggestionExample>> executeAsync();
        }
    }

    /**
     * The entirety of getIntentSuggestions definition.
     */
    interface ModelsGetIntentSuggestionsDefinition extends
        ModelsGetIntentSuggestionsDefinitionStages.WithAppId,
        ModelsGetIntentSuggestionsDefinitionStages.WithVersionId,
        ModelsGetIntentSuggestionsDefinitionStages.WithIntentId,
        ModelsGetIntentSuggestionsDefinitionStages.WithExecute {
    }

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntitiesSuggestionExample&gt; object if successful.
     */
    @Deprecated
    List<EntitiesSuggestionExample> getEntitySuggestions(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter);

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The target entity extractor model to enhance.
     * @param getEntitySuggestionsOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntitiesSuggestionExample&gt; object
     */
    @Deprecated
    Observable<List<EntitiesSuggestionExample>> getEntitySuggestionsAsync(UUID appId, String versionId, UUID entityId, GetEntitySuggestionsOptionalParameter getEntitySuggestionsOptionalParameter);

    /**
     * Get suggestion examples that would improve the accuracy of the entity model.
     *
     * @return the first stage of the getEntitySuggestions call
     */
    ModelsGetEntitySuggestionsDefinitionStages.WithAppId getEntitySuggestions();

    /**
     * Grouping of getEntitySuggestions definition stages.
     */
    interface ModelsGetEntitySuggestionsDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The target entity extractor model to enhance.
             *
             * @return next definition stage
             */
            ModelsGetEntitySuggestionsDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsGetEntitySuggestionsDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsGetEntitySuggestionsDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;EntitiesSuggestionExample&gt; object if successful.
             */
            List<EntitiesSuggestionExample> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;EntitiesSuggestionExample&gt; object
             */
            Observable<List<EntitiesSuggestionExample>> executeAsync();
        }
    }

    /**
     * The entirety of getEntitySuggestions definition.
     */
    interface ModelsGetEntitySuggestionsDefinition extends
        ModelsGetEntitySuggestionsDefinitionStages.WithAppId,
        ModelsGetEntitySuggestionsDefinitionStages.WithVersionId,
        ModelsGetEntitySuggestionsDefinitionStages.WithEntityId,
        ModelsGetEntitySuggestionsDefinitionStages.WithExecute {
    }


    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    int addSubList(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject);

    /**
     * Adds a list to an existing closed list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param clEntityId The closed list entity extractor ID.
     * @param wordListCreateObject Words list.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    Observable<Integer> addSubListAsync(UUID appId, String versionId, UUID clEntityId, WordListObject wordListCreateObject);


    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;UUID&gt; object if successful.
     */
    @Deprecated
    List<UUID> addCustomPrebuiltDomain(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter);

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param addCustomPrebuiltDomainOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;UUID&gt; object
     */
    @Deprecated
    Observable<List<UUID>> addCustomPrebuiltDomainAsync(UUID appId, String versionId, AddCustomPrebuiltDomainModelsOptionalParameter addCustomPrebuiltDomainOptionalParameter);

    /**
     * Adds a customizable prebuilt domain along with all of its models to this application.
     *
     * @return the first stage of the addCustomPrebuiltDomain call
     */
    ModelsAddCustomPrebuiltDomainDefinitionStages.WithAppId addCustomPrebuiltDomain();

    /**
     * Grouping of addCustomPrebuiltDomain definition stages.
     */
    interface ModelsAddCustomPrebuiltDomainDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsAddCustomPrebuiltDomainDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The domain name.
             *
             * @return next definition stage
             */
            ModelsAddCustomPrebuiltDomainDefinitionStages.WithExecute withDomainName(String domainName);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsAddCustomPrebuiltDomainDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;UUID&gt; object if successful.
             */
            List<UUID> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;UUID&gt; object
             */
            Observable<List<UUID>> executeAsync();
        }
    }

    /**
     * The entirety of addCustomPrebuiltDomain definition.
     */
    interface ModelsAddCustomPrebuiltDomainDefinition extends
        ModelsAddCustomPrebuiltDomainDefinitionStages.WithAppId,
        ModelsAddCustomPrebuiltDomainDefinitionStages.WithVersionId,
        ModelsAddCustomPrebuiltDomainDefinitionStages.WithExecute {
    }


    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCustomPrebuiltIntent(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);

    /**
     * Adds a custom prebuilt intent model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt intent and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCustomPrebuiltIntentAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);



    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;IntentClassifier&gt; object if successful.
     */
    List<IntentClassifier> listCustomPrebuiltIntents(UUID appId, String versionId);

    /**
     * Gets custom prebuilt intents information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;IntentClassifier&gt; object
     */
    Observable<List<IntentClassifier>> listCustomPrebuiltIntentsAsync(UUID appId, String versionId);



    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID addCustomPrebuiltEntity(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);

    /**
     * Adds a custom prebuilt entity model to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param prebuiltDomainModelCreateObject A model object containing the name of the custom prebuilt entity and the name of the domain to
      *  which this model belongs.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> addCustomPrebuiltEntityAsync(UUID appId, String versionId, PrebuiltDomainModelCreateObject prebuiltDomainModelCreateObject);



    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityExtractor&gt; object if successful.
     */
    List<EntityExtractor> listCustomPrebuiltEntities(UUID appId, String versionId);

    /**
     * Gets all custom prebuilt entities information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityExtractor&gt; object
     */
    Observable<List<EntityExtractor>> listCustomPrebuiltEntitiesAsync(UUID appId, String versionId);



    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;CustomPrebuiltModel&gt; object if successful.
     */
    List<CustomPrebuiltModel> listCustomPrebuiltModels(UUID appId, String versionId);

    /**
     * Gets all custom prebuilt models information of this application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;CustomPrebuiltModel&gt; object
     */
    Observable<List<CustomPrebuiltModel>> listCustomPrebuiltModelsAsync(UUID appId, String versionId);



    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCustomPrebuiltDomain(UUID appId, String versionId, String domainName);

    /**
     * Deletes a prebuilt domain's models from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCustomPrebuiltDomainAsync(UUID appId, String versionId, String domainName);



    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the HierarchicalChildEntity object if successful.
     */
    HierarchicalChildEntity getHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId);

    /**
     * Gets information about the hierarchical entity child model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the HierarchicalChildEntity object
     */
    Observable<HierarchicalChildEntity> getHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId);


    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter);

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @param updateHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId, UpdateHierarchicalEntityChildOptionalParameter updateHierarchicalEntityChildOptionalParameter);

    /**
     * Renames a single child in an existing hierarchical entity model.
     *
     * @return the first stage of the updateHierarchicalEntityChild call
     */
    ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAppId updateHierarchicalEntityChild();

    /**
     * Grouping of updateHierarchicalEntityChild definition stages.
     */
    interface ModelsUpdateHierarchicalEntityChildDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithHEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify hEntityId.
         */
        interface WithHEntityId {
            /**
             * The hierarchical entity extractor ID.
             *
             * @return next definition stage
             */
            WithHChildId withHEntityId(UUID hEntityId);
        }
        /**
         * The stage of the definition to be specify hChildId.
         */
        interface WithHChildId {
            /**
             * The hierarchical entity extractor child ID.
             *
             * @return next definition stage
             */
            ModelsUpdateHierarchicalEntityChildDefinitionStages.WithExecute withHChildId(UUID hChildId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             *
             *
             * @return next definition stage
             */
            ModelsUpdateHierarchicalEntityChildDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateHierarchicalEntityChild definition.
     */
    interface ModelsUpdateHierarchicalEntityChildDefinition extends
        ModelsUpdateHierarchicalEntityChildDefinitionStages.WithAppId,
        ModelsUpdateHierarchicalEntityChildDefinitionStages.WithVersionId,
        ModelsUpdateHierarchicalEntityChildDefinitionStages.WithHEntityId,
        ModelsUpdateHierarchicalEntityChildDefinitionStages.WithHChildId,
        ModelsUpdateHierarchicalEntityChildDefinitionStages.WithExecute {
    }


    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, UUID hChildId);

    /**
     * Deletes a hierarchical entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param hChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, UUID hChildId);


    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID addHierarchicalEntityChild(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param addHierarchicalEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> addHierarchicalEntityChildAsync(UUID appId, String versionId, UUID hEntityId, AddHierarchicalEntityChildOptionalParameter addHierarchicalEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing hierarchical entity model.
     *
     * @return the first stage of the addHierarchicalEntityChild call
     */
    ModelsAddHierarchicalEntityChildDefinitionStages.WithAppId addHierarchicalEntityChild();

    /**
     * Grouping of addHierarchicalEntityChild definition stages.
     */
    interface ModelsAddHierarchicalEntityChildDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithHEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify hEntityId.
         */
        interface WithHEntityId {
            /**
             * The hierarchical entity extractor ID.
             *
             * @return next definition stage
             */
            ModelsAddHierarchicalEntityChildDefinitionStages.WithExecute withHEntityId(UUID hEntityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             *
             *
             * @return next definition stage
             */
            ModelsAddHierarchicalEntityChildDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsAddHierarchicalEntityChildDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of addHierarchicalEntityChild definition.
     */
    interface ModelsAddHierarchicalEntityChildDefinition extends
        ModelsAddHierarchicalEntityChildDefinitionStages.WithAppId,
        ModelsAddHierarchicalEntityChildDefinitionStages.WithVersionId,
        ModelsAddHierarchicalEntityChildDefinitionStages.WithHEntityId,
        ModelsAddHierarchicalEntityChildDefinitionStages.WithExecute {
    }

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID addCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param addCompositeEntityChildOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> addCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, AddCompositeEntityChildOptionalParameter addCompositeEntityChildOptionalParameter);

    /**
     * Creates a single child in an existing composite entity model.
     *
     * @return the first stage of the addCompositeEntityChild call
     */
    ModelsAddCompositeEntityChildDefinitionStages.WithAppId addCompositeEntityChild();

    /**
     * Grouping of addCompositeEntityChild definition stages.
     */
    interface ModelsAddCompositeEntityChildDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithCEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify cEntityId.
         */
        interface WithCEntityId {
            /**
             * The composite entity extractor ID.
             *
             * @return next definition stage
             */
            ModelsAddCompositeEntityChildDefinitionStages.WithExecute withCEntityId(UUID cEntityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             *
             *
             * @return next definition stage
             */
            ModelsAddCompositeEntityChildDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsAddCompositeEntityChildDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of addCompositeEntityChild definition.
     */
    interface ModelsAddCompositeEntityChildDefinition extends
        ModelsAddCompositeEntityChildDefinitionStages.WithAppId,
        ModelsAddCompositeEntityChildDefinitionStages.WithVersionId,
        ModelsAddCompositeEntityChildDefinitionStages.WithCEntityId,
        ModelsAddCompositeEntityChildDefinitionStages.WithExecute {
    }


    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCompositeEntityChild(UUID appId, String versionId, UUID cEntityId, UUID cChildId);

    /**
     * Deletes a composite entity extractor child from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param cChildId The hierarchical entity extractor child ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCompositeEntityChildAsync(UUID appId, String versionId, UUID cEntityId, UUID cChildId);


    /**
     * Gets information about the regex entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getRegexEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RegexEntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<RegexEntityExtractor> getRegexEntityInfos(UUID appId, String versionId, GetRegexEntityInfosOptionalParameter getRegexEntityInfosOptionalParameter);

    /**
     * Gets information about the regex entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getRegexEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RegexEntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<RegexEntityExtractor>> getRegexEntityInfosAsync(UUID appId, String versionId, GetRegexEntityInfosOptionalParameter getRegexEntityInfosOptionalParameter);

    /**
     * Gets information about the regex entity models.
     *
     * @return the first stage of the getRegexEntityInfos call
     */
    ModelsGetRegexEntityInfosDefinitionStages.WithAppId getRegexEntityInfos();

    /**
     * Grouping of getRegexEntityInfos definition stages.
     */
    interface ModelsGetRegexEntityInfosDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsGetRegexEntityInfosDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsGetRegexEntityInfosDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsGetRegexEntityInfosDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsGetRegexEntityInfosDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;RegexEntityExtractor&gt; object if successful.
             */
            List<RegexEntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;RegexEntityExtractor&gt; object
             */
            Observable<List<RegexEntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of getRegexEntityInfos definition.
     */
    interface ModelsGetRegexEntityInfosDefinition extends
        ModelsGetRegexEntityInfosDefinitionStages.WithAppId,
        ModelsGetRegexEntityInfosDefinitionStages.WithVersionId,
        ModelsGetRegexEntityInfosDefinitionStages.WithExecute {
    }


    /**
     * Adds a regex entity model to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regex entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createRegexEntityModel(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj);

    /**
     * Adds a regex entity model to the application version.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityExtractorCreateObj A model object containing the name and regex pattern for the new regex entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createRegexEntityModelAsync(UUID appId, String versionId, RegexModelCreateObject regexEntityExtractorCreateObj);


    /**
     * Get information about the Pattern.Any entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getPatternAnyEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PatternAnyEntityExtractor&gt; object if successful.
     */
    @Deprecated
    List<PatternAnyEntityExtractor> getPatternAnyEntityInfos(UUID appId, String versionId, GetPatternAnyEntityInfosOptionalParameter getPatternAnyEntityInfosOptionalParameter);

    /**
     * Get information about the Pattern.Any entity models.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param getPatternAnyEntityInfosOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PatternAnyEntityExtractor&gt; object
     */
    @Deprecated
    Observable<List<PatternAnyEntityExtractor>> getPatternAnyEntityInfosAsync(UUID appId, String versionId, GetPatternAnyEntityInfosOptionalParameter getPatternAnyEntityInfosOptionalParameter);

    /**
     * Get information about the Pattern.Any entity models.
     *
     * @return the first stage of the getPatternAnyEntityInfos call
     */
    ModelsGetPatternAnyEntityInfosDefinitionStages.WithAppId getPatternAnyEntityInfos();

    /**
     * Grouping of getPatternAnyEntityInfos definition stages.
     */
    interface ModelsGetPatternAnyEntityInfosDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            ModelsGetPatternAnyEntityInfosDefinitionStages.WithExecute withVersionId(String versionId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The number of entries to skip. Default value is 0.
             *
             * @return next definition stage
             */
            ModelsGetPatternAnyEntityInfosDefinitionStages.WithExecute withSkip(Integer skip);

            /**
             * The number of entries to return. Maximum page size is 500. Default is 100.
             *
             * @return next definition stage
             */
            ModelsGetPatternAnyEntityInfosDefinitionStages.WithExecute withTake(Integer take);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsGetPatternAnyEntityInfosDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the List&lt;PatternAnyEntityExtractor&gt; object if successful.
             */
            List<PatternAnyEntityExtractor> execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the List&lt;PatternAnyEntityExtractor&gt; object
             */
            Observable<List<PatternAnyEntityExtractor>> executeAsync();
        }
    }

    /**
     * The entirety of getPatternAnyEntityInfos definition.
     */
    interface ModelsGetPatternAnyEntityInfosDefinition extends
        ModelsGetPatternAnyEntityInfosDefinitionStages.WithAppId,
        ModelsGetPatternAnyEntityInfosDefinitionStages.WithVersionId,
        ModelsGetPatternAnyEntityInfosDefinitionStages.WithExecute {
    }


    /**
     * Adds a pattern.any entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    UUID createPatternAnyEntityModel(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject);

    /**
     * Adds a pattern.any entity extractor to the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param extractorCreateObject A model object containing the name and explicit list for the new Pattern.Any entity extractor.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    Observable<UUID> createPatternAnyEntityModelAsync(UUID appId, String versionId, PatternAnyModelCreateObject extractorCreateObject);



    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createEntityRole(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateEntityRoleOptionalParameter createEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createEntityRole call
     */
    ModelsCreateEntityRoleDefinitionStages.WithAppId createEntityRole();

    /**
     * Grouping of createEntityRole definition stages.
     */
    interface ModelsCreateEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity model ID.
             *
             * @return next definition stage
             */
            ModelsCreateEntityRoleDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreateEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreateEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createEntityRole definition.
     */
    interface ModelsCreateEntityRoleDefinition extends
        ModelsCreateEntityRoleDefinitionStages.WithAppId,
        ModelsCreateEntityRoleDefinitionStages.WithVersionId,
        ModelsCreateEntityRoleDefinitionStages.WithEntityId,
        ModelsCreateEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePrebuiltEntityRoleOptionalParameter createPrebuiltEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createPrebuiltEntityRole call
     */
    ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAppId createPrebuiltEntityRole();

    /**
     * Grouping of createPrebuiltEntityRole definition stages.
     */
    interface ModelsCreatePrebuiltEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity model ID.
             *
             * @return next definition stage
             */
            ModelsCreatePrebuiltEntityRoleDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreatePrebuiltEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createPrebuiltEntityRole definition.
     */
    interface ModelsCreatePrebuiltEntityRoleDefinition extends
        ModelsCreatePrebuiltEntityRoleDefinitionStages.WithAppId,
        ModelsCreatePrebuiltEntityRoleDefinitionStages.WithVersionId,
        ModelsCreatePrebuiltEntityRoleDefinitionStages.WithEntityId,
        ModelsCreatePrebuiltEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getClosedListEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getClosedListEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createClosedListEntityRole(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateClosedListEntityRoleOptionalParameter createClosedListEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createClosedListEntityRole call
     */
    ModelsCreateClosedListEntityRoleDefinitionStages.WithAppId createClosedListEntityRole();

    /**
     * Grouping of createClosedListEntityRole definition stages.
     */
    interface ModelsCreateClosedListEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity model ID.
             *
             * @return next definition stage
             */
            ModelsCreateClosedListEntityRoleDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreateClosedListEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreateClosedListEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createClosedListEntityRole definition.
     */
    interface ModelsCreateClosedListEntityRoleDefinition extends
        ModelsCreateClosedListEntityRoleDefinitionStages.WithAppId,
        ModelsCreateClosedListEntityRoleDefinitionStages.WithVersionId,
        ModelsCreateClosedListEntityRoleDefinitionStages.WithEntityId,
        ModelsCreateClosedListEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getRegexEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getRegexEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createRegexEntityRole(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateRegexEntityRoleOptionalParameter createRegexEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createRegexEntityRole call
     */
    ModelsCreateRegexEntityRoleDefinitionStages.WithAppId createRegexEntityRole();

    /**
     * Grouping of createRegexEntityRole definition stages.
     */
    interface ModelsCreateRegexEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity model ID.
             *
             * @return next definition stage
             */
            ModelsCreateRegexEntityRoleDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreateRegexEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreateRegexEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createRegexEntityRole definition.
     */
    interface ModelsCreateRegexEntityRoleDefinition extends
        ModelsCreateRegexEntityRoleDefinitionStages.WithAppId,
        ModelsCreateRegexEntityRoleDefinitionStages.WithVersionId,
        ModelsCreateRegexEntityRoleDefinitionStages.WithEntityId,
        ModelsCreateRegexEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getCompositeEntityRoles(UUID appId, String versionId, UUID cEntityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getCompositeEntityRolesAsync(UUID appId, String versionId, UUID cEntityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param createCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param createCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, CreateCompositeEntityRoleOptionalParameter createCompositeEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createCompositeEntityRole call
     */
    ModelsCreateCompositeEntityRoleDefinitionStages.WithAppId createCompositeEntityRole();

    /**
     * Grouping of createCompositeEntityRole definition stages.
     */
    interface ModelsCreateCompositeEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithCEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify cEntityId.
         */
        interface WithCEntityId {
            /**
             * The composite entity extractor ID.
             *
             * @return next definition stage
             */
            ModelsCreateCompositeEntityRoleDefinitionStages.WithExecute withCEntityId(UUID cEntityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreateCompositeEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreateCompositeEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createCompositeEntityRole definition.
     */
    interface ModelsCreateCompositeEntityRoleDefinition extends
        ModelsCreateCompositeEntityRoleDefinitionStages.WithAppId,
        ModelsCreateCompositeEntityRoleDefinitionStages.WithVersionId,
        ModelsCreateCompositeEntityRoleDefinitionStages.WithCEntityId,
        ModelsCreateCompositeEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getPatternAnyEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getPatternAnyEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createPatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreatePatternAnyEntityRoleOptionalParameter createPatternAnyEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createPatternAnyEntityRole call
     */
    ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAppId createPatternAnyEntityRole();

    /**
     * Grouping of createPatternAnyEntityRole definition stages.
     */
    interface ModelsCreatePatternAnyEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity model ID.
             *
             * @return next definition stage
             */
            ModelsCreatePatternAnyEntityRoleDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreatePatternAnyEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createPatternAnyEntityRole definition.
     */
    interface ModelsCreatePatternAnyEntityRoleDefinition extends
        ModelsCreatePatternAnyEntityRoleDefinitionStages.WithAppId,
        ModelsCreatePatternAnyEntityRoleDefinitionStages.WithVersionId,
        ModelsCreatePatternAnyEntityRoleDefinitionStages.WithEntityId,
        ModelsCreatePatternAnyEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getHierarchicalEntityRoles(UUID appId, String versionId, UUID hEntityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getHierarchicalEntityRolesAsync(UUID appId, String versionId, UUID hEntityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param createHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param createHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, CreateHierarchicalEntityRoleOptionalParameter createHierarchicalEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createHierarchicalEntityRole call
     */
    ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAppId createHierarchicalEntityRole();

    /**
     * Grouping of createHierarchicalEntityRole definition stages.
     */
    interface ModelsCreateHierarchicalEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithHEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify hEntityId.
         */
        interface WithHEntityId {
            /**
             * The hierarchical entity extractor ID.
             *
             * @return next definition stage
             */
            ModelsCreateHierarchicalEntityRoleDefinitionStages.WithExecute withHEntityId(UUID hEntityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreateHierarchicalEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createHierarchicalEntityRole definition.
     */
    interface ModelsCreateHierarchicalEntityRoleDefinition extends
        ModelsCreateHierarchicalEntityRoleDefinitionStages.WithAppId,
        ModelsCreateHierarchicalEntityRoleDefinitionStages.WithVersionId,
        ModelsCreateHierarchicalEntityRoleDefinitionStages.WithHEntityId,
        ModelsCreateHierarchicalEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;EntityRole&gt; object if successful.
     */
    List<EntityRole> getCustomPrebuiltEntityRoles(UUID appId, String versionId, UUID entityId);

    /**
     * Get All Entity Roles for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;EntityRole&gt; object
     */
    Observable<List<EntityRole>> getCustomPrebuiltEntityRolesAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the UUID object if successful.
     */
    @Deprecated
    UUID createCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity model ID.
     * @param createCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the UUID object
     */
    @Deprecated
    Observable<UUID> createCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, CreateCustomPrebuiltEntityRoleOptionalParameter createCustomPrebuiltEntityRoleOptionalParameter);

    /**
     * Create an entity role for an entity in the application.
     *
     * @return the first stage of the createCustomPrebuiltEntityRole call
     */
    ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAppId createCustomPrebuiltEntityRole();

    /**
     * Grouping of createCustomPrebuiltEntityRole definition stages.
     */
    interface ModelsCreateCustomPrebuiltEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity model ID.
             *
             * @return next definition stage
             */
            ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the UUID object if successful.
             */
            UUID execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the UUID object
             */
            Observable<UUID> executeAsync();
        }
    }

    /**
     * The entirety of createCustomPrebuiltEntityRole definition.
     */
    interface ModelsCreateCustomPrebuiltEntityRoleDefinition extends
        ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithAppId,
        ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithVersionId,
        ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithEntityId,
        ModelsCreateCustomPrebuiltEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;ExplicitListItem&gt; object if successful.
     */
    List<ExplicitListItem> getExplicitList(UUID appId, String versionId, UUID entityId);

    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;ExplicitListItem&gt; object
     */
    Observable<List<ExplicitListItem>> getExplicitListAsync(UUID appId, String versionId, UUID entityId);


    /**
     * Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param addExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the int object if successful.
     */
    @Deprecated
    int addExplicitListItem(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter);

    /**
     * Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param addExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the int object
     */
    @Deprecated
    Observable<Integer> addExplicitListItemAsync(UUID appId, String versionId, UUID entityId, AddExplicitListItemOptionalParameter addExplicitListItemOptionalParameter);

    /**
     * Add a new item to the explicit list for the Pattern.Any entity.
     *
     * @return the first stage of the addExplicitListItem call
     */
    ModelsAddExplicitListItemDefinitionStages.WithAppId addExplicitListItem();

    /**
     * Grouping of addExplicitListItem definition stages.
     */
    interface ModelsAddExplicitListItemDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The Pattern.Any entity extractor ID.
             *
             * @return next definition stage
             */
            ModelsAddExplicitListItemDefinitionStages.WithExecute withEntityId(UUID entityId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The explicit list item.
             *
             * @return next definition stage
             */
            ModelsAddExplicitListItemDefinitionStages.WithExecute withExplicitListItem(String explicitListItem);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsAddExplicitListItemDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the int object if successful.
             */
            int execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the int object
             */
            Observable<Integer> executeAsync();
        }
    }

    /**
     * The entirety of addExplicitListItem definition.
     */
    interface ModelsAddExplicitListItemDefinition extends
        ModelsAddExplicitListItemDefinitionStages.WithAppId,
        ModelsAddExplicitListItemDefinitionStages.WithVersionId,
        ModelsAddExplicitListItemDefinitionStages.WithEntityId,
        ModelsAddExplicitListItemDefinitionStages.WithExecute {
    }


    /**
     * Gets information of a regex entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegexEntityExtractor object if successful.
     */
    RegexEntityExtractor getRegexEntityEntityInfo(UUID appId, String versionId, UUID regexEntityId);

    /**
     * Gets information of a regex entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity model ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegexEntityExtractor object
     */
    Observable<RegexEntityExtractor> getRegexEntityEntityInfoAsync(UUID appId, String versionId, UUID regexEntityId);



    /**
     * Updates the regex entity model .
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updateRegexEntityModel(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject);

    /**
     * Updates the regex entity model .
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @param regexEntityUpdateObject An object containing the new entity name and regex pattern.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updateRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId, RegexModelUpdateObject regexEntityUpdateObject);



    /**
     * Deletes a regex entity model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteRegexEntityModel(UUID appId, String versionId, UUID regexEntityId);

    /**
     * Deletes a regex entity model from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param regexEntityId The regex entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteRegexEntityModelAsync(UUID appId, String versionId, UUID regexEntityId);



    /**
     * Gets information about the application version's Pattern.Any model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PatternAnyEntityExtractor object if successful.
     */
    PatternAnyEntityExtractor getPatternAnyEntityInfo(UUID appId, String versionId, UUID entityId);

    /**
     * Gets information about the application version's Pattern.Any model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PatternAnyEntityExtractor object
     */
    Observable<PatternAnyEntityExtractor> getPatternAnyEntityInfoAsync(UUID appId, String versionId, UUID entityId);



    /**
     * Updates the name and explicit list of a Pattern.Any entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus updatePatternAnyEntityModel(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject);

    /**
     * Updates the name and explicit list of a Pattern.Any entity model.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param patternAnyUpdateObject An object containing the explicit list of the Pattern.Any entity.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> updatePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId, PatternAnyModelUpdateObject patternAnyUpdateObject);



    /**
     * Deletes a Pattern.Any entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePatternAnyEntityModel(UUID appId, String versionId, UUID entityId);

    /**
     * Deletes a Pattern.Any entity extractor from the application.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePatternAnyEntityModelAsync(UUID appId, String versionId, UUID entityId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateEntityRoleOptionalParameter updateEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updateEntityRole call
     */
    ModelsUpdateEntityRoleDefinitionStages.WithAppId updateEntityRole();

    /**
     * Grouping of updateEntityRole definition stages.
     */
    interface ModelsUpdateEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity ID.
             *
             * @return next definition stage
             */
            WithRoleId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdateEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdateEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateEntityRole definition.
     */
    interface ModelsUpdateEntityRoleDefinition extends
        ModelsUpdateEntityRoleDefinitionStages.WithAppId,
        ModelsUpdateEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdateEntityRoleDefinitionStages.WithEntityId,
        ModelsUpdateEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdateEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updatePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updatePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePrebuiltEntityRoleOptionalParameter updatePrebuiltEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updatePrebuiltEntityRole call
     */
    ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAppId updatePrebuiltEntityRole();

    /**
     * Grouping of updatePrebuiltEntityRole definition stages.
     */
    interface ModelsUpdatePrebuiltEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity ID.
             *
             * @return next definition stage
             */
            WithRoleId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updatePrebuiltEntityRole definition.
     */
    interface ModelsUpdatePrebuiltEntityRoleDefinition extends
        ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithAppId,
        ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithEntityId,
        ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdatePrebuiltEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateClosedListEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateClosedListEntityRoleOptionalParameter updateClosedListEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updateClosedListEntityRole call
     */
    ModelsUpdateClosedListEntityRoleDefinitionStages.WithAppId updateClosedListEntityRole();

    /**
     * Grouping of updateClosedListEntityRole definition stages.
     */
    interface ModelsUpdateClosedListEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity ID.
             *
             * @return next definition stage
             */
            WithRoleId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdateClosedListEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdateClosedListEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateClosedListEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateClosedListEntityRole definition.
     */
    interface ModelsUpdateClosedListEntityRoleDefinition extends
        ModelsUpdateClosedListEntityRoleDefinitionStages.WithAppId,
        ModelsUpdateClosedListEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdateClosedListEntityRoleDefinitionStages.WithEntityId,
        ModelsUpdateClosedListEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdateClosedListEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteClosedListEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteClosedListEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateRegexEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateRegexEntityRoleOptionalParameter updateRegexEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updateRegexEntityRole call
     */
    ModelsUpdateRegexEntityRoleDefinitionStages.WithAppId updateRegexEntityRole();

    /**
     * Grouping of updateRegexEntityRole definition stages.
     */
    interface ModelsUpdateRegexEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity ID.
             *
             * @return next definition stage
             */
            WithRoleId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdateRegexEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdateRegexEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateRegexEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateRegexEntityRole definition.
     */
    interface ModelsUpdateRegexEntityRoleDefinition extends
        ModelsUpdateRegexEntityRoleDefinitionStages.WithAppId,
        ModelsUpdateRegexEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdateRegexEntityRoleDefinitionStages.WithEntityId,
        ModelsUpdateRegexEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdateRegexEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteRegexEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteRegexEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateCompositeEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId, UpdateCompositeEntityRoleOptionalParameter updateCompositeEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updateCompositeEntityRole call
     */
    ModelsUpdateCompositeEntityRoleDefinitionStages.WithAppId updateCompositeEntityRole();

    /**
     * Grouping of updateCompositeEntityRole definition stages.
     */
    interface ModelsUpdateCompositeEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithCEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify cEntityId.
         */
        interface WithCEntityId {
            /**
             * The composite entity extractor ID.
             *
             * @return next definition stage
             */
            WithRoleId withCEntityId(UUID cEntityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdateCompositeEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdateCompositeEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateCompositeEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateCompositeEntityRole definition.
     */
    interface ModelsUpdateCompositeEntityRoleDefinition extends
        ModelsUpdateCompositeEntityRoleDefinitionStages.WithAppId,
        ModelsUpdateCompositeEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdateCompositeEntityRoleDefinitionStages.WithCEntityId,
        ModelsUpdateCompositeEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdateCompositeEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCompositeEntityRole(UUID appId, String versionId, UUID cEntityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param cEntityId The composite entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCompositeEntityRoleAsync(UUID appId, String versionId, UUID cEntityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getPatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getPatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updatePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updatePatternAnyEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updatePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdatePatternAnyEntityRoleOptionalParameter updatePatternAnyEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updatePatternAnyEntityRole call
     */
    ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAppId updatePatternAnyEntityRole();

    /**
     * Grouping of updatePatternAnyEntityRole definition stages.
     */
    interface ModelsUpdatePatternAnyEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity ID.
             *
             * @return next definition stage
             */
            WithRoleId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updatePatternAnyEntityRole definition.
     */
    interface ModelsUpdatePatternAnyEntityRoleDefinition extends
        ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithAppId,
        ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithEntityId,
        ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdatePatternAnyEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deletePatternAnyEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deletePatternAnyEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role ID.
     * @param updateHierarchicalEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId, UpdateHierarchicalEntityRoleOptionalParameter updateHierarchicalEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updateHierarchicalEntityRole call
     */
    ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAppId updateHierarchicalEntityRole();

    /**
     * Grouping of updateHierarchicalEntityRole definition stages.
     */
    interface ModelsUpdateHierarchicalEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithHEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify hEntityId.
         */
        interface WithHEntityId {
            /**
             * The hierarchical entity extractor ID.
             *
             * @return next definition stage
             */
            WithRoleId withHEntityId(UUID hEntityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateHierarchicalEntityRole definition.
     */
    interface ModelsUpdateHierarchicalEntityRoleDefinition extends
        ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithAppId,
        ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithHEntityId,
        ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdateHierarchicalEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteHierarchicalEntityRole(UUID appId, String versionId, UUID hEntityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param hEntityId The hierarchical entity extractor ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteHierarchicalEntityRoleAsync(UUID appId, String versionId, UUID hEntityId, UUID roleId);



    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EntityRole object if successful.
     */
    EntityRole getCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Get one entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId entity ID.
     * @param roleId entity role ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EntityRole object
     */
    Observable<EntityRole> getCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);


    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateCustomPrebuiltEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role ID.
     * @param updateCustomPrebuiltEntityRoleOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateCustomPrebuiltEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId, UpdateCustomPrebuiltEntityRoleOptionalParameter updateCustomPrebuiltEntityRoleOptionalParameter);

    /**
     * Update an entity role for a given entity.
     *
     * @return the first stage of the updateCustomPrebuiltEntityRole call
     */
    ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAppId updateCustomPrebuiltEntityRole();

    /**
     * Grouping of updateCustomPrebuiltEntityRole definition stages.
     */
    interface ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The entity ID.
             *
             * @return next definition stage
             */
            WithRoleId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify roleId.
         */
        interface WithRoleId {
            /**
             * The entity role ID.
             *
             * @return next definition stage
             */
            ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithExecute withRoleId(UUID roleId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The entity role name.
             *
             * @return next definition stage
             */
            ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithExecute withName(String name);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateCustomPrebuiltEntityRole definition.
     */
    interface ModelsUpdateCustomPrebuiltEntityRoleDefinition extends
        ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithAppId,
        ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithVersionId,
        ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithEntityId,
        ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithRoleId,
        ModelsUpdateCustomPrebuiltEntityRoleDefinitionStages.WithExecute {
    }


    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteCustomEntityRole(UUID appId, String versionId, UUID entityId, UUID roleId);

    /**
     * Delete an entity role.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The entity ID.
     * @param roleId The entity role Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteCustomEntityRoleAsync(UUID appId, String versionId, UUID entityId, UUID roleId);



    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ExplicitListItem object if successful.
     */
    ExplicitListItem getExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId);

    /**
     * Get the explicit list of the pattern.any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity Id.
     * @param itemId The explicit list item Id.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ExplicitListItem object
     */
    Observable<ExplicitListItem> getExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId);


    /**
     * Updates an explicit list item for a Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param updateExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    @Deprecated
    OperationStatus updateExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter);

    /**
     * Updates an explicit list item for a Pattern.Any entity.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The Pattern.Any entity extractor ID.
     * @param itemId The explicit list item ID.
     * @param updateExplicitListItemOptionalParameter the object representing the optional parameters to be set before calling this API
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    @Deprecated
    Observable<OperationStatus> updateExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId, UpdateExplicitListItemOptionalParameter updateExplicitListItemOptionalParameter);

    /**
     * Updates an explicit list item for a Pattern.Any entity.
     *
     * @return the first stage of the updateExplicitListItem call
     */
    ModelsUpdateExplicitListItemDefinitionStages.WithAppId updateExplicitListItem();

    /**
     * Grouping of updateExplicitListItem definition stages.
     */
    interface ModelsUpdateExplicitListItemDefinitionStages {
        /**
         * The stage of the definition to be specify appId.
         */
        interface WithAppId {
            /**
             * The application ID.
             *
             * @return next definition stage
             */
            WithVersionId withAppId(UUID appId);
        }
        /**
         * The stage of the definition to be specify versionId.
         */
        interface WithVersionId {
            /**
             * The version ID.
             *
             * @return next definition stage
             */
            WithEntityId withVersionId(String versionId);
        }
        /**
         * The stage of the definition to be specify entityId.
         */
        interface WithEntityId {
            /**
             * The Pattern.Any entity extractor ID.
             *
             * @return next definition stage
             */
            WithItemId withEntityId(UUID entityId);
        }
        /**
         * The stage of the definition to be specify itemId.
         */
        interface WithItemId {
            /**
             * The explicit list item ID.
             *
             * @return next definition stage
             */
            ModelsUpdateExplicitListItemDefinitionStages.WithExecute withItemId(long itemId);
        }

        /**
         * The stage of the definition which allows for any other optional settings to be specified.
         */
        interface WithAllOptions {
            /**
             * The explicit list item.
             *
             * @return next definition stage
             */
            ModelsUpdateExplicitListItemDefinitionStages.WithExecute withExplicitListItem(String explicitListItem);

        }

        /**
         * The last stage of the definition which will make the operation call.
        */
        interface WithExecute extends ModelsUpdateExplicitListItemDefinitionStages.WithAllOptions {
            /**
             * Execute the request.
             *
             * @return the OperationStatus object if successful.
             */
            OperationStatus execute();

            /**
             * Execute the request asynchronously.
             *
             * @return the observable to the OperationStatus object
             */
            Observable<OperationStatus> executeAsync();
        }
    }

    /**
     * The entirety of updateExplicitListItem definition.
     */
    interface ModelsUpdateExplicitListItemDefinition extends
        ModelsUpdateExplicitListItemDefinitionStages.WithAppId,
        ModelsUpdateExplicitListItemDefinitionStages.WithVersionId,
        ModelsUpdateExplicitListItemDefinitionStages.WithEntityId,
        ModelsUpdateExplicitListItemDefinitionStages.WithItemId,
        ModelsUpdateExplicitListItemDefinitionStages.WithExecute {
    }


    /**
     * Delete the explicit list item from the Pattern.any explicit list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ErrorResponseException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the OperationStatus object if successful.
     */
    OperationStatus deleteExplicitListItem(UUID appId, String versionId, UUID entityId, long itemId);

    /**
     * Delete the explicit list item from the Pattern.any explicit list.
     *
     * @param appId The application ID.
     * @param versionId The version ID.
     * @param entityId The pattern.any entity id.
     * @param itemId The explicit list item which will be deleted.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the OperationStatus object
     */
    Observable<OperationStatus> deleteExplicitListItemAsync(UUID appId, String versionId, UUID entityId, long itemId);


}
