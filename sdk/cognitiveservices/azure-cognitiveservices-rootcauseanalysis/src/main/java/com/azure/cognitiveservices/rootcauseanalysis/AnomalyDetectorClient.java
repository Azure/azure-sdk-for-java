// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.rootcauseanalysis;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;

/** Initializes a new instance of the synchronous AnomalyDetectorClient type. */
@ServiceClient(builder = AnomalyDetectorClientBuilder.class)
public final class AnomalyDetectorClient {
    @Generated private final AnomalyDetectorAsyncClient asyncClient;

    /**
     * Initializes an instance of AnomalyDetectorClient class.
     *
     * @param asyncClient the async client.
     */
    @Generated
    AnomalyDetectorClient(AnomalyDetectorAsyncClient asyncClient) {
        this.asyncClient = asyncClient;
    }

    /**
     * Create a root cause analysis data set.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param body create a root cause analysis data set request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createRootCauseAnalysisDataSetWithResponse(
            String dataSetId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.createRootCauseAnalysisDataSetWithResponse(dataSetId, body, requestOptions).block();
    }

    /**
     * Get a root cause analysis data set by its id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataSetId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a root cause analysis data set by its id along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisDataSetWithResponse(
            String dataSetId, RequestOptions requestOptions) {
        return this.asyncClient.getRootCauseAnalysisDataSetWithResponse(dataSetId, requestOptions).block();
    }

    /**
     * Delete a root cause analysis data set.
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisDataSetWithResponse(String dataSetId, RequestOptions requestOptions) {
        return this.asyncClient.deleteRootCauseAnalysisDataSetWithResponse(dataSetId, requestOptions).block();
    }

    /**
     * List root cause analysis data sets.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisDataSets(RequestOptions requestOptions) {
        return new PagedIterable<>(this.asyncClient.listRootCauseAnalysisDataSets(requestOptions));
    }

    /**
     * Upload data to root cause analysis data set by partition.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     data: [
     *         [
     *             Object
     *         ]
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id. Should be a string of uuid.
     * @param timestamp Timestamp of the data, should be a string of ISO format.
     * @param partitionId The partition unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadRootCauseAnalysisDataByPartitionWithResponse(
            String dataSetId, String timestamp, String partitionId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient
                .uploadRootCauseAnalysisDataByPartitionWithResponse(
                        dataSetId, timestamp, partitionId, body, requestOptions)
                .block();
    }

    /**
     * Delete root cause analysis data by partition Id.
     *
     * @param dataSetId Data set unique id，should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param partitionId Data partition unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisDataByPartitionIdWithResponse(
            String dataSetId, String timestamp, String partitionId, RequestOptions requestOptions) {
        return this.asyncClient
                .deleteRootCauseAnalysisDataByPartitionIdWithResponse(dataSetId, timestamp, partitionId, requestOptions)
                .block();
    }

    /**
     * Upload data to root cause analysis data set by block.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     value: [
     *         {
     *             partitionId: String
     *             timestamp: String
     *             data: [
     *                 [
     *                     Object
     *                 ]
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadRootCauseAnalysisDataByBlockWithResponse(
            String dataSetId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.uploadRootCauseAnalysisDataByBlockWithResponse(dataSetId, body, requestOptions).block();
    }

    /**
     * Delete root cause analysis data by time range.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Start date time, should be ISO format</td></tr>
     *     <tr><td>end</td><td>String</td><td>No</td><td>End date time, should be ISO format</td></tr>
     * </table>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisDataByTimeRangeWithResponse(
            String dataSetId, RequestOptions requestOptions) {
        return this.asyncClient.deleteRootCauseAnalysisDataByTimeRangeWithResponse(dataSetId, requestOptions).block();
    }

    /**
     * List data meta for a given timestamp.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisDataMetaByTimestamp(
            String dataSetId, String timestamp, RequestOptions requestOptions) {
        return new PagedIterable<>(
                this.asyncClient.listRootCauseAnalysisDataMetaByTimestamp(dataSetId, timestamp, requestOptions));
    }

    /**
     * List data meta.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources, currently 2 kinds of operation are supported. They are timestamp ge XXXX and timestamp le XXXX. Timestamp must be ISO format</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisDataMetaByTimeRange(
            String dataSetId, RequestOptions requestOptions) {
        return new PagedIterable<>(
                this.asyncClient.listRootCauseAnalysisDataMetaByTimeRange(dataSetId, requestOptions));
    }

    /**
     * Create an instance for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param body Create a root cause analysis instance request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createRootCauseAnalysisInstanceWithResponse(
            String instanceId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient.createRootCauseAnalysisInstanceWithResponse(instanceId, body, requestOptions).block();
    }

    /**
     * Query an instance information for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     instanceId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisInstanceWithResponse(
            String instanceId, RequestOptions requestOptions) {
        return this.asyncClient.getRootCauseAnalysisInstanceWithResponse(instanceId, requestOptions).block();
    }

    /**
     * Delete an instance for root cause analysis.
     *
     * @param instanceId Instance unique id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisInstanceWithResponse(
            String instanceId, RequestOptions requestOptions) {
        return this.asyncClient.deleteRootCauseAnalysisInstanceWithResponse(instanceId, requestOptions).block();
    }

    /**
     * Get instance list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return instance list for root cause analysis as paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisInstances(RequestOptions requestOptions) {
        return new PagedIterable<>(this.asyncClient.listRootCauseAnalysisInstances(requestOptions));
    }

    /**
     * Get kind list for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kinds: [
     *         String(multidimensional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return kind list for root cause analysis along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRootCauseAnalysisKindsWithResponse(RequestOptions requestOptions) {
        return this.asyncClient.listRootCauseAnalysisKindsWithResponse(requestOptions).block();
    }

    /**
     * Create a training model for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRootCauseAnalysisTrainingTaskWithResponse(
            String instanceId, String modelId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient
                .createRootCauseAnalysisTrainingTaskWithResponse(instanceId, modelId, body, requestOptions)
                .block();
    }

    /**
     * Delete a model for root cause analysis.
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisModelWithResponse(
            String instanceId, String modelId, RequestOptions requestOptions) {
        return this.asyncClient.deleteRootCauseAnalysisModelWithResponse(instanceId, modelId, requestOptions).block();
    }

    /**
     * Query a training task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisTrainingStateWithResponse(
            String instanceId, String modelId, RequestOptions requestOptions) {
        return this.asyncClient
                .getRootCauseAnalysisTrainingStateWithResponse(instanceId, modelId, requestOptions)
                .block();
    }

    /**
     * Query training task state list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisTrainingStates(
            String instanceId, RequestOptions requestOptions) {
        return new PagedIterable<>(this.asyncClient.listRootCauseAnalysisTrainingStates(instanceId, requestOptions));
    }

    /**
     * Create an inference task for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param body Inference request of root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRootCauseAnalysisInferenceTaskWithResponse(
            String instanceId, String modelId, String inferenceId, BinaryData body, RequestOptions requestOptions) {
        return this.asyncClient
                .createRootCauseAnalysisInferenceTaskWithResponse(
                        instanceId, modelId, inferenceId, body, requestOptions)
                .block();
    }

    /**
     * Query an inference task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisInferenceStateWithResponse(
            String instanceId, String modelId, String inferenceId, RequestOptions requestOptions) {
        return this.asyncClient
                .getRootCauseAnalysisInferenceStateWithResponse(instanceId, modelId, inferenceId, requestOptions)
                .block();
    }
}
