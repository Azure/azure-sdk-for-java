// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.cognitiveservices.rootcauseanalysis.implementation;

import com.azure.cognitiveservices.rootcauseanalysis.AnomalyDetectorServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the AnomalyDetectorClient type. */
public final class AnomalyDetectorClientImpl {
    /** The proxy service used to perform REST calls. */
    private final AnomalyDetectorClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus2.api.cognitive.microsoft.com).
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final AnomalyDetectorServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public AnomalyDetectorServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(String endpoint, AnomalyDetectorServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline, String endpoint, AnomalyDetectorServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of AnomalyDetectorClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     *     https://westus2.api.cognitive.microsoft.com).
     * @param serviceVersion Service version.
     */
    public AnomalyDetectorClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            AnomalyDetectorServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service =
                RestProxy.create(AnomalyDetectorClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for AnomalyDetectorClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{Endpoint}/anomalydetector/{ApiVersion}")
    @ServiceInterface(name = "AnomalyDetectorClien")
    private interface AnomalyDetectorClientService {
        @Put("/rootCauseAnalysis/dataSets/{dataSetId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createRootCauseAnalysisDataSet(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/dataSets/{dataSetId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRootCauseAnalysisDataSet(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/rootCauseAnalysis/dataSets/{dataSetId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRootCauseAnalysisDataSet(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/dataSets")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisDataSets(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Put("/rootCauseAnalysis/dataSets/{dataSetId}/timestamps/{timestamp}/partitions/{partitionId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> uploadRootCauseAnalysisDataByPartition(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                @PathParam("timestamp") String timestamp,
                @PathParam("partitionId") String partitionId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Delete("/rootCauseAnalysis/dataSets/{dataSetId}/timestamps/{timestamp}/partitions/{partitionId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRootCauseAnalysisDataByPartitionId(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                @PathParam("timestamp") String timestamp,
                @PathParam("partitionId") String partitionId,
                RequestOptions requestOptions,
                Context context);

        @Post("/rootCauseAnalysis/dataSets/{dataSetId}/timestamps:upload")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> uploadRootCauseAnalysisDataByBlock(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Post("/rootCauseAnalysis/dataSets/{dataSetId}/timestamps:purge")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRootCauseAnalysisDataByTimeRange(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/dataSets/{dataSetId}/timestamps/{timestamp}/partitions")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisDataMetaByTimestamp(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                @PathParam("timestamp") String timestamp,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/dataSets/{dataSetId}/timestamps")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisDataMetaByTimeRange(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("dataSetId") String dataSetId,
                RequestOptions requestOptions,
                Context context);

        @Put("/rootCauseAnalysis/instances/{instanceId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> createRootCauseAnalysisInstance(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/instances/{instanceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRootCauseAnalysisInstance(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                RequestOptions requestOptions,
                Context context);

        @Delete("/rootCauseAnalysis/instances/{instanceId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRootCauseAnalysisInstance(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/instances")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisInstances(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/kinds")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisKinds(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Put("/rootCauseAnalysis/instances/{instanceId}/models/{modelId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createRootCauseAnalysisTrainingTask(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                @PathParam("modelId") String modelId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Delete("/rootCauseAnalysis/instances/{instanceId}/models/{modelId}")
        @ExpectedResponses({204})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteRootCauseAnalysisModel(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                @PathParam("modelId") String modelId,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/instances/{instanceId}/models/{modelId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRootCauseAnalysisTrainingState(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                @PathParam("modelId") String modelId,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/instances/{instanceId}/models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisTrainingStates(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                RequestOptions requestOptions,
                Context context);

        @Put("/rootCauseAnalysis/instances/{instanceId}/models/{modelId}/inferences/{inferenceId}")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createRootCauseAnalysisInferenceTask(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                @PathParam("modelId") String modelId,
                @PathParam("inferenceId") String inferenceId,
                @BodyParam("application/json") BinaryData body,
                RequestOptions requestOptions,
                Context context);

        @Get("/rootCauseAnalysis/instances/{instanceId}/models/{modelId}/inferences/{inferenceId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getRootCauseAnalysisInferenceState(
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                @PathParam("instanceId") String instanceId,
                @PathParam("modelId") String modelId,
                @PathParam("inferenceId") String inferenceId,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisDataSetsNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisDataMetaByTimestampNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisDataMetaByTimeRangeNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisInstancesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listRootCauseAnalysisTrainingStatesNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("Endpoint") String endpoint,
                @HostParam("ApiVersion") String apiVersion,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Create a root cause analysis data set.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param body create a root cause analysis data set request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createRootCauseAnalysisDataSetWithResponseAsync(
            String dataSetId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createRootCauseAnalysisDataSet(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Create a root cause analysis data set.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param body create a root cause analysis data set request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createRootCauseAnalysisDataSetWithResponseAsync(
            String dataSetId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.createRootCauseAnalysisDataSet(
                this.getEndpoint(), this.getServiceVersion().getVersion(), dataSetId, body, requestOptions, context);
    }

    /**
     * Create a root cause analysis data set.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param body create a root cause analysis data set request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createRootCauseAnalysisDataSetWithResponse(
            String dataSetId, BinaryData body, RequestOptions requestOptions) {
        return createRootCauseAnalysisDataSetWithResponseAsync(dataSetId, body, requestOptions).block();
    }

    /**
     * Get a root cause analysis data set by its id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataSetId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a root cause analysis data set by its id along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisDataSetWithResponseAsync(
            String dataSetId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getRootCauseAnalysisDataSet(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                requestOptions,
                                context));
    }

    /**
     * Get a root cause analysis data set by its id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataSetId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a root cause analysis data set by its id along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisDataSetWithResponseAsync(
            String dataSetId, RequestOptions requestOptions, Context context) {
        return service.getRootCauseAnalysisDataSet(
                this.getEndpoint(), this.getServiceVersion().getVersion(), dataSetId, requestOptions, context);
    }

    /**
     * Get a root cause analysis data set by its id.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     dataSetId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return a root cause analysis data set by its id along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisDataSetWithResponse(
            String dataSetId, RequestOptions requestOptions) {
        return getRootCauseAnalysisDataSetWithResponseAsync(dataSetId, requestOptions).block();
    }

    /**
     * Delete a root cause analysis data set.
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisDataSetWithResponseAsync(
            String dataSetId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteRootCauseAnalysisDataSet(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                requestOptions,
                                context));
    }

    /**
     * Delete a root cause analysis data set.
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisDataSetWithResponseAsync(
            String dataSetId, RequestOptions requestOptions, Context context) {
        return service.deleteRootCauseAnalysisDataSet(
                this.getEndpoint(), this.getServiceVersion().getVersion(), dataSetId, requestOptions, context);
    }

    /**
     * Delete a root cause analysis data set.
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisDataSetWithResponse(String dataSetId, RequestOptions requestOptions) {
        return deleteRootCauseAnalysisDataSetWithResponseAsync(dataSetId, requestOptions).block();
    }

    /**
     * List root cause analysis data sets.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataSetsSinglePageAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisDataSets(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List root cause analysis data sets.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataSetsSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisDataSets(
                        this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List root cause analysis data sets.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisDataSetsAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisDataSetsSinglePageAsync(requestOptions),
                nextLink -> listRootCauseAnalysisDataSetsNextSinglePageAsync(nextLink, null));
    }

    /**
     * List root cause analysis data sets.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisDataSetsAsync(RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisDataSetsSinglePageAsync(requestOptions, context),
                nextLink -> listRootCauseAnalysisDataSetsNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * List root cause analysis data sets.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisDataSets(RequestOptions requestOptions) {
        return new PagedIterable<>(listRootCauseAnalysisDataSetsAsync(requestOptions));
    }

    /**
     * Upload data to root cause analysis data set by partition.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     data: [
     *         [
     *             Object
     *         ]
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id. Should be a string of uuid.
     * @param timestamp Timestamp of the data, should be a string of ISO format.
     * @param partitionId The partition unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadRootCauseAnalysisDataByPartitionWithResponseAsync(
            String dataSetId, String timestamp, String partitionId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.uploadRootCauseAnalysisDataByPartition(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                timestamp,
                                partitionId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Upload data to root cause analysis data set by partition.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     data: [
     *         [
     *             Object
     *         ]
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id. Should be a string of uuid.
     * @param timestamp Timestamp of the data, should be a string of ISO format.
     * @param partitionId The partition unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadRootCauseAnalysisDataByPartitionWithResponseAsync(
            String dataSetId,
            String timestamp,
            String partitionId,
            BinaryData body,
            RequestOptions requestOptions,
            Context context) {
        return service.uploadRootCauseAnalysisDataByPartition(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                dataSetId,
                timestamp,
                partitionId,
                body,
                requestOptions,
                context);
    }

    /**
     * Upload data to root cause analysis data set by partition.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     data: [
     *         [
     *             Object
     *         ]
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id. Should be a string of uuid.
     * @param timestamp Timestamp of the data, should be a string of ISO format.
     * @param partitionId The partition unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadRootCauseAnalysisDataByPartitionWithResponse(
            String dataSetId, String timestamp, String partitionId, BinaryData body, RequestOptions requestOptions) {
        return uploadRootCauseAnalysisDataByPartitionWithResponseAsync(
                        dataSetId, timestamp, partitionId, body, requestOptions)
                .block();
    }

    /**
     * Delete root cause analysis data by partition Id.
     *
     * @param dataSetId Data set unique id，should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param partitionId Data partition unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisDataByPartitionIdWithResponseAsync(
            String dataSetId, String timestamp, String partitionId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteRootCauseAnalysisDataByPartitionId(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                timestamp,
                                partitionId,
                                requestOptions,
                                context));
    }

    /**
     * Delete root cause analysis data by partition Id.
     *
     * @param dataSetId Data set unique id，should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param partitionId Data partition unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisDataByPartitionIdWithResponseAsync(
            String dataSetId, String timestamp, String partitionId, RequestOptions requestOptions, Context context) {
        return service.deleteRootCauseAnalysisDataByPartitionId(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                dataSetId,
                timestamp,
                partitionId,
                requestOptions,
                context);
    }

    /**
     * Delete root cause analysis data by partition Id.
     *
     * @param dataSetId Data set unique id，should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param partitionId Data partition unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisDataByPartitionIdWithResponse(
            String dataSetId, String timestamp, String partitionId, RequestOptions requestOptions) {
        return deleteRootCauseAnalysisDataByPartitionIdWithResponseAsync(
                        dataSetId, timestamp, partitionId, requestOptions)
                .block();
    }

    /**
     * Upload data to root cause analysis data set by block.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     value: [
     *         {
     *             partitionId: String
     *             timestamp: String
     *             data: [
     *                 [
     *                     Object
     *                 ]
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadRootCauseAnalysisDataByBlockWithResponseAsync(
            String dataSetId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.uploadRootCauseAnalysisDataByBlock(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Upload data to root cause analysis data set by block.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     value: [
     *         {
     *             partitionId: String
     *             timestamp: String
     *             data: [
     *                 [
     *                     Object
     *                 ]
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> uploadRootCauseAnalysisDataByBlockWithResponseAsync(
            String dataSetId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.uploadRootCauseAnalysisDataByBlock(
                this.getEndpoint(), this.getServiceVersion().getVersion(), dataSetId, body, requestOptions, context);
    }

    /**
     * Upload data to root cause analysis data set by block.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     value: [
     *         {
     *             partitionId: String
     *             timestamp: String
     *             data: [
     *                 [
     *                     Object
     *                 ]
     *             ]
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param body Data to be uploaded to perform root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> uploadRootCauseAnalysisDataByBlockWithResponse(
            String dataSetId, BinaryData body, RequestOptions requestOptions) {
        return uploadRootCauseAnalysisDataByBlockWithResponseAsync(dataSetId, body, requestOptions).block();
    }

    /**
     * Delete root cause analysis data by time range.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Start date time, should be ISO format</td></tr>
     *     <tr><td>end</td><td>String</td><td>No</td><td>End date time, should be ISO format</td></tr>
     * </table>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisDataByTimeRangeWithResponseAsync(
            String dataSetId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteRootCauseAnalysisDataByTimeRange(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                dataSetId,
                                requestOptions,
                                context));
    }

    /**
     * Delete root cause analysis data by time range.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Start date time, should be ISO format</td></tr>
     *     <tr><td>end</td><td>String</td><td>No</td><td>End date time, should be ISO format</td></tr>
     * </table>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisDataByTimeRangeWithResponseAsync(
            String dataSetId, RequestOptions requestOptions, Context context) {
        return service.deleteRootCauseAnalysisDataByTimeRange(
                this.getEndpoint(), this.getServiceVersion().getVersion(), dataSetId, requestOptions, context);
    }

    /**
     * Delete root cause analysis data by time range.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>start</td><td>String</td><td>No</td><td>Start date time, should be ISO format</td></tr>
     *     <tr><td>end</td><td>String</td><td>No</td><td>End date time, should be ISO format</td></tr>
     * </table>
     *
     * @param dataSetId The root cause analysis data set unique id，should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisDataByTimeRangeWithResponse(
            String dataSetId, RequestOptions requestOptions) {
        return deleteRootCauseAnalysisDataByTimeRangeWithResponseAsync(dataSetId, requestOptions).block();
    }

    /**
     * List data meta for a given timestamp.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimestampSinglePageAsync(
            String dataSetId, String timestamp, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisDataMetaByTimestamp(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        dataSetId,
                                        timestamp,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List data meta for a given timestamp.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimestampSinglePageAsync(
            String dataSetId, String timestamp, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisDataMetaByTimestamp(
                        this.getEndpoint(),
                        this.getServiceVersion().getVersion(),
                        dataSetId,
                        timestamp,
                        requestOptions,
                        context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List data meta for a given timestamp.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisDataMetaByTimestampAsync(
            String dataSetId, String timestamp, RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisDataMetaByTimestampSinglePageAsync(dataSetId, timestamp, requestOptions),
                nextLink -> listRootCauseAnalysisDataMetaByTimestampNextSinglePageAsync(nextLink, null));
    }

    /**
     * List data meta for a given timestamp.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisDataMetaByTimestampAsync(
            String dataSetId, String timestamp, RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () ->
                        listRootCauseAnalysisDataMetaByTimestampSinglePageAsync(
                                dataSetId, timestamp, requestOptions, context),
                nextLink -> listRootCauseAnalysisDataMetaByTimestampNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * List data meta for a given timestamp.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param timestamp The time stamp to be queried, should be a string of ISO format.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisDataMetaByTimestamp(
            String dataSetId, String timestamp, RequestOptions requestOptions) {
        return new PagedIterable<>(listRootCauseAnalysisDataMetaByTimestampAsync(dataSetId, timestamp, requestOptions));
    }

    /**
     * List data meta.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources, currently 2 kinds of operation are supported. They are timestamp ge XXXX and timestamp le XXXX. Timestamp must be ISO format</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimeRangeSinglePageAsync(
            String dataSetId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisDataMetaByTimeRange(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        dataSetId,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List data meta.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources, currently 2 kinds of operation are supported. They are timestamp ge XXXX and timestamp le XXXX. Timestamp must be ISO format</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimeRangeSinglePageAsync(
            String dataSetId, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisDataMetaByTimeRange(
                        this.getEndpoint(), this.getServiceVersion().getVersion(), dataSetId, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * List data meta.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources, currently 2 kinds of operation are supported. They are timestamp ge XXXX and timestamp le XXXX. Timestamp must be ISO format</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisDataMetaByTimeRangeAsync(
            String dataSetId, RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisDataMetaByTimeRangeSinglePageAsync(dataSetId, requestOptions),
                nextLink -> listRootCauseAnalysisDataMetaByTimeRangeNextSinglePageAsync(nextLink, null));
    }

    /**
     * List data meta.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources, currently 2 kinds of operation are supported. They are timestamp ge XXXX and timestamp le XXXX. Timestamp must be ISO format</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisDataMetaByTimeRangeAsync(
            String dataSetId, RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisDataMetaByTimeRangeSinglePageAsync(dataSetId, requestOptions, context),
                nextLink -> listRootCauseAnalysisDataMetaByTimeRangeNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * List data meta.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources, currently 2 kinds of operation are supported. They are timestamp ge XXXX and timestamp le XXXX. Timestamp must be ISO format</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param dataSetId The root cause analysis data set unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisDataMetaByTimeRange(
            String dataSetId, RequestOptions requestOptions) {
        return new PagedIterable<>(listRootCauseAnalysisDataMetaByTimeRangeAsync(dataSetId, requestOptions));
    }

    /**
     * Create an instance for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param body Create a root cause analysis instance request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createRootCauseAnalysisInstanceWithResponseAsync(
            String instanceId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createRootCauseAnalysisInstance(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Create an instance for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param body Create a root cause analysis instance request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createRootCauseAnalysisInstanceWithResponseAsync(
            String instanceId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.createRootCauseAnalysisInstance(
                this.getEndpoint(), this.getServiceVersion().getVersion(), instanceId, body, requestOptions, context);
    }

    /**
     * Create an instance for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param body Create a root cause analysis instance request.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> createRootCauseAnalysisInstanceWithResponse(
            String instanceId, BinaryData body, RequestOptions requestOptions) {
        return createRootCauseAnalysisInstanceWithResponseAsync(instanceId, body, requestOptions).block();
    }

    /**
     * Query an instance information for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     instanceId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisInstanceWithResponseAsync(
            String instanceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getRootCauseAnalysisInstance(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                requestOptions,
                                context));
    }

    /**
     * Query an instance information for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     instanceId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisInstanceWithResponseAsync(
            String instanceId, RequestOptions requestOptions, Context context) {
        return service.getRootCauseAnalysisInstance(
                this.getEndpoint(), this.getServiceVersion().getVersion(), instanceId, requestOptions, context);
    }

    /**
     * Query an instance information for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     instanceId: String
     *     displayName: String
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisInstanceWithResponse(
            String instanceId, RequestOptions requestOptions) {
        return getRootCauseAnalysisInstanceWithResponseAsync(instanceId, requestOptions).block();
    }

    /**
     * Delete an instance for root cause analysis.
     *
     * @param instanceId Instance unique id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisInstanceWithResponseAsync(
            String instanceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteRootCauseAnalysisInstance(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                requestOptions,
                                context));
    }

    /**
     * Delete an instance for root cause analysis.
     *
     * @param instanceId Instance unique id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisInstanceWithResponseAsync(
            String instanceId, RequestOptions requestOptions, Context context) {
        return service.deleteRootCauseAnalysisInstance(
                this.getEndpoint(), this.getServiceVersion().getVersion(), instanceId, requestOptions, context);
    }

    /**
     * Delete an instance for root cause analysis.
     *
     * @param instanceId Instance unique id.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisInstanceWithResponse(
            String instanceId, RequestOptions requestOptions) {
        return deleteRootCauseAnalysisInstanceWithResponseAsync(instanceId, requestOptions).block();
    }

    /**
     * Get instance list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return instance list for root cause analysis along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisInstancesSinglePageAsync(
            RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisInstances(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get instance list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return instance list for root cause analysis along with {@link PagedResponse} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisInstancesSinglePageAsync(
            RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisInstances(
                        this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get instance list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return instance list for root cause analysis as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisInstancesAsync(RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisInstancesSinglePageAsync(requestOptions),
                nextLink -> listRootCauseAnalysisInstancesNextSinglePageAsync(nextLink, null));
    }

    /**
     * Get instance list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return instance list for root cause analysis as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisInstancesAsync(RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisInstancesSinglePageAsync(requestOptions, context),
                nextLink -> listRootCauseAnalysisInstancesNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * Get instance list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return instance list for root cause analysis as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisInstances(RequestOptions requestOptions) {
        return new PagedIterable<>(listRootCauseAnalysisInstancesAsync(requestOptions));
    }

    /**
     * Get kind list for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kinds: [
     *         String(multidimensional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return kind list for root cause analysis along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRootCauseAnalysisKindsWithResponseAsync(RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.listRootCauseAnalysisKinds(
                                this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context));
    }

    /**
     * Get kind list for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kinds: [
     *         String(multidimensional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return kind list for root cause analysis along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> listRootCauseAnalysisKindsWithResponseAsync(
            RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisKinds(
                this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context);
    }

    /**
     * Get kind list for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kinds: [
     *         String(multidimensional)
     *     ]
     * }
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return kind list for root cause analysis along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> listRootCauseAnalysisKindsWithResponse(RequestOptions requestOptions) {
        return listRootCauseAnalysisKindsWithResponseAsync(requestOptions).block();
    }

    /**
     * Create a training model for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRootCauseAnalysisTrainingTaskWithResponseAsync(
            String instanceId, String modelId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createRootCauseAnalysisTrainingTask(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                modelId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Create a training model for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRootCauseAnalysisTrainingTaskWithResponseAsync(
            String instanceId, String modelId, BinaryData body, RequestOptions requestOptions, Context context) {
        return service.createRootCauseAnalysisTrainingTask(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                instanceId,
                modelId,
                body,
                requestOptions,
                context);
    }

    /**
     * Create a training model for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     displayName: String
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param body The body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRootCauseAnalysisTrainingTaskWithResponse(
            String instanceId, String modelId, BinaryData body, RequestOptions requestOptions) {
        return createRootCauseAnalysisTrainingTaskWithResponseAsync(instanceId, modelId, body, requestOptions).block();
    }

    /**
     * Delete a model for root cause analysis.
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisModelWithResponseAsync(
            String instanceId, String modelId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.deleteRootCauseAnalysisModel(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                modelId,
                                requestOptions,
                                context));
    }

    /**
     * Delete a model for root cause analysis.
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteRootCauseAnalysisModelWithResponseAsync(
            String instanceId, String modelId, RequestOptions requestOptions, Context context) {
        return service.deleteRootCauseAnalysisModel(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                instanceId,
                modelId,
                requestOptions,
                context);
    }

    /**
     * Delete a model for root cause analysis.
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteRootCauseAnalysisModelWithResponse(
            String instanceId, String modelId, RequestOptions requestOptions) {
        return deleteRootCauseAnalysisModelWithResponseAsync(instanceId, modelId, requestOptions).block();
    }

    /**
     * Query a training task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisTrainingStateWithResponseAsync(
            String instanceId, String modelId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getRootCauseAnalysisTrainingState(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                modelId,
                                requestOptions,
                                context));
    }

    /**
     * Query a training task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisTrainingStateWithResponseAsync(
            String instanceId, String modelId, RequestOptions requestOptions, Context context) {
        return service.getRootCauseAnalysisTrainingState(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                instanceId,
                modelId,
                requestOptions,
                context);
    }

    /**
     * Query a training task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     taskId: String
     *     instanceId: String
     *     modelId: String
     *     displayName: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     taskInfo: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisTrainingStateWithResponse(
            String instanceId, String modelId, RequestOptions requestOptions) {
        return getRootCauseAnalysisTrainingStateWithResponseAsync(instanceId, modelId, requestOptions).block();
    }

    /**
     * Query training task state list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisTrainingStatesSinglePageAsync(
            String instanceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisTrainingStates(
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        instanceId,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Query training task state list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisTrainingStatesSinglePageAsync(
            String instanceId, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisTrainingStates(
                        this.getEndpoint(), this.getServiceVersion().getVersion(), instanceId, requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Query training task state list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisTrainingStatesAsync(
            String instanceId, RequestOptions requestOptions) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisTrainingStatesSinglePageAsync(instanceId, requestOptions),
                nextLink -> listRootCauseAnalysisTrainingStatesNextSinglePageAsync(nextLink, null));
    }

    /**
     * Query training task state list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listRootCauseAnalysisTrainingStatesAsync(
            String instanceId, RequestOptions requestOptions, Context context) {
        return new PagedFlux<>(
                () -> listRootCauseAnalysisTrainingStatesSinglePageAsync(instanceId, requestOptions, context),
                nextLink -> listRootCauseAnalysisTrainingStatesNextSinglePageAsync(nextLink, null, context));
    }

    /**
     * Query training task state list for root cause analysis.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>skip</td><td>String</td><td>No</td><td>For paging, skipped number</td></tr>
     *     <tr><td>maxpagesize</td><td>String</td><td>No</td><td>The maximum number of items in one page</td></tr>
     *     <tr><td>filter</td><td>String</td><td>No</td><td>The filter expression filters out the resources to be returned, currently contains(displayName, 'filter name’) is supported</td></tr>
     * </table>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listRootCauseAnalysisTrainingStates(
            String instanceId, RequestOptions requestOptions) {
        return new PagedIterable<>(listRootCauseAnalysisTrainingStatesAsync(instanceId, requestOptions));
    }

    /**
     * Create an inference task for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param body Inference request of root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRootCauseAnalysisInferenceTaskWithResponseAsync(
            String instanceId, String modelId, String inferenceId, BinaryData body, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.createRootCauseAnalysisInferenceTask(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                modelId,
                                inferenceId,
                                body,
                                requestOptions,
                                context));
    }

    /**
     * Create an inference task for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param body Inference request of root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createRootCauseAnalysisInferenceTaskWithResponseAsync(
            String instanceId,
            String modelId,
            String inferenceId,
            BinaryData body,
            RequestOptions requestOptions,
            Context context) {
        return service.createRootCauseAnalysisInferenceTask(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                instanceId,
                modelId,
                inferenceId,
                body,
                requestOptions,
                context);
    }

    /**
     * Create an inference task for root cause analysis.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     kind: String(multidimensional)
     *     parameter: Object
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param body Inference request of root cause analysis.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createRootCauseAnalysisInferenceTaskWithResponse(
            String instanceId, String modelId, String inferenceId, BinaryData body, RequestOptions requestOptions) {
        return createRootCauseAnalysisInferenceTaskWithResponseAsync(
                        instanceId, modelId, inferenceId, body, requestOptions)
                .block();
    }

    /**
     * Query an inference task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisInferenceStateWithResponseAsync(
            String instanceId, String modelId, String inferenceId, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                context ->
                        service.getRootCauseAnalysisInferenceState(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                instanceId,
                                modelId,
                                inferenceId,
                                requestOptions,
                                context));
    }

    /**
     * Query an inference task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getRootCauseAnalysisInferenceStateWithResponseAsync(
            String instanceId, String modelId, String inferenceId, RequestOptions requestOptions, Context context) {
        return service.getRootCauseAnalysisInferenceState(
                this.getEndpoint(),
                this.getServiceVersion().getVersion(),
                instanceId,
                modelId,
                inferenceId,
                requestOptions,
                context);
    }

    /**
     * Query an inference task state for root cause analysis.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     inferenceId: String
     *     instanceId: String
     *     modelId: String
     *     kind: String(multidimensional)
     *     status: String(scheduled/running/succeeded/failed/canceled)
     *     createdDateTime: String
     *     lastModifiedDateTime: String
     *     error: {
     *         message: String
     *         code: String
     *     }
     *     result: Object
     *     parameter: Object
     * }
     * }</pre>
     *
     * @param instanceId Instance unique id, should be a string of uuid.
     * @param modelId Model unique id, should be a string of uuid.
     * @param inferenceId Inference unique id, should be a string of uuid.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getRootCauseAnalysisInferenceStateWithResponse(
            String instanceId, String modelId, String inferenceId, RequestOptions requestOptions) {
        return getRootCauseAnalysisInferenceStateWithResponseAsync(instanceId, modelId, inferenceId, requestOptions)
                .block();
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataSetsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisDataSetsNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             dataSetId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataSetsNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisDataSetsNext(
                        nextLink, this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimestampNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisDataMetaByTimestampNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimestampNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisDataMetaByTimestampNext(
                        nextLink, this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimeRangeNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisDataMetaByTimeRangeNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             partitionId: String
     *             rowCount: int
     *             timestamp: String
     *             lastModifiedDateTime: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisDataMetaByTimeRangeNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisDataMetaByTimeRangeNext(
                        nextLink, this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisInstancesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisInstancesNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             instanceId: String
     *             displayName: String
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisInstancesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisInstancesNext(
                        nextLink, this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisTrainingStatesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        return FluxUtil.withContext(
                        context ->
                                service.listRootCauseAnalysisTrainingStatesNext(
                                        nextLink,
                                        this.getEndpoint(),
                                        this.getServiceVersion().getVersion(),
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     nextLink: String
     *     value: [
     *         {
     *             taskId: String
     *             instanceId: String
     *             modelId: String
     *             displayName: String
     *             kind: String(multidimensional)
     *             status: String(scheduled/running/succeeded/failed/canceled)
     *             createdDateTime: String
     *             lastModifiedDateTime: String
     *             error: {
     *                 message: String
     *                 code: String
     *             }
     *             taskInfo: Object
     *             parameter: Object
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @param context The context to associate with this operation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<PagedResponse<BinaryData>> listRootCauseAnalysisTrainingStatesNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions, Context context) {
        return service.listRootCauseAnalysisTrainingStatesNext(
                        nextLink, this.getEndpoint(), this.getServiceVersion().getVersion(), requestOptions, context)
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
