// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiTopicInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiTopicProperties;
import com.azure.resourcemanager.cognitiveservices.models.RaiTopicResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiTopicResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiTopicResult model = BinaryData.fromString(
            "{\"nextLink\":\"hwplefaxvx\",\"value\":[{\"etag\":\"tg\",\"tags\":{\"vodggxdbee\":\"zeyqxtjjfzqlqhyc\",\"wiuagydwqf\":\"mieknlraria\",\"ocqwogfnzjvus\":\"ylyrfgiagtco\"},\"properties\":{\"topicId\":\"dmozu\",\"topicName\":\"lfsbtkadpysow\",\"description\":\"tgkbugrjqctojc\",\"sampleBlobUrl\":\"sofieypefojyqd\",\"status\":\"u\",\"failedReason\":\"cp\",\"createdAt\":\"2021-02-20T10:18:54Z\",\"lastModifiedAt\":\"2021-07-01T10:01:22Z\"},\"id\":\"hihlhzdsqtzbs\",\"name\":\"gnowcjhfgmveca\",\"type\":\"txmwoteyow\"},{\"etag\":\"uqovekqvgqouwif\",\"tags\":{\"yivqikfxcvhrfsp\":\"j\",\"kvyklxubyjaffmm\":\"uagrttikteusqc\"},\"properties\":{\"topicId\":\"cqc\",\"topicName\":\"bgq\",\"description\":\"rtalmet\",\"sampleBlobUrl\":\"wgdsl\",\"status\":\"ihhrmo\",\"failedReason\":\"z\",\"createdAt\":\"2021-04-20T09:51:44Z\",\"lastModifiedAt\":\"2021-09-25T22:26:54Z\"},\"id\":\"iut\",\"name\":\"xapzhyrpet\",\"type\":\"g\"}]}")
            .toObject(RaiTopicResult.class);
        Assertions.assertEquals("hwplefaxvx", model.nextLink());
        Assertions.assertEquals("zeyqxtjjfzqlqhyc", model.value().get(0).tags().get("vodggxdbee"));
        Assertions.assertEquals("dmozu", model.value().get(0).properties().topicId());
        Assertions.assertEquals("lfsbtkadpysow", model.value().get(0).properties().topicName());
        Assertions.assertEquals("tgkbugrjqctojc", model.value().get(0).properties().description());
        Assertions.assertEquals("sofieypefojyqd", model.value().get(0).properties().sampleBlobUrl());
        Assertions.assertEquals("u", model.value().get(0).properties().status());
        Assertions.assertEquals("cp", model.value().get(0).properties().failedReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T10:18:54Z"),
            model.value().get(0).properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-01T10:01:22Z"),
            model.value().get(0).properties().lastModifiedAt());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiTopicResult model = new RaiTopicResult().withNextLink("hwplefaxvx")
            .withValue(Arrays.asList(
                new RaiTopicInner()
                    .withTags(mapOf("vodggxdbee", "zeyqxtjjfzqlqhyc", "wiuagydwqf", "mieknlraria", "ocqwogfnzjvus",
                        "ylyrfgiagtco"))
                    .withProperties(new RaiTopicProperties().withTopicId("dmozu")
                        .withTopicName("lfsbtkadpysow")
                        .withDescription("tgkbugrjqctojc")
                        .withSampleBlobUrl("sofieypefojyqd")
                        .withStatus("u")
                        .withFailedReason("cp")
                        .withCreatedAt(OffsetDateTime.parse("2021-02-20T10:18:54Z"))
                        .withLastModifiedAt(OffsetDateTime.parse("2021-07-01T10:01:22Z"))),
                new RaiTopicInner().withTags(mapOf("yivqikfxcvhrfsp", "j", "kvyklxubyjaffmm", "uagrttikteusqc"))
                    .withProperties(new RaiTopicProperties().withTopicId("cqc")
                        .withTopicName("bgq")
                        .withDescription("rtalmet")
                        .withSampleBlobUrl("wgdsl")
                        .withStatus("ihhrmo")
                        .withFailedReason("z")
                        .withCreatedAt(OffsetDateTime.parse("2021-04-20T09:51:44Z"))
                        .withLastModifiedAt(OffsetDateTime.parse("2021-09-25T22:26:54Z")))));
        model = BinaryData.fromObject(model).toObject(RaiTopicResult.class);
        Assertions.assertEquals("hwplefaxvx", model.nextLink());
        Assertions.assertEquals("zeyqxtjjfzqlqhyc", model.value().get(0).tags().get("vodggxdbee"));
        Assertions.assertEquals("dmozu", model.value().get(0).properties().topicId());
        Assertions.assertEquals("lfsbtkadpysow", model.value().get(0).properties().topicName());
        Assertions.assertEquals("tgkbugrjqctojc", model.value().get(0).properties().description());
        Assertions.assertEquals("sofieypefojyqd", model.value().get(0).properties().sampleBlobUrl());
        Assertions.assertEquals("u", model.value().get(0).properties().status());
        Assertions.assertEquals("cp", model.value().get(0).properties().failedReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-20T10:18:54Z"),
            model.value().get(0).properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-01T10:01:22Z"),
            model.value().get(0).properties().lastModifiedAt());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
