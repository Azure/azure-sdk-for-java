// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import com.azure.resourcemanager.cognitiveservices.models.NoneAuthTypeConnectionProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NoneAuthTypeConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NoneAuthTypeConnectionProperties model = BinaryData.fromString(
            "{\"authType\":\"None\",\"category\":\"Shopify\",\"createdByWorkspaceArmId\":\"zyos\",\"error\":\"p\",\"expiryTime\":\"2021-05-20T11:26:15Z\",\"group\":\"ServicesAndApps\",\"isSharedToAll\":true,\"metadata\":{\"ogtieyujtvczkcny\":\"mspbpssdfpp\"},\"peRequirement\":\"NotRequired\",\"peStatus\":\"Inactive\",\"sharedUserList\":[\"d\",\"vg\",\"nkvxlxpaglqi\",\"bgkc\"],\"target\":\"hpzvuqdflvoniyp\",\"useWorkspaceManagedIdentity\":true}")
            .toObject(NoneAuthTypeConnectionProperties.class);
        Assertions.assertEquals(ConnectionCategory.SHOPIFY, model.category());
        Assertions.assertEquals("p", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T11:26:15Z"), model.expiryTime());
        Assertions.assertTrue(model.isSharedToAll());
        Assertions.assertEquals("mspbpssdfpp", model.metadata().get("ogtieyujtvczkcny"));
        Assertions.assertEquals(ManagedPERequirement.NOT_REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.peStatus());
        Assertions.assertEquals("d", model.sharedUserList().get(0));
        Assertions.assertEquals("hpzvuqdflvoniyp", model.target());
        Assertions.assertTrue(model.useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NoneAuthTypeConnectionProperties model
            = new NoneAuthTypeConnectionProperties().withCategory(ConnectionCategory.SHOPIFY)
                .withError("p")
                .withExpiryTime(OffsetDateTime.parse("2021-05-20T11:26:15Z"))
                .withIsSharedToAll(true)
                .withMetadata(mapOf("ogtieyujtvczkcny", "mspbpssdfpp"))
                .withPeRequirement(ManagedPERequirement.NOT_REQUIRED)
                .withPeStatus(ManagedPEStatus.INACTIVE)
                .withSharedUserList(Arrays.asList("d", "vg", "nkvxlxpaglqi", "bgkc"))
                .withTarget("hpzvuqdflvoniyp")
                .withUseWorkspaceManagedIdentity(true);
        model = BinaryData.fromObject(model).toObject(NoneAuthTypeConnectionProperties.class);
        Assertions.assertEquals(ConnectionCategory.SHOPIFY, model.category());
        Assertions.assertEquals("p", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-20T11:26:15Z"), model.expiryTime());
        Assertions.assertTrue(model.isSharedToAll());
        Assertions.assertEquals("mspbpssdfpp", model.metadata().get("ogtieyujtvczkcny"));
        Assertions.assertEquals(ManagedPERequirement.NOT_REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.peStatus());
        Assertions.assertEquals("d", model.sharedUserList().get(0));
        Assertions.assertEquals("hpzvuqdflvoniyp", model.target());
        Assertions.assertTrue(model.useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
