// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.UsageListResultInner;
import com.azure.resourcemanager.cognitiveservices.models.MetricName;
import com.azure.resourcemanager.cognitiveservices.models.QuotaUsageStatus;
import com.azure.resourcemanager.cognitiveservices.models.UnitType;
import com.azure.resourcemanager.cognitiveservices.models.Usage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class UsageListResultInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        UsageListResultInner model = BinaryData.fromString(
            "{\"nextLink\":\"zrkgqhcjrefovg\",\"value\":[{\"unit\":\"Count\",\"name\":{\"value\":\"yvxyqjp\",\"localizedValue\":\"attpngjcrcczsq\"},\"quotaPeriod\":\"hvmdajvnysounq\",\"limit\":2.2711891093491476,\"currentValue\":9.069007255985827,\"nextResetTime\":\"pfhyhl\",\"status\":\"Blocked\"}]}")
            .toObject(UsageListResultInner.class);
        Assertions.assertEquals("zrkgqhcjrefovg", model.nextLink());
        Assertions.assertEquals(UnitType.COUNT, model.value().get(0).unit());
        Assertions.assertEquals("yvxyqjp", model.value().get(0).name().value());
        Assertions.assertEquals("attpngjcrcczsq", model.value().get(0).name().localizedValue());
        Assertions.assertEquals("hvmdajvnysounq", model.value().get(0).quotaPeriod());
        Assertions.assertEquals(2.2711891093491476D, model.value().get(0).limit());
        Assertions.assertEquals(9.069007255985827D, model.value().get(0).currentValue());
        Assertions.assertEquals("pfhyhl", model.value().get(0).nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.BLOCKED, model.value().get(0).status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        UsageListResultInner model = new UsageListResultInner().withNextLink("zrkgqhcjrefovg")
            .withValue(Arrays.asList(new Usage().withUnit(UnitType.COUNT)
                .withName(new MetricName().withValue("yvxyqjp").withLocalizedValue("attpngjcrcczsq"))
                .withQuotaPeriod("hvmdajvnysounq")
                .withLimit(2.2711891093491476D)
                .withCurrentValue(9.069007255985827D)
                .withNextResetTime("pfhyhl")
                .withStatus(QuotaUsageStatus.BLOCKED)));
        model = BinaryData.fromObject(model).toObject(UsageListResultInner.class);
        Assertions.assertEquals("zrkgqhcjrefovg", model.nextLink());
        Assertions.assertEquals(UnitType.COUNT, model.value().get(0).unit());
        Assertions.assertEquals("yvxyqjp", model.value().get(0).name().value());
        Assertions.assertEquals("attpngjcrcczsq", model.value().get(0).name().localizedValue());
        Assertions.assertEquals("hvmdajvnysounq", model.value().get(0).quotaPeriod());
        Assertions.assertEquals(2.2711891093491476D, model.value().get(0).limit());
        Assertions.assertEquals(9.069007255985827D, model.value().get(0).currentValue());
        Assertions.assertEquals("pfhyhl", model.value().get(0).nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.BLOCKED, model.value().get(0).status());
    }
}
