// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.UsageListResultInner;
import com.azure.resourcemanager.cognitiveservices.models.MetricName;
import com.azure.resourcemanager.cognitiveservices.models.QuotaUsageStatus;
import com.azure.resourcemanager.cognitiveservices.models.UnitType;
import com.azure.resourcemanager.cognitiveservices.models.Usage;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class UsageListResultInnerTests {
    @Test
    public void testDeserialize() {
        UsageListResultInner model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"unit\":\"CountPerSecond\",\"name\":{\"value\":\"anyktzlcuiywg\",\"localizedValue\":\"wgndrvynhzgpp\"},\"quotaPeriod\":\"cgyncocpecf\",\"limit\":21.537221408230444,\"currentValue\":22.03047256463684,\"nextResetTime\":\"xlzevgbmqjqabcy\",\"status\":\"Unknown\"},{\"unit\":\"Count\",\"name\":{\"value\":\"zuvccfwnfnbacfio\",\"localizedValue\":\"ebxetqgtzxdp\"},\"quotaPeriod\":\"bqqwxrj\",\"limit\":7.9074598312850135,\"currentValue\":52.081645304185756,\"nextResetTime\":\"ubisnjampmng\",\"status\":\"Blocked\"}]}")
                .toObject(UsageListResultInner.class);
        Assertions.assertEquals(UnitType.COUNT_PER_SECOND, model.value().get(0).unit());
        Assertions.assertEquals("anyktzlcuiywg", model.value().get(0).name().value());
        Assertions.assertEquals("wgndrvynhzgpp", model.value().get(0).name().localizedValue());
        Assertions.assertEquals("cgyncocpecf", model.value().get(0).quotaPeriod());
        Assertions.assertEquals(21.537221408230444D, model.value().get(0).limit());
        Assertions.assertEquals(22.03047256463684D, model.value().get(0).currentValue());
        Assertions.assertEquals("xlzevgbmqjqabcy", model.value().get(0).nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.UNKNOWN, model.value().get(0).status());
    }

    @Test
    public void testSerialize() {
        UsageListResultInner model =
            new UsageListResultInner()
                .withValue(
                    Arrays
                        .asList(
                            new Usage()
                                .withUnit(UnitType.COUNT_PER_SECOND)
                                .withName(
                                    new MetricName().withValue("anyktzlcuiywg").withLocalizedValue("wgndrvynhzgpp"))
                                .withQuotaPeriod("cgyncocpecf")
                                .withLimit(21.537221408230444D)
                                .withCurrentValue(22.03047256463684D)
                                .withNextResetTime("xlzevgbmqjqabcy")
                                .withStatus(QuotaUsageStatus.UNKNOWN),
                            new Usage()
                                .withUnit(UnitType.COUNT)
                                .withName(
                                    new MetricName().withValue("zuvccfwnfnbacfio").withLocalizedValue("ebxetqgtzxdp"))
                                .withQuotaPeriod("bqqwxrj")
                                .withLimit(7.9074598312850135D)
                                .withCurrentValue(52.081645304185756D)
                                .withNextResetTime("ubisnjampmng")
                                .withStatus(QuotaUsageStatus.BLOCKED)));
        model = BinaryData.fromObject(model).toObject(UsageListResultInner.class);
        Assertions.assertEquals(UnitType.COUNT_PER_SECOND, model.value().get(0).unit());
        Assertions.assertEquals("anyktzlcuiywg", model.value().get(0).name().value());
        Assertions.assertEquals("wgndrvynhzgpp", model.value().get(0).name().localizedValue());
        Assertions.assertEquals("cgyncocpecf", model.value().get(0).quotaPeriod());
        Assertions.assertEquals(21.537221408230444D, model.value().get(0).limit());
        Assertions.assertEquals(22.03047256463684D, model.value().get(0).currentValue());
        Assertions.assertEquals("xlzevgbmqjqabcy", model.value().get(0).nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.UNKNOWN, model.value().get(0).status());
    }
}
