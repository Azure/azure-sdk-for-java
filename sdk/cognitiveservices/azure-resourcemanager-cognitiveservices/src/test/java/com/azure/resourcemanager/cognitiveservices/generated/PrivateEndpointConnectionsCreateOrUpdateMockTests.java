// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.PrivateEndpoint;
import com.azure.resourcemanager.cognitiveservices.models.PrivateEndpointConnection;
import com.azure.resourcemanager.cognitiveservices.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.cognitiveservices.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.cognitiveservices.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"dlfp\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"cygvoavyunssx\",\"actionsRequired\":\"hi\"},\"provisioningState\":\"Succeeded\",\"groupIds\":[\"gvvpasek\",\"gbuxantuygdh\",\"aq\",\"pirpiwrqof\"]},\"location\":\"pmjnlexwhcb\",\"etag\":\"ibkeph\",\"id\":\"uuerctatoyi\",\"name\":\"tqpbrlcy\",\"type\":\"duczkgof\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response
            = manager.privateEndpointConnections()
                .define("z")
                .withExistingAccount("jwfljhznamtua", "mzwcjjncqt")
                .withRegion("r")
                .withProperties(new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                    .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                        .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                        .withDescription("wggahttzlswvaj")
                        .withActionsRequired("utlxjoqzasunwqrj"))
                    .withGroupIds(Arrays.asList("haohcmbuo")))
                .create();

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.PENDING,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("cygvoavyunssx",
            response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("hi", response.properties().privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals("gvvpasek", response.properties().groupIds().get(0));
        Assertions.assertEquals("pmjnlexwhcb", response.location());
    }
}
