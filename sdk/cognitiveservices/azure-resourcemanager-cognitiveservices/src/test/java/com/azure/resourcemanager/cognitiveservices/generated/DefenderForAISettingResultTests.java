// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.DefenderForAISettingInner;
import com.azure.resourcemanager.cognitiveservices.models.DefenderForAISettingResult;
import com.azure.resourcemanager.cognitiveservices.models.DefenderForAISettingState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DefenderForAISettingResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DefenderForAISettingResult model = BinaryData.fromString(
            "{\"nextLink\":\"hs\",\"value\":[{\"etag\":\"jpllndnpdwrpq\",\"tags\":{\"oc\":\"fugsnnfhyetefy\",\"vzuyturmlmu\":\"ctfjgtixr\",\"iropionszon\":\"wolba\"},\"properties\":{\"state\":\"Enabled\"},\"id\":\"jinnix\",\"name\":\"awrtmjfjmyccxlz\",\"type\":\"coxovn\"}]}")
            .toObject(DefenderForAISettingResult.class);
        Assertions.assertEquals("hs", model.nextLink());
        Assertions.assertEquals("fugsnnfhyetefy", model.value().get(0).tags().get("oc"));
        Assertions.assertEquals(DefenderForAISettingState.ENABLED, model.value().get(0).state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DefenderForAISettingResult model = new DefenderForAISettingResult().withNextLink("hs")
            .withValue(Arrays.asList(new DefenderForAISettingInner()
                .withTags(mapOf("oc", "fugsnnfhyetefy", "vzuyturmlmu", "ctfjgtixr", "iropionszon", "wolba"))
                .withState(DefenderForAISettingState.ENABLED)));
        model = BinaryData.fromObject(model).toObject(DefenderForAISettingResult.class);
        Assertions.assertEquals("hs", model.nextLink());
        Assertions.assertEquals("fugsnnfhyetefy", model.value().get(0).tags().get("oc"));
        Assertions.assertEquals(DefenderForAISettingState.ENABLED, model.value().get(0).state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
