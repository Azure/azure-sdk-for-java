// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2BasicResource;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionUpdateContent;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectConnectionsUpdateWithResponseMockTests {
    @Test
    public void testUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"MySql\",\"createdByWorkspaceArmId\":\"lniibncg\",\"error\":\"dvcdq\",\"expiryTime\":\"2021-02-10T14:42:39Z\",\"group\":\"ServicesAndApps\",\"isSharedToAll\":false,\"metadata\":{\"htncwmhjobzrfp\":\"ofdf\"},\"peRequirement\":\"NotRequired\",\"peStatus\":\"Active\",\"sharedUserList\":[\"yftcvbzwgwhg\"],\"target\":\"soauoorssatfyb\",\"useWorkspaceManagedIdentity\":false},\"id\":\"dm\",\"name\":\"uqbdq\",\"type\":\"as\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConnectionPropertiesV2BasicResource response
            = manager.projectConnections()
                .updateWithResponse("bhtleberpy", "jeknfqnw", "j", "xowkdnj",
                    new ConnectionUpdateContent().withProperties(new ConnectionPropertiesV2()
                        .withCategory(ConnectionCategory.GOOGLE_CLOUD_STORAGE)
                        .withError("r")
                        .withExpiryTime(OffsetDateTime.parse("2021-06-16T04:12:26Z"))
                        .withIsSharedToAll(false)
                        .withMetadata(mapOf("yrguyfazbk", "bjzm", "bc", "cbygvthrmx"))
                        .withPeRequirement(ManagedPERequirement.NOT_APPLICABLE)
                        .withPeStatus(ManagedPEStatus.NOT_APPLICABLE)
                        .withSharedUserList(Arrays.asList("rawppkeboozf", "yacagae", "aoiqclmgdt", "gabdxfkuzbwjeco"))
                        .withTarget("vh")
                        .withUseWorkspaceManagedIdentity(false)),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals(ConnectionCategory.MY_SQL, response.properties().category());
        Assertions.assertEquals("dvcdq", response.properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-10T14:42:39Z"), response.properties().expiryTime());
        Assertions.assertFalse(response.properties().isSharedToAll());
        Assertions.assertEquals("ofdf", response.properties().metadata().get("htncwmhjobzrfp"));
        Assertions.assertEquals(ManagedPERequirement.NOT_REQUIRED, response.properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.ACTIVE, response.properties().peStatus());
        Assertions.assertEquals("yftcvbzwgwhg", response.properties().sharedUserList().get(0));
        Assertions.assertEquals("soauoorssatfyb", response.properties().target());
        Assertions.assertFalse(response.properties().useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
