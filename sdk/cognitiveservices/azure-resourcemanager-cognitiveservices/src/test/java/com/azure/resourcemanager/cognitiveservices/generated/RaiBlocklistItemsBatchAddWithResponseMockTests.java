// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklist;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemBulkRequest;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiBlocklistItemsBatchAddWithResponseMockTests {
    @Test
    public void testBatchAddWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"zwyqejga\",\"tags\":{\"ngdyfcixrhlcq\":\"ctgkppgkqzkcyzmf\",\"goiutgw\":\"hoe\"},\"properties\":{\"description\":\"a\"},\"id\":\"qha\",\"name\":\"yntacihnco\",\"type\":\"mip\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        RaiBlocklist response = manager.raiBlocklistItems()
            .batchAddWithResponse("ukklvzrlr", "l", "cme",
                Arrays.asList(new RaiBlocklistItemBulkRequest().withName("czivfqbqna")
                    .withProperties(new RaiBlocklistItemProperties().withPattern("yenzsieuscpl").withIsRegex(false)),
                    new RaiBlocklistItemBulkRequest().withName("gxlyzkxitdshezs")
                        .withProperties(new RaiBlocklistItemProperties().withPattern("lrupjovmo").withIsRegex(false)),
                    new RaiBlocklistItemBulkRequest().withName("ebrazwzlpzbtzuyk")
                        .withProperties(new RaiBlocklistItemProperties().withPattern("pfs").withIsRegex(false)),
                    new RaiBlocklistItemBulkRequest().withName("fnocmbe")
                        .withProperties(new RaiBlocklistItemProperties().withPattern("fp").withIsRegex(true))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ctgkppgkqzkcyzmf", response.tags().get("ngdyfcixrhlcq"));
        Assertions.assertEquals("a", response.properties().description());
    }
}
