// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHost;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostKind;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountCapabilityHostsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"aiServicesConnections\":[\"hkkyowltjouw\",\"ldxwhieproqksm\"],\"capabilityHostKind\":\"Agents\",\"customerSubnet\":\"vprstv\",\"provisioningState\":\"Succeeded\",\"storageConnections\":[\"jtdyotnplfa\",\"qoccqrqxwetjt\"],\"threadStorageConnections\":[\"u\",\"fdoadtxopgeh\",\"adkm\",\"zgssz\"],\"vectorStoreConnections\":[\"tkbbxuhar\",\"sirncclabvoy\",\"gsuxxczbmyqj\"],\"description\":\"hdsaidj\",\"tags\":{\"xxurntujmoilunwe\":\"rmov\",\"uegrh\":\"hdeeljslkyozdsfz\",\"xvgjbfi\":\"htslejtvxj\",\"bj\":\"bpnjodf\"}},\"id\":\"qwm\",\"name\":\"q\",\"type\":\"moxsa\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CapabilityHost response = manager.accountCapabilityHosts()
            .define("azrhxudd")
            .withExistingAccount("yjmqrf", "iocuselqkr")
            .withProperties(new CapabilityHostProperties().withDescription("rnskby")
                .withTags(mapOf("xqnwhscoz", "hczygxvhajpxe", "ljfewxqo", "wmvgxsmpknpwir"))
                .withAiServicesConnections(Arrays.asList("tffisjmr", "khmwdmd", "gyqi", "okwtjawhvagnqfqq"))
                .withCapabilityHostKind(CapabilityHostKind.AGENTS)
                .withCustomerSubnet("myolcaymjchtvs")
                .withStorageConnections(Arrays.asList("dnzyzawatuwqko", "bczothymgobllms"))
                .withThreadStorageConnections(Arrays.asList("wimaaneakhtmh"))
                .withVectorStoreConnections(Arrays.asList("yanrfvq", "vkhgv", "ogxkfnaoa", "ymhcctopuo")))
            .create();

        Assertions.assertEquals("hdsaidj", response.properties().description());
        Assertions.assertEquals("rmov", response.properties().tags().get("xxurntujmoilunwe"));
        Assertions.assertEquals("hkkyowltjouw", response.properties().aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, response.properties().capabilityHostKind());
        Assertions.assertEquals("vprstv", response.properties().customerSubnet());
        Assertions.assertEquals("jtdyotnplfa", response.properties().storageConnections().get(0));
        Assertions.assertEquals("u", response.properties().threadStorageConnections().get(0));
        Assertions.assertEquals("tkbbxuhar", response.properties().vectorStoreConnections().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
