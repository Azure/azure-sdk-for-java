// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostKind;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapabilityHostPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapabilityHostProperties model = BinaryData.fromString(
            "{\"aiServicesConnections\":[\"bfjkw\",\"u\"],\"capabilityHostKind\":\"Agents\",\"customerSubnet\":\"bhsy\",\"provisioningState\":\"Succeeded\",\"storageConnections\":[\"qhd\",\"nxaulk\"],\"threadStorageConnections\":[\"d\"],\"vectorStoreConnections\":[\"mjnnawtq\",\"bpxuckpggqoweyi\",\"dhlisngwflqqmpi\"],\"description\":\"uwnpqxpxiwfcng\",\"tags\":{\"xtmkzjvkviir\":\"asi\"}}")
            .toObject(CapabilityHostProperties.class);
        Assertions.assertEquals("uwnpqxpxiwfcng", model.description());
        Assertions.assertEquals("asi", model.tags().get("xtmkzjvkviir"));
        Assertions.assertEquals("bfjkw", model.aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, model.capabilityHostKind());
        Assertions.assertEquals("bhsy", model.customerSubnet());
        Assertions.assertEquals("qhd", model.storageConnections().get(0));
        Assertions.assertEquals("d", model.threadStorageConnections().get(0));
        Assertions.assertEquals("mjnnawtq", model.vectorStoreConnections().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapabilityHostProperties model = new CapabilityHostProperties().withDescription("uwnpqxpxiwfcng")
            .withTags(mapOf("xtmkzjvkviir", "asi"))
            .withAiServicesConnections(Arrays.asList("bfjkw", "u"))
            .withCapabilityHostKind(CapabilityHostKind.AGENTS)
            .withCustomerSubnet("bhsy")
            .withStorageConnections(Arrays.asList("qhd", "nxaulk"))
            .withThreadStorageConnections(Arrays.asList("d"))
            .withVectorStoreConnections(Arrays.asList("mjnnawtq", "bpxuckpggqoweyi", "dhlisngwflqqmpi"));
        model = BinaryData.fromObject(model).toObject(CapabilityHostProperties.class);
        Assertions.assertEquals("uwnpqxpxiwfcng", model.description());
        Assertions.assertEquals("asi", model.tags().get("xtmkzjvkviir"));
        Assertions.assertEquals("bfjkw", model.aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, model.capabilityHostKind());
        Assertions.assertEquals("bhsy", model.customerSubnet());
        Assertions.assertEquals("qhd", model.storageConnections().get(0));
        Assertions.assertEquals("d", model.threadStorageConnections().get(0));
        Assertions.assertEquals("mjnnawtq", model.vectorStoreConnections().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
