// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.DefenderForAISetting;
import com.azure.resourcemanager.cognitiveservices.models.DefenderForAISettingState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DefenderForAISettingsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"mskxknp\",\"tags\":{\"odkwwnbafocto\":\"igjsugswhgs\",\"nvkervq\":\"zhaquvwsxb\",\"pabdsrg\":\"hoadhrsxqvzv\",\"hjnlt\":\"ajglzrsubklr\"},\"properties\":{\"state\":\"Disabled\"},\"id\":\"dvqydie\",\"name\":\"qkwaruwd\",\"type\":\"vqzxoebwg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DefenderForAISetting response = manager.defenderForAISettings()
            .getWithResponse("bv", "ipbwxgooo", "zp", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("igjsugswhgs", response.tags().get("odkwwnbafocto"));
        Assertions.assertEquals(DefenderForAISettingState.DISABLED, response.state());
    }
}
