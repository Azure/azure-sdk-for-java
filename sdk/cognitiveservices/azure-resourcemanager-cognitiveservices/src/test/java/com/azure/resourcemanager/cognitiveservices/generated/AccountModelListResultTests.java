// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.AccountModelInner;
import com.azure.resourcemanager.cognitiveservices.models.AccountModelListResult;
import com.azure.resourcemanager.cognitiveservices.models.DeploymentModel;
import com.azure.resourcemanager.cognitiveservices.models.ModelDeprecationInfo;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AccountModelListResultTests {
    @Test
    public void testDeserialize() {
        AccountModelListResult model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"dslfhotwmcy\",\"value\":[{\"baseModel\":{\"format\":\"jnpg\",\"name\":\"ftadehxnltyfs\",\"version\":\"pusuesn\"},\"maxCapacity\":332314223,\"capabilities\":{\"xzdmohctb\":\"avo\"},\"deprecation\":{\"fineTune\":\"dwxdndnv\",\"inference\":\"gujjugwdkcglh\"},\"format\":\"zj\",\"name\":\"ggd\",\"version\":\"ixhbkuofqweykhm\",\"callRateLimit\":{\"count\":37.98073,\"renewalPeriod\":34.070343,\"rules\":[]}},{\"baseModel\":{\"format\":\"whybcib\",\"name\":\"vdcsitynn\",\"version\":\"mdectehfiqscjey\"},\"maxCapacity\":1237692135,\"capabilities\":{\"kqsleyyvxy\":\"kgqhcjrefovg\",\"cr\":\"jpkcattpng\",\"ajvnysounqe\":\"czsqpjhvm\"},\"deprecation\":{\"fineTune\":\"oaeupfhyhltrpmo\",\"inference\":\"mcmatuokthfuiu\"},\"format\":\"sfcpkvxodpuozm\",\"name\":\"ydagfuaxbe\",\"version\":\"iu\",\"callRateLimit\":{\"count\":79.920334,\"renewalPeriod\":75.16582,\"rules\":[]}},{\"baseModel\":{\"format\":\"wz\",\"name\":\"q\",\"version\":\"bsureximo\"},\"maxCapacity\":1027022233,\"capabilities\":{\"uxh\":\"fksymddystki\",\"czvyifq\":\"yudxorrqnbp\"},\"deprecation\":{\"fineTune\":\"dvjsllrmvvdf\",\"inference\":\"t\"},\"format\":\"pulexxbczw\",\"name\":\"uwiqzb\",\"version\":\"vsovmyokac\",\"callRateLimit\":{\"count\":2.3299038,\"renewalPeriod\":94.998985,\"rules\":[]}},{\"baseModel\":{\"format\":\"bpxjmfl\",\"name\":\"vnchrkcci\",\"version\":\"zjuqkhrsaj\"},\"maxCapacity\":481973669,\"capabilities\":{\"sauuimj\":\"oskg\",\"rfbyaosvexcso\":\"vxieduugidyj\",\"vleggzfbuhfmvfax\":\"pclhocohslk\",\"hl\":\"ffeii\"},\"deprecation\":{\"fineTune\":\"zy\",\"inference\":\"hxmzsbbzoggig\"},\"format\":\"burvjxxjnspy\",\"name\":\"tko\",\"version\":\"kouknvudwtiu\",\"callRateLimit\":{\"count\":13.5182085,\"renewalPeriod\":78.78897,\"rules\":[]}}]}")
                .toObject(AccountModelListResult.class);
        Assertions.assertEquals("dslfhotwmcy", model.nextLink());
        Assertions.assertEquals("zj", model.value().get(0).format());
        Assertions.assertEquals("ggd", model.value().get(0).name());
        Assertions.assertEquals("ixhbkuofqweykhm", model.value().get(0).version());
        Assertions.assertEquals("jnpg", model.value().get(0).baseModel().format());
        Assertions.assertEquals("ftadehxnltyfs", model.value().get(0).baseModel().name());
        Assertions.assertEquals("pusuesn", model.value().get(0).baseModel().version());
        Assertions.assertEquals(332314223, model.value().get(0).maxCapacity());
        Assertions.assertEquals("avo", model.value().get(0).capabilities().get("xzdmohctb"));
        Assertions.assertEquals("dwxdndnv", model.value().get(0).deprecation().fineTune());
        Assertions.assertEquals("gujjugwdkcglh", model.value().get(0).deprecation().inference());
    }

    @Test
    public void testSerialize() {
        AccountModelListResult model =
            new AccountModelListResult()
                .withNextLink("dslfhotwmcy")
                .withValue(
                    Arrays
                        .asList(
                            new AccountModelInner()
                                .withFormat("zj")
                                .withName("ggd")
                                .withVersion("ixhbkuofqweykhm")
                                .withBaseModel(
                                    new DeploymentModel()
                                        .withFormat("jnpg")
                                        .withName("ftadehxnltyfs")
                                        .withVersion("pusuesn"))
                                .withMaxCapacity(332314223)
                                .withCapabilities(mapOf("xzdmohctb", "avo"))
                                .withDeprecation(
                                    new ModelDeprecationInfo().withFineTune("dwxdndnv").withInference("gujjugwdkcglh")),
                            new AccountModelInner()
                                .withFormat("sfcpkvxodpuozm")
                                .withName("ydagfuaxbe")
                                .withVersion("iu")
                                .withBaseModel(
                                    new DeploymentModel()
                                        .withFormat("whybcib")
                                        .withName("vdcsitynn")
                                        .withVersion("mdectehfiqscjey"))
                                .withMaxCapacity(1237692135)
                                .withCapabilities(
                                    mapOf("kqsleyyvxy", "kgqhcjrefovg", "cr", "jpkcattpng", "ajvnysounqe", "czsqpjhvm"))
                                .withDeprecation(
                                    new ModelDeprecationInfo()
                                        .withFineTune("oaeupfhyhltrpmo")
                                        .withInference("mcmatuokthfuiu")),
                            new AccountModelInner()
                                .withFormat("pulexxbczw")
                                .withName("uwiqzb")
                                .withVersion("vsovmyokac")
                                .withBaseModel(
                                    new DeploymentModel().withFormat("wz").withName("q").withVersion("bsureximo"))
                                .withMaxCapacity(1027022233)
                                .withCapabilities(mapOf("uxh", "fksymddystki", "czvyifq", "yudxorrqnbp"))
                                .withDeprecation(
                                    new ModelDeprecationInfo().withFineTune("dvjsllrmvvdf").withInference("t")),
                            new AccountModelInner()
                                .withFormat("burvjxxjnspy")
                                .withName("tko")
                                .withVersion("kouknvudwtiu")
                                .withBaseModel(
                                    new DeploymentModel()
                                        .withFormat("bpxjmfl")
                                        .withName("vnchrkcci")
                                        .withVersion("zjuqkhrsaj"))
                                .withMaxCapacity(481973669)
                                .withCapabilities(
                                    mapOf(
                                        "sauuimj",
                                        "oskg",
                                        "rfbyaosvexcso",
                                        "vxieduugidyj",
                                        "vleggzfbuhfmvfax",
                                        "pclhocohslk",
                                        "hl",
                                        "ffeii"))
                                .withDeprecation(
                                    new ModelDeprecationInfo().withFineTune("zy").withInference("hxmzsbbzoggig"))));
        model = BinaryData.fromObject(model).toObject(AccountModelListResult.class);
        Assertions.assertEquals("dslfhotwmcy", model.nextLink());
        Assertions.assertEquals("zj", model.value().get(0).format());
        Assertions.assertEquals("ggd", model.value().get(0).name());
        Assertions.assertEquals("ixhbkuofqweykhm", model.value().get(0).version());
        Assertions.assertEquals("jnpg", model.value().get(0).baseModel().format());
        Assertions.assertEquals("ftadehxnltyfs", model.value().get(0).baseModel().name());
        Assertions.assertEquals("pusuesn", model.value().get(0).baseModel().version());
        Assertions.assertEquals(332314223, model.value().get(0).maxCapacity());
        Assertions.assertEquals("avo", model.value().get(0).capabilities().get("xzdmohctb"));
        Assertions.assertEquals("dwxdndnv", model.value().get(0).deprecation().fineTune());
        Assertions.assertEquals("gujjugwdkcglh", model.value().get(0).deprecation().inference());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
