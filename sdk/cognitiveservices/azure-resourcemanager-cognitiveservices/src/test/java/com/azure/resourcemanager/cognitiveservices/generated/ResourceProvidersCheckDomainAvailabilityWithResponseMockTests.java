// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CheckDomainAvailabilityParameter;
import com.azure.resourcemanager.cognitiveservices.models.DomainAvailability;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ResourceProvidersCheckDomainAvailabilityWithResponseMockTests {
    @Test
    public void testCheckDomainAvailabilityWithResponse() throws Exception {
        String responseStr
            = "{\"isSubdomainAvailable\":true,\"reason\":\"xsi\",\"subdomainName\":\"etgbebjfulb\",\"type\":\"ichdlpn\",\"kind\":\"ubntnbatzviqsow\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DomainAvailability response = manager.resourceProviders()
            .checkDomainAvailabilityWithResponse(new CheckDomainAvailabilityParameter().withSubdomainName("refqy")
                .withType("qotoihiqakydiwfb")
                .withKind("wpzdqtvhcspo"), com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(true, response.isSubdomainAvailable());
        Assertions.assertEquals("xsi", response.reason());
        Assertions.assertEquals("etgbebjfulb", response.subdomainName());
        Assertions.assertEquals("ichdlpn", response.type());
        Assertions.assertEquals("ubntnbatzviqsow", response.kind());
    }
}
