// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRule;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRuleProperties;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem;
import com.azure.resourcemanager.cognitiveservices.models.NspAccessRuleDirection;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterAccessRuleTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterAccessRule model = BinaryData.fromString(
            "{\"name\":\"jraaeranokqguk\",\"properties\":{\"direction\":\"Outbound\",\"addressPrefixes\":[\"roylaxxu\",\"cdisd\"],\"subscriptions\":[{\"id\":\"b\"}],\"networkSecurityPerimeters\":[{\"id\":\"jrwhryvy\",\"perimeterGuid\":\"t\",\"location\":\"lxgccknfnwmbtm\"},{\"id\":\"dvjdhttza\",\"perimeterGuid\":\"edxihchrphkmcrj\",\"location\":\"nsdfzpbgtgky\"}],\"fullyQualifiedDomainNames\":[\"ghrjeuutl\"]}}")
            .toObject(NetworkSecurityPerimeterAccessRule.class);
        Assertions.assertEquals("jraaeranokqguk", model.name());
        Assertions.assertEquals(NspAccessRuleDirection.OUTBOUND, model.properties().direction());
        Assertions.assertEquals("roylaxxu", model.properties().addressPrefixes().get(0));
        Assertions.assertEquals("b", model.properties().subscriptions().get(0).id());
        Assertions.assertEquals("jrwhryvy", model.properties().networkSecurityPerimeters().get(0).id());
        Assertions.assertEquals("t", model.properties().networkSecurityPerimeters().get(0).perimeterGuid());
        Assertions.assertEquals("lxgccknfnwmbtm", model.properties().networkSecurityPerimeters().get(0).location());
        Assertions.assertEquals("ghrjeuutl", model.properties().fullyQualifiedDomainNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterAccessRule model
            = new NetworkSecurityPerimeterAccessRule().withName("jraaeranokqguk")
                .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                    .withDirection(NspAccessRuleDirection.OUTBOUND)
                    .withAddressPrefixes(Arrays.asList("roylaxxu", "cdisd"))
                    .withSubscriptions(
                        Arrays.asList(new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem().withId("b")))
                    .withNetworkSecurityPerimeters(Arrays.asList(
                        new NetworkSecurityPerimeter().withId("jrwhryvy")
                            .withPerimeterGuid("t")
                            .withLocation("lxgccknfnwmbtm"),
                        new NetworkSecurityPerimeter().withId("dvjdhttza")
                            .withPerimeterGuid("edxihchrphkmcrj")
                            .withLocation("nsdfzpbgtgky")))
                    .withFullyQualifiedDomainNames(Arrays.asList("ghrjeuutl")));
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterAccessRule.class);
        Assertions.assertEquals("jraaeranokqguk", model.name());
        Assertions.assertEquals(NspAccessRuleDirection.OUTBOUND, model.properties().direction());
        Assertions.assertEquals("roylaxxu", model.properties().addressPrefixes().get(0));
        Assertions.assertEquals("b", model.properties().subscriptions().get(0).id());
        Assertions.assertEquals("jrwhryvy", model.properties().networkSecurityPerimeters().get(0).id());
        Assertions.assertEquals("t", model.properties().networkSecurityPerimeters().get(0).perimeterGuid());
        Assertions.assertEquals("lxgccknfnwmbtm", model.properties().networkSecurityPerimeters().get(0).location());
        Assertions.assertEquals("ghrjeuutl", model.properties().fullyQualifiedDomainNames().get(0));
    }
}
