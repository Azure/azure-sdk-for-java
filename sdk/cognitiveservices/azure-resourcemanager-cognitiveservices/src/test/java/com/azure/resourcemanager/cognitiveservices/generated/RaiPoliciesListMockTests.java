// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicy;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"mghg\",\"tags\":{\"kfmkhcqtwmlmhjn\":\"txlujkhnjcmr\"},\"properties\":{\"type\":\"UserManaged\",\"mode\":\"Default\",\"basePolicyName\":\"e\",\"contentFilters\":[{\"name\":\"gpokddxejhhkvgu\",\"enabled\":false,\"severityThreshold\":\"High\",\"blocking\":false,\"source\":\"Prompt\"}],\"customBlocklists\":[{\"source\":\"Prompt\",\"blocklistName\":\"pgb\",\"blocking\":true},{\"source\":\"Completion\",\"blocklistName\":\"kwvdxa\",\"blocking\":true},{\"source\":\"Completion\",\"blocklistName\":\"yrlji\",\"blocking\":false}],\"customTopics\":[{\"source\":\"Completion\",\"topicName\":\"qlpbcjtrpzuyu\",\"blocking\":true},{\"source\":\"Completion\",\"topicName\":\"hsqe\",\"blocking\":false}]},\"id\":\"qelwgdhuruzytza\",\"name\":\"ogatmoljiy\",\"type\":\"mpinmzvfkneerzzt\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<RaiPolicy> response
            = manager.raiPolicies().list("qhtfpwpqbye", "uwyqwdq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("txlujkhnjcmr", response.iterator().next().tags().get("kfmkhcqtwmlmhjn"));
        Assertions.assertEquals(RaiPolicyMode.DEFAULT, response.iterator().next().properties().mode());
        Assertions.assertEquals("e", response.iterator().next().properties().basePolicyName());
        Assertions.assertEquals("gpokddxejhhkvgu",
            response.iterator().next().properties().contentFilters().get(0).name());
        Assertions.assertFalse(response.iterator().next().properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.HIGH,
            response.iterator().next().properties().contentFilters().get(0).severityThreshold());
        Assertions.assertFalse(response.iterator().next().properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT,
            response.iterator().next().properties().contentFilters().get(0).source());
        Assertions.assertEquals("pgb",
            response.iterator().next().properties().customBlocklists().get(0).blocklistName());
        Assertions.assertTrue(response.iterator().next().properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT,
            response.iterator().next().properties().customBlocklists().get(0).source());
        Assertions.assertEquals("qlpbcjtrpzuyu",
            response.iterator().next().properties().customTopics().get(0).topicName());
        Assertions.assertTrue(response.iterator().next().properties().customTopics().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            response.iterator().next().properties().customTopics().get(0).source());
    }
}
