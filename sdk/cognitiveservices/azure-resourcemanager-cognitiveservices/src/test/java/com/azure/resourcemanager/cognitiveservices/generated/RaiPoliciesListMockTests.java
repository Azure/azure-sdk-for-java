// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicy;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiPoliciesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"b\",\"tags\":{\"gv\":\"clkfkee\",\"l\":\"pemtuoqu\",\"nyjpylxdbfv\":\"egqavnigflqqb\"},\"properties\":{\"type\":\"SystemManaged\",\"mode\":\"Default\",\"basePolicyName\":\"baevwjcnkottl\",\"contentFilters\":[{\"name\":\"ajmailfemjjza\",\"enabled\":true,\"severityThreshold\":\"High\",\"blocking\":true,\"source\":\"Prompt\"},{\"name\":\"xbdmvrscmqernd\",\"enabled\":true,\"severityThreshold\":\"High\",\"blocking\":false,\"source\":\"Prompt\"},{\"name\":\"nnxrkad\",\"enabled\":true,\"severityThreshold\":\"High\",\"blocking\":false,\"source\":\"Prompt\"},{\"name\":\"iripfohyk\",\"enabled\":false,\"severityThreshold\":\"High\",\"blocking\":true,\"source\":\"Completion\"}],\"customBlocklists\":[{\"source\":\"Completion\",\"blocklistName\":\"njizb\",\"blocking\":false},{\"source\":\"Prompt\",\"blocklistName\":\"mrvz\",\"blocking\":true},{\"source\":\"Completion\",\"blocklistName\":\"rziuctixgbdsuif\",\"blocking\":false},{\"source\":\"Completion\",\"blocklistName\":\"pezkis\",\"blocking\":false}]},\"id\":\"mdghsyparyb\",\"name\":\"ufptb\",\"type\":\"czjnc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RaiPolicy> response
            = manager.raiPolicies().list("shxgonoy", "fq", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("clkfkee", response.iterator().next().tags().get("gv"));
        Assertions.assertEquals(RaiPolicyMode.DEFAULT, response.iterator().next().properties().mode());
        Assertions.assertEquals("baevwjcnkottl", response.iterator().next().properties().basePolicyName());
        Assertions.assertEquals("ajmailfemjjza",
            response.iterator().next().properties().contentFilters().get(0).name());
        Assertions.assertEquals(true, response.iterator().next().properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.HIGH,
            response.iterator().next().properties().contentFilters().get(0).severityThreshold());
        Assertions.assertEquals(true, response.iterator().next().properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT,
            response.iterator().next().properties().contentFilters().get(0).source());
        Assertions.assertEquals("njizb",
            response.iterator().next().properties().customBlocklists().get(0).blocklistName());
        Assertions.assertEquals(false, response.iterator().next().properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            response.iterator().next().properties().customBlocklists().get(0).source());
    }
}
