// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.ProjectInner;
import com.azure.resourcemanager.cognitiveservices.models.Identity;
import com.azure.resourcemanager.cognitiveservices.models.ProjectProperties;
import com.azure.resourcemanager.cognitiveservices.models.ResourceIdentityType;
import com.azure.resourcemanager.cognitiveservices.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ProjectInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProjectInner model = BinaryData.fromString(
            "{\"identity\":{\"type\":\"None\",\"tenantId\":\"aj\",\"principalId\":\"wxacevehj\",\"userAssignedIdentities\":{\"gv\":{\"principalId\":\"oafgaoql\",\"clientId\":\"aeylinm\"},\"prlpy\":{\"principalId\":\"r\",\"clientId\":\"hriypoqeyhlqhy\"}}},\"tags\":{\"smexiitdf\":\"iq\",\"nustgnljh\":\"xtyasiibmiyb\"},\"location\":\"g\",\"properties\":{\"provisioningState\":\"Canceled\",\"displayName\":\"avmqfoudor\",\"description\":\"gyyprotwy\",\"endpoints\":{\"bxhugcmjkavlgorb\":\"d\"},\"isDefault\":false},\"etag\":\"mdtzfjltfvnzc\",\"id\":\"jtotpvopvpbd\",\"name\":\"zq\",\"type\":\"qqihedsvqwthmk\"}")
            .toObject(ProjectInner.class);
        Assertions.assertEquals(ResourceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("iq", model.tags().get("smexiitdf"));
        Assertions.assertEquals("g", model.location());
        Assertions.assertEquals("avmqfoudor", model.properties().displayName());
        Assertions.assertEquals("gyyprotwy", model.properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProjectInner model = new ProjectInner().withIdentity(new Identity().withType(ResourceIdentityType.NONE)
            .withUserAssignedIdentities(mapOf("gv", new UserAssignedIdentity(), "prlpy", new UserAssignedIdentity())))
            .withTags(mapOf("smexiitdf", "iq", "nustgnljh", "xtyasiibmiyb"))
            .withLocation("g")
            .withProperties(new ProjectProperties().withDisplayName("avmqfoudor").withDescription("gyyprotwy"));
        model = BinaryData.fromObject(model).toObject(ProjectInner.class);
        Assertions.assertEquals(ResourceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("iq", model.tags().get("smexiitdf"));
        Assertions.assertEquals("g", model.location());
        Assertions.assertEquals("avmqfoudor", model.properties().displayName());
        Assertions.assertEquals("gyyprotwy", model.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
