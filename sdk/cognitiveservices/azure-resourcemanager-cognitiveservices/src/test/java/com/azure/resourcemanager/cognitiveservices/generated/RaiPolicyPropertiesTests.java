// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.CustomBlocklistConfig;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentFilter;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class RaiPolicyPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiPolicyProperties model = BinaryData.fromString(
            "{\"type\":\"UserManaged\",\"mode\":\"Asynchronous_filter\",\"basePolicyName\":\"nfqn\",\"contentFilters\":[{\"name\":\"sx\",\"enabled\":true,\"severityThreshold\":\"Low\",\"blocking\":false,\"source\":\"Prompt\"},{\"name\":\"ircizjxvy\",\"enabled\":true,\"severityThreshold\":\"Low\",\"blocking\":false,\"source\":\"Completion\"},{\"name\":\"ygdyftumrtw\",\"enabled\":true,\"severityThreshold\":\"High\",\"blocking\":true,\"source\":\"Completion\"}],\"customBlocklists\":[{\"source\":\"Completion\",\"blocklistName\":\"yztsfmz\",\"blocking\":true},{\"source\":\"Completion\",\"blocklistName\":\"hchqnrnrpx\",\"blocking\":true}]}")
            .toObject(RaiPolicyProperties.class);
        Assertions.assertEquals(RaiPolicyMode.ASYNCHRONOUS_FILTER, model.mode());
        Assertions.assertEquals("nfqn", model.basePolicyName());
        Assertions.assertEquals("sx", model.contentFilters().get(0).name());
        Assertions.assertTrue(model.contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.LOW, model.contentFilters().get(0).severityThreshold());
        Assertions.assertFalse(model.contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.contentFilters().get(0).source());
        Assertions.assertEquals("yztsfmz", model.customBlocklists().get(0).blocklistName());
        Assertions.assertTrue(model.customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION, model.customBlocklists().get(0).source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiPolicyProperties model = new RaiPolicyProperties().withMode(RaiPolicyMode.ASYNCHRONOUS_FILTER)
            .withBasePolicyName("nfqn")
            .withContentFilters(Arrays.asList(
                new RaiPolicyContentFilter().withName("sx")
                    .withEnabled(true)
                    .withSeverityThreshold(ContentLevel.LOW)
                    .withBlocking(false)
                    .withSource(RaiPolicyContentSource.PROMPT),
                new RaiPolicyContentFilter().withName("ircizjxvy")
                    .withEnabled(true)
                    .withSeverityThreshold(ContentLevel.LOW)
                    .withBlocking(false)
                    .withSource(RaiPolicyContentSource.COMPLETION),
                new RaiPolicyContentFilter().withName("ygdyftumrtw")
                    .withEnabled(true)
                    .withSeverityThreshold(ContentLevel.HIGH)
                    .withBlocking(true)
                    .withSource(RaiPolicyContentSource.COMPLETION)))
            .withCustomBlocklists(Arrays.asList(
                new CustomBlocklistConfig().withBlocklistName("yztsfmz")
                    .withBlocking(true)
                    .withSource(RaiPolicyContentSource.COMPLETION),
                new CustomBlocklistConfig().withBlocklistName("hchqnrnrpx")
                    .withBlocking(true)
                    .withSource(RaiPolicyContentSource.COMPLETION)));
        model = BinaryData.fromObject(model).toObject(RaiPolicyProperties.class);
        Assertions.assertEquals(RaiPolicyMode.ASYNCHRONOUS_FILTER, model.mode());
        Assertions.assertEquals("nfqn", model.basePolicyName());
        Assertions.assertEquals("sx", model.contentFilters().get(0).name());
        Assertions.assertTrue(model.contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.LOW, model.contentFilters().get(0).severityThreshold());
        Assertions.assertFalse(model.contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.contentFilters().get(0).source());
        Assertions.assertEquals("yztsfmz", model.customBlocklists().get(0).blocklistName());
        Assertions.assertTrue(model.customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION, model.customBlocklists().get(0).source());
    }
}
