// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentTierInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentCost;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentQuota;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import org.junit.jupiter.api.Assertions;

public final class CommitmentTierInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommitmentTierInner model =
            BinaryData
                .fromString(
                    "{\"kind\":\"suyonobglaocq\",\"skuName\":\"ccm\",\"hostingModel\":\"DisconnectedContainer\",\"planType\":\"xy\",\"tier\":\"moyrxvwfudwpz\",\"maxCount\":1508312014,\"quota\":{\"quantity\":7345023164643375975,\"unit\":\"rqjbhckfrl\"},\"cost\":{\"commitmentMeterId\":\"sbkyvpycanuzbp\",\"overageMeterId\":\"afkuwb\"}}")
                .toObject(CommitmentTierInner.class);
        Assertions.assertEquals("suyonobglaocq", model.kind());
        Assertions.assertEquals("ccm", model.skuName());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER, model.hostingModel());
        Assertions.assertEquals("xy", model.planType());
        Assertions.assertEquals("moyrxvwfudwpz", model.tier());
        Assertions.assertEquals(1508312014, model.maxCount());
        Assertions.assertEquals(7345023164643375975L, model.quota().quantity());
        Assertions.assertEquals("rqjbhckfrl", model.quota().unit());
        Assertions.assertEquals("sbkyvpycanuzbp", model.cost().commitmentMeterId());
        Assertions.assertEquals("afkuwb", model.cost().overageMeterId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommitmentTierInner model =
            new CommitmentTierInner()
                .withKind("suyonobglaocq")
                .withSkuName("ccm")
                .withHostingModel(HostingModel.DISCONNECTED_CONTAINER)
                .withPlanType("xy")
                .withTier("moyrxvwfudwpz")
                .withMaxCount(1508312014)
                .withQuota(new CommitmentQuota().withQuantity(7345023164643375975L).withUnit("rqjbhckfrl"))
                .withCost(new CommitmentCost().withCommitmentMeterId("sbkyvpycanuzbp").withOverageMeterId("afkuwb"));
        model = BinaryData.fromObject(model).toObject(CommitmentTierInner.class);
        Assertions.assertEquals("suyonobglaocq", model.kind());
        Assertions.assertEquals("ccm", model.skuName());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER, model.hostingModel());
        Assertions.assertEquals("xy", model.planType());
        Assertions.assertEquals("moyrxvwfudwpz", model.tier());
        Assertions.assertEquals(1508312014, model.maxCount());
        Assertions.assertEquals(7345023164643375975L, model.quota().quantity());
        Assertions.assertEquals("rqjbhckfrl", model.quota().unit());
        Assertions.assertEquals("sbkyvpycanuzbp", model.cost().commitmentMeterId());
        Assertions.assertEquals("afkuwb", model.cost().overageMeterId());
    }
}
