// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentTierInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentCost;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentQuota;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import org.junit.jupiter.api.Assertions;

public final class CommitmentTierInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommitmentTierInner model = BinaryData.fromString(
            "{\"kind\":\"wmdyvxqtay\",\"skuName\":\"ww\",\"hostingModel\":\"ProvisionedWeb\",\"planType\":\"bexrmcq\",\"tier\":\"ycnojvknmefqsg\",\"maxCount\":488274582,\"quota\":{\"quantity\":7076429131580364634,\"unit\":\"zhpvgqzcjrvxd\"},\"cost\":{\"commitmentMeterId\":\"mwlxk\",\"overageMeterId\":\"gfhzovawjvzunlut\"}}")
            .toObject(CommitmentTierInner.class);
        Assertions.assertEquals("wmdyvxqtay", model.kind());
        Assertions.assertEquals("ww", model.skuName());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, model.hostingModel());
        Assertions.assertEquals("bexrmcq", model.planType());
        Assertions.assertEquals("ycnojvknmefqsg", model.tier());
        Assertions.assertEquals(488274582, model.maxCount());
        Assertions.assertEquals(7076429131580364634L, model.quota().quantity());
        Assertions.assertEquals("zhpvgqzcjrvxd", model.quota().unit());
        Assertions.assertEquals("mwlxk", model.cost().commitmentMeterId());
        Assertions.assertEquals("gfhzovawjvzunlut", model.cost().overageMeterId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommitmentTierInner model = new CommitmentTierInner().withKind("wmdyvxqtay")
            .withSkuName("ww")
            .withHostingModel(HostingModel.PROVISIONED_WEB)
            .withPlanType("bexrmcq")
            .withTier("ycnojvknmefqsg")
            .withMaxCount(488274582)
            .withQuota(new CommitmentQuota().withQuantity(7076429131580364634L).withUnit("zhpvgqzcjrvxd"))
            .withCost(new CommitmentCost().withCommitmentMeterId("mwlxk").withOverageMeterId("gfhzovawjvzunlut"));
        model = BinaryData.fromObject(model).toObject(CommitmentTierInner.class);
        Assertions.assertEquals("wmdyvxqtay", model.kind());
        Assertions.assertEquals("ww", model.skuName());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, model.hostingModel());
        Assertions.assertEquals("bexrmcq", model.planType());
        Assertions.assertEquals("ycnojvknmefqsg", model.tier());
        Assertions.assertEquals(488274582, model.maxCount());
        Assertions.assertEquals(7076429131580364634L, model.quota().quantity());
        Assertions.assertEquals("zhpvgqzcjrvxd", model.quota().unit());
        Assertions.assertEquals("mwlxk", model.cost().commitmentMeterId());
        Assertions.assertEquals("gfhzovawjvzunlut", model.cost().overageMeterId());
    }
}
