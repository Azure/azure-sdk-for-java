// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentTierInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentCost;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentQuota;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import org.junit.jupiter.api.Assertions;

public final class CommitmentTierInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommitmentTierInner model = BinaryData.fromString(
            "{\"kind\":\"hzceuojgjrwjue\",\"skuName\":\"twm\",\"hostingModel\":\"ConnectedContainer\",\"planType\":\"dxwitx\",\"tier\":\"jawgqwg\",\"maxCount\":369820426,\"quota\":{\"quantity\":7904939230383834932,\"unit\":\"bkpyc\"},\"cost\":{\"commitmentMeterId\":\"wndnhj\",\"overageMeterId\":\"uwhvylwzbtdhxujz\"}}")
            .toObject(CommitmentTierInner.class);
        Assertions.assertEquals("hzceuojgjrwjue", model.kind());
        Assertions.assertEquals("twm", model.skuName());
        Assertions.assertEquals(HostingModel.CONNECTED_CONTAINER, model.hostingModel());
        Assertions.assertEquals("dxwitx", model.planType());
        Assertions.assertEquals("jawgqwg", model.tier());
        Assertions.assertEquals(369820426, model.maxCount());
        Assertions.assertEquals(7904939230383834932L, model.quota().quantity());
        Assertions.assertEquals("bkpyc", model.quota().unit());
        Assertions.assertEquals("wndnhj", model.cost().commitmentMeterId());
        Assertions.assertEquals("uwhvylwzbtdhxujz", model.cost().overageMeterId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommitmentTierInner model = new CommitmentTierInner().withKind("hzceuojgjrwjue")
            .withSkuName("twm")
            .withHostingModel(HostingModel.CONNECTED_CONTAINER)
            .withPlanType("dxwitx")
            .withTier("jawgqwg")
            .withMaxCount(369820426)
            .withQuota(new CommitmentQuota().withQuantity(7904939230383834932L).withUnit("bkpyc"))
            .withCost(new CommitmentCost().withCommitmentMeterId("wndnhj").withOverageMeterId("uwhvylwzbtdhxujz"));
        model = BinaryData.fromObject(model).toObject(CommitmentTierInner.class);
        Assertions.assertEquals("hzceuojgjrwjue", model.kind());
        Assertions.assertEquals("twm", model.skuName());
        Assertions.assertEquals(HostingModel.CONNECTED_CONTAINER, model.hostingModel());
        Assertions.assertEquals("dxwitx", model.planType());
        Assertions.assertEquals("jawgqwg", model.tier());
        Assertions.assertEquals(369820426, model.maxCount());
        Assertions.assertEquals(7904939230383834932L, model.quota().quantity());
        Assertions.assertEquals("bkpyc", model.quota().unit());
        Assertions.assertEquals("wndnhj", model.cost().commitmentMeterId());
        Assertions.assertEquals("uwhvylwzbtdhxujz", model.cost().overageMeterId());
    }
}
