// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentTierInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentCost;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentQuota;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import org.junit.jupiter.api.Assertions;

public final class CommitmentTierInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommitmentTierInner model = BinaryData.fromString(
            "{\"kind\":\"mpowuwpr\",\"skuName\":\"lve\",\"hostingModel\":\"Web\",\"planType\":\"pjmkhfxobbc\",\"tier\":\"s\",\"maxCount\":1626950587,\"quota\":{\"quantity\":4063358469478582470,\"unit\":\"bpbewtghfgb\"},\"cost\":{\"commitmentMeterId\":\"wxzvlvqhjkb\",\"overageMeterId\":\"ibtnmxiebwwaloay\"}}")
            .toObject(CommitmentTierInner.class);
        Assertions.assertEquals("mpowuwpr", model.kind());
        Assertions.assertEquals("lve", model.skuName());
        Assertions.assertEquals(HostingModel.WEB, model.hostingModel());
        Assertions.assertEquals("pjmkhfxobbc", model.planType());
        Assertions.assertEquals("s", model.tier());
        Assertions.assertEquals(1626950587, model.maxCount());
        Assertions.assertEquals(4063358469478582470L, model.quota().quantity());
        Assertions.assertEquals("bpbewtghfgb", model.quota().unit());
        Assertions.assertEquals("wxzvlvqhjkb", model.cost().commitmentMeterId());
        Assertions.assertEquals("ibtnmxiebwwaloay", model.cost().overageMeterId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommitmentTierInner model = new CommitmentTierInner().withKind("mpowuwpr")
            .withSkuName("lve")
            .withHostingModel(HostingModel.WEB)
            .withPlanType("pjmkhfxobbc")
            .withTier("s")
            .withMaxCount(1626950587)
            .withQuota(new CommitmentQuota().withQuantity(4063358469478582470L).withUnit("bpbewtghfgb"))
            .withCost(new CommitmentCost().withCommitmentMeterId("wxzvlvqhjkb").withOverageMeterId("ibtnmxiebwwaloay"));
        model = BinaryData.fromObject(model).toObject(CommitmentTierInner.class);
        Assertions.assertEquals("mpowuwpr", model.kind());
        Assertions.assertEquals("lve", model.skuName());
        Assertions.assertEquals(HostingModel.WEB, model.hostingModel());
        Assertions.assertEquals("pjmkhfxobbc", model.planType());
        Assertions.assertEquals("s", model.tier());
        Assertions.assertEquals(1626950587, model.maxCount());
        Assertions.assertEquals(4063358469478582470L, model.quota().quantity());
        Assertions.assertEquals("bpbewtghfgb", model.quota().unit());
        Assertions.assertEquals("wxzvlvqhjkb", model.cost().commitmentMeterId());
        Assertions.assertEquals("ibtnmxiebwwaloay", model.cost().overageMeterId());
    }
}
