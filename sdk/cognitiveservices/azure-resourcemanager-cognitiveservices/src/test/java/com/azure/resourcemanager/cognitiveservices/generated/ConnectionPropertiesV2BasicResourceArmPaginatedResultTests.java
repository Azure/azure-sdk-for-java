// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.ConnectionPropertiesV2BasicResourceInner;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2BasicResourceArmPaginatedResult;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionPropertiesV2BasicResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionPropertiesV2BasicResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"nextLink\":\"clafzvaylpt\",\"value\":[{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"Drill\",\"createdByWorkspaceArmId\":\"tcmwqkchc\",\"error\":\"axfe\",\"expiryTime\":\"2021-10-14T19:19:57Z\",\"group\":\"Database\",\"isSharedToAll\":true,\"metadata\":{\"hkbffmbm\":\"eqvhpsylkk\",\"gjxsnptfu\":\"zjrgyww\"},\"peRequirement\":\"Required\",\"peStatus\":\"Active\",\"sharedUserList\":[\"o\",\"pttaqutd\",\"wemxswvruunzz\",\"gehkfkimrtixokff\"],\"target\":\"inljqepqwhixmo\",\"useWorkspaceManagedIdentity\":false},\"id\":\"shiy\",\"name\":\"gvelfc\",\"type\":\"du\"},{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"GoogleCloudStorage\",\"createdByWorkspaceArmId\":\"rds\",\"error\":\"wcobie\",\"expiryTime\":\"2021-02-11T07:52:46Z\",\"group\":\"ServicesAndApps\",\"isSharedToAll\":true,\"metadata\":{\"ghgshejjtbxqmu\":\"izcil\",\"ycucrwnamikzeb\":\"uxlxqzvners\",\"ziqgfuh\":\"qbsms\"},\"peRequirement\":\"NotApplicable\",\"peStatus\":\"Inactive\",\"sharedUserList\":[\"hvhcz\",\"n\",\"fbycjs\"],\"target\":\"wwixzvumw\",\"useWorkspaceManagedIdentity\":true},\"id\":\"hndvnoamldsehao\",\"name\":\"djh\",\"type\":\"flzokxco\"}]}")
            .toObject(ConnectionPropertiesV2BasicResourceArmPaginatedResult.class);
        Assertions.assertEquals("clafzvaylpt", model.nextLink());
        Assertions.assertEquals(ConnectionCategory.DRILL, model.value().get(0).properties().category());
        Assertions.assertEquals("axfe", model.value().get(0).properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-14T19:19:57Z"),
            model.value().get(0).properties().expiryTime());
        Assertions.assertTrue(model.value().get(0).properties().isSharedToAll());
        Assertions.assertEquals("eqvhpsylkk", model.value().get(0).properties().metadata().get("hkbffmbm"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.value().get(0).properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.ACTIVE, model.value().get(0).properties().peStatus());
        Assertions.assertEquals("o", model.value().get(0).properties().sharedUserList().get(0));
        Assertions.assertEquals("inljqepqwhixmo", model.value().get(0).properties().target());
        Assertions.assertFalse(model.value().get(0).properties().useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionPropertiesV2BasicResourceArmPaginatedResult model
            = new ConnectionPropertiesV2BasicResourceArmPaginatedResult().withNextLink("clafzvaylpt")
                .withValue(Arrays.asList(
                    new ConnectionPropertiesV2BasicResourceInner()
                        .withProperties(new ConnectionPropertiesV2().withCategory(ConnectionCategory.DRILL)
                            .withError("axfe")
                            .withExpiryTime(OffsetDateTime.parse("2021-10-14T19:19:57Z"))
                            .withIsSharedToAll(true)
                            .withMetadata(mapOf("hkbffmbm", "eqvhpsylkk", "gjxsnptfu", "zjrgyww"))
                            .withPeRequirement(ManagedPERequirement.REQUIRED)
                            .withPeStatus(ManagedPEStatus.ACTIVE)
                            .withSharedUserList(Arrays.asList("o", "pttaqutd", "wemxswvruunzz", "gehkfkimrtixokff"))
                            .withTarget("inljqepqwhixmo")
                            .withUseWorkspaceManagedIdentity(false)),
                    new ConnectionPropertiesV2BasicResourceInner().withProperties(
                        new ConnectionPropertiesV2().withCategory(ConnectionCategory.GOOGLE_CLOUD_STORAGE)
                            .withError("wcobie")
                            .withExpiryTime(OffsetDateTime.parse("2021-02-11T07:52:46Z"))
                            .withIsSharedToAll(true)
                            .withMetadata(
                                mapOf("ghgshejjtbxqmu", "izcil", "ycucrwnamikzeb", "uxlxqzvners", "ziqgfuh", "qbsms"))
                            .withPeRequirement(ManagedPERequirement.NOT_APPLICABLE)
                            .withPeStatus(ManagedPEStatus.INACTIVE)
                            .withSharedUserList(Arrays.asList("hvhcz", "n", "fbycjs"))
                            .withTarget("wwixzvumw")
                            .withUseWorkspaceManagedIdentity(true))));
        model = BinaryData.fromObject(model).toObject(ConnectionPropertiesV2BasicResourceArmPaginatedResult.class);
        Assertions.assertEquals("clafzvaylpt", model.nextLink());
        Assertions.assertEquals(ConnectionCategory.DRILL, model.value().get(0).properties().category());
        Assertions.assertEquals("axfe", model.value().get(0).properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-14T19:19:57Z"),
            model.value().get(0).properties().expiryTime());
        Assertions.assertTrue(model.value().get(0).properties().isSharedToAll());
        Assertions.assertEquals("eqvhpsylkk", model.value().get(0).properties().metadata().get("hkbffmbm"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.value().get(0).properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.ACTIVE, model.value().get(0).properties().peStatus());
        Assertions.assertEquals("o", model.value().get(0).properties().sharedUserList().get(0));
        Assertions.assertEquals("inljqepqwhixmo", model.value().get(0).properties().target());
        Assertions.assertFalse(model.value().get(0).properties().useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
