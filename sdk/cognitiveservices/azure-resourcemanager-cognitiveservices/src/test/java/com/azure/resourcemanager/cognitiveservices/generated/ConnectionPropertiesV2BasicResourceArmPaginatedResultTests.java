// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.ConnectionPropertiesV2BasicResourceInner;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2BasicResourceArmPaginatedResult;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionPropertiesV2BasicResourceArmPaginatedResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionPropertiesV2BasicResourceArmPaginatedResult model = BinaryData.fromString(
            "{\"nextLink\":\"fkspzhzmtksjci\",\"value\":[{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"AzureOpenAI\",\"createdByWorkspaceArmId\":\"cdgljplkeuac\",\"error\":\"omflrytswfp\",\"expiryTime\":\"2021-10-02T12:53:04Z\",\"group\":\"AzureAI\",\"isSharedToAll\":false,\"metadata\":{\"qjjyslurl\":\"skw\",\"slsrhmpq\":\"shhkvpedw\",\"dcbrwimuvq\":\"wwsko\"},\"peRequirement\":\"Required\",\"peStatus\":\"NotApplicable\",\"sharedUserList\":[\"rrleaesinuqt\",\"jqo\",\"bpihehcecybmrqbr\",\"bbmpxdlvykfre\"],\"target\":\"rseqwjksghudgz\",\"useWorkspaceManagedIdentity\":true},\"id\":\"jggsvo\",\"name\":\"jkxibda\",\"type\":\"hrkmdyomkxfbvfbh\"},{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"AzureOpenAI\",\"createdByWorkspaceArmId\":\"hpwpgddeimawzovg\",\"error\":\"um\",\"expiryTime\":\"2021-01-21T03:14:36Z\",\"group\":\"File\",\"isSharedToAll\":false,\"metadata\":{\"nsq\":\"tbw\",\"ytwvczcswkacve\":\"wxwcomli\"},\"peRequirement\":\"NotApplicable\",\"peStatus\":\"Active\",\"sharedUserList\":[\"hbwrnfxtgddpqth\"],\"target\":\"n\",\"useWorkspaceManagedIdentity\":true},\"id\":\"yank\",\"name\":\"oe\",\"type\":\"swankltytmh\"},{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"MongoDbV2\",\"createdByWorkspaceArmId\":\"nnhdrl\",\"error\":\"gjc\",\"expiryTime\":\"2021-02-02T03:00:16Z\",\"group\":\"Database\",\"isSharedToAll\":false,\"metadata\":{\"eeczgfbu\":\"wyw\",\"ycsxzu\":\"klelssxb\"},\"peRequirement\":\"Required\",\"peStatus\":\"Active\",\"sharedUserList\":[\"desqplpvmjcdo\",\"wb\"],\"target\":\"yvteowxvgpiudeu\",\"useWorkspaceManagedIdentity\":false},\"id\":\"zec\",\"name\":\"axwk\",\"type\":\"fykhvuhxepmru\"}]}")
            .toObject(ConnectionPropertiesV2BasicResourceArmPaginatedResult.class);
        Assertions.assertEquals("fkspzhzmtksjci", model.nextLink());
        Assertions.assertEquals(ConnectionCategory.AZURE_OPEN_AI, model.value().get(0).properties().category());
        Assertions.assertEquals("omflrytswfp", model.value().get(0).properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T12:53:04Z"),
            model.value().get(0).properties().expiryTime());
        Assertions.assertFalse(model.value().get(0).properties().isSharedToAll());
        Assertions.assertEquals("skw", model.value().get(0).properties().metadata().get("qjjyslurl"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.value().get(0).properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.NOT_APPLICABLE, model.value().get(0).properties().peStatus());
        Assertions.assertEquals("rrleaesinuqt", model.value().get(0).properties().sharedUserList().get(0));
        Assertions.assertEquals("rseqwjksghudgz", model.value().get(0).properties().target());
        Assertions.assertTrue(model.value().get(0).properties().useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionPropertiesV2BasicResourceArmPaginatedResult model
            = new ConnectionPropertiesV2BasicResourceArmPaginatedResult().withNextLink("fkspzhzmtksjci")
                .withValue(
                    Arrays.asList(
                        new ConnectionPropertiesV2BasicResourceInner()
                            .withProperties(new ConnectionPropertiesV2().withCategory(ConnectionCategory.AZURE_OPEN_AI)
                                .withError("omflrytswfp")
                                .withExpiryTime(OffsetDateTime.parse("2021-10-02T12:53:04Z"))
                                .withIsSharedToAll(false)
                                .withMetadata(mapOf("qjjyslurl", "skw", "slsrhmpq", "shhkvpedw", "dcbrwimuvq", "wwsko"))
                                .withPeRequirement(ManagedPERequirement.REQUIRED)
                                .withPeStatus(ManagedPEStatus.NOT_APPLICABLE)
                                .withSharedUserList(
                                    Arrays.asList("rrleaesinuqt", "jqo", "bpihehcecybmrqbr", "bbmpxdlvykfre"))
                                .withTarget("rseqwjksghudgz")
                                .withUseWorkspaceManagedIdentity(true)),
                        new ConnectionPropertiesV2BasicResourceInner()
                            .withProperties(new ConnectionPropertiesV2().withCategory(ConnectionCategory.AZURE_OPEN_AI)
                                .withError("um")
                                .withExpiryTime(OffsetDateTime.parse("2021-01-21T03:14:36Z"))
                                .withIsSharedToAll(false)
                                .withMetadata(mapOf("nsq", "tbw", "ytwvczcswkacve", "wxwcomli"))
                                .withPeRequirement(ManagedPERequirement.NOT_APPLICABLE)
                                .withPeStatus(ManagedPEStatus.ACTIVE)
                                .withSharedUserList(Arrays.asList("hbwrnfxtgddpqth"))
                                .withTarget("n")
                                .withUseWorkspaceManagedIdentity(true)),
                        new ConnectionPropertiesV2BasicResourceInner()
                            .withProperties(new ConnectionPropertiesV2().withCategory(ConnectionCategory.MONGO_DB_V2)
                                .withError("gjc")
                                .withExpiryTime(OffsetDateTime.parse("2021-02-02T03:00:16Z"))
                                .withIsSharedToAll(false)
                                .withMetadata(mapOf("eeczgfbu", "wyw", "ycsxzu", "klelssxb"))
                                .withPeRequirement(ManagedPERequirement.REQUIRED)
                                .withPeStatus(ManagedPEStatus.ACTIVE)
                                .withSharedUserList(Arrays.asList("desqplpvmjcdo", "wb"))
                                .withTarget("yvteowxvgpiudeu")
                                .withUseWorkspaceManagedIdentity(false))));
        model = BinaryData.fromObject(model).toObject(ConnectionPropertiesV2BasicResourceArmPaginatedResult.class);
        Assertions.assertEquals("fkspzhzmtksjci", model.nextLink());
        Assertions.assertEquals(ConnectionCategory.AZURE_OPEN_AI, model.value().get(0).properties().category());
        Assertions.assertEquals("omflrytswfp", model.value().get(0).properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T12:53:04Z"),
            model.value().get(0).properties().expiryTime());
        Assertions.assertFalse(model.value().get(0).properties().isSharedToAll());
        Assertions.assertEquals("skw", model.value().get(0).properties().metadata().get("qjjyslurl"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.value().get(0).properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.NOT_APPLICABLE, model.value().get(0).properties().peStatus());
        Assertions.assertEquals("rrleaesinuqt", model.value().get(0).properties().sharedUserList().get(0));
        Assertions.assertEquals("rseqwjksghudgz", model.value().get(0).properties().target());
        Assertions.assertTrue(model.value().get(0).properties().useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
