// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.Identity;
import com.azure.resourcemanager.cognitiveservices.models.Project;
import com.azure.resourcemanager.cognitiveservices.models.ProjectProperties;
import com.azure.resourcemanager.cognitiveservices.models.ResourceIdentityType;
import com.azure.resourcemanager.cognitiveservices.models.UserAssignedIdentity;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"identity\":{\"type\":\"SystemAssigned\",\"tenantId\":\"deykvskiczdfrje\",\"principalId\":\"ikgqaboohxbms\",\"userAssignedIdentities\":{\"ewuyqa\":{\"principalId\":\"sx\",\"clientId\":\"d\"},\"oxae\":{\"principalId\":\"hpjhge\",\"clientId\":\"bvhhdaurgh\"},\"rkdknko\":{\"principalId\":\"k\",\"clientId\":\"jxjoezlq\"}}},\"tags\":{\"zamicb\":\"mbozom\",\"zseznuxkeuairaa\":\"gwcd\",\"lqjbedpfixlhupmo\":\"m\",\"dpr\":\"ihzbdnpxpk\"},\"location\":\"xelyicghflr\",\"properties\":{\"provisioningState\":\"Succeeded\",\"displayName\":\"yghsf\",\"description\":\"kb\",\"endpoints\":{\"vqcpdwjgquxw\":\"mgmqfmef\",\"dkdcdjhunhg\":\"ysla\"},\"isDefault\":true},\"etag\":\"wnrrnquoxso\",\"id\":\"ireimseobf\",\"name\":\"xstcyilbvzm\",\"type\":\"xcjzlquze\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Project response = manager.projects()
            .define("c")
            .withExistingAccount("htdm", "wjekptycaydbj")
            .withRegion("fcemftzgyyky")
            .withTags(mapOf("xjoshohtotryegpk", "zfz", "bfokxkhu", "xrmexznlw", "ufgjblcdr", "ze"))
            .withIdentity(new Identity().withType(ResourceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("jjmajnkdflqionsw", new UserAssignedIdentity())))
            .withProperties(new ProjectProperties().withDisplayName("kd").withDescription("nht"))
            .create();

        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("mbozom", response.tags().get("zamicb"));
        Assertions.assertEquals("xelyicghflr", response.location());
        Assertions.assertEquals("yghsf", response.properties().displayName());
        Assertions.assertEquals("kb", response.properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
