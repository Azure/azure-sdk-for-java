// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRule;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRuleProperties;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterConfigurationAssociationInfo;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterConfigurationProperties;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterProfileInfo;
import com.azure.resourcemanager.cognitiveservices.models.NspAccessRuleDirection;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssue;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssueProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterConfigurationProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"aimlnwiaaom\",\"provisioningIssues\":[{\"name\":\"azul\",\"properties\":{\"issueType\":\"thwwn\",\"severity\":\"hlf\",\"description\":\"wpchwahf\",\"suggestedResourceIds\":[\"snfepgfewetwlyx\",\"ncxykxhdjhlimm\",\"cxfhbcporxv\"],\"suggestedAccessRules\":[{\"name\":\"hqizxfpxtgqscj\",\"properties\":{}}]}},{\"name\":\"t\",\"properties\":{\"issueType\":\"dqazkmtgguwpijra\",\"severity\":\"ivmmghfcfiwrxgk\",\"description\":\"uvyinzqodfvpgs\",\"suggestedResourceIds\":[\"gsgbpfgzdjt\"],\"suggestedAccessRules\":[{\"name\":\"lbqvgaqvlgafcqu\",\"properties\":{}},{\"name\":\"vetnwsdtutn\",\"properties\":{}}]}}],\"networkSecurityPerimeter\":{\"id\":\"ycvuzhyrmewipmv\",\"perimeterGuid\":\"dxukuqgsjjxundxg\",\"location\":\"twzhhzjhfjmhv\"},\"resourceAssociation\":{\"name\":\"vgpmun\",\"accessMode\":\"sx\"},\"profile\":{\"name\":\"fbuzjyihs\",\"accessRulesVersion\":2380463031327749802,\"accessRules\":[{\"name\":\"pohyuemslynsqyr\",\"properties\":{\"direction\":\"Inbound\",\"addressPrefixes\":[\"lttymsjn\",\"gqdnfwqzd\",\"gtilax\",\"nfhqlyvijouwivk\"],\"subscriptions\":[{},{},{},{}],\"networkSecurityPerimeters\":[{}],\"fullyQualifiedDomainNames\":[\"ixxrtikvcpw\",\"gclrci\"]}}],\"diagnosticSettingsVersion\":9129949467012960809,\"enabledLogCategories\":[\"rkenx\",\"m\",\"yefrpmpdnqqska\",\"ao\"]}}")
            .toObject(NetworkSecurityPerimeterConfigurationProperties.class);
        Assertions.assertEquals("azul", model.provisioningIssues().get(0).name());
        Assertions.assertEquals("thwwn", model.provisioningIssues().get(0).properties().issueType());
        Assertions.assertEquals("hlf", model.provisioningIssues().get(0).properties().severity());
        Assertions.assertEquals("wpchwahf", model.provisioningIssues().get(0).properties().description());
        Assertions.assertEquals("snfepgfewetwlyx",
            model.provisioningIssues().get(0).properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("hqizxfpxtgqscj",
            model.provisioningIssues().get(0).properties().suggestedAccessRules().get(0).name());
        Assertions.assertEquals("ycvuzhyrmewipmv", model.networkSecurityPerimeter().id());
        Assertions.assertEquals("dxukuqgsjjxundxg", model.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("twzhhzjhfjmhv", model.networkSecurityPerimeter().location());
        Assertions.assertEquals("vgpmun", model.resourceAssociation().name());
        Assertions.assertEquals("sx", model.resourceAssociation().accessMode());
        Assertions.assertEquals("fbuzjyihs", model.profile().name());
        Assertions.assertEquals(2380463031327749802L, model.profile().accessRulesVersion());
        Assertions.assertEquals("pohyuemslynsqyr", model.profile().accessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.INBOUND,
            model.profile().accessRules().get(0).properties().direction());
        Assertions.assertEquals("lttymsjn", model.profile().accessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("ixxrtikvcpw",
            model.profile().accessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
        Assertions.assertEquals(9129949467012960809L, model.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("rkenx", model.profile().enabledLogCategories().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterConfigurationProperties model = new NetworkSecurityPerimeterConfigurationProperties()
            .withProvisioningIssues(Arrays.asList(
                new ProvisioningIssue().withName("azul")
                    .withProperties(new ProvisioningIssueProperties().withIssueType("thwwn")
                        .withSeverity("hlf")
                        .withDescription("wpchwahf")
                        .withSuggestedResourceIds(Arrays.asList("snfepgfewetwlyx", "ncxykxhdjhlimm", "cxfhbcporxv"))
                        .withSuggestedAccessRules(
                            Arrays.asList(new NetworkSecurityPerimeterAccessRule().withName("hqizxfpxtgqscj")
                                .withProperties(new NetworkSecurityPerimeterAccessRuleProperties())))),
                new ProvisioningIssue().withName("t")
                    .withProperties(new ProvisioningIssueProperties().withIssueType("dqazkmtgguwpijra")
                        .withSeverity("ivmmghfcfiwrxgk")
                        .withDescription("uvyinzqodfvpgs")
                        .withSuggestedResourceIds(Arrays.asList("gsgbpfgzdjt"))
                        .withSuggestedAccessRules(Arrays.asList(
                            new NetworkSecurityPerimeterAccessRule().withName("lbqvgaqvlgafcqu")
                                .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()),
                            new NetworkSecurityPerimeterAccessRule().withName("vetnwsdtutn")
                                .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()))))))
            .withNetworkSecurityPerimeter(new NetworkSecurityPerimeter().withId("ycvuzhyrmewipmv")
                .withPerimeterGuid("dxukuqgsjjxundxg")
                .withLocation("twzhhzjhfjmhv"))
            .withResourceAssociation(
                new NetworkSecurityPerimeterConfigurationAssociationInfo().withName("vgpmun").withAccessMode("sx"))
            .withProfile(
                new NetworkSecurityPerimeterProfileInfo().withName("fbuzjyihs")
                    .withAccessRulesVersion(2380463031327749802L)
                    .withAccessRules(Arrays.asList(new NetworkSecurityPerimeterAccessRule().withName("pohyuemslynsqyr")
                        .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                            .withDirection(NspAccessRuleDirection.INBOUND)
                            .withAddressPrefixes(Arrays.asList("lttymsjn", "gqdnfwqzd", "gtilax", "nfhqlyvijouwivk"))
                            .withSubscriptions(
                                Arrays.asList(new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                    new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                    new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                    new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem()))
                            .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeter()))
                            .withFullyQualifiedDomainNames(Arrays.asList("ixxrtikvcpw", "gclrci")))))
                    .withDiagnosticSettingsVersion(9129949467012960809L)
                    .withEnabledLogCategories(Arrays.asList("rkenx", "m", "yefrpmpdnqqska", "ao")));
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterConfigurationProperties.class);
        Assertions.assertEquals("azul", model.provisioningIssues().get(0).name());
        Assertions.assertEquals("thwwn", model.provisioningIssues().get(0).properties().issueType());
        Assertions.assertEquals("hlf", model.provisioningIssues().get(0).properties().severity());
        Assertions.assertEquals("wpchwahf", model.provisioningIssues().get(0).properties().description());
        Assertions.assertEquals("snfepgfewetwlyx",
            model.provisioningIssues().get(0).properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("hqizxfpxtgqscj",
            model.provisioningIssues().get(0).properties().suggestedAccessRules().get(0).name());
        Assertions.assertEquals("ycvuzhyrmewipmv", model.networkSecurityPerimeter().id());
        Assertions.assertEquals("dxukuqgsjjxundxg", model.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("twzhhzjhfjmhv", model.networkSecurityPerimeter().location());
        Assertions.assertEquals("vgpmun", model.resourceAssociation().name());
        Assertions.assertEquals("sx", model.resourceAssociation().accessMode());
        Assertions.assertEquals("fbuzjyihs", model.profile().name());
        Assertions.assertEquals(2380463031327749802L, model.profile().accessRulesVersion());
        Assertions.assertEquals("pohyuemslynsqyr", model.profile().accessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.INBOUND,
            model.profile().accessRules().get(0).properties().direction());
        Assertions.assertEquals("lttymsjn", model.profile().accessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("ixxrtikvcpw",
            model.profile().accessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
        Assertions.assertEquals(9129949467012960809L, model.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("rkenx", model.profile().enabledLogCategories().get(0));
    }
}
