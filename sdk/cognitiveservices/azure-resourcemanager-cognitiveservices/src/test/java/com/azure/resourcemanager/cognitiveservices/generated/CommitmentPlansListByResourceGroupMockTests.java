// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"xnoqrxtdisn\",\"kind\":\"vhdl\",\"sku\":{\"name\":\"did\",\"tier\":\"Basic\",\"size\":\"fwwtjfdoes\",\"family\":\"hmwcdbck\",\"capacity\":174439516},\"tags\":{\"rbhtmeplvukaobr\":\"kxhnegknj\",\"jhgem\":\"bpgsnbagnc\",\"ywalhjymxcg\":\"owa\",\"ssoljom\":\"tagdrc\"},\"location\":\"tfy\",\"properties\":{\"provisioningState\":\"Canceled\",\"commitmentPlanGuid\":\"gjco\",\"hostingModel\":\"ProvisionedWeb\",\"planType\":\"ji\",\"current\":{\"tier\":\"s\",\"count\":200256125,\"quota\":{\"quantity\":1994220621348810975,\"unit\":\"fqb\"},\"startDate\":\"tnrgmqsorhce\",\"endDate\":\"gnlykm\"},\"autoRenew\":true,\"next\":{\"tier\":\"vm\",\"count\":1017540709,\"quota\":{\"quantity\":2156144259762836290,\"unit\":\"wlwxlboncqbazqic\"},\"startDate\":\"hygtv\",\"endDate\":\"yjanepubdp\"},\"last\":{\"tier\":\"qvgx\",\"count\":400759737,\"quota\":{\"quantity\":3384258911149618898,\"unit\":\"hkxdxuwsaifmc\"},\"startDate\":\"osbz\",\"endDate\":\"hg\"},\"provisioningIssues\":[\"bcknjolgj\"]},\"id\":\"yxpvelszerqze\",\"name\":\"xoqeintxwalj\",\"type\":\"lzoblqwaafr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommitmentPlan> response
            = manager.commitmentPlans().listByResourceGroup("vxhmtfhocnxzcmj", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("vhdl", response.iterator().next().kind());
        Assertions.assertEquals("did", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.iterator().next().sku().tier());
        Assertions.assertEquals("fwwtjfdoes", response.iterator().next().sku().size());
        Assertions.assertEquals("hmwcdbck", response.iterator().next().sku().family());
        Assertions.assertEquals(174439516, response.iterator().next().sku().capacity());
        Assertions.assertEquals("kxhnegknj", response.iterator().next().tags().get("rbhtmeplvukaobr"));
        Assertions.assertEquals("tfy", response.iterator().next().location());
        Assertions.assertEquals("gjco", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("ji", response.iterator().next().properties().planType());
        Assertions.assertEquals("s", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(200256125, response.iterator().next().properties().current().count());
        Assertions.assertTrue(response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("vm", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(1017540709, response.iterator().next().properties().next().count());
    }
}
