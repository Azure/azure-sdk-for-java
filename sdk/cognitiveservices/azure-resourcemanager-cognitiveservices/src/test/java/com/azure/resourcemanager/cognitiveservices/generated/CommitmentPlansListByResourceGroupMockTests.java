// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"ywbo\",\"kind\":\"c\",\"sku\":{\"name\":\"iciijqpkzfbojx\",\"tier\":\"Premium\",\"size\":\"myqwixvcpwnkwywz\",\"family\":\"falickduoiqtamty\",\"capacity\":468149432},\"tags\":{\"cfhzagxnvhycv\":\"rwzawnvs\",\"rw\":\"imwrzregzgyufu\",\"hmeott\":\"weryekzk\"},\"location\":\"jyosxwwh\",\"properties\":{\"provisioningState\":\"Succeeded\",\"commitmentPlanGuid\":\"vpndp\",\"hostingModel\":\"DisconnectedContainer\",\"planType\":\"pnwy\",\"current\":{\"tier\":\"qllzsauzpjlxeehu\",\"count\":1834453313,\"quota\":{\"quantity\":5516168452931555191,\"unit\":\"yme\"},\"startDate\":\"lskihmxrfdsajred\",\"endDate\":\"yyshtuwgmevua\"},\"autoRenew\":false,\"next\":{\"tier\":\"ifrkgwltxeqipx\",\"count\":1931684247,\"quota\":{\"quantity\":3749646104554834648,\"unit\":\"ayorprav\"},\"startDate\":\"oge\",\"endDate\":\"abnsmj\"},\"last\":{\"tier\":\"nqxaekqsyk\",\"count\":2046181872,\"quota\":{\"quantity\":9008251062718128315,\"unit\":\"vmyltjcrspx\"},\"startDate\":\"urcclfgxannn\",\"endDate\":\"t\"},\"provisioningIssues\":[\"sewxigpxvkqm\",\"upxvpifd\"]},\"id\":\"aifyzyzeyuubeids\",\"name\":\"l\",\"type\":\"ytoithgygvfl\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CommitmentPlan> response
            = manager.commitmentPlans().listByResourceGroup("uxx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("c", response.iterator().next().kind());
        Assertions.assertEquals("iciijqpkzfbojx", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals("myqwixvcpwnkwywz", response.iterator().next().sku().size());
        Assertions.assertEquals("falickduoiqtamty", response.iterator().next().sku().family());
        Assertions.assertEquals(468149432, response.iterator().next().sku().capacity());
        Assertions.assertEquals("rwzawnvs", response.iterator().next().tags().get("cfhzagxnvhycv"));
        Assertions.assertEquals("jyosxwwh", response.iterator().next().location());
        Assertions.assertEquals("vpndp", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER,
            response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("pnwy", response.iterator().next().properties().planType());
        Assertions.assertEquals("qllzsauzpjlxeehu", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(1834453313, response.iterator().next().properties().current().count());
        Assertions.assertEquals(false, response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("ifrkgwltxeqipx", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(1931684247, response.iterator().next().properties().next().count());
    }
}
