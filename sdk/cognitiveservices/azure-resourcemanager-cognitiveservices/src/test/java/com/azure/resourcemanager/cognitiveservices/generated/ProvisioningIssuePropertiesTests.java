// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRule;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRuleProperties;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem;
import com.azure.resourcemanager.cognitiveservices.models.NspAccessRuleDirection;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssueProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ProvisioningIssuePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProvisioningIssueProperties model = BinaryData.fromString(
            "{\"issueType\":\"tpiymerteea\",\"severity\":\"xqiekkkzddrtk\",\"description\":\"ojbmxv\",\"suggestedResourceIds\":[\"efdeesve\",\"uij\"],\"suggestedAccessRules\":[{\"name\":\"s\",\"properties\":{\"direction\":\"Outbound\",\"addressPrefixes\":[\"jwsawddjibab\",\"vit\",\"tvtzeexavoxtfg\",\"ecdmdqbwpy\"],\"subscriptions\":[{\"id\":\"sfj\"},{\"id\":\"b\"}],\"networkSecurityPerimeters\":[{\"id\":\"xudb\",\"perimeterGuid\":\"odhtnsirudhzm\",\"location\":\"sckdlp\"},{\"id\":\"zrcxfailcfxwmdbo\",\"perimeterGuid\":\"fgsftufqob\",\"location\":\"lnacgcc\"}],\"fullyQualifiedDomainNames\":[\"hxkizvytnrzv\"]}}]}")
            .toObject(ProvisioningIssueProperties.class);
        Assertions.assertEquals("tpiymerteea", model.issueType());
        Assertions.assertEquals("xqiekkkzddrtk", model.severity());
        Assertions.assertEquals("ojbmxv", model.description());
        Assertions.assertEquals("efdeesve", model.suggestedResourceIds().get(0));
        Assertions.assertEquals("s", model.suggestedAccessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.OUTBOUND,
            model.suggestedAccessRules().get(0).properties().direction());
        Assertions.assertEquals("jwsawddjibab",
            model.suggestedAccessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("sfj", model.suggestedAccessRules().get(0).properties().subscriptions().get(0).id());
        Assertions.assertEquals("xudb",
            model.suggestedAccessRules().get(0).properties().networkSecurityPerimeters().get(0).id());
        Assertions.assertEquals("odhtnsirudhzm",
            model.suggestedAccessRules().get(0).properties().networkSecurityPerimeters().get(0).perimeterGuid());
        Assertions.assertEquals("sckdlp",
            model.suggestedAccessRules().get(0).properties().networkSecurityPerimeters().get(0).location());
        Assertions.assertEquals("hxkizvytnrzv",
            model.suggestedAccessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProvisioningIssueProperties model
            = new ProvisioningIssueProperties().withIssueType("tpiymerteea")
                .withSeverity("xqiekkkzddrtk")
                .withDescription("ojbmxv")
                .withSuggestedResourceIds(Arrays.asList("efdeesve", "uij"))
                .withSuggestedAccessRules(Arrays.asList(new NetworkSecurityPerimeterAccessRule().withName("s")
                    .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                        .withDirection(NspAccessRuleDirection.OUTBOUND)
                        .withAddressPrefixes(Arrays.asList("jwsawddjibab", "vit", "tvtzeexavoxtfg", "ecdmdqbwpy"))
                        .withSubscriptions(Arrays.asList(
                            new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem().withId("sfj"),
                            new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem().withId("b")))
                        .withNetworkSecurityPerimeters(Arrays.asList(
                            new NetworkSecurityPerimeter().withId("xudb")
                                .withPerimeterGuid("odhtnsirudhzm")
                                .withLocation("sckdlp"),
                            new NetworkSecurityPerimeter().withId("zrcxfailcfxwmdbo")
                                .withPerimeterGuid("fgsftufqob")
                                .withLocation("lnacgcc")))
                        .withFullyQualifiedDomainNames(Arrays.asList("hxkizvytnrzv")))));
        model = BinaryData.fromObject(model).toObject(ProvisioningIssueProperties.class);
        Assertions.assertEquals("tpiymerteea", model.issueType());
        Assertions.assertEquals("xqiekkkzddrtk", model.severity());
        Assertions.assertEquals("ojbmxv", model.description());
        Assertions.assertEquals("efdeesve", model.suggestedResourceIds().get(0));
        Assertions.assertEquals("s", model.suggestedAccessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.OUTBOUND,
            model.suggestedAccessRules().get(0).properties().direction());
        Assertions.assertEquals("jwsawddjibab",
            model.suggestedAccessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("sfj", model.suggestedAccessRules().get(0).properties().subscriptions().get(0).id());
        Assertions.assertEquals("xudb",
            model.suggestedAccessRules().get(0).properties().networkSecurityPerimeters().get(0).id());
        Assertions.assertEquals("odhtnsirudhzm",
            model.suggestedAccessRules().get(0).properties().networkSecurityPerimeters().get(0).perimeterGuid());
        Assertions.assertEquals("sckdlp",
            model.suggestedAccessRules().get(0).properties().networkSecurityPerimeters().get(0).location());
        Assertions.assertEquals("hxkizvytnrzv",
            model.suggestedAccessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
    }
}
