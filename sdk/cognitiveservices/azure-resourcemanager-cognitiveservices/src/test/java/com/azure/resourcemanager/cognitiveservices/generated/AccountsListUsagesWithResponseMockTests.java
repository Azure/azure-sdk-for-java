// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.QuotaUsageStatus;
import com.azure.resourcemanager.cognitiveservices.models.UnitType;
import com.azure.resourcemanager.cognitiveservices.models.UsageListResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountsListUsagesWithResponseMockTests {
    @Test
    public void testListUsagesWithResponse() throws Exception {
        String responseStr
            = "{\"nextLink\":\"wvsgmwohqfzizvu\",\"value\":[{\"unit\":\"BytesPerSecond\",\"name\":{\"value\":\"thnwpzte\",\"localizedValue\":\"vmribiat\"},\"quotaPeriod\":\"plucfotangcfhnyk\",\"limit\":34.811432195394524,\"currentValue\":74.0119738169162,\"nextResetTime\":\"wlmzqwmvtxnjmxmc\",\"status\":\"Included\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        UsageListResult response = manager.accounts()
            .listUsagesWithResponse("bodthsqqgvri", "bakclacjfrnxous", "au", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wvsgmwohqfzizvu", response.nextLink());
        Assertions.assertEquals(UnitType.BYTES_PER_SECOND, response.value().get(0).unit());
        Assertions.assertEquals("thnwpzte", response.value().get(0).name().value());
        Assertions.assertEquals("vmribiat", response.value().get(0).name().localizedValue());
        Assertions.assertEquals("plucfotangcfhnyk", response.value().get(0).quotaPeriod());
        Assertions.assertEquals(34.811432195394524D, response.value().get(0).limit());
        Assertions.assertEquals(74.0119738169162D, response.value().get(0).currentValue());
        Assertions.assertEquals("wlmzqwmvtxnjmxmc", response.value().get(0).nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.INCLUDED, response.value().get(0).status());
    }
}
