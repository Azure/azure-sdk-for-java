// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansCreateOrUpdatePlanMockTests {
    @Test
    public void testCreateOrUpdatePlan() throws Exception {
        String responseStr
            = "{\"etag\":\"jixlqfhefkwabs\",\"kind\":\"ron\",\"sku\":{\"name\":\"lmgnlqxsjx\",\"tier\":\"Premium\",\"size\":\"xhvuqbozool\",\"family\":\"ocarkuzlbcnndt\",\"capacity\":1322478379},\"tags\":{\"hd\":\"qytl\"},\"location\":\"myck\",\"properties\":{\"provisioningState\":\"Succeeded\",\"commitmentPlanGuid\":\"akckywym\",\"hostingModel\":\"ProvisionedWeb\",\"planType\":\"bjkdtfohf\",\"current\":{\"tier\":\"zvkiwrsiwdy\",\"count\":1378278521,\"quota\":{\"quantity\":4211264721340056265,\"unit\":\"raueekcsueh\"},\"startDate\":\"ddacbcbgydlqidy\",\"endDate\":\"hmptyrilkfbn\"},\"autoRenew\":true,\"next\":{\"tier\":\"ztpb\",\"count\":1809997631,\"quota\":{\"quantity\":2586425523119052458,\"unit\":\"omals\"},\"startDate\":\"nfddepldwqjns\",\"endDate\":\"ygleexa\"},\"last\":{\"tier\":\"ywhsbrcarycs\",\"count\":1833029555,\"quota\":{\"quantity\":4142195769709540725,\"unit\":\"ajuveh\"},\"startDate\":\"tdmkrrbhmpful\",\"endDate\":\"efgybpmfbfununmp\"},\"provisioningIssues\":[\"vfy\",\"fkd\",\"chlzvfi\"]},\"id\":\"tnkjjwgcwnphb\",\"name\":\"gfyrtogmhmjpjsc\",\"type\":\"fp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommitmentPlan response = manager.commitmentPlans()
            .definePlan("njizb")
            .withExistingResourceGroup("kfkxbbcbrwjiut")
            .withRegion("ndhzx")
            .withTags(mapOf("qvldaswvppisqqzl", "tbjczjnciui"))
            .withKind("tixgbd")
            .withSku(new Sku().withName("ifrevk")
                .withTier(SkuTier.FREE)
                .withSize("zkiswqjmdghsy")
                .withFamily("ry")
                .withCapacity(1171351655))
            .withProperties(new CommitmentPlanProperties().withCommitmentPlanGuid("srhkhgsnxuwwkpph")
                .withHostingModel(HostingModel.CONNECTED_CONTAINER)
                .withPlanType("zxlb")
                .withCurrent(new CommitmentPeriod().withTier("meikj").withCount(1654661966))
                .withAutoRenew(true)
                .withNext(new CommitmentPeriod().withTier("a").withCount(893588353)))
            .create();

        Assertions.assertEquals("ron", response.kind());
        Assertions.assertEquals("lmgnlqxsjx", response.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.sku().tier());
        Assertions.assertEquals("xhvuqbozool", response.sku().size());
        Assertions.assertEquals("ocarkuzlbcnndt", response.sku().family());
        Assertions.assertEquals(1322478379, response.sku().capacity());
        Assertions.assertEquals("qytl", response.tags().get("hd"));
        Assertions.assertEquals("myck", response.location());
        Assertions.assertEquals("akckywym", response.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, response.properties().hostingModel());
        Assertions.assertEquals("bjkdtfohf", response.properties().planType());
        Assertions.assertEquals("zvkiwrsiwdy", response.properties().current().tier());
        Assertions.assertEquals(1378278521, response.properties().current().count());
        Assertions.assertTrue(response.properties().autoRenew());
        Assertions.assertEquals("ztpb", response.properties().next().tier());
        Assertions.assertEquals(1809997631, response.properties().next().count());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
