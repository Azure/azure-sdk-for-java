// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansCreateOrUpdatePlanMockTests {
    @Test
    public void testCreateOrUpdatePlan() throws Exception {
        String responseStr
            = "{\"etag\":\"hgjtnhtukfaci\",\"kind\":\"bfntumeezbxvq\",\"sku\":{\"name\":\"nuvwcgasgomtmjzw\",\"tier\":\"Enterprise\",\"size\":\"ovsxp\",\"family\":\"zt\",\"capacity\":933500866},\"tags\":{\"ls\":\"htgfred\",\"aovjow\":\"grllcc\",\"mlyotg\":\"zhpabac\",\"genmvceb\":\"wsxnsrqor\"},\"location\":\"etqujxcxxq\",\"properties\":{\"provisioningState\":\"Succeeded\",\"commitmentPlanGuid\":\"kedwqurcgojmrv\",\"hostingModel\":\"ConnectedContainer\",\"planType\":\"ongzsehqqrsil\",\"current\":{\"tier\":\"skx\",\"count\":470051968,\"quota\":{\"quantity\":9131082794009166335,\"unit\":\"ia\"},\"startDate\":\"vtojrulfuctejr\",\"endDate\":\"cfjzhxl\"},\"autoRenew\":false,\"next\":{\"tier\":\"rostvrjeqmtzz\",\"count\":2146803784,\"quota\":{\"quantity\":2994538891343392483,\"unit\":\"alx\"},\"startDate\":\"habsrwrsnrh\",\"endDate\":\"a\"},\"last\":{\"tier\":\"kkvyanxk\",\"count\":5095655,\"quota\":{\"quantity\":4624282179192376776,\"unit\":\"uvdjkqxetqm\"},\"startDate\":\"ivrjjxnwxdc\",\"endDate\":\"ojxl\"},\"provisioningIssues\":[\"lx\"]},\"id\":\"fquwzpwiibel\",\"name\":\"cerwkwbpjxljtxbu\",\"type\":\"qtbxxniuisdzh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommitmentPlan response = manager.commitmentPlans()
            .definePlan("ohaitranizerwgud")
            .withExistingResourceGroup("tneemmjauwcgxef")
            .withRegion("lzmijajwolxfsv")
            .withTags(
                mapOf("kcfazzw", "lp", "rransyb", "cayer", "nkfscjfn", "lpolwzrghsrle", "qwtltngvmreupt", "jwvuag"))
            .withKind("priylfmp")
            .withSku(new Sku().withName("raudsvhlcdcul")
                .withTier(SkuTier.PREMIUM)
                .withSize("qtmojhvrztnvgy")
                .withFamily("qrdgrtw")
                .withCapacity(906399424))
            .withProperties(new CommitmentPlanProperties().withCommitmentPlanGuid("ynwlslrcigtzjcv")
                .withHostingModel(HostingModel.DISCONNECTED_CONTAINER)
                .withPlanType("a")
                .withCurrent(new CommitmentPeriod().withTier("ssov").withCount(1215763715))
                .withAutoRenew(false)
                .withNext(new CommitmentPeriod().withTier("wtrkx").withCount(891433638)))
            .create();

        Assertions.assertEquals("bfntumeezbxvq", response.kind());
        Assertions.assertEquals("nuvwcgasgomtmjzw", response.sku().name());
        Assertions.assertEquals(SkuTier.ENTERPRISE, response.sku().tier());
        Assertions.assertEquals("ovsxp", response.sku().size());
        Assertions.assertEquals("zt", response.sku().family());
        Assertions.assertEquals(933500866, response.sku().capacity());
        Assertions.assertEquals("htgfred", response.tags().get("ls"));
        Assertions.assertEquals("etqujxcxxq", response.location());
        Assertions.assertEquals("kedwqurcgojmrv", response.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.CONNECTED_CONTAINER, response.properties().hostingModel());
        Assertions.assertEquals("ongzsehqqrsil", response.properties().planType());
        Assertions.assertEquals("skx", response.properties().current().tier());
        Assertions.assertEquals(470051968, response.properties().current().count());
        Assertions.assertFalse(response.properties().autoRenew());
        Assertions.assertEquals("rostvrjeqmtzz", response.properties().next().tier());
        Assertions.assertEquals(2146803784, response.properties().next().count());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
