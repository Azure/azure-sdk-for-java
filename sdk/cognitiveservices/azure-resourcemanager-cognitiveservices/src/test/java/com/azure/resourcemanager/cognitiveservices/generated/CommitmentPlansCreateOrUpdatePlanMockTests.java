// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CommitmentPlansCreateOrUpdatePlanMockTests {
    @Test
    public void testCreateOrUpdatePlan() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"vruzslzojhpctfnm\",\"kind\":\"otngfdgu\",\"sku\":{\"name\":\"yzihgrkyuizabsn\",\"tier\":\"Enterprise\",\"size\":\"hojeevy\",\"family\":\"hsgz\",\"capacity\":296401749},\"tags\":{\"tnluankrr\":\"omfgbeglqgleohib\",\"qqxlajr\":\"xeeebtijvacvbmqz\",\"uyxoaf\":\"wxacevehj\"},\"location\":\"oqltfae\",\"properties\":{\"provisioningState\":\"Succeeded\",\"commitmentPlanGuid\":\"fgvxirpghriypoqe\",\"hostingModel\":\"DisconnectedContainer\",\"planType\":\"h\",\"current\":{\"tier\":\"rlpyznuciqdsmexi\",\"count\":1841265855,\"startDate\":\"xtyasiibmiyb\",\"endDate\":\"ustgnljhnmgixhc\"},\"autoRenew\":false,\"next\":{\"tier\":\"foudor\",\"count\":199814192,\"startDate\":\"prot\",\"endDate\":\"pundmbxhug\"},\"last\":{\"tier\":\"k\",\"count\":1134791831,\"startDate\":\"rb\",\"endDate\":\"tp\"}},\"id\":\"dtzfjltfvnzcy\",\"name\":\"t\",\"type\":\"tpvopvpbdb\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CognitiveServicesManager manager =
            CognitiveServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CommitmentPlan response =
            manager
                .commitmentPlans()
                .definePlan("vacqpbtuodxesz")
                .withExistingResourceGroup("vizbfhfo")
                .withRegion("kcxk")
                .withTags(mapOf("q", "xzsrzpge", "wwpgdakchzyvlixq", "yb"))
                .withKind("lzkwrrwoy")
                .withSku(
                    new Sku()
                        .withName("ucwyhahno")
                        .withTier(SkuTier.STANDARD)
                        .withSize("ywuhpsvfuur")
                        .withFamily("lwexxwl")
                        .withCapacity(1269982634))
                .withProperties(
                    new CommitmentPlanProperties()
                        .withCommitmentPlanGuid("mysu")
                        .withHostingModel(HostingModel.CONNECTED_CONTAINER)
                        .withPlanType("rntvlwijp")
                        .withCurrent(new CommitmentPeriod().withTier("exoqqpwcyyufm").withCount(1093515731))
                        .withAutoRenew(true)
                        .withNext(new CommitmentPeriod().withTier("ndy").withCount(1212474723)))
                .create();

        Assertions.assertEquals("otngfdgu", response.kind());
        Assertions.assertEquals("yzihgrkyuizabsn", response.sku().name());
        Assertions.assertEquals(SkuTier.ENTERPRISE, response.sku().tier());
        Assertions.assertEquals("hojeevy", response.sku().size());
        Assertions.assertEquals("hsgz", response.sku().family());
        Assertions.assertEquals(296401749, response.sku().capacity());
        Assertions.assertEquals("omfgbeglqgleohib", response.tags().get("tnluankrr"));
        Assertions.assertEquals("oqltfae", response.location());
        Assertions.assertEquals("fgvxirpghriypoqe", response.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER, response.properties().hostingModel());
        Assertions.assertEquals("h", response.properties().planType());
        Assertions.assertEquals("rlpyznuciqdsmexi", response.properties().current().tier());
        Assertions.assertEquals(1841265855, response.properties().current().count());
        Assertions.assertEquals(false, response.properties().autoRenew());
        Assertions.assertEquals("foudor", response.properties().next().tier());
        Assertions.assertEquals(199814192, response.properties().next().count());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
