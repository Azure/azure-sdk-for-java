// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.AccountModelInner;
import com.azure.resourcemanager.cognitiveservices.fluent.models.ModelInner;
import com.azure.resourcemanager.cognitiveservices.models.BillingMeterInfo;
import com.azure.resourcemanager.cognitiveservices.models.CallRateLimit;
import com.azure.resourcemanager.cognitiveservices.models.CapacityConfig;
import com.azure.resourcemanager.cognitiveservices.models.DeploymentModel;
import com.azure.resourcemanager.cognitiveservices.models.ModelDeprecationInfo;
import com.azure.resourcemanager.cognitiveservices.models.ModelLifecycleStatus;
import com.azure.resourcemanager.cognitiveservices.models.ModelListResult;
import com.azure.resourcemanager.cognitiveservices.models.ModelSku;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ModelListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ModelListResult model = BinaryData.fromString(
            "{\"nextLink\":\"wozuhkf\",\"value\":[{\"model\":{\"baseModel\":{\"publisher\":\"f\",\"format\":\"luu\",\"name\":\"ttouwaboekqvkel\",\"version\":\"mvb\",\"source\":\"yjsflhhcaalnji\",\"sourceAccount\":\"sxyawjoyaqcs\",\"callRateLimit\":{\"count\":24.450993,\"renewalPeriod\":58.93525,\"rules\":[{},{},{}]}},\"isDefaultVersion\":false,\"skus\":[{\"name\":\"nelixhnrztfo\",\"usageName\":\"bnxknalaulppg\",\"deprecationDate\":\"2021-03-08T22:58:09Z\",\"capacity\":{},\"rateLimits\":[{},{},{},{}],\"cost\":[{},{},{}]},{\"name\":\"iropuhpigvpgylg\",\"usageName\":\"itxmedjvcslynqww\",\"deprecationDate\":\"2021-09-17T17:00:46Z\",\"capacity\":{},\"rateLimits\":[{}],\"cost\":[{},{},{},{}]},{\"name\":\"trmgucnapkte\",\"usageName\":\"llwptfdy\",\"deprecationDate\":\"2020-12-31T02:22:45Z\",\"capacity\":{},\"rateLimits\":[{},{},{},{}],\"cost\":[{},{},{},{}]},{\"name\":\"op\",\"usageName\":\"qrhhu\",\"deprecationDate\":\"2021-05-07T00:48:34Z\",\"capacity\":{},\"rateLimits\":[{}],\"cost\":[{}]}],\"maxCapacity\":108593741,\"capabilities\":{\"ahzxctobgbk\":\"z\",\"mgrcfbu\":\"moizpos\",\"mjh\":\"rmfqjhhkxbpvj\",\"tswb\":\"xjyngudivk\"},\"finetuneCapabilities\":{\"e\":\"vszjfauvjfdxxi\",\"mcbxvwvxysl\":\"vtcqaqtdo\"},\"deprecation\":{\"fineTune\":\"sfxobl\",\"inference\":\"k\"},\"lifecycleStatus\":\"GenerallyAvailable\",\"publisher\":\"wwwfbkr\",\"format\":\"nsvs\",\"name\":\"johxcrsb\",\"version\":\"vasrruvwb\",\"source\":\"qfsubcgjbirx\",\"sourceAccount\":\"ybsrfbjfdtwss\",\"callRateLimit\":{\"count\":98.93621,\"renewalPeriod\":17.965126,\"rules\":[{},{},{},{}]}},\"kind\":\"exilzznfqqnvwpmq\",\"skuName\":\"ruoujmk\",\"description\":\"hwqytj\"},{\"model\":{\"baseModel\":{\"publisher\":\"wj\",\"format\":\"gdrjervnaenqpe\",\"name\":\"ndoygmifthnzdnd\",\"version\":\"gnayqigynduh\",\"source\":\"hqlkthumaqo\",\"sourceAccount\":\"gycdu\",\"callRateLimit\":{\"count\":75.81883,\"renewalPeriod\":82.43766,\"rules\":[{}]}},\"isDefaultVersion\":true,\"skus\":[{\"name\":\"psslqlfmm\",\"usageName\":\"bbglzpswiydmc\",\"deprecationDate\":\"2021-03-06T05:36:52Z\",\"capacity\":{},\"rateLimits\":[{},{},{}],\"cost\":[{},{}]},{\"name\":\"dbzm\",\"usageName\":\"dfznudaodv\",\"deprecationDate\":\"2021-05-29T13:49:41Z\",\"capacity\":{},\"rateLimits\":[{},{},{}],\"cost\":[{},{},{},{}]},{\"name\":\"pstdbhhxsrzd\",\"usageName\":\"cers\",\"deprecationDate\":\"2021-04-29T11:57:05Z\",\"capacity\":{},\"rateLimits\":[{},{},{}],\"cost\":[{},{},{},{}]}],\"maxCapacity\":931979220,\"capabilities\":{\"weriofzpyqsem\":\"ygtdsslswt\",\"zhedplvwiw\":\"abnetshh\",\"tppjflcx\":\"bmwmbesldnkw\"},\"finetuneCapabilities\":{\"qqkdltfzxmhhvhgu\":\"okonzmnsikvmkqz\",\"xtibqdxbxwakbog\":\"eodkwobda\",\"iplbpodxunkbebxm\":\"xndlkzgxhu\"},\"deprecation\":{\"fineTune\":\"yntwlrbq\",\"inference\":\"oievseotgqrlltm\"},\"lifecycleStatus\":\"Deprecated\",\"publisher\":\"wzizxbmpgcjefuzm\",\"format\":\"pbttdum\",\"name\":\"p\",\"version\":\"ebmnzbtbhjpglk\",\"source\":\"ohdneuel\",\"sourceAccount\":\"hsd\",\"callRateLimit\":{\"count\":59.737354,\"renewalPeriod\":55.207397,\"rules\":[{}]}},\"kind\":\"owwquuvxz\",\"skuName\":\"lvithhqzonosgg\",\"description\":\"c\"}]}")
            .toObject(ModelListResult.class);
        Assertions.assertEquals("wozuhkf", model.nextLink());
        Assertions.assertEquals("wwwfbkr", model.value().get(0).model().publisher());
        Assertions.assertEquals("nsvs", model.value().get(0).model().format());
        Assertions.assertEquals("johxcrsb", model.value().get(0).model().name());
        Assertions.assertEquals("vasrruvwb", model.value().get(0).model().version());
        Assertions.assertEquals("qfsubcgjbirx", model.value().get(0).model().source());
        Assertions.assertEquals("ybsrfbjfdtwss", model.value().get(0).model().sourceAccount());
        Assertions.assertEquals("f", model.value().get(0).model().baseModel().publisher());
        Assertions.assertEquals("luu", model.value().get(0).model().baseModel().format());
        Assertions.assertEquals("ttouwaboekqvkel", model.value().get(0).model().baseModel().name());
        Assertions.assertEquals("mvb", model.value().get(0).model().baseModel().version());
        Assertions.assertEquals("yjsflhhcaalnji", model.value().get(0).model().baseModel().source());
        Assertions.assertEquals("sxyawjoyaqcs", model.value().get(0).model().baseModel().sourceAccount());
        Assertions.assertEquals(false, model.value().get(0).model().isDefaultVersion());
        Assertions.assertEquals("nelixhnrztfo", model.value().get(0).model().skus().get(0).name());
        Assertions.assertEquals("bnxknalaulppg", model.value().get(0).model().skus().get(0).usageName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T22:58:09Z"),
            model.value().get(0).model().skus().get(0).deprecationDate());
        Assertions.assertEquals(108593741, model.value().get(0).model().maxCapacity());
        Assertions.assertEquals("z", model.value().get(0).model().capabilities().get("ahzxctobgbk"));
        Assertions.assertEquals("vszjfauvjfdxxi", model.value().get(0).model().finetuneCapabilities().get("e"));
        Assertions.assertEquals("sfxobl", model.value().get(0).model().deprecation().fineTune());
        Assertions.assertEquals("k", model.value().get(0).model().deprecation().inference());
        Assertions.assertEquals(ModelLifecycleStatus.GENERALLY_AVAILABLE,
            model.value().get(0).model().lifecycleStatus());
        Assertions.assertEquals("exilzznfqqnvwpmq", model.value().get(0).kind());
        Assertions.assertEquals("ruoujmk", model.value().get(0).skuName());
        Assertions.assertEquals("hwqytj", model.value().get(0).description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ModelListResult model
            = new ModelListResult().withNextLink("wozuhkf")
                .withValue(
                    Arrays
                        .asList(
                            new ModelInner()
                                .withModel(
                                    new AccountModelInner().withPublisher("wwwfbkr")
                                        .withFormat("nsvs")
                                        .withName("johxcrsb")
                                        .withVersion("vasrruvwb")
                                        .withSource("qfsubcgjbirx")
                                        .withSourceAccount("ybsrfbjfdtwss")
                                        .withBaseModel(new DeploymentModel().withPublisher("f")
                                            .withFormat("luu")
                                            .withName("ttouwaboekqvkel")
                                            .withVersion("mvb")
                                            .withSource("yjsflhhcaalnji")
                                            .withSourceAccount("sxyawjoyaqcs"))
                                        .withIsDefaultVersion(false)
                                        .withSkus(Arrays.asList(
                                            new ModelSku().withName("nelixhnrztfo")
                                                .withUsageName("bnxknalaulppg")
                                                .withDeprecationDate(OffsetDateTime.parse("2021-03-08T22:58:09Z"))
                                                .withCapacity(new CapacityConfig())
                                                .withRateLimits(Arrays.asList(new CallRateLimit(), new CallRateLimit(),
                                                    new CallRateLimit(), new CallRateLimit()))
                                                .withCost(Arrays.asList(new BillingMeterInfo(), new BillingMeterInfo(),
                                                    new BillingMeterInfo())),
                                            new ModelSku().withName("iropuhpigvpgylg")
                                                .withUsageName("itxmedjvcslynqww")
                                                .withDeprecationDate(OffsetDateTime.parse("2021-09-17T17:00:46Z"))
                                                .withCapacity(new CapacityConfig())
                                                .withRateLimits(Arrays.asList(new CallRateLimit()))
                                                .withCost(Arrays.asList(new BillingMeterInfo(), new BillingMeterInfo(),
                                                    new BillingMeterInfo(), new BillingMeterInfo())),
                                            new ModelSku().withName("trmgucnapkte")
                                                .withUsageName("llwptfdy")
                                                .withDeprecationDate(OffsetDateTime.parse("2020-12-31T02:22:45Z"))
                                                .withCapacity(new CapacityConfig())
                                                .withRateLimits(Arrays.asList(new CallRateLimit(), new CallRateLimit(),
                                                    new CallRateLimit(), new CallRateLimit()))
                                                .withCost(Arrays.asList(new BillingMeterInfo(), new BillingMeterInfo(),
                                                    new BillingMeterInfo(), new BillingMeterInfo())),
                                            new ModelSku().withName("op")
                                                .withUsageName("qrhhu")
                                                .withDeprecationDate(OffsetDateTime.parse("2021-05-07T00:48:34Z"))
                                                .withCapacity(new CapacityConfig())
                                                .withRateLimits(Arrays.asList(new CallRateLimit()))
                                                .withCost(Arrays.asList(new BillingMeterInfo()))))
                                        .withMaxCapacity(108593741)
                                        .withCapabilities(mapOf("ahzxctobgbk", "z", "mgrcfbu", "moizpos", "mjh",
                                            "rmfqjhhkxbpvj", "tswb", "xjyngudivk"))
                                        .withFinetuneCapabilities(
                                            mapOf("e", "vszjfauvjfdxxi", "mcbxvwvxysl", "vtcqaqtdo"))
                                        .withDeprecation(
                                            new ModelDeprecationInfo().withFineTune("sfxobl").withInference("k"))
                                        .withLifecycleStatus(ModelLifecycleStatus.GENERALLY_AVAILABLE))
                                .withKind("exilzznfqqnvwpmq")
                                .withSkuName("ruoujmk")
                                .withDescription("hwqytj"),
                            new ModelInner()
                                .withModel(
                                    new AccountModelInner().withPublisher("wzizxbmpgcjefuzm")
                                        .withFormat("pbttdum")
                                        .withName("p")
                                        .withVersion("ebmnzbtbhjpglk")
                                        .withSource("ohdneuel")
                                        .withSourceAccount("hsd")
                                        .withBaseModel(new DeploymentModel().withPublisher("wj")
                                            .withFormat("gdrjervnaenqpe")
                                            .withName("ndoygmifthnzdnd")
                                            .withVersion("gnayqigynduh")
                                            .withSource("hqlkthumaqo")
                                            .withSourceAccount("gycdu"))
                                        .withIsDefaultVersion(true)
                                        .withSkus(
                                            Arrays
                                                .asList(
                                                    new ModelSku().withName("psslqlfmm")
                                                        .withUsageName("bbglzpswiydmc")
                                                        .withDeprecationDate(
                                                            OffsetDateTime.parse("2021-03-06T05:36:52Z"))
                                                        .withCapacity(new CapacityConfig())
                                                        .withRateLimits(Arrays.asList(new CallRateLimit(),
                                                            new CallRateLimit(), new CallRateLimit()))
                                                        .withCost(Arrays.asList(new BillingMeterInfo(),
                                                            new BillingMeterInfo())),
                                                    new ModelSku().withName("dbzm")
                                                        .withUsageName("dfznudaodv")
                                                        .withDeprecationDate(
                                                            OffsetDateTime.parse("2021-05-29T13:49:41Z"))
                                                        .withCapacity(new CapacityConfig())
                                                        .withRateLimits(Arrays.asList(new CallRateLimit(),
                                                            new CallRateLimit(), new CallRateLimit()))
                                                        .withCost(
                                                            Arrays.asList(
                                                                new BillingMeterInfo(), new BillingMeterInfo(),
                                                                new BillingMeterInfo(), new BillingMeterInfo())),
                                                    new ModelSku().withName("pstdbhhxsrzd")
                                                        .withUsageName("cers")
                                                        .withDeprecationDate(
                                                            OffsetDateTime.parse("2021-04-29T11:57:05Z"))
                                                        .withCapacity(new CapacityConfig())
                                                        .withRateLimits(Arrays.asList(new CallRateLimit(),
                                                            new CallRateLimit(), new CallRateLimit()))
                                                        .withCost(Arrays.asList(new BillingMeterInfo(),
                                                            new BillingMeterInfo(), new BillingMeterInfo(),
                                                            new BillingMeterInfo()))))
                                        .withMaxCapacity(931979220)
                                        .withCapabilities(mapOf("weriofzpyqsem", "ygtdsslswt", "zhedplvwiw", "abnetshh",
                                            "tppjflcx", "bmwmbesldnkw"))
                                        .withFinetuneCapabilities(mapOf("qqkdltfzxmhhvhgu", "okonzmnsikvmkqz",
                                            "xtibqdxbxwakbog", "eodkwobda", "iplbpodxunkbebxm", "xndlkzgxhu"))
                                        .withDeprecation(new ModelDeprecationInfo().withFineTune("yntwlrbq")
                                            .withInference("oievseotgqrlltm"))
                                        .withLifecycleStatus(ModelLifecycleStatus.DEPRECATED))
                                .withKind("owwquuvxz")
                                .withSkuName("lvithhqzonosgg")
                                .withDescription("c")));
        model = BinaryData.fromObject(model).toObject(ModelListResult.class);
        Assertions.assertEquals("wozuhkf", model.nextLink());
        Assertions.assertEquals("wwwfbkr", model.value().get(0).model().publisher());
        Assertions.assertEquals("nsvs", model.value().get(0).model().format());
        Assertions.assertEquals("johxcrsb", model.value().get(0).model().name());
        Assertions.assertEquals("vasrruvwb", model.value().get(0).model().version());
        Assertions.assertEquals("qfsubcgjbirx", model.value().get(0).model().source());
        Assertions.assertEquals("ybsrfbjfdtwss", model.value().get(0).model().sourceAccount());
        Assertions.assertEquals("f", model.value().get(0).model().baseModel().publisher());
        Assertions.assertEquals("luu", model.value().get(0).model().baseModel().format());
        Assertions.assertEquals("ttouwaboekqvkel", model.value().get(0).model().baseModel().name());
        Assertions.assertEquals("mvb", model.value().get(0).model().baseModel().version());
        Assertions.assertEquals("yjsflhhcaalnji", model.value().get(0).model().baseModel().source());
        Assertions.assertEquals("sxyawjoyaqcs", model.value().get(0).model().baseModel().sourceAccount());
        Assertions.assertEquals(false, model.value().get(0).model().isDefaultVersion());
        Assertions.assertEquals("nelixhnrztfo", model.value().get(0).model().skus().get(0).name());
        Assertions.assertEquals("bnxknalaulppg", model.value().get(0).model().skus().get(0).usageName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-08T22:58:09Z"),
            model.value().get(0).model().skus().get(0).deprecationDate());
        Assertions.assertEquals(108593741, model.value().get(0).model().maxCapacity());
        Assertions.assertEquals("z", model.value().get(0).model().capabilities().get("ahzxctobgbk"));
        Assertions.assertEquals("vszjfauvjfdxxi", model.value().get(0).model().finetuneCapabilities().get("e"));
        Assertions.assertEquals("sfxobl", model.value().get(0).model().deprecation().fineTune());
        Assertions.assertEquals("k", model.value().get(0).model().deprecation().inference());
        Assertions.assertEquals(ModelLifecycleStatus.GENERALLY_AVAILABLE,
            model.value().get(0).model().lifecycleStatus());
        Assertions.assertEquals("exilzznfqqnvwpmq", model.value().get(0).kind());
        Assertions.assertEquals("ruoujmk", model.value().get(0).skuName());
        Assertions.assertEquals("hwqytj", model.value().get(0).description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
