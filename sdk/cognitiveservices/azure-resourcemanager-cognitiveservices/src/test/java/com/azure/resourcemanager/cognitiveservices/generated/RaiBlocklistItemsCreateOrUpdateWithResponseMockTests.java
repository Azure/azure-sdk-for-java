// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItem;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiBlocklistItemsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"o\",\"tags\":{\"zbuiadhbatecaa\":\"zmicuydoccnxsha\",\"iucbda\":\"sdohz\",\"pow\":\"mbwiinjdllwktl\"},\"properties\":{\"pattern\":\"qxua\",\"isRegex\":true},\"id\":\"wulynkgfcf\",\"name\":\"ruwsikxxtclh\",\"type\":\"ulriqb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        RaiBlocklistItem response = manager.raiBlocklistItems()
            .define("bwwzvdajf")
            .withExistingRaiBlocklist("iqbuou", "mpyzgleo", "jsb")
            .withTags(mapOf("jjrlhiqlwix", "aciq", "pg", "tbouguxtnd", "alapdlndbe", "ttbas"))
            .withProperties(new RaiBlocklistItemProperties().withPattern("kixvvlwy").withIsRegex(false))
            .create();

        Assertions.assertEquals("zmicuydoccnxsha", response.tags().get("zbuiadhbatecaa"));
        Assertions.assertEquals("qxua", response.properties().pattern());
        Assertions.assertTrue(response.properties().isRegex());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
