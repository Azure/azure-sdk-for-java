// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.RaiTopic;
import com.azure.resourcemanager.cognitiveservices.models.RaiTopicProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiTopicsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"wtiw\",\"tags\":{\"nhqnampp\":\"sa\",\"eajbkajlcyizyddc\":\"ltassaekewna\",\"krvfsxxbydes\":\"xo\",\"nm\":\"lvgecpwgoljtz\"},\"properties\":{\"topicId\":\"obygoo\",\"topicName\":\"qa\",\"description\":\"xv\",\"sampleBlobUrl\":\"yjfucsaod\",\"status\":\"os\",\"failedReason\":\"vibfasgmatrnzpd\",\"createdAt\":\"2021-10-25T15:01:08Z\",\"lastModifiedAt\":\"2021-11-10T08:16:24Z\"},\"id\":\"tu\",\"name\":\"ktz\",\"type\":\"oimyfpqd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        RaiTopic response = manager.raiTopics()
            .define("cljkxpyl")
            .withExistingAccount("mywj", "ebecuvlbefv")
            .withTags(mapOf("vrbkerdkdkgaw", "syxjijeyp", "q", "wjxildfkcefeyg"))
            .withProperties(new RaiTopicProperties().withTopicId("isf")
                .withTopicName("aybdjnxumentqon")
                .withDescription("hymxymulwivqtow")
                .withSampleBlobUrl("lsycoyb")
                .withStatus("a")
                .withFailedReason("ubfajc")
                .withCreatedAt(OffsetDateTime.parse("2021-03-01T09:50:38Z"))
                .withLastModifiedAt(OffsetDateTime.parse("2021-06-24T09:10:25Z")))
            .create();

        Assertions.assertEquals("sa", response.tags().get("nhqnampp"));
        Assertions.assertEquals("obygoo", response.properties().topicId());
        Assertions.assertEquals("qa", response.properties().topicName());
        Assertions.assertEquals("xv", response.properties().description());
        Assertions.assertEquals("yjfucsaod", response.properties().sampleBlobUrl());
        Assertions.assertEquals("os", response.properties().status());
        Assertions.assertEquals("vibfasgmatrnzpd", response.properties().failedReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-25T15:01:08Z"), response.properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-10T08:16:24Z"), response.properties().lastModifiedAt());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
