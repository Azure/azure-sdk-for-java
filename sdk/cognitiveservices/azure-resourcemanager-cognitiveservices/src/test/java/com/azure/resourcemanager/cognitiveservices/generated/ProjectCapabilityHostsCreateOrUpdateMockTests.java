// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CapabilityHostInner;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHost;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostKind;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ProjectCapabilityHostsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"aiServicesConnections\":[\"lilw\"],\"capabilityHostKind\":\"Agents\",\"customerSubnet\":\"hjvmabzzbwaybfm\",\"provisioningState\":\"Succeeded\",\"storageConnections\":[\"ymqtnapreojx\",\"jnbscon\",\"avip\"],\"threadStorageConnections\":[\"chbj\"],\"vectorStoreConnections\":[\"fsgnw\"],\"description\":\"zed\",\"tags\":{\"xi\":\"rfbo\"}},\"id\":\"mlnfyz\",\"name\":\"vfrbypic\",\"type\":\"bkpdjtaqhsmq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CapabilityHost response = manager.projectCapabilityHosts()
            .createOrUpdate("wh", "d", "kp", "qwuntob",
                new CapabilityHostInner().withProperties(new CapabilityHostProperties().withDescription("pter")
                    .withTags(mapOf("kskw", "wki", "olzkgys", "tsdetjygowifcq"))
                    .withAiServicesConnections(Arrays.asList("azz"))
                    .withCapabilityHostKind(CapabilityHostKind.AGENTS)
                    .withCustomerSubnet("vydjufbnk")
                    .withStorageConnections(Arrays.asList("peg", "wdabalfdxaglzfyt"))
                    .withThreadStorageConnections(Arrays.asList("lqhopxouvmrs"))
                    .withVectorStoreConnections(Arrays.asList("ikyypz", "gxfx", "myrqsdbpokszan", "h"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zed", response.properties().description());
        Assertions.assertEquals("rfbo", response.properties().tags().get("xi"));
        Assertions.assertEquals("lilw", response.properties().aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, response.properties().capabilityHostKind());
        Assertions.assertEquals("hjvmabzzbwaybfm", response.properties().customerSubnet());
        Assertions.assertEquals("ymqtnapreojx", response.properties().storageConnections().get(0));
        Assertions.assertEquals("chbj", response.properties().threadStorageConnections().get(0));
        Assertions.assertEquals("fsgnw", response.properties().vectorStoreConnections().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
