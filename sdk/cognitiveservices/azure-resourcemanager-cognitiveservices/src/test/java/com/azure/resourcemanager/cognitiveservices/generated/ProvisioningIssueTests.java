// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRule;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRuleProperties;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem;
import com.azure.resourcemanager.cognitiveservices.models.NspAccessRuleDirection;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssue;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssueProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ProvisioningIssueTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProvisioningIssue model = BinaryData.fromString(
            "{\"name\":\"mmbnpqfrtql\",\"properties\":{\"issueType\":\"egnitg\",\"severity\":\"xlzyqd\",\"description\":\"eg\",\"suggestedResourceIds\":[\"lzxwhcansy\",\"oyqhlwig\",\"ivbkbxgomfaj\"],\"suggestedAccessRules\":[{\"name\":\"qvdaeyyguxakjsq\",\"properties\":{\"direction\":\"Outbound\",\"addressPrefixes\":[\"kgimsidxasic\",\"dyvvjskgfmocwahp\"],\"subscriptions\":[{},{}],\"networkSecurityPerimeters\":[{},{},{}],\"fullyQualifiedDomainNames\":[\"ahhvjhhna\"]}},{\"name\":\"ybbjjidjksyx\",\"properties\":{\"direction\":\"Inbound\",\"addressPrefixes\":[\"vblbjednljlageua\",\"lxunsmjbnkppxy\"],\"subscriptions\":[{},{}],\"networkSecurityPerimeters\":[{},{},{},{}],\"fullyQualifiedDomainNames\":[\"eizzgwk\",\"nsrmffeycx\"]}}]}}")
            .toObject(ProvisioningIssue.class);
        Assertions.assertEquals("mmbnpqfrtql", model.name());
        Assertions.assertEquals("egnitg", model.properties().issueType());
        Assertions.assertEquals("xlzyqd", model.properties().severity());
        Assertions.assertEquals("eg", model.properties().description());
        Assertions.assertEquals("lzxwhcansy", model.properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("qvdaeyyguxakjsq", model.properties().suggestedAccessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.OUTBOUND,
            model.properties().suggestedAccessRules().get(0).properties().direction());
        Assertions.assertEquals("kgimsidxasic",
            model.properties().suggestedAccessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("ahhvjhhna",
            model.properties().suggestedAccessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProvisioningIssue model
            = new ProvisioningIssue().withName("mmbnpqfrtql")
                .withProperties(
                    new ProvisioningIssueProperties().withIssueType("egnitg")
                        .withSeverity("xlzyqd")
                        .withDescription("eg")
                        .withSuggestedResourceIds(Arrays.asList("lzxwhcansy", "oyqhlwig", "ivbkbxgomfaj"))
                        .withSuggestedAccessRules(
                            Arrays.asList(
                                new NetworkSecurityPerimeterAccessRule().withName("qvdaeyyguxakjsq")
                                    .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                                        .withDirection(NspAccessRuleDirection.OUTBOUND)
                                        .withAddressPrefixes(Arrays.asList("kgimsidxasic", "dyvvjskgfmocwahp"))
                                        .withSubscriptions(Arrays.asList(
                                            new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                            new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem()))
                                        .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeter(),
                                            new NetworkSecurityPerimeter(), new NetworkSecurityPerimeter()))
                                        .withFullyQualifiedDomainNames(Arrays.asList("ahhvjhhna"))),
                                new NetworkSecurityPerimeterAccessRule().withName("ybbjjidjksyx")
                                    .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                                        .withDirection(NspAccessRuleDirection.INBOUND)
                                        .withAddressPrefixes(Arrays.asList("vblbjednljlageua", "lxunsmjbnkppxy"))
                                        .withSubscriptions(Arrays.asList(
                                            new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                            new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem()))
                                        .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeter(),
                                            new NetworkSecurityPerimeter(), new NetworkSecurityPerimeter(),
                                            new NetworkSecurityPerimeter()))
                                        .withFullyQualifiedDomainNames(Arrays.asList("eizzgwk", "nsrmffeycx"))))));
        model = BinaryData.fromObject(model).toObject(ProvisioningIssue.class);
        Assertions.assertEquals("mmbnpqfrtql", model.name());
        Assertions.assertEquals("egnitg", model.properties().issueType());
        Assertions.assertEquals("xlzyqd", model.properties().severity());
        Assertions.assertEquals("eg", model.properties().description());
        Assertions.assertEquals("lzxwhcansy", model.properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("qvdaeyyguxakjsq", model.properties().suggestedAccessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.OUTBOUND,
            model.properties().suggestedAccessRules().get(0).properties().direction());
        Assertions.assertEquals("kgimsidxasic",
            model.properties().suggestedAccessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("ahhvjhhna",
            model.properties().suggestedAccessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
    }
}
