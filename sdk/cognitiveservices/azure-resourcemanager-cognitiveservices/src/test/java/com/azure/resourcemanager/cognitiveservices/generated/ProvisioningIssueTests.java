// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeter;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRule;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRuleProperties;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem;
import com.azure.resourcemanager.cognitiveservices.models.NspAccessRuleDirection;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssue;
import com.azure.resourcemanager.cognitiveservices.models.ProvisioningIssueProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ProvisioningIssueTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ProvisioningIssue model = BinaryData.fromString(
            "{\"name\":\"pteecjme\",\"properties\":{\"issueType\":\"stvasylwxdzaumw\",\"severity\":\"ohguuf\",\"description\":\"boyjathwt\",\"suggestedResourceIds\":[\"b\",\"emwmdxmebwjs\",\"jpahlxvea\"],\"suggestedAccessRules\":[{\"name\":\"nmwmqtibx\",\"properties\":{\"direction\":\"Inbound\",\"addressPrefixes\":[\"vqcttadija\",\"ukm\",\"sieekpndzaapm\",\"dqmeqwigpibudq\"],\"subscriptions\":[{},{},{}],\"networkSecurityPerimeters\":[{},{},{},{}],\"fullyQualifiedDomainNames\":[\"bpmzzn\",\"tffyaqit\",\"hheioqaqhvseuf\",\"qyrxp\"]}},{\"name\":\"cgq\",\"properties\":{\"direction\":\"Outbound\",\"addressPrefixes\":[\"qfrddgam\",\"uhiosrsju\",\"vfcdisyirn\"],\"subscriptions\":[{}],\"networkSecurityPerimeters\":[{},{},{}],\"fullyQualifiedDomainNames\":[\"rxzbujr\",\"rhqvwrevkh\",\"nlnzonzlrpi\"]}}]}}")
            .toObject(ProvisioningIssue.class);
        Assertions.assertEquals("pteecjme", model.name());
        Assertions.assertEquals("stvasylwxdzaumw", model.properties().issueType());
        Assertions.assertEquals("ohguuf", model.properties().severity());
        Assertions.assertEquals("boyjathwt", model.properties().description());
        Assertions.assertEquals("b", model.properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("nmwmqtibx", model.properties().suggestedAccessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.INBOUND,
            model.properties().suggestedAccessRules().get(0).properties().direction());
        Assertions.assertEquals("vqcttadija",
            model.properties().suggestedAccessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("bpmzzn",
            model.properties().suggestedAccessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ProvisioningIssue model = new ProvisioningIssue().withName("pteecjme")
            .withProperties(new ProvisioningIssueProperties().withIssueType("stvasylwxdzaumw")
                .withSeverity("ohguuf")
                .withDescription("boyjathwt")
                .withSuggestedResourceIds(Arrays.asList("b", "emwmdxmebwjs", "jpahlxvea"))
                .withSuggestedAccessRules(Arrays.asList(
                    new NetworkSecurityPerimeterAccessRule().withName("nmwmqtibx")
                        .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                            .withDirection(NspAccessRuleDirection.INBOUND)
                            .withAddressPrefixes(Arrays.asList("vqcttadija", "ukm", "sieekpndzaapm", "dqmeqwigpibudq"))
                            .withSubscriptions(
                                Arrays.asList(new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                    new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem(),
                                    new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem()))
                            .withNetworkSecurityPerimeters(
                                Arrays.asList(new NetworkSecurityPerimeter(), new NetworkSecurityPerimeter(),
                                    new NetworkSecurityPerimeter(), new NetworkSecurityPerimeter()))
                            .withFullyQualifiedDomainNames(
                                Arrays.asList("bpmzzn", "tffyaqit", "hheioqaqhvseuf", "qyrxp"))),
                    new NetworkSecurityPerimeterAccessRule().withName("cgq")
                        .withProperties(new NetworkSecurityPerimeterAccessRuleProperties()
                            .withDirection(NspAccessRuleDirection.OUTBOUND)
                            .withAddressPrefixes(Arrays.asList("qfrddgam", "uhiosrsju", "vfcdisyirn"))
                            .withSubscriptions(
                                Arrays.asList(new NetworkSecurityPerimeterAccessRulePropertiesSubscriptionsItem()))
                            .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeter(),
                                new NetworkSecurityPerimeter(), new NetworkSecurityPerimeter()))
                            .withFullyQualifiedDomainNames(Arrays.asList("rxzbujr", "rhqvwrevkh", "nlnzonzlrpi"))))));
        model = BinaryData.fromObject(model).toObject(ProvisioningIssue.class);
        Assertions.assertEquals("pteecjme", model.name());
        Assertions.assertEquals("stvasylwxdzaumw", model.properties().issueType());
        Assertions.assertEquals("ohguuf", model.properties().severity());
        Assertions.assertEquals("boyjathwt", model.properties().description());
        Assertions.assertEquals("b", model.properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("nmwmqtibx", model.properties().suggestedAccessRules().get(0).name());
        Assertions.assertEquals(NspAccessRuleDirection.INBOUND,
            model.properties().suggestedAccessRules().get(0).properties().direction());
        Assertions.assertEquals("vqcttadija",
            model.properties().suggestedAccessRules().get(0).properties().addressPrefixes().get(0));
        Assertions.assertEquals("bpmzzn",
            model.properties().suggestedAccessRules().get(0).properties().fullyQualifiedDomainNames().get(0));
    }
}
