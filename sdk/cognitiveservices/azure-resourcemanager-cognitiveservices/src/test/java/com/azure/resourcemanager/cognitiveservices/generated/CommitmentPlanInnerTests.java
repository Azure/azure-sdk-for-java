// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentPlanInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommitmentPlanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommitmentPlanInner model = BinaryData.fromString(
            "{\"etag\":\"ithtywu\",\"kind\":\"cbihwqk\",\"sku\":{\"name\":\"dntwjchrdgo\",\"tier\":\"Premium\",\"size\":\"mwctondzjluudfd\",\"family\":\"gg\",\"capacity\":407564287},\"tags\":{\"tgseinqfiufxqkn\":\"tov\",\"ttwqmsni\":\"irgne\",\"rxfrddhc\":\"fcdmqnrojlpijn\"},\"location\":\"tizzronasxif\",\"properties\":{\"provisioningState\":\"Creating\",\"commitmentPlanGuid\":\"zh\",\"hostingModel\":\"DisconnectedContainer\",\"planType\":\"sgogczhonnxk\",\"current\":{\"tier\":\"nyhmossxkkgthr\",\"count\":486654365,\"quota\":{\"quantity\":1163156563773473643,\"unit\":\"qxvcxgfrpdsofb\"},\"startDate\":\"rnsvbuswd\",\"endDate\":\"yybyc\"},\"autoRenew\":true,\"next\":{\"tier\":\"srtkfa\",\"count\":1955812770,\"quota\":{\"quantity\":877559643182004257,\"unit\":\"yzirtxdyuxzejn\"},\"startDate\":\"sewgioilqukr\",\"endDate\":\"xtqmieoxor\"},\"last\":{\"tier\":\"f\",\"count\":1933548472,\"quota\":{\"quantity\":4267907797964395511,\"unit\":\"hhavgrvkffovjz\"},\"startDate\":\"jbibg\",\"endDate\":\"fxumv\"},\"provisioningIssues\":[\"uyovw\",\"nbkfezzxscy\",\"wzdgirujbzbo\",\"vzzbtdcq\"]},\"id\":\"pniyujviyl\",\"name\":\"dshf\",\"type\":\"snrbgyefrymsgao\"}")
            .toObject(CommitmentPlanInner.class);
        Assertions.assertEquals("cbihwqk", model.kind());
        Assertions.assertEquals("dntwjchrdgo", model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("mwctondzjluudfd", model.sku().size());
        Assertions.assertEquals("gg", model.sku().family());
        Assertions.assertEquals(407564287, model.sku().capacity());
        Assertions.assertEquals("tov", model.tags().get("tgseinqfiufxqkn"));
        Assertions.assertEquals("tizzronasxif", model.location());
        Assertions.assertEquals("zh", model.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER, model.properties().hostingModel());
        Assertions.assertEquals("sgogczhonnxk", model.properties().planType());
        Assertions.assertEquals("nyhmossxkkgthr", model.properties().current().tier());
        Assertions.assertEquals(486654365, model.properties().current().count());
        Assertions.assertEquals(true, model.properties().autoRenew());
        Assertions.assertEquals("srtkfa", model.properties().next().tier());
        Assertions.assertEquals(1955812770, model.properties().next().count());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommitmentPlanInner model = new CommitmentPlanInner().withKind("cbihwqk")
            .withSku(new Sku().withName("dntwjchrdgo")
                .withTier(SkuTier.PREMIUM)
                .withSize("mwctondzjluudfd")
                .withFamily("gg")
                .withCapacity(407564287))
            .withTags(mapOf("tgseinqfiufxqkn", "tov", "ttwqmsni", "irgne", "rxfrddhc", "fcdmqnrojlpijn"))
            .withLocation("tizzronasxif")
            .withProperties(new CommitmentPlanProperties().withCommitmentPlanGuid("zh")
                .withHostingModel(HostingModel.DISCONNECTED_CONTAINER)
                .withPlanType("sgogczhonnxk")
                .withCurrent(new CommitmentPeriod().withTier("nyhmossxkkgthr").withCount(486654365))
                .withAutoRenew(true)
                .withNext(new CommitmentPeriod().withTier("srtkfa").withCount(1955812770)));
        model = BinaryData.fromObject(model).toObject(CommitmentPlanInner.class);
        Assertions.assertEquals("cbihwqk", model.kind());
        Assertions.assertEquals("dntwjchrdgo", model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("mwctondzjluudfd", model.sku().size());
        Assertions.assertEquals("gg", model.sku().family());
        Assertions.assertEquals(407564287, model.sku().capacity());
        Assertions.assertEquals("tov", model.tags().get("tgseinqfiufxqkn"));
        Assertions.assertEquals("tizzronasxif", model.location());
        Assertions.assertEquals("zh", model.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER, model.properties().hostingModel());
        Assertions.assertEquals("sgogczhonnxk", model.properties().planType());
        Assertions.assertEquals("nyhmossxkkgthr", model.properties().current().tier());
        Assertions.assertEquals(486654365, model.properties().current().count());
        Assertions.assertEquals(true, model.properties().autoRenew());
        Assertions.assertEquals("srtkfa", model.properties().next().tier());
        Assertions.assertEquals(1955812770, model.properties().next().count());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
