// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentPlanInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CommitmentPlanInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CommitmentPlanInner model = BinaryData.fromString(
            "{\"etag\":\"kbnujr\",\"kind\":\"vtylbfpncu\",\"sku\":{\"name\":\"oiwiithtywub\",\"tier\":\"Premium\",\"size\":\"h\",\"family\":\"knfd\",\"capacity\":1640142335},\"tags\":{\"dzjlu\":\"hrdgoihxumwcto\",\"wtovvtgsein\":\"dfdlwggyts\",\"knpirgnepttwq\":\"fiufx\",\"mqnrojlpijnkr\":\"sniffc\"},\"location\":\"rddh\",\"properties\":{\"provisioningState\":\"Moving\",\"commitmentPlanGuid\":\"zzronasx\",\"hostingModel\":\"ProvisionedWeb\",\"planType\":\"zq\",\"current\":{\"tier\":\"f\",\"count\":1523928061,\"quota\":{\"quantity\":4980833303843944532,\"unit\":\"zhonnxkrlgnyhmo\"},\"startDate\":\"xkk\",\"endDate\":\"h\"},\"autoRenew\":false,\"next\":{\"tier\":\"jbdhqxvc\",\"count\":1249979629,\"quota\":{\"quantity\":2016469052831170319,\"unit\":\"fbshrnsvbuswd\"},\"startDate\":\"yybyc\",\"endDate\":\"nvjsrtkfa\"},\"last\":{\"tier\":\"pqgik\",\"count\":828801062,\"quota\":{\"quantity\":1446220970457190394,\"unit\":\"uxzejntpsew\"},\"startDate\":\"oi\",\"endDate\":\"ukry\"},\"provisioningIssues\":[\"qmi\",\"ox\"]},\"id\":\"ggufhyaomtb\",\"name\":\"hhavgrvkffovjz\",\"type\":\"pjbi\"}")
            .toObject(CommitmentPlanInner.class);
        Assertions.assertEquals("vtylbfpncu", model.kind());
        Assertions.assertEquals("oiwiithtywub", model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("h", model.sku().size());
        Assertions.assertEquals("knfd", model.sku().family());
        Assertions.assertEquals(1640142335, model.sku().capacity());
        Assertions.assertEquals("hrdgoihxumwcto", model.tags().get("dzjlu"));
        Assertions.assertEquals("rddh", model.location());
        Assertions.assertEquals("zzronasx", model.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, model.properties().hostingModel());
        Assertions.assertEquals("zq", model.properties().planType());
        Assertions.assertEquals("f", model.properties().current().tier());
        Assertions.assertEquals(1523928061, model.properties().current().count());
        Assertions.assertFalse(model.properties().autoRenew());
        Assertions.assertEquals("jbdhqxvc", model.properties().next().tier());
        Assertions.assertEquals(1249979629, model.properties().next().count());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CommitmentPlanInner model = new CommitmentPlanInner().withKind("vtylbfpncu")
            .withSku(new Sku().withName("oiwiithtywub")
                .withTier(SkuTier.PREMIUM)
                .withSize("h")
                .withFamily("knfd")
                .withCapacity(1640142335))
            .withTags(mapOf("dzjlu", "hrdgoihxumwcto", "wtovvtgsein", "dfdlwggyts", "knpirgnepttwq", "fiufx",
                "mqnrojlpijnkr", "sniffc"))
            .withLocation("rddh")
            .withProperties(new CommitmentPlanProperties().withCommitmentPlanGuid("zzronasx")
                .withHostingModel(HostingModel.PROVISIONED_WEB)
                .withPlanType("zq")
                .withCurrent(new CommitmentPeriod().withTier("f").withCount(1523928061))
                .withAutoRenew(false)
                .withNext(new CommitmentPeriod().withTier("jbdhqxvc").withCount(1249979629)));
        model = BinaryData.fromObject(model).toObject(CommitmentPlanInner.class);
        Assertions.assertEquals("vtylbfpncu", model.kind());
        Assertions.assertEquals("oiwiithtywub", model.sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, model.sku().tier());
        Assertions.assertEquals("h", model.sku().size());
        Assertions.assertEquals("knfd", model.sku().family());
        Assertions.assertEquals(1640142335, model.sku().capacity());
        Assertions.assertEquals("hrdgoihxumwcto", model.tags().get("dzjlu"));
        Assertions.assertEquals("rddh", model.location());
        Assertions.assertEquals("zzronasx", model.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, model.properties().hostingModel());
        Assertions.assertEquals("zq", model.properties().planType());
        Assertions.assertEquals("f", model.properties().current().tier());
        Assertions.assertEquals(1523928061, model.properties().current().count());
        Assertions.assertFalse(model.properties().autoRenew());
        Assertions.assertEquals("jbdhqxvc", model.properties().next().tier());
        Assertions.assertEquals(1249979629, model.properties().next().count());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
