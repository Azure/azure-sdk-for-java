// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.AccountSkuListResult;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountsListSkusWithResponseMockTests {
    @Test
    public void testListSkusWithResponse() throws Exception {
        String responseStr
            = "{\"value\":[{\"resourceType\":\"fdqwowftpt\",\"sku\":{\"name\":\"wjtkschgcgqyhl\",\"tier\":\"Standard\",\"size\":\"q\",\"family\":\"vyeldot\",\"capacity\":1476629274}}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AccountSkuListResult response = manager.accounts()
            .listSkusWithResponse("kzzltafhbzf", "ovwmbjlzqsczpgvd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fdqwowftpt", response.value().get(0).resourceType());
        Assertions.assertEquals("wjtkschgcgqyhl", response.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.value().get(0).sku().tier());
        Assertions.assertEquals("q", response.value().get(0).sku().size());
        Assertions.assertEquals("vyeldot", response.value().get(0).sku().family());
        Assertions.assertEquals(1476629274, response.value().get(0).sku().capacity());
    }
}
