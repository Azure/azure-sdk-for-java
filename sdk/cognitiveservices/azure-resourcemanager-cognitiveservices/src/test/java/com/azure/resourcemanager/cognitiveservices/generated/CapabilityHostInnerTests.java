// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CapabilityHostInner;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostKind;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapabilityHostInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapabilityHostInner model = BinaryData.fromString(
            "{\"properties\":{\"aiServicesConnections\":[\"lnjetaglt\"],\"capabilityHostKind\":\"Agents\",\"customerSubnet\":\"tft\",\"provisioningState\":\"Deleting\",\"storageConnections\":[\"bs\",\"vefloccsrmozihmi\",\"g\",\"wtxxpkyjcx\"],\"threadStorageConnections\":[\"grytfmpcyci\",\"rmcaykgg\"],\"vectorStoreConnections\":[\"uztrksxwpndfcpf\"],\"description\":\"nthjtwkjaosrxuzv\",\"tags\":{\"mgbzahgxqdlyrtl\":\"ktcqio\",\"katbhjm\":\"laprlt\",\"arvlagunbt\":\"nnbsoqeqa\",\"av\":\"febwlnbmhyreeudz\"}},\"id\":\"pdqmjxlyyzglgouw\",\"name\":\"lmjjyuo\",\"type\":\"qtobaxkjeyt\"}")
            .toObject(CapabilityHostInner.class);
        Assertions.assertEquals("nthjtwkjaosrxuzv", model.properties().description());
        Assertions.assertEquals("ktcqio", model.properties().tags().get("mgbzahgxqdlyrtl"));
        Assertions.assertEquals("lnjetaglt", model.properties().aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, model.properties().capabilityHostKind());
        Assertions.assertEquals("tft", model.properties().customerSubnet());
        Assertions.assertEquals("bs", model.properties().storageConnections().get(0));
        Assertions.assertEquals("grytfmpcyci", model.properties().threadStorageConnections().get(0));
        Assertions.assertEquals("uztrksxwpndfcpf", model.properties().vectorStoreConnections().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapabilityHostInner model = new CapabilityHostInner()
            .withProperties(new CapabilityHostProperties().withDescription("nthjtwkjaosrxuzv")
                .withTags(mapOf("mgbzahgxqdlyrtl", "ktcqio", "katbhjm", "laprlt", "arvlagunbt", "nnbsoqeqa", "av",
                    "febwlnbmhyreeudz"))
                .withAiServicesConnections(Arrays.asList("lnjetaglt"))
                .withCapabilityHostKind(CapabilityHostKind.AGENTS)
                .withCustomerSubnet("tft")
                .withStorageConnections(Arrays.asList("bs", "vefloccsrmozihmi", "g", "wtxxpkyjcx"))
                .withThreadStorageConnections(Arrays.asList("grytfmpcyci", "rmcaykgg"))
                .withVectorStoreConnections(Arrays.asList("uztrksxwpndfcpf")));
        model = BinaryData.fromObject(model).toObject(CapabilityHostInner.class);
        Assertions.assertEquals("nthjtwkjaosrxuzv", model.properties().description());
        Assertions.assertEquals("ktcqio", model.properties().tags().get("mgbzahgxqdlyrtl"));
        Assertions.assertEquals("lnjetaglt", model.properties().aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, model.properties().capabilityHostKind());
        Assertions.assertEquals("tft", model.properties().customerSubnet());
        Assertions.assertEquals("bs", model.properties().storageConnections().get(0));
        Assertions.assertEquals("grytfmpcyci", model.properties().threadStorageConnections().get(0));
        Assertions.assertEquals("uztrksxwpndfcpf", model.properties().vectorStoreConnections().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
