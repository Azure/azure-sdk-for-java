// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CapabilityHostInner;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostKind;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHostProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CapabilityHostInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CapabilityHostInner model = BinaryData.fromString(
            "{\"properties\":{\"aiServicesConnections\":[\"abaobnslujdjltym\",\"mvguihywart\",\"pphkixkykxds\"],\"capabilityHostKind\":\"Agents\",\"customerSubnet\":\"mmuc\",\"provisioningState\":\"Deleting\",\"storageConnections\":[\"kflrmymy\",\"nc\",\"lhrisw\",\"lmiiiovg\"],\"threadStorageConnections\":[\"xuugqkc\",\"otiowlxteqd\",\"tjgwdtguk\",\"anblwphqlkccu\"],\"vectorStoreConnections\":[\"gqwa\",\"oiulwgniipr\",\"lvawuwzdufypivls\"],\"description\":\"jpmcub\",\"tags\":{\"ubvphavpmhbrbqgv\":\"foxx\",\"zqedikdfrdbi\":\"ovpbbttefjoknssq\",\"zcxmjpbyep\":\"mrjgeihfqlggwfi\",\"rc\":\"mgtvlj\"}},\"id\":\"fqip\",\"name\":\"xhnpo\",\"type\":\"yqwcabvnuil\"}")
            .toObject(CapabilityHostInner.class);
        Assertions.assertEquals("jpmcub", model.properties().description());
        Assertions.assertEquals("foxx", model.properties().tags().get("ubvphavpmhbrbqgv"));
        Assertions.assertEquals("abaobnslujdjltym", model.properties().aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, model.properties().capabilityHostKind());
        Assertions.assertEquals("mmuc", model.properties().customerSubnet());
        Assertions.assertEquals("kflrmymy", model.properties().storageConnections().get(0));
        Assertions.assertEquals("xuugqkc", model.properties().threadStorageConnections().get(0));
        Assertions.assertEquals("gqwa", model.properties().vectorStoreConnections().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CapabilityHostInner model
            = new CapabilityHostInner().withProperties(new CapabilityHostProperties().withDescription("jpmcub")
                .withTags(mapOf("ubvphavpmhbrbqgv", "foxx", "zqedikdfrdbi", "ovpbbttefjoknssq", "zcxmjpbyep",
                    "mrjgeihfqlggwfi", "rc", "mgtvlj"))
                .withAiServicesConnections(Arrays.asList("abaobnslujdjltym", "mvguihywart", "pphkixkykxds"))
                .withCapabilityHostKind(CapabilityHostKind.AGENTS)
                .withCustomerSubnet("mmuc")
                .withStorageConnections(Arrays.asList("kflrmymy", "nc", "lhrisw", "lmiiiovg"))
                .withThreadStorageConnections(Arrays.asList("xuugqkc", "otiowlxteqd", "tjgwdtguk", "anblwphqlkccu"))
                .withVectorStoreConnections(Arrays.asList("gqwa", "oiulwgniipr", "lvawuwzdufypivls")));
        model = BinaryData.fromObject(model).toObject(CapabilityHostInner.class);
        Assertions.assertEquals("jpmcub", model.properties().description());
        Assertions.assertEquals("foxx", model.properties().tags().get("ubvphavpmhbrbqgv"));
        Assertions.assertEquals("abaobnslujdjltym", model.properties().aiServicesConnections().get(0));
        Assertions.assertEquals(CapabilityHostKind.AGENTS, model.properties().capabilityHostKind());
        Assertions.assertEquals("mmuc", model.properties().customerSubnet());
        Assertions.assertEquals("kflrmymy", model.properties().storageConnections().get(0));
        Assertions.assertEquals("xuugqkc", model.properties().threadStorageConnections().get(0));
        Assertions.assertEquals("gqwa", model.properties().vectorStoreConnections().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
