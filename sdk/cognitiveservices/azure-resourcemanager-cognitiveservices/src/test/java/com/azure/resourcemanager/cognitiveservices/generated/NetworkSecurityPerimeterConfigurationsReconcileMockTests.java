// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.NetworkSecurityPerimeterConfiguration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkSecurityPerimeterConfigurationsReconcileMockTests {
    @Test
    public void testReconcile() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"provisioningIssues\":[{\"name\":\"nx\",\"properties\":{\"issueType\":\"pney\",\"severity\":\"bjizqfsgn\",\"description\":\"xz\",\"suggestedResourceIds\":[\"q\"],\"suggestedAccessRules\":[{}]}},{\"name\":\"orxipmlnfyzavfr\",\"properties\":{\"issueType\":\"icdbkpdj\",\"severity\":\"qh\",\"description\":\"q\",\"suggestedResourceIds\":[\"dgonjhxshthmgp\",\"zqulptkbv\",\"pxtzhigqqbtimpk\"],\"suggestedAccessRules\":[{},{},{}]}}],\"networkSecurityPerimeter\":{\"id\":\"nsihqhudsm\",\"perimeterGuid\":\"uaawja\",\"location\":\"wj\"},\"resourceAssociation\":{\"name\":\"z\",\"accessMode\":\"nii\"},\"profile\":{\"name\":\"vqban\",\"accessRulesVersion\":7797974355445812958,\"accessRules\":[{\"name\":\"nbg\",\"properties\":{}}],\"diagnosticSettingsVersion\":7530018712670231191,\"enabledLogCategories\":[\"gm\",\"nltwmpftmfoeajog\"]}},\"id\":\"xwet\",\"name\":\"mfd\",\"type\":\"rvlkpzwbhnrec\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        NetworkSecurityPerimeterConfiguration response = manager.networkSecurityPerimeterConfigurations()
            .reconcile("gmlilwzghjhjvmab", "zbwaybfmdafbgym", "tn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nx", response.properties().provisioningIssues().get(0).name());
        Assertions.assertEquals("pney", response.properties().provisioningIssues().get(0).properties().issueType());
        Assertions.assertEquals("bjizqfsgn", response.properties().provisioningIssues().get(0).properties().severity());
        Assertions.assertEquals("xz", response.properties().provisioningIssues().get(0).properties().description());
        Assertions.assertEquals("q",
            response.properties().provisioningIssues().get(0).properties().suggestedResourceIds().get(0));
        Assertions.assertEquals("nsihqhudsm", response.properties().networkSecurityPerimeter().id());
        Assertions.assertEquals("uaawja", response.properties().networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("wj", response.properties().networkSecurityPerimeter().location());
        Assertions.assertEquals("z", response.properties().resourceAssociation().name());
        Assertions.assertEquals("nii", response.properties().resourceAssociation().accessMode());
        Assertions.assertEquals("vqban", response.properties().profile().name());
        Assertions.assertEquals(7797974355445812958L, response.properties().profile().accessRulesVersion());
        Assertions.assertEquals("nbg", response.properties().profile().accessRules().get(0).name());
        Assertions.assertEquals(7530018712670231191L, response.properties().profile().diagnosticSettingsVersion());
        Assertions.assertEquals("gm", response.properties().profile().enabledLogCategories().get(0));
    }
}
