// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistItemInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiBlocklistItemInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiBlocklistItemInner model = BinaryData.fromString(
            "{\"etag\":\"l\",\"tags\":{\"vmnnrw\":\"yuqdu\",\"wjhhgdnhxmsivf\":\"biorktal\",\"zaofjchvcyy\":\"miloxggdufiqndie\",\"gdotcubiipuipwo\":\"s\"},\"properties\":{\"pattern\":\"macjekn\",\"isRegex\":true},\"id\":\"hqvcimpevfgmblr\",\"name\":\"ilbywdxsm\",\"type\":\"ccwr\"}")
            .toObject(RaiBlocklistItemInner.class);
        Assertions.assertEquals("yuqdu", model.tags().get("vmnnrw"));
        Assertions.assertEquals("macjekn", model.properties().pattern());
        Assertions.assertTrue(model.properties().isRegex());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiBlocklistItemInner model = new RaiBlocklistItemInner()
            .withTags(mapOf("vmnnrw", "yuqdu", "wjhhgdnhxmsivf", "biorktal", "zaofjchvcyy", "miloxggdufiqndie",
                "gdotcubiipuipwo", "s"))
            .withProperties(new RaiBlocklistItemProperties().withPattern("macjekn").withIsRegex(true));
        model = BinaryData.fromObject(model).toObject(RaiBlocklistItemInner.class);
        Assertions.assertEquals("yuqdu", model.tags().get("vmnnrw"));
        Assertions.assertEquals("macjekn", model.properties().pattern());
        Assertions.assertTrue(model.properties().isRegex());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
