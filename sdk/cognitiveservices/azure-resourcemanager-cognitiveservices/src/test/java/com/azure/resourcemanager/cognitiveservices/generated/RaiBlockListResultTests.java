// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlockListResult;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiBlockListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiBlockListResult model = BinaryData.fromString(
            "{\"nextLink\":\"mjdftu\",\"value\":[{\"etag\":\"ucea\",\"tags\":{\"m\":\"czu\",\"w\":\"jw\"},\"properties\":{\"description\":\"oknssxmojmsvpkjp\"},\"id\":\"vk\",\"name\":\"cfzq\",\"type\":\"jyxgtczh\"},{\"etag\":\"bsdshmkxmaehvbbx\",\"tags\":{\"kgxywr\":\"pltfnhtba\"},\"properties\":{\"description\":\"yklyhpluodpvruud\"},\"id\":\"gzibthostgktstv\",\"name\":\"xeclzedqbcvhzlhp\",\"type\":\"odqkdlwwqfb\"}]}")
            .toObject(RaiBlockListResult.class);
        Assertions.assertEquals("mjdftu", model.nextLink());
        Assertions.assertEquals("czu", model.value().get(0).tags().get("m"));
        Assertions.assertEquals("oknssxmojmsvpkjp", model.value().get(0).properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiBlockListResult model = new RaiBlockListResult().withNextLink("mjdftu")
            .withValue(Arrays.asList(
                new RaiBlocklistInner().withTags(mapOf("m", "czu", "w", "jw"))
                    .withProperties(new RaiBlocklistProperties().withDescription("oknssxmojmsvpkjp")),
                new RaiBlocklistInner().withTags(mapOf("kgxywr", "pltfnhtba"))
                    .withProperties(new RaiBlocklistProperties().withDescription("yklyhpluodpvruud"))));
        model = BinaryData.fromObject(model).toObject(RaiBlockListResult.class);
        Assertions.assertEquals("mjdftu", model.nextLink());
        Assertions.assertEquals("czu", model.value().get(0).tags().get("m"));
        Assertions.assertEquals("oknssxmojmsvpkjp", model.value().get(0).properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
