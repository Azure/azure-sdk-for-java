// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlockListResult;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiBlockListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiBlockListResult model = BinaryData.fromString(
            "{\"nextLink\":\"msgeivsiykzk\",\"value\":[{\"etag\":\"dxonbzoggculap\",\"tags\":{\"ylbf\":\"rpgogtqxep\"},\"properties\":{\"description\":\"lyjt\"},\"id\":\"of\",\"name\":\"zhvfcibyfmowuxr\",\"type\":\"jpvd\"}]}")
            .toObject(RaiBlockListResult.class);
        Assertions.assertEquals("msgeivsiykzk", model.nextLink());
        Assertions.assertEquals("rpgogtqxep", model.value().get(0).tags().get("ylbf"));
        Assertions.assertEquals("lyjt", model.value().get(0).properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiBlockListResult model = new RaiBlockListResult().withNextLink("msgeivsiykzk")
            .withValue(Arrays.asList(new RaiBlocklistInner().withTags(mapOf("ylbf", "rpgogtqxep"))
                .withProperties(new RaiBlocklistProperties().withDescription("lyjt"))));
        model = BinaryData.fromObject(model).toObject(RaiBlockListResult.class);
        Assertions.assertEquals("msgeivsiykzk", model.nextLink());
        Assertions.assertEquals("rpgogtqxep", model.value().get(0).tags().get("ylbf"));
        Assertions.assertEquals("lyjt", model.value().get(0).properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
