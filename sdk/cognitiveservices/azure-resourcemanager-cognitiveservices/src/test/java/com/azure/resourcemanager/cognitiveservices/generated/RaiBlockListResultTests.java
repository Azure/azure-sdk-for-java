// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlockListResult;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiBlockListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiBlockListResult model = BinaryData.fromString(
            "{\"nextLink\":\"lrri\",\"value\":[{\"etag\":\"xsmiccwrwfscjf\",\"tags\":{\"tiby\":\"szqujizdvoq\",\"lgy\":\"wb\"},\"properties\":{\"description\":\"tp\"},\"id\":\"hjoxo\",\"name\":\"smsks\",\"type\":\"pi\"},{\"etag\":\"oljxkcgx\",\"tags\":{\"l\":\"sffgcvizqzd\",\"youpfgfbkj\":\"w\",\"ttsttktlahbqact\":\"bdyhgkfminsgowz\"},\"properties\":{\"description\":\"zukxitmmqtgqq\"},\"id\":\"x\",\"name\":\"rnxrxcpj\",\"type\":\"isavok\"}]}")
            .toObject(RaiBlockListResult.class);
        Assertions.assertEquals("lrri", model.nextLink());
        Assertions.assertEquals("szqujizdvoq", model.value().get(0).tags().get("tiby"));
        Assertions.assertEquals("tp", model.value().get(0).properties().description());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiBlockListResult model = new RaiBlockListResult().withNextLink("lrri")
            .withValue(Arrays.asList(
                new RaiBlocklistInner().withTags(mapOf("tiby", "szqujizdvoq", "lgy", "wb"))
                    .withProperties(new RaiBlocklistProperties().withDescription("tp")),
                new RaiBlocklistInner()
                    .withTags(mapOf("l", "sffgcvizqzd", "youpfgfbkj", "w", "ttsttktlahbqact", "bdyhgkfminsgowz"))
                    .withProperties(new RaiBlocklistProperties().withDescription("zukxitmmqtgqq"))));
        model = BinaryData.fromObject(model).toObject(RaiBlockListResult.class);
        Assertions.assertEquals("lrri", model.nextLink());
        Assertions.assertEquals("szqujizdvoq", model.value().get(0).tags().get("tiby"));
        Assertions.assertEquals("tp", model.value().get(0).properties().description());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
