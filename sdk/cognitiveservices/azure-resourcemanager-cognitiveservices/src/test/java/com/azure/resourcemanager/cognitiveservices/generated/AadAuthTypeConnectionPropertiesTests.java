// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.AadAuthTypeConnectionProperties;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AadAuthTypeConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AadAuthTypeConnectionProperties model = BinaryData.fromString(
            "{\"authType\":\"AAD\",\"category\":\"AzureOneLake\",\"createdByWorkspaceArmId\":\"xxgewpk\",\"error\":\"qylkmqpzoyhlf\",\"expiryTime\":\"2021-02-23T15:55:14Z\",\"group\":\"File\",\"isSharedToAll\":true,\"metadata\":{\"jfujq\":\"oebqinjipn\"},\"peRequirement\":\"Required\",\"peStatus\":\"Inactive\",\"sharedUserList\":[\"hpzpo\",\"o\",\"yjwpfilkmkkh\",\"l\"],\"target\":\"ndviauogphuartvt\",\"useWorkspaceManagedIdentity\":true}")
            .toObject(AadAuthTypeConnectionProperties.class);
        Assertions.assertEquals(ConnectionCategory.AZURE_ONE_LAKE, model.category());
        Assertions.assertEquals("qylkmqpzoyhlf", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T15:55:14Z"), model.expiryTime());
        Assertions.assertTrue(model.isSharedToAll());
        Assertions.assertEquals("oebqinjipn", model.metadata().get("jfujq"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.peStatus());
        Assertions.assertEquals("hpzpo", model.sharedUserList().get(0));
        Assertions.assertEquals("ndviauogphuartvt", model.target());
        Assertions.assertTrue(model.useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AadAuthTypeConnectionProperties model
            = new AadAuthTypeConnectionProperties().withCategory(ConnectionCategory.AZURE_ONE_LAKE)
                .withError("qylkmqpzoyhlf")
                .withExpiryTime(OffsetDateTime.parse("2021-02-23T15:55:14Z"))
                .withIsSharedToAll(true)
                .withMetadata(mapOf("jfujq", "oebqinjipn"))
                .withPeRequirement(ManagedPERequirement.REQUIRED)
                .withPeStatus(ManagedPEStatus.INACTIVE)
                .withSharedUserList(Arrays.asList("hpzpo", "o", "yjwpfilkmkkh", "l"))
                .withTarget("ndviauogphuartvt")
                .withUseWorkspaceManagedIdentity(true);
        model = BinaryData.fromObject(model).toObject(AadAuthTypeConnectionProperties.class);
        Assertions.assertEquals(ConnectionCategory.AZURE_ONE_LAKE, model.category());
        Assertions.assertEquals("qylkmqpzoyhlf", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-23T15:55:14Z"), model.expiryTime());
        Assertions.assertTrue(model.isSharedToAll());
        Assertions.assertEquals("oebqinjipn", model.metadata().get("jfujq"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.peStatus());
        Assertions.assertEquals("hpzpo", model.sharedUserList().get(0));
        Assertions.assertEquals("ndviauogphuartvt", model.target());
        Assertions.assertTrue(model.useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
