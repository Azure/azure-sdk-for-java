// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionPropertiesV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionPropertiesV2 model = BinaryData.fromString(
            "{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"Jira\",\"createdByWorkspaceArmId\":\"jmvl\",\"error\":\"z\",\"expiryTime\":\"2021-04-07T06:34:10Z\",\"group\":\"GenericProtocol\",\"isSharedToAll\":false,\"metadata\":{\"uyjucejikzo\":\"lfojuidjp\",\"ikyju\":\"ovvtzejetjkln\",\"bqzolxr\":\"k\"},\"peRequirement\":\"Required\",\"peStatus\":\"Inactive\",\"sharedUserList\":[\"rhtgvgzpcrrkol\",\"w\",\"mjsmwr\",\"kcdxfzzzw\"],\"target\":\"afitlhguynuchlg\",\"useWorkspaceManagedIdentity\":false}")
            .toObject(ConnectionPropertiesV2.class);
        Assertions.assertEquals(ConnectionCategory.JIRA, model.category());
        Assertions.assertEquals("z", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-07T06:34:10Z"), model.expiryTime());
        Assertions.assertFalse(model.isSharedToAll());
        Assertions.assertEquals("lfojuidjp", model.metadata().get("uyjucejikzo"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.peStatus());
        Assertions.assertEquals("rhtgvgzpcrrkol", model.sharedUserList().get(0));
        Assertions.assertEquals("afitlhguynuchlg", model.target());
        Assertions.assertFalse(model.useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionPropertiesV2 model = new ConnectionPropertiesV2().withCategory(ConnectionCategory.JIRA)
            .withError("z")
            .withExpiryTime(OffsetDateTime.parse("2021-04-07T06:34:10Z"))
            .withIsSharedToAll(false)
            .withMetadata(mapOf("uyjucejikzo", "lfojuidjp", "ikyju", "ovvtzejetjkln", "bqzolxr", "k"))
            .withPeRequirement(ManagedPERequirement.REQUIRED)
            .withPeStatus(ManagedPEStatus.INACTIVE)
            .withSharedUserList(Arrays.asList("rhtgvgzpcrrkol", "w", "mjsmwr", "kcdxfzzzw"))
            .withTarget("afitlhguynuchlg")
            .withUseWorkspaceManagedIdentity(false);
        model = BinaryData.fromObject(model).toObject(ConnectionPropertiesV2.class);
        Assertions.assertEquals(ConnectionCategory.JIRA, model.category());
        Assertions.assertEquals("z", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-07T06:34:10Z"), model.expiryTime());
        Assertions.assertFalse(model.isSharedToAll());
        Assertions.assertEquals("lfojuidjp", model.metadata().get("uyjucejikzo"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.peStatus());
        Assertions.assertEquals("rhtgvgzpcrrkol", model.sharedUserList().get(0));
        Assertions.assertEquals("afitlhguynuchlg", model.target());
        Assertions.assertFalse(model.useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
