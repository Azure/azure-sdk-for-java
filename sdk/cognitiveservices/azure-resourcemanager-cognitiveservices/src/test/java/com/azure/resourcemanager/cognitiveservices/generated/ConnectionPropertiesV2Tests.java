// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionPropertiesV2Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionPropertiesV2 model = BinaryData.fromString(
            "{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"MongoDbAtlas\",\"createdByWorkspaceArmId\":\"iqxeiiqbimht\",\"error\":\"winhehfqpo\",\"expiryTime\":\"2021-02-06T22:44:11Z\",\"group\":\"ServicesAndApps\",\"isSharedToAll\":true,\"metadata\":{\"kbwvqvxkdiv\":\"b\",\"zuwfmdur\":\"ihebwtsw\"},\"peRequirement\":\"Required\",\"peStatus\":\"NotApplicable\",\"sharedUserList\":[\"cjfelisdjubgg\",\"qigkx\",\"bsazgakg\",\"cyrcmjdmspo\"],\"target\":\"pv\",\"useWorkspaceManagedIdentity\":true}")
            .toObject(ConnectionPropertiesV2.class);
        Assertions.assertEquals(ConnectionCategory.MONGO_DB_ATLAS, model.category());
        Assertions.assertEquals("winhehfqpo", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T22:44:11Z"), model.expiryTime());
        Assertions.assertTrue(model.isSharedToAll());
        Assertions.assertEquals("b", model.metadata().get("kbwvqvxkdiv"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.NOT_APPLICABLE, model.peStatus());
        Assertions.assertEquals("cjfelisdjubgg", model.sharedUserList().get(0));
        Assertions.assertEquals("pv", model.target());
        Assertions.assertTrue(model.useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionPropertiesV2 model = new ConnectionPropertiesV2().withCategory(ConnectionCategory.MONGO_DB_ATLAS)
            .withError("winhehfqpo")
            .withExpiryTime(OffsetDateTime.parse("2021-02-06T22:44:11Z"))
            .withIsSharedToAll(true)
            .withMetadata(mapOf("kbwvqvxkdiv", "b", "zuwfmdur", "ihebwtsw"))
            .withPeRequirement(ManagedPERequirement.REQUIRED)
            .withPeStatus(ManagedPEStatus.NOT_APPLICABLE)
            .withSharedUserList(Arrays.asList("cjfelisdjubgg", "qigkx", "bsazgakg", "cyrcmjdmspo"))
            .withTarget("pv")
            .withUseWorkspaceManagedIdentity(true);
        model = BinaryData.fromObject(model).toObject(ConnectionPropertiesV2.class);
        Assertions.assertEquals(ConnectionCategory.MONGO_DB_ATLAS, model.category());
        Assertions.assertEquals("winhehfqpo", model.error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-06T22:44:11Z"), model.expiryTime());
        Assertions.assertTrue(model.isSharedToAll());
        Assertions.assertEquals("b", model.metadata().get("kbwvqvxkdiv"));
        Assertions.assertEquals(ManagedPERequirement.REQUIRED, model.peRequirement());
        Assertions.assertEquals(ManagedPEStatus.NOT_APPLICABLE, model.peStatus());
        Assertions.assertEquals("cjfelisdjubgg", model.sharedUserList().get(0));
        Assertions.assertEquals("pv", model.target());
        Assertions.assertTrue(model.useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
