// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.MetricName;
import com.azure.resourcemanager.cognitiveservices.models.QuotaUsageStatus;
import com.azure.resourcemanager.cognitiveservices.models.UnitType;
import com.azure.resourcemanager.cognitiveservices.models.Usage;
import org.junit.jupiter.api.Assertions;

public final class UsageTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Usage model = BinaryData.fromString(
            "{\"unit\":\"CountPerSecond\",\"name\":{\"value\":\"mcmatuokthfuiu\",\"localizedValue\":\"dsfcpkvxodpuoz\"},\"quotaPeriod\":\"zydagfuaxbezyiuo\",\"limit\":79.92033791389453,\"currentValue\":57.91530159520734,\"nextResetTime\":\"wz\",\"status\":\"Included\"}")
            .toObject(Usage.class);
        Assertions.assertEquals(UnitType.COUNT_PER_SECOND, model.unit());
        Assertions.assertEquals("mcmatuokthfuiu", model.name().value());
        Assertions.assertEquals("dsfcpkvxodpuoz", model.name().localizedValue());
        Assertions.assertEquals("zydagfuaxbezyiuo", model.quotaPeriod());
        Assertions.assertEquals(79.92033791389453D, model.limit());
        Assertions.assertEquals(57.91530159520734D, model.currentValue());
        Assertions.assertEquals("wz", model.nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.INCLUDED, model.status());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Usage model = new Usage().withUnit(UnitType.COUNT_PER_SECOND)
            .withName(new MetricName().withValue("mcmatuokthfuiu").withLocalizedValue("dsfcpkvxodpuoz"))
            .withQuotaPeriod("zydagfuaxbezyiuo")
            .withLimit(79.92033791389453D)
            .withCurrentValue(57.91530159520734D)
            .withNextResetTime("wz")
            .withStatus(QuotaUsageStatus.INCLUDED);
        model = BinaryData.fromObject(model).toObject(Usage.class);
        Assertions.assertEquals(UnitType.COUNT_PER_SECOND, model.unit());
        Assertions.assertEquals("mcmatuokthfuiu", model.name().value());
        Assertions.assertEquals("dsfcpkvxodpuoz", model.name().localizedValue());
        Assertions.assertEquals("zydagfuaxbezyiuo", model.quotaPeriod());
        Assertions.assertEquals(79.92033791389453D, model.limit());
        Assertions.assertEquals(57.91530159520734D, model.currentValue());
        Assertions.assertEquals("wz", model.nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.INCLUDED, model.status());
    }
}
