// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.QuotaUsageStatus;
import com.azure.resourcemanager.cognitiveservices.models.UnitType;
import com.azure.resourcemanager.cognitiveservices.models.Usage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"Bytes\",\"name\":{\"value\":\"hlhzdsqtzbsrgno\",\"localizedValue\":\"jhf\"},\"quotaPeriod\":\"vecactx\",\"limit\":41.168322378176114,\"currentValue\":22.497800609323814,\"nextResetTime\":\"cluqovekqvgqo\",\"status\":\"InOverage\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Usage> response
            = manager.usages().list("pe", "ojyqdhcuplcplcw", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(UnitType.BYTES, response.iterator().next().unit());
        Assertions.assertEquals("hlhzdsqtzbsrgno", response.iterator().next().name().value());
        Assertions.assertEquals("jhf", response.iterator().next().name().localizedValue());
        Assertions.assertEquals("vecactx", response.iterator().next().quotaPeriod());
        Assertions.assertEquals(41.168322378176114D, response.iterator().next().limit());
        Assertions.assertEquals(22.497800609323814D, response.iterator().next().currentValue());
        Assertions.assertEquals("cluqovekqvgqo", response.iterator().next().nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.IN_OVERAGE, response.iterator().next().status());
    }
}
