// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.QuotaUsageStatus;
import com.azure.resourcemanager.cognitiveservices.models.UnitType;
import com.azure.resourcemanager.cognitiveservices.models.Usage;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class UsagesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"unit\":\"Seconds\",\"name\":{\"value\":\"ttefjoknssq\",\"localizedValue\":\"qedikdfrd\"},\"quotaPeriod\":\"qmrjg\",\"limit\":32.934006077983334,\"currentValue\":10.442339519053135,\"nextResetTime\":\"wfiwzcxmj\",\"status\":\"Unknown\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Usage> response
            = manager.usages().list("ifoxxkubvphav", "mhbrbqgvg", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(UnitType.SECONDS, response.iterator().next().unit());
        Assertions.assertEquals("ttefjoknssq", response.iterator().next().name().value());
        Assertions.assertEquals("qedikdfrd", response.iterator().next().name().localizedValue());
        Assertions.assertEquals("qmrjg", response.iterator().next().quotaPeriod());
        Assertions.assertEquals(32.934006077983334D, response.iterator().next().limit());
        Assertions.assertEquals(10.442339519053135D, response.iterator().next().currentValue());
        Assertions.assertEquals("wfiwzcxmj", response.iterator().next().nextResetTime());
        Assertions.assertEquals(QuotaUsageStatus.UNKNOWN, response.iterator().next().status());
    }
}
