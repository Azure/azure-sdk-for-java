// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistItemInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlockListItemsResult;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiBlockListItemsResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiBlockListItemsResult model = BinaryData.fromString(
            "{\"nextLink\":\"mrqemvvhmx\",\"value\":[{\"etag\":\"utacoe\",\"tags\":{\"guaadraufactkahz\":\"ewzcjznmwcp\",\"jjziuxxpsh\":\"v\"},\"properties\":{\"pattern\":\"kulfg\",\"isRegex\":false},\"id\":\"ubkwdle\",\"name\":\"rds\",\"type\":\"tujbazpju\"},{\"etag\":\"inyflnorwmduvwp\",\"tags\":{\"isze\":\"xwmygdxpgpqc\",\"rxgibbd\":\"nnbj\"},\"properties\":{\"pattern\":\"onfo\",\"isRegex\":false},\"id\":\"orsukokwbqp\",\"name\":\"hlvnuuepzlr\",\"type\":\"hw\"}]}")
            .toObject(RaiBlockListItemsResult.class);
        Assertions.assertEquals("mrqemvvhmx", model.nextLink());
        Assertions.assertEquals("ewzcjznmwcp", model.value().get(0).tags().get("guaadraufactkahz"));
        Assertions.assertEquals("kulfg", model.value().get(0).properties().pattern());
        Assertions.assertFalse(model.value().get(0).properties().isRegex());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiBlockListItemsResult model = new RaiBlockListItemsResult().withNextLink("mrqemvvhmx")
            .withValue(Arrays.asList(
                new RaiBlocklistItemInner().withTags(mapOf("guaadraufactkahz", "ewzcjznmwcp", "jjziuxxpsh", "v"))
                    .withProperties(new RaiBlocklistItemProperties().withPattern("kulfg").withIsRegex(false)),
                new RaiBlocklistItemInner().withTags(mapOf("isze", "xwmygdxpgpqc", "rxgibbd", "nnbj"))
                    .withProperties(new RaiBlocklistItemProperties().withPattern("onfo").withIsRegex(false))));
        model = BinaryData.fromObject(model).toObject(RaiBlockListItemsResult.class);
        Assertions.assertEquals("mrqemvvhmx", model.nextLink());
        Assertions.assertEquals("ewzcjznmwcp", model.value().get(0).tags().get("guaadraufactkahz"));
        Assertions.assertEquals("kulfg", model.value().get(0).properties().pattern());
        Assertions.assertFalse(model.value().get(0).properties().isRegex());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
