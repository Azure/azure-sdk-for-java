// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistItemInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlockListItemsResult;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiBlockListItemsResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiBlockListItemsResult model = BinaryData.fromString(
            "{\"nextLink\":\"lmywwtkgkxnyed\",\"value\":[{\"etag\":\"udtjuewbc\",\"tags\":{\"bvpa\":\"uuwhcjyxcc\",\"px\":\"akkud\"},\"properties\":{\"pattern\":\"plmag\",\"isRegex\":true},\"id\":\"yohpfkyrkdbdgiog\",\"name\":\"jkmnwq\",\"type\":\"nobaiyhddviacegf\"},{\"etag\":\"tfpmvmemfnczdw\",\"tags\":{\"db\":\"alxlllchp\"},\"properties\":{\"pattern\":\"wrd\",\"isRegex\":true},\"id\":\"ukuv\",\"name\":\"jcswsmys\",\"type\":\"uluqypfc\"},{\"etag\":\"rchpqbmfpjbabwid\",\"tags\":{\"qddrihpfhoqcaae\":\"sspuunnoxyhkx\",\"djvlpj\":\"dao\",\"msgeivsiykzk\":\"xkzb\",\"xonbzoggculapz\":\"ncj\"},\"properties\":{\"pattern\":\"pgogtqxepny\",\"isRegex\":false},\"id\":\"uajlyj\",\"name\":\"lvofqzhvfcibyfmo\",\"type\":\"uxrkjp\"}]}")
            .toObject(RaiBlockListItemsResult.class);
        Assertions.assertEquals("lmywwtkgkxnyed", model.nextLink());
        Assertions.assertEquals("uuwhcjyxcc", model.value().get(0).tags().get("bvpa"));
        Assertions.assertEquals("plmag", model.value().get(0).properties().pattern());
        Assertions.assertEquals(true, model.value().get(0).properties().isRegex());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiBlockListItemsResult model = new RaiBlockListItemsResult().withNextLink("lmywwtkgkxnyed")
            .withValue(Arrays.asList(
                new RaiBlocklistItemInner().withTags(mapOf("bvpa", "uuwhcjyxcc", "px", "akkud"))
                    .withProperties(new RaiBlocklistItemProperties().withPattern("plmag").withIsRegex(true)),
                new RaiBlocklistItemInner().withTags(mapOf("db", "alxlllchp"))
                    .withProperties(new RaiBlocklistItemProperties().withPattern("wrd").withIsRegex(true)),
                new RaiBlocklistItemInner()
                    .withTags(mapOf("qddrihpfhoqcaae", "sspuunnoxyhkx", "djvlpj", "dao", "msgeivsiykzk", "xkzb",
                        "xonbzoggculapz", "ncj"))
                    .withProperties(new RaiBlocklistItemProperties().withPattern("pgogtqxepny").withIsRegex(false))));
        model = BinaryData.fromObject(model).toObject(RaiBlockListItemsResult.class);
        Assertions.assertEquals("lmywwtkgkxnyed", model.nextLink());
        Assertions.assertEquals("uuwhcjyxcc", model.value().get(0).tags().get("bvpa"));
        Assertions.assertEquals("plmag", model.value().get(0).properties().pattern());
        Assertions.assertEquals(true, model.value().get(0).properties().isRegex());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
