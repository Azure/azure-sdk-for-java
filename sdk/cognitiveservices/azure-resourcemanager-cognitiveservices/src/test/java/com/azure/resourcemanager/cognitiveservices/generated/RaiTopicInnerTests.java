// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiTopicInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiTopicProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiTopicInner model = BinaryData.fromString(
            "{\"etag\":\"u\",\"tags\":{\"hihfrbbcevqagtlt\":\"ppnvdxz\"},\"properties\":{\"topicId\":\"fkqojpy\",\"topicName\":\"gtrd\",\"description\":\"ifmzzsd\",\"sampleBlobUrl\":\"brn\",\"status\":\"u\",\"failedReason\":\"prafwgckhoc\",\"createdAt\":\"2021-09-07T04:54:29Z\",\"lastModifiedAt\":\"2021-04-09T15:38:49Z\"},\"id\":\"wafqroud\",\"name\":\"spave\",\"type\":\"hrv\"}")
            .toObject(RaiTopicInner.class);
        Assertions.assertEquals("ppnvdxz", model.tags().get("hihfrbbcevqagtlt"));
        Assertions.assertEquals("fkqojpy", model.properties().topicId());
        Assertions.assertEquals("gtrd", model.properties().topicName());
        Assertions.assertEquals("ifmzzsd", model.properties().description());
        Assertions.assertEquals("brn", model.properties().sampleBlobUrl());
        Assertions.assertEquals("u", model.properties().status());
        Assertions.assertEquals("prafwgckhoc", model.properties().failedReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T04:54:29Z"), model.properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-09T15:38:49Z"), model.properties().lastModifiedAt());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiTopicInner model = new RaiTopicInner().withTags(mapOf("hihfrbbcevqagtlt", "ppnvdxz"))
            .withProperties(new RaiTopicProperties().withTopicId("fkqojpy")
                .withTopicName("gtrd")
                .withDescription("ifmzzsd")
                .withSampleBlobUrl("brn")
                .withStatus("u")
                .withFailedReason("prafwgckhoc")
                .withCreatedAt(OffsetDateTime.parse("2021-09-07T04:54:29Z"))
                .withLastModifiedAt(OffsetDateTime.parse("2021-04-09T15:38:49Z")));
        model = BinaryData.fromObject(model).toObject(RaiTopicInner.class);
        Assertions.assertEquals("ppnvdxz", model.tags().get("hihfrbbcevqagtlt"));
        Assertions.assertEquals("fkqojpy", model.properties().topicId());
        Assertions.assertEquals("gtrd", model.properties().topicName());
        Assertions.assertEquals("ifmzzsd", model.properties().description());
        Assertions.assertEquals("brn", model.properties().sampleBlobUrl());
        Assertions.assertEquals("u", model.properties().status());
        Assertions.assertEquals("prafwgckhoc", model.properties().failedReason());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-07T04:54:29Z"), model.properties().createdAt());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-09T15:38:49Z"), model.properties().lastModifiedAt());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
