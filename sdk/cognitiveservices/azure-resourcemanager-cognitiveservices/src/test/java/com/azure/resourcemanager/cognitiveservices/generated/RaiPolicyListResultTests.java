// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiPolicyInner;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.CustomBlocklistConfig;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentFilter;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyListResult;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiPolicyListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiPolicyListResult model = BinaryData.fromString(
            "{\"nextLink\":\"gx\",\"value\":[{\"etag\":\"pyklyhpluodpvru\",\"tags\":{\"xeclzedqbcvhzlhp\":\"gzibthostgktstv\"},\"properties\":{\"type\":\"UserManaged\",\"mode\":\"Asynchronous_filter\",\"basePolicyName\":\"wwqfbumlkxtrqj\",\"contentFilters\":[{\"name\":\"mbtxhwgf\",\"enabled\":true,\"severityThreshold\":\"Medium\",\"blocking\":true,\"source\":\"Completion\"},{\"name\":\"brhu\",\"enabled\":false,\"severityThreshold\":\"High\",\"blocking\":false,\"source\":\"Prompt\"},{\"name\":\"okkqfqjbvleo\",\"enabled\":false,\"severityThreshold\":\"Low\",\"blocking\":true,\"source\":\"Prompt\"},{\"name\":\"fa\",\"enabled\":true,\"severityThreshold\":\"High\",\"blocking\":false,\"source\":\"Prompt\"}],\"customBlocklists\":[{\"source\":\"Prompt\",\"blocklistName\":\"yjkqabqgzslesjcb\",\"blocking\":true}]},\"id\":\"n\",\"name\":\"tiewdj\",\"type\":\"vbquwr\"}]}")
            .toObject(RaiPolicyListResult.class);
        Assertions.assertEquals("gx", model.nextLink());
        Assertions.assertEquals("gzibthostgktstv", model.value().get(0).tags().get("xeclzedqbcvhzlhp"));
        Assertions.assertEquals(RaiPolicyMode.ASYNCHRONOUS_FILTER, model.value().get(0).properties().mode());
        Assertions.assertEquals("wwqfbumlkxtrqj", model.value().get(0).properties().basePolicyName());
        Assertions.assertEquals("mbtxhwgf", model.value().get(0).properties().contentFilters().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.MEDIUM,
            model.value().get(0).properties().contentFilters().get(0).severityThreshold());
        Assertions.assertEquals(true, model.value().get(0).properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            model.value().get(0).properties().contentFilters().get(0).source());
        Assertions.assertEquals("yjkqabqgzslesjcb",
            model.value().get(0).properties().customBlocklists().get(0).blocklistName());
        Assertions.assertEquals(true, model.value().get(0).properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT,
            model.value().get(0).properties().customBlocklists().get(0).source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiPolicyListResult model = new RaiPolicyListResult().withNextLink("gx")
            .withValue(Arrays.asList(new RaiPolicyInner().withTags(mapOf("xeclzedqbcvhzlhp", "gzibthostgktstv"))
                .withProperties(new RaiPolicyProperties().withMode(RaiPolicyMode.ASYNCHRONOUS_FILTER)
                    .withBasePolicyName("wwqfbumlkxtrqj")
                    .withContentFilters(Arrays.asList(
                        new RaiPolicyContentFilter().withName("mbtxhwgf")
                            .withEnabled(true)
                            .withSeverityThreshold(ContentLevel.MEDIUM)
                            .withBlocking(true)
                            .withSource(RaiPolicyContentSource.COMPLETION),
                        new RaiPolicyContentFilter().withName("brhu")
                            .withEnabled(false)
                            .withSeverityThreshold(ContentLevel.HIGH)
                            .withBlocking(false)
                            .withSource(RaiPolicyContentSource.PROMPT),
                        new RaiPolicyContentFilter().withName("okkqfqjbvleo")
                            .withEnabled(false)
                            .withSeverityThreshold(ContentLevel.LOW)
                            .withBlocking(true)
                            .withSource(RaiPolicyContentSource.PROMPT),
                        new RaiPolicyContentFilter().withName("fa")
                            .withEnabled(true)
                            .withSeverityThreshold(ContentLevel.HIGH)
                            .withBlocking(false)
                            .withSource(RaiPolicyContentSource.PROMPT)))
                    .withCustomBlocklists(
                        Arrays.asList(new CustomBlocklistConfig().withBlocklistName("yjkqabqgzslesjcb")
                            .withBlocking(true)
                            .withSource(RaiPolicyContentSource.PROMPT))))));
        model = BinaryData.fromObject(model).toObject(RaiPolicyListResult.class);
        Assertions.assertEquals("gx", model.nextLink());
        Assertions.assertEquals("gzibthostgktstv", model.value().get(0).tags().get("xeclzedqbcvhzlhp"));
        Assertions.assertEquals(RaiPolicyMode.ASYNCHRONOUS_FILTER, model.value().get(0).properties().mode());
        Assertions.assertEquals("wwqfbumlkxtrqj", model.value().get(0).properties().basePolicyName());
        Assertions.assertEquals("mbtxhwgf", model.value().get(0).properties().contentFilters().get(0).name());
        Assertions.assertEquals(true, model.value().get(0).properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.MEDIUM,
            model.value().get(0).properties().contentFilters().get(0).severityThreshold());
        Assertions.assertEquals(true, model.value().get(0).properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            model.value().get(0).properties().contentFilters().get(0).source());
        Assertions.assertEquals("yjkqabqgzslesjcb",
            model.value().get(0).properties().customBlocklists().get(0).blocklistName());
        Assertions.assertEquals(true, model.value().get(0).properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT,
            model.value().get(0).properties().customBlocklists().get(0).source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
