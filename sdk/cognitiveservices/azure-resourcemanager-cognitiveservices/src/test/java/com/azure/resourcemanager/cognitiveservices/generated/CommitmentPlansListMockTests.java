// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"xreuquowtlj\",\"kind\":\"whreagkhyxvrq\",\"sku\":{\"name\":\"bczsulmdgglmepjp\",\"tier\":\"Premium\",\"size\":\"kgsangpszng\",\"family\":\"p\",\"capacity\":1121017868},\"tags\":{\"adyedmzrgjfok\":\"ecjujcng\",\"itpkpztrgdg\":\"ubn\"},\"location\":\"coqra\",\"properties\":{\"provisioningState\":\"Succeeded\",\"commitmentPlanGuid\":\"xpqitweialwvs\",\"hostingModel\":\"Web\",\"planType\":\"z\",\"current\":{\"tier\":\"qtyltcoqcujp\",\"count\":982712312,\"quota\":{\"quantity\":4738260490483677532,\"unit\":\"jkmvbi\"},\"startDate\":\"jofqcvovjufycs\",\"endDate\":\"lbemyej\"},\"autoRenew\":false,\"next\":{\"tier\":\"egthortudawl\",\"count\":315164403,\"quota\":{\"quantity\":5663138110219601009,\"unit\":\"pptcbgqnzmnhii\"},\"startDate\":\"alwcjgckbb\",\"endDate\":\"cgzpraoxnyu\"},\"last\":{\"tier\":\"tsgftipwcxbyubh\",\"count\":953608093,\"quota\":{\"quantity\":8015294080621569665,\"unit\":\"pnuhzafccnu\"},\"startDate\":\"i\",\"endDate\":\"yl\"},\"provisioningIssues\":[\"gvxvatv\",\"rkdlb\",\"bqxvhcsyhzlwxae\"]},\"id\":\"ov\",\"name\":\"rexdndsbd\",\"type\":\"ead\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommitmentPlan> response
            = manager.commitmentPlans().list("qqug", "rftb", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("whreagkhyxvrq", response.iterator().next().kind());
        Assertions.assertEquals("bczsulmdgglmepjp", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals("kgsangpszng", response.iterator().next().sku().size());
        Assertions.assertEquals("p", response.iterator().next().sku().family());
        Assertions.assertEquals(1121017868, response.iterator().next().sku().capacity());
        Assertions.assertEquals("ecjujcng", response.iterator().next().tags().get("adyedmzrgjfok"));
        Assertions.assertEquals("coqra", response.iterator().next().location());
        Assertions.assertEquals("xpqitweialwvs", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.WEB, response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("z", response.iterator().next().properties().planType());
        Assertions.assertEquals("qtyltcoqcujp", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(982712312, response.iterator().next().properties().current().count());
        Assertions.assertFalse(response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("egthortudawl", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(315164403, response.iterator().next().properties().next().count());
    }
}
