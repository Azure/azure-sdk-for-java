// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"zdpv\",\"kind\":\"ojhpcnabxzfsn\",\"sku\":{\"name\":\"ytexvzilmhivzk\",\"tier\":\"Premium\",\"size\":\"cknrzda\",\"family\":\"skzptjxulweucyr\",\"capacity\":1704164450},\"tags\":{\"n\":\"ehmcgcje\",\"qnttmbq\":\"ehokamvfej\",\"kpysthhzagjf\":\"abzfivf\",\"ejgvkvebaqszllrz\":\"yyrlhgenu\"},\"location\":\"mmdqgmihzpimc\",\"properties\":{\"provisioningState\":\"Failed\",\"commitmentPlanGuid\":\"t\",\"hostingModel\":\"ProvisionedWeb\",\"planType\":\"logxsvtzar\",\"current\":{\"tier\":\"qnsqktcmb\",\"count\":69409464,\"quota\":{\"quantity\":8587009995008809809,\"unit\":\"kybtglwkzpgajsqj\"},\"startDate\":\"mqbmfuvqarwz\",\"endDate\":\"qreblui\"},\"autoRenew\":true,\"next\":{\"tier\":\"sfgtdmbvxekra\",\"count\":1209175157,\"quota\":{\"quantity\":2149845324732944468,\"unit\":\"twaokb\"},\"startDate\":\"lyttaaknwfr\",\"endDate\":\"bsmhpdujdiga\"},\"last\":{\"tier\":\"ekscbctnanqimwbz\",\"count\":882308602,\"quota\":{\"quantity\":1030326789921758335,\"unit\":\"awnsnlaimou\"},\"startDate\":\"ksqmudmfcoibi\",\"endDate\":\"iuswswj\"},\"provisioningIssues\":[\"qsj\"]},\"id\":\"tqqvy\",\"name\":\"scyrfwbivqv\",\"type\":\"gfuyzwv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommitmentPlan> response
            = manager.commitmentPlans().list("slskkz", "xv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ojhpcnabxzfsn", response.iterator().next().kind());
        Assertions.assertEquals("ytexvzilmhivzk", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals("cknrzda", response.iterator().next().sku().size());
        Assertions.assertEquals("skzptjxulweucyr", response.iterator().next().sku().family());
        Assertions.assertEquals(1704164450, response.iterator().next().sku().capacity());
        Assertions.assertEquals("ehmcgcje", response.iterator().next().tags().get("n"));
        Assertions.assertEquals("mmdqgmihzpimc", response.iterator().next().location());
        Assertions.assertEquals("t", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("logxsvtzar", response.iterator().next().properties().planType());
        Assertions.assertEquals("qnsqktcmb", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(69409464, response.iterator().next().properties().current().count());
        Assertions.assertTrue(response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("sfgtdmbvxekra", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(1209175157, response.iterator().next().properties().next().count());
    }
}
