// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.CustomBlocklistConfig;
import com.azure.resourcemanager.cognitiveservices.models.CustomTopicConfig;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicy;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentFilter;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiPoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"kb\",\"tags\":{\"vqcpdwjgquxw\":\"mgmqfmef\",\"dkdcdjhunhg\":\"ysla\"},\"properties\":{\"type\":\"SystemManaged\",\"mode\":\"Blocking\",\"basePolicyName\":\"rnquoxso\",\"contentFilters\":[{\"name\":\"imseobf\",\"enabled\":true,\"severityThreshold\":\"Medium\",\"blocking\":true,\"source\":\"Completion\"},{\"name\":\"zmmx\",\"enabled\":false,\"severityThreshold\":\"High\",\"blocking\":true,\"source\":\"Prompt\"}],\"customBlocklists\":[{\"source\":\"Prompt\",\"blocklistName\":\"bjvbzinzab\",\"blocking\":true},{\"source\":\"Prompt\",\"blocklistName\":\"jsvlpg\",\"blocking\":true}],\"customTopics\":[{\"source\":\"Completion\",\"topicName\":\"qidoyzltgi\",\"blocking\":true},{\"source\":\"Prompt\",\"topicName\":\"epiaeapfsergd\",\"blocking\":false}]},\"id\":\"nacyheqwb\",\"name\":\"qq\",\"type\":\"cjubkhjozfymcwm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        RaiPolicy response = manager.raiPolicies()
            .define("lusnawmhhgzotfr")
            .withExistingAccount("kmhmnulwempdc", "frhjulrsulwzp")
            .withTags(mapOf("y", "hctxbxmolpcqyd", "rjeizik", "vskiczd", "ycqsxr", "qaboohxbms", "ewuyqa", "d"))
            .withProperties(new RaiPolicyProperties().withMode(RaiPolicyMode.ASYNCHRONOUS_FILTER)
                .withBasePolicyName("ejkbvhhdaurgho")
                .withContentFilters(Arrays.asList(
                    new RaiPolicyContentFilter().withName("xb")
                        .withEnabled(false)
                        .withSeverityThreshold(ContentLevel.MEDIUM)
                        .withBlocking(false)
                        .withSource(RaiPolicyContentSource.COMPLETION),
                    new RaiPolicyContentFilter().withName("qxrkdknko")
                        .withEnabled(true)
                        .withSeverityThreshold(ContentLevel.MEDIUM)
                        .withBlocking(false)
                        .withSource(RaiPolicyContentSource.COMPLETION),
                    new RaiPolicyContentFilter().withName("tzamicbig")
                        .withEnabled(false)
                        .withSeverityThreshold(ContentLevel.HIGH)
                        .withBlocking(false)
                        .withSource(RaiPolicyContentSource.COMPLETION)))
                .withCustomBlocklists(Arrays.asList(new CustomBlocklistConfig().withBlocklistName("ai")
                    .withBlocking(false)
                    .withSource(RaiPolicyContentSource.COMPLETION)))
                .withCustomTopics(Arrays.asList(new CustomTopicConfig().withTopicName("jbedpfixlhupmomi")
                    .withBlocking(true)
                    .withSource(RaiPolicyContentSource.COMPLETION))))
            .create();

        Assertions.assertEquals("mgmqfmef", response.tags().get("vqcpdwjgquxw"));
        Assertions.assertEquals(RaiPolicyMode.BLOCKING, response.properties().mode());
        Assertions.assertEquals("rnquoxso", response.properties().basePolicyName());
        Assertions.assertEquals("imseobf", response.properties().contentFilters().get(0).name());
        Assertions.assertTrue(response.properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.MEDIUM, response.properties().contentFilters().get(0).severityThreshold());
        Assertions.assertTrue(response.properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            response.properties().contentFilters().get(0).source());
        Assertions.assertEquals("bjvbzinzab", response.properties().customBlocklists().get(0).blocklistName());
        Assertions.assertTrue(response.properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT,
            response.properties().customBlocklists().get(0).source());
        Assertions.assertEquals("qidoyzltgi", response.properties().customTopics().get(0).topicName());
        Assertions.assertTrue(response.properties().customTopics().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            response.properties().customTopics().get(0).source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
