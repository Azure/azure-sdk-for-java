// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentPlanInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"uartrhunlpiryky\",\"kind\":\"dzfqivjreuy\",\"sku\":{\"name\":\"bmnwa\",\"tier\":\"Enterprise\",\"size\":\"xoe\",\"family\":\"nqlnfwmyymvqd\",\"capacity\":1716217003},\"tags\":{\"rcssbzhddubbnq\":\"ckdvez\",\"h\":\"b\"},\"location\":\"lehpavawu\",\"properties\":{\"provisioningState\":\"Accepted\",\"commitmentPlanGuid\":\"iogqgdminictte\",\"hostingModel\":\"ConnectedContainer\",\"planType\":\"iygspnbonhpczyk\",\"current\":{\"tier\":\"p\",\"count\":2044699844,\"quota\":{\"quantity\":5555491309091468333,\"unit\":\"chkhufm\"},\"startDate\":\"umqy\",\"endDate\":\"ydzulodsaeuzan\"},\"autoRenew\":true,\"next\":{\"tier\":\"senwphpzf\",\"count\":1086111273,\"quota\":{\"quantity\":1248406070219083358,\"unit\":\"ftujwjjufw\"},\"startDate\":\"qrkuor\",\"endDate\":\"ssruqnmdvhazcvj\"},\"last\":{\"tier\":\"qswbqerzwx\",\"count\":959013845,\"quota\":{\"quantity\":4620140496237367979,\"unit\":\"kvlbpktgdstyoua\"},\"startDate\":\"ewres\",\"endDate\":\"owegmmutey\"},\"provisioningIssues\":[\"guqigijiitns\",\"xlzdesygrijwa\",\"ufanray\",\"fueqfrojs\"]},\"id\":\"dgrhydkygywezs\",\"name\":\"iecafygzmxi\",\"type\":\"qv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommitmentPlan response = manager.commitmentPlans()
            .createOrUpdateWithResponse("pwzyi", "rkgwltxeqip", "gzdyimsfayorp",
                new CommitmentPlanInner().withKind("eslabnsmjkwynq")
                    .withSku(new Sku().withName("ekqsykvwjtqpkev")
                        .withTier(SkuTier.STANDARD)
                        .withSize("jcrspxklurcclfgx")
                        .withFamily("n")
                        .withCapacity(1308141773))
                    .withTags(mapOf("igpxvkq", "posew", "dfaifyzyzeyuube", "aupxvpi", "l", "ds", "gvdihoynkrxwetwk",
                        "ytoithgygvfl"))
                    .withLocation("cy")
                    .withProperties(new CommitmentPlanProperties().withCommitmentPlanGuid("unnuzdqumoenodn")
                        .withHostingModel(HostingModel.PROVISIONED_WEB)
                        .withPlanType("hqhsknd")
                        .withCurrent(new CommitmentPeriod().withTier("qkaadlknw").withCount(1742378408))
                        .withAutoRenew(true)
                        .withNext(new CommitmentPeriod().withTier("tuowogtgitsqh").withCount(175618914))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("dzfqivjreuy", response.kind());
        Assertions.assertEquals("bmnwa", response.sku().name());
        Assertions.assertEquals(SkuTier.ENTERPRISE, response.sku().tier());
        Assertions.assertEquals("xoe", response.sku().size());
        Assertions.assertEquals("nqlnfwmyymvqd", response.sku().family());
        Assertions.assertEquals(1716217003, response.sku().capacity());
        Assertions.assertEquals("ckdvez", response.tags().get("rcssbzhddubbnq"));
        Assertions.assertEquals("lehpavawu", response.location());
        Assertions.assertEquals("iogqgdminictte", response.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.CONNECTED_CONTAINER, response.properties().hostingModel());
        Assertions.assertEquals("iygspnbonhpczyk", response.properties().planType());
        Assertions.assertEquals("p", response.properties().current().tier());
        Assertions.assertEquals(2044699844, response.properties().current().count());
        Assertions.assertTrue(response.properties().autoRenew());
        Assertions.assertEquals("senwphpzf", response.properties().next().tier());
        Assertions.assertEquals(1086111273, response.properties().next().count());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
