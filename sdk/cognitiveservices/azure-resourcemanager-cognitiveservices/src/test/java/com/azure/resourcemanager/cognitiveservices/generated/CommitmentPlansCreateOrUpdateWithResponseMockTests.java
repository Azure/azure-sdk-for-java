// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentPlanInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"etag\":\"hvmaxgnuyeamcmhu\",\"kind\":\"jecehokwc\",\"sku\":{\"name\":\"twloesqr\",\"tier\":\"Standard\",\"size\":\"bnyrukoila\",\"family\":\"duwjleipjlhwy\",\"capacity\":400227130},\"tags\":{\"thqkkwhbgxvellv\":\"z\",\"mnitmujd\":\"lnx\",\"lyymffhmjpddny\":\"vm\",\"mzjqrbr\":\"fzuvrzmz\"},\"location\":\"nmdyfoebo\",\"properties\":{\"provisioningState\":\"Deleting\",\"commitmentPlanGuid\":\"g\",\"hostingModel\":\"ProvisionedWeb\",\"planType\":\"o\",\"current\":{\"tier\":\"jtnqjil\",\"count\":2083894224,\"quota\":{\"quantity\":3143981507699087100,\"unit\":\"qsyrilmhxdqao\"},\"startDate\":\"ylnkkbjpjvlywltm\",\"endDate\":\"obbjwhlwy\"},\"autoRenew\":true,\"next\":{\"tier\":\"ocrdzgczeunt\",\"count\":747096318,\"quota\":{\"quantity\":7913165411093776533,\"unit\":\"tiekoifuvnyttz\"},\"startDate\":\"xgyrihlgmgbehlqt\",\"endDate\":\"rflknd\"},\"last\":{\"tier\":\"pgfjo\",\"count\":1968957759,\"quota\":{\"quantity\":5021380682185029133,\"unit\":\"fhipx\"},\"startDate\":\"sabvcip\",\"endDate\":\"zafczuumljci\"},\"provisioningIssues\":[\"efy\",\"dvei\"]},\"id\":\"tjnsx\",\"name\":\"ajlnsjhwjuyxx\",\"type\":\"xqvmvuay\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        CommitmentPlan response = manager.commitmentPlans()
            .createOrUpdateWithResponse("yoeojhtollhs", "idmytzln", "lxpnovyoanf",
                new CommitmentPlanInner().withKind("gaeukyawohpm")
                    .withSku(new Sku().withName("qnucs")
                        .withTier(SkuTier.BASIC)
                        .withSize("i")
                        .withFamily("jtdlp")
                        .withCapacity(2047376191))
                    .withTags(mapOf("cpuo", "gazlsvbz", "wjcciklhsy", "e"))
                    .withLocation("rdrenxo")
                    .withProperties(new CommitmentPlanProperties().withCommitmentPlanGuid("h")
                        .withHostingModel(HostingModel.CONNECTED_CONTAINER)
                        .withPlanType("vdlhydwbdbfgr")
                        .withCurrent(new CommitmentPeriod().withTier("nytjlk").withCount(1788916673))
                        .withAutoRenew(true)
                        .withNext(new CommitmentPeriod().withTier("gravaqogfkbebauz").withCount(1334524940))),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("jecehokwc", response.kind());
        Assertions.assertEquals("twloesqr", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("bnyrukoila", response.sku().size());
        Assertions.assertEquals("duwjleipjlhwy", response.sku().family());
        Assertions.assertEquals(400227130, response.sku().capacity());
        Assertions.assertEquals("z", response.tags().get("thqkkwhbgxvellv"));
        Assertions.assertEquals("nmdyfoebo", response.location());
        Assertions.assertEquals("g", response.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.PROVISIONED_WEB, response.properties().hostingModel());
        Assertions.assertEquals("o", response.properties().planType());
        Assertions.assertEquals("jtnqjil", response.properties().current().tier());
        Assertions.assertEquals(2083894224, response.properties().current().count());
        Assertions.assertTrue(response.properties().autoRenew());
        Assertions.assertEquals("ocrdzgczeunt", response.properties().next().tier());
        Assertions.assertEquals(747096318, response.properties().next().count());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
