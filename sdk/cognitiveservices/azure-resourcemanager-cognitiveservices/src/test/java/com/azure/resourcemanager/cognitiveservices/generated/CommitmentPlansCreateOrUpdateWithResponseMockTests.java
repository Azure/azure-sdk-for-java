// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CommitmentPlanInner;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPeriod;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlanProperties;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CommitmentPlansCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"etag\":\"orxvxcjzhqiz\",\"kind\":\"pxtgqscjav\",\"sku\":{\"name\":\"juhdqazkmtgguwpi\",\"tier\":\"Basic\",\"size\":\"civmmg\",\"family\":\"cf\",\"capacity\":1456716709},\"tags\":{\"fvpgshoxgsg\":\"kneuvyinzqo\"},\"location\":\"fgzdjtxvz\",\"properties\":{\"provisioningState\":\"Deleting\",\"commitmentPlanGuid\":\"gaqvlgafcqusrd\",\"hostingModel\":\"Web\",\"planType\":\"wsdtutnwl\",\"current\":{\"tier\":\"cvuzhyrmewipmve\",\"count\":2074046475,\"startDate\":\"uqgsj\",\"endDate\":\"undxgketw\"},\"autoRenew\":false,\"next\":{\"tier\":\"hfjmhvv\",\"count\":1386736873,\"startDate\":\"mun\",\"endDate\":\"sx\"},\"last\":{\"tier\":\"fbuzjyihs\",\"count\":554244740,\"startDate\":\"dyp\",\"endDate\":\"yue\"}},\"id\":\"slynsqyrpfoo\",\"name\":\"rlttymsjnygqdnfw\",\"type\":\"zdzgtilaxhnfhqly\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CognitiveServicesManager manager =
            CognitiveServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        CommitmentPlan response =
            manager
                .commitmentPlans()
                .createOrUpdateWithResponse(
                    "brta",
                    "metttwgd",
                    "lqxihhrmooiz",
                    new CommitmentPlanInner()
                        .withKind("y")
                        .withSku(
                            new Sku()
                                .withName("etoge")
                                .withTier(SkuTier.STANDARD)
                                .withSize("slhvnhlab")
                                .withFamily("nk")
                                .withCapacity(1176259759))
                        .withTags(mapOf("rgaehvvibrxjj", "b"))
                        .withLocation("oqbeitpkxzt")
                        .withProperties(
                            new CommitmentPlanProperties()
                                .withCommitmentPlanGuid("lftidgfcwqmpim")
                                .withHostingModel(HostingModel.DISCONNECTED_CONTAINER)
                                .withPlanType("hemjy")
                                .withCurrent(new CommitmentPeriod().withTier("uj").withCount(84498484))
                                .withAutoRenew(true)
                                .withNext(new CommitmentPeriod().withTier("nvkcdmxzrpoa").withCount(990046461))),
                    com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("pxtgqscjav", response.kind());
        Assertions.assertEquals("juhdqazkmtgguwpi", response.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.sku().tier());
        Assertions.assertEquals("civmmg", response.sku().size());
        Assertions.assertEquals("cf", response.sku().family());
        Assertions.assertEquals(1456716709, response.sku().capacity());
        Assertions.assertEquals("kneuvyinzqo", response.tags().get("fvpgshoxgsg"));
        Assertions.assertEquals("fgzdjtxvz", response.location());
        Assertions.assertEquals("gaqvlgafcqusrd", response.properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.WEB, response.properties().hostingModel());
        Assertions.assertEquals("wsdtutnwl", response.properties().planType());
        Assertions.assertEquals("cvuzhyrmewipmve", response.properties().current().tier());
        Assertions.assertEquals(2074046475, response.properties().current().count());
        Assertions.assertEquals(false, response.properties().autoRenew());
        Assertions.assertEquals("hfjmhvv", response.properties().next().tier());
        Assertions.assertEquals(1386736873, response.properties().next().count());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
