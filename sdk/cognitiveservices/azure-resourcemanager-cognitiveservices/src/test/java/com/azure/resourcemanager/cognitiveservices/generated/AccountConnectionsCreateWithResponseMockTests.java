// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2BasicResource;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AccountConnectionsCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"SalesforceServiceCloud\",\"createdByWorkspaceArmId\":\"txlcsk\",\"error\":\"e\",\"expiryTime\":\"2021-01-30T10:41:38Z\",\"group\":\"NoSQL\",\"isSharedToAll\":false,\"metadata\":{\"erpi\":\"bgrdcgubsrtmdyl\",\"zfc\":\"ttjzg\",\"gvtshu\":\"fpfbodetres\"},\"peRequirement\":\"NotRequired\",\"peStatus\":\"NotApplicable\",\"sharedUserList\":[\"muqkevzgjypanhx\",\"pdxxzetwwz\"],\"target\":\"otnxlkfhglh\",\"useWorkspaceManagedIdentity\":true},\"id\":\"x\",\"name\":\"wecr\",\"type\":\"nhpcselqx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ConnectionPropertiesV2BasicResource response = manager.accountConnections()
            .define("bdxzfxnxmlbmu")
            .withExistingAccount("eu", "rf")
            .withProperties(new ConnectionPropertiesV2().withCategory(ConnectionCategory.AMAZON_REDSHIFT)
                .withError("wzjnufz")
                .withExpiryTime(OffsetDateTime.parse("2021-04-17T14:22:13Z"))
                .withIsSharedToAll(false)
                .withMetadata(mapOf("edzuub", "bzrtf", "xmtyj", "tvgj"))
                .withPeRequirement(ManagedPERequirement.REQUIRED)
                .withPeStatus(ManagedPEStatus.ACTIVE)
                .withSharedUserList(Arrays.asList("wobtdphti", "sffofwanmhksca", "w"))
                .withTarget("cgwdfriwgybjp")
                .withUseWorkspaceManagedIdentity(false))
            .create();

        Assertions.assertEquals(ConnectionCategory.SALESFORCE_SERVICE_CLOUD, response.properties().category());
        Assertions.assertEquals("e", response.properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-30T10:41:38Z"), response.properties().expiryTime());
        Assertions.assertFalse(response.properties().isSharedToAll());
        Assertions.assertEquals("bgrdcgubsrtmdyl", response.properties().metadata().get("erpi"));
        Assertions.assertEquals(ManagedPERequirement.NOT_REQUIRED, response.properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.NOT_APPLICABLE, response.properties().peStatus());
        Assertions.assertEquals("muqkevzgjypanhx", response.properties().sharedUserList().get(0));
        Assertions.assertEquals("otnxlkfhglh", response.properties().target());
        Assertions.assertTrue(response.properties().useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
