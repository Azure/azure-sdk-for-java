// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.RaiContentFilter;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RaiContentFiltersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"name\":\"nzqgxxgfbbmtlpq\",\"isMultiLevelFilter\":false,\"source\":\"Completion\"},\"id\":\"iprnzcalincry\",\"name\":\"xzxaqzibmqimiym\",\"type\":\"ruqg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RaiContentFilter> response
            = manager.raiContentFilters().list("jajqmatxjt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("nzqgxxgfbbmtlpq", response.iterator().next().properties().name());
        Assertions.assertEquals(false, response.iterator().next().properties().isMultiLevelFilter());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION, response.iterator().next().properties().source());
    }
}
