// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiPolicyInner;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.CustomBlocklistConfig;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentFilter;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"vwxnbkfe\",\"tags\":{\"g\":\"scyhwz\",\"vp\":\"rujbzbomvzzbtdc\",\"n\":\"iyujviylwdshfs\",\"rymsgaojfmw\":\"bgye\"},\"properties\":{\"type\":\"UserManaged\",\"mode\":\"Default\",\"basePolicyName\":\"hirctymoxoftpipi\",\"contentFilters\":[{\"name\":\"uh\",\"enabled\":true,\"severityThreshold\":\"Low\",\"blocking\":true,\"source\":\"Prompt\"},{\"name\":\"yuspskas\",\"enabled\":false,\"severityThreshold\":\"Medium\",\"blocking\":true,\"source\":\"Completion\"},{\"name\":\"ulucv\",\"enabled\":true,\"severityThreshold\":\"Low\",\"blocking\":false,\"source\":\"Completion\"},{\"name\":\"xurisjnhnyt\",\"enabled\":false,\"severityThreshold\":\"High\",\"blocking\":true,\"source\":\"Completion\"}],\"customBlocklists\":[{\"source\":\"Completion\",\"blocklistName\":\"wp\",\"blocking\":false}]},\"id\":\"utr\",\"name\":\"jupauut\",\"type\":\"woqhihe\"}")
            .toObject(RaiPolicyInner.class);
        Assertions.assertEquals("scyhwz", model.tags().get("g"));
        Assertions.assertEquals(RaiPolicyMode.DEFAULT, model.properties().mode());
        Assertions.assertEquals("hirctymoxoftpipi", model.properties().basePolicyName());
        Assertions.assertEquals("uh", model.properties().contentFilters().get(0).name());
        Assertions.assertTrue(model.properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.LOW, model.properties().contentFilters().get(0).severityThreshold());
        Assertions.assertTrue(model.properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.properties().contentFilters().get(0).source());
        Assertions.assertEquals("wp", model.properties().customBlocklists().get(0).blocklistName());
        Assertions.assertFalse(model.properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            model.properties().customBlocklists().get(0).source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiPolicyInner model = new RaiPolicyInner()
            .withTags(mapOf("g", "scyhwz", "vp", "rujbzbomvzzbtdc", "n", "iyujviylwdshfs", "rymsgaojfmw", "bgye"))
            .withProperties(new RaiPolicyProperties().withMode(RaiPolicyMode.DEFAULT)
                .withBasePolicyName("hirctymoxoftpipi")
                .withContentFilters(Arrays.asList(
                    new RaiPolicyContentFilter().withName("uh")
                        .withEnabled(true)
                        .withSeverityThreshold(ContentLevel.LOW)
                        .withBlocking(true)
                        .withSource(RaiPolicyContentSource.PROMPT),
                    new RaiPolicyContentFilter().withName("yuspskas")
                        .withEnabled(false)
                        .withSeverityThreshold(ContentLevel.MEDIUM)
                        .withBlocking(true)
                        .withSource(RaiPolicyContentSource.COMPLETION),
                    new RaiPolicyContentFilter().withName("ulucv")
                        .withEnabled(true)
                        .withSeverityThreshold(ContentLevel.LOW)
                        .withBlocking(false)
                        .withSource(RaiPolicyContentSource.COMPLETION),
                    new RaiPolicyContentFilter().withName("xurisjnhnyt")
                        .withEnabled(false)
                        .withSeverityThreshold(ContentLevel.HIGH)
                        .withBlocking(true)
                        .withSource(RaiPolicyContentSource.COMPLETION)))
                .withCustomBlocklists(Arrays.asList(new CustomBlocklistConfig().withBlocklistName("wp")
                    .withBlocking(false)
                    .withSource(RaiPolicyContentSource.COMPLETION))));
        model = BinaryData.fromObject(model).toObject(RaiPolicyInner.class);
        Assertions.assertEquals("scyhwz", model.tags().get("g"));
        Assertions.assertEquals(RaiPolicyMode.DEFAULT, model.properties().mode());
        Assertions.assertEquals("hirctymoxoftpipi", model.properties().basePolicyName());
        Assertions.assertEquals("uh", model.properties().contentFilters().get(0).name());
        Assertions.assertTrue(model.properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.LOW, model.properties().contentFilters().get(0).severityThreshold());
        Assertions.assertTrue(model.properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.properties().contentFilters().get(0).source());
        Assertions.assertEquals("wp", model.properties().customBlocklists().get(0).blocklistName());
        Assertions.assertFalse(model.properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION,
            model.properties().customBlocklists().get(0).source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
