// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiPolicyInner;
import com.azure.resourcemanager.cognitiveservices.models.ContentLevel;
import com.azure.resourcemanager.cognitiveservices.models.CustomBlocklistConfig;
import com.azure.resourcemanager.cognitiveservices.models.CustomTopicConfig;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentFilter;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyContentSource;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyMode;
import com.azure.resourcemanager.cognitiveservices.models.RaiPolicyProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RaiPolicyInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RaiPolicyInner model = BinaryData.fromString(
            "{\"etag\":\"q\",\"tags\":{\"rxcpjuisavo\":\"n\",\"ajlkatnw\":\"qdzfvazivjlfrqtt\"},\"properties\":{\"type\":\"SystemManaged\",\"mode\":\"Default\",\"basePolicyName\":\"kqqfk\",\"contentFilters\":[{\"name\":\"xkdmligo\",\"enabled\":false,\"severityThreshold\":\"Medium\",\"blocking\":true,\"source\":\"Completion\"}],\"customBlocklists\":[{\"source\":\"Prompt\",\"blocklistName\":\"u\",\"blocking\":false}],\"customTopics\":[{\"source\":\"Prompt\",\"topicName\":\"te\",\"blocking\":true}]},\"id\":\"hjxa\",\"name\":\"vvjgslor\",\"type\":\"il\"}")
            .toObject(RaiPolicyInner.class);
        Assertions.assertEquals("n", model.tags().get("rxcpjuisavo"));
        Assertions.assertEquals(RaiPolicyMode.DEFAULT, model.properties().mode());
        Assertions.assertEquals("kqqfk", model.properties().basePolicyName());
        Assertions.assertEquals("xkdmligo", model.properties().contentFilters().get(0).name());
        Assertions.assertFalse(model.properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.MEDIUM, model.properties().contentFilters().get(0).severityThreshold());
        Assertions.assertTrue(model.properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION, model.properties().contentFilters().get(0).source());
        Assertions.assertEquals("u", model.properties().customBlocklists().get(0).blocklistName());
        Assertions.assertFalse(model.properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.properties().customBlocklists().get(0).source());
        Assertions.assertEquals("te", model.properties().customTopics().get(0).topicName());
        Assertions.assertTrue(model.properties().customTopics().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.properties().customTopics().get(0).source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RaiPolicyInner model = new RaiPolicyInner().withTags(mapOf("rxcpjuisavo", "n", "ajlkatnw", "qdzfvazivjlfrqtt"))
            .withProperties(new RaiPolicyProperties().withMode(RaiPolicyMode.DEFAULT)
                .withBasePolicyName("kqqfk")
                .withContentFilters(Arrays.asList(new RaiPolicyContentFilter().withName("xkdmligo")
                    .withEnabled(false)
                    .withSeverityThreshold(ContentLevel.MEDIUM)
                    .withBlocking(true)
                    .withSource(RaiPolicyContentSource.COMPLETION)))
                .withCustomBlocklists(Arrays.asList(new CustomBlocklistConfig().withBlocklistName("u")
                    .withBlocking(false)
                    .withSource(RaiPolicyContentSource.PROMPT)))
                .withCustomTopics(Arrays.asList(new CustomTopicConfig().withTopicName("te")
                    .withBlocking(true)
                    .withSource(RaiPolicyContentSource.PROMPT))));
        model = BinaryData.fromObject(model).toObject(RaiPolicyInner.class);
        Assertions.assertEquals("n", model.tags().get("rxcpjuisavo"));
        Assertions.assertEquals(RaiPolicyMode.DEFAULT, model.properties().mode());
        Assertions.assertEquals("kqqfk", model.properties().basePolicyName());
        Assertions.assertEquals("xkdmligo", model.properties().contentFilters().get(0).name());
        Assertions.assertFalse(model.properties().contentFilters().get(0).enabled());
        Assertions.assertEquals(ContentLevel.MEDIUM, model.properties().contentFilters().get(0).severityThreshold());
        Assertions.assertTrue(model.properties().contentFilters().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.COMPLETION, model.properties().contentFilters().get(0).source());
        Assertions.assertEquals("u", model.properties().customBlocklists().get(0).blocklistName());
        Assertions.assertFalse(model.properties().customBlocklists().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.properties().customBlocklists().get(0).source());
        Assertions.assertEquals("te", model.properties().customTopics().get(0).topicName());
        Assertions.assertTrue(model.properties().customTopics().get(0).blocking());
        Assertions.assertEquals(RaiPolicyContentSource.PROMPT, model.properties().customTopics().get(0).source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
