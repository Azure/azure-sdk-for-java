// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.PatchResourceTagsAndSku;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PatchResourceTagsAndSkuTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchResourceTagsAndSku model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"sz\",\"tier\":\"Basic\",\"size\":\"sbzkf\",\"family\":\"eyvpnqicvinvkj\",\"capacity\":611015935},\"tags\":{\"paztzpofncck\":\"buukzclewyhml\",\"qa\":\"yfzqwhxxbu\",\"lxorjaltolmncws\":\"zfeqztppri\",\"ucqdpfuvglsb\":\"bqwcsdbnwdcf\"}}")
            .toObject(PatchResourceTagsAndSku.class);
        Assertions.assertEquals("buukzclewyhml", model.tags().get("paztzpofncck"));
        Assertions.assertEquals("sz", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("sbzkf", model.sku().size());
        Assertions.assertEquals("eyvpnqicvinvkj", model.sku().family());
        Assertions.assertEquals(611015935, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchResourceTagsAndSku model = new PatchResourceTagsAndSku()
            .withTags(mapOf("paztzpofncck", "buukzclewyhml", "qa", "yfzqwhxxbu", "lxorjaltolmncws", "zfeqztppri",
                "ucqdpfuvglsb", "bqwcsdbnwdcf"))
            .withSku(new Sku().withName("sz")
                .withTier(SkuTier.BASIC)
                .withSize("sbzkf")
                .withFamily("eyvpnqicvinvkj")
                .withCapacity(611015935));
        model = BinaryData.fromObject(model).toObject(PatchResourceTagsAndSku.class);
        Assertions.assertEquals("buukzclewyhml", model.tags().get("paztzpofncck"));
        Assertions.assertEquals("sz", model.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, model.sku().tier());
        Assertions.assertEquals("sbzkf", model.sku().size());
        Assertions.assertEquals("eyvpnqicvinvkj", model.sku().family());
        Assertions.assertEquals(611015935, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
