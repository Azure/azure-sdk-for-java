// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.models.PatchResourceTagsAndSku;
import com.azure.resourcemanager.cognitiveservices.models.Sku;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PatchResourceTagsAndSkuTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchResourceTagsAndSku model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"maequiahxicslfa\",\"tier\":\"Free\",\"size\":\"iyylhalnswhccsp\",\"family\":\"aivwitqscywu\",\"capacity\":1839231877},\"tags\":{\"i\":\"uhczbwemh\",\"wmsweypqwd\":\"sbrgz\"}}")
            .toObject(PatchResourceTagsAndSku.class);
        Assertions.assertEquals("uhczbwemh", model.tags().get("i"));
        Assertions.assertEquals("maequiahxicslfa", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("iyylhalnswhccsp", model.sku().size());
        Assertions.assertEquals("aivwitqscywu", model.sku().family());
        Assertions.assertEquals(1839231877, model.sku().capacity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchResourceTagsAndSku model
            = new PatchResourceTagsAndSku().withTags(mapOf("i", "uhczbwemh", "wmsweypqwd", "sbrgz"))
                .withSku(new Sku().withName("maequiahxicslfa")
                    .withTier(SkuTier.FREE)
                    .withSize("iyylhalnswhccsp")
                    .withFamily("aivwitqscywu")
                    .withCapacity(1839231877));
        model = BinaryData.fromObject(model).toObject(PatchResourceTagsAndSku.class);
        Assertions.assertEquals("uhczbwemh", model.tags().get("i"));
        Assertions.assertEquals("maequiahxicslfa", model.sku().name());
        Assertions.assertEquals(SkuTier.FREE, model.sku().tier());
        Assertions.assertEquals("iyylhalnswhccsp", model.sku().size());
        Assertions.assertEquals("aivwitqscywu", model.sku().family());
        Assertions.assertEquals(1839231877, model.sku().capacity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
