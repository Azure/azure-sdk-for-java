// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.cognitiveservices.fluent.models.ConnectionPropertiesV2BasicResourceInner;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionCategory;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPERequirement;
import com.azure.resourcemanager.cognitiveservices.models.ManagedPEStatus;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectionPropertiesV2BasicResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectionPropertiesV2BasicResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"authType\":\"ConnectionPropertiesV2\",\"category\":\"GenericContainerRegistry\",\"createdByWorkspaceArmId\":\"zdq\",\"error\":\"hcspo\",\"expiryTime\":\"2021-07-30T02:24Z\",\"group\":\"AzureAI\",\"isSharedToAll\":false,\"metadata\":{\"oichdlpnfpubnt\":\"etgbebjfulb\",\"aelcat\":\"batzviqsows\",\"cwmjvlg\":\"cjuhplrvkm\"},\"peRequirement\":\"NotRequired\",\"peStatus\":\"Inactive\",\"sharedUserList\":[\"y\",\"izrzb\"],\"target\":\"sfxsf\",\"useWorkspaceManagedIdentity\":false},\"id\":\"vtmva\",\"name\":\"bwidql\",\"type\":\"hukoveofizrv\"}")
            .toObject(ConnectionPropertiesV2BasicResourceInner.class);
        Assertions.assertEquals(ConnectionCategory.GENERIC_CONTAINER_REGISTRY, model.properties().category());
        Assertions.assertEquals("hcspo", model.properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T02:24Z"), model.properties().expiryTime());
        Assertions.assertFalse(model.properties().isSharedToAll());
        Assertions.assertEquals("etgbebjfulb", model.properties().metadata().get("oichdlpnfpubnt"));
        Assertions.assertEquals(ManagedPERequirement.NOT_REQUIRED, model.properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.properties().peStatus());
        Assertions.assertEquals("y", model.properties().sharedUserList().get(0));
        Assertions.assertEquals("sfxsf", model.properties().target());
        Assertions.assertFalse(model.properties().useWorkspaceManagedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectionPropertiesV2BasicResourceInner model = new ConnectionPropertiesV2BasicResourceInner()
            .withProperties(new ConnectionPropertiesV2().withCategory(ConnectionCategory.GENERIC_CONTAINER_REGISTRY)
                .withError("hcspo")
                .withExpiryTime(OffsetDateTime.parse("2021-07-30T02:24Z"))
                .withIsSharedToAll(false)
                .withMetadata(mapOf("oichdlpnfpubnt", "etgbebjfulb", "aelcat", "batzviqsows", "cwmjvlg", "cjuhplrvkm"))
                .withPeRequirement(ManagedPERequirement.NOT_REQUIRED)
                .withPeStatus(ManagedPEStatus.INACTIVE)
                .withSharedUserList(Arrays.asList("y", "izrzb"))
                .withTarget("sfxsf")
                .withUseWorkspaceManagedIdentity(false));
        model = BinaryData.fromObject(model).toObject(ConnectionPropertiesV2BasicResourceInner.class);
        Assertions.assertEquals(ConnectionCategory.GENERIC_CONTAINER_REGISTRY, model.properties().category());
        Assertions.assertEquals("hcspo", model.properties().error());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-30T02:24Z"), model.properties().expiryTime());
        Assertions.assertFalse(model.properties().isSharedToAll());
        Assertions.assertEquals("etgbebjfulb", model.properties().metadata().get("oichdlpnfpubnt"));
        Assertions.assertEquals(ManagedPERequirement.NOT_REQUIRED, model.properties().peRequirement());
        Assertions.assertEquals(ManagedPEStatus.INACTIVE, model.properties().peStatus());
        Assertions.assertEquals("y", model.properties().sharedUserList().get(0));
        Assertions.assertEquals("sfxsf", model.properties().target());
        Assertions.assertFalse(model.properties().useWorkspaceManagedIdentity());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
