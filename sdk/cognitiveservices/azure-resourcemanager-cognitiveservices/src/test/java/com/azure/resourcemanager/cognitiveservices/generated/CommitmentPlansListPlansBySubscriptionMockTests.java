// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListPlansBySubscriptionMockTests {
    @Test
    public void testListPlansBySubscription() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"hmzyqbhdvafjrqpj\",\"kind\":\"r\",\"sku\":{\"name\":\"crgaxwmzwdf\",\"tier\":\"Premium\",\"size\":\"z\",\"family\":\"pdltbq\",\"capacity\":755174875},\"tags\":{\"aetgzdgvpyigd\":\"gxx\"},\"location\":\"qilzdc\",\"properties\":{\"provisioningState\":\"Succeeded\",\"commitmentPlanGuid\":\"edxn\",\"hostingModel\":\"DisconnectedContainer\",\"planType\":\"i\",\"current\":{\"tier\":\"urwwgilfjq\",\"count\":1055233844,\"quota\":{\"quantity\":9152432764348997992,\"unit\":\"xdcvjwcy\"},\"startDate\":\"akeciqchx\",\"endDate\":\"uicdsiwdfmmpzhzz\"},\"autoRenew\":true,\"next\":{\"tier\":\"gyngydgrpxncak\",\"count\":1335870077,\"quota\":{\"quantity\":3330238490326298351,\"unit\":\"kclamgglvlmf\"},\"startDate\":\"doqey\",\"endDate\":\"ltygxhqfgqkayej\"},\"last\":{\"tier\":\"lgflwfg\",\"count\":86909569,\"quota\":{\"quantity\":6249825735396794825,\"unit\":\"ceatlijjjrtvamca\"},\"startDate\":\"knxkvccxetyvkunm\",\"endDate\":\"nohikkgq\"},\"provisioningIssues\":[\"wpin\",\"edvabbxbhmedeilb\",\"ywfcfxzi\",\"zzihvwy\"]},\"id\":\"usuv\",\"name\":\"slczwciidjsllf\",\"type\":\"yvdmvx\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommitmentPlan> response
            = manager.commitmentPlans().listPlansBySubscription(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("r", response.iterator().next().kind());
        Assertions.assertEquals("crgaxwmzwdf", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals("z", response.iterator().next().sku().size());
        Assertions.assertEquals("pdltbq", response.iterator().next().sku().family());
        Assertions.assertEquals(755174875, response.iterator().next().sku().capacity());
        Assertions.assertEquals("gxx", response.iterator().next().tags().get("aetgzdgvpyigd"));
        Assertions.assertEquals("qilzdc", response.iterator().next().location());
        Assertions.assertEquals("edxn", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.DISCONNECTED_CONTAINER,
            response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("i", response.iterator().next().properties().planType());
        Assertions.assertEquals("urwwgilfjq", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(1055233844, response.iterator().next().properties().current().count());
        Assertions.assertTrue(response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("gyngydgrpxncak", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(1335870077, response.iterator().next().properties().next().count());
    }
}
