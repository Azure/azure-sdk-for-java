// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListPlansBySubscriptionMockTests {
    @Test
    public void testListPlansBySubscription() throws Exception {
        String responseStr
            = "{\"value\":[{\"etag\":\"uwdxvqzxoebwgj\",\"kind\":\"ibanb\",\"sku\":{\"name\":\"pwtzvpakloz\",\"tier\":\"Standard\",\"size\":\"rpejp\",\"family\":\"s\",\"capacity\":848316015},\"tags\":{\"boy\":\"tkgsuxunrswgkpj\",\"okhu\":\"kebhuhkslgw\"},\"location\":\"ijyzcqypzqzufgsy\",\"properties\":{\"provisioningState\":\"Deleting\",\"commitmentPlanGuid\":\"dwtfx\",\"hostingModel\":\"Web\",\"planType\":\"ayamkncfgybmxs\",\"current\":{\"tier\":\"cuul\",\"count\":101641984,\"quota\":{\"quantity\":2076792601962568528,\"unit\":\"g\"},\"startDate\":\"djuxdbdljzgd\",\"endDate\":\"cvuq\"},\"autoRenew\":false,\"next\":{\"tier\":\"rqhbjnqogdxwbsfp\",\"count\":97810383,\"quota\":{\"quantity\":5506835104010652262,\"unit\":\"ecominxojjluxxd\"},\"startDate\":\"lzzdz\",\"endDate\":\"jmueza\"},\"last\":{\"tier\":\"ribqlotokh\",\"count\":187521223,\"quota\":{\"quantity\":3002733080564037178,\"unit\":\"cqwwxwj\"},\"startDate\":\"fgwhnkbtlwljs\",\"endDate\":\"ctsnldkpwol\"},\"provisioningIssues\":[\"ubxbteogfgfiijr\"]},\"id\":\"wlefksxqceazfpxg\",\"name\":\"m\",\"type\":\"vzvluyq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CognitiveServicesManager manager = CognitiveServicesManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<CommitmentPlan> response
            = manager.commitmentPlans().listPlansBySubscription(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ibanb", response.iterator().next().kind());
        Assertions.assertEquals("pwtzvpakloz", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.iterator().next().sku().tier());
        Assertions.assertEquals("rpejp", response.iterator().next().sku().size());
        Assertions.assertEquals("s", response.iterator().next().sku().family());
        Assertions.assertEquals(848316015, response.iterator().next().sku().capacity());
        Assertions.assertEquals("tkgsuxunrswgkpj", response.iterator().next().tags().get("boy"));
        Assertions.assertEquals("ijyzcqypzqzufgsy", response.iterator().next().location());
        Assertions.assertEquals("dwtfx", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.WEB, response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("ayamkncfgybmxs", response.iterator().next().properties().planType());
        Assertions.assertEquals("cuul", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(101641984, response.iterator().next().properties().current().count());
        Assertions.assertFalse(response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("rqhbjnqogdxwbsfp", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(97810383, response.iterator().next().properties().next().count());
    }
}
