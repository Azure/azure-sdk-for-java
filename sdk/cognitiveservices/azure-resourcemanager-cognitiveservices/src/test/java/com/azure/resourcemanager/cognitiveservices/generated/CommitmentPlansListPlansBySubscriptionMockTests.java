// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListPlansBySubscriptionMockTests {
    @Test
    public void testListPlansBySubscription() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"coi\",\"kind\":\"bxncnwfepbnw\",\"sku\":{\"name\":\"m\",\"tier\":\"Free\",\"size\":\"g\",\"family\":\"bgdlfgtdysna\",\"capacity\":551280900},\"tags\":{\"qzeqyjleziunjxdf\":\"bctqhamzjrwd\",\"qa\":\"antkwcegyamlbns\"},\"location\":\"jvpilguooqja\",\"properties\":{\"provisioningState\":\"Accepted\",\"commitmentPlanGuid\":\"gueiookjbsahrtdt\",\"hostingModel\":\"DisconnectedContainer\",\"planType\":\"qacsl\",\"current\":{\"tier\":\"oebn\",\"count\":49810118,\"quota\":{\"quantity\":6124276838560398789,\"unit\":\"gdirazf\"},\"startDate\":\"ejwabmdujtmvco\",\"endDate\":\"xcmjurbu\"},\"autoRenew\":true,\"next\":{\"tier\":\"ql\",\"count\":1523023612,\"quota\":{\"quantity\":7564209254458008048,\"unit\":\"wkffdjkt\"},\"startDate\":\"sidfv\",\"endDate\":\"g\"},\"last\":{\"tier\":\"fuijtkbus\",\"count\":1183676629,\"quota\":{\"quantity\":4776693156750089504,\"unit\":\"yi\"},\"startDate\":\"sharujtj\",\"endDate\":\"xfz\"},\"provisioningIssues\":[\"ttvwkpqh\"]},\"id\":\"penuy\",\"name\":\"bqeqqekewvnqvcd\",\"type\":\"guaucmfdjwnla\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CognitiveServicesManager manager =
            CognitiveServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CommitmentPlan> response =
            manager.commitmentPlans().listPlansBySubscription(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bxncnwfepbnw", response.iterator().next().kind());
        Assertions.assertEquals("m", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.FREE, response.iterator().next().sku().tier());
        Assertions.assertEquals("g", response.iterator().next().sku().size());
        Assertions.assertEquals("bgdlfgtdysna", response.iterator().next().sku().family());
        Assertions.assertEquals(551280900, response.iterator().next().sku().capacity());
        Assertions.assertEquals("bctqhamzjrwd", response.iterator().next().tags().get("qzeqyjleziunjxdf"));
        Assertions.assertEquals("jvpilguooqja", response.iterator().next().location());
        Assertions.assertEquals("gueiookjbsahrtdt", response.iterator().next().properties().commitmentPlanGuid());
        Assertions
            .assertEquals(HostingModel.DISCONNECTED_CONTAINER, response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("qacsl", response.iterator().next().properties().planType());
        Assertions.assertEquals("oebn", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(49810118, response.iterator().next().properties().current().count());
        Assertions.assertEquals(true, response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("ql", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(1523023612, response.iterator().next().properties().next().count());
    }
}
