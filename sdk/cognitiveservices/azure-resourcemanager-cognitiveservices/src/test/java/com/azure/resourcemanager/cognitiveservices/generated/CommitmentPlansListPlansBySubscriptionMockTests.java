// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager;
import com.azure.resourcemanager.cognitiveservices.models.CommitmentPlan;
import com.azure.resourcemanager.cognitiveservices.models.HostingModel;
import com.azure.resourcemanager.cognitiveservices.models.SkuTier;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class CommitmentPlansListPlansBySubscriptionMockTests {
    @Test
    public void testListPlansBySubscription() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"etag\":\"tgdqohmcwsldriz\",\"kind\":\"pwbralllibphbqz\",\"sku\":{\"name\":\"zakakankjpdn\",\"tier\":\"Premium\",\"size\":\"joylh\",\"family\":\"muoyxprimr\",\"capacity\":2035956497},\"tags\":{\"eislstvasylwx\":\"ecj\",\"eoohguufuzboyj\":\"zaum\"},\"location\":\"hwtzolb\",\"properties\":{\"provisioningState\":\"Accepted\",\"commitmentPlanGuid\":\"dxmeb\",\"hostingModel\":\"Web\",\"planType\":\"jpahlxvea\",\"current\":{\"tier\":\"xnmwmqtibxyijddt\",\"count\":1410442260,\"startDate\":\"adijaeukmrsie\",\"endDate\":\"pndzaapmudqmeq\"},\"autoRenew\":false,\"next\":{\"tier\":\"bu\",\"count\":1062514292,\"startDate\":\"eb\",\"endDate\":\"bpmzzn\"},\"last\":{\"tier\":\"fyaqitm\",\"count\":528448638,\"startDate\":\"qaqhvseufu\",\"endDate\":\"rxpdlcgqlsi\"}},\"id\":\"mjqfrddgamquhio\",\"name\":\"rsjuivfcdisyir\",\"type\":\"xzhczexrxz\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        CognitiveServicesManager manager =
            CognitiveServicesManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CommitmentPlan> response =
            manager.commitmentPlans().listPlansBySubscription(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pwbralllibphbqz", response.iterator().next().kind());
        Assertions.assertEquals("zakakankjpdn", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.PREMIUM, response.iterator().next().sku().tier());
        Assertions.assertEquals("joylh", response.iterator().next().sku().size());
        Assertions.assertEquals("muoyxprimr", response.iterator().next().sku().family());
        Assertions.assertEquals(2035956497, response.iterator().next().sku().capacity());
        Assertions.assertEquals("ecj", response.iterator().next().tags().get("eislstvasylwx"));
        Assertions.assertEquals("hwtzolb", response.iterator().next().location());
        Assertions.assertEquals("dxmeb", response.iterator().next().properties().commitmentPlanGuid());
        Assertions.assertEquals(HostingModel.WEB, response.iterator().next().properties().hostingModel());
        Assertions.assertEquals("jpahlxvea", response.iterator().next().properties().planType());
        Assertions.assertEquals("xnmwmqtibxyijddt", response.iterator().next().properties().current().tier());
        Assertions.assertEquals(1410442260, response.iterator().next().properties().current().count());
        Assertions.assertEquals(false, response.iterator().next().properties().autoRenew());
        Assertions.assertEquals("bu", response.iterator().next().properties().next().tier());
        Assertions.assertEquals(1062514292, response.iterator().next().properties().next().count());
    }
}
