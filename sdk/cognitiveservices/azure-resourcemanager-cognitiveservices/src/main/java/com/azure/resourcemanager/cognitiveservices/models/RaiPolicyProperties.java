// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Azure OpenAI Content Filters properties.
 */
@Fluent
public final class RaiPolicyProperties implements JsonSerializable<RaiPolicyProperties> {
    /*
     * Content Filters policy type.
     */
    private RaiPolicyType type;

    /*
     * Rai policy mode. The enum value mapping is as below: Default = 0, Deferred=1, Blocking=2, Asynchronous_filter =3.
     * Please use 'Asynchronous_filter' after 2024-10-01. It is the same as 'Deferred' in previous version.
     */
    private RaiPolicyMode mode;

    /*
     * Name of Rai policy.
     */
    private String basePolicyName;

    /*
     * The list of Content Filters.
     */
    private List<RaiPolicyContentFilter> contentFilters;

    /*
     * The list of custom Blocklist.
     */
    private List<CustomBlocklistConfig> customBlocklists;

    /**
     * Creates an instance of RaiPolicyProperties class.
     */
    public RaiPolicyProperties() {
    }

    /**
     * Get the type property: Content Filters policy type.
     * 
     * @return the type value.
     */
    public RaiPolicyType type() {
        return this.type;
    }

    /**
     * Get the mode property: Rai policy mode. The enum value mapping is as below: Default = 0, Deferred=1, Blocking=2,
     * Asynchronous_filter =3. Please use 'Asynchronous_filter' after 2024-10-01. It is the same as 'Deferred' in
     * previous version.
     * 
     * @return the mode value.
     */
    public RaiPolicyMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Rai policy mode. The enum value mapping is as below: Default = 0, Deferred=1, Blocking=2,
     * Asynchronous_filter =3. Please use 'Asynchronous_filter' after 2024-10-01. It is the same as 'Deferred' in
     * previous version.
     * 
     * @param mode the mode value to set.
     * @return the RaiPolicyProperties object itself.
     */
    public RaiPolicyProperties withMode(RaiPolicyMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the basePolicyName property: Name of Rai policy.
     * 
     * @return the basePolicyName value.
     */
    public String basePolicyName() {
        return this.basePolicyName;
    }

    /**
     * Set the basePolicyName property: Name of Rai policy.
     * 
     * @param basePolicyName the basePolicyName value to set.
     * @return the RaiPolicyProperties object itself.
     */
    public RaiPolicyProperties withBasePolicyName(String basePolicyName) {
        this.basePolicyName = basePolicyName;
        return this;
    }

    /**
     * Get the contentFilters property: The list of Content Filters.
     * 
     * @return the contentFilters value.
     */
    public List<RaiPolicyContentFilter> contentFilters() {
        return this.contentFilters;
    }

    /**
     * Set the contentFilters property: The list of Content Filters.
     * 
     * @param contentFilters the contentFilters value to set.
     * @return the RaiPolicyProperties object itself.
     */
    public RaiPolicyProperties withContentFilters(List<RaiPolicyContentFilter> contentFilters) {
        this.contentFilters = contentFilters;
        return this;
    }

    /**
     * Get the customBlocklists property: The list of custom Blocklist.
     * 
     * @return the customBlocklists value.
     */
    public List<CustomBlocklistConfig> customBlocklists() {
        return this.customBlocklists;
    }

    /**
     * Set the customBlocklists property: The list of custom Blocklist.
     * 
     * @param customBlocklists the customBlocklists value to set.
     * @return the RaiPolicyProperties object itself.
     */
    public RaiPolicyProperties withCustomBlocklists(List<CustomBlocklistConfig> customBlocklists) {
        this.customBlocklists = customBlocklists;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contentFilters() != null) {
            contentFilters().forEach(e -> e.validate());
        }
        if (customBlocklists() != null) {
            customBlocklists().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeStringField("basePolicyName", this.basePolicyName);
        jsonWriter.writeArrayField("contentFilters", this.contentFilters,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("customBlocklists", this.customBlocklists,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiPolicyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiPolicyProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RaiPolicyProperties.
     */
    public static RaiPolicyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiPolicyProperties deserializedRaiPolicyProperties = new RaiPolicyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedRaiPolicyProperties.type = RaiPolicyType.fromString(reader.getString());
                } else if ("mode".equals(fieldName)) {
                    deserializedRaiPolicyProperties.mode = RaiPolicyMode.fromString(reader.getString());
                } else if ("basePolicyName".equals(fieldName)) {
                    deserializedRaiPolicyProperties.basePolicyName = reader.getString();
                } else if ("contentFilters".equals(fieldName)) {
                    List<RaiPolicyContentFilter> contentFilters
                        = reader.readArray(reader1 -> RaiPolicyContentFilter.fromJson(reader1));
                    deserializedRaiPolicyProperties.contentFilters = contentFilters;
                } else if ("customBlocklists".equals(fieldName)) {
                    List<CustomBlocklistConfig> customBlocklists
                        = reader.readArray(reader1 -> CustomBlocklistConfig.fromJson(reader1));
                    deserializedRaiPolicyProperties.customBlocklists = customBlocklists;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRaiPolicyProperties;
        });
    }
}
