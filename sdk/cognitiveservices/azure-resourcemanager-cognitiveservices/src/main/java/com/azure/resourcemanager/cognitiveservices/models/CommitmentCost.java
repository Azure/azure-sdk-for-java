// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cognitive Services account commitment cost.
 */
@Fluent
public final class CommitmentCost implements JsonSerializable<CommitmentCost> {
    /*
     * Commitment meter Id.
     */
    private String commitmentMeterId;

    /*
     * Overage meter Id.
     */
    private String overageMeterId;

    /**
     * Creates an instance of CommitmentCost class.
     */
    public CommitmentCost() {
    }

    /**
     * Get the commitmentMeterId property: Commitment meter Id.
     * 
     * @return the commitmentMeterId value.
     */
    public String commitmentMeterId() {
        return this.commitmentMeterId;
    }

    /**
     * Set the commitmentMeterId property: Commitment meter Id.
     * 
     * @param commitmentMeterId the commitmentMeterId value to set.
     * @return the CommitmentCost object itself.
     */
    public CommitmentCost withCommitmentMeterId(String commitmentMeterId) {
        this.commitmentMeterId = commitmentMeterId;
        return this;
    }

    /**
     * Get the overageMeterId property: Overage meter Id.
     * 
     * @return the overageMeterId value.
     */
    public String overageMeterId() {
        return this.overageMeterId;
    }

    /**
     * Set the overageMeterId property: Overage meter Id.
     * 
     * @param overageMeterId the overageMeterId value to set.
     * @return the CommitmentCost object itself.
     */
    public CommitmentCost withOverageMeterId(String overageMeterId) {
        this.overageMeterId = overageMeterId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("commitmentMeterId", this.commitmentMeterId);
        jsonWriter.writeStringField("overageMeterId", this.overageMeterId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CommitmentCost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CommitmentCost if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CommitmentCost.
     */
    public static CommitmentCost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommitmentCost deserializedCommitmentCost = new CommitmentCost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("commitmentMeterId".equals(fieldName)) {
                    deserializedCommitmentCost.commitmentMeterId = reader.getString();
                } else if ("overageMeterId".equals(fieldName)) {
                    deserializedCommitmentCost.overageMeterId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCommitmentCost;
        });
    }
}
