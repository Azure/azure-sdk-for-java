// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.cognitiveservices.fluent.models.PrivateEndpointConnectionInner;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Properties of Cognitive Services account.
 */
@Fluent
public final class AccountProperties implements JsonSerializable<AccountProperties> {
    /*
     * Gets the status of the cognitive services account at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /*
     * Endpoint of the created account.
     */
    private String endpoint;

    /*
     * The internal identifier (deprecated, do not use this property).
     */
    private String internalId;

    /*
     * Gets the capabilities of the cognitive services account. Each item indicates the capability of a specific
     * feature. The values are read-only and for reference only.
     */
    private List<SkuCapability> capabilities;

    /*
     * If the resource is migrated from an existing key.
     */
    private Boolean isMigrated;

    /*
     * Resource migration token.
     */
    private String migrationToken;

    /*
     * Sku change info of account.
     */
    private SkuChangeInfo skuChangeInfo;

    /*
     * Optional subdomain name used for token-based authentication.
     */
    private String customSubDomainName;

    /*
     * A collection of rules governing the accessibility from specific network locations.
     */
    private NetworkRuleSet networkAcls;

    /*
     * The encryption properties for this resource.
     */
    private Encryption encryption;

    /*
     * The storage accounts for this resource.
     */
    private List<UserOwnedStorage> userOwnedStorage;

    /*
     * The user owned AML workspace properties.
     */
    private UserOwnedAmlWorkspace amlWorkspace;

    /*
     * The private endpoint connection associated with the Cognitive Services account.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * Whether or not public endpoint access is allowed for this account.
     */
    private PublicNetworkAccess publicNetworkAccess;

    /*
     * The api properties for special APIs.
     */
    private ApiProperties apiProperties;

    /*
     * Gets the date of cognitive services account creation.
     */
    private String dateCreated;

    /*
     * The call rate limit Cognitive Services account.
     */
    private CallRateLimit callRateLimit;

    /*
     * The flag to enable dynamic throttling.
     */
    private Boolean dynamicThrottlingEnabled;

    /*
     * The quotaLimit property.
     */
    private QuotaLimit quotaLimit;

    /*
     * The restrictOutboundNetworkAccess property.
     */
    private Boolean restrictOutboundNetworkAccess;

    /*
     * The allowedFqdnList property.
     */
    private List<String> allowedFqdnList;

    /*
     * The disableLocalAuth property.
     */
    private Boolean disableLocalAuth;

    /*
     * Dictionary of <string>
     */
    private Map<String, String> endpoints;

    /*
     * The restore property.
     */
    private Boolean restore;

    /*
     * The deletion date, only available for deleted account.
     */
    private String deletionDate;

    /*
     * The scheduled purge date, only available for deleted account.
     */
    private String scheduledPurgeDate;

    /*
     * The multiregion settings of Cognitive Services account.
     */
    private MultiRegionSettings locations;

    /*
     * The commitment plan associations of Cognitive Services account.
     */
    private List<CommitmentPlanAssociation> commitmentPlanAssociations;

    /*
     * The abuse penalty.
     */
    private AbusePenalty abusePenalty;

    /*
     * Cognitive Services Rai Monitor Config.
     */
    private RaiMonitorConfig raiMonitorConfig;

    /**
     * Creates an instance of AccountProperties class.
     */
    public AccountProperties() {
    }

    /**
     * Get the provisioningState property: Gets the status of the cognitive services account at the time the operation
     * was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the endpoint property: Endpoint of the created account.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the internalId property: The internal identifier (deprecated, do not use this property).
     * 
     * @return the internalId value.
     */
    public String internalId() {
        return this.internalId;
    }

    /**
     * Get the capabilities property: Gets the capabilities of the cognitive services account. Each item indicates the
     * capability of a specific feature. The values are read-only and for reference only.
     * 
     * @return the capabilities value.
     */
    public List<SkuCapability> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the isMigrated property: If the resource is migrated from an existing key.
     * 
     * @return the isMigrated value.
     */
    public Boolean isMigrated() {
        return this.isMigrated;
    }

    /**
     * Get the migrationToken property: Resource migration token.
     * 
     * @return the migrationToken value.
     */
    public String migrationToken() {
        return this.migrationToken;
    }

    /**
     * Set the migrationToken property: Resource migration token.
     * 
     * @param migrationToken the migrationToken value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withMigrationToken(String migrationToken) {
        this.migrationToken = migrationToken;
        return this;
    }

    /**
     * Get the skuChangeInfo property: Sku change info of account.
     * 
     * @return the skuChangeInfo value.
     */
    public SkuChangeInfo skuChangeInfo() {
        return this.skuChangeInfo;
    }

    /**
     * Get the customSubDomainName property: Optional subdomain name used for token-based authentication.
     * 
     * @return the customSubDomainName value.
     */
    public String customSubDomainName() {
        return this.customSubDomainName;
    }

    /**
     * Set the customSubDomainName property: Optional subdomain name used for token-based authentication.
     * 
     * @param customSubDomainName the customSubDomainName value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withCustomSubDomainName(String customSubDomainName) {
        this.customSubDomainName = customSubDomainName;
        return this;
    }

    /**
     * Get the networkAcls property: A collection of rules governing the accessibility from specific network locations.
     * 
     * @return the networkAcls value.
     */
    public NetworkRuleSet networkAcls() {
        return this.networkAcls;
    }

    /**
     * Set the networkAcls property: A collection of rules governing the accessibility from specific network locations.
     * 
     * @param networkAcls the networkAcls value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withNetworkAcls(NetworkRuleSet networkAcls) {
        this.networkAcls = networkAcls;
        return this;
    }

    /**
     * Get the encryption property: The encryption properties for this resource.
     * 
     * @return the encryption value.
     */
    public Encryption encryption() {
        return this.encryption;
    }

    /**
     * Set the encryption property: The encryption properties for this resource.
     * 
     * @param encryption the encryption value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withEncryption(Encryption encryption) {
        this.encryption = encryption;
        return this;
    }

    /**
     * Get the userOwnedStorage property: The storage accounts for this resource.
     * 
     * @return the userOwnedStorage value.
     */
    public List<UserOwnedStorage> userOwnedStorage() {
        return this.userOwnedStorage;
    }

    /**
     * Set the userOwnedStorage property: The storage accounts for this resource.
     * 
     * @param userOwnedStorage the userOwnedStorage value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withUserOwnedStorage(List<UserOwnedStorage> userOwnedStorage) {
        this.userOwnedStorage = userOwnedStorage;
        return this;
    }

    /**
     * Get the amlWorkspace property: The user owned AML workspace properties.
     * 
     * @return the amlWorkspace value.
     */
    public UserOwnedAmlWorkspace amlWorkspace() {
        return this.amlWorkspace;
    }

    /**
     * Set the amlWorkspace property: The user owned AML workspace properties.
     * 
     * @param amlWorkspace the amlWorkspace value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withAmlWorkspace(UserOwnedAmlWorkspace amlWorkspace) {
        this.amlWorkspace = amlWorkspace;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: The private endpoint connection associated with the Cognitive
     * Services account.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public endpoint access is allowed for this account.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccess publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public endpoint access is allowed for this account.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withPublicNetworkAccess(PublicNetworkAccess publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the apiProperties property: The api properties for special APIs.
     * 
     * @return the apiProperties value.
     */
    public ApiProperties apiProperties() {
        return this.apiProperties;
    }

    /**
     * Set the apiProperties property: The api properties for special APIs.
     * 
     * @param apiProperties the apiProperties value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withApiProperties(ApiProperties apiProperties) {
        this.apiProperties = apiProperties;
        return this;
    }

    /**
     * Get the dateCreated property: Gets the date of cognitive services account creation.
     * 
     * @return the dateCreated value.
     */
    public String dateCreated() {
        return this.dateCreated;
    }

    /**
     * Get the callRateLimit property: The call rate limit Cognitive Services account.
     * 
     * @return the callRateLimit value.
     */
    public CallRateLimit callRateLimit() {
        return this.callRateLimit;
    }

    /**
     * Get the dynamicThrottlingEnabled property: The flag to enable dynamic throttling.
     * 
     * @return the dynamicThrottlingEnabled value.
     */
    public Boolean dynamicThrottlingEnabled() {
        return this.dynamicThrottlingEnabled;
    }

    /**
     * Set the dynamicThrottlingEnabled property: The flag to enable dynamic throttling.
     * 
     * @param dynamicThrottlingEnabled the dynamicThrottlingEnabled value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withDynamicThrottlingEnabled(Boolean dynamicThrottlingEnabled) {
        this.dynamicThrottlingEnabled = dynamicThrottlingEnabled;
        return this;
    }

    /**
     * Get the quotaLimit property: The quotaLimit property.
     * 
     * @return the quotaLimit value.
     */
    public QuotaLimit quotaLimit() {
        return this.quotaLimit;
    }

    /**
     * Get the restrictOutboundNetworkAccess property: The restrictOutboundNetworkAccess property.
     * 
     * @return the restrictOutboundNetworkAccess value.
     */
    public Boolean restrictOutboundNetworkAccess() {
        return this.restrictOutboundNetworkAccess;
    }

    /**
     * Set the restrictOutboundNetworkAccess property: The restrictOutboundNetworkAccess property.
     * 
     * @param restrictOutboundNetworkAccess the restrictOutboundNetworkAccess value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withRestrictOutboundNetworkAccess(Boolean restrictOutboundNetworkAccess) {
        this.restrictOutboundNetworkAccess = restrictOutboundNetworkAccess;
        return this;
    }

    /**
     * Get the allowedFqdnList property: The allowedFqdnList property.
     * 
     * @return the allowedFqdnList value.
     */
    public List<String> allowedFqdnList() {
        return this.allowedFqdnList;
    }

    /**
     * Set the allowedFqdnList property: The allowedFqdnList property.
     * 
     * @param allowedFqdnList the allowedFqdnList value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withAllowedFqdnList(List<String> allowedFqdnList) {
        this.allowedFqdnList = allowedFqdnList;
        return this;
    }

    /**
     * Get the disableLocalAuth property: The disableLocalAuth property.
     * 
     * @return the disableLocalAuth value.
     */
    public Boolean disableLocalAuth() {
        return this.disableLocalAuth;
    }

    /**
     * Set the disableLocalAuth property: The disableLocalAuth property.
     * 
     * @param disableLocalAuth the disableLocalAuth value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withDisableLocalAuth(Boolean disableLocalAuth) {
        this.disableLocalAuth = disableLocalAuth;
        return this;
    }

    /**
     * Get the endpoints property: Dictionary of &lt;string&gt;.
     * 
     * @return the endpoints value.
     */
    public Map<String, String> endpoints() {
        return this.endpoints;
    }

    /**
     * Get the restore property: The restore property.
     * 
     * @return the restore value.
     */
    public Boolean restore() {
        return this.restore;
    }

    /**
     * Set the restore property: The restore property.
     * 
     * @param restore the restore value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withRestore(Boolean restore) {
        this.restore = restore;
        return this;
    }

    /**
     * Get the deletionDate property: The deletion date, only available for deleted account.
     * 
     * @return the deletionDate value.
     */
    public String deletionDate() {
        return this.deletionDate;
    }

    /**
     * Get the scheduledPurgeDate property: The scheduled purge date, only available for deleted account.
     * 
     * @return the scheduledPurgeDate value.
     */
    public String scheduledPurgeDate() {
        return this.scheduledPurgeDate;
    }

    /**
     * Get the locations property: The multiregion settings of Cognitive Services account.
     * 
     * @return the locations value.
     */
    public MultiRegionSettings locations() {
        return this.locations;
    }

    /**
     * Set the locations property: The multiregion settings of Cognitive Services account.
     * 
     * @param locations the locations value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withLocations(MultiRegionSettings locations) {
        this.locations = locations;
        return this;
    }

    /**
     * Get the commitmentPlanAssociations property: The commitment plan associations of Cognitive Services account.
     * 
     * @return the commitmentPlanAssociations value.
     */
    public List<CommitmentPlanAssociation> commitmentPlanAssociations() {
        return this.commitmentPlanAssociations;
    }

    /**
     * Get the abusePenalty property: The abuse penalty.
     * 
     * @return the abusePenalty value.
     */
    public AbusePenalty abusePenalty() {
        return this.abusePenalty;
    }

    /**
     * Get the raiMonitorConfig property: Cognitive Services Rai Monitor Config.
     * 
     * @return the raiMonitorConfig value.
     */
    public RaiMonitorConfig raiMonitorConfig() {
        return this.raiMonitorConfig;
    }

    /**
     * Set the raiMonitorConfig property: Cognitive Services Rai Monitor Config.
     * 
     * @param raiMonitorConfig the raiMonitorConfig value to set.
     * @return the AccountProperties object itself.
     */
    public AccountProperties withRaiMonitorConfig(RaiMonitorConfig raiMonitorConfig) {
        this.raiMonitorConfig = raiMonitorConfig;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (skuChangeInfo() != null) {
            skuChangeInfo().validate();
        }
        if (networkAcls() != null) {
            networkAcls().validate();
        }
        if (encryption() != null) {
            encryption().validate();
        }
        if (userOwnedStorage() != null) {
            userOwnedStorage().forEach(e -> e.validate());
        }
        if (amlWorkspace() != null) {
            amlWorkspace().validate();
        }
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
        if (apiProperties() != null) {
            apiProperties().validate();
        }
        if (callRateLimit() != null) {
            callRateLimit().validate();
        }
        if (quotaLimit() != null) {
            quotaLimit().validate();
        }
        if (locations() != null) {
            locations().validate();
        }
        if (commitmentPlanAssociations() != null) {
            commitmentPlanAssociations().forEach(e -> e.validate());
        }
        if (abusePenalty() != null) {
            abusePenalty().validate();
        }
        if (raiMonitorConfig() != null) {
            raiMonitorConfig().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("migrationToken", this.migrationToken);
        jsonWriter.writeStringField("customSubDomainName", this.customSubDomainName);
        jsonWriter.writeJsonField("networkAcls", this.networkAcls);
        jsonWriter.writeJsonField("encryption", this.encryption);
        jsonWriter.writeArrayField("userOwnedStorage", this.userOwnedStorage,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("amlWorkspace", this.amlWorkspace);
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeJsonField("apiProperties", this.apiProperties);
        jsonWriter.writeBooleanField("dynamicThrottlingEnabled", this.dynamicThrottlingEnabled);
        jsonWriter.writeBooleanField("restrictOutboundNetworkAccess", this.restrictOutboundNetworkAccess);
        jsonWriter.writeArrayField("allowedFqdnList", this.allowedFqdnList,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("disableLocalAuth", this.disableLocalAuth);
        jsonWriter.writeBooleanField("restore", this.restore);
        jsonWriter.writeJsonField("locations", this.locations);
        jsonWriter.writeJsonField("raiMonitorConfig", this.raiMonitorConfig);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountProperties.
     */
    public static AccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountProperties deserializedAccountProperties = new AccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedAccountProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("endpoint".equals(fieldName)) {
                    deserializedAccountProperties.endpoint = reader.getString();
                } else if ("internalId".equals(fieldName)) {
                    deserializedAccountProperties.internalId = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    List<SkuCapability> capabilities = reader.readArray(reader1 -> SkuCapability.fromJson(reader1));
                    deserializedAccountProperties.capabilities = capabilities;
                } else if ("isMigrated".equals(fieldName)) {
                    deserializedAccountProperties.isMigrated = reader.getNullable(JsonReader::getBoolean);
                } else if ("migrationToken".equals(fieldName)) {
                    deserializedAccountProperties.migrationToken = reader.getString();
                } else if ("skuChangeInfo".equals(fieldName)) {
                    deserializedAccountProperties.skuChangeInfo = SkuChangeInfo.fromJson(reader);
                } else if ("customSubDomainName".equals(fieldName)) {
                    deserializedAccountProperties.customSubDomainName = reader.getString();
                } else if ("networkAcls".equals(fieldName)) {
                    deserializedAccountProperties.networkAcls = NetworkRuleSet.fromJson(reader);
                } else if ("encryption".equals(fieldName)) {
                    deserializedAccountProperties.encryption = Encryption.fromJson(reader);
                } else if ("userOwnedStorage".equals(fieldName)) {
                    List<UserOwnedStorage> userOwnedStorage
                        = reader.readArray(reader1 -> UserOwnedStorage.fromJson(reader1));
                    deserializedAccountProperties.userOwnedStorage = userOwnedStorage;
                } else if ("amlWorkspace".equals(fieldName)) {
                    deserializedAccountProperties.amlWorkspace = UserOwnedAmlWorkspace.fromJson(reader);
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedAccountProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedAccountProperties.publicNetworkAccess
                        = PublicNetworkAccess.fromString(reader.getString());
                } else if ("apiProperties".equals(fieldName)) {
                    deserializedAccountProperties.apiProperties = ApiProperties.fromJson(reader);
                } else if ("dateCreated".equals(fieldName)) {
                    deserializedAccountProperties.dateCreated = reader.getString();
                } else if ("callRateLimit".equals(fieldName)) {
                    deserializedAccountProperties.callRateLimit = CallRateLimit.fromJson(reader);
                } else if ("dynamicThrottlingEnabled".equals(fieldName)) {
                    deserializedAccountProperties.dynamicThrottlingEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("quotaLimit".equals(fieldName)) {
                    deserializedAccountProperties.quotaLimit = QuotaLimit.fromJson(reader);
                } else if ("restrictOutboundNetworkAccess".equals(fieldName)) {
                    deserializedAccountProperties.restrictOutboundNetworkAccess
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("allowedFqdnList".equals(fieldName)) {
                    List<String> allowedFqdnList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccountProperties.allowedFqdnList = allowedFqdnList;
                } else if ("disableLocalAuth".equals(fieldName)) {
                    deserializedAccountProperties.disableLocalAuth = reader.getNullable(JsonReader::getBoolean);
                } else if ("endpoints".equals(fieldName)) {
                    Map<String, String> endpoints = reader.readMap(reader1 -> reader1.getString());
                    deserializedAccountProperties.endpoints = endpoints;
                } else if ("restore".equals(fieldName)) {
                    deserializedAccountProperties.restore = reader.getNullable(JsonReader::getBoolean);
                } else if ("deletionDate".equals(fieldName)) {
                    deserializedAccountProperties.deletionDate = reader.getString();
                } else if ("scheduledPurgeDate".equals(fieldName)) {
                    deserializedAccountProperties.scheduledPurgeDate = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    deserializedAccountProperties.locations = MultiRegionSettings.fromJson(reader);
                } else if ("commitmentPlanAssociations".equals(fieldName)) {
                    List<CommitmentPlanAssociation> commitmentPlanAssociations
                        = reader.readArray(reader1 -> CommitmentPlanAssociation.fromJson(reader1));
                    deserializedAccountProperties.commitmentPlanAssociations = commitmentPlanAssociations;
                } else if ("abusePenalty".equals(fieldName)) {
                    deserializedAccountProperties.abusePenalty = AbusePenalty.fromJson(reader);
                } else if ("raiMonitorConfig".equals(fieldName)) {
                    deserializedAccountProperties.raiMonitorConfig = RaiMonitorConfig.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountProperties;
        });
    }
}
