// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure OpenAI Content Filter Properties.
 */
@Fluent
public final class RaiContentFilterProperties implements JsonSerializable<RaiContentFilterProperties> {
    /*
     * Name of Content Filter.
     */
    private String name;

    /*
     * If the Content Filter has multi severity levels(Low, Medium, or High).
     */
    private Boolean isMultiLevelFilter;

    /*
     * Content source to apply the Content Filters.
     */
    private RaiPolicyContentSource source;

    /**
     * Creates an instance of RaiContentFilterProperties class.
     */
    public RaiContentFilterProperties() {
    }

    /**
     * Get the name property: Name of Content Filter.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of Content Filter.
     * 
     * @param name the name value to set.
     * @return the RaiContentFilterProperties object itself.
     */
    public RaiContentFilterProperties withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the isMultiLevelFilter property: If the Content Filter has multi severity levels(Low, Medium, or High).
     * 
     * @return the isMultiLevelFilter value.
     */
    public Boolean isMultiLevelFilter() {
        return this.isMultiLevelFilter;
    }

    /**
     * Set the isMultiLevelFilter property: If the Content Filter has multi severity levels(Low, Medium, or High).
     * 
     * @param isMultiLevelFilter the isMultiLevelFilter value to set.
     * @return the RaiContentFilterProperties object itself.
     */
    public RaiContentFilterProperties withIsMultiLevelFilter(Boolean isMultiLevelFilter) {
        this.isMultiLevelFilter = isMultiLevelFilter;
        return this;
    }

    /**
     * Get the source property: Content source to apply the Content Filters.
     * 
     * @return the source value.
     */
    public RaiPolicyContentSource source() {
        return this.source;
    }

    /**
     * Set the source property: Content source to apply the Content Filters.
     * 
     * @param source the source value to set.
     * @return the RaiContentFilterProperties object itself.
     */
    public RaiContentFilterProperties withSource(RaiPolicyContentSource source) {
        this.source = source;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("isMultiLevelFilter", this.isMultiLevelFilter);
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiContentFilterProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiContentFilterProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RaiContentFilterProperties.
     */
    public static RaiContentFilterProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiContentFilterProperties deserializedRaiContentFilterProperties = new RaiContentFilterProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedRaiContentFilterProperties.name = reader.getString();
                } else if ("isMultiLevelFilter".equals(fieldName)) {
                    deserializedRaiContentFilterProperties.isMultiLevelFilter
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("source".equals(fieldName)) {
                    deserializedRaiContentFilterProperties.source
                        = RaiPolicyContentSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRaiContentFilterProperties;
        });
    }
}
