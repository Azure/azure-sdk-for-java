// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Properties of Cognitive Services account deployment.
 */
@Fluent
public final class DeploymentProperties implements JsonSerializable<DeploymentProperties> {
    /*
     * Gets the status of the resource at the time the operation was called.
     */
    private DeploymentProvisioningState provisioningState;

    /*
     * Properties of Cognitive Services account deployment model.
     */
    private DeploymentModel model;

    /*
     * Properties of Cognitive Services account deployment model. (Deprecated, please use Deployment.sku instead.)
     */
    private DeploymentScaleSettings scaleSettings;

    /*
     * The capabilities.
     */
    private Map<String, String> capabilities;

    /*
     * The name of RAI policy.
     */
    private String raiPolicyName;

    /*
     * The call rate limit Cognitive Services account.
     */
    private CallRateLimit callRateLimit;

    /*
     * The rateLimits property.
     */
    private List<ThrottlingRule> rateLimits;

    /*
     * Deployment model version upgrade option.
     */
    private DeploymentModelVersionUpgradeOption versionUpgradeOption;

    /*
     * If the dynamic throttling is enabled.
     */
    private Boolean dynamicThrottlingEnabled;

    /*
     * The current capacity.
     */
    private Integer currentCapacity;

    /*
     * Internal use only.
     */
    private DeploymentCapacitySettings capacitySettings;

    /*
     * The name of parent deployment.
     */
    private String parentDeploymentName;

    /**
     * Creates an instance of DeploymentProperties class.
     */
    public DeploymentProperties() {
    }

    /**
     * Get the provisioningState property: Gets the status of the resource at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public DeploymentProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the model property: Properties of Cognitive Services account deployment model.
     * 
     * @return the model value.
     */
    public DeploymentModel model() {
        return this.model;
    }

    /**
     * Set the model property: Properties of Cognitive Services account deployment model.
     * 
     * @param model the model value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withModel(DeploymentModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the scaleSettings property: Properties of Cognitive Services account deployment model. (Deprecated, please
     * use Deployment.sku instead.).
     * 
     * @return the scaleSettings value.
     */
    public DeploymentScaleSettings scaleSettings() {
        return this.scaleSettings;
    }

    /**
     * Set the scaleSettings property: Properties of Cognitive Services account deployment model. (Deprecated, please
     * use Deployment.sku instead.).
     * 
     * @param scaleSettings the scaleSettings value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withScaleSettings(DeploymentScaleSettings scaleSettings) {
        this.scaleSettings = scaleSettings;
        return this;
    }

    /**
     * Get the capabilities property: The capabilities.
     * 
     * @return the capabilities value.
     */
    public Map<String, String> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the raiPolicyName property: The name of RAI policy.
     * 
     * @return the raiPolicyName value.
     */
    public String raiPolicyName() {
        return this.raiPolicyName;
    }

    /**
     * Set the raiPolicyName property: The name of RAI policy.
     * 
     * @param raiPolicyName the raiPolicyName value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withRaiPolicyName(String raiPolicyName) {
        this.raiPolicyName = raiPolicyName;
        return this;
    }

    /**
     * Get the callRateLimit property: The call rate limit Cognitive Services account.
     * 
     * @return the callRateLimit value.
     */
    public CallRateLimit callRateLimit() {
        return this.callRateLimit;
    }

    /**
     * Get the rateLimits property: The rateLimits property.
     * 
     * @return the rateLimits value.
     */
    public List<ThrottlingRule> rateLimits() {
        return this.rateLimits;
    }

    /**
     * Get the versionUpgradeOption property: Deployment model version upgrade option.
     * 
     * @return the versionUpgradeOption value.
     */
    public DeploymentModelVersionUpgradeOption versionUpgradeOption() {
        return this.versionUpgradeOption;
    }

    /**
     * Set the versionUpgradeOption property: Deployment model version upgrade option.
     * 
     * @param versionUpgradeOption the versionUpgradeOption value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withVersionUpgradeOption(DeploymentModelVersionUpgradeOption versionUpgradeOption) {
        this.versionUpgradeOption = versionUpgradeOption;
        return this;
    }

    /**
     * Get the dynamicThrottlingEnabled property: If the dynamic throttling is enabled.
     * 
     * @return the dynamicThrottlingEnabled value.
     */
    public Boolean dynamicThrottlingEnabled() {
        return this.dynamicThrottlingEnabled;
    }

    /**
     * Get the currentCapacity property: The current capacity.
     * 
     * @return the currentCapacity value.
     */
    public Integer currentCapacity() {
        return this.currentCapacity;
    }

    /**
     * Set the currentCapacity property: The current capacity.
     * 
     * @param currentCapacity the currentCapacity value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withCurrentCapacity(Integer currentCapacity) {
        this.currentCapacity = currentCapacity;
        return this;
    }

    /**
     * Get the capacitySettings property: Internal use only.
     * 
     * @return the capacitySettings value.
     */
    public DeploymentCapacitySettings capacitySettings() {
        return this.capacitySettings;
    }

    /**
     * Set the capacitySettings property: Internal use only.
     * 
     * @param capacitySettings the capacitySettings value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withCapacitySettings(DeploymentCapacitySettings capacitySettings) {
        this.capacitySettings = capacitySettings;
        return this;
    }

    /**
     * Get the parentDeploymentName property: The name of parent deployment.
     * 
     * @return the parentDeploymentName value.
     */
    public String parentDeploymentName() {
        return this.parentDeploymentName;
    }

    /**
     * Set the parentDeploymentName property: The name of parent deployment.
     * 
     * @param parentDeploymentName the parentDeploymentName value to set.
     * @return the DeploymentProperties object itself.
     */
    public DeploymentProperties withParentDeploymentName(String parentDeploymentName) {
        this.parentDeploymentName = parentDeploymentName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (model() != null) {
            model().validate();
        }
        if (scaleSettings() != null) {
            scaleSettings().validate();
        }
        if (callRateLimit() != null) {
            callRateLimit().validate();
        }
        if (rateLimits() != null) {
            rateLimits().forEach(e -> e.validate());
        }
        if (capacitySettings() != null) {
            capacitySettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("model", this.model);
        jsonWriter.writeJsonField("scaleSettings", this.scaleSettings);
        jsonWriter.writeStringField("raiPolicyName", this.raiPolicyName);
        jsonWriter.writeStringField("versionUpgradeOption",
            this.versionUpgradeOption == null ? null : this.versionUpgradeOption.toString());
        jsonWriter.writeNumberField("currentCapacity", this.currentCapacity);
        jsonWriter.writeJsonField("capacitySettings", this.capacitySettings);
        jsonWriter.writeStringField("parentDeploymentName", this.parentDeploymentName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentProperties.
     */
    public static DeploymentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentProperties deserializedDeploymentProperties = new DeploymentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedDeploymentProperties.provisioningState
                        = DeploymentProvisioningState.fromString(reader.getString());
                } else if ("model".equals(fieldName)) {
                    deserializedDeploymentProperties.model = DeploymentModel.fromJson(reader);
                } else if ("scaleSettings".equals(fieldName)) {
                    deserializedDeploymentProperties.scaleSettings = DeploymentScaleSettings.fromJson(reader);
                } else if ("capabilities".equals(fieldName)) {
                    Map<String, String> capabilities = reader.readMap(reader1 -> reader1.getString());
                    deserializedDeploymentProperties.capabilities = capabilities;
                } else if ("raiPolicyName".equals(fieldName)) {
                    deserializedDeploymentProperties.raiPolicyName = reader.getString();
                } else if ("callRateLimit".equals(fieldName)) {
                    deserializedDeploymentProperties.callRateLimit = CallRateLimit.fromJson(reader);
                } else if ("rateLimits".equals(fieldName)) {
                    List<ThrottlingRule> rateLimits = reader.readArray(reader1 -> ThrottlingRule.fromJson(reader1));
                    deserializedDeploymentProperties.rateLimits = rateLimits;
                } else if ("versionUpgradeOption".equals(fieldName)) {
                    deserializedDeploymentProperties.versionUpgradeOption
                        = DeploymentModelVersionUpgradeOption.fromString(reader.getString());
                } else if ("dynamicThrottlingEnabled".equals(fieldName)) {
                    deserializedDeploymentProperties.dynamicThrottlingEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("currentCapacity".equals(fieldName)) {
                    deserializedDeploymentProperties.currentCapacity = reader.getNullable(JsonReader::getInt);
                } else if ("capacitySettings".equals(fieldName)) {
                    deserializedDeploymentProperties.capacitySettings = DeploymentCapacitySettings.fromJson(reader);
                } else if ("parentDeploymentName".equals(fieldName)) {
                    deserializedDeploymentProperties.parentDeploymentName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentProperties;
        });
    }
}
