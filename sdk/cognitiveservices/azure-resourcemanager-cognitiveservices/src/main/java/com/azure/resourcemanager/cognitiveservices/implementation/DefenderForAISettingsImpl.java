// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.DefenderForAISettingsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.DefenderForAISettingInner;
import com.azure.resourcemanager.cognitiveservices.models.DefenderForAISetting;
import com.azure.resourcemanager.cognitiveservices.models.DefenderForAISettings;

public final class DefenderForAISettingsImpl implements DefenderForAISettings {
    private static final ClientLogger LOGGER = new ClientLogger(DefenderForAISettingsImpl.class);

    private final DefenderForAISettingsClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public DefenderForAISettingsImpl(DefenderForAISettingsClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<DefenderForAISetting> list(String resourceGroupName, String accountName) {
        PagedIterable<DefenderForAISettingInner> inner = this.serviceClient().list(resourceGroupName, accountName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DefenderForAISettingImpl(inner1, this.manager()));
    }

    public PagedIterable<DefenderForAISetting> list(String resourceGroupName, String accountName, Context context) {
        PagedIterable<DefenderForAISettingInner> inner
            = this.serviceClient().list(resourceGroupName, accountName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DefenderForAISettingImpl(inner1, this.manager()));
    }

    public Response<DefenderForAISetting> getWithResponse(String resourceGroupName, String accountName,
        String defenderForAISettingName, Context context) {
        Response<DefenderForAISettingInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, defenderForAISettingName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DefenderForAISettingImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DefenderForAISetting get(String resourceGroupName, String accountName, String defenderForAISettingName) {
        DefenderForAISettingInner inner
            = this.serviceClient().get(resourceGroupName, accountName, defenderForAISettingName);
        if (inner != null) {
            return new DefenderForAISettingImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DefenderForAISetting getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String defenderForAISettingName = ResourceManagerUtils.getValueFromIdByName(id, "defenderForAISettings");
        if (defenderForAISettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'defenderForAISettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, defenderForAISettingName, Context.NONE).getValue();
    }

    public Response<DefenderForAISetting> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String defenderForAISettingName = ResourceManagerUtils.getValueFromIdByName(id, "defenderForAISettings");
        if (defenderForAISettingName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'defenderForAISettings'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, defenderForAISettingName, context);
    }

    private DefenderForAISettingsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }

    public DefenderForAISettingImpl define(String name) {
        return new DefenderForAISettingImpl(name, this.manager());
    }
}
