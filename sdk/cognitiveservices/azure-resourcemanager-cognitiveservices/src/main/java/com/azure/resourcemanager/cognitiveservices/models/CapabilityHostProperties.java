// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The CapabilityHostProperties model.
 */
@Fluent
public final class CapabilityHostProperties extends ResourceBase {
    /*
     * List of AI services connections.
     */
    private List<String> aiServicesConnections;

    /*
     * Kind of this capability host.
     */
    private CapabilityHostKind capabilityHostKind;

    /*
     * Customer subnet info to help set up this capability host.
     */
    private String customerSubnet;

    /*
     * Provisioning state for the CapabilityHost.
     */
    private CapabilityHostProvisioningState provisioningState;

    /*
     * List of connection names from those available in the account or project to be used as a storage resource.
     */
    private List<String> storageConnections;

    /*
     * List of connection names from those available in the account or project to be used for Thread storage.
     */
    private List<String> threadStorageConnections;

    /*
     * List of connection names from those available in the account or project to be used for vector database (e.g.
     * CosmosDB).
     */
    private List<String> vectorStoreConnections;

    /**
     * Creates an instance of CapabilityHostProperties class.
     */
    public CapabilityHostProperties() {
    }

    /**
     * Get the aiServicesConnections property: List of AI services connections.
     * 
     * @return the aiServicesConnections value.
     */
    public List<String> aiServicesConnections() {
        return this.aiServicesConnections;
    }

    /**
     * Set the aiServicesConnections property: List of AI services connections.
     * 
     * @param aiServicesConnections the aiServicesConnections value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withAiServicesConnections(List<String> aiServicesConnections) {
        this.aiServicesConnections = aiServicesConnections;
        return this;
    }

    /**
     * Get the capabilityHostKind property: Kind of this capability host.
     * 
     * @return the capabilityHostKind value.
     */
    public CapabilityHostKind capabilityHostKind() {
        return this.capabilityHostKind;
    }

    /**
     * Set the capabilityHostKind property: Kind of this capability host.
     * 
     * @param capabilityHostKind the capabilityHostKind value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withCapabilityHostKind(CapabilityHostKind capabilityHostKind) {
        this.capabilityHostKind = capabilityHostKind;
        return this;
    }

    /**
     * Get the customerSubnet property: Customer subnet info to help set up this capability host.
     * 
     * @return the customerSubnet value.
     */
    public String customerSubnet() {
        return this.customerSubnet;
    }

    /**
     * Set the customerSubnet property: Customer subnet info to help set up this capability host.
     * 
     * @param customerSubnet the customerSubnet value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withCustomerSubnet(String customerSubnet) {
        this.customerSubnet = customerSubnet;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state for the CapabilityHost.
     * 
     * @return the provisioningState value.
     */
    public CapabilityHostProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the storageConnections property: List of connection names from those available in the account or project to
     * be used as a storage resource.
     * 
     * @return the storageConnections value.
     */
    public List<String> storageConnections() {
        return this.storageConnections;
    }

    /**
     * Set the storageConnections property: List of connection names from those available in the account or project to
     * be used as a storage resource.
     * 
     * @param storageConnections the storageConnections value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withStorageConnections(List<String> storageConnections) {
        this.storageConnections = storageConnections;
        return this;
    }

    /**
     * Get the threadStorageConnections property: List of connection names from those available in the account or
     * project to be used for Thread storage.
     * 
     * @return the threadStorageConnections value.
     */
    public List<String> threadStorageConnections() {
        return this.threadStorageConnections;
    }

    /**
     * Set the threadStorageConnections property: List of connection names from those available in the account or
     * project to be used for Thread storage.
     * 
     * @param threadStorageConnections the threadStorageConnections value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withThreadStorageConnections(List<String> threadStorageConnections) {
        this.threadStorageConnections = threadStorageConnections;
        return this;
    }

    /**
     * Get the vectorStoreConnections property: List of connection names from those available in the account or project
     * to be used for vector database (e.g. CosmosDB).
     * 
     * @return the vectorStoreConnections value.
     */
    public List<String> vectorStoreConnections() {
        return this.vectorStoreConnections;
    }

    /**
     * Set the vectorStoreConnections property: List of connection names from those available in the account or project
     * to be used for vector database (e.g. CosmosDB).
     * 
     * @param vectorStoreConnections the vectorStoreConnections value to set.
     * @return the CapabilityHostProperties object itself.
     */
    public CapabilityHostProperties withVectorStoreConnections(List<String> vectorStoreConnections) {
        this.vectorStoreConnections = vectorStoreConnections;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapabilityHostProperties withDescription(String description) {
        super.withDescription(description);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CapabilityHostProperties withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("description", description());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("aiServicesConnections", this.aiServicesConnections,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("capabilityHostKind",
            this.capabilityHostKind == null ? null : this.capabilityHostKind.toString());
        jsonWriter.writeStringField("customerSubnet", this.customerSubnet);
        jsonWriter.writeArrayField("storageConnections", this.storageConnections,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("threadStorageConnections", this.threadStorageConnections,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("vectorStoreConnections", this.vectorStoreConnections,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapabilityHostProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapabilityHostProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapabilityHostProperties.
     */
    public static CapabilityHostProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapabilityHostProperties deserializedCapabilityHostProperties = new CapabilityHostProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("description".equals(fieldName)) {
                    deserializedCapabilityHostProperties.withDescription(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.withTags(tags);
                } else if ("aiServicesConnections".equals(fieldName)) {
                    List<String> aiServicesConnections = reader.readArray(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.aiServicesConnections = aiServicesConnections;
                } else if ("capabilityHostKind".equals(fieldName)) {
                    deserializedCapabilityHostProperties.capabilityHostKind
                        = CapabilityHostKind.fromString(reader.getString());
                } else if ("customerSubnet".equals(fieldName)) {
                    deserializedCapabilityHostProperties.customerSubnet = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedCapabilityHostProperties.provisioningState
                        = CapabilityHostProvisioningState.fromString(reader.getString());
                } else if ("storageConnections".equals(fieldName)) {
                    List<String> storageConnections = reader.readArray(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.storageConnections = storageConnections;
                } else if ("threadStorageConnections".equals(fieldName)) {
                    List<String> threadStorageConnections = reader.readArray(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.threadStorageConnections = threadStorageConnections;
                } else if ("vectorStoreConnections".equals(fieldName)) {
                    List<String> vectorStoreConnections = reader.readArray(reader1 -> reader1.getString());
                    deserializedCapabilityHostProperties.vectorStoreConnections = vectorStoreConnections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapabilityHostProperties;
        });
    }
}
