// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.ResourceProvidersClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CheckDomainAvailabilityResultInner;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CheckSkuAvailabilityResultListInner;
import com.azure.resourcemanager.cognitiveservices.models.CheckDomainAvailabilityParameter;
import com.azure.resourcemanager.cognitiveservices.models.CheckDomainAvailabilityResult;
import com.azure.resourcemanager.cognitiveservices.models.CheckSkuAvailabilityParameter;
import com.azure.resourcemanager.cognitiveservices.models.CheckSkuAvailabilityResultList;
import com.azure.resourcemanager.cognitiveservices.models.ResourceProviders;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ResourceProvidersImpl implements ResourceProviders {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ResourceProvidersImpl.class);

    private final ResourceProvidersClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public ResourceProvidersImpl(
        ResourceProvidersClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CheckSkuAvailabilityResultList checkSkuAvailability(
        String location, CheckSkuAvailabilityParameter parameters) {
        CheckSkuAvailabilityResultListInner inner = this.serviceClient().checkSkuAvailability(location, parameters);
        if (inner != null) {
            return new CheckSkuAvailabilityResultListImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckSkuAvailabilityResultList> checkSkuAvailabilityWithResponse(
        String location, CheckSkuAvailabilityParameter parameters, Context context) {
        Response<CheckSkuAvailabilityResultListInner> inner =
            this.serviceClient().checkSkuAvailabilityWithResponse(location, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckSkuAvailabilityResultListImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CheckDomainAvailabilityResult checkDomainAvailability(CheckDomainAvailabilityParameter parameters) {
        CheckDomainAvailabilityResultInner inner = this.serviceClient().checkDomainAvailability(parameters);
        if (inner != null) {
            return new CheckDomainAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckDomainAvailabilityResult> checkDomainAvailabilityWithResponse(
        CheckDomainAvailabilityParameter parameters, Context context) {
        Response<CheckDomainAvailabilityResultInner> inner =
            this.serviceClient().checkDomainAvailabilityWithResponse(parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckDomainAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    private ResourceProvidersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }
}
