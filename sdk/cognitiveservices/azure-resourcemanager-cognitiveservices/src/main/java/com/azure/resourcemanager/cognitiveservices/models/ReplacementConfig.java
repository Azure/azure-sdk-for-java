// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Configuration for model replacement.
 */
@Fluent
public final class ReplacementConfig implements JsonSerializable<ReplacementConfig> {
    /*
     * The name of the replacement model.
     */
    private String targetModelName;

    /*
     * The version of the replacement model.
     */
    private String targetModelVersion;

    /*
     * The date when automatic upgrade should start. This applies to deployments with the OnceNewDefaultVersionAvailable
     * upgrade option.
     */
    private OffsetDateTime autoUpgradeStartDate;

    /*
     * The number of days before deprecation date to trigger upgrade. This applies to deployments with the
     * OnceCurrentVersionExpired upgrade option.
     */
    private Integer upgradeOnExpiryLeadTimeDays;

    /**
     * Creates an instance of ReplacementConfig class.
     */
    public ReplacementConfig() {
    }

    /**
     * Get the targetModelName property: The name of the replacement model.
     * 
     * @return the targetModelName value.
     */
    public String targetModelName() {
        return this.targetModelName;
    }

    /**
     * Set the targetModelName property: The name of the replacement model.
     * 
     * @param targetModelName the targetModelName value to set.
     * @return the ReplacementConfig object itself.
     */
    public ReplacementConfig withTargetModelName(String targetModelName) {
        this.targetModelName = targetModelName;
        return this;
    }

    /**
     * Get the targetModelVersion property: The version of the replacement model.
     * 
     * @return the targetModelVersion value.
     */
    public String targetModelVersion() {
        return this.targetModelVersion;
    }

    /**
     * Set the targetModelVersion property: The version of the replacement model.
     * 
     * @param targetModelVersion the targetModelVersion value to set.
     * @return the ReplacementConfig object itself.
     */
    public ReplacementConfig withTargetModelVersion(String targetModelVersion) {
        this.targetModelVersion = targetModelVersion;
        return this;
    }

    /**
     * Get the autoUpgradeStartDate property: The date when automatic upgrade should start. This applies to deployments
     * with the OnceNewDefaultVersionAvailable upgrade option.
     * 
     * @return the autoUpgradeStartDate value.
     */
    public OffsetDateTime autoUpgradeStartDate() {
        return this.autoUpgradeStartDate;
    }

    /**
     * Set the autoUpgradeStartDate property: The date when automatic upgrade should start. This applies to deployments
     * with the OnceNewDefaultVersionAvailable upgrade option.
     * 
     * @param autoUpgradeStartDate the autoUpgradeStartDate value to set.
     * @return the ReplacementConfig object itself.
     */
    public ReplacementConfig withAutoUpgradeStartDate(OffsetDateTime autoUpgradeStartDate) {
        this.autoUpgradeStartDate = autoUpgradeStartDate;
        return this;
    }

    /**
     * Get the upgradeOnExpiryLeadTimeDays property: The number of days before deprecation date to trigger upgrade. This
     * applies to deployments with the OnceCurrentVersionExpired upgrade option.
     * 
     * @return the upgradeOnExpiryLeadTimeDays value.
     */
    public Integer upgradeOnExpiryLeadTimeDays() {
        return this.upgradeOnExpiryLeadTimeDays;
    }

    /**
     * Set the upgradeOnExpiryLeadTimeDays property: The number of days before deprecation date to trigger upgrade. This
     * applies to deployments with the OnceCurrentVersionExpired upgrade option.
     * 
     * @param upgradeOnExpiryLeadTimeDays the upgradeOnExpiryLeadTimeDays value to set.
     * @return the ReplacementConfig object itself.
     */
    public ReplacementConfig withUpgradeOnExpiryLeadTimeDays(Integer upgradeOnExpiryLeadTimeDays) {
        this.upgradeOnExpiryLeadTimeDays = upgradeOnExpiryLeadTimeDays;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetModelName", this.targetModelName);
        jsonWriter.writeStringField("targetModelVersion", this.targetModelVersion);
        jsonWriter.writeStringField("autoUpgradeStartDate",
            this.autoUpgradeStartDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.autoUpgradeStartDate));
        jsonWriter.writeNumberField("upgradeOnExpiryLeadTimeDays", this.upgradeOnExpiryLeadTimeDays);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReplacementConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReplacementConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReplacementConfig.
     */
    public static ReplacementConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReplacementConfig deserializedReplacementConfig = new ReplacementConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetModelName".equals(fieldName)) {
                    deserializedReplacementConfig.targetModelName = reader.getString();
                } else if ("targetModelVersion".equals(fieldName)) {
                    deserializedReplacementConfig.targetModelVersion = reader.getString();
                } else if ("autoUpgradeStartDate".equals(fieldName)) {
                    deserializedReplacementConfig.autoUpgradeStartDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("upgradeOnExpiryLeadTimeDays".equals(fieldName)) {
                    deserializedReplacementConfig.upgradeOnExpiryLeadTimeDays = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReplacementConfig;
        });
    }
}
