// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Calculate Model Capacity parameter.
 */
@Fluent
public final class CalculateModelCapacityParameter implements JsonSerializable<CalculateModelCapacityParameter> {
    /*
     * Properties of Cognitive Services account deployment model.
     */
    private DeploymentModel model;

    /*
     * The name of SKU.
     */
    private String skuName;

    /*
     * List of Model Capacity Calculator Workload.
     */
    private List<ModelCapacityCalculatorWorkload> workloads;

    /**
     * Creates an instance of CalculateModelCapacityParameter class.
     */
    public CalculateModelCapacityParameter() {
    }

    /**
     * Get the model property: Properties of Cognitive Services account deployment model.
     * 
     * @return the model value.
     */
    public DeploymentModel model() {
        return this.model;
    }

    /**
     * Set the model property: Properties of Cognitive Services account deployment model.
     * 
     * @param model the model value to set.
     * @return the CalculateModelCapacityParameter object itself.
     */
    public CalculateModelCapacityParameter withModel(DeploymentModel model) {
        this.model = model;
        return this;
    }

    /**
     * Get the skuName property: The name of SKU.
     * 
     * @return the skuName value.
     */
    public String skuName() {
        return this.skuName;
    }

    /**
     * Set the skuName property: The name of SKU.
     * 
     * @param skuName the skuName value to set.
     * @return the CalculateModelCapacityParameter object itself.
     */
    public CalculateModelCapacityParameter withSkuName(String skuName) {
        this.skuName = skuName;
        return this;
    }

    /**
     * Get the workloads property: List of Model Capacity Calculator Workload.
     * 
     * @return the workloads value.
     */
    public List<ModelCapacityCalculatorWorkload> workloads() {
        return this.workloads;
    }

    /**
     * Set the workloads property: List of Model Capacity Calculator Workload.
     * 
     * @param workloads the workloads value to set.
     * @return the CalculateModelCapacityParameter object itself.
     */
    public CalculateModelCapacityParameter withWorkloads(List<ModelCapacityCalculatorWorkload> workloads) {
        this.workloads = workloads;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (model() != null) {
            model().validate();
        }
        if (workloads() != null) {
            workloads().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("model", this.model);
        jsonWriter.writeStringField("skuName", this.skuName);
        jsonWriter.writeArrayField("workloads", this.workloads, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CalculateModelCapacityParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CalculateModelCapacityParameter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CalculateModelCapacityParameter.
     */
    public static CalculateModelCapacityParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CalculateModelCapacityParameter deserializedCalculateModelCapacityParameter
                = new CalculateModelCapacityParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("model".equals(fieldName)) {
                    deserializedCalculateModelCapacityParameter.model = DeploymentModel.fromJson(reader);
                } else if ("skuName".equals(fieldName)) {
                    deserializedCalculateModelCapacityParameter.skuName = reader.getString();
                } else if ("workloads".equals(fieldName)) {
                    List<ModelCapacityCalculatorWorkload> workloads
                        = reader.readArray(reader1 -> ModelCapacityCalculatorWorkload.fromJson(reader1));
                    deserializedCalculateModelCapacityParameter.workloads = workloads;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCalculateModelCapacityParameter;
        });
    }
}
