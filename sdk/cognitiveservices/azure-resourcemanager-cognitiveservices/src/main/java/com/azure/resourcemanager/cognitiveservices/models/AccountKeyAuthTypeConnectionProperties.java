// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * This connection type covers the account key connection for Azure storage.
 */
@Fluent
public final class AccountKeyAuthTypeConnectionProperties extends ConnectionPropertiesV2 {
    /*
     * Authentication type of the connection target
     */
    private ConnectionAuthType authType = ConnectionAuthType.ACCOUNT_KEY;

    /*
     * Account key object for connection credential.
     */
    private ConnectionAccountKey credentials;

    /**
     * Creates an instance of AccountKeyAuthTypeConnectionProperties class.
     */
    public AccountKeyAuthTypeConnectionProperties() {
    }

    /**
     * Get the authType property: Authentication type of the connection target.
     * 
     * @return the authType value.
     */
    @Override
    public ConnectionAuthType authType() {
        return this.authType;
    }

    /**
     * Get the credentials property: Account key object for connection credential.
     * 
     * @return the credentials value.
     */
    public ConnectionAccountKey credentials() {
        return this.credentials;
    }

    /**
     * Set the credentials property: Account key object for connection credential.
     * 
     * @param credentials the credentials value to set.
     * @return the AccountKeyAuthTypeConnectionProperties object itself.
     */
    public AccountKeyAuthTypeConnectionProperties withCredentials(ConnectionAccountKey credentials) {
        this.credentials = credentials;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withCategory(ConnectionCategory category) {
        super.withCategory(category);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withError(String error) {
        super.withError(error);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withExpiryTime(OffsetDateTime expiryTime) {
        super.withExpiryTime(expiryTime);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withIsSharedToAll(Boolean isSharedToAll) {
        super.withIsSharedToAll(isSharedToAll);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withMetadata(Map<String, String> metadata) {
        super.withMetadata(metadata);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withPeRequirement(ManagedPERequirement peRequirement) {
        super.withPeRequirement(peRequirement);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withPeStatus(ManagedPEStatus peStatus) {
        super.withPeStatus(peStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withSharedUserList(List<String> sharedUserList) {
        super.withSharedUserList(sharedUserList);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withTarget(String target) {
        super.withTarget(target);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountKeyAuthTypeConnectionProperties withUseWorkspaceManagedIdentity(Boolean useWorkspaceManagedIdentity) {
        super.withUseWorkspaceManagedIdentity(useWorkspaceManagedIdentity);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (credentials() != null) {
            credentials().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("category", category() == null ? null : category().toString());
        jsonWriter.writeStringField("error", error());
        jsonWriter.writeStringField("expiryTime",
            expiryTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(expiryTime()));
        jsonWriter.writeBooleanField("isSharedToAll", isSharedToAll());
        jsonWriter.writeMapField("metadata", metadata(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("peRequirement", peRequirement() == null ? null : peRequirement().toString());
        jsonWriter.writeStringField("peStatus", peStatus() == null ? null : peStatus().toString());
        jsonWriter.writeArrayField("sharedUserList", sharedUserList(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("target", target());
        jsonWriter.writeBooleanField("useWorkspaceManagedIdentity", useWorkspaceManagedIdentity());
        jsonWriter.writeStringField("authType", this.authType == null ? null : this.authType.toString());
        jsonWriter.writeJsonField("credentials", this.credentials);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AccountKeyAuthTypeConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AccountKeyAuthTypeConnectionProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AccountKeyAuthTypeConnectionProperties.
     */
    public static AccountKeyAuthTypeConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AccountKeyAuthTypeConnectionProperties deserializedAccountKeyAuthTypeConnectionProperties
                = new AccountKeyAuthTypeConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties
                        .withCategory(ConnectionCategory.fromString(reader.getString()));
                } else if ("createdByWorkspaceArmId".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties.withCreatedByWorkspaceArmId(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties.withError(reader.getString());
                } else if ("expiryTime".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties.withExpiryTime(reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString())));
                } else if ("group".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties
                        .withGroup(ConnectionGroup.fromString(reader.getString()));
                } else if ("isSharedToAll".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties
                        .withIsSharedToAll(reader.getNullable(JsonReader::getBoolean));
                } else if ("metadata".equals(fieldName)) {
                    Map<String, String> metadata = reader.readMap(reader1 -> reader1.getString());
                    deserializedAccountKeyAuthTypeConnectionProperties.withMetadata(metadata);
                } else if ("peRequirement".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties
                        .withPeRequirement(ManagedPERequirement.fromString(reader.getString()));
                } else if ("peStatus".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties
                        .withPeStatus(ManagedPEStatus.fromString(reader.getString()));
                } else if ("sharedUserList".equals(fieldName)) {
                    List<String> sharedUserList = reader.readArray(reader1 -> reader1.getString());
                    deserializedAccountKeyAuthTypeConnectionProperties.withSharedUserList(sharedUserList);
                } else if ("target".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties.withTarget(reader.getString());
                } else if ("useWorkspaceManagedIdentity".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties
                        .withUseWorkspaceManagedIdentity(reader.getNullable(JsonReader::getBoolean));
                } else if ("authType".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties.authType
                        = ConnectionAuthType.fromString(reader.getString());
                } else if ("credentials".equals(fieldName)) {
                    deserializedAccountKeyAuthTypeConnectionProperties.credentials
                        = ConnectionAccountKey.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAccountKeyAuthTypeConnectionProperties;
        });
    }
}
