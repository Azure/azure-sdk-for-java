// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Information about the quota tier upgrade eligibility for the subscription.
 */
@Fluent
public final class QuotaTierUpgradeEligibilityInfo implements JsonSerializable<QuotaTierUpgradeEligibilityInfo> {
    /*
     * Name of the next quota tier for the subscription.
     */
    private String nextTierName;

    /*
     * Specifies whether an upgrade to the next quota tier is available.
     */
    private UpgradeAvailabilityStatus upgradeAvailabilityStatus;

    /*
     * The date after which the current tier will be upgraded to the next tier if the TierUpgradePolicy is
     * "OnceUpgradeIsAvailable" (UTC).
     */
    private OffsetDateTime upgradeApplicableDate;

    /*
     * Reason in case the subscription is not eligible for upgrade to the next tier.
     */
    private String upgradeUnavailabilityReason;

    /**
     * Creates an instance of QuotaTierUpgradeEligibilityInfo class.
     */
    public QuotaTierUpgradeEligibilityInfo() {
    }

    /**
     * Get the nextTierName property: Name of the next quota tier for the subscription.
     * 
     * @return the nextTierName value.
     */
    public String nextTierName() {
        return this.nextTierName;
    }

    /**
     * Set the nextTierName property: Name of the next quota tier for the subscription.
     * 
     * @param nextTierName the nextTierName value to set.
     * @return the QuotaTierUpgradeEligibilityInfo object itself.
     */
    public QuotaTierUpgradeEligibilityInfo withNextTierName(String nextTierName) {
        this.nextTierName = nextTierName;
        return this;
    }

    /**
     * Get the upgradeAvailabilityStatus property: Specifies whether an upgrade to the next quota tier is available.
     * 
     * @return the upgradeAvailabilityStatus value.
     */
    public UpgradeAvailabilityStatus upgradeAvailabilityStatus() {
        return this.upgradeAvailabilityStatus;
    }

    /**
     * Set the upgradeAvailabilityStatus property: Specifies whether an upgrade to the next quota tier is available.
     * 
     * @param upgradeAvailabilityStatus the upgradeAvailabilityStatus value to set.
     * @return the QuotaTierUpgradeEligibilityInfo object itself.
     */
    public QuotaTierUpgradeEligibilityInfo
        withUpgradeAvailabilityStatus(UpgradeAvailabilityStatus upgradeAvailabilityStatus) {
        this.upgradeAvailabilityStatus = upgradeAvailabilityStatus;
        return this;
    }

    /**
     * Get the upgradeApplicableDate property: The date after which the current tier will be upgraded to the next tier
     * if the TierUpgradePolicy is "OnceUpgradeIsAvailable" (UTC).
     * 
     * @return the upgradeApplicableDate value.
     */
    public OffsetDateTime upgradeApplicableDate() {
        return this.upgradeApplicableDate;
    }

    /**
     * Set the upgradeApplicableDate property: The date after which the current tier will be upgraded to the next tier
     * if the TierUpgradePolicy is "OnceUpgradeIsAvailable" (UTC).
     * 
     * @param upgradeApplicableDate the upgradeApplicableDate value to set.
     * @return the QuotaTierUpgradeEligibilityInfo object itself.
     */
    public QuotaTierUpgradeEligibilityInfo withUpgradeApplicableDate(OffsetDateTime upgradeApplicableDate) {
        this.upgradeApplicableDate = upgradeApplicableDate;
        return this;
    }

    /**
     * Get the upgradeUnavailabilityReason property: Reason in case the subscription is not eligible for upgrade to the
     * next tier.
     * 
     * @return the upgradeUnavailabilityReason value.
     */
    public String upgradeUnavailabilityReason() {
        return this.upgradeUnavailabilityReason;
    }

    /**
     * Set the upgradeUnavailabilityReason property: Reason in case the subscription is not eligible for upgrade to the
     * next tier.
     * 
     * @param upgradeUnavailabilityReason the upgradeUnavailabilityReason value to set.
     * @return the QuotaTierUpgradeEligibilityInfo object itself.
     */
    public QuotaTierUpgradeEligibilityInfo withUpgradeUnavailabilityReason(String upgradeUnavailabilityReason) {
        this.upgradeUnavailabilityReason = upgradeUnavailabilityReason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("nextTierName", this.nextTierName);
        jsonWriter.writeStringField("upgradeAvailabilityStatus",
            this.upgradeAvailabilityStatus == null ? null : this.upgradeAvailabilityStatus.toString());
        jsonWriter.writeStringField("upgradeApplicableDate",
            this.upgradeApplicableDate == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.upgradeApplicableDate));
        jsonWriter.writeStringField("upgradeUnavailabilityReason", this.upgradeUnavailabilityReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QuotaTierUpgradeEligibilityInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QuotaTierUpgradeEligibilityInfo if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QuotaTierUpgradeEligibilityInfo.
     */
    public static QuotaTierUpgradeEligibilityInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QuotaTierUpgradeEligibilityInfo deserializedQuotaTierUpgradeEligibilityInfo
                = new QuotaTierUpgradeEligibilityInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nextTierName".equals(fieldName)) {
                    deserializedQuotaTierUpgradeEligibilityInfo.nextTierName = reader.getString();
                } else if ("upgradeAvailabilityStatus".equals(fieldName)) {
                    deserializedQuotaTierUpgradeEligibilityInfo.upgradeAvailabilityStatus
                        = UpgradeAvailabilityStatus.fromString(reader.getString());
                } else if ("upgradeApplicableDate".equals(fieldName)) {
                    deserializedQuotaTierUpgradeEligibilityInfo.upgradeApplicableDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("upgradeUnavailabilityReason".equals(fieldName)) {
                    deserializedQuotaTierUpgradeEligibilityInfo.upgradeUnavailabilityReason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQuotaTierUpgradeEligibilityInfo;
        });
    }
}
