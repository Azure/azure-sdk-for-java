// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.ProjectConnectionsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.ConnectionPropertiesV2BasicResourceInner;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionPropertiesV2BasicResource;
import com.azure.resourcemanager.cognitiveservices.models.ConnectionUpdateContent;
import com.azure.resourcemanager.cognitiveservices.models.ProjectConnections;

public final class ProjectConnectionsImpl implements ProjectConnections {
    private static final ClientLogger LOGGER = new ClientLogger(ProjectConnectionsImpl.class);

    private final ProjectConnectionsClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public ProjectConnectionsImpl(ProjectConnectionsClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String accountName, String projectName,
        String connectionName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, accountName, projectName, connectionName, context);
    }

    public void delete(String resourceGroupName, String accountName, String projectName, String connectionName) {
        this.serviceClient().delete(resourceGroupName, accountName, projectName, connectionName);
    }

    public Response<ConnectionPropertiesV2BasicResource> getWithResponse(String resourceGroupName, String accountName,
        String projectName, String connectionName, Context context) {
        Response<ConnectionPropertiesV2BasicResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, accountName, projectName, connectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectionPropertiesV2BasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionPropertiesV2BasicResource get(String resourceGroupName, String accountName, String projectName,
        String connectionName) {
        ConnectionPropertiesV2BasicResourceInner inner
            = this.serviceClient().get(resourceGroupName, accountName, projectName, connectionName);
        if (inner != null) {
            return new ConnectionPropertiesV2BasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionPropertiesV2BasicResource> updateWithResponse(String resourceGroupName,
        String accountName, String projectName, String connectionName, ConnectionUpdateContent connection,
        Context context) {
        Response<ConnectionPropertiesV2BasicResourceInner> inner = this.serviceClient()
            .updateWithResponse(resourceGroupName, accountName, projectName, connectionName, connection, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectionPropertiesV2BasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionPropertiesV2BasicResource update(String resourceGroupName, String accountName, String projectName,
        String connectionName) {
        ConnectionPropertiesV2BasicResourceInner inner
            = this.serviceClient().update(resourceGroupName, accountName, projectName, connectionName);
        if (inner != null) {
            return new ConnectionPropertiesV2BasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionPropertiesV2BasicResource> createWithResponse(String resourceGroupName,
        String accountName, String projectName, String connectionName,
        ConnectionPropertiesV2BasicResourceInner connection, Context context) {
        Response<ConnectionPropertiesV2BasicResourceInner> inner = this.serviceClient()
            .createWithResponse(resourceGroupName, accountName, projectName, connectionName, connection, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ConnectionPropertiesV2BasicResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ConnectionPropertiesV2BasicResource create(String resourceGroupName, String accountName, String projectName,
        String connectionName) {
        ConnectionPropertiesV2BasicResourceInner inner
            = this.serviceClient().create(resourceGroupName, accountName, projectName, connectionName);
        if (inner != null) {
            return new ConnectionPropertiesV2BasicResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ConnectionPropertiesV2BasicResource> list(String resourceGroupName, String accountName,
        String projectName) {
        PagedIterable<ConnectionPropertiesV2BasicResourceInner> inner
            = this.serviceClient().list(resourceGroupName, accountName, projectName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ConnectionPropertiesV2BasicResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectionPropertiesV2BasicResource> list(String resourceGroupName, String accountName,
        String projectName, String target, String category, Boolean includeAll, Context context) {
        PagedIterable<ConnectionPropertiesV2BasicResourceInner> inner = this.serviceClient()
            .list(resourceGroupName, accountName, projectName, target, category, includeAll, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new ConnectionPropertiesV2BasicResourceImpl(inner1, this.manager()));
    }

    private ProjectConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }
}
