// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.RaiBlocklistItemsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistInner;
import com.azure.resourcemanager.cognitiveservices.fluent.models.RaiBlocklistItemInner;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklist;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItem;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItemBulkRequest;
import com.azure.resourcemanager.cognitiveservices.models.RaiBlocklistItems;
import java.util.List;

public final class RaiBlocklistItemsImpl implements RaiBlocklistItems {
    private static final ClientLogger LOGGER = new ClientLogger(RaiBlocklistItemsImpl.class);

    private final RaiBlocklistItemsClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public RaiBlocklistItemsImpl(RaiBlocklistItemsClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RaiBlocklistItem> list(String resourceGroupName, String accountName, String raiBlocklistName) {
        PagedIterable<RaiBlocklistItemInner> inner
            = this.serviceClient().list(resourceGroupName, accountName, raiBlocklistName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RaiBlocklistItemImpl(inner1, this.manager()));
    }

    public PagedIterable<RaiBlocklistItem> list(String resourceGroupName, String accountName, String raiBlocklistName,
        Context context) {
        PagedIterable<RaiBlocklistItemInner> inner
            = this.serviceClient().list(resourceGroupName, accountName, raiBlocklistName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new RaiBlocklistItemImpl(inner1, this.manager()));
    }

    public Response<RaiBlocklistItem> getWithResponse(String resourceGroupName, String accountName,
        String raiBlocklistName, String raiBlocklistItemName, Context context) {
        Response<RaiBlocklistItemInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RaiBlocklistItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RaiBlocklistItem get(String resourceGroupName, String accountName, String raiBlocklistName,
        String raiBlocklistItemName) {
        RaiBlocklistItemInner inner
            = this.serviceClient().get(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName);
        if (inner != null) {
            return new RaiBlocklistItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String accountName, String raiBlocklistName,
        String raiBlocklistItemName) {
        this.serviceClient().delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName);
    }

    public void delete(String resourceGroupName, String accountName, String raiBlocklistName,
        String raiBlocklistItemName, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
    }

    public Response<RaiBlocklist> batchAddWithResponse(String resourceGroupName, String accountName,
        String raiBlocklistName, List<RaiBlocklistItemBulkRequest> raiBlocklistItems, Context context) {
        Response<RaiBlocklistInner> inner = this.serviceClient()
            .batchAddWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItems, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RaiBlocklistImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RaiBlocklist batchAdd(String resourceGroupName, String accountName, String raiBlocklistName,
        List<RaiBlocklistItemBulkRequest> raiBlocklistItems) {
        RaiBlocklistInner inner
            = this.serviceClient().batchAdd(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItems);
        if (inner != null) {
            return new RaiBlocklistImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> batchDeleteWithResponse(String resourceGroupName, String accountName, String raiBlocklistName,
        Object raiBlocklistItemsNames, Context context) {
        return this.serviceClient()
            .batchDeleteWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemsNames, context);
    }

    public void batchDelete(String resourceGroupName, String accountName, String raiBlocklistName,
        Object raiBlocklistItemsNames) {
        this.serviceClient().batchDelete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemsNames);
    }

    public RaiBlocklistItem getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, Context.NONE)
            .getValue();
    }

    public Response<RaiBlocklistItem> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        this.delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String raiBlocklistName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklists");
        if (raiBlocklistName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklists'.", id)));
        }
        String raiBlocklistItemName = ResourceManagerUtils.getValueFromIdByName(id, "raiBlocklistItems");
        if (raiBlocklistItemName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'raiBlocklistItems'.", id)));
        }
        this.delete(resourceGroupName, accountName, raiBlocklistName, raiBlocklistItemName, context);
    }

    private RaiBlocklistItemsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }

    public RaiBlocklistItemImpl define(String name) {
        return new RaiBlocklistItemImpl(name, this.manager());
    }
}
