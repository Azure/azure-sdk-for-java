// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of Cognitive Services account deployment model.
 */
@Fluent
public class DeploymentModel implements JsonSerializable<DeploymentModel> {
    /*
     * Deployment model publisher.
     */
    private String publisher;

    /*
     * Deployment model format.
     */
    private String format;

    /*
     * Deployment model name.
     */
    private String name;

    /*
     * Optional. Deployment model version. If version is not specified, a default version will be assigned. The default
     * version is different for different models and might change when there is new version available for a model.
     * Default version for a model could be found from list models API.
     */
    private String version;

    /*
     * Optional. Deployment model source ARM resource ID.
     */
    private String source;

    /*
     * Optional. Source of the model, another Microsoft.CognitiveServices accounts ARM resource ID.
     */
    private String sourceAccount;

    /*
     * The call rate limit Cognitive Services account.
     */
    private CallRateLimit callRateLimit;

    /**
     * Creates an instance of DeploymentModel class.
     */
    public DeploymentModel() {
    }

    /**
     * Get the publisher property: Deployment model publisher.
     * 
     * @return the publisher value.
     */
    public String publisher() {
        return this.publisher;
    }

    /**
     * Set the publisher property: Deployment model publisher.
     * 
     * @param publisher the publisher value to set.
     * @return the DeploymentModel object itself.
     */
    public DeploymentModel withPublisher(String publisher) {
        this.publisher = publisher;
        return this;
    }

    /**
     * Get the format property: Deployment model format.
     * 
     * @return the format value.
     */
    public String format() {
        return this.format;
    }

    /**
     * Set the format property: Deployment model format.
     * 
     * @param format the format value to set.
     * @return the DeploymentModel object itself.
     */
    public DeploymentModel withFormat(String format) {
        this.format = format;
        return this;
    }

    /**
     * Get the name property: Deployment model name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Deployment model name.
     * 
     * @param name the name value to set.
     * @return the DeploymentModel object itself.
     */
    public DeploymentModel withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the version property: Optional. Deployment model version. If version is not specified, a default version will
     * be assigned. The default version is different for different models and might change when there is new version
     * available for a model. Default version for a model could be found from list models API.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Optional. Deployment model version. If version is not specified, a default version will
     * be assigned. The default version is different for different models and might change when there is new version
     * available for a model. Default version for a model could be found from list models API.
     * 
     * @param version the version value to set.
     * @return the DeploymentModel object itself.
     */
    public DeploymentModel withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the source property: Optional. Deployment model source ARM resource ID.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Optional. Deployment model source ARM resource ID.
     * 
     * @param source the source value to set.
     * @return the DeploymentModel object itself.
     */
    public DeploymentModel withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the sourceAccount property: Optional. Source of the model, another Microsoft.CognitiveServices accounts ARM
     * resource ID.
     * 
     * @return the sourceAccount value.
     */
    public String sourceAccount() {
        return this.sourceAccount;
    }

    /**
     * Set the sourceAccount property: Optional. Source of the model, another Microsoft.CognitiveServices accounts ARM
     * resource ID.
     * 
     * @param sourceAccount the sourceAccount value to set.
     * @return the DeploymentModel object itself.
     */
    public DeploymentModel withSourceAccount(String sourceAccount) {
        this.sourceAccount = sourceAccount;
        return this;
    }

    /**
     * Get the callRateLimit property: The call rate limit Cognitive Services account.
     * 
     * @return the callRateLimit value.
     */
    public CallRateLimit callRateLimit() {
        return this.callRateLimit;
    }

    /**
     * Set the callRateLimit property: The call rate limit Cognitive Services account.
     * 
     * @param callRateLimit the callRateLimit value to set.
     * @return the DeploymentModel object itself.
     */
    DeploymentModel withCallRateLimit(CallRateLimit callRateLimit) {
        this.callRateLimit = callRateLimit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (callRateLimit() != null) {
            callRateLimit().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("publisher", this.publisher);
        jsonWriter.writeStringField("format", this.format);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("sourceAccount", this.sourceAccount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeploymentModel from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeploymentModel if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DeploymentModel.
     */
    public static DeploymentModel fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeploymentModel deserializedDeploymentModel = new DeploymentModel();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("publisher".equals(fieldName)) {
                    deserializedDeploymentModel.publisher = reader.getString();
                } else if ("format".equals(fieldName)) {
                    deserializedDeploymentModel.format = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDeploymentModel.name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedDeploymentModel.version = reader.getString();
                } else if ("source".equals(fieldName)) {
                    deserializedDeploymentModel.source = reader.getString();
                } else if ("sourceAccount".equals(fieldName)) {
                    deserializedDeploymentModel.sourceAccount = reader.getString();
                } else if ("callRateLimit".equals(fieldName)) {
                    deserializedDeploymentModel.callRateLimit = CallRateLimit.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDeploymentModel;
        });
    }
}
