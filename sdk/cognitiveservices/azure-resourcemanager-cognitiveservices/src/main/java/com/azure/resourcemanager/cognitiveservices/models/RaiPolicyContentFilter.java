// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure OpenAI Content Filter.
 */
@Fluent
public final class RaiPolicyContentFilter implements JsonSerializable<RaiPolicyContentFilter> {
    /*
     * Name of ContentFilter.
     */
    private String name;

    /*
     * If the ContentFilter is enabled.
     */
    private Boolean enabled;

    /*
     * Level at which content is filtered.
     */
    private ContentLevel severityThreshold;

    /*
     * If blocking would occur.
     */
    private Boolean blocking;

    /*
     * Content source to apply the Content Filters.
     */
    private RaiPolicyContentSource source;

    /**
     * Creates an instance of RaiPolicyContentFilter class.
     */
    public RaiPolicyContentFilter() {
    }

    /**
     * Get the name property: Name of ContentFilter.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of ContentFilter.
     * 
     * @param name the name value to set.
     * @return the RaiPolicyContentFilter object itself.
     */
    public RaiPolicyContentFilter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the enabled property: If the ContentFilter is enabled.
     * 
     * @return the enabled value.
     */
    public Boolean enabled() {
        return this.enabled;
    }

    /**
     * Set the enabled property: If the ContentFilter is enabled.
     * 
     * @param enabled the enabled value to set.
     * @return the RaiPolicyContentFilter object itself.
     */
    public RaiPolicyContentFilter withEnabled(Boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    /**
     * Get the severityThreshold property: Level at which content is filtered.
     * 
     * @return the severityThreshold value.
     */
    public ContentLevel severityThreshold() {
        return this.severityThreshold;
    }

    /**
     * Set the severityThreshold property: Level at which content is filtered.
     * 
     * @param severityThreshold the severityThreshold value to set.
     * @return the RaiPolicyContentFilter object itself.
     */
    public RaiPolicyContentFilter withSeverityThreshold(ContentLevel severityThreshold) {
        this.severityThreshold = severityThreshold;
        return this;
    }

    /**
     * Get the blocking property: If blocking would occur.
     * 
     * @return the blocking value.
     */
    public Boolean blocking() {
        return this.blocking;
    }

    /**
     * Set the blocking property: If blocking would occur.
     * 
     * @param blocking the blocking value to set.
     * @return the RaiPolicyContentFilter object itself.
     */
    public RaiPolicyContentFilter withBlocking(Boolean blocking) {
        this.blocking = blocking;
        return this;
    }

    /**
     * Get the source property: Content source to apply the Content Filters.
     * 
     * @return the source value.
     */
    public RaiPolicyContentSource source() {
        return this.source;
    }

    /**
     * Set the source property: Content source to apply the Content Filters.
     * 
     * @param source the source value to set.
     * @return the RaiPolicyContentFilter object itself.
     */
    public RaiPolicyContentFilter withSource(RaiPolicyContentSource source) {
        this.source = source;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeBooleanField("enabled", this.enabled);
        jsonWriter.writeStringField("severityThreshold",
            this.severityThreshold == null ? null : this.severityThreshold.toString());
        jsonWriter.writeBooleanField("blocking", this.blocking);
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiPolicyContentFilter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiPolicyContentFilter if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RaiPolicyContentFilter.
     */
    public static RaiPolicyContentFilter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiPolicyContentFilter deserializedRaiPolicyContentFilter = new RaiPolicyContentFilter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedRaiPolicyContentFilter.name = reader.getString();
                } else if ("enabled".equals(fieldName)) {
                    deserializedRaiPolicyContentFilter.enabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("severityThreshold".equals(fieldName)) {
                    deserializedRaiPolicyContentFilter.severityThreshold = ContentLevel.fromString(reader.getString());
                } else if ("blocking".equals(fieldName)) {
                    deserializedRaiPolicyContentFilter.blocking = reader.getNullable(JsonReader::getBoolean);
                } else if ("source".equals(fieldName)) {
                    deserializedRaiPolicyContentFilter.source = RaiPolicyContentSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRaiPolicyContentFilter;
        });
    }
}
