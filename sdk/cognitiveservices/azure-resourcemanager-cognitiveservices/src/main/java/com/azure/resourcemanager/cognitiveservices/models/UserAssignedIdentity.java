// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** User-assigned managed identity. */
@Fluent
public class UserAssignedIdentity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(UserAssignedIdentity.class);

    /*
     * Azure Active Directory principal ID associated with this Identity.
     */
    @JsonProperty(value = "principalId")
    private String principalId;

    /*
     * Client App Id associated with this identity.
     */
    @JsonProperty(value = "clientId")
    private String clientId;

    /**
     * Get the principalId property: Azure Active Directory principal ID associated with this Identity.
     *
     * @return the principalId value.
     */
    public String principalId() {
        return this.principalId;
    }

    /**
     * Set the principalId property: Azure Active Directory principal ID associated with this Identity.
     *
     * @param principalId the principalId value to set.
     * @return the UserAssignedIdentity object itself.
     */
    public UserAssignedIdentity withPrincipalId(String principalId) {
        this.principalId = principalId;
        return this;
    }

    /**
     * Get the clientId property: Client App Id associated with this identity.
     *
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client App Id associated with this identity.
     *
     * @param clientId the clientId value to set.
     * @return the UserAssignedIdentity object itself.
     */
    public UserAssignedIdentity withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
