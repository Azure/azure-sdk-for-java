// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Check SKU availability parameter.
 */
@Fluent
public final class CheckSkuAvailabilityParameter implements JsonSerializable<CheckSkuAvailabilityParameter> {
    /*
     * The SKU of the resource.
     */
    private List<String> skus;

    /*
     * The kind (type) of cognitive service account.
     */
    private String kind;

    /*
     * The Type of the resource.
     */
    private String type;

    /**
     * Creates an instance of CheckSkuAvailabilityParameter class.
     */
    public CheckSkuAvailabilityParameter() {
    }

    /**
     * Get the skus property: The SKU of the resource.
     * 
     * @return the skus value.
     */
    public List<String> skus() {
        return this.skus;
    }

    /**
     * Set the skus property: The SKU of the resource.
     * 
     * @param skus the skus value to set.
     * @return the CheckSkuAvailabilityParameter object itself.
     */
    public CheckSkuAvailabilityParameter withSkus(List<String> skus) {
        this.skus = skus;
        return this;
    }

    /**
     * Get the kind property: The kind (type) of cognitive service account.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The kind (type) of cognitive service account.
     * 
     * @param kind the kind value to set.
     * @return the CheckSkuAvailabilityParameter object itself.
     */
    public CheckSkuAvailabilityParameter withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the type property: The Type of the resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The Type of the resource.
     * 
     * @param type the type value to set.
     * @return the CheckSkuAvailabilityParameter object itself.
     */
    public CheckSkuAvailabilityParameter withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (skus() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property skus in model CheckSkuAvailabilityParameter"));
        }
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property kind in model CheckSkuAvailabilityParameter"));
        }
        if (type() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property type in model CheckSkuAvailabilityParameter"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CheckSkuAvailabilityParameter.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("skus", this.skus, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("type", this.type);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CheckSkuAvailabilityParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CheckSkuAvailabilityParameter if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CheckSkuAvailabilityParameter.
     */
    public static CheckSkuAvailabilityParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CheckSkuAvailabilityParameter deserializedCheckSkuAvailabilityParameter
                = new CheckSkuAvailabilityParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("skus".equals(fieldName)) {
                    List<String> skus = reader.readArray(reader1 -> reader1.getString());
                    deserializedCheckSkuAvailabilityParameter.skus = skus;
                } else if ("kind".equals(fieldName)) {
                    deserializedCheckSkuAvailabilityParameter.kind = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedCheckSkuAvailabilityParameter.type = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCheckSkuAvailabilityParameter;
        });
    }
}
