// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties to EncryptionScope.
 */
@Fluent
public final class EncryptionScopeProperties extends Encryption {
    /*
     * Gets the status of the resource at the time the operation was called.
     */
    private EncryptionScopeProvisioningState provisioningState;

    /*
     * The encryptionScope state.
     */
    private EncryptionScopeState state;

    /**
     * Creates an instance of EncryptionScopeProperties class.
     */
    public EncryptionScopeProperties() {
    }

    /**
     * Get the provisioningState property: Gets the status of the resource at the time the operation was called.
     * 
     * @return the provisioningState value.
     */
    public EncryptionScopeProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the state property: The encryptionScope state.
     * 
     * @return the state value.
     */
    public EncryptionScopeState state() {
        return this.state;
    }

    /**
     * Set the state property: The encryptionScope state.
     * 
     * @param state the state value to set.
     * @return the EncryptionScopeProperties object itself.
     */
    public EncryptionScopeProperties withState(EncryptionScopeState state) {
        this.state = state;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EncryptionScopeProperties withKeyVaultProperties(KeyVaultProperties keyVaultProperties) {
        super.withKeyVaultProperties(keyVaultProperties);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EncryptionScopeProperties withKeySource(KeySource keySource) {
        super.withKeySource(keySource);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (keyVaultProperties() != null) {
            keyVaultProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("keyVaultProperties", keyVaultProperties());
        jsonWriter.writeStringField("keySource", keySource() == null ? null : keySource().toString());
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionScopeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionScopeProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionScopeProperties.
     */
    public static EncryptionScopeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionScopeProperties deserializedEncryptionScopeProperties = new EncryptionScopeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyVaultProperties".equals(fieldName)) {
                    deserializedEncryptionScopeProperties.withKeyVaultProperties(KeyVaultProperties.fromJson(reader));
                } else if ("keySource".equals(fieldName)) {
                    deserializedEncryptionScopeProperties.withKeySource(KeySource.fromString(reader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedEncryptionScopeProperties.provisioningState
                        = EncryptionScopeProvisioningState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedEncryptionScopeProperties.state = EncryptionScopeState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionScopeProperties;
        });
    }
}
