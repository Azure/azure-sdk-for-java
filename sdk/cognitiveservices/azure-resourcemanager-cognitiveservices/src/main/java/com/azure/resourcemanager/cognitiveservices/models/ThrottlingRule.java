// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The ThrottlingRule model.
 */
@Fluent
public final class ThrottlingRule implements JsonSerializable<ThrottlingRule> {
    /*
     * The key property.
     */
    private String key;

    /*
     * The renewalPeriod property.
     */
    private Float renewalPeriod;

    /*
     * The count property.
     */
    private Float count;

    /*
     * The minCount property.
     */
    private Float minCount;

    /*
     * The dynamicThrottlingEnabled property.
     */
    private Boolean dynamicThrottlingEnabled;

    /*
     * The matchPatterns property.
     */
    private List<RequestMatchPattern> matchPatterns;

    /**
     * Creates an instance of ThrottlingRule class.
     */
    public ThrottlingRule() {
    }

    /**
     * Get the key property: The key property.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: The key property.
     * 
     * @param key the key value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the renewalPeriod property: The renewalPeriod property.
     * 
     * @return the renewalPeriod value.
     */
    public Float renewalPeriod() {
        return this.renewalPeriod;
    }

    /**
     * Set the renewalPeriod property: The renewalPeriod property.
     * 
     * @param renewalPeriod the renewalPeriod value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withRenewalPeriod(Float renewalPeriod) {
        this.renewalPeriod = renewalPeriod;
        return this;
    }

    /**
     * Get the count property: The count property.
     * 
     * @return the count value.
     */
    public Float count() {
        return this.count;
    }

    /**
     * Set the count property: The count property.
     * 
     * @param count the count value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withCount(Float count) {
        this.count = count;
        return this;
    }

    /**
     * Get the minCount property: The minCount property.
     * 
     * @return the minCount value.
     */
    public Float minCount() {
        return this.minCount;
    }

    /**
     * Set the minCount property: The minCount property.
     * 
     * @param minCount the minCount value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withMinCount(Float minCount) {
        this.minCount = minCount;
        return this;
    }

    /**
     * Get the dynamicThrottlingEnabled property: The dynamicThrottlingEnabled property.
     * 
     * @return the dynamicThrottlingEnabled value.
     */
    public Boolean dynamicThrottlingEnabled() {
        return this.dynamicThrottlingEnabled;
    }

    /**
     * Set the dynamicThrottlingEnabled property: The dynamicThrottlingEnabled property.
     * 
     * @param dynamicThrottlingEnabled the dynamicThrottlingEnabled value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withDynamicThrottlingEnabled(Boolean dynamicThrottlingEnabled) {
        this.dynamicThrottlingEnabled = dynamicThrottlingEnabled;
        return this;
    }

    /**
     * Get the matchPatterns property: The matchPatterns property.
     * 
     * @return the matchPatterns value.
     */
    public List<RequestMatchPattern> matchPatterns() {
        return this.matchPatterns;
    }

    /**
     * Set the matchPatterns property: The matchPatterns property.
     * 
     * @param matchPatterns the matchPatterns value to set.
     * @return the ThrottlingRule object itself.
     */
    public ThrottlingRule withMatchPatterns(List<RequestMatchPattern> matchPatterns) {
        this.matchPatterns = matchPatterns;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (matchPatterns() != null) {
            matchPatterns().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeNumberField("renewalPeriod", this.renewalPeriod);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeNumberField("minCount", this.minCount);
        jsonWriter.writeBooleanField("dynamicThrottlingEnabled", this.dynamicThrottlingEnabled);
        jsonWriter.writeArrayField("matchPatterns", this.matchPatterns, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ThrottlingRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ThrottlingRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ThrottlingRule.
     */
    public static ThrottlingRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ThrottlingRule deserializedThrottlingRule = new ThrottlingRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedThrottlingRule.key = reader.getString();
                } else if ("renewalPeriod".equals(fieldName)) {
                    deserializedThrottlingRule.renewalPeriod = reader.getNullable(JsonReader::getFloat);
                } else if ("count".equals(fieldName)) {
                    deserializedThrottlingRule.count = reader.getNullable(JsonReader::getFloat);
                } else if ("minCount".equals(fieldName)) {
                    deserializedThrottlingRule.minCount = reader.getNullable(JsonReader::getFloat);
                } else if ("dynamicThrottlingEnabled".equals(fieldName)) {
                    deserializedThrottlingRule.dynamicThrottlingEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("matchPatterns".equals(fieldName)) {
                    List<RequestMatchPattern> matchPatterns
                        = reader.readArray(reader1 -> RequestMatchPattern.fromJson(reader1));
                    deserializedThrottlingRule.matchPatterns = matchPatterns;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedThrottlingRule;
        });
    }
}
