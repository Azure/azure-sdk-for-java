// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The usage data for a usage request.
 */
@Fluent
public final class Usage implements JsonSerializable<Usage> {
    /*
     * The unit of the metric.
     */
    private UnitType unit;

    /*
     * The name information for the metric.
     */
    private MetricName name;

    /*
     * The quota period used to summarize the usage values.
     */
    private String quotaPeriod;

    /*
     * Maximum value for this metric.
     */
    private Double limit;

    /*
     * Current value for this metric.
     */
    private Double currentValue;

    /*
     * Next reset time for current quota.
     */
    private String nextResetTime;

    /*
     * Cognitive Services account quota usage status.
     */
    private QuotaUsageStatus status;

    /**
     * Creates an instance of Usage class.
     */
    public Usage() {
    }

    /**
     * Get the unit property: The unit of the metric.
     * 
     * @return the unit value.
     */
    public UnitType unit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit of the metric.
     * 
     * @param unit the unit value to set.
     * @return the Usage object itself.
     */
    public Usage withUnit(UnitType unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the name property: The name information for the metric.
     * 
     * @return the name value.
     */
    public MetricName name() {
        return this.name;
    }

    /**
     * Set the name property: The name information for the metric.
     * 
     * @param name the name value to set.
     * @return the Usage object itself.
     */
    public Usage withName(MetricName name) {
        this.name = name;
        return this;
    }

    /**
     * Get the quotaPeriod property: The quota period used to summarize the usage values.
     * 
     * @return the quotaPeriod value.
     */
    public String quotaPeriod() {
        return this.quotaPeriod;
    }

    /**
     * Set the quotaPeriod property: The quota period used to summarize the usage values.
     * 
     * @param quotaPeriod the quotaPeriod value to set.
     * @return the Usage object itself.
     */
    public Usage withQuotaPeriod(String quotaPeriod) {
        this.quotaPeriod = quotaPeriod;
        return this;
    }

    /**
     * Get the limit property: Maximum value for this metric.
     * 
     * @return the limit value.
     */
    public Double limit() {
        return this.limit;
    }

    /**
     * Set the limit property: Maximum value for this metric.
     * 
     * @param limit the limit value to set.
     * @return the Usage object itself.
     */
    public Usage withLimit(Double limit) {
        this.limit = limit;
        return this;
    }

    /**
     * Get the currentValue property: Current value for this metric.
     * 
     * @return the currentValue value.
     */
    public Double currentValue() {
        return this.currentValue;
    }

    /**
     * Set the currentValue property: Current value for this metric.
     * 
     * @param currentValue the currentValue value to set.
     * @return the Usage object itself.
     */
    public Usage withCurrentValue(Double currentValue) {
        this.currentValue = currentValue;
        return this;
    }

    /**
     * Get the nextResetTime property: Next reset time for current quota.
     * 
     * @return the nextResetTime value.
     */
    public String nextResetTime() {
        return this.nextResetTime;
    }

    /**
     * Set the nextResetTime property: Next reset time for current quota.
     * 
     * @param nextResetTime the nextResetTime value to set.
     * @return the Usage object itself.
     */
    public Usage withNextResetTime(String nextResetTime) {
        this.nextResetTime = nextResetTime;
        return this;
    }

    /**
     * Get the status property: Cognitive Services account quota usage status.
     * 
     * @return the status value.
     */
    public QuotaUsageStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Cognitive Services account quota usage status.
     * 
     * @param status the status value to set.
     * @return the Usage object itself.
     */
    public Usage withStatus(QuotaUsageStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() != null) {
            name().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("unit", this.unit == null ? null : this.unit.toString());
        jsonWriter.writeJsonField("name", this.name);
        jsonWriter.writeStringField("quotaPeriod", this.quotaPeriod);
        jsonWriter.writeNumberField("limit", this.limit);
        jsonWriter.writeNumberField("currentValue", this.currentValue);
        jsonWriter.writeStringField("nextResetTime", this.nextResetTime);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Usage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Usage if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Usage.
     */
    public static Usage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Usage deserializedUsage = new Usage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("unit".equals(fieldName)) {
                    deserializedUsage.unit = UnitType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedUsage.name = MetricName.fromJson(reader);
                } else if ("quotaPeriod".equals(fieldName)) {
                    deserializedUsage.quotaPeriod = reader.getString();
                } else if ("limit".equals(fieldName)) {
                    deserializedUsage.limit = reader.getNullable(JsonReader::getDouble);
                } else if ("currentValue".equals(fieldName)) {
                    deserializedUsage.currentValue = reader.getNullable(JsonReader::getDouble);
                } else if ("nextResetTime".equals(fieldName)) {
                    deserializedUsage.nextResetTime = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedUsage.status = QuotaUsageStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUsage;
        });
    }
}
