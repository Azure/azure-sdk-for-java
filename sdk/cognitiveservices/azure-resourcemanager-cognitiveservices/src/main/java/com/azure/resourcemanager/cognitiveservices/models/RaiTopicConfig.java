// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure OpenAI RAI topic config.
 */
@Fluent
public class RaiTopicConfig implements JsonSerializable<RaiTopicConfig> {
    /*
     * Name of RAI topic.
     */
    private String topicName;

    /*
     * If blocking would occur.
     */
    private Boolean blocking;

    /**
     * Creates an instance of RaiTopicConfig class.
     */
    public RaiTopicConfig() {
    }

    /**
     * Get the topicName property: Name of RAI topic.
     * 
     * @return the topicName value.
     */
    public String topicName() {
        return this.topicName;
    }

    /**
     * Set the topicName property: Name of RAI topic.
     * 
     * @param topicName the topicName value to set.
     * @return the RaiTopicConfig object itself.
     */
    public RaiTopicConfig withTopicName(String topicName) {
        this.topicName = topicName;
        return this;
    }

    /**
     * Get the blocking property: If blocking would occur.
     * 
     * @return the blocking value.
     */
    public Boolean blocking() {
        return this.blocking;
    }

    /**
     * Set the blocking property: If blocking would occur.
     * 
     * @param blocking the blocking value to set.
     * @return the RaiTopicConfig object itself.
     */
    public RaiTopicConfig withBlocking(Boolean blocking) {
        this.blocking = blocking;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topicName", this.topicName);
        jsonWriter.writeBooleanField("blocking", this.blocking);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiTopicConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiTopicConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RaiTopicConfig.
     */
    public static RaiTopicConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiTopicConfig deserializedRaiTopicConfig = new RaiTopicConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topicName".equals(fieldName)) {
                    deserializedRaiTopicConfig.topicName = reader.getString();
                } else if ("blocking".equals(fieldName)) {
                    deserializedRaiTopicConfig.blocking = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRaiTopicConfig;
        });
    }
}
