// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SKU availability.
 */
@Fluent
public final class SkuAvailability implements JsonSerializable<SkuAvailability> {
    /*
     * The Kind of the resource.
     */
    private String kind;

    /*
     * The Type of the resource.
     */
    private String type;

    /*
     * The SKU of Cognitive Services account.
     */
    private String skuName;

    /*
     * Indicates the given SKU is available or not.
     */
    private Boolean skuAvailable;

    /*
     * Reason why the SKU is not available.
     */
    private String reason;

    /*
     * Additional error message.
     */
    private String message;

    /**
     * Creates an instance of SkuAvailability class.
     */
    public SkuAvailability() {
    }

    /**
     * Get the kind property: The Kind of the resource.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: The Kind of the resource.
     * 
     * @param kind the kind value to set.
     * @return the SkuAvailability object itself.
     */
    public SkuAvailability withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the type property: The Type of the resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The Type of the resource.
     * 
     * @param type the type value to set.
     * @return the SkuAvailability object itself.
     */
    public SkuAvailability withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the skuName property: The SKU of Cognitive Services account.
     * 
     * @return the skuName value.
     */
    public String skuName() {
        return this.skuName;
    }

    /**
     * Set the skuName property: The SKU of Cognitive Services account.
     * 
     * @param skuName the skuName value to set.
     * @return the SkuAvailability object itself.
     */
    public SkuAvailability withSkuName(String skuName) {
        this.skuName = skuName;
        return this;
    }

    /**
     * Get the skuAvailable property: Indicates the given SKU is available or not.
     * 
     * @return the skuAvailable value.
     */
    public Boolean skuAvailable() {
        return this.skuAvailable;
    }

    /**
     * Set the skuAvailable property: Indicates the given SKU is available or not.
     * 
     * @param skuAvailable the skuAvailable value to set.
     * @return the SkuAvailability object itself.
     */
    public SkuAvailability withSkuAvailable(Boolean skuAvailable) {
        this.skuAvailable = skuAvailable;
        return this;
    }

    /**
     * Get the reason property: Reason why the SKU is not available.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Reason why the SKU is not available.
     * 
     * @param reason the reason value to set.
     * @return the SkuAvailability object itself.
     */
    public SkuAvailability withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the message property: Additional error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: Additional error message.
     * 
     * @param message the message value to set.
     * @return the SkuAvailability object itself.
     */
    public SkuAvailability withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("skuName", this.skuName);
        jsonWriter.writeBooleanField("skuAvailable", this.skuAvailable);
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SkuAvailability from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SkuAvailability if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SkuAvailability.
     */
    public static SkuAvailability fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SkuAvailability deserializedSkuAvailability = new SkuAvailability();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedSkuAvailability.kind = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedSkuAvailability.type = reader.getString();
                } else if ("skuName".equals(fieldName)) {
                    deserializedSkuAvailability.skuName = reader.getString();
                } else if ("skuAvailable".equals(fieldName)) {
                    deserializedSkuAvailability.skuAvailable = reader.getNullable(JsonReader::getBoolean);
                } else if ("reason".equals(fieldName)) {
                    deserializedSkuAvailability.reason = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedSkuAvailability.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSkuAvailability;
        });
    }
}
