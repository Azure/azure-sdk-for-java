// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.AccountsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CognitiveServicesAccountEnumerateSkusResultInner;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CognitiveServicesAccountInner;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CognitiveServicesAccountKeysInner;
import com.azure.resourcemanager.cognitiveservices.fluent.models.UsagesResultInner;
import com.azure.resourcemanager.cognitiveservices.models.Accounts;
import com.azure.resourcemanager.cognitiveservices.models.CognitiveServicesAccount;
import com.azure.resourcemanager.cognitiveservices.models.CognitiveServicesAccountEnumerateSkusResult;
import com.azure.resourcemanager.cognitiveservices.models.CognitiveServicesAccountKeys;
import com.azure.resourcemanager.cognitiveservices.models.RegenerateKeyParameters;
import com.azure.resourcemanager.cognitiveservices.models.UsagesResult;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class AccountsImpl implements Accounts {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AccountsImpl.class);

    private final AccountsClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public AccountsImpl(
        AccountsClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String accountName) {
        this.serviceClient().delete(resourceGroupName, accountName);
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String accountName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, accountName, context);
    }

    public CognitiveServicesAccount getByResourceGroup(String resourceGroupName, String accountName) {
        CognitiveServicesAccountInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, accountName);
        if (inner != null) {
            return new CognitiveServicesAccountImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CognitiveServicesAccount> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, Context context) {
        Response<CognitiveServicesAccountInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CognitiveServicesAccountImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<CognitiveServicesAccount> listByResourceGroup(String resourceGroupName) {
        PagedIterable<CognitiveServicesAccountInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new CognitiveServicesAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<CognitiveServicesAccount> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<CognitiveServicesAccountInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new CognitiveServicesAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<CognitiveServicesAccount> list() {
        PagedIterable<CognitiveServicesAccountInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new CognitiveServicesAccountImpl(inner1, this.manager()));
    }

    public PagedIterable<CognitiveServicesAccount> list(Context context) {
        PagedIterable<CognitiveServicesAccountInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new CognitiveServicesAccountImpl(inner1, this.manager()));
    }

    public CognitiveServicesAccountKeys listKeys(String resourceGroupName, String accountName) {
        CognitiveServicesAccountKeysInner inner = this.serviceClient().listKeys(resourceGroupName, accountName);
        if (inner != null) {
            return new CognitiveServicesAccountKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CognitiveServicesAccountKeys> listKeysWithResponse(
        String resourceGroupName, String accountName, Context context) {
        Response<CognitiveServicesAccountKeysInner> inner =
            this.serviceClient().listKeysWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CognitiveServicesAccountKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CognitiveServicesAccountKeys regenerateKey(
        String resourceGroupName, String accountName, RegenerateKeyParameters parameters) {
        CognitiveServicesAccountKeysInner inner =
            this.serviceClient().regenerateKey(resourceGroupName, accountName, parameters);
        if (inner != null) {
            return new CognitiveServicesAccountKeysImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CognitiveServicesAccountKeys> regenerateKeyWithResponse(
        String resourceGroupName, String accountName, RegenerateKeyParameters parameters, Context context) {
        Response<CognitiveServicesAccountKeysInner> inner =
            this.serviceClient().regenerateKeyWithResponse(resourceGroupName, accountName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CognitiveServicesAccountKeysImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CognitiveServicesAccountEnumerateSkusResult listSkus(String resourceGroupName, String accountName) {
        CognitiveServicesAccountEnumerateSkusResultInner inner =
            this.serviceClient().listSkus(resourceGroupName, accountName);
        if (inner != null) {
            return new CognitiveServicesAccountEnumerateSkusResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CognitiveServicesAccountEnumerateSkusResult> listSkusWithResponse(
        String resourceGroupName, String accountName, Context context) {
        Response<CognitiveServicesAccountEnumerateSkusResultInner> inner =
            this.serviceClient().listSkusWithResponse(resourceGroupName, accountName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CognitiveServicesAccountEnumerateSkusResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public UsagesResult getUsages(String resourceGroupName, String accountName) {
        UsagesResultInner inner = this.serviceClient().getUsages(resourceGroupName, accountName);
        if (inner != null) {
            return new UsagesResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<UsagesResult> getUsagesWithResponse(
        String resourceGroupName, String accountName, String filter, Context context) {
        Response<UsagesResultInner> inner =
            this.serviceClient().getUsagesWithResponse(resourceGroupName, accountName, filter, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new UsagesResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CognitiveServicesAccount getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE).getValue();
    }

    public Response<CognitiveServicesAccount> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, accountName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, accountName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = Utils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, accountName, context);
    }

    private AccountsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }

    public CognitiveServicesAccountImpl define(String name) {
        return new CognitiveServicesAccountImpl(name, this.manager());
    }
}
