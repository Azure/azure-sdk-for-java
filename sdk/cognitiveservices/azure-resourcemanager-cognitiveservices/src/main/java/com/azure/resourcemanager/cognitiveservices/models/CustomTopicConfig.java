// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the source to which filter applies.
 */
@Fluent
public final class CustomTopicConfig extends RaiTopicConfig {
    /*
     * Content source to apply the Content Filters.
     */
    private RaiPolicyContentSource source;

    /**
     * Creates an instance of CustomTopicConfig class.
     */
    public CustomTopicConfig() {
    }

    /**
     * Get the source property: Content source to apply the Content Filters.
     * 
     * @return the source value.
     */
    public RaiPolicyContentSource source() {
        return this.source;
    }

    /**
     * Set the source property: Content source to apply the Content Filters.
     * 
     * @param source the source value to set.
     * @return the CustomTopicConfig object itself.
     */
    public CustomTopicConfig withSource(RaiPolicyContentSource source) {
        this.source = source;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomTopicConfig withTopicName(String topicName) {
        super.withTopicName(topicName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomTopicConfig withBlocking(Boolean blocking) {
        super.withBlocking(blocking);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topicName", topicName());
        jsonWriter.writeBooleanField("blocking", blocking());
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomTopicConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomTopicConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomTopicConfig.
     */
    public static CustomTopicConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomTopicConfig deserializedCustomTopicConfig = new CustomTopicConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topicName".equals(fieldName)) {
                    deserializedCustomTopicConfig.withTopicName(reader.getString());
                } else if ("blocking".equals(fieldName)) {
                    deserializedCustomTopicConfig.withBlocking(reader.getNullable(JsonReader::getBoolean));
                } else if ("source".equals(fieldName)) {
                    deserializedCustomTopicConfig.source = RaiPolicyContentSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomTopicConfig;
        });
    }
}
