// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Gets or sets the source to which filter applies.
 */
@Fluent
public final class CustomBlocklistConfig extends RaiBlocklistConfig {
    /*
     * Content source to apply the Content Filters.
     */
    private RaiPolicyContentSource source;

    /**
     * Creates an instance of CustomBlocklistConfig class.
     */
    public CustomBlocklistConfig() {
    }

    /**
     * Get the source property: Content source to apply the Content Filters.
     * 
     * @return the source value.
     */
    public RaiPolicyContentSource source() {
        return this.source;
    }

    /**
     * Set the source property: Content source to apply the Content Filters.
     * 
     * @param source the source value to set.
     * @return the CustomBlocklistConfig object itself.
     */
    public CustomBlocklistConfig withSource(RaiPolicyContentSource source) {
        this.source = source;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomBlocklistConfig withBlocklistName(String blocklistName) {
        super.withBlocklistName(blocklistName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CustomBlocklistConfig withBlocking(Boolean blocking) {
        super.withBlocking(blocking);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("blocklistName", blocklistName());
        jsonWriter.writeBooleanField("blocking", blocking());
        jsonWriter.writeStringField("source", this.source == null ? null : this.source.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomBlocklistConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomBlocklistConfig if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomBlocklistConfig.
     */
    public static CustomBlocklistConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomBlocklistConfig deserializedCustomBlocklistConfig = new CustomBlocklistConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("blocklistName".equals(fieldName)) {
                    deserializedCustomBlocklistConfig.withBlocklistName(reader.getString());
                } else if ("blocking".equals(fieldName)) {
                    deserializedCustomBlocklistConfig.withBlocking(reader.getNullable(JsonReader::getBoolean));
                } else if ("source".equals(fieldName)) {
                    deserializedCustomBlocklistConfig.source = RaiPolicyContentSource.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomBlocklistConfig;
        });
    }
}
