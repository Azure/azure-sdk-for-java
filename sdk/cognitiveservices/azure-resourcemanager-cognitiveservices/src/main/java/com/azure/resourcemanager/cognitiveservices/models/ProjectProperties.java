// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Properties of Cognitive Services Project'.
 */
@Fluent
public final class ProjectProperties implements JsonSerializable<ProjectProperties> {
    /*
     * Gets the status of the cognitive services project at the time the operation was called.
     */
    private ProvisioningState provisioningState;

    /*
     * The display name of the Cognitive Services Project.
     */
    private String displayName;

    /*
     * The description of the Cognitive Services Project.
     */
    private String description;

    /*
     * The list of endpoint for this Cognitive Services Project.
     */
    private Map<String, String> endpoints;

    /*
     * Indicates whether the project is the default project for the account.
     */
    private Boolean isDefault;

    /**
     * Creates an instance of ProjectProperties class.
     */
    public ProjectProperties() {
    }

    /**
     * Get the provisioningState property: Gets the status of the cognitive services project at the time the operation
     * was called.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: The display name of the Cognitive Services Project.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the Cognitive Services Project.
     * 
     * @param displayName the displayName value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: The description of the Cognitive Services Project.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description of the Cognitive Services Project.
     * 
     * @param description the description value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the endpoints property: The list of endpoint for this Cognitive Services Project.
     * 
     * @return the endpoints value.
     */
    public Map<String, String> endpoints() {
        return this.endpoints;
    }

    /**
     * Get the isDefault property: Indicates whether the project is the default project for the account.
     * 
     * @return the isDefault value.
     */
    public Boolean isDefault() {
        return this.isDefault;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectProperties.
     */
    public static ProjectProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectProperties deserializedProjectProperties = new ProjectProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedProjectProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedProjectProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedProjectProperties.description = reader.getString();
                } else if ("endpoints".equals(fieldName)) {
                    Map<String, String> endpoints = reader.readMap(reader1 -> reader1.getString());
                    deserializedProjectProperties.endpoints = endpoints;
                } else if ("isDefault".equals(fieldName)) {
                    deserializedProjectProperties.isDefault = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectProperties;
        });
    }
}
