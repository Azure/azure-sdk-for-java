// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of Provisioning Issue.
 */
@Fluent
public final class ProvisioningIssueProperties implements JsonSerializable<ProvisioningIssueProperties> {
    /*
     * Type of Issue
     */
    private String issueType;

    /*
     * Severity of the issue
     */
    private String severity;

    /*
     * Description of the issue
     */
    private String description;

    /*
     * IDs of resources that can be associated to the same perimeter to remediate the issue.
     */
    private List<String> suggestedResourceIds;

    /*
     * Optional array, suggested access rules
     */
    private List<NetworkSecurityPerimeterAccessRule> suggestedAccessRules;

    /**
     * Creates an instance of ProvisioningIssueProperties class.
     */
    public ProvisioningIssueProperties() {
    }

    /**
     * Get the issueType property: Type of Issue.
     * 
     * @return the issueType value.
     */
    public String issueType() {
        return this.issueType;
    }

    /**
     * Set the issueType property: Type of Issue.
     * 
     * @param issueType the issueType value to set.
     * @return the ProvisioningIssueProperties object itself.
     */
    public ProvisioningIssueProperties withIssueType(String issueType) {
        this.issueType = issueType;
        return this;
    }

    /**
     * Get the severity property: Severity of the issue.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Set the severity property: Severity of the issue.
     * 
     * @param severity the severity value to set.
     * @return the ProvisioningIssueProperties object itself.
     */
    public ProvisioningIssueProperties withSeverity(String severity) {
        this.severity = severity;
        return this;
    }

    /**
     * Get the description property: Description of the issue.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the issue.
     * 
     * @param description the description value to set.
     * @return the ProvisioningIssueProperties object itself.
     */
    public ProvisioningIssueProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the suggestedResourceIds property: IDs of resources that can be associated to the same perimeter to remediate
     * the issue.
     * 
     * @return the suggestedResourceIds value.
     */
    public List<String> suggestedResourceIds() {
        return this.suggestedResourceIds;
    }

    /**
     * Set the suggestedResourceIds property: IDs of resources that can be associated to the same perimeter to remediate
     * the issue.
     * 
     * @param suggestedResourceIds the suggestedResourceIds value to set.
     * @return the ProvisioningIssueProperties object itself.
     */
    public ProvisioningIssueProperties withSuggestedResourceIds(List<String> suggestedResourceIds) {
        this.suggestedResourceIds = suggestedResourceIds;
        return this;
    }

    /**
     * Get the suggestedAccessRules property: Optional array, suggested access rules.
     * 
     * @return the suggestedAccessRules value.
     */
    public List<NetworkSecurityPerimeterAccessRule> suggestedAccessRules() {
        return this.suggestedAccessRules;
    }

    /**
     * Set the suggestedAccessRules property: Optional array, suggested access rules.
     * 
     * @param suggestedAccessRules the suggestedAccessRules value to set.
     * @return the ProvisioningIssueProperties object itself.
     */
    public ProvisioningIssueProperties
        withSuggestedAccessRules(List<NetworkSecurityPerimeterAccessRule> suggestedAccessRules) {
        this.suggestedAccessRules = suggestedAccessRules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (suggestedAccessRules() != null) {
            suggestedAccessRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issueType", this.issueType);
        jsonWriter.writeStringField("severity", this.severity);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeArrayField("suggestedResourceIds", this.suggestedResourceIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("suggestedAccessRules", this.suggestedAccessRules,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProvisioningIssueProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProvisioningIssueProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProvisioningIssueProperties.
     */
    public static ProvisioningIssueProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProvisioningIssueProperties deserializedProvisioningIssueProperties = new ProvisioningIssueProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueType".equals(fieldName)) {
                    deserializedProvisioningIssueProperties.issueType = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedProvisioningIssueProperties.severity = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedProvisioningIssueProperties.description = reader.getString();
                } else if ("suggestedResourceIds".equals(fieldName)) {
                    List<String> suggestedResourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedProvisioningIssueProperties.suggestedResourceIds = suggestedResourceIds;
                } else if ("suggestedAccessRules".equals(fieldName)) {
                    List<NetworkSecurityPerimeterAccessRule> suggestedAccessRules
                        = reader.readArray(reader1 -> NetworkSecurityPerimeterAccessRule.fromJson(reader1));
                    deserializedProvisioningIssueProperties.suggestedAccessRules = suggestedAccessRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProvisioningIssueProperties;
        });
    }
}
