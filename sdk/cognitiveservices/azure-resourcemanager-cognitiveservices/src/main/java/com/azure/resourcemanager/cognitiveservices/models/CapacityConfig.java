// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The capacity configuration.
 */
@Fluent
public final class CapacityConfig implements JsonSerializable<CapacityConfig> {
    /*
     * The minimum capacity.
     */
    private Integer minimum;

    /*
     * The maximum capacity.
     */
    private Integer maximum;

    /*
     * The minimal incremental between allowed values for capacity.
     */
    private Integer step;

    /*
     * The default capacity.
     */
    private Integer defaultProperty;

    /**
     * Creates an instance of CapacityConfig class.
     */
    public CapacityConfig() {
    }

    /**
     * Get the minimum property: The minimum capacity.
     * 
     * @return the minimum value.
     */
    public Integer minimum() {
        return this.minimum;
    }

    /**
     * Set the minimum property: The minimum capacity.
     * 
     * @param minimum the minimum value to set.
     * @return the CapacityConfig object itself.
     */
    public CapacityConfig withMinimum(Integer minimum) {
        this.minimum = minimum;
        return this;
    }

    /**
     * Get the maximum property: The maximum capacity.
     * 
     * @return the maximum value.
     */
    public Integer maximum() {
        return this.maximum;
    }

    /**
     * Set the maximum property: The maximum capacity.
     * 
     * @param maximum the maximum value to set.
     * @return the CapacityConfig object itself.
     */
    public CapacityConfig withMaximum(Integer maximum) {
        this.maximum = maximum;
        return this;
    }

    /**
     * Get the step property: The minimal incremental between allowed values for capacity.
     * 
     * @return the step value.
     */
    public Integer step() {
        return this.step;
    }

    /**
     * Set the step property: The minimal incremental between allowed values for capacity.
     * 
     * @param step the step value to set.
     * @return the CapacityConfig object itself.
     */
    public CapacityConfig withStep(Integer step) {
        this.step = step;
        return this;
    }

    /**
     * Get the defaultProperty property: The default capacity.
     * 
     * @return the defaultProperty value.
     */
    public Integer defaultProperty() {
        return this.defaultProperty;
    }

    /**
     * Set the defaultProperty property: The default capacity.
     * 
     * @param defaultProperty the defaultProperty value to set.
     * @return the CapacityConfig object itself.
     */
    public CapacityConfig withDefaultProperty(Integer defaultProperty) {
        this.defaultProperty = defaultProperty;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("minimum", this.minimum);
        jsonWriter.writeNumberField("maximum", this.maximum);
        jsonWriter.writeNumberField("step", this.step);
        jsonWriter.writeNumberField("default", this.defaultProperty);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapacityConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapacityConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapacityConfig.
     */
    public static CapacityConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapacityConfig deserializedCapacityConfig = new CapacityConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("minimum".equals(fieldName)) {
                    deserializedCapacityConfig.minimum = reader.getNullable(JsonReader::getInt);
                } else if ("maximum".equals(fieldName)) {
                    deserializedCapacityConfig.maximum = reader.getNullable(JsonReader::getInt);
                } else if ("step".equals(fieldName)) {
                    deserializedCapacityConfig.step = reader.getNullable(JsonReader::getInt);
                } else if ("default".equals(fieldName)) {
                    deserializedCapacityConfig.defaultProperty = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapacityConfig;
        });
    }
}
