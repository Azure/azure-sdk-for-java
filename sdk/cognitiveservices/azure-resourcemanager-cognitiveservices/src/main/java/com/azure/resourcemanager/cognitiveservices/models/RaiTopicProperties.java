// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * RAI Custom Topic properties.
 */
@Fluent
public final class RaiTopicProperties implements JsonSerializable<RaiTopicProperties> {
    /*
     * The unique identifier of the custom topic.
     */
    private String topicId;

    /*
     * The name of the custom topic.
     */
    private String topicName;

    /*
     * Description of the custom topic.
     */
    private String description;

    /*
     * Sample blob url for the custom topic.
     */
    private String sampleBlobUrl;

    /*
     * Status of the custom topic.
     */
    private String status;

    /*
     * Failed reason if the status is Failed.
     */
    private String failedReason;

    /*
     * Creation time of the custom topic.
     */
    private OffsetDateTime createdAt;

    /*
     * Last modified time of the custom topic.
     */
    private OffsetDateTime lastModifiedAt;

    /**
     * Creates an instance of RaiTopicProperties class.
     */
    public RaiTopicProperties() {
    }

    /**
     * Get the topicId property: The unique identifier of the custom topic.
     * 
     * @return the topicId value.
     */
    public String topicId() {
        return this.topicId;
    }

    /**
     * Set the topicId property: The unique identifier of the custom topic.
     * 
     * @param topicId the topicId value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withTopicId(String topicId) {
        this.topicId = topicId;
        return this;
    }

    /**
     * Get the topicName property: The name of the custom topic.
     * 
     * @return the topicName value.
     */
    public String topicName() {
        return this.topicName;
    }

    /**
     * Set the topicName property: The name of the custom topic.
     * 
     * @param topicName the topicName value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withTopicName(String topicName) {
        this.topicName = topicName;
        return this;
    }

    /**
     * Get the description property: Description of the custom topic.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the custom topic.
     * 
     * @param description the description value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the sampleBlobUrl property: Sample blob url for the custom topic.
     * 
     * @return the sampleBlobUrl value.
     */
    public String sampleBlobUrl() {
        return this.sampleBlobUrl;
    }

    /**
     * Set the sampleBlobUrl property: Sample blob url for the custom topic.
     * 
     * @param sampleBlobUrl the sampleBlobUrl value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withSampleBlobUrl(String sampleBlobUrl) {
        this.sampleBlobUrl = sampleBlobUrl;
        return this;
    }

    /**
     * Get the status property: Status of the custom topic.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Set the status property: Status of the custom topic.
     * 
     * @param status the status value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withStatus(String status) {
        this.status = status;
        return this;
    }

    /**
     * Get the failedReason property: Failed reason if the status is Failed.
     * 
     * @return the failedReason value.
     */
    public String failedReason() {
        return this.failedReason;
    }

    /**
     * Set the failedReason property: Failed reason if the status is Failed.
     * 
     * @param failedReason the failedReason value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withFailedReason(String failedReason) {
        this.failedReason = failedReason;
        return this;
    }

    /**
     * Get the createdAt property: Creation time of the custom topic.
     * 
     * @return the createdAt value.
     */
    public OffsetDateTime createdAt() {
        return this.createdAt;
    }

    /**
     * Set the createdAt property: Creation time of the custom topic.
     * 
     * @param createdAt the createdAt value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Get the lastModifiedAt property: Last modified time of the custom topic.
     * 
     * @return the lastModifiedAt value.
     */
    public OffsetDateTime lastModifiedAt() {
        return this.lastModifiedAt;
    }

    /**
     * Set the lastModifiedAt property: Last modified time of the custom topic.
     * 
     * @param lastModifiedAt the lastModifiedAt value to set.
     * @return the RaiTopicProperties object itself.
     */
    public RaiTopicProperties withLastModifiedAt(OffsetDateTime lastModifiedAt) {
        this.lastModifiedAt = lastModifiedAt;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("topicId", this.topicId);
        jsonWriter.writeStringField("topicName", this.topicName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("sampleBlobUrl", this.sampleBlobUrl);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("failedReason", this.failedReason);
        jsonWriter.writeStringField("createdAt",
            this.createdAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdAt));
        jsonWriter.writeStringField("lastModifiedAt",
            this.lastModifiedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastModifiedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RaiTopicProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RaiTopicProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RaiTopicProperties.
     */
    public static RaiTopicProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RaiTopicProperties deserializedRaiTopicProperties = new RaiTopicProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topicId".equals(fieldName)) {
                    deserializedRaiTopicProperties.topicId = reader.getString();
                } else if ("topicName".equals(fieldName)) {
                    deserializedRaiTopicProperties.topicName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedRaiTopicProperties.description = reader.getString();
                } else if ("sampleBlobUrl".equals(fieldName)) {
                    deserializedRaiTopicProperties.sampleBlobUrl = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedRaiTopicProperties.status = reader.getString();
                } else if ("failedReason".equals(fieldName)) {
                    deserializedRaiTopicProperties.failedReason = reader.getString();
                } else if ("createdAt".equals(fieldName)) {
                    deserializedRaiTopicProperties.createdAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastModifiedAt".equals(fieldName)) {
                    deserializedRaiTopicProperties.lastModifiedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRaiTopicProperties;
        });
    }
}
