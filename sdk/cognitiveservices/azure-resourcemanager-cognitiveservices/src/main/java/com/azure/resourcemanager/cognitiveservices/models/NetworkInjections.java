// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies in AI Foundry where virtual network injection occurs to secure scenarios like Agents entirely within the
 * user's private network, eliminating public internet exposure while maintaining control over network configurations
 * and resources.
 */
@Fluent
public final class NetworkInjections implements JsonSerializable<NetworkInjections> {
    /*
     * Specifies what features in AI Foundry network injection applies to. Currently only supports 'agent' for agent
     * scenarios. 'none' means no network injection.
     */
    private ScenarioType scenario;

    /*
     * Specify the subnet for which your Agent Client is injected into.
     */
    private String subnetArmId;

    /*
     * Boolean to enable Microsoft Managed Network for subnet delegation
     */
    private Boolean useMicrosoftManagedNetwork;

    /**
     * Creates an instance of NetworkInjections class.
     */
    public NetworkInjections() {
    }

    /**
     * Get the scenario property: Specifies what features in AI Foundry network injection applies to. Currently only
     * supports 'agent' for agent scenarios. 'none' means no network injection.
     * 
     * @return the scenario value.
     */
    public ScenarioType scenario() {
        return this.scenario;
    }

    /**
     * Set the scenario property: Specifies what features in AI Foundry network injection applies to. Currently only
     * supports 'agent' for agent scenarios. 'none' means no network injection.
     * 
     * @param scenario the scenario value to set.
     * @return the NetworkInjections object itself.
     */
    public NetworkInjections withScenario(ScenarioType scenario) {
        this.scenario = scenario;
        return this;
    }

    /**
     * Get the subnetArmId property: Specify the subnet for which your Agent Client is injected into.
     * 
     * @return the subnetArmId value.
     */
    public String subnetArmId() {
        return this.subnetArmId;
    }

    /**
     * Set the subnetArmId property: Specify the subnet for which your Agent Client is injected into.
     * 
     * @param subnetArmId the subnetArmId value to set.
     * @return the NetworkInjections object itself.
     */
    public NetworkInjections withSubnetArmId(String subnetArmId) {
        this.subnetArmId = subnetArmId;
        return this;
    }

    /**
     * Get the useMicrosoftManagedNetwork property: Boolean to enable Microsoft Managed Network for subnet delegation.
     * 
     * @return the useMicrosoftManagedNetwork value.
     */
    public Boolean useMicrosoftManagedNetwork() {
        return this.useMicrosoftManagedNetwork;
    }

    /**
     * Set the useMicrosoftManagedNetwork property: Boolean to enable Microsoft Managed Network for subnet delegation.
     * 
     * @param useMicrosoftManagedNetwork the useMicrosoftManagedNetwork value to set.
     * @return the NetworkInjections object itself.
     */
    public NetworkInjections withUseMicrosoftManagedNetwork(Boolean useMicrosoftManagedNetwork) {
        this.useMicrosoftManagedNetwork = useMicrosoftManagedNetwork;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scenario", this.scenario == null ? null : this.scenario.toString());
        jsonWriter.writeStringField("subnetArmId", this.subnetArmId);
        jsonWriter.writeBooleanField("useMicrosoftManagedNetwork", this.useMicrosoftManagedNetwork);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkInjections from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkInjections if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkInjections.
     */
    public static NetworkInjections fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkInjections deserializedNetworkInjections = new NetworkInjections();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scenario".equals(fieldName)) {
                    deserializedNetworkInjections.scenario = ScenarioType.fromString(reader.getString());
                } else if ("subnetArmId".equals(fieldName)) {
                    deserializedNetworkInjections.subnetArmId = reader.getString();
                } else if ("useMicrosoftManagedNetwork".equals(fieldName)) {
                    deserializedNetworkInjections.useMicrosoftManagedNetwork
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkInjections;
        });
    }
}
