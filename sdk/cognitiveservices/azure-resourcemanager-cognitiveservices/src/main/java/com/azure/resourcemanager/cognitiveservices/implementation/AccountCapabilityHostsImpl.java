// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.cognitiveservices.fluent.AccountCapabilityHostsClient;
import com.azure.resourcemanager.cognitiveservices.fluent.models.CapabilityHostInner;
import com.azure.resourcemanager.cognitiveservices.models.AccountCapabilityHosts;
import com.azure.resourcemanager.cognitiveservices.models.CapabilityHost;

public final class AccountCapabilityHostsImpl implements AccountCapabilityHosts {
    private static final ClientLogger LOGGER = new ClientLogger(AccountCapabilityHostsImpl.class);

    private final AccountCapabilityHostsClient innerClient;

    private final com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager;

    public AccountCapabilityHostsImpl(AccountCapabilityHostsClient innerClient,
        com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String accountName, String capabilityHostname) {
        this.serviceClient().delete(resourceGroupName, accountName, capabilityHostname);
    }

    public void delete(String resourceGroupName, String accountName, String capabilityHostname, Context context) {
        this.serviceClient().delete(resourceGroupName, accountName, capabilityHostname, context);
    }

    public Response<CapabilityHost> getWithResponse(String resourceGroupName, String accountName,
        String capabilityHostname, Context context) {
        Response<CapabilityHostInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, accountName, capabilityHostname, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CapabilityHostImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CapabilityHost get(String resourceGroupName, String accountName, String capabilityHostname) {
        CapabilityHostInner inner = this.serviceClient().get(resourceGroupName, accountName, capabilityHostname);
        if (inner != null) {
            return new CapabilityHostImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public CapabilityHost getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String capabilityHostname = ResourceManagerUtils.getValueFromIdByName(id, "capabilityHosts");
        if (capabilityHostname == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capabilityHosts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, capabilityHostname, Context.NONE).getValue();
    }

    public Response<CapabilityHost> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String capabilityHostname = ResourceManagerUtils.getValueFromIdByName(id, "capabilityHosts");
        if (capabilityHostname == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capabilityHosts'.", id)));
        }
        return this.getWithResponse(resourceGroupName, accountName, capabilityHostname, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String capabilityHostname = ResourceManagerUtils.getValueFromIdByName(id, "capabilityHosts");
        if (capabilityHostname == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capabilityHosts'.", id)));
        }
        this.delete(resourceGroupName, accountName, capabilityHostname, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String accountName = ResourceManagerUtils.getValueFromIdByName(id, "accounts");
        if (accountName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'accounts'.", id)));
        }
        String capabilityHostname = ResourceManagerUtils.getValueFromIdByName(id, "capabilityHosts");
        if (capabilityHostname == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'capabilityHosts'.", id)));
        }
        this.delete(resourceGroupName, accountName, capabilityHostname, context);
    }

    private AccountCapabilityHostsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.cognitiveservices.CognitiveServicesManager manager() {
        return this.serviceManager;
    }

    public CapabilityHostImpl define(String name) {
        return new CapabilityHostImpl(name, this.manager());
    }
}
