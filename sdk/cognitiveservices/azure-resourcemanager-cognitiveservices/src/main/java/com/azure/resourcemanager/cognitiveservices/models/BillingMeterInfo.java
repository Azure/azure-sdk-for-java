// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.cognitiveservices.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The BillingMeterInfo model.
 */
@Fluent
public final class BillingMeterInfo implements JsonSerializable<BillingMeterInfo> {
    /*
     * The name property.
     */
    private String name;

    /*
     * The meterId property.
     */
    private String meterId;

    /*
     * The unit property.
     */
    private String unit;

    /**
     * Creates an instance of BillingMeterInfo class.
     */
    public BillingMeterInfo() {
    }

    /**
     * Get the name property: The name property.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name property.
     * 
     * @param name the name value to set.
     * @return the BillingMeterInfo object itself.
     */
    public BillingMeterInfo withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the meterId property: The meterId property.
     * 
     * @return the meterId value.
     */
    public String meterId() {
        return this.meterId;
    }

    /**
     * Set the meterId property: The meterId property.
     * 
     * @param meterId the meterId value to set.
     * @return the BillingMeterInfo object itself.
     */
    public BillingMeterInfo withMeterId(String meterId) {
        this.meterId = meterId;
        return this;
    }

    /**
     * Get the unit property: The unit property.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit property.
     * 
     * @param unit the unit value to set.
     * @return the BillingMeterInfo object itself.
     */
    public BillingMeterInfo withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("meterId", this.meterId);
        jsonWriter.writeStringField("unit", this.unit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingMeterInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingMeterInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BillingMeterInfo.
     */
    public static BillingMeterInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingMeterInfo deserializedBillingMeterInfo = new BillingMeterInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedBillingMeterInfo.name = reader.getString();
                } else if ("meterId".equals(fieldName)) {
                    deserializedBillingMeterInfo.meterId = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedBillingMeterInfo.unit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingMeterInfo;
        });
    }
}
