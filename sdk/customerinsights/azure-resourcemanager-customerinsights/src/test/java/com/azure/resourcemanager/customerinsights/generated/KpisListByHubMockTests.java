// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiResourceFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class KpisListByHubMockTests {
    @Test
    public void testListByHub() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"entityType\":\"Profile\",\"entityTypeName\":\"xjdnajuo\",\"tenantId\":\"y\",\"kpiName\":\"mk\",\"displayName\":{\"jk\":\"vcwloqd\"},\"description\":{\"uzmsxgam\":\"xrwzo\"},\"calculationWindow\":\"Month\",\"calculationWindowFieldName\":\"kwppthuzdprmimr\",\"function\":\"Sum\",\"expression\":\"dpoqfxyem\",\"unit\":\"ftb\",\"filter\":\"whtecloamfmxtll\",\"groupBy\":[\"ymqcnrrfijhgga\",\"qbgamkli\",\"irw\",\"vffhs\"],\"groupByMetadata\":[{\"displayName\":{\"qrxqwqnjx\":\"hk\",\"zcxdfweapyfmlxrl\":\"dfddtullygtav\"},\"fieldName\":\"h\",\"fieldType\":\"spi\"},{\"displayName\":{\"fgsmdrjuqb\":\"imixlmdbgice\",\"paxwfqty\":\"xtokljmtz\",\"rcltungbsoljckm\":\"qi\",\"zbkuckgkdsksw\":\"i\"},\"fieldName\":\"iqqcq\",\"fieldType\":\"clsmal\"},{\"displayName\":{\"zrujlqcwnyn\":\"woykdnonaaxwm\",\"bcbgv\":\"lei\"},\"fieldName\":\"t\",\"fieldType\":\"rtoxadhxuvjhxm\"}],\"participantProfilesMetadata\":[{\"typeName\":\"s\"},{\"typeName\":\"jcm\"}],\"provisioningState\":\"Deleting\",\"thresHolds\":{\"increasingKpi\":false},\"aliases\":[{\"aliasName\":\"cvnpv\",\"expression\":\"dhgjnaqyqi\"},{\"aliasName\":\"slz\",\"expression\":\"vcdsvm\"},{\"aliasName\":\"bit\",\"expression\":\"kdtfo\"}],\"extracts\":[{\"extractName\":\"iy\",\"expression\":\"x\"},{\"extractName\":\"ich\",\"expression\":\"ybfzdqekivycp\"},{\"extractName\":\"cv\",\"expression\":\"izulrqtbht\"}]},\"id\":\"ezp\",\"name\":\"lpryf\",\"type\":\"xmdutzfkgilnou\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<KpiResourceFormat> response
            = manager.kpis().listByHub("v", "dbd", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(EntityTypes.PROFILE, response.iterator().next().entityType());
        Assertions.assertEquals("xjdnajuo", response.iterator().next().entityTypeName());
        Assertions.assertEquals("vcwloqd", response.iterator().next().displayName().get("jk"));
        Assertions.assertEquals("xrwzo", response.iterator().next().description().get("uzmsxgam"));
        Assertions.assertEquals(CalculationWindowTypes.MONTH, response.iterator().next().calculationWindow());
        Assertions.assertEquals("kwppthuzdprmimr", response.iterator().next().calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.SUM, response.iterator().next().function());
        Assertions.assertEquals("dpoqfxyem", response.iterator().next().expression());
        Assertions.assertEquals("ftb", response.iterator().next().unit());
        Assertions.assertEquals("whtecloamfmxtll", response.iterator().next().filter());
        Assertions.assertEquals("ymqcnrrfijhgga", response.iterator().next().groupBy().get(0));
        Assertions.assertEquals(false, response.iterator().next().thresHolds().increasingKpi());
        Assertions.assertEquals("cvnpv", response.iterator().next().aliases().get(0).aliasName());
        Assertions.assertEquals("dhgjnaqyqi", response.iterator().next().aliases().get(0).expression());
        Assertions.assertEquals("iy", response.iterator().next().extracts().get(0).extractName());
        Assertions.assertEquals("x", response.iterator().next().extracts().get(0).expression());
    }
}
