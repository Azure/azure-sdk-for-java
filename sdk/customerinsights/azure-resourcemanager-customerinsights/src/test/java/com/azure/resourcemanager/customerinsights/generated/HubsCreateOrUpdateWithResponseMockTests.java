// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.Hub;
import com.azure.resourcemanager.customerinsights.models.HubBillingInfoFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HubsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"apiEndpoint\":\"cehokw\",\"webEndpoint\":\"qtwloes\",\"provisioningState\":\"ggvrbnyrukoilaci\",\"tenantFeatures\":1606916625,\"hubBillingInfo\":{\"skuName\":\"e\",\"minUnits\":1230400658,\"maxUnits\":234855526}},\"location\":\"wyxpzruzyth\",\"tags\":{\"xdm\":\"whbgxvellvul\",\"lyymffhmjpddny\":\"itmujdtvm\"},\"id\":\"fzuvrzmz\",\"name\":\"mzjqrbr\",\"type\":\"vnmdyfoeboj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Hub response = manager.hubs()
            .define("aqo")
            .withRegion("gis")
            .withExistingResourceGroup("ktjtgra")
            .withTags(mapOf("jch", "nykdi", "eacdhztx", "rmpwctofld", "ewhfjsrwqrxetf", "brfgdrwji", "r", "cwv"))
            .withTenantFeatures(638180149)
            .withHubBillingInfo(
                new HubBillingInfoFormat().withSkuName("whczzqrhmng").withMinUnits(1353301902).withMaxUnits(1565815166))
            .create();

        Assertions.assertEquals("wyxpzruzyth", response.location());
        Assertions.assertEquals("whbgxvellvul", response.tags().get("xdm"));
        Assertions.assertEquals(1606916625, response.tenantFeatures());
        Assertions.assertEquals("e", response.hubBillingInfo().skuName());
        Assertions.assertEquals(1230400658, response.hubBillingInfo().minUnits());
        Assertions.assertEquals(234855526, response.hubBillingInfo().maxUnits());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
