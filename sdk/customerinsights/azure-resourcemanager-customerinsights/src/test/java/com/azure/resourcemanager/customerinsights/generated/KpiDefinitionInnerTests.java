// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.KpiDefinitionInner;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiAlias;
import com.azure.resourcemanager.customerinsights.models.KpiExtract;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiThresholds;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KpiDefinitionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KpiDefinitionInner model = BinaryData.fromString(
            "{\"entityType\":\"Relationship\",\"entityTypeName\":\"xmzsbbzogg\",\"tenantId\":\"rxwburv\",\"kpiName\":\"xjnspy\",\"displayName\":{\"ou\":\"koen\"},\"description\":{\"ngkpocipazy\":\"udwtiukbl\",\"gukgjnpiucgygevq\":\"o\",\"dpydn\":\"ntypmrbpizcdrqj\",\"sjttgzfbish\":\"yhxdeoejzicwi\"},\"calculationWindow\":\"Hour\",\"calculationWindowFieldName\":\"hajdeyeamdpha\",\"function\":\"None\",\"expression\":\"lpbuxwgipwhonowk\",\"unit\":\"hwankixzbinjepu\",\"filter\":\"mryw\",\"groupBy\":[\"oqftiyqzrnkcq\",\"yx\",\"whzlsicohoq\",\"nwvlryavwhheunmm\"],\"groupByMetadata\":[{\"displayName\":{\"ocukoklyax\":\"zko\"},\"fieldName\":\"onuq\",\"fieldType\":\"fkbey\"},{\"displayName\":{\"senhwlrs\":\"rmjmwvvjektc\",\"qylihkaetckt\":\"frzpwvlqdqgb\",\"ctq\":\"fcivfsnkym\",\"ebrjcxe\":\"jf\"},\"fieldName\":\"uwutttxfvjrbi\",\"fieldType\":\"hxepcyvahfnlj\"}],\"participantProfilesMetadata\":[{\"typeName\":\"xjvuujqgidokg\"}],\"provisioningState\":\"Deleting\",\"thresHolds\":{\"increasingKpi\":false},\"aliases\":[{\"aliasName\":\"vcltbgsncgh\",\"expression\":\"jeszzhbijhtxfv\"}],\"extracts\":[{\"extractName\":\"fsm\",\"expression\":\"nehmpvecx\"}]}")
            .toObject(KpiDefinitionInner.class);
        Assertions.assertEquals(EntityTypes.RELATIONSHIP, model.entityType());
        Assertions.assertEquals("xmzsbbzogg", model.entityTypeName());
        Assertions.assertEquals("koen", model.displayName().get("ou"));
        Assertions.assertEquals("udwtiukbl", model.description().get("ngkpocipazy"));
        Assertions.assertEquals(CalculationWindowTypes.HOUR, model.calculationWindow());
        Assertions.assertEquals("hajdeyeamdpha", model.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.NONE, model.function());
        Assertions.assertEquals("lpbuxwgipwhonowk", model.expression());
        Assertions.assertEquals("hwankixzbinjepu", model.unit());
        Assertions.assertEquals("mryw", model.filter());
        Assertions.assertEquals("oqftiyqzrnkcq", model.groupBy().get(0));
        Assertions.assertEquals(false, model.thresHolds().increasingKpi());
        Assertions.assertEquals("vcltbgsncgh", model.aliases().get(0).aliasName());
        Assertions.assertEquals("jeszzhbijhtxfv", model.aliases().get(0).expression());
        Assertions.assertEquals("fsm", model.extracts().get(0).extractName());
        Assertions.assertEquals("nehmpvecx", model.extracts().get(0).expression());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KpiDefinitionInner model = new KpiDefinitionInner().withEntityType(EntityTypes.RELATIONSHIP)
            .withEntityTypeName("xmzsbbzogg")
            .withDisplayName(mapOf("ou", "koen"))
            .withDescription(mapOf("ngkpocipazy", "udwtiukbl", "gukgjnpiucgygevq", "o", "dpydn", "ntypmrbpizcdrqj",
                "sjttgzfbish", "yhxdeoejzicwi"))
            .withCalculationWindow(CalculationWindowTypes.HOUR)
            .withCalculationWindowFieldName("hajdeyeamdpha")
            .withFunction(KpiFunctions.NONE)
            .withExpression("lpbuxwgipwhonowk")
            .withUnit("hwankixzbinjepu")
            .withFilter("mryw")
            .withGroupBy(Arrays.asList("oqftiyqzrnkcq", "yx", "whzlsicohoq", "nwvlryavwhheunmm"))
            .withThresHolds(new KpiThresholds().withIncreasingKpi(false))
            .withAliases(Arrays.asList(new KpiAlias().withAliasName("vcltbgsncgh").withExpression("jeszzhbijhtxfv")))
            .withExtracts(Arrays.asList(new KpiExtract().withExtractName("fsm").withExpression("nehmpvecx")));
        model = BinaryData.fromObject(model).toObject(KpiDefinitionInner.class);
        Assertions.assertEquals(EntityTypes.RELATIONSHIP, model.entityType());
        Assertions.assertEquals("xmzsbbzogg", model.entityTypeName());
        Assertions.assertEquals("koen", model.displayName().get("ou"));
        Assertions.assertEquals("udwtiukbl", model.description().get("ngkpocipazy"));
        Assertions.assertEquals(CalculationWindowTypes.HOUR, model.calculationWindow());
        Assertions.assertEquals("hajdeyeamdpha", model.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.NONE, model.function());
        Assertions.assertEquals("lpbuxwgipwhonowk", model.expression());
        Assertions.assertEquals("hwankixzbinjepu", model.unit());
        Assertions.assertEquals("mryw", model.filter());
        Assertions.assertEquals("oqftiyqzrnkcq", model.groupBy().get(0));
        Assertions.assertEquals(false, model.thresHolds().increasingKpi());
        Assertions.assertEquals("vcltbgsncgh", model.aliases().get(0).aliasName());
        Assertions.assertEquals("jeszzhbijhtxfv", model.aliases().get(0).expression());
        Assertions.assertEquals("fsm", model.extracts().get(0).extractName());
        Assertions.assertEquals("nehmpvecx", model.extracts().get(0).expression());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
