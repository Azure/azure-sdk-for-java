// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.RoleAssignmentResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.AssignmentPrincipal;
import com.azure.resourcemanager.customerinsights.models.ResourceSetDescription;
import com.azure.resourcemanager.customerinsights.models.RoleAssignmentListResult;
import com.azure.resourcemanager.customerinsights.models.RoleTypes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RoleAssignmentListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoleAssignmentListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"tenantId\":\"pinbmhwbjijkgqxn\",\"assignmentName\":\"bkezn\",\"displayName\":{\"aawxwfeka\":\"jvaannggiycwkd\",\"xwbjs\":\"mrrqmbzmqkratb\",\"ewijymrhbguz\":\"dbirkfpksokdgo\"},\"description\":{\"ffjkutycyarnroo\":\"yewnfnzhhhqos\",\"abzoghktdpyczhco\":\"g\",\"pt\":\"ocnhzqrottjzcfyj\",\"h\":\"rl\"},\"provisioningState\":\"Failed\",\"role\":\"ManageAdmin\",\"principals\":[{\"principalId\":\"fs\",\"principalType\":\"pyglqdhmrjzral\",\"principalMetadata\":{\"ypsjoq\":\"jb\"}},{\"principalId\":\"jenkyh\",\"principalType\":\"qzvs\",\"principalMetadata\":{\"l\":\"xj\",\"w\":\"cmpzqjhhhqx\"}},{\"principalId\":\"vcacoyv\",\"principalType\":\"vbsizusjszlbscm\",\"principalMetadata\":{\"yvqkxr\":\"ijiufehgmvfln\",\"lyfwxzutg\":\"rlniyl\",\"yjtcdxabbujftab\":\"ztwhghmupg\"}},{\"principalId\":\"nbbklqpxzucafed\",\"principalType\":\"wwnlzafwxudgnh\",\"principalMetadata\":{\"wgpbemeluclv\":\"krtalvn\",\"xhqf\":\"jjukyrdnqodxah\",\"avsczuejdtxp\":\"qnvzoqgyipemch\"}}],\"profiles\":{\"elements\":[\"wzhomewjjstl\"],\"exceptions\":[\"qawmoaianc\",\"nvodrrs\"]},\"interactions\":{\"elements\":[\"ydkxr\",\"vvbxiwkgfbqljnq\"],\"exceptions\":[\"chocokulehur\",\"lrqff\",\"weyurkphyjd\"]},\"links\":{\"elements\":[\"juqdbrx\",\"rgchbap\",\"kiyfjjkbajbusc\",\"duusioycblevpmcl\"],\"exceptions\":[\"xkyxlzgs\",\"gkzz\"]},\"kpis\":{\"elements\":[\"hbzffovwmbjlzqs\",\"zpgvdwnapfd\",\"wow\",\"tptnuwjtk\"],\"exceptions\":[\"gcgqyhleseyqrhvy\"]},\"sasPolicies\":{\"elements\":[\"tj\",\"dkwisw\",\"kukjtasb\",\"wispkxk\"],\"exceptions\":[\"fkndl\",\"vtwknvgmmbugt\",\"watmqa\",\"kueatgroeshoy\"]},\"connectors\":{\"elements\":[\"yf\",\"x\",\"faoytehqpuv\"],\"exceptions\":[\"qm\",\"dwckygroe\",\"n\",\"dljdjuskb\"]},\"views\":{\"elements\":[\"ynkceysfaqegpl\"],\"exceptions\":[\"shwddkvbxgk\"]},\"relationshipLinks\":{\"elements\":[\"bwptdacarvvlf\",\"tymtpoiwenazer\"],\"exceptions\":[\"rs\"]},\"relationships\":{\"elements\":[\"xkdnwqapf\",\"sdpcvess\",\"zhhkuuipldqqc\",\"ekvalblhtjq\"],\"exceptions\":[\"vweht\",\"emxhzzy\",\"ev\"]},\"widgetTypes\":{\"elements\":[\"vzrrryveimi\",\"sk\",\"yzatvfuzkaft\",\"vvruxwi\"],\"exceptions\":[\"ei\"]},\"roleAssignments\":{\"elements\":[\"mjtgrqg\",\"gkkileplkcsmkn\",\"wtbbaedorvvmqf\"],\"exceptions\":[\"gbdg\",\"umgxdgdhpab\",\"dexjddvjs\",\"qwotmmwllcol\"]},\"conflationPolicies\":{\"elements\":[\"apte\",\"hexcgjokj\",\"jnhvlqjbekpeeks\",\"bksdqhjvyklxesl\"],\"exceptions\":[\"ustcpoq\",\"avnwqj\",\"g\",\"knlejjjkxybwfd\"]},\"segments\":{\"elements\":[\"ztensvkzykjtj\",\"nsxfwu\",\"hcdpkupnqrmgj\",\"bpkuwxeoio\"],\"exceptions\":[\"zfav\",\"jzwfb\",\"yay\"]}},\"id\":\"mmfz\",\"name\":\"bfw\",\"type\":\"rzx\"}],\"nextLink\":\"ewsrsxkrplbjaze\"}")
            .toObject(RoleAssignmentListResult.class);
        Assertions.assertEquals("jvaannggiycwkd", model.value().get(0).displayName().get("aawxwfeka"));
        Assertions.assertEquals("yewnfnzhhhqos", model.value().get(0).description().get("ffjkutycyarnroo"));
        Assertions.assertEquals(RoleTypes.MANAGE_ADMIN, model.value().get(0).role());
        Assertions.assertEquals("fs", model.value().get(0).principals().get(0).principalId());
        Assertions.assertEquals("pyglqdhmrjzral", model.value().get(0).principals().get(0).principalType());
        Assertions.assertEquals("jb", model.value().get(0).principals().get(0).principalMetadata().get("ypsjoq"));
        Assertions.assertEquals("wzhomewjjstl", model.value().get(0).profiles().elements().get(0));
        Assertions.assertEquals("qawmoaianc", model.value().get(0).profiles().exceptions().get(0));
        Assertions.assertEquals("ydkxr", model.value().get(0).interactions().elements().get(0));
        Assertions.assertEquals("chocokulehur", model.value().get(0).interactions().exceptions().get(0));
        Assertions.assertEquals("juqdbrx", model.value().get(0).links().elements().get(0));
        Assertions.assertEquals("xkyxlzgs", model.value().get(0).links().exceptions().get(0));
        Assertions.assertEquals("hbzffovwmbjlzqs", model.value().get(0).kpis().elements().get(0));
        Assertions.assertEquals("gcgqyhleseyqrhvy", model.value().get(0).kpis().exceptions().get(0));
        Assertions.assertEquals("tj", model.value().get(0).sasPolicies().elements().get(0));
        Assertions.assertEquals("fkndl", model.value().get(0).sasPolicies().exceptions().get(0));
        Assertions.assertEquals("yf", model.value().get(0).connectors().elements().get(0));
        Assertions.assertEquals("qm", model.value().get(0).connectors().exceptions().get(0));
        Assertions.assertEquals("ynkceysfaqegpl", model.value().get(0).views().elements().get(0));
        Assertions.assertEquals("shwddkvbxgk", model.value().get(0).views().exceptions().get(0));
        Assertions.assertEquals("bwptdacarvvlf", model.value().get(0).relationshipLinks().elements().get(0));
        Assertions.assertEquals("rs", model.value().get(0).relationshipLinks().exceptions().get(0));
        Assertions.assertEquals("xkdnwqapf", model.value().get(0).relationships().elements().get(0));
        Assertions.assertEquals("vweht", model.value().get(0).relationships().exceptions().get(0));
        Assertions.assertEquals("vzrrryveimi", model.value().get(0).widgetTypes().elements().get(0));
        Assertions.assertEquals("ei", model.value().get(0).widgetTypes().exceptions().get(0));
        Assertions.assertEquals("mjtgrqg", model.value().get(0).roleAssignments().elements().get(0));
        Assertions.assertEquals("gbdg", model.value().get(0).roleAssignments().exceptions().get(0));
        Assertions.assertEquals("apte", model.value().get(0).conflationPolicies().elements().get(0));
        Assertions.assertEquals("ustcpoq", model.value().get(0).conflationPolicies().exceptions().get(0));
        Assertions.assertEquals("ztensvkzykjtj", model.value().get(0).segments().elements().get(0));
        Assertions.assertEquals("zfav", model.value().get(0).segments().exceptions().get(0));
        Assertions.assertEquals("ewsrsxkrplbjaze", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoleAssignmentListResult model
            = new RoleAssignmentListResult().withValue(Arrays.asList(new RoleAssignmentResourceFormatInner()
                .withDisplayName(
                    mapOf("aawxwfeka", "jvaannggiycwkd", "xwbjs", "mrrqmbzmqkratb", "ewijymrhbguz", "dbirkfpksokdgo"))
                .withDescription(mapOf("ffjkutycyarnroo", "yewnfnzhhhqos", "abzoghktdpyczhco", "g", "pt",
                    "ocnhzqrottjzcfyj", "h", "rl"))
                .withRole(RoleTypes.MANAGE_ADMIN)
                .withPrincipals(
                    Arrays.asList(
                        new AssignmentPrincipal().withPrincipalId("fs")
                            .withPrincipalType("pyglqdhmrjzral")
                            .withPrincipalMetadata(mapOf("ypsjoq", "jb")),
                        new AssignmentPrincipal().withPrincipalId("jenkyh")
                            .withPrincipalType("qzvs")
                            .withPrincipalMetadata(mapOf("l", "xj", "w", "cmpzqjhhhqx")),
                        new AssignmentPrincipal().withPrincipalId("vcacoyv")
                            .withPrincipalType("vbsizusjszlbscm")
                            .withPrincipalMetadata(mapOf("yvqkxr", "ijiufehgmvfln", "lyfwxzutg", "rlniyl",
                                "yjtcdxabbujftab", "ztwhghmupg")),
                        new AssignmentPrincipal().withPrincipalId("nbbklqpxzucafed")
                            .withPrincipalType("wwnlzafwxudgnh")
                            .withPrincipalMetadata(mapOf("wgpbemeluclv", "krtalvn", "xhqf", "jjukyrdnqodxah",
                                "avsczuejdtxp", "qnvzoqgyipemch"))))
                .withProfiles(new ResourceSetDescription().withElements(Arrays.asList("wzhomewjjstl"))
                    .withExceptions(Arrays.asList("qawmoaianc", "nvodrrs")))
                .withInteractions(new ResourceSetDescription().withElements(Arrays.asList("ydkxr", "vvbxiwkgfbqljnq"))
                    .withExceptions(Arrays.asList("chocokulehur", "lrqff", "weyurkphyjd")))
                .withLinks(new ResourceSetDescription()
                    .withElements(Arrays.asList("juqdbrx", "rgchbap", "kiyfjjkbajbusc", "duusioycblevpmcl"))
                    .withExceptions(Arrays.asList("xkyxlzgs", "gkzz")))
                .withKpis(new ResourceSetDescription()
                    .withElements(Arrays.asList("hbzffovwmbjlzqs", "zpgvdwnapfd", "wow", "tptnuwjtk"))
                    .withExceptions(Arrays.asList("gcgqyhleseyqrhvy")))
                .withSasPolicies(
                    new ResourceSetDescription().withElements(Arrays.asList("tj", "dkwisw", "kukjtasb", "wispkxk"))
                        .withExceptions(Arrays.asList("fkndl", "vtwknvgmmbugt", "watmqa", "kueatgroeshoy")))
                .withConnectors(new ResourceSetDescription().withElements(Arrays.asList("yf", "x", "faoytehqpuv"))
                    .withExceptions(Arrays.asList("qm", "dwckygroe", "n", "dljdjuskb")))
                .withViews(new ResourceSetDescription().withElements(Arrays.asList("ynkceysfaqegpl"))
                    .withExceptions(Arrays.asList("shwddkvbxgk")))
                .withRelationshipLinks(
                    new ResourceSetDescription().withElements(Arrays.asList("bwptdacarvvlf", "tymtpoiwenazer"))
                        .withExceptions(Arrays.asList("rs")))
                .withRelationships(new ResourceSetDescription()
                    .withElements(Arrays.asList("xkdnwqapf", "sdpcvess", "zhhkuuipldqqc", "ekvalblhtjq"))
                    .withExceptions(Arrays.asList("vweht", "emxhzzy", "ev")))
                .withWidgetTypes(new ResourceSetDescription()
                    .withElements(Arrays.asList("vzrrryveimi", "sk", "yzatvfuzkaft", "vvruxwi"))
                    .withExceptions(Arrays.asList("ei")))
                .withRoleAssignments(new ResourceSetDescription()
                    .withElements(Arrays.asList("mjtgrqg", "gkkileplkcsmkn", "wtbbaedorvvmqf"))
                    .withExceptions(Arrays.asList("gbdg", "umgxdgdhpab", "dexjddvjs", "qwotmmwllcol")))
                .withConflationPolicies(new ResourceSetDescription()
                    .withElements(Arrays.asList("apte", "hexcgjokj", "jnhvlqjbekpeeks", "bksdqhjvyklxesl"))
                    .withExceptions(Arrays.asList("ustcpoq", "avnwqj", "g", "knlejjjkxybwfd")))
                .withSegments(new ResourceSetDescription()
                    .withElements(Arrays.asList("ztensvkzykjtj", "nsxfwu", "hcdpkupnqrmgj", "bpkuwxeoio"))
                    .withExceptions(Arrays.asList("zfav", "jzwfb", "yay")))))
                .withNextLink("ewsrsxkrplbjaze");
        model = BinaryData.fromObject(model).toObject(RoleAssignmentListResult.class);
        Assertions.assertEquals("jvaannggiycwkd", model.value().get(0).displayName().get("aawxwfeka"));
        Assertions.assertEquals("yewnfnzhhhqos", model.value().get(0).description().get("ffjkutycyarnroo"));
        Assertions.assertEquals(RoleTypes.MANAGE_ADMIN, model.value().get(0).role());
        Assertions.assertEquals("fs", model.value().get(0).principals().get(0).principalId());
        Assertions.assertEquals("pyglqdhmrjzral", model.value().get(0).principals().get(0).principalType());
        Assertions.assertEquals("jb", model.value().get(0).principals().get(0).principalMetadata().get("ypsjoq"));
        Assertions.assertEquals("wzhomewjjstl", model.value().get(0).profiles().elements().get(0));
        Assertions.assertEquals("qawmoaianc", model.value().get(0).profiles().exceptions().get(0));
        Assertions.assertEquals("ydkxr", model.value().get(0).interactions().elements().get(0));
        Assertions.assertEquals("chocokulehur", model.value().get(0).interactions().exceptions().get(0));
        Assertions.assertEquals("juqdbrx", model.value().get(0).links().elements().get(0));
        Assertions.assertEquals("xkyxlzgs", model.value().get(0).links().exceptions().get(0));
        Assertions.assertEquals("hbzffovwmbjlzqs", model.value().get(0).kpis().elements().get(0));
        Assertions.assertEquals("gcgqyhleseyqrhvy", model.value().get(0).kpis().exceptions().get(0));
        Assertions.assertEquals("tj", model.value().get(0).sasPolicies().elements().get(0));
        Assertions.assertEquals("fkndl", model.value().get(0).sasPolicies().exceptions().get(0));
        Assertions.assertEquals("yf", model.value().get(0).connectors().elements().get(0));
        Assertions.assertEquals("qm", model.value().get(0).connectors().exceptions().get(0));
        Assertions.assertEquals("ynkceysfaqegpl", model.value().get(0).views().elements().get(0));
        Assertions.assertEquals("shwddkvbxgk", model.value().get(0).views().exceptions().get(0));
        Assertions.assertEquals("bwptdacarvvlf", model.value().get(0).relationshipLinks().elements().get(0));
        Assertions.assertEquals("rs", model.value().get(0).relationshipLinks().exceptions().get(0));
        Assertions.assertEquals("xkdnwqapf", model.value().get(0).relationships().elements().get(0));
        Assertions.assertEquals("vweht", model.value().get(0).relationships().exceptions().get(0));
        Assertions.assertEquals("vzrrryveimi", model.value().get(0).widgetTypes().elements().get(0));
        Assertions.assertEquals("ei", model.value().get(0).widgetTypes().exceptions().get(0));
        Assertions.assertEquals("mjtgrqg", model.value().get(0).roleAssignments().elements().get(0));
        Assertions.assertEquals("gbdg", model.value().get(0).roleAssignments().exceptions().get(0));
        Assertions.assertEquals("apte", model.value().get(0).conflationPolicies().elements().get(0));
        Assertions.assertEquals("ustcpoq", model.value().get(0).conflationPolicies().exceptions().get(0));
        Assertions.assertEquals("ztensvkzykjtj", model.value().get(0).segments().elements().get(0));
        Assertions.assertEquals("zfav", model.value().get(0).segments().exceptions().get(0));
        Assertions.assertEquals("ewsrsxkrplbjaze", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
