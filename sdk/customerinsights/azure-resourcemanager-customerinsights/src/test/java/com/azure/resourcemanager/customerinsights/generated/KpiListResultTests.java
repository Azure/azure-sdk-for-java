// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.KpiResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiAlias;
import com.azure.resourcemanager.customerinsights.models.KpiExtract;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiListResult;
import com.azure.resourcemanager.customerinsights.models.KpiThresholds;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KpiListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KpiListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"entityType\":\"None\",\"entityTypeName\":\"vwe\",\"tenantId\":\"xoy\",\"kpiName\":\"k\",\"displayName\":{\"pyyrmfs\":\"immoiroqboshbrag\",\"opfppdbwnupgah\":\"bpav\",\"jcaacfdmmcpugm\":\"kuma\"},\"description\":{\"oqhnlb\":\"epvufhbzehew\",\"krsrrmoucs\":\"nbldxeaclgschori\",\"abeolhbhlvbm\":\"fldpuviyfc\"},\"calculationWindow\":\"Lifetime\",\"calculationWindowFieldName\":\"ibsxtkcud\",\"function\":\"Sum\",\"expression\":\"sfar\",\"unit\":\"iowl\",\"filter\":\"xnq\",\"groupBy\":[\"gf\",\"tmhqykiz\",\"d\",\"saoafcluqvox\"],\"groupByMetadata\":[{\"displayName\":{\"vwg\":\"mr\"},\"fieldName\":\"wpbmzgwesydsxwef\",\"fieldType\":\"ecb\"},{\"displayName\":{\"mtkhlowkxxpvbr\":\"wndyqleallk\",\"lhikcyychunsj\":\"fjmzsyzfho\",\"hv\":\"pjrtws\"},\"fieldName\":\"icphvtrrmhw\",\"fieldType\":\"fdpyflubh\"},{\"displayName\":{\"memhooclutnpq\":\"lrocuyzlwh\",\"jk\":\"emc\"},\"fieldName\":\"ykyujxsg\",\"fieldType\":\"srrryejylmbkzu\"},{\"displayName\":{\"uzzjgnrefq\":\"grfihotjewlp\",\"oihiqak\":\"hqo\",\"brkwpzdqt\":\"diw\"},\"fieldName\":\"cspodaqax\",\"fieldType\":\"pie\"}],\"participantProfilesMetadata\":[{\"typeName\":\"eb\"},{\"typeName\":\"fulbmoichdl\"}],\"provisioningState\":\"Succeeded\",\"thresHolds\":{\"increasingKpi\":true},\"aliases\":[{\"aliasName\":\"tnbatzvi\",\"expression\":\"sowsaael\"}],\"extracts\":[{\"extractName\":\"tc\",\"expression\":\"uhplrvkmjcwmjv\"},{\"extractName\":\"gfggcvkyylizrzbj\",\"expression\":\"sfxsf\"},{\"extractName\":\"ztlvtmvagbwidqlv\",\"expression\":\"ukoveofi\"},{\"extractName\":\"rvjfnmjmvlw\",\"expression\":\"z\"}]},\"id\":\"iblkujr\",\"name\":\"lfojuidjp\",\"type\":\"uyjucejikzo\"},{\"properties\":{\"entityType\":\"Interaction\",\"entityTypeName\":\"vtzejetjklnti\",\"tenantId\":\"juzkdbqz\",\"kpiName\":\"xrzvhqjwtrhtgvgz\",\"displayName\":{\"smwr\":\"rkolawjm\",\"jafi\":\"kcdxfzzzw\",\"chl\":\"lhguyn\"},\"description\":{\"hmoz\":\"txd\",\"ns\":\"sgzv\",\"fpafolpymwamxq\":\"nj\"},\"calculationWindow\":\"Day\",\"calculationWindowFieldName\":\"gpgdphtvdulaj\",\"function\":\"Max\",\"expression\":\"ejchcsrlz\",\"unit\":\"mzlanru\",\"filter\":\"wvnph\",\"groupBy\":[\"q\",\"pjhmqrhvthl\"],\"groupByMetadata\":[{\"displayName\":{\"hzdtxetlgydlh\":\"xsmlz\"},\"fieldName\":\"lnnpx\",\"fieldType\":\"afiqgeaarbgjekg\"},{\"displayName\":{\"idwcwvmzegjon\":\"byu\",\"rwgdnqzbrfks\":\"hj\",\"digsxcdgl\":\"zhzmtksjci\",\"wfpfmdgycx\":\"plkeuachtomflryt\"},\"fieldName\":\"skw\",\"fieldType\":\"jjyslurlps\"},{\"displayName\":{\"pq\":\"vpedwqslsrh\"},\"fieldName\":\"wskondcbrwimuvqe\",\"fieldType\":\"so\"}],\"participantProfilesMetadata\":[{\"typeName\":\"rleaes\"},{\"typeName\":\"nu\"},{\"typeName\":\"tljqobbpih\"}],\"provisioningState\":\"Failed\",\"thresHolds\":{\"increasingKpi\":false},\"aliases\":[{\"aliasName\":\"mrqbrjbbmpxdlv\",\"expression\":\"kfrexcrseqwjks\"},{\"aliasName\":\"hud\",\"expression\":\"zhxogjggsvo\"},{\"aliasName\":\"jkxibda\",\"expression\":\"hrkmdyomkxfbvfbh\"}],\"extracts\":[{\"extractName\":\"rhpw\",\"expression\":\"gddeimaw\"}]},\"id\":\"o\",\"name\":\"gkkumuikjcj\",\"type\":\"aztb\"}],\"nextLink\":\"nsq\"}")
            .toObject(KpiListResult.class);
        Assertions.assertEquals(EntityTypes.NONE, model.value().get(0).entityType());
        Assertions.assertEquals("vwe", model.value().get(0).entityTypeName());
        Assertions.assertEquals("immoiroqboshbrag", model.value().get(0).displayName().get("pyyrmfs"));
        Assertions.assertEquals("epvufhbzehew", model.value().get(0).description().get("oqhnlb"));
        Assertions.assertEquals(CalculationWindowTypes.LIFETIME, model.value().get(0).calculationWindow());
        Assertions.assertEquals("ibsxtkcud", model.value().get(0).calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.SUM, model.value().get(0).function());
        Assertions.assertEquals("sfar", model.value().get(0).expression());
        Assertions.assertEquals("iowl", model.value().get(0).unit());
        Assertions.assertEquals("xnq", model.value().get(0).filter());
        Assertions.assertEquals("gf", model.value().get(0).groupBy().get(0));
        Assertions.assertEquals(true, model.value().get(0).thresHolds().increasingKpi());
        Assertions.assertEquals("tnbatzvi", model.value().get(0).aliases().get(0).aliasName());
        Assertions.assertEquals("sowsaael", model.value().get(0).aliases().get(0).expression());
        Assertions.assertEquals("tc", model.value().get(0).extracts().get(0).extractName());
        Assertions.assertEquals("uhplrvkmjcwmjv", model.value().get(0).extracts().get(0).expression());
        Assertions.assertEquals("nsq", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KpiListResult model
            = new KpiListResult()
                .withValue(
                    Arrays.asList(
                        new KpiResourceFormatInner().withEntityType(EntityTypes.NONE)
                            .withEntityTypeName("vwe")
                            .withDisplayName(mapOf("pyyrmfs", "immoiroqboshbrag", "opfppdbwnupgah", "bpav",
                                "jcaacfdmmcpugm", "kuma"))
                            .withDescription(mapOf("oqhnlb", "epvufhbzehew", "krsrrmoucs", "nbldxeaclgschori",
                                "abeolhbhlvbm", "fldpuviyfc"))
                            .withCalculationWindow(CalculationWindowTypes.LIFETIME)
                            .withCalculationWindowFieldName("ibsxtkcud")
                            .withFunction(KpiFunctions.SUM)
                            .withExpression("sfar")
                            .withUnit("iowl")
                            .withFilter("xnq")
                            .withGroupBy(Arrays.asList("gf", "tmhqykiz", "d", "saoafcluqvox"))
                            .withThresHolds(new KpiThresholds().withIncreasingKpi(true))
                            .withAliases(
                                Arrays.asList(new KpiAlias().withAliasName("tnbatzvi").withExpression("sowsaael")))
                            .withExtracts(
                                Arrays.asList(new KpiExtract().withExtractName("tc").withExpression("uhplrvkmjcwmjv"),
                                    new KpiExtract().withExtractName("gfggcvkyylizrzbj").withExpression("sfxsf"),
                                    new KpiExtract().withExtractName("ztlvtmvagbwidqlv").withExpression("ukoveofi"),
                                    new KpiExtract().withExtractName("rvjfnmjmvlw").withExpression("z"))),
                        new KpiResourceFormatInner().withEntityType(EntityTypes.INTERACTION)
                            .withEntityTypeName("vtzejetjklnti")
                            .withDisplayName(mapOf("smwr", "rkolawjm", "jafi", "kcdxfzzzw", "chl", "lhguyn"))
                            .withDescription(mapOf("hmoz", "txd", "ns", "sgzv", "fpafolpymwamxq", "nj"))
                            .withCalculationWindow(CalculationWindowTypes.DAY)
                            .withCalculationWindowFieldName("gpgdphtvdulaj")
                            .withFunction(KpiFunctions.MAX)
                            .withExpression("ejchcsrlz")
                            .withUnit("mzlanru")
                            .withFilter("wvnph")
                            .withGroupBy(Arrays.asList("q", "pjhmqrhvthl"))
                            .withThresHolds(new KpiThresholds().withIncreasingKpi(false))
                            .withAliases(Arrays.asList(
                                new KpiAlias().withAliasName("mrqbrjbbmpxdlv").withExpression("kfrexcrseqwjks"),
                                new KpiAlias().withAliasName("hud").withExpression("zhxogjggsvo"),
                                new KpiAlias().withAliasName("jkxibda").withExpression("hrkmdyomkxfbvfbh")))
                            .withExtracts(
                                Arrays.asList(new KpiExtract().withExtractName("rhpw").withExpression("gddeimaw")))))
                .withNextLink("nsq");
        model = BinaryData.fromObject(model).toObject(KpiListResult.class);
        Assertions.assertEquals(EntityTypes.NONE, model.value().get(0).entityType());
        Assertions.assertEquals("vwe", model.value().get(0).entityTypeName());
        Assertions.assertEquals("immoiroqboshbrag", model.value().get(0).displayName().get("pyyrmfs"));
        Assertions.assertEquals("epvufhbzehew", model.value().get(0).description().get("oqhnlb"));
        Assertions.assertEquals(CalculationWindowTypes.LIFETIME, model.value().get(0).calculationWindow());
        Assertions.assertEquals("ibsxtkcud", model.value().get(0).calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.SUM, model.value().get(0).function());
        Assertions.assertEquals("sfar", model.value().get(0).expression());
        Assertions.assertEquals("iowl", model.value().get(0).unit());
        Assertions.assertEquals("xnq", model.value().get(0).filter());
        Assertions.assertEquals("gf", model.value().get(0).groupBy().get(0));
        Assertions.assertEquals(true, model.value().get(0).thresHolds().increasingKpi());
        Assertions.assertEquals("tnbatzvi", model.value().get(0).aliases().get(0).aliasName());
        Assertions.assertEquals("sowsaael", model.value().get(0).aliases().get(0).expression());
        Assertions.assertEquals("tc", model.value().get(0).extracts().get(0).extractName());
        Assertions.assertEquals("uhplrvkmjcwmjv", model.value().get(0).extracts().get(0).expression());
        Assertions.assertEquals("nsq", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
