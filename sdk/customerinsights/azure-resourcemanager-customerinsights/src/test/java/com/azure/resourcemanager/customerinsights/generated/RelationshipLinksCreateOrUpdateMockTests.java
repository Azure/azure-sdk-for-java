// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.LinkTypes;
import com.azure.resourcemanager.customerinsights.models.ParticipantProfilePropertyReference;
import com.azure.resourcemanager.customerinsights.models.RelationshipLinkFieldMapping;
import com.azure.resourcemanager.customerinsights.models.RelationshipLinkResourceFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class RelationshipLinksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":{\"vale\":\"hetxdqcmyctajqz\",\"biwksde\":\"xb\"},\"description\":{\"zwushlcxpblal\":\"sbfpzvoikvntwcz\"},\"interactionType\":\"hezpfkissaidqzs\",\"linkName\":\"oqdsg\",\"mappings\":[{\"interactionFieldName\":\"txjqfiafc\",\"linkType\":\"UpdateAlways\",\"relationshipFieldName\":\"tbfijz\"},{\"interactionFieldName\":\"cao\",\"linkType\":\"CopyIfNull\",\"relationshipFieldName\":\"lbuaukt\"},{\"interactionFieldName\":\"ieopexelxqdwr\",\"linkType\":\"UpdateAlways\",\"relationshipFieldName\":\"iljpibk\"},{\"interactionFieldName\":\"xyxyaux\",\"linkType\":\"CopyIfNull\",\"relationshipFieldName\":\"do\"}],\"profilePropertyReferences\":[{\"interactionPropertyName\":\"cnlt\",\"profilePropertyName\":\"wytkujsqy\"},{\"interactionPropertyName\":\"mmoxfablqgpwbmwh\",\"profilePropertyName\":\"ialiwry\"},{\"interactionPropertyName\":\"gnwplrrb\",\"profilePropertyName\":\"hctsbbibti\"},{\"interactionPropertyName\":\"uhqvums\",\"profilePropertyName\":\"bfs\"}],\"provisioningState\":\"Succeeded\",\"relatedProfilePropertyReferences\":[{\"interactionPropertyName\":\"bewfcuqfpyyxm\",\"profilePropertyName\":\"rmtmvwi\"},{\"interactionPropertyName\":\"uweyyjshcyb\",\"profilePropertyName\":\"fuppoxprc\"}],\"relationshipName\":\"vo\",\"relationshipGuidId\":\"jxdiikmoxrezsv\",\"tenantId\":\"lrxikj\"},\"id\":\"oywlunpipcwyb\",\"name\":\"zfn\",\"type\":\"npatpftsae\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        RelationshipLinkResourceFormat response = manager.relationshipLinks()
            .define("kfqbriqulwwt")
            .withExistingHub("eurbtigapdyarik", "ejdpdfhtwm")
            .withDisplayName(mapOf("nsnaajphmp", "qkvyhzokpoyuohu", "pezco", "ejnglpwsadaxjsum", "mfqzwqdnx", "oyj",
                "qzkvemyzdpczaq", "eedcnwmywx"))
            .withDescription(mapOf("xzuisamona", "fdbmptrw", "xroqsqjghrmthspl", "niz", "gxfqpan", "sttxs"))
            .withInteractionType("ceov")
            .withMappings(Arrays.asList(
                new RelationshipLinkFieldMapping().withInteractionFieldName("s")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS)
                    .withRelationshipFieldName("yohzixyq"),
                new RelationshipLinkFieldMapping().withInteractionFieldName("fn")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS)
                    .withRelationshipFieldName("cqqqdseipn"),
                new RelationshipLinkFieldMapping().withInteractionFieldName("uwzxhr")
                    .withLinkType(LinkTypes.COPY_IF_NULL)
                    .withRelationshipFieldName("odlhkfktl"),
                new RelationshipLinkFieldMapping().withInteractionFieldName("ddsobjopnouhbqez")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS)
                    .withRelationshipFieldName("saluzyi")))
            .withProfilePropertyReferences(Arrays.asList(
                new ParticipantProfilePropertyReference().withInteractionPropertyName("cvcewb")
                    .withProfilePropertyName("qhdgsjsatmrn"),
                new ParticipantProfilePropertyReference().withInteractionPropertyName("mazdfsqxh")
                    .withProfilePropertyName("qmr"),
                new ParticipantProfilePropertyReference().withInteractionPropertyName("jparnpvgrszrbwt")
                    .withProfilePropertyName("rcwgzwllxzlhhf")))
            .withRelatedProfilePropertyReferences(Arrays.asList(
                new ParticipantProfilePropertyReference().withInteractionPropertyName("fculzjrmhpfyw")
                    .withProfilePropertyName("yldqpzfzxsox"),
                new ParticipantProfilePropertyReference().withInteractionPropertyName("nunjlzkdr")
                    .withProfilePropertyName("cqsxytqqtcmiw")))
            .withRelationshipName("w")
            .create();

        Assertions.assertEquals("hetxdqcmyctajqz", response.displayName().get("vale"));
        Assertions.assertEquals("sbfpzvoikvntwcz", response.description().get("zwushlcxpblal"));
        Assertions.assertEquals("hezpfkissaidqzs", response.interactionType());
        Assertions.assertEquals("txjqfiafc", response.mappings().get(0).interactionFieldName());
        Assertions.assertEquals(LinkTypes.UPDATE_ALWAYS, response.mappings().get(0).linkType());
        Assertions.assertEquals("tbfijz", response.mappings().get(0).relationshipFieldName());
        Assertions.assertEquals("cnlt", response.profilePropertyReferences().get(0).interactionPropertyName());
        Assertions.assertEquals("wytkujsqy", response.profilePropertyReferences().get(0).profilePropertyName());
        Assertions.assertEquals("bewfcuqfpyyxm",
            response.relatedProfilePropertyReferences().get(0).interactionPropertyName());
        Assertions.assertEquals("rmtmvwi", response.relatedProfilePropertyReferences().get(0).profilePropertyName());
        Assertions.assertEquals("vo", response.relationshipName());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
