// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.CompletionOperationTypes;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingResourceFormat;
import com.azure.resourcemanager.customerinsights.models.ConnectorTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.ErrorManagementTypes;
import com.azure.resourcemanager.customerinsights.models.FrequencyTypes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectorMappingsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"connectorName\":\"nagzlg\",\"connectorType\":\"ExchangeOnline\",\"created\":\"2021-02-17T02:40:34Z\",\"lastModified\":\"2021-05-06T11:12:42Z\",\"entityType\":\"Profile\",\"entityTypeName\":\"qjjtsmuydqfttka\",\"connectorMappingName\":\"bdueurg\",\"displayName\":\"dcpks\",\"description\":\"ojermhzicsbfdjhy\",\"dataFormatId\":\"knyuki\",\"mappingProperties\":{\"folderPath\":\"iglh\",\"fileFilter\":\"zwxqtejpii\",\"hasHeader\":false,\"errorManagement\":{\"errorManagementType\":\"RejectUntilLimit\",\"errorLimit\":48968688},\"format\":{\"columnDelimiter\":\"agjjn\",\"acceptLanguage\":\"bylhy\",\"quoteCharacter\":\"gffklvqzr\",\"quoteEscapeCharacter\":\"rdgscnvqeonsgn\",\"arraySeparator\":\"lwmezyohxpthceop\"},\"availability\":{\"frequency\":\"Week\",\"interval\":1182751094},\"structure\":[{\"propertyName\":\"fve\",\"columnName\":\"obpbokhmm\",\"customFormatSpecifier\":\"dyarnggcjfwblq\",\"isEncrypted\":true},{\"propertyName\":\"asmcolmugpyvaos\",\"columnName\":\"kluwz\",\"customFormatSpecifier\":\"ygz\",\"isEncrypted\":true},{\"propertyName\":\"evjhubnobgu\",\"columnName\":\"isqsqkpdmioy\",\"customFormatSpecifier\":\"nmlvi\",\"isEncrypted\":true}],\"completeOperation\":{\"completionOperationType\":\"DeleteFile\",\"destinationFolder\":\"m\"}},\"nextRunTime\":\"2021-09-28T04:05:51Z\",\"runId\":\"vrdmvxyrxdh\",\"state\":\"Running\",\"tenantId\":\"jbxaotcgbz\"},\"id\":\"mbtple\",\"name\":\"oioyidoxznvgvd\",\"type\":\"muuv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConnectorMappingResourceFormat response = manager.connectorMappings()
            .getWithResponse("bgbudav", "d", "rbccqcdht", "ojvlirknucosaw", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(ConnectorTypes.EXCHANGE_ONLINE, response.connectorType());
        Assertions.assertEquals(EntityTypes.PROFILE, response.entityType());
        Assertions.assertEquals("qjjtsmuydqfttka", response.entityTypeName());
        Assertions.assertEquals("dcpks", response.displayName());
        Assertions.assertEquals("ojermhzicsbfdjhy", response.description());
        Assertions.assertEquals("iglh", response.mappingProperties().folderPath());
        Assertions.assertEquals("zwxqtejpii", response.mappingProperties().fileFilter());
        Assertions.assertEquals(false, response.mappingProperties().hasHeader());
        Assertions.assertEquals(ErrorManagementTypes.REJECT_UNTIL_LIMIT,
            response.mappingProperties().errorManagement().errorManagementType());
        Assertions.assertEquals(48968688, response.mappingProperties().errorManagement().errorLimit());
        Assertions.assertEquals("agjjn", response.mappingProperties().format().columnDelimiter());
        Assertions.assertEquals("bylhy", response.mappingProperties().format().acceptLanguage());
        Assertions.assertEquals("gffklvqzr", response.mappingProperties().format().quoteCharacter());
        Assertions.assertEquals("rdgscnvqeonsgn", response.mappingProperties().format().quoteEscapeCharacter());
        Assertions.assertEquals("lwmezyohxpthceop", response.mappingProperties().format().arraySeparator());
        Assertions.assertEquals(FrequencyTypes.WEEK, response.mappingProperties().availability().frequency());
        Assertions.assertEquals(1182751094, response.mappingProperties().availability().interval());
        Assertions.assertEquals("fve", response.mappingProperties().structure().get(0).propertyName());
        Assertions.assertEquals("obpbokhmm", response.mappingProperties().structure().get(0).columnName());
        Assertions.assertEquals("dyarnggcjfwblq",
            response.mappingProperties().structure().get(0).customFormatSpecifier());
        Assertions.assertEquals(true, response.mappingProperties().structure().get(0).isEncrypted());
        Assertions.assertEquals(CompletionOperationTypes.DELETE_FILE,
            response.mappingProperties().completeOperation().completionOperationType());
        Assertions.assertEquals("m", response.mappingProperties().completeOperation().destinationFolder());
    }
}
