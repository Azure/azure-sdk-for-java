// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.AssignmentPrincipal;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssignmentPrincipalTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssignmentPrincipal model = BinaryData.fromString(
            "{\"principalId\":\"guqigijiitns\",\"principalType\":\"xlzdesygrijwa\",\"principalMetadata\":{\"bfu\":\"anra\",\"ygywe\":\"qfrojsydgrhyd\",\"ygzmxieqvdsmak\":\"skieca\"}}")
            .toObject(AssignmentPrincipal.class);
        Assertions.assertEquals("guqigijiitns", model.principalId());
        Assertions.assertEquals("xlzdesygrijwa", model.principalType());
        Assertions.assertEquals("anra", model.principalMetadata().get("bfu"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssignmentPrincipal model = new AssignmentPrincipal().withPrincipalId("guqigijiitns")
            .withPrincipalType("xlzdesygrijwa")
            .withPrincipalMetadata(mapOf("bfu", "anra", "ygywe", "qfrojsydgrhyd", "ygzmxieqvdsmak", "skieca"));
        model = BinaryData.fromObject(model).toObject(AssignmentPrincipal.class);
        Assertions.assertEquals("guqigijiitns", model.principalId());
        Assertions.assertEquals("xlzdesygrijwa", model.principalType());
        Assertions.assertEquals("anra", model.principalMetadata().get("bfu"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
