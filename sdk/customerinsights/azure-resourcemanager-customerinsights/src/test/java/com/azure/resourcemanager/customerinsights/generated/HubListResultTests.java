// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.HubInner;
import com.azure.resourcemanager.customerinsights.models.HubBillingInfoFormat;
import com.azure.resourcemanager.customerinsights.models.HubListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HubListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HubListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"apiEndpoint\":\"xvd\",\"webEndpoint\":\"jgrtfwvukxga\",\"provisioningState\":\"ccsnhsjc\",\"tenantFeatures\":1518133549,\"hubBillingInfo\":{\"skuName\":\"kryhtnapczwlokj\",\"minUnits\":1793570177,\"maxUnits\":127818649}},\"location\":\"vnipjox\",\"tags\":{\"ilzyd\":\"chgejspodm\",\"jwyahuxinpmqnja\":\"h\"},\"id\":\"wixjsprozvcp\",\"name\":\"tegjvwmf\",\"type\":\"atscmd\"}],\"nextLink\":\"jhulsuuvmkjo\"}")
            .toObject(HubListResult.class);
        Assertions.assertEquals("vnipjox", model.value().get(0).location());
        Assertions.assertEquals("chgejspodm", model.value().get(0).tags().get("ilzyd"));
        Assertions.assertEquals(1518133549, model.value().get(0).tenantFeatures());
        Assertions.assertEquals("kryhtnapczwlokj", model.value().get(0).hubBillingInfo().skuName());
        Assertions.assertEquals(1793570177, model.value().get(0).hubBillingInfo().minUnits());
        Assertions.assertEquals(127818649, model.value().get(0).hubBillingInfo().maxUnits());
        Assertions.assertEquals("jhulsuuvmkjo", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HubListResult model = new HubListResult().withValue(Arrays.asList(new HubInner().withLocation("vnipjox")
            .withTags(mapOf("ilzyd", "chgejspodm", "jwyahuxinpmqnja", "h"))
            .withTenantFeatures(1518133549)
            .withHubBillingInfo(new HubBillingInfoFormat().withSkuName("kryhtnapczwlokj")
                .withMinUnits(1793570177)
                .withMaxUnits(127818649))))
            .withNextLink("jhulsuuvmkjo");
        model = BinaryData.fromObject(model).toObject(HubListResult.class);
        Assertions.assertEquals("vnipjox", model.value().get(0).location());
        Assertions.assertEquals("chgejspodm", model.value().get(0).tags().get("ilzyd"));
        Assertions.assertEquals(1518133549, model.value().get(0).tenantFeatures());
        Assertions.assertEquals("kryhtnapczwlokj", model.value().get(0).hubBillingInfo().skuName());
        Assertions.assertEquals(1793570177, model.value().get(0).hubBillingInfo().minUnits());
        Assertions.assertEquals(127818649, model.value().get(0).hubBillingInfo().maxUnits());
        Assertions.assertEquals("jhulsuuvmkjo", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
