// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.KpiResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiAlias;
import com.azure.resourcemanager.customerinsights.models.KpiExtract;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiThresholds;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KpiResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KpiResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"entityType\":\"Interaction\",\"entityTypeName\":\"xfz\",\"tenantId\":\"qttv\",\"kpiName\":\"pqhjpenuygbqeqq\",\"displayName\":{\"qvcdlguaucmfdjw\":\"wv\",\"ikczvvitacgxmf\":\"laxpunj\",\"sjgqrsxyp\":\"sserxhtvsoxhlwn\"},\"description\":{\"bnchrsziz\":\"u\",\"etndnbfqyggagf\":\"yuel\",\"ftbyrplro\":\"nlgmtrwahzjmu\"},\"calculationWindow\":\"Hour\",\"calculationWindowFieldName\":\"igqfusuc\",\"function\":\"Avg\",\"expression\":\"mkwkl\",\"unit\":\"oxaxm\",\"filter\":\"qalhhjnh\",\"groupBy\":[\"dyynfsvkhgb\",\"qtanarfdlpuk\",\"py\"],\"groupByMetadata\":[{\"displayName\":{\"ro\":\"jcpeogkhnmg\",\"zoyw\":\"xddbhfhpfpaz\"},\"fieldName\":\"hpdulon\",\"fieldType\":\"cnpqwteht\"},{\"displayName\":{\"duugwbsre\":\"rhrljyoogwxhn\"},\"fieldName\":\"fqkfuarenl\",\"fieldType\":\"htkln\"},{\"displayName\":{\"yfedevjbo\":\"fvv\",\"minqcym\":\"lcqxypokk\"},\"fieldName\":\"ngnbdxxew\",\"fieldType\":\"invudbch\"},{\"displayName\":{\"crqctmxxdtddmflh\":\"tvq\",\"voxczytpr\":\"ytxzvtznapxbanno\"},\"fieldName\":\"wvroevytlyokrrr\",\"fieldType\":\"uxvnsasbcrymodi\"}],\"participantProfilesMetadata\":[{\"typeName\":\"klobdxnazpmk\"}],\"provisioningState\":\"Deleting\",\"thresHolds\":{\"increasingKpi\":true},\"aliases\":[{\"aliasName\":\"xzopjhbzxl\",\"expression\":\"ohrdddt\"}],\"extracts\":[{\"extractName\":\"qbawpcbbnzqcykn\",\"expression\":\"p\"},{\"extractName\":\"ofyuicd\",\"expression\":\"zb\"}]},\"id\":\"ybww\",\"name\":\"bdvibidmhmwffpl\",\"type\":\"muvapc\"}")
            .toObject(KpiResourceFormatInner.class);
        Assertions.assertEquals(EntityTypes.INTERACTION, model.entityType());
        Assertions.assertEquals("xfz", model.entityTypeName());
        Assertions.assertEquals("wv", model.displayName().get("qvcdlguaucmfdjw"));
        Assertions.assertEquals("u", model.description().get("bnchrsziz"));
        Assertions.assertEquals(CalculationWindowTypes.HOUR, model.calculationWindow());
        Assertions.assertEquals("igqfusuc", model.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.AVG, model.function());
        Assertions.assertEquals("mkwkl", model.expression());
        Assertions.assertEquals("oxaxm", model.unit());
        Assertions.assertEquals("qalhhjnh", model.filter());
        Assertions.assertEquals("dyynfsvkhgb", model.groupBy().get(0));
        Assertions.assertEquals(true, model.thresHolds().increasingKpi());
        Assertions.assertEquals("xzopjhbzxl", model.aliases().get(0).aliasName());
        Assertions.assertEquals("ohrdddt", model.aliases().get(0).expression());
        Assertions.assertEquals("qbawpcbbnzqcykn", model.extracts().get(0).extractName());
        Assertions.assertEquals("p", model.extracts().get(0).expression());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KpiResourceFormatInner model = new KpiResourceFormatInner().withEntityType(EntityTypes.INTERACTION)
            .withEntityTypeName("xfz")
            .withDisplayName(
                mapOf("qvcdlguaucmfdjw", "wv", "ikczvvitacgxmf", "laxpunj", "sjgqrsxyp", "sserxhtvsoxhlwn"))
            .withDescription(mapOf("bnchrsziz", "u", "etndnbfqyggagf", "yuel", "ftbyrplro", "nlgmtrwahzjmu"))
            .withCalculationWindow(CalculationWindowTypes.HOUR)
            .withCalculationWindowFieldName("igqfusuc")
            .withFunction(KpiFunctions.AVG)
            .withExpression("mkwkl")
            .withUnit("oxaxm")
            .withFilter("qalhhjnh")
            .withGroupBy(Arrays.asList("dyynfsvkhgb", "qtanarfdlpuk", "py"))
            .withThresHolds(new KpiThresholds().withIncreasingKpi(true))
            .withAliases(Arrays.asList(new KpiAlias().withAliasName("xzopjhbzxl").withExpression("ohrdddt")))
            .withExtracts(Arrays.asList(new KpiExtract().withExtractName("qbawpcbbnzqcykn").withExpression("p"),
                new KpiExtract().withExtractName("ofyuicd").withExpression("zb")));
        model = BinaryData.fromObject(model).toObject(KpiResourceFormatInner.class);
        Assertions.assertEquals(EntityTypes.INTERACTION, model.entityType());
        Assertions.assertEquals("xfz", model.entityTypeName());
        Assertions.assertEquals("wv", model.displayName().get("qvcdlguaucmfdjw"));
        Assertions.assertEquals("u", model.description().get("bnchrsziz"));
        Assertions.assertEquals(CalculationWindowTypes.HOUR, model.calculationWindow());
        Assertions.assertEquals("igqfusuc", model.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.AVG, model.function());
        Assertions.assertEquals("mkwkl", model.expression());
        Assertions.assertEquals("oxaxm", model.unit());
        Assertions.assertEquals("qalhhjnh", model.filter());
        Assertions.assertEquals("dyynfsvkhgb", model.groupBy().get(0));
        Assertions.assertEquals(true, model.thresHolds().increasingKpi());
        Assertions.assertEquals("xzopjhbzxl", model.aliases().get(0).aliasName());
        Assertions.assertEquals("ohrdddt", model.aliases().get(0).expression());
        Assertions.assertEquals("qbawpcbbnzqcykn", model.extracts().get(0).extractName());
        Assertions.assertEquals("p", model.extracts().get(0).expression());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
