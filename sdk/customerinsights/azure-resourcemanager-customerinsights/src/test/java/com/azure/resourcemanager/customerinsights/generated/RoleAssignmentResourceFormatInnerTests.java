// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.RoleAssignmentResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.AssignmentPrincipal;
import com.azure.resourcemanager.customerinsights.models.ResourceSetDescription;
import com.azure.resourcemanager.customerinsights.models.RoleTypes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RoleAssignmentResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoleAssignmentResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"tenantId\":\"viyoypsuhbrnnhjx\",\"assignmentName\":\"wjh\",\"displayName\":{\"c\":\"iwetpoz\",\"ledynojpz\":\"qiqyhgfsetzlexbs\"},\"description\":{\"tnhqsycl\":\"fbzkk\",\"afhlbyl\":\"selpkpbaf\"},\"provisioningState\":\"HumanIntervention\",\"role\":\"Reader\",\"principals\":[{\"principalId\":\"xrhyzdfwrsofplt\",\"principalType\":\"bmairrhvhfnracwn\",\"principalMetadata\":{\"uuj\":\"g\",\"bxsjybvitvqkj\":\"ouhdawsigrb\"}}],\"profiles\":{\"elements\":[\"umtggmuwdchozfn\"],\"exceptions\":[\"xlvxnoakiz\",\"oaiknaqlnuwig\",\"yxl\"]},\"interactions\":{\"elements\":[\"hvxzcwxhmp\",\"jtlkexaonwivkcqh\"],\"exceptions\":[\"xk\",\"lccrmmkyupi\",\"ubyqj\",\"kakfqfr\"]},\"links\":{\"elements\":[\"il\",\"udxjascowv\",\"djkpdxph\",\"kk\"],\"exceptions\":[\"gzv\",\"fijd\"]},\"kpis\":{\"elements\":[\"nwsithuqolyahluq\",\"qulsutrjbhxykfhy\",\"ezvqq\",\"g\"],\"exceptions\":[\"tb\",\"ve\",\"reuquowtljvf\",\"hreagk\"]},\"sasPolicies\":{\"elements\":[\"rqtvbczsulmdgglm\",\"pjpfseykgs\"],\"exceptions\":[\"psznga\",\"p\",\"ylkvecjuj\"]},\"connectors\":{\"elements\":[\"adyedmzrgjfok\"],\"exceptions\":[\"noitpkpztr\",\"dgxvco\"]},\"views\":{\"elements\":[\"wugyx\"],\"exceptions\":[\"tweialwvskbuhzac\",\"qtyltcoqcujp\",\"sxzakuejkm\",\"bizt\"]},\"relationshipLinks\":{\"elements\":[\"cvovjufyc\",\"jmlbemyejiriux\"],\"exceptions\":[\"hortu\"]},\"relationships\":{\"elements\":[\"pjfe\",\"qerpptcbgqnzm\",\"h\",\"ilialwcjgc\"],\"exceptions\":[\"cccg\",\"praoxn\",\"uffatsgftipwc\"]},\"widgetTypes\":{\"elements\":[\"bh\",\"qdx\",\"urnpnuhzafccnuh\"],\"exceptions\":[\"byl\",\"ui\"]},\"roleAssignments\":{\"elements\":[\"atvcrkdlbnbq\",\"vhcs\"],\"exceptions\":[\"lwxaeaovurex\",\"ndsbdw\",\"aderzmw\"]},\"conflationPolicies\":{\"elements\":[\"agttm\"],\"exceptions\":[\"agoaqylkjztji\",\"azjcgmxitpfin\",\"cpdltkrlg\"]},\"segments\":{\"elements\":[\"drvcqguef\"],\"exceptions\":[\"mpheqdur\",\"lyujlfyoump\",\"kyeclcdigpta\"]}},\"id\":\"brzmqxucycijoclx\",\"name\":\"utgjcyz\",\"type\":\"zjd\"}")
            .toObject(RoleAssignmentResourceFormatInner.class);
        Assertions.assertEquals("iwetpoz", model.displayName().get("c"));
        Assertions.assertEquals("fbzkk", model.description().get("tnhqsycl"));
        Assertions.assertEquals(RoleTypes.READER, model.role());
        Assertions.assertEquals("xrhyzdfwrsofplt", model.principals().get(0).principalId());
        Assertions.assertEquals("bmairrhvhfnracwn", model.principals().get(0).principalType());
        Assertions.assertEquals("g", model.principals().get(0).principalMetadata().get("uuj"));
        Assertions.assertEquals("umtggmuwdchozfn", model.profiles().elements().get(0));
        Assertions.assertEquals("xlvxnoakiz", model.profiles().exceptions().get(0));
        Assertions.assertEquals("hvxzcwxhmp", model.interactions().elements().get(0));
        Assertions.assertEquals("xk", model.interactions().exceptions().get(0));
        Assertions.assertEquals("il", model.links().elements().get(0));
        Assertions.assertEquals("gzv", model.links().exceptions().get(0));
        Assertions.assertEquals("nwsithuqolyahluq", model.kpis().elements().get(0));
        Assertions.assertEquals("tb", model.kpis().exceptions().get(0));
        Assertions.assertEquals("rqtvbczsulmdgglm", model.sasPolicies().elements().get(0));
        Assertions.assertEquals("psznga", model.sasPolicies().exceptions().get(0));
        Assertions.assertEquals("adyedmzrgjfok", model.connectors().elements().get(0));
        Assertions.assertEquals("noitpkpztr", model.connectors().exceptions().get(0));
        Assertions.assertEquals("wugyx", model.views().elements().get(0));
        Assertions.assertEquals("tweialwvskbuhzac", model.views().exceptions().get(0));
        Assertions.assertEquals("cvovjufyc", model.relationshipLinks().elements().get(0));
        Assertions.assertEquals("hortu", model.relationshipLinks().exceptions().get(0));
        Assertions.assertEquals("pjfe", model.relationships().elements().get(0));
        Assertions.assertEquals("cccg", model.relationships().exceptions().get(0));
        Assertions.assertEquals("bh", model.widgetTypes().elements().get(0));
        Assertions.assertEquals("byl", model.widgetTypes().exceptions().get(0));
        Assertions.assertEquals("atvcrkdlbnbq", model.roleAssignments().elements().get(0));
        Assertions.assertEquals("lwxaeaovurex", model.roleAssignments().exceptions().get(0));
        Assertions.assertEquals("agttm", model.conflationPolicies().elements().get(0));
        Assertions.assertEquals("agoaqylkjztji", model.conflationPolicies().exceptions().get(0));
        Assertions.assertEquals("drvcqguef", model.segments().elements().get(0));
        Assertions.assertEquals("mpheqdur", model.segments().exceptions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoleAssignmentResourceFormatInner model = new RoleAssignmentResourceFormatInner()
            .withDisplayName(mapOf("c", "iwetpoz", "ledynojpz", "qiqyhgfsetzlexbs"))
            .withDescription(mapOf("tnhqsycl", "fbzkk", "afhlbyl", "selpkpbaf"))
            .withRole(RoleTypes.READER)
            .withPrincipals(Arrays.asList(new AssignmentPrincipal().withPrincipalId("xrhyzdfwrsofplt")
                .withPrincipalType("bmairrhvhfnracwn")
                .withPrincipalMetadata(mapOf("uuj", "g", "bxsjybvitvqkj", "ouhdawsigrb"))))
            .withProfiles(new ResourceSetDescription().withElements(Arrays.asList("umtggmuwdchozfn"))
                .withExceptions(Arrays.asList("xlvxnoakiz", "oaiknaqlnuwig", "yxl")))
            .withInteractions(new ResourceSetDescription().withElements(Arrays.asList("hvxzcwxhmp", "jtlkexaonwivkcqh"))
                .withExceptions(Arrays.asList("xk", "lccrmmkyupi", "ubyqj", "kakfqfr")))
            .withLinks(new ResourceSetDescription().withElements(Arrays.asList("il", "udxjascowv", "djkpdxph", "kk"))
                .withExceptions(Arrays.asList("gzv", "fijd")))
            .withKpis(new ResourceSetDescription()
                .withElements(Arrays.asList("nwsithuqolyahluq", "qulsutrjbhxykfhy", "ezvqq", "g"))
                .withExceptions(Arrays.asList("tb", "ve", "reuquowtljvf", "hreagk")))
            .withSasPolicies(new ResourceSetDescription().withElements(Arrays.asList("rqtvbczsulmdgglm", "pjpfseykgs"))
                .withExceptions(Arrays.asList("psznga", "p", "ylkvecjuj")))
            .withConnectors(new ResourceSetDescription().withElements(Arrays.asList("adyedmzrgjfok"))
                .withExceptions(Arrays.asList("noitpkpztr", "dgxvco")))
            .withViews(new ResourceSetDescription().withElements(Arrays.asList("wugyx"))
                .withExceptions(Arrays.asList("tweialwvskbuhzac", "qtyltcoqcujp", "sxzakuejkm", "bizt")))
            .withRelationshipLinks(
                new ResourceSetDescription().withElements(Arrays.asList("cvovjufyc", "jmlbemyejiriux"))
                    .withExceptions(Arrays.asList("hortu")))
            .withRelationships(
                new ResourceSetDescription().withElements(Arrays.asList("pjfe", "qerpptcbgqnzm", "h", "ilialwcjgc"))
                    .withExceptions(Arrays.asList("cccg", "praoxn", "uffatsgftipwc")))
            .withWidgetTypes(new ResourceSetDescription().withElements(Arrays.asList("bh", "qdx", "urnpnuhzafccnuh"))
                .withExceptions(Arrays.asList("byl", "ui")))
            .withRoleAssignments(new ResourceSetDescription().withElements(Arrays.asList("atvcrkdlbnbq", "vhcs"))
                .withExceptions(Arrays.asList("lwxaeaovurex", "ndsbdw", "aderzmw")))
            .withConflationPolicies(new ResourceSetDescription().withElements(Arrays.asList("agttm"))
                .withExceptions(Arrays.asList("agoaqylkjztji", "azjcgmxitpfin", "cpdltkrlg")))
            .withSegments(new ResourceSetDescription().withElements(Arrays.asList("drvcqguef"))
                .withExceptions(Arrays.asList("mpheqdur", "lyujlfyoump", "kyeclcdigpta")));
        model = BinaryData.fromObject(model).toObject(RoleAssignmentResourceFormatInner.class);
        Assertions.assertEquals("iwetpoz", model.displayName().get("c"));
        Assertions.assertEquals("fbzkk", model.description().get("tnhqsycl"));
        Assertions.assertEquals(RoleTypes.READER, model.role());
        Assertions.assertEquals("xrhyzdfwrsofplt", model.principals().get(0).principalId());
        Assertions.assertEquals("bmairrhvhfnracwn", model.principals().get(0).principalType());
        Assertions.assertEquals("g", model.principals().get(0).principalMetadata().get("uuj"));
        Assertions.assertEquals("umtggmuwdchozfn", model.profiles().elements().get(0));
        Assertions.assertEquals("xlvxnoakiz", model.profiles().exceptions().get(0));
        Assertions.assertEquals("hvxzcwxhmp", model.interactions().elements().get(0));
        Assertions.assertEquals("xk", model.interactions().exceptions().get(0));
        Assertions.assertEquals("il", model.links().elements().get(0));
        Assertions.assertEquals("gzv", model.links().exceptions().get(0));
        Assertions.assertEquals("nwsithuqolyahluq", model.kpis().elements().get(0));
        Assertions.assertEquals("tb", model.kpis().exceptions().get(0));
        Assertions.assertEquals("rqtvbczsulmdgglm", model.sasPolicies().elements().get(0));
        Assertions.assertEquals("psznga", model.sasPolicies().exceptions().get(0));
        Assertions.assertEquals("adyedmzrgjfok", model.connectors().elements().get(0));
        Assertions.assertEquals("noitpkpztr", model.connectors().exceptions().get(0));
        Assertions.assertEquals("wugyx", model.views().elements().get(0));
        Assertions.assertEquals("tweialwvskbuhzac", model.views().exceptions().get(0));
        Assertions.assertEquals("cvovjufyc", model.relationshipLinks().elements().get(0));
        Assertions.assertEquals("hortu", model.relationshipLinks().exceptions().get(0));
        Assertions.assertEquals("pjfe", model.relationships().elements().get(0));
        Assertions.assertEquals("cccg", model.relationships().exceptions().get(0));
        Assertions.assertEquals("bh", model.widgetTypes().elements().get(0));
        Assertions.assertEquals("byl", model.widgetTypes().exceptions().get(0));
        Assertions.assertEquals("atvcrkdlbnbq", model.roleAssignments().elements().get(0));
        Assertions.assertEquals("lwxaeaovurex", model.roleAssignments().exceptions().get(0));
        Assertions.assertEquals("agttm", model.conflationPolicies().elements().get(0));
        Assertions.assertEquals("agoaqylkjztji", model.conflationPolicies().exceptions().get(0));
        Assertions.assertEquals("drvcqguef", model.segments().elements().get(0));
        Assertions.assertEquals("mpheqdur", model.segments().exceptions().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
