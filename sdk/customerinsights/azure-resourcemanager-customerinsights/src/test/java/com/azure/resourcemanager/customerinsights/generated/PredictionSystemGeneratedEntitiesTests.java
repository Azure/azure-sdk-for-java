// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.PredictionSystemGeneratedEntities;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PredictionSystemGeneratedEntitiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PredictionSystemGeneratedEntities model = BinaryData.fromString(
            "{\"generatedInteractionTypes\":[\"hqfgqkayejsx\"],\"generatedLinks\":[\"flwfgziiuci\",\"jceatlijjjrtva\",\"caszk\",\"xk\"],\"generatedKpis\":{\"mignohikkg\":\"xetyvku\",\"medeil\":\"ogjwpindedvabbxb\",\"wypusuvjsl\":\"jywfcfxzirzzih\",\"djsllfr\":\"zwci\"}}")
            .toObject(PredictionSystemGeneratedEntities.class);
        Assertions.assertEquals("hqfgqkayejsx", model.generatedInteractionTypes().get(0));
        Assertions.assertEquals("flwfgziiuci", model.generatedLinks().get(0));
        Assertions.assertEquals("xetyvku", model.generatedKpis().get("mignohikkg"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PredictionSystemGeneratedEntities model
            = new PredictionSystemGeneratedEntities().withGeneratedInteractionTypes(Arrays.asList("hqfgqkayejsx"))
                .withGeneratedLinks(Arrays.asList("flwfgziiuci", "jceatlijjjrtva", "caszk", "xk"))
                .withGeneratedKpis(mapOf("mignohikkg", "xetyvku", "medeil", "ogjwpindedvabbxb", "wypusuvjsl",
                    "jywfcfxzirzzih", "djsllfr", "zwci"));
        model = BinaryData.fromObject(model).toObject(PredictionSystemGeneratedEntities.class);
        Assertions.assertEquals("hqfgqkayejsx", model.generatedInteractionTypes().get(0));
        Assertions.assertEquals("flwfgziiuci", model.generatedLinks().get(0));
        Assertions.assertEquals("xetyvku", model.generatedKpis().get("mignohikkg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
