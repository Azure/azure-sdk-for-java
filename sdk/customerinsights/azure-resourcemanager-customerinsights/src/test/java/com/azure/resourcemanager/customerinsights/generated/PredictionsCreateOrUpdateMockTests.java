// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.PredictionGradesItem;
import com.azure.resourcemanager.customerinsights.models.PredictionMappings;
import com.azure.resourcemanager.customerinsights.models.PredictionResourceFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PredictionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":{\"vjelei\":\"locfmvsw\"},\"displayName\":{\"twwulkrybpaev\":\"d\"},\"involvedInteractionTypes\":[\"yjecrqkwakkch\",\"foulborcxuibsdq\"],\"involvedKpiTypes\":[\"blpectsmwpg\",\"eoqhbjql\",\"fblerufol\",\"c\"],\"involvedRelationships\":[\"ucihbymjjvt\"],\"negativeOutcomeExpression\":\"nerxvjeazrahelh\",\"positiveOutcomeExpression\":\"im\",\"primaryProfileType\":\"iieqam\",\"provisioningState\":\"Succeeded\",\"predictionName\":\"pqgfzdosi\",\"scopeExpression\":\"kdi\",\"tenantId\":\"flgzh\",\"autoAnalyze\":false,\"mappings\":{\"score\":\"jg\",\"grade\":\"ahcrxofgrutv\",\"reason\":\"pccxziv\"},\"scoreLabel\":\"pmhz\",\"grades\":[{\"gradeName\":\"kvnnjdtujq\",\"minScoreThreshold\":1882463406,\"maxScoreThreshold\":2019672694},{\"gradeName\":\"pmxnht\",\"minScoreThreshold\":581227427,\"maxScoreThreshold\":160642731},{\"gradeName\":\"fxolrwv\",\"minScoreThreshold\":249641390,\"maxScoreThreshold\":4771595},{\"gradeName\":\"jswequ\",\"minScoreThreshold\":1944122958,\"maxScoreThreshold\":1212464548}],\"systemGeneratedEntities\":{\"generatedInteractionTypes\":[\"aytwwgwqubotb\",\"ufrkwjiemimdt\",\"powewjs\"],\"generatedLinks\":[\"eedddrftfquu\",\"p\",\"lhs\",\"igeeuwbr\"],\"generatedKpis\":{\"nxoqgv\":\"xfedqnetdqw\",\"gp\":\"zp\",\"kgpogplbjuvlnh\":\"meyobqajejirvavr\"}}},\"id\":\"nrnjhinaeg\",\"name\":\"sbxnep\",\"type\":\"mjmoplu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PredictionResourceFormat response = manager.predictions()
            .define("lhr")
            .withExistingHub("uynf", "kyvnhiysdhork")
            .withDescription(mapOf("flteatnegef", "wlwkfflaqwmwqog", "ibt", "jxnjtqbgy", "kxunsaujqgbb",
                "nvxwtdqtcbjdbtqy", "hgjsmbcsloy", "vovoa"))
            .withDisplayName(mapOf("he", "bdg", "zvzuat", "onsdunr", "bqskgqjbvitptpvs", "hgzuyxtrvf"))
            .withInvolvedInteractionTypes(Arrays.asList("vdhpiwrmuwkgjwb", "fdwfbwxy"))
            .withInvolvedKpiTypes(Arrays.asList("tmggcpdrmegajr"))
            .withInvolvedRelationships(Arrays.asList("wymzskwqk", "g"))
            .withNegativeOutcomeExpression("seiphgliup")
            .withPositiveOutcomeExpression("scoobkjlc")
            .withPrimaryProfileType("xsqcom")
            .withPredictionName("incev")
            .withScopeExpression("xkdevpxi")
            .withAutoAnalyze(true)
            .withMappings(new PredictionMappings().withScore("mduvtvodqxxp").withGrade("hm").withReason("qibtblmc"))
            .withScoreLabel("rjaznotdofqvpb")
            .withGrades(Arrays.asList(new PredictionGradesItem().withGradeName("kpsbqsbbmitaftaz")
                .withMinScoreThreshold(953956672)
                .withMaxScoreThreshold(1219301108)))
            .create();

        Assertions.assertEquals("locfmvsw", response.description().get("vjelei"));
        Assertions.assertEquals("d", response.displayName().get("twwulkrybpaev"));
        Assertions.assertEquals("yjecrqkwakkch", response.involvedInteractionTypes().get(0));
        Assertions.assertEquals("blpectsmwpg", response.involvedKpiTypes().get(0));
        Assertions.assertEquals("ucihbymjjvt", response.involvedRelationships().get(0));
        Assertions.assertEquals("nerxvjeazrahelh", response.negativeOutcomeExpression());
        Assertions.assertEquals("im", response.positiveOutcomeExpression());
        Assertions.assertEquals("iieqam", response.primaryProfileType());
        Assertions.assertEquals("pqgfzdosi", response.predictionName());
        Assertions.assertEquals("kdi", response.scopeExpression());
        Assertions.assertEquals(false, response.autoAnalyze());
        Assertions.assertEquals("jg", response.mappings().score());
        Assertions.assertEquals("ahcrxofgrutv", response.mappings().grade());
        Assertions.assertEquals("pccxziv", response.mappings().reason());
        Assertions.assertEquals("pmhz", response.scoreLabel());
        Assertions.assertEquals("kvnnjdtujq", response.grades().get(0).gradeName());
        Assertions.assertEquals(1882463406, response.grades().get(0).minScoreThreshold());
        Assertions.assertEquals(2019672694, response.grades().get(0).maxScoreThreshold());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
