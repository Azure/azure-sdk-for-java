// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.EntityType;
import com.azure.resourcemanager.customerinsights.models.InstanceOperationType;
import com.azure.resourcemanager.customerinsights.models.LinkResourceFormat;
import com.azure.resourcemanager.customerinsights.models.LinkTypes;
import com.azure.resourcemanager.customerinsights.models.ParticipantPropertyReference;
import com.azure.resourcemanager.customerinsights.models.TypePropertiesMapping;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinksCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantId\":\"lzmiyddeeq\",\"linkName\":\"vab\",\"sourceEntityType\":\"Relationship\",\"targetEntityType\":\"Interaction\",\"sourceEntityTypeName\":\"s\",\"targetEntityTypeName\":\"xduetbapfc\",\"displayName\":{\"a\":\"xtrlqbpx\",\"yegbthms\":\"kjpirgzxvbczw\"},\"description\":{\"ozfvualjt\":\"jbuiggru\",\"hscj\":\"oivsdwsngkrf\",\"hwahfbw\":\"akmhz\"},\"mappings\":[{\"sourcePropertyName\":\"nnx\",\"targetPropertyName\":\"mvynuqqko\",\"linkType\":\"UpdateAlways\"},{\"sourcePropertyName\":\"ratnicppf\",\"targetPropertyName\":\"scle\",\"linkType\":\"CopyIfNull\"}],\"participantPropertyReferences\":[{\"sourcePropertyName\":\"etndqlmfdggnbbu\",\"targetPropertyName\":\"pwovvvsfleevn\"},{\"sourcePropertyName\":\"qayrehjuqwva\",\"targetPropertyName\":\"xrlzhpziha\"}],\"provisioningState\":\"Succeeded\",\"referenceOnly\":false,\"operationType\":\"Delete\"},\"id\":\"xnq\",\"name\":\"ubfonfdbgmkf\",\"type\":\"mjcwtewfhxwyrkbr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LinkResourceFormat response = manager.links()
            .define("skkqjmxptuei")
            .withExistingHub("mlf", "hlq")
            .withSourceEntityType(EntityType.PROFILE)
            .withTargetEntityType(EntityType.NONE)
            .withSourceEntityTypeName("hvvpx")
            .withTargetEntityTypeName("oegcjoj")
            .withDisplayName(mapOf("htmep", "uidpmtonvhg"))
            .withDescription(mapOf("ummmkvavucgji", "pjbap", "mnuf", "aiq"))
            .withMappings(Arrays.asList(
                new TypePropertiesMapping().withSourcePropertyName("chxwwuzdmh")
                    .withTargetPropertyName("wlvi")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS),
                new TypePropertiesMapping().withSourcePropertyName("xmlitqdsjip")
                    .withTargetPropertyName("viscot")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS),
                new TypePropertiesMapping().withSourcePropertyName("riifefn")
                    .withTargetPropertyName("s")
                    .withLinkType(LinkTypes.COPY_IF_NULL),
                new TypePropertiesMapping().withSourcePropertyName("qoemwsi")
                    .withTargetPropertyName("eailwdqmqf")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS)))
            .withParticipantPropertyReferences(Arrays.asList(
                new ParticipantPropertyReference().withSourcePropertyName("tmfx").withTargetPropertyName("kd"),
                new ParticipantPropertyReference().withSourcePropertyName("g").withTargetPropertyName("gnamkuuyiu"),
                new ParticipantPropertyReference().withSourcePropertyName("uafixlxicwgp")
                    .withTargetPropertyName("hdcfm"),
                new ParticipantPropertyReference().withSourcePropertyName("z").withTargetPropertyName("fasfod")))
            .withReferenceOnly(false)
            .withOperationType(InstanceOperationType.DELETE)
            .create();

        Assertions.assertEquals(EntityType.RELATIONSHIP, response.sourceEntityType());
        Assertions.assertEquals(EntityType.INTERACTION, response.targetEntityType());
        Assertions.assertEquals("s", response.sourceEntityTypeName());
        Assertions.assertEquals("xduetbapfc", response.targetEntityTypeName());
        Assertions.assertEquals("xtrlqbpx", response.displayName().get("a"));
        Assertions.assertEquals("jbuiggru", response.description().get("ozfvualjt"));
        Assertions.assertEquals("nnx", response.mappings().get(0).sourcePropertyName());
        Assertions.assertEquals("mvynuqqko", response.mappings().get(0).targetPropertyName());
        Assertions.assertEquals(LinkTypes.UPDATE_ALWAYS, response.mappings().get(0).linkType());
        Assertions.assertEquals("etndqlmfdggnbbu",
            response.participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("pwovvvsfleevn", response.participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals(false, response.referenceOnly());
        Assertions.assertEquals(InstanceOperationType.DELETE, response.operationType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
