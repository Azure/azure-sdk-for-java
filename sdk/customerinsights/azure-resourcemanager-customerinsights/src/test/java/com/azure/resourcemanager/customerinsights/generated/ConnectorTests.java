// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.Connector;
import com.azure.resourcemanager.customerinsights.models.ConnectorTypes;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectorTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Connector model = BinaryData.fromString(
            "{\"connectorId\":82358613,\"connectorName\":\"kchcxwa\",\"connectorType\":\"Outbound\",\"displayName\":\"w\",\"description\":\"kjexfdeqvhp\",\"connectorProperties\":{\"jrgywwpgjxsn\":\"datalkkshkbffmbmx\",\"jgicgaao\":\"datatf\",\"wemxswvruunzz\":\"datapttaqutd\",\"yinljqe\":\"datagehkfkimrtixokff\"},\"created\":\"2021-11-10T09:12:18Z\",\"lastModified\":\"2021-04-18T13:05:47Z\",\"state\":\"Created\",\"tenantId\":\"nstshi\",\"isInternal\":false}")
            .toObject(Connector.class);
        Assertions.assertEquals("kchcxwa", model.connectorName());
        Assertions.assertEquals(ConnectorTypes.OUTBOUND, model.connectorType());
        Assertions.assertEquals("w", model.displayName());
        Assertions.assertEquals("kjexfdeqvhp", model.description());
        Assertions.assertEquals(false, model.isInternal());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Connector model = new Connector().withConnectorName("kchcxwa")
            .withConnectorType(ConnectorTypes.OUTBOUND)
            .withDisplayName("w")
            .withDescription("kjexfdeqvhp")
            .withConnectorProperties(mapOf("jrgywwpgjxsn", "datalkkshkbffmbmx", "jgicgaao", "datatf", "wemxswvruunzz",
                "datapttaqutd", "yinljqe", "datagehkfkimrtixokff"))
            .withIsInternal(false);
        model = BinaryData.fromObject(model).toObject(Connector.class);
        Assertions.assertEquals("kchcxwa", model.connectorName());
        Assertions.assertEquals(ConnectorTypes.OUTBOUND, model.connectorType());
        Assertions.assertEquals("w", model.displayName());
        Assertions.assertEquals("kjexfdeqvhp", model.description());
        Assertions.assertEquals(false, model.isInternal());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
