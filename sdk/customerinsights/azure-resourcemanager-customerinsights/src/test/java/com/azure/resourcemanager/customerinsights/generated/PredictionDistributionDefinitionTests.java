// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.PredictionDistributionDefinition;
import com.azure.resourcemanager.customerinsights.models.PredictionDistributionDefinitionDistributionsItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PredictionDistributionDefinitionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PredictionDistributionDefinition model = BinaryData.fromString(
            "{\"totalPositives\":5756074881379705787,\"totalNegatives\":6514356220844610771,\"distributions\":[{\"scoreThreshold\":757933985,\"positives\":3443059646561731295,\"negatives\":2129339423545302965,\"positivesAboveThreshold\":4083417890761070349,\"negativesAboveThreshold\":7401385878097283538}]}")
            .toObject(PredictionDistributionDefinition.class);
        Assertions.assertEquals(5756074881379705787L, model.totalPositives());
        Assertions.assertEquals(6514356220844610771L, model.totalNegatives());
        Assertions.assertEquals(757933985, model.distributions().get(0).scoreThreshold());
        Assertions.assertEquals(3443059646561731295L, model.distributions().get(0).positives());
        Assertions.assertEquals(2129339423545302965L, model.distributions().get(0).negatives());
        Assertions.assertEquals(4083417890761070349L, model.distributions().get(0).positivesAboveThreshold());
        Assertions.assertEquals(7401385878097283538L, model.distributions().get(0).negativesAboveThreshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PredictionDistributionDefinition model
            = new PredictionDistributionDefinition().withTotalPositives(5756074881379705787L)
                .withTotalNegatives(6514356220844610771L)
                .withDistributions(
                    Arrays.asList(new PredictionDistributionDefinitionDistributionsItem().withScoreThreshold(757933985)
                        .withPositives(3443059646561731295L)
                        .withNegatives(2129339423545302965L)
                        .withPositivesAboveThreshold(4083417890761070349L)
                        .withNegativesAboveThreshold(7401385878097283538L)));
        model = BinaryData.fromObject(model).toObject(PredictionDistributionDefinition.class);
        Assertions.assertEquals(5756074881379705787L, model.totalPositives());
        Assertions.assertEquals(6514356220844610771L, model.totalNegatives());
        Assertions.assertEquals(757933985, model.distributions().get(0).scoreThreshold());
        Assertions.assertEquals(3443059646561731295L, model.distributions().get(0).positives());
        Assertions.assertEquals(2129339423545302965L, model.distributions().get(0).negatives());
        Assertions.assertEquals(4083417890761070349L, model.distributions().get(0).positivesAboveThreshold());
        Assertions.assertEquals(7401385878097283538L, model.distributions().get(0).negativesAboveThreshold());
    }
}
