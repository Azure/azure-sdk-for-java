// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EnrichingKpi;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiAlias;
import com.azure.resourcemanager.customerinsights.models.KpiExtract;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiThresholds;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EnrichingKpiTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EnrichingKpi model = BinaryData.fromString(
            "{\"entityType\":\"None\",\"entityTypeName\":\"sgmbawvif\",\"tenantId\":\"kecifhocjxwklo\",\"kpiName\":\"rvtxvcmufunlc\",\"displayName\":{\"eyngjg\":\"vir\"},\"description\":{\"gglpmcrdcuelj\":\"uvp\"},\"calculationWindow\":\"Week\",\"calculationWindowFieldName\":\"hxmfqryarvsxzqb\",\"function\":\"CountDistinct\",\"expression\":\"cjkay\",\"unit\":\"thzodubtlmjtgbl\",\"filter\":\"skkfmk\",\"groupBy\":[\"jxyxgb\",\"kqvjcteoedlr\",\"lskkzpxvj\",\"zdpv\"],\"groupByMetadata\":[{\"displayName\":{\"zf\":\"pcnab\",\"e\":\"nggy\",\"kwwwnckn\":\"vzilmhiv\"},\"fieldName\":\"dajlskzpt\",\"fieldType\":\"ulweucyrth\"},{\"displayName\":{\"n\":\"ehmcgcje\",\"qnttmbq\":\"ehokamvfej\",\"kpysthhzagjf\":\"abzfivf\",\"ejgvkvebaqszllrz\":\"yyrlhgenu\"},\"fieldName\":\"mmdqgmihzpimc\",\"fieldType\":\"hnxtmin\"},{\"displayName\":{\"hzvqnsqktcmbjwz\":\"gxsvtza\",\"tglwkzpgajsqjc\":\"oslpky\",\"uqrebluimmbwx\":\"mqbmfuvqarwz\"},\"fieldName\":\"gtdmbvx\",\"fieldType\":\"raokqkbudb\"},{\"displayName\":{\"wfrke\":\"okbavlyttaak\",\"p\":\"sm\",\"gatolekscbctnan\":\"ujd\",\"wnsnlaimouxwks\":\"imwbzxpdcldpk\"},\"fieldName\":\"udmfcoibiczius\",\"fieldType\":\"wjrkb\"}],\"participantProfilesMetadata\":[{\"typeName\":\"hbtqqvyfscyrfwb\"},{\"typeName\":\"vqvogf\"}],\"provisioningState\":\"Expiring\",\"thresHolds\":{\"increasingKpi\":true},\"aliases\":[{\"aliasName\":\"limbyqecroodlik\",\"expression\":\"drdaasa\"},{\"aliasName\":\"xob\",\"expression\":\"mfkwiyjvzuk\"}],\"extracts\":[{\"extractName\":\"nawnvz\",\"expression\":\"lnk\"}]}")
            .toObject(EnrichingKpi.class);
        Assertions.assertEquals(EntityTypes.NONE, model.entityType());
        Assertions.assertEquals("sgmbawvif", model.entityTypeName());
        Assertions.assertEquals("vir", model.displayName().get("eyngjg"));
        Assertions.assertEquals("uvp", model.description().get("gglpmcrdcuelj"));
        Assertions.assertEquals(CalculationWindowTypes.WEEK, model.calculationWindow());
        Assertions.assertEquals("hxmfqryarvsxzqb", model.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.COUNT_DISTINCT, model.function());
        Assertions.assertEquals("cjkay", model.expression());
        Assertions.assertEquals("thzodubtlmjtgbl", model.unit());
        Assertions.assertEquals("skkfmk", model.filter());
        Assertions.assertEquals("jxyxgb", model.groupBy().get(0));
        Assertions.assertEquals(true, model.thresHolds().increasingKpi());
        Assertions.assertEquals("limbyqecroodlik", model.aliases().get(0).aliasName());
        Assertions.assertEquals("drdaasa", model.aliases().get(0).expression());
        Assertions.assertEquals("nawnvz", model.extracts().get(0).extractName());
        Assertions.assertEquals("lnk", model.extracts().get(0).expression());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EnrichingKpi model = new EnrichingKpi().withEntityType(EntityTypes.NONE)
            .withEntityTypeName("sgmbawvif")
            .withDisplayName(mapOf("eyngjg", "vir"))
            .withDescription(mapOf("gglpmcrdcuelj", "uvp"))
            .withCalculationWindow(CalculationWindowTypes.WEEK)
            .withCalculationWindowFieldName("hxmfqryarvsxzqb")
            .withFunction(KpiFunctions.COUNT_DISTINCT)
            .withExpression("cjkay")
            .withUnit("thzodubtlmjtgbl")
            .withFilter("skkfmk")
            .withGroupBy(Arrays.asList("jxyxgb", "kqvjcteoedlr", "lskkzpxvj", "zdpv"))
            .withThresHolds(new KpiThresholds().withIncreasingKpi(true))
            .withAliases(Arrays.asList(new KpiAlias().withAliasName("limbyqecroodlik").withExpression("drdaasa"),
                new KpiAlias().withAliasName("xob").withExpression("mfkwiyjvzuk")))
            .withExtracts(Arrays.asList(new KpiExtract().withExtractName("nawnvz").withExpression("lnk")));
        model = BinaryData.fromObject(model).toObject(EnrichingKpi.class);
        Assertions.assertEquals(EntityTypes.NONE, model.entityType());
        Assertions.assertEquals("sgmbawvif", model.entityTypeName());
        Assertions.assertEquals("vir", model.displayName().get("eyngjg"));
        Assertions.assertEquals("uvp", model.description().get("gglpmcrdcuelj"));
        Assertions.assertEquals(CalculationWindowTypes.WEEK, model.calculationWindow());
        Assertions.assertEquals("hxmfqryarvsxzqb", model.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.COUNT_DISTINCT, model.function());
        Assertions.assertEquals("cjkay", model.expression());
        Assertions.assertEquals("thzodubtlmjtgbl", model.unit());
        Assertions.assertEquals("skkfmk", model.filter());
        Assertions.assertEquals("jxyxgb", model.groupBy().get(0));
        Assertions.assertEquals(true, model.thresHolds().increasingKpi());
        Assertions.assertEquals("limbyqecroodlik", model.aliases().get(0).aliasName());
        Assertions.assertEquals("drdaasa", model.aliases().get(0).expression());
        Assertions.assertEquals("nawnvz", model.extracts().get(0).extractName());
        Assertions.assertEquals("lnk", model.extracts().get(0).expression());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
