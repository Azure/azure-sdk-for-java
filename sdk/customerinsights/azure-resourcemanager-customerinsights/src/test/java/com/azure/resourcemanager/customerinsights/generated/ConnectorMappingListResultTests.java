// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.ConnectorMappingResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.CompletionOperationTypes;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingAvailability;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingCompleteOperation;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingErrorManagement;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingFormat;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingListResult;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingProperties;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingStructure;
import com.azure.resourcemanager.customerinsights.models.ConnectorTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.ErrorManagementTypes;
import com.azure.resourcemanager.customerinsights.models.FrequencyTypes;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ConnectorMappingListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectorMappingListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"connectorName\":\"mnahmnxh\",\"connectorType\":\"Salesforce\",\"created\":\"2021-04-25T11:14:28Z\",\"lastModified\":\"2021-09-17T10:43:19Z\",\"entityType\":\"Interaction\",\"entityTypeName\":\"weooxffifhxwrs\",\"connectorMappingName\":\"wmozqvbub\",\"displayName\":\"amhsycxhxzgazt\",\"description\":\"boi\",\"dataFormatId\":\"mfqhppubowse\",\"mappingProperties\":{\"folderPath\":\"fgkmtdhern\",\"fileFilter\":\"tcjuahokqto\",\"hasHeader\":true,\"errorManagement\":{\"errorManagementType\":\"RejectUntilLimit\",\"errorLimit\":1897917187},\"format\":{\"columnDelimiter\":\"sh\",\"acceptLanguage\":\"hwpnulaiywzejywh\",\"quoteCharacter\":\"wkojpllndnpd\",\"quoteEscapeCharacter\":\"pqafgfugsnnfhy\",\"arraySeparator\":\"efy\"},\"availability\":{\"frequency\":\"Minute\",\"interval\":1953030957},\"structure\":[{\"propertyName\":\"tfjgt\",\"columnName\":\"xrjvzuyturmlm\"},{\"propertyName\":\"owolbaui\",\"columnName\":\"opionszon\"},{\"propertyName\":\"pngajin\",\"columnName\":\"ixjawrtm\"}],\"completeOperation\":{\"completionOperationType\":\"MoveFile\",\"destinationFolder\":\"yccxlzhcox\"}},\"nextRunTime\":\"2021-03-21T04:45:07Z\",\"runId\":\"khenlus\",\"state\":\"Ready\",\"tenantId\":\"tjxtxr\"},\"id\":\"cq\",\"name\":\"jvidttge\",\"type\":\"uslvyjtcvuwkasi\"},{\"properties\":{\"connectorName\":\"sfuughtuqfecjx\",\"connectorType\":\"None\",\"created\":\"2021-06-06T02:55:51Z\",\"lastModified\":\"2021-10-11T19:18:51Z\",\"entityType\":\"Interaction\",\"entityTypeName\":\"ic\",\"connectorMappingName\":\"ewmrswnjlxu\",\"displayName\":\"hwpusxj\",\"description\":\"qehgpd\",\"dataFormatId\":\"zjqatucoig\",\"mappingProperties\":{\"folderPath\":\"xncnwfe\",\"fileFilter\":\"nwgfmxjgcgbjbgd\",\"hasHeader\":true,\"errorManagement\":{\"errorManagementType\":\"RejectAndContinue\",\"errorLimit\":209712159},\"format\":{\"columnDelimiter\":\"naquflq\",\"acceptLanguage\":\"tqhamzjrw\",\"quoteCharacter\":\"qzeqyjleziunjxdf\",\"quoteEscapeCharacter\":\"ntkwcegy\",\"arraySeparator\":\"lbnseqac\"},\"availability\":{\"frequency\":\"Minute\",\"interval\":704512347},\"structure\":[{\"propertyName\":\"lguooqjagmd\",\"columnName\":\"tg\"},{\"propertyName\":\"eiookjbsah\",\"columnName\":\"tdtpdelqacslmo\"},{\"propertyName\":\"oebn\",\"columnName\":\"xofvcjk\"},{\"propertyName\":\"dirazf\",\"columnName\":\"xejw\"}],\"completeOperation\":{\"completionOperationType\":\"DeleteFile\",\"destinationFolder\":\"ujtmvcopexcmjurb\"}},\"nextRunTime\":\"2021-07-31T12:47:13Z\",\"runId\":\"kyqltqsrogt\",\"state\":\"Stopped\",\"tenantId\":\"fdjktsysidfvclgl\"},\"id\":\"n\",\"name\":\"uijtkbu\",\"type\":\"qogsfikayian\"}],\"nextLink\":\"arujt\"}")
            .toObject(ConnectorMappingListResult.class);
        Assertions.assertEquals(ConnectorTypes.SALESFORCE, model.value().get(0).connectorType());
        Assertions.assertEquals(EntityTypes.INTERACTION, model.value().get(0).entityType());
        Assertions.assertEquals("weooxffifhxwrs", model.value().get(0).entityTypeName());
        Assertions.assertEquals("amhsycxhxzgazt", model.value().get(0).displayName());
        Assertions.assertEquals("boi", model.value().get(0).description());
        Assertions.assertEquals("fgkmtdhern", model.value().get(0).mappingProperties().folderPath());
        Assertions.assertEquals("tcjuahokqto", model.value().get(0).mappingProperties().fileFilter());
        Assertions.assertEquals(true, model.value().get(0).mappingProperties().hasHeader());
        Assertions.assertEquals(ErrorManagementTypes.REJECT_UNTIL_LIMIT,
            model.value().get(0).mappingProperties().errorManagement().errorManagementType());
        Assertions.assertEquals(1897917187, model.value().get(0).mappingProperties().errorManagement().errorLimit());
        Assertions.assertEquals("sh", model.value().get(0).mappingProperties().format().columnDelimiter());
        Assertions.assertEquals("hwpnulaiywzejywh", model.value().get(0).mappingProperties().format().acceptLanguage());
        Assertions.assertEquals("wkojpllndnpd", model.value().get(0).mappingProperties().format().quoteCharacter());
        Assertions.assertEquals("pqafgfugsnnfhy",
            model.value().get(0).mappingProperties().format().quoteEscapeCharacter());
        Assertions.assertEquals("efy", model.value().get(0).mappingProperties().format().arraySeparator());
        Assertions.assertEquals(FrequencyTypes.MINUTE,
            model.value().get(0).mappingProperties().availability().frequency());
        Assertions.assertEquals(1953030957, model.value().get(0).mappingProperties().availability().interval());
        Assertions.assertEquals("tfjgt", model.value().get(0).mappingProperties().structure().get(0).propertyName());
        Assertions.assertEquals("xrjvzuyturmlm",
            model.value().get(0).mappingProperties().structure().get(0).columnName());
        Assertions.assertEquals(CompletionOperationTypes.MOVE_FILE,
            model.value().get(0).mappingProperties().completeOperation().completionOperationType());
        Assertions.assertEquals("yccxlzhcox",
            model.value().get(0).mappingProperties().completeOperation().destinationFolder());
        Assertions.assertEquals("arujt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectorMappingListResult model = new ConnectorMappingListResult().withValue(Arrays.asList(
            new ConnectorMappingResourceFormatInner().withConnectorType(ConnectorTypes.SALESFORCE)
                .withEntityType(EntityTypes.INTERACTION)
                .withEntityTypeName("weooxffifhxwrs")
                .withDisplayName("amhsycxhxzgazt")
                .withDescription("boi")
                .withMappingProperties(new ConnectorMappingProperties().withFolderPath("fgkmtdhern")
                    .withFileFilter("tcjuahokqto")
                    .withHasHeader(true)
                    .withErrorManagement(new ConnectorMappingErrorManagement()
                        .withErrorManagementType(ErrorManagementTypes.REJECT_UNTIL_LIMIT)
                        .withErrorLimit(1897917187))
                    .withFormat(new ConnectorMappingFormat().withColumnDelimiter("sh")
                        .withAcceptLanguage("hwpnulaiywzejywh")
                        .withQuoteCharacter("wkojpllndnpd")
                        .withQuoteEscapeCharacter("pqafgfugsnnfhy")
                        .withArraySeparator("efy"))
                    .withAvailability(new ConnectorMappingAvailability().withFrequency(FrequencyTypes.MINUTE)
                        .withInterval(1953030957))
                    .withStructure(Arrays.asList(
                        new ConnectorMappingStructure().withPropertyName("tfjgt").withColumnName("xrjvzuyturmlm"),
                        new ConnectorMappingStructure().withPropertyName("owolbaui").withColumnName("opionszon"),
                        new ConnectorMappingStructure().withPropertyName("pngajin").withColumnName("ixjawrtm")))
                    .withCompleteOperation(new ConnectorMappingCompleteOperation()
                        .withCompletionOperationType(CompletionOperationTypes.MOVE_FILE)
                        .withDestinationFolder("yccxlzhcox"))),
            new ConnectorMappingResourceFormatInner().withConnectorType(ConnectorTypes.NONE)
                .withEntityType(EntityTypes.INTERACTION)
                .withEntityTypeName("ic")
                .withDisplayName("hwpusxj")
                .withDescription("qehgpd")
                .withMappingProperties(new ConnectorMappingProperties().withFolderPath("xncnwfe")
                    .withFileFilter("nwgfmxjgcgbjbgd")
                    .withHasHeader(true)
                    .withErrorManagement(new ConnectorMappingErrorManagement()
                        .withErrorManagementType(ErrorManagementTypes.REJECT_AND_CONTINUE)
                        .withErrorLimit(209712159))
                    .withFormat(new ConnectorMappingFormat().withColumnDelimiter("naquflq")
                        .withAcceptLanguage("tqhamzjrw")
                        .withQuoteCharacter("qzeqyjleziunjxdf")
                        .withQuoteEscapeCharacter("ntkwcegy")
                        .withArraySeparator("lbnseqac"))
                    .withAvailability(
                        new ConnectorMappingAvailability().withFrequency(FrequencyTypes.MINUTE).withInterval(704512347))
                    .withStructure(Arrays.asList(
                        new ConnectorMappingStructure().withPropertyName("lguooqjagmd").withColumnName("tg"),
                        new ConnectorMappingStructure().withPropertyName("eiookjbsah").withColumnName("tdtpdelqacslmo"),
                        new ConnectorMappingStructure().withPropertyName("oebn").withColumnName("xofvcjk"),
                        new ConnectorMappingStructure().withPropertyName("dirazf").withColumnName("xejw")))
                    .withCompleteOperation(new ConnectorMappingCompleteOperation()
                        .withCompletionOperationType(CompletionOperationTypes.DELETE_FILE)
                        .withDestinationFolder("ujtmvcopexcmjurb")))))
            .withNextLink("arujt");
        model = BinaryData.fromObject(model).toObject(ConnectorMappingListResult.class);
        Assertions.assertEquals(ConnectorTypes.SALESFORCE, model.value().get(0).connectorType());
        Assertions.assertEquals(EntityTypes.INTERACTION, model.value().get(0).entityType());
        Assertions.assertEquals("weooxffifhxwrs", model.value().get(0).entityTypeName());
        Assertions.assertEquals("amhsycxhxzgazt", model.value().get(0).displayName());
        Assertions.assertEquals("boi", model.value().get(0).description());
        Assertions.assertEquals("fgkmtdhern", model.value().get(0).mappingProperties().folderPath());
        Assertions.assertEquals("tcjuahokqto", model.value().get(0).mappingProperties().fileFilter());
        Assertions.assertEquals(true, model.value().get(0).mappingProperties().hasHeader());
        Assertions.assertEquals(ErrorManagementTypes.REJECT_UNTIL_LIMIT,
            model.value().get(0).mappingProperties().errorManagement().errorManagementType());
        Assertions.assertEquals(1897917187, model.value().get(0).mappingProperties().errorManagement().errorLimit());
        Assertions.assertEquals("sh", model.value().get(0).mappingProperties().format().columnDelimiter());
        Assertions.assertEquals("hwpnulaiywzejywh", model.value().get(0).mappingProperties().format().acceptLanguage());
        Assertions.assertEquals("wkojpllndnpd", model.value().get(0).mappingProperties().format().quoteCharacter());
        Assertions.assertEquals("pqafgfugsnnfhy",
            model.value().get(0).mappingProperties().format().quoteEscapeCharacter());
        Assertions.assertEquals("efy", model.value().get(0).mappingProperties().format().arraySeparator());
        Assertions.assertEquals(FrequencyTypes.MINUTE,
            model.value().get(0).mappingProperties().availability().frequency());
        Assertions.assertEquals(1953030957, model.value().get(0).mappingProperties().availability().interval());
        Assertions.assertEquals("tfjgt", model.value().get(0).mappingProperties().structure().get(0).propertyName());
        Assertions.assertEquals("xrjvzuyturmlm",
            model.value().get(0).mappingProperties().structure().get(0).columnName());
        Assertions.assertEquals(CompletionOperationTypes.MOVE_FILE,
            model.value().get(0).mappingProperties().completeOperation().completionOperationType());
        Assertions.assertEquals("yccxlzhcox",
            model.value().get(0).mappingProperties().completeOperation().destinationFolder());
        Assertions.assertEquals("arujt", model.nextLink());
    }
}
