// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.PredictionResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.PredictionGradesItem;
import com.azure.resourcemanager.customerinsights.models.PredictionListResult;
import com.azure.resourcemanager.customerinsights.models.PredictionMappings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PredictionListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PredictionListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"description\":{\"zqocarku\":\"vuqbozoo\",\"nx\":\"lbcnndt\"},\"displayName\":{\"kzexnx\":\"ytllhdyzmy\"},\"involvedInteractionTypes\":[\"kywymxgaabj\",\"dtfohfaog\",\"vkiwrsiwdyjqu\"],\"involvedKpiTypes\":[\"crraueekcsu\"],\"involvedRelationships\":[\"gdda\"],\"negativeOutcomeExpression\":\"bcbgydlqidywmhm\",\"positiveOutcomeExpression\":\"tyrilkfbnrqqxvz\",\"primaryProfileType\":\"pbnfnqtx\",\"provisioningState\":\"Failed\",\"predictionName\":\"alswbnfd\",\"scopeExpression\":\"epl\",\"tenantId\":\"qjn\",\"autoAnalyze\":false,\"mappings\":{\"score\":\"zygleexahvm\",\"grade\":\"whsbrcary\",\"reason\":\"sjjzyvoaqajuveh\"},\"scoreLabel\":\"ptdmkrrbhmpful\",\"grades\":[{\"gradeName\":\"gybpmfb\",\"minScoreThreshold\":112518345,\"maxScoreThreshold\":1328467128},{\"gradeName\":\"pzkrvfy\",\"minScoreThreshold\":1887019251,\"maxScoreThreshold\":1231834847},{\"gradeName\":\"hlzvfictnkjj\",\"minScoreThreshold\":1695010345,\"maxScoreThreshold\":529451956},{\"gradeName\":\"hbkgfyrt\",\"minScoreThreshold\":1777711481,\"maxScoreThreshold\":1406841842}],\"systemGeneratedEntities\":{\"generatedInteractionTypes\":[\"scdfpdqw\"],\"generatedLinks\":[\"ev\",\"wmseharxifvqn\"],\"generatedKpis\":{\"sidqpxlbtpakft\":\"mbpjptnvwjh\",\"rymdwmf\":\"gatwmykyu\"}}},\"id\":\"hpycvjqdvdwkq\",\"name\":\"ldrlefgnaavua\",\"type\":\"n\"},{\"properties\":{\"description\":{\"hduyeuyldph\":\"outnpdctuhspfefy\"},\"displayName\":{\"y\":\"bkcgsuthhllnm\",\"i\":\"efxexlf\",\"jhhxdlajf\":\"txtjrrlkmds\",\"a\":\"xcxscvslxlh\"},\"involvedInteractionTypes\":[\"muk\",\"yjmkxettc\",\"lojfkqidnqto\",\"xjhqxcsqhtkb\"],\"involvedKpiTypes\":[\"l\"],\"involvedRelationships\":[\"ld\",\"biipsnawwlqkznx\",\"hllxricctkw\",\"uqqoaj\"],\"negativeOutcomeExpression\":\"eiyglesrwvaexhdc\",\"positiveOutcomeExpression\":\"rceqnkbrupob\",\"primaryProfileType\":\"hdmljz\",\"provisioningState\":\"HumanIntervention\",\"predictionName\":\"me\",\"scopeExpression\":\"jpbi\",\"tenantId\":\"zpphepif\",\"autoAnalyze\":false,\"mappings\":{\"score\":\"leqirccjclykcgxv\",\"grade\":\"pjlvczuoda\",\"reason\":\"punettepdjxq\"},\"scoreLabel\":\"skoynuiylpc\",\"grades\":[{\"gradeName\":\"sedveskwxegqphrg\",\"minScoreThreshold\":1143125594,\"maxScoreThreshold\":1113426435},{\"gradeName\":\"mjtsgh\",\"minScoreThreshold\":120239759,\"maxScoreThreshold\":466769214},{\"gradeName\":\"zarpzeqacdldt\",\"minScoreThreshold\":1434487132,\"maxScoreThreshold\":1809146245}],\"systemGeneratedEntities\":{\"generatedInteractionTypes\":[\"pc\",\"shnuqnd\",\"izupfkhu\"],\"generatedLinks\":[\"szxhmtvtvegwqiuk\",\"zwydwtth\"],\"generatedKpis\":{\"ajq\":\"gkskjivbss\",\"peexpgeumilhwuit\":\"u\",\"s\":\"dexyionofninbdb\",\"qrs\":\"cw\"}}},\"id\":\"pcbbprtugav\",\"name\":\"zbcyksiv\",\"type\":\"fogdrtbfcm\"}],\"nextLink\":\"ftsjcwj\"}")
            .toObject(PredictionListResult.class);
        Assertions.assertEquals("vuqbozoo", model.value().get(0).description().get("zqocarku"));
        Assertions.assertEquals("ytllhdyzmy", model.value().get(0).displayName().get("kzexnx"));
        Assertions.assertEquals("kywymxgaabj", model.value().get(0).involvedInteractionTypes().get(0));
        Assertions.assertEquals("crraueekcsu", model.value().get(0).involvedKpiTypes().get(0));
        Assertions.assertEquals("gdda", model.value().get(0).involvedRelationships().get(0));
        Assertions.assertEquals("bcbgydlqidywmhm", model.value().get(0).negativeOutcomeExpression());
        Assertions.assertEquals("tyrilkfbnrqqxvz", model.value().get(0).positiveOutcomeExpression());
        Assertions.assertEquals("pbnfnqtx", model.value().get(0).primaryProfileType());
        Assertions.assertEquals("alswbnfd", model.value().get(0).predictionName());
        Assertions.assertEquals("epl", model.value().get(0).scopeExpression());
        Assertions.assertEquals(false, model.value().get(0).autoAnalyze());
        Assertions.assertEquals("zygleexahvm", model.value().get(0).mappings().score());
        Assertions.assertEquals("whsbrcary", model.value().get(0).mappings().grade());
        Assertions.assertEquals("sjjzyvoaqajuveh", model.value().get(0).mappings().reason());
        Assertions.assertEquals("ptdmkrrbhmpful", model.value().get(0).scoreLabel());
        Assertions.assertEquals("gybpmfb", model.value().get(0).grades().get(0).gradeName());
        Assertions.assertEquals(112518345, model.value().get(0).grades().get(0).minScoreThreshold());
        Assertions.assertEquals(1328467128, model.value().get(0).grades().get(0).maxScoreThreshold());
        Assertions.assertEquals("ftsjcwj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PredictionListResult model
            = new PredictionListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PredictionResourceFormatInner()
                                .withDescription(mapOf("zqocarku", "vuqbozoo", "nx", "lbcnndt"))
                                .withDisplayName(mapOf("kzexnx", "ytllhdyzmy"))
                                .withInvolvedInteractionTypes(
                                    Arrays.asList("kywymxgaabj", "dtfohfaog", "vkiwrsiwdyjqu"))
                                .withInvolvedKpiTypes(Arrays.asList("crraueekcsu"))
                                .withInvolvedRelationships(Arrays.asList("gdda"))
                                .withNegativeOutcomeExpression("bcbgydlqidywmhm")
                                .withPositiveOutcomeExpression("tyrilkfbnrqqxvz")
                                .withPrimaryProfileType("pbnfnqtx")
                                .withPredictionName("alswbnfd")
                                .withScopeExpression("epl")
                                .withAutoAnalyze(false)
                                .withMappings(new PredictionMappings().withScore("zygleexahvm")
                                    .withGrade("whsbrcary")
                                    .withReason("sjjzyvoaqajuveh"))
                                .withScoreLabel("ptdmkrrbhmpful")
                                .withGrades(Arrays.asList(
                                    new PredictionGradesItem().withGradeName("gybpmfb")
                                        .withMinScoreThreshold(112518345)
                                        .withMaxScoreThreshold(1328467128),
                                    new PredictionGradesItem().withGradeName("pzkrvfy")
                                        .withMinScoreThreshold(1887019251)
                                        .withMaxScoreThreshold(1231834847),
                                    new PredictionGradesItem().withGradeName("hlzvfictnkjj")
                                        .withMinScoreThreshold(1695010345)
                                        .withMaxScoreThreshold(529451956),
                                    new PredictionGradesItem()
                                        .withGradeName("hbkgfyrt")
                                        .withMinScoreThreshold(1777711481)
                                        .withMaxScoreThreshold(1406841842))),
                            new PredictionResourceFormatInner()
                                .withDescription(mapOf("hduyeuyldph", "outnpdctuhspfefy"))
                                .withDisplayName(mapOf("y", "bkcgsuthhllnm", "i", "efxexlf", "jhhxdlajf", "txtjrrlkmds",
                                    "a", "xcxscvslxlh"))
                                .withInvolvedInteractionTypes(
                                    Arrays.asList("muk", "yjmkxettc", "lojfkqidnqto", "xjhqxcsqhtkb"))
                                .withInvolvedKpiTypes(Arrays.asList("l"))
                                .withInvolvedRelationships(
                                    Arrays.asList("ld", "biipsnawwlqkznx", "hllxricctkw", "uqqoaj"))
                                .withNegativeOutcomeExpression("eiyglesrwvaexhdc")
                                .withPositiveOutcomeExpression("rceqnkbrupob")
                                .withPrimaryProfileType("hdmljz")
                                .withPredictionName("me")
                                .withScopeExpression("jpbi")
                                .withAutoAnalyze(false)
                                .withMappings(new PredictionMappings().withScore("leqirccjclykcgxv")
                                    .withGrade("pjlvczuoda")
                                    .withReason("punettepdjxq"))
                                .withScoreLabel("skoynuiylpc")
                                .withGrades(Arrays.asList(
                                    new PredictionGradesItem().withGradeName("sedveskwxegqphrg")
                                        .withMinScoreThreshold(1143125594)
                                        .withMaxScoreThreshold(1113426435),
                                    new PredictionGradesItem().withGradeName("mjtsgh")
                                        .withMinScoreThreshold(120239759)
                                        .withMaxScoreThreshold(466769214),
                                    new PredictionGradesItem().withGradeName("zarpzeqacdldt")
                                        .withMinScoreThreshold(1434487132)
                                        .withMaxScoreThreshold(1809146245)))))
                .withNextLink("ftsjcwj");
        model = BinaryData.fromObject(model).toObject(PredictionListResult.class);
        Assertions.assertEquals("vuqbozoo", model.value().get(0).description().get("zqocarku"));
        Assertions.assertEquals("ytllhdyzmy", model.value().get(0).displayName().get("kzexnx"));
        Assertions.assertEquals("kywymxgaabj", model.value().get(0).involvedInteractionTypes().get(0));
        Assertions.assertEquals("crraueekcsu", model.value().get(0).involvedKpiTypes().get(0));
        Assertions.assertEquals("gdda", model.value().get(0).involvedRelationships().get(0));
        Assertions.assertEquals("bcbgydlqidywmhm", model.value().get(0).negativeOutcomeExpression());
        Assertions.assertEquals("tyrilkfbnrqqxvz", model.value().get(0).positiveOutcomeExpression());
        Assertions.assertEquals("pbnfnqtx", model.value().get(0).primaryProfileType());
        Assertions.assertEquals("alswbnfd", model.value().get(0).predictionName());
        Assertions.assertEquals("epl", model.value().get(0).scopeExpression());
        Assertions.assertEquals(false, model.value().get(0).autoAnalyze());
        Assertions.assertEquals("zygleexahvm", model.value().get(0).mappings().score());
        Assertions.assertEquals("whsbrcary", model.value().get(0).mappings().grade());
        Assertions.assertEquals("sjjzyvoaqajuveh", model.value().get(0).mappings().reason());
        Assertions.assertEquals("ptdmkrrbhmpful", model.value().get(0).scoreLabel());
        Assertions.assertEquals("gybpmfb", model.value().get(0).grades().get(0).gradeName());
        Assertions.assertEquals(112518345, model.value().get(0).grades().get(0).minScoreThreshold());
        Assertions.assertEquals(1328467128, model.value().get(0).grades().get(0).maxScoreThreshold());
        Assertions.assertEquals("ftsjcwj", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
