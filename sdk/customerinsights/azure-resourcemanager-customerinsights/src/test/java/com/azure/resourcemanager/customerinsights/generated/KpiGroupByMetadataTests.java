// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.KpiGroupByMetadata;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class KpiGroupByMetadataTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        KpiGroupByMetadata model = BinaryData.fromString(
            "{\"displayName\":{\"ukgri\":\"ebfqkkrbm\",\"fbxzpuzycisp\":\"flz\",\"y\":\"qzahmgkbrp\",\"rgvtqag\":\"hibnuqqkpika\"},\"fieldName\":\"uynhijg\",\"fieldType\":\"ebf\"}")
            .toObject(KpiGroupByMetadata.class);
        Assertions.assertEquals("ebfqkkrbm", model.displayName().get("ukgri"));
        Assertions.assertEquals("uynhijg", model.fieldName());
        Assertions.assertEquals("ebf", model.fieldType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        KpiGroupByMetadata model = new KpiGroupByMetadata()
            .withDisplayName(
                mapOf("ukgri", "ebfqkkrbm", "fbxzpuzycisp", "flz", "y", "qzahmgkbrp", "rgvtqag", "hibnuqqkpika"))
            .withFieldName("uynhijg")
            .withFieldType("ebf");
        model = BinaryData.fromObject(model).toObject(KpiGroupByMetadata.class);
        Assertions.assertEquals("ebfqkkrbm", model.displayName().get("ukgri"));
        Assertions.assertEquals("uynhijg", model.fieldName());
        Assertions.assertEquals("ebf", model.fieldType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
