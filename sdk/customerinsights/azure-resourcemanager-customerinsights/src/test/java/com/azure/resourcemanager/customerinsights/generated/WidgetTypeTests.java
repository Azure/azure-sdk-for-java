// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.WidgetType;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WidgetTypeTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WidgetType model = BinaryData.fromString(
            "{\"widgetTypeName\":\"phqlkccuz\",\"definition\":\"ygqwahoiu\",\"description\":\"gniiprglvaw\",\"displayName\":{\"fypiv\":\"d\"},\"imageUrl\":\"bbjpmcubkmif\",\"tenantId\":\"xkubvphavpmhbrbq\",\"widgetVersion\":\"govpbbtte\",\"changed\":\"2021-08-24T05:11:31Z\",\"created\":\"2021-02-05T11:40:10Z\"}")
            .toObject(WidgetType.class);
        Assertions.assertEquals("ygqwahoiu", model.definition());
        Assertions.assertEquals("gniiprglvaw", model.description());
        Assertions.assertEquals("d", model.displayName().get("fypiv"));
        Assertions.assertEquals("bbjpmcubkmif", model.imageUrl());
        Assertions.assertEquals("govpbbtte", model.widgetVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WidgetType model = new WidgetType().withDefinition("ygqwahoiu")
            .withDescription("gniiprglvaw")
            .withDisplayName(mapOf("fypiv", "d"))
            .withImageUrl("bbjpmcubkmif")
            .withWidgetVersion("govpbbtte");
        model = BinaryData.fromObject(model).toObject(WidgetType.class);
        Assertions.assertEquals("ygqwahoiu", model.definition());
        Assertions.assertEquals("gniiprglvaw", model.description());
        Assertions.assertEquals("d", model.displayName().get("fypiv"));
        Assertions.assertEquals("bbjpmcubkmif", model.imageUrl());
        Assertions.assertEquals("govpbbtte", model.widgetVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
