// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.RoleAssignment;
import com.azure.resourcemanager.customerinsights.models.AssignmentPrincipal;
import com.azure.resourcemanager.customerinsights.models.ResourceSetDescription;
import com.azure.resourcemanager.customerinsights.models.RoleTypes;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RoleAssignmentTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RoleAssignment model = BinaryData.fromString(
            "{\"tenantId\":\"qjbtxjeaoqaqbzgy\",\"assignmentName\":\"w\",\"displayName\":{\"e\":\"atbwbqam\",\"pkcvmwf\":\"liys\",\"pmywbormcq\":\"uxx\",\"mcsmyqwixvcp\":\"iciijqpkzfbojx\"},\"description\":{\"zwofalick\":\"wy\",\"mt\":\"uoiqt\",\"bcfhzagxnv\":\"vsknxrwzawnv\"},\"provisioningState\":\"Expiring\",\"role\":\"Admin\",\"principals\":[{\"principalId\":\"imwrzregzgyufu\",\"principalType\":\"rw\",\"principalMetadata\":{\"meottawj\":\"ryekzkd\",\"hnhjtfvpndpmi\":\"osxw\",\"zsauzp\":\"jpnwynudql\",\"zlrayme\":\"lxeehuxiq\"}},{\"principalId\":\"xls\",\"principalType\":\"ihmxrfdsajredn\",\"principalMetadata\":{\"vuafpwzyifr\":\"shtuwgm\",\"gzdyimsfayorp\":\"gwltxeqip\",\"sl\":\"avkjog\"}},{\"principalId\":\"bnsmjkwynqxaek\",\"principalType\":\"sykvwjtqpke\",\"principalMetadata\":{\"urcclfgxannn\":\"ltjcrspxk\",\"ewxigpxvk\":\"ytzpo\",\"dfaifyzyzeyuube\":\"maupxvpi\"}},{\"principalId\":\"ds\",\"principalType\":\"l\",\"principalMetadata\":{\"gvfltgvdihoynkr\":\"oithg\"}}],\"profiles\":{\"elements\":[\"wkd\"],\"exceptions\":[\"rucpcunnuz\",\"qumoeno\",\"naie\",\"hqhsknd\"]},\"interactions\":{\"elements\":[\"kaa\",\"lknwfoanniyop\",\"txiv\"],\"exceptions\":[\"lyxnucaephb\"]},\"links\":{\"elements\":[\"pat\"],\"exceptions\":[\"sdtcjbctvivuzqym\",\"uo\",\"o\",\"tgitsqhzvbrzc\"]},\"kpis\":{\"elements\":[\"fzndscxmxeatkd\",\"mwnrdj\",\"ibqbnaomhjrm\",\"u\"],\"exceptions\":[\"xljalfihc\",\"mobcan\"]},\"sasPolicies\":{\"elements\":[\"xqcwgax\",\"gvaknokzwjjzrl\",\"ixldzyyfy\"],\"exceptions\":[\"s\"]},\"connectors\":{\"elements\":[\"m\",\"ujivyqlkjuvsm\"],\"exceptions\":[\"lzoy\",\"vwzdbpqvyb\"]},\"views\":{\"elements\":[\"mx\"],\"exceptions\":[\"cvtlubseskvc\",\"artr\"]},\"relationshipLinks\":{\"elements\":[\"pirykycndzfqiv\"],\"exceptions\":[\"uykbbmn\"]},\"relationships\":{\"elements\":[\"tbxoee\",\"nqlnfwmyymvqd\",\"pb\",\"fckdvez\"],\"exceptions\":[\"ssbzhddubbnqfbl\",\"kalehp\",\"vawu\"]},\"widgetTypes\":{\"elements\":[\"tiogqgdmini\"],\"exceptions\":[\"eajohiyg\",\"pnbonhpcz\",\"kmktpvwxqcseh\"]},\"roleAssignments\":{\"elements\":[\"ufmpqumqyjgy\",\"zulo\"],\"exceptions\":[\"euzanhs\",\"nhsenwphpzfng\"]},\"conflationPolicies\":{\"elements\":[\"idftujwjjufwbe\",\"rkuorh\",\"ssruqnmdvhazcvj\"],\"exceptions\":[\"qswbqerzwx\",\"ytxtdgu\"]},\"segments\":{\"elements\":[\"pktgdstyouambew\",\"esw\"],\"exceptions\":[\"egmmuteyxe\"]}}")
            .toObject(RoleAssignment.class);
        Assertions.assertEquals("atbwbqam", model.displayName().get("e"));
        Assertions.assertEquals("wy", model.description().get("zwofalick"));
        Assertions.assertEquals(RoleTypes.ADMIN, model.role());
        Assertions.assertEquals("imwrzregzgyufu", model.principals().get(0).principalId());
        Assertions.assertEquals("rw", model.principals().get(0).principalType());
        Assertions.assertEquals("ryekzkd", model.principals().get(0).principalMetadata().get("meottawj"));
        Assertions.assertEquals("wkd", model.profiles().elements().get(0));
        Assertions.assertEquals("rucpcunnuz", model.profiles().exceptions().get(0));
        Assertions.assertEquals("kaa", model.interactions().elements().get(0));
        Assertions.assertEquals("lyxnucaephb", model.interactions().exceptions().get(0));
        Assertions.assertEquals("pat", model.links().elements().get(0));
        Assertions.assertEquals("sdtcjbctvivuzqym", model.links().exceptions().get(0));
        Assertions.assertEquals("fzndscxmxeatkd", model.kpis().elements().get(0));
        Assertions.assertEquals("xljalfihc", model.kpis().exceptions().get(0));
        Assertions.assertEquals("xqcwgax", model.sasPolicies().elements().get(0));
        Assertions.assertEquals("s", model.sasPolicies().exceptions().get(0));
        Assertions.assertEquals("m", model.connectors().elements().get(0));
        Assertions.assertEquals("lzoy", model.connectors().exceptions().get(0));
        Assertions.assertEquals("mx", model.views().elements().get(0));
        Assertions.assertEquals("cvtlubseskvc", model.views().exceptions().get(0));
        Assertions.assertEquals("pirykycndzfqiv", model.relationshipLinks().elements().get(0));
        Assertions.assertEquals("uykbbmn", model.relationshipLinks().exceptions().get(0));
        Assertions.assertEquals("tbxoee", model.relationships().elements().get(0));
        Assertions.assertEquals("ssbzhddubbnqfbl", model.relationships().exceptions().get(0));
        Assertions.assertEquals("tiogqgdmini", model.widgetTypes().elements().get(0));
        Assertions.assertEquals("eajohiyg", model.widgetTypes().exceptions().get(0));
        Assertions.assertEquals("ufmpqumqyjgy", model.roleAssignments().elements().get(0));
        Assertions.assertEquals("euzanhs", model.roleAssignments().exceptions().get(0));
        Assertions.assertEquals("idftujwjjufwbe", model.conflationPolicies().elements().get(0));
        Assertions.assertEquals("qswbqerzwx", model.conflationPolicies().exceptions().get(0));
        Assertions.assertEquals("pktgdstyouambew", model.segments().elements().get(0));
        Assertions.assertEquals("egmmuteyxe", model.segments().exceptions().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RoleAssignment model
            = new RoleAssignment()
                .withDisplayName(
                    mapOf("e", "atbwbqam", "pkcvmwf", "liys", "pmywbormcq", "uxx", "mcsmyqwixvcp", "iciijqpkzfbojx"))
                .withDescription(mapOf("zwofalick", "wy", "mt", "uoiqt", "bcfhzagxnv", "vsknxrwzawnv"))
                .withRole(RoleTypes.ADMIN)
                .withPrincipals(
                    Arrays.asList(
                        new AssignmentPrincipal().withPrincipalId("imwrzregzgyufu")
                            .withPrincipalType("rw")
                            .withPrincipalMetadata(mapOf("meottawj", "ryekzkd", "hnhjtfvpndpmi", "osxw", "zsauzp",
                                "jpnwynudql", "zlrayme", "lxeehuxiq")),
                        new AssignmentPrincipal().withPrincipalId("xls")
                            .withPrincipalType("ihmxrfdsajredn")
                            .withPrincipalMetadata(
                                mapOf("vuafpwzyifr", "shtuwgm", "gzdyimsfayorp", "gwltxeqip", "sl", "avkjog")),
                        new AssignmentPrincipal().withPrincipalId("bnsmjkwynqxaek")
                            .withPrincipalType("sykvwjtqpke")
                            .withPrincipalMetadata(mapOf("urcclfgxannn", "ltjcrspxk", "ewxigpxvk", "ytzpo",
                                "dfaifyzyzeyuube", "maupxvpi")),
                        new AssignmentPrincipal().withPrincipalId("ds")
                            .withPrincipalType("l")
                            .withPrincipalMetadata(mapOf("gvfltgvdihoynkr", "oithg"))))
                .withProfiles(new ResourceSetDescription().withElements(Arrays.asList("wkd"))
                    .withExceptions(Arrays.asList("rucpcunnuz", "qumoeno", "naie", "hqhsknd")))
                .withInteractions(
                    new ResourceSetDescription().withElements(Arrays.asList("kaa", "lknwfoanniyop", "txiv"))
                        .withExceptions(Arrays.asList("lyxnucaephb")))
                .withLinks(new ResourceSetDescription().withElements(Arrays.asList("pat"))
                    .withExceptions(Arrays.asList("sdtcjbctvivuzqym", "uo", "o", "tgitsqhzvbrzc")))
                .withKpis(new ResourceSetDescription()
                    .withElements(Arrays.asList("fzndscxmxeatkd", "mwnrdj", "ibqbnaomhjrm", "u"))
                    .withExceptions(Arrays.asList("xljalfihc", "mobcan")))
                .withSasPolicies(
                    new ResourceSetDescription().withElements(Arrays.asList("xqcwgax", "gvaknokzwjjzrl", "ixldzyyfy"))
                        .withExceptions(Arrays.asList("s")))
                .withConnectors(new ResourceSetDescription().withElements(Arrays.asList("m", "ujivyqlkjuvsm"))
                    .withExceptions(Arrays.asList("lzoy", "vwzdbpqvyb")))
                .withViews(new ResourceSetDescription().withElements(Arrays.asList("mx"))
                    .withExceptions(Arrays.asList("cvtlubseskvc", "artr")))
                .withRelationshipLinks(new ResourceSetDescription().withElements(Arrays.asList("pirykycndzfqiv"))
                    .withExceptions(Arrays.asList("uykbbmn")))
                .withRelationships(
                    new ResourceSetDescription().withElements(Arrays.asList("tbxoee", "nqlnfwmyymvqd", "pb", "fckdvez"))
                        .withExceptions(Arrays.asList("ssbzhddubbnqfbl", "kalehp", "vawu")))
                .withWidgetTypes(new ResourceSetDescription().withElements(Arrays.asList("tiogqgdmini"))
                    .withExceptions(Arrays.asList("eajohiyg", "pnbonhpcz", "kmktpvwxqcseh")))
                .withRoleAssignments(new ResourceSetDescription().withElements(Arrays.asList("ufmpqumqyjgy", "zulo"))
                    .withExceptions(Arrays.asList("euzanhs", "nhsenwphpzfng")))
                .withConflationPolicies(new ResourceSetDescription()
                    .withElements(Arrays.asList("idftujwjjufwbe", "rkuorh", "ssruqnmdvhazcvj"))
                    .withExceptions(Arrays.asList("qswbqerzwx", "ytxtdgu")))
                .withSegments(new ResourceSetDescription().withElements(Arrays.asList("pktgdstyouambew", "esw"))
                    .withExceptions(Arrays.asList("egmmuteyxe")));
        model = BinaryData.fromObject(model).toObject(RoleAssignment.class);
        Assertions.assertEquals("atbwbqam", model.displayName().get("e"));
        Assertions.assertEquals("wy", model.description().get("zwofalick"));
        Assertions.assertEquals(RoleTypes.ADMIN, model.role());
        Assertions.assertEquals("imwrzregzgyufu", model.principals().get(0).principalId());
        Assertions.assertEquals("rw", model.principals().get(0).principalType());
        Assertions.assertEquals("ryekzkd", model.principals().get(0).principalMetadata().get("meottawj"));
        Assertions.assertEquals("wkd", model.profiles().elements().get(0));
        Assertions.assertEquals("rucpcunnuz", model.profiles().exceptions().get(0));
        Assertions.assertEquals("kaa", model.interactions().elements().get(0));
        Assertions.assertEquals("lyxnucaephb", model.interactions().exceptions().get(0));
        Assertions.assertEquals("pat", model.links().elements().get(0));
        Assertions.assertEquals("sdtcjbctvivuzqym", model.links().exceptions().get(0));
        Assertions.assertEquals("fzndscxmxeatkd", model.kpis().elements().get(0));
        Assertions.assertEquals("xljalfihc", model.kpis().exceptions().get(0));
        Assertions.assertEquals("xqcwgax", model.sasPolicies().elements().get(0));
        Assertions.assertEquals("s", model.sasPolicies().exceptions().get(0));
        Assertions.assertEquals("m", model.connectors().elements().get(0));
        Assertions.assertEquals("lzoy", model.connectors().exceptions().get(0));
        Assertions.assertEquals("mx", model.views().elements().get(0));
        Assertions.assertEquals("cvtlubseskvc", model.views().exceptions().get(0));
        Assertions.assertEquals("pirykycndzfqiv", model.relationshipLinks().elements().get(0));
        Assertions.assertEquals("uykbbmn", model.relationshipLinks().exceptions().get(0));
        Assertions.assertEquals("tbxoee", model.relationships().elements().get(0));
        Assertions.assertEquals("ssbzhddubbnqfbl", model.relationships().exceptions().get(0));
        Assertions.assertEquals("tiogqgdmini", model.widgetTypes().elements().get(0));
        Assertions.assertEquals("eajohiyg", model.widgetTypes().exceptions().get(0));
        Assertions.assertEquals("ufmpqumqyjgy", model.roleAssignments().elements().get(0));
        Assertions.assertEquals("euzanhs", model.roleAssignments().exceptions().get(0));
        Assertions.assertEquals("idftujwjjufwbe", model.conflationPolicies().elements().get(0));
        Assertions.assertEquals("qswbqerzwx", model.conflationPolicies().exceptions().get(0));
        Assertions.assertEquals("pktgdstyouambew", model.segments().elements().get(0));
        Assertions.assertEquals("egmmuteyxe", model.segments().exceptions().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
