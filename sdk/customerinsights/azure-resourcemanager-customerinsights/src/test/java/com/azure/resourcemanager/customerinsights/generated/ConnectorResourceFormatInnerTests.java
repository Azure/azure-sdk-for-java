// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.ConnectorResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.ConnectorTypes;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ConnectorResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectorResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"connectorId\":689564177,\"connectorName\":\"rcmjdmspofapvuh\",\"connectorType\":\"Outbound\",\"displayName\":\"ni\",\"description\":\"rz\",\"connectorProperties\":{\"bcuiiz\":\"datazjedmstkvnlv\",\"snvpdibmi\":\"dataktwfa\",\"qnyophzfyls\":\"dataostbzbkiwb\"},\"created\":\"2021-10-02T14:02:16Z\",\"lastModified\":\"2021-11-24T10:50:05Z\",\"state\":\"Expiring\",\"tenantId\":\"nezzcezelfwyfwlw\",\"isInternal\":true},\"id\":\"etnpsihcl\",\"name\":\"fzvaylptr\",\"type\":\"qqwzt\"}")
            .toObject(ConnectorResourceFormatInner.class);
        Assertions.assertEquals("rcmjdmspofapvuh", model.connectorName());
        Assertions.assertEquals(ConnectorTypes.OUTBOUND, model.connectorType());
        Assertions.assertEquals("ni", model.displayName());
        Assertions.assertEquals("rz", model.description());
        Assertions.assertEquals(true, model.isInternal());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectorResourceFormatInner model = new ConnectorResourceFormatInner().withConnectorName("rcmjdmspofapvuh")
            .withConnectorType(ConnectorTypes.OUTBOUND)
            .withDisplayName("ni")
            .withDescription("rz")
            .withConnectorProperties(
                mapOf("bcuiiz", "datazjedmstkvnlv", "snvpdibmi", "dataktwfa", "qnyophzfyls", "dataostbzbkiwb"))
            .withIsInternal(true);
        model = BinaryData.fromObject(model).toObject(ConnectorResourceFormatInner.class);
        Assertions.assertEquals("rcmjdmspofapvuh", model.connectorName());
        Assertions.assertEquals(ConnectorTypes.OUTBOUND, model.connectorType());
        Assertions.assertEquals("ni", model.displayName());
        Assertions.assertEquals("rz", model.description());
        Assertions.assertEquals(true, model.isInternal());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
