// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.ProfileEnumValidValuesFormat;
import com.azure.resourcemanager.customerinsights.models.PropertyDefinition;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PropertyDefinitionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PropertyDefinition model = BinaryData.fromString(
            "{\"arrayValueSeparator\":\"a\",\"enumValidValues\":[{\"value\":1338226566,\"localizedValueNames\":{\"kftutqxlngxlefg\":\"yvvtpgvdfgio\",\"rvqdra\":\"gnxkrxdqmidtth\",\"skanyk\":\"hjybigehoqfbo\"}},{\"value\":1440760803,\"localizedValueNames\":{\"gpphrcgyn\":\"iywgqywgndrvynh\"}},{\"value\":1338467628,\"localizedValueNames\":{\"fsxlzevgbmqjqa\":\"cfvmmco\",\"pmivkwlzu\":\"c\"}}],\"fieldName\":\"ccfwnfnbacfion\",\"fieldType\":\"ebxetqgtzxdp\",\"isArray\":false,\"isEnum\":true,\"isFlagEnum\":true,\"isImage\":true,\"isLocalizedString\":true,\"isName\":false,\"isRequired\":true,\"propertyId\":\"sub\",\"schemaItemPropLink\":\"njampm\",\"maxLength\":1365754949,\"isAvailableInGraph\":false,\"dataSourcePrecedenceRules\":[{\"dataSource\":{\"name\":\"wooc\",\"dataSourceType\":\"Connector\",\"status\":\"Active\",\"id\":721157092,\"dataSourceReferenceId\":\"kvlrxnj\"},\"precedence\":1486121572},{\"dataSource\":{\"name\":\"pheoflokeyy\",\"dataSourceType\":\"SystemDefault\",\"status\":\"Active\",\"id\":147839675,\"dataSourceReferenceId\":\"tgrhpdjpjumas\"},\"precedence\":271162944},{\"dataSource\":{\"name\":\"qyeg\",\"dataSourceType\":\"LinkInteraction\",\"status\":\"None\",\"id\":703719662,\"dataSourceReferenceId\":\"e\"},\"precedence\":497531730},{\"dataSource\":{\"name\":\"dudgwdslfhot\",\"dataSourceType\":\"LinkInteraction\",\"status\":\"Deleted\",\"id\":1581858778,\"dataSourceReferenceId\":\"bjnpg\"},\"precedence\":1146215181}]}")
            .toObject(PropertyDefinition.class);
        Assertions.assertEquals("a", model.arrayValueSeparator());
        Assertions.assertEquals(1338226566, model.enumValidValues().get(0).value());
        Assertions.assertEquals("yvvtpgvdfgio",
            model.enumValidValues().get(0).localizedValueNames().get("kftutqxlngxlefg"));
        Assertions.assertEquals("ccfwnfnbacfion", model.fieldName());
        Assertions.assertEquals("ebxetqgtzxdp", model.fieldType());
        Assertions.assertEquals(false, model.isArray());
        Assertions.assertEquals(true, model.isEnum());
        Assertions.assertEquals(true, model.isFlagEnum());
        Assertions.assertEquals(true, model.isImage());
        Assertions.assertEquals(true, model.isLocalizedString());
        Assertions.assertEquals(false, model.isName());
        Assertions.assertEquals(true, model.isRequired());
        Assertions.assertEquals("sub", model.propertyId());
        Assertions.assertEquals("njampm", model.schemaItemPropLink());
        Assertions.assertEquals(1365754949, model.maxLength());
        Assertions.assertEquals(false, model.isAvailableInGraph());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PropertyDefinition model = new PropertyDefinition().withArrayValueSeparator("a")
            .withEnumValidValues(Arrays.asList(
                new ProfileEnumValidValuesFormat().withValue(1338226566)
                    .withLocalizedValueNames(mapOf("kftutqxlngxlefg", "yvvtpgvdfgio", "rvqdra", "gnxkrxdqmidtth",
                        "skanyk", "hjybigehoqfbo")),
                new ProfileEnumValidValuesFormat().withValue(1440760803)
                    .withLocalizedValueNames(mapOf("gpphrcgyn", "iywgqywgndrvynh")),
                new ProfileEnumValidValuesFormat().withValue(1338467628)
                    .withLocalizedValueNames(mapOf("fsxlzevgbmqjqa", "cfvmmco", "pmivkwlzu", "c"))))
            .withFieldName("ccfwnfnbacfion")
            .withFieldType("ebxetqgtzxdp")
            .withIsArray(false)
            .withIsEnum(true)
            .withIsFlagEnum(true)
            .withIsImage(true)
            .withIsLocalizedString(true)
            .withIsName(false)
            .withIsRequired(true)
            .withPropertyId("sub")
            .withSchemaItemPropLink("njampm")
            .withMaxLength(1365754949)
            .withIsAvailableInGraph(false);
        model = BinaryData.fromObject(model).toObject(PropertyDefinition.class);
        Assertions.assertEquals("a", model.arrayValueSeparator());
        Assertions.assertEquals(1338226566, model.enumValidValues().get(0).value());
        Assertions.assertEquals("yvvtpgvdfgio",
            model.enumValidValues().get(0).localizedValueNames().get("kftutqxlngxlefg"));
        Assertions.assertEquals("ccfwnfnbacfion", model.fieldName());
        Assertions.assertEquals("ebxetqgtzxdp", model.fieldType());
        Assertions.assertEquals(false, model.isArray());
        Assertions.assertEquals(true, model.isEnum());
        Assertions.assertEquals(true, model.isFlagEnum());
        Assertions.assertEquals(true, model.isImage());
        Assertions.assertEquals(true, model.isLocalizedString());
        Assertions.assertEquals(false, model.isName());
        Assertions.assertEquals(true, model.isRequired());
        Assertions.assertEquals("sub", model.propertyId());
        Assertions.assertEquals("njampm", model.schemaItemPropLink());
        Assertions.assertEquals(1365754949, model.maxLength());
        Assertions.assertEquals(false, model.isAvailableInGraph());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
