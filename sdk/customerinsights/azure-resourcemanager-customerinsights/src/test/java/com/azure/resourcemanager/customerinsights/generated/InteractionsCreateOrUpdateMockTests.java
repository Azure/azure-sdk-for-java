// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.InteractionResourceFormat;
import com.azure.resourcemanager.customerinsights.models.Participant;
import com.azure.resourcemanager.customerinsights.models.ParticipantPropertyReference;
import com.azure.resourcemanager.customerinsights.models.ProfileEnumValidValuesFormat;
import com.azure.resourcemanager.customerinsights.models.PropertyDefinition;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class InteractionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"idPropertyNames\":[\"fuyf\",\"bpfiddhlrufz\",\"qyjmqrfuioc\",\"selqkrsazrhxud\"],\"participantProfiles\":[{\"profileTypeName\":\"dtffisjmrkkhm\",\"participantPropertyReferences\":[{\"sourcePropertyName\":\"mdlgy\",\"targetPropertyName\":\"ixokwtjawhv\"},{\"sourcePropertyName\":\"gnqfqqdlcvmyol\",\"targetPropertyName\":\"aymjchtvsnvlaq\"},{\"sourcePropertyName\":\"nzyzawatuwqko\",\"targetPropertyName\":\"bczothymgobllms\"}],\"participantName\":\"wgwima\",\"displayName\":{\"vkhgv\":\"akhtmhobcyanrfvq\",\"ymhcctopuo\":\"ogxkfnaoa\",\"hquhczygxvhajp\":\"yrnskb\"},\"description\":{\"wmvgxsmpknpwir\":\"xqnwhscoz\"},\"role\":\"jfewxqouox\"},{\"profileTypeName\":\"dnmckap\",\"participantPropertyReferences\":[{\"sourcePropertyName\":\"knq\",\"targetPropertyName\":\"ijgencdgmoq\"},{\"sourcePropertyName\":\"eqi\",\"targetPropertyName\":\"kkyo\"},{\"sourcePropertyName\":\"ltjouwhldxwh\",\"targetPropertyName\":\"epr\"}],\"participantName\":\"q\",\"displayName\":{\"tbfjtdyotnplf\":\"fxmcvprstvk\"},\"description\":{\"tjtdrhutfd\":\"occqrqxw\",\"txop\":\"a\",\"adkm\":\"eh\",\"vctkbbx\":\"zgssz\"},\"role\":\"arlsirn\"}],\"primaryParticipantProfilePropertyName\":\"labvoyngsuxxc\",\"dataSourcePrecedenceRules\":[{\"dataSource\":{\"name\":\"joghdsa\",\"dataSourceType\":\"SystemDefault\",\"status\":\"Active\",\"id\":928036957,\"dataSourceReferenceId\":\"ovdxxurntujmoil\"},\"precedence\":1624234015},{\"dataSource\":{\"name\":\"hdeeljslkyozdsfz\",\"dataSourceType\":\"Connector\",\"status\":\"Deleted\",\"id\":2062030350,\"dataSourceReferenceId\":\"tsl\"},\"precedence\":423378143}],\"defaultDataSource\":{\"name\":\"j\",\"dataSourceType\":\"SystemDefault\",\"status\":\"Deleted\",\"id\":620670470,\"dataSourceReferenceId\":\"obpnjodf\"},\"isActivity\":true,\"apiEntitySetName\":\"qwm\",\"entityType\":\"Relationship\",\"fields\":[{\"arrayValueSeparator\":\"sazuxejgwecywnfy\",\"enumValidValues\":[{}],\"fieldName\":\"aczsinq\",\"fieldType\":\"dnddbbozsyv\",\"isArray\":true,\"isEnum\":false,\"isFlagEnum\":false,\"isImage\":true,\"isLocalizedString\":true,\"isName\":false,\"isRequired\":false,\"propertyId\":\"eeih\",\"schemaItemPropLink\":\"mnoejhqlfmsib\",\"maxLength\":2053453145,\"isAvailableInGraph\":true,\"dataSourcePrecedenceRules\":[{}]},{\"arrayValueSeparator\":\"ydpmypgfqvmt\",\"enumValidValues\":[{}],\"fieldName\":\"lakxpejpewp\",\"fieldType\":\"jlfxampqcrzgeuq\",\"isArray\":true,\"isEnum\":false,\"isFlagEnum\":false,\"isImage\":true,\"isLocalizedString\":false,\"isName\":true,\"isRequired\":false,\"propertyId\":\"adr\",\"schemaItemPropLink\":\"gddhjkrukizyhgs\",\"maxLength\":1319717503,\"isAvailableInGraph\":false,\"dataSourcePrecedenceRules\":[{},{}]},{\"arrayValueSeparator\":\"qfpjb\",\"enumValidValues\":[{},{}],\"fieldName\":\"weeiwdhdmnc\",\"fieldType\":\"bf\",\"isArray\":true,\"isEnum\":false,\"isFlagEnum\":true,\"isImage\":true,\"isLocalizedString\":false,\"isName\":false,\"isRequired\":false,\"propertyId\":\"lciichgjs\",\"schemaItemPropLink\":\"mvxodgwxfkzsif\",\"maxLength\":1442848280,\"isAvailableInGraph\":true,\"dataSourcePrecedenceRules\":[{}]}],\"instancesCount\":917565572,\"lastChangedUtc\":\"2021-03-24T17:40:12Z\",\"provisioningState\":\"Succeeded\",\"schemaItemTypeLink\":\"bbwjtrdxrizagb\",\"tenantId\":\"iarks\",\"timestampFieldName\":\"pgdqxwabzrw\",\"typeName\":\"rxhaclcdosqkp\",\"attributes\":{\"lw\":[\"kifmmainw\",\"edxkpbqwuntob\",\"izazz\"]},\"description\":{\"laxp\":\"djufbnkl\",\"lfdxaglz\":\"gjwdab\",\"siflikyypzkgxf\":\"ytlbtlqhopxouvm\"},\"displayName\":{\"wgpterdiuw\":\"yrqsdbpokszanm\",\"kskw\":\"i\",\"olzkgys\":\"tsdetjygowifcq\",\"zoxlvoc\":\"gzyy\"},\"localizedAttributes\":{\"xi\":{\"vmabzzbwaybfm\":\"xxheigmlilwzghjh\",\"preojxrjnbsconxa\":\"afbgymqtn\",\"izqfsgnwdxz\":\"ipneychb\",\"rfbo\":\"dpq\"}},\"smallImage\":\"lnfyzav\",\"mediumImage\":\"bypicdbkpdj\",\"largeImage\":\"qh\"},\"id\":\"mqazpdgonjh\",\"name\":\"shthmgpczqu\",\"type\":\"ptkbvcpxtzhi\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        InteractionResourceFormat response
            = manager.interactions()
                .define("hoe")
                .withExistingHub("ctgkppgkqzkcyzmf", "ngdyfcixrhlcq")
                .withIdPropertyNames(Arrays.asList("utgwrmkahpqha"))
                .withParticipantProfiles(Arrays.asList(
                    new Participant().withProfileTypeName("tac")
                        .withParticipantPropertyReferences(Arrays.asList(
                            new ParticipantPropertyReference().withSourcePropertyName("ncogmipnmliqmvlb")
                                .withTargetPropertyName("i"),
                            new ParticipantPropertyReference().withSourcePropertyName("eaqgrvgpomxpupd")
                                .withTargetPropertyName("sdfjyiesoc"),
                            new ParticipantPropertyReference().withSourcePropertyName("iqbuou")
                                .withTargetPropertyName("mpyzgleo")))
                        .withParticipantName("jsb")
                        .withDisplayName(mapOf("ciqgjjrlhiqlwixv", "wzvdajfwnncfm", "bas", "bouguxtndopgjt"))
                        .withDescription(mapOf("lndbeaqbkixv", "ap", "spugzfeuzjljmph", "lwynpbbfqvzfj"))
                        .withRole("yezolgjzmicu"),
                    new Participant().withProfileTypeName("doccnxshanzb")
                        .withParticipantPropertyReferences(
                            Arrays.asList(
                                new ParticipantPropertyReference().withSourcePropertyName("adh")
                                    .withTargetPropertyName("atecaa"),
                                new ParticipantPropertyReference().withSourcePropertyName("sdohz")
                                    .withTargetPropertyName("iucbda"),
                                new ParticipantPropertyReference().withSourcePropertyName("mbwiinjdllwktl")
                                    .withTargetPropertyName("pow")))
                        .withParticipantName("vvqxua")
                        .withDisplayName(mapOf("si", "qwulynkgfcfdru", "byokvjgbzsxe", "xxtclhuulri", "yhcdjwsuoardnag",
                            "rsltt", "bfwxiplkys", "tpufpbpgnrholhu"))
                        .withDescription(mapOf("dmcvhtbbz", "yjprxslw", "ihotjecohmxv", "hfvhuwzbxpcqz", "xwieexuyade",
                            "lrrskap", "ccgrvkcxzznn", "ltfokyksyim"))
                        .withRole("fers")))
                .withPrimaryParticipantProfilePropertyName("egprkjguwrj")
                .withIsActivity(false)
                .withApiEntitySetName("lmuifmua")
                .withEntityType(EntityTypes.PROFILE)
                .withFields(
                    Arrays
                        .asList(
                            new PropertyDefinition().withArrayValueSeparator("cskiioshjgc")
                                .withEnumValidValues(Arrays.asList(new ProfileEnumValidValuesFormat(),
                                    new ProfileEnumValidValuesFormat(), new ProfileEnumValidValuesFormat(),
                                    new ProfileEnumValidValuesFormat()))
                                .withFieldName("ybnxgztlcgc")
                                .withFieldType("j")
                                .withIsArray(false)
                                .withIsEnum(true)
                                .withIsFlagEnum(true)
                                .withIsImage(false)
                                .withIsLocalizedString(true)
                                .withIsName(false)
                                .withIsRequired(true)
                                .withPropertyId("lbefvwc")
                                .withSchemaItemPropLink("kxpylrwox")
                                .withMaxLength(1992726384)
                                .withIsAvailableInGraph(true)))
                .withInstancesCount(1954065979)
                .withSchemaItemTypeLink("vrbkerdkdkgaw")
                .withTimestampFieldName("gzqpjoi")
                .withTypeName("mnaybdjnxumentq")
                .withAttributes(mapOf("h", Arrays.asList("hymxymulwivqtow")))
                .withDescription(mapOf("squbfajcywh", "coybaj", "up", "qwmchqohtfxc", "vwtiwsmosa", "kiymjzpwd",
                    "ltassaekewna", "nhqnampp"))
                .withDisplayName(mapOf("aj", "jb"))
                .withLocalizedAttributes(mapOf("vaz",
                    mapOf("vxodkrvfs", "zydd", "olj", "xbydesqlvgecpw", "dobygoogxqapj", "zxnmx"), "jigawgaz",
                    mapOf("fasgm", "fucsaodjnosdkvi", "ktz", "trnzpducdaaktu", "wkppnwyytfvp", "oimyfpqd",
                        "nwhvuldbkkejj", "tfjikffffgkuh"),
                    "xkukm", mapOf("aahzbhuroolkol", "jqifhujjsbcml", "gfjzcvaax", "rhhmojusu", "ahfxwccok", "ia")))
                .withSmallImage("zynuh")
                .withMediumImage("qeq")
                .withLargeImage("avljq")
                .create();

        Assertions.assertEquals("fuyf", response.idPropertyNames().get(0));
        Assertions.assertEquals("dtffisjmrkkhm", response.participantProfiles().get(0).profileTypeName());
        Assertions.assertEquals("mdlgy",
            response.participantProfiles().get(0).participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("ixokwtjawhv",
            response.participantProfiles().get(0).participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals("wgwima", response.participantProfiles().get(0).participantName());
        Assertions.assertEquals("akhtmhobcyanrfvq", response.participantProfiles().get(0).displayName().get("vkhgv"));
        Assertions.assertEquals("xqnwhscoz", response.participantProfiles().get(0).description().get("wmvgxsmpknpwir"));
        Assertions.assertEquals("jfewxqouox", response.participantProfiles().get(0).role());
        Assertions.assertEquals("labvoyngsuxxc", response.primaryParticipantProfilePropertyName());
        Assertions.assertEquals(true, response.isActivity());
        Assertions.assertEquals("qwm", response.apiEntitySetName());
        Assertions.assertEquals(EntityTypes.RELATIONSHIP, response.entityType());
        Assertions.assertEquals("sazuxejgwecywnfy", response.fields().get(0).arrayValueSeparator());
        Assertions.assertEquals("aczsinq", response.fields().get(0).fieldName());
        Assertions.assertEquals("dnddbbozsyv", response.fields().get(0).fieldType());
        Assertions.assertEquals(true, response.fields().get(0).isArray());
        Assertions.assertEquals(false, response.fields().get(0).isEnum());
        Assertions.assertEquals(false, response.fields().get(0).isFlagEnum());
        Assertions.assertEquals(true, response.fields().get(0).isImage());
        Assertions.assertEquals(true, response.fields().get(0).isLocalizedString());
        Assertions.assertEquals(false, response.fields().get(0).isName());
        Assertions.assertEquals(false, response.fields().get(0).isRequired());
        Assertions.assertEquals("eeih", response.fields().get(0).propertyId());
        Assertions.assertEquals("mnoejhqlfmsib", response.fields().get(0).schemaItemPropLink());
        Assertions.assertEquals(2053453145, response.fields().get(0).maxLength());
        Assertions.assertEquals(true, response.fields().get(0).isAvailableInGraph());
        Assertions.assertEquals(917565572, response.instancesCount());
        Assertions.assertEquals("bbwjtrdxrizagb", response.schemaItemTypeLink());
        Assertions.assertEquals("pgdqxwabzrw", response.timestampFieldName());
        Assertions.assertEquals("rxhaclcdosqkp", response.typeName());
        Assertions.assertEquals("kifmmainw", response.attributes().get("lw").get(0));
        Assertions.assertEquals("djufbnkl", response.description().get("laxp"));
        Assertions.assertEquals("yrqsdbpokszanm", response.displayName().get("wgpterdiuw"));
        Assertions.assertEquals("xxheigmlilwzghjh", response.localizedAttributes().get("xi").get("vmabzzbwaybfm"));
        Assertions.assertEquals("lnfyzav", response.smallImage());
        Assertions.assertEquals("bypicdbkpdj", response.mediumImage());
        Assertions.assertEquals("qh", response.largeImage());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
