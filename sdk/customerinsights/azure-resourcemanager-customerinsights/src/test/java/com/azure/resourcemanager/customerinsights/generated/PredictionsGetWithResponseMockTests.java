// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.PredictionResourceFormat;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PredictionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":{\"anhz\":\"juriarsbcl\",\"zkz\":\"knjxizbaxdy\",\"jmlxppdnd\":\"xfexwacy\",\"u\":\"kfevui\"},\"displayName\":{\"vnopmotdsfhox\":\"fkcjytqdcizeqqfo\"},\"involvedInteractionTypes\":[\"oazyf\",\"kmvldzmxojzsvmai\",\"bqk\"],\"involvedKpiTypes\":[\"ejthgeecbpergwlc\",\"ihba\",\"yqsokknpugzjwdiz\"],\"involvedRelationships\":[\"ixiujz\",\"c\",\"exgkrsw\"],\"negativeOutcomeExpression\":\"sykkbxktxbbwl\",\"positiveOutcomeExpression\":\"nwzoknvu\",\"primaryProfileType\":\"ddlggb\",\"provisioningState\":\"HumanIntervention\",\"predictionName\":\"gzubakdl\",\"scopeExpression\":\"vggcmfn\",\"tenantId\":\"f\",\"autoAnalyze\":false,\"mappings\":{\"score\":\"pkmixwewzl\",\"grade\":\"cgsmepnqvxgvoh\",\"reason\":\"bthhxmoevvude\"},\"scoreLabel\":\"pfhga\",\"grades\":[{\"gradeName\":\"xqhpjhuboh\",\"minScoreThreshold\":1756114402,\"maxScoreThreshold\":2127672156},{\"gradeName\":\"bvrhh\",\"minScoreThreshold\":1628469844,\"maxScoreThreshold\":1030950439},{\"gradeName\":\"nwfmzvzt\",\"minScoreThreshold\":1601117480,\"maxScoreThreshold\":1403106618}],\"systemGeneratedEntities\":{\"generatedInteractionTypes\":[\"xf\",\"ssanybzzg\",\"vdfeu\",\"yj\"],\"generatedLinks\":[\"dhlywkho\",\"kjunzxezriwgoew\",\"pcqk\"],\"generatedKpis\":{\"j\":\"ap\",\"benwsdfp\":\"cit\"}}},\"id\":\"daah\",\"name\":\"frcqkl\",\"type\":\"mvzpire\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PredictionResourceFormat response = manager.predictions()
            .getWithResponse("rqjywiwhvycfjn", "indil", "q", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("juriarsbcl", response.description().get("anhz"));
        Assertions.assertEquals("fkcjytqdcizeqqfo", response.displayName().get("vnopmotdsfhox"));
        Assertions.assertEquals("oazyf", response.involvedInteractionTypes().get(0));
        Assertions.assertEquals("ejthgeecbpergwlc", response.involvedKpiTypes().get(0));
        Assertions.assertEquals("ixiujz", response.involvedRelationships().get(0));
        Assertions.assertEquals("sykkbxktxbbwl", response.negativeOutcomeExpression());
        Assertions.assertEquals("nwzoknvu", response.positiveOutcomeExpression());
        Assertions.assertEquals("ddlggb", response.primaryProfileType());
        Assertions.assertEquals("gzubakdl", response.predictionName());
        Assertions.assertEquals("vggcmfn", response.scopeExpression());
        Assertions.assertEquals(false, response.autoAnalyze());
        Assertions.assertEquals("pkmixwewzl", response.mappings().score());
        Assertions.assertEquals("cgsmepnqvxgvoh", response.mappings().grade());
        Assertions.assertEquals("bthhxmoevvude", response.mappings().reason());
        Assertions.assertEquals("pfhga", response.scoreLabel());
        Assertions.assertEquals("xqhpjhuboh", response.grades().get(0).gradeName());
        Assertions.assertEquals(1756114402, response.grades().get(0).minScoreThreshold());
        Assertions.assertEquals(2127672156, response.grades().get(0).maxScoreThreshold());
    }
}
