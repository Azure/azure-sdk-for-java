// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiAlias;
import com.azure.resourcemanager.customerinsights.models.KpiExtract;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiResourceFormat;
import com.azure.resourcemanager.customerinsights.models.KpiThresholds;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class KpisCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"entityType\":\"Interaction\",\"entityTypeName\":\"ir\",\"tenantId\":\"mmtzjgc\",\"kpiName\":\"fxtbwjjirmuydg\",\"displayName\":{\"xodwxm\":\"mdofgeoagfuoft\",\"iygmgs\":\"aj\",\"tgfczljdncidtjva\":\"vmdmzenlr\"},\"description\":{\"to\":\"znmrgcdogcvucg\"},\"calculationWindow\":\"Week\",\"calculationWindowFieldName\":\"httnzqs\",\"function\":\"CountDistinct\",\"expression\":\"mebgszplu\",\"unit\":\"ekpdzzmssg\",\"filter\":\"vokyejidbdqzsqun\",\"groupBy\":[\"ztlvv\",\"snmr\",\"kyjtrepw\",\"wfkcauxuvavcpf\"],\"groupByMetadata\":[{\"displayName\":{\"txluevs\":\"ckcl\",\"qebuuxjxhfxfjwp\":\"lzwilfngojf\",\"gzzxljbkhxsd\":\"kktpmbmxbmbr\",\"xydgtokvqbvwg\":\"laumydmhweqjf\"},\"fieldName\":\"w\",\"fieldType\":\"vxakglh\"},{\"displayName\":{\"qiy\":\"srfga\",\"yqyxyjrcbqpbis\":\"vxcgdhyhgoqgs\",\"yjz\":\"glqjoxtdahneaoov\",\"fsr\":\"ivfwjlofze\"},\"fieldName\":\"uklajvcfoc\",\"fieldType\":\"apejovtkwx\"}],\"participantProfilesMetadata\":[{\"typeName\":\"hhnoyrzaaoee\"},{\"typeName\":\"pmjen\"},{\"typeName\":\"jeatea\"}],\"provisioningState\":\"Succeeded\",\"thresHolds\":{\"increasingKpi\":true},\"aliases\":[{\"aliasName\":\"djxldnaryyinzk\",\"expression\":\"olrndwdb\"},{\"aliasName\":\"xvzaledoy\",\"expression\":\"xlu\"}],\"extracts\":[{\"extractName\":\"th\",\"expression\":\"cxqqxmyzklaoanp\"},{\"extractName\":\"hrvmzrqrazadi\",\"expression\":\"znllaslk\"},{\"extractName\":\"khjqjpvbaihxjtg\",\"expression\":\"gtaiywbq\"}]},\"id\":\"roigbsfsgsaenwld\",\"name\":\"mhljqlxspm\",\"type\":\"jc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        KpiResourceFormat response = manager.kpis()
            .define("ulpyuflq")
            .withExistingHub("ccgndjgdprig", "qqyeqfcb")
            .withEntityType(EntityTypes.INTERACTION)
            .withEntityTypeName("htujcyohigimwdc")
            .withDisplayName(mapOf("etv", "wimbzayspzvr", "dvatlzmgschn", "phmdzxplgtp", "sx", "rsbkkzovlzdmnfmf"))
            .withDescription(mapOf("movzwde", "fuwori", "rtgelg", "kkmvhzfovanyrva", "qoq", "ewikfyaqandmym",
                "fbpbvzopaxmfmvsm", "umov"))
            .withCalculationWindow(CalculationWindowTypes.WEEK)
            .withCalculationWindowFieldName("xfaxdtnq")
            .withFunction(KpiFunctions.MAX)
            .withExpression("bsat")
            .withUnit("iauesugmocpcjy")
            .withFilter("oelrgttwfl")
            .withGroupBy(Arrays.asList("uorinikcedpk", "riwmmtmqrxrzqv", "yczyayubtgm"))
            .withThresHolds(new KpiThresholds().withIncreasingKpi(false))
            .withAliases(Arrays.asList(new KpiAlias().withAliasName("f").withExpression("ihuioaeo"),
                new KpiAlias().withAliasName("pajtfeyvkbd").withExpression("dd"),
                new KpiAlias().withAliasName("rhd").withExpression("cxbeuuqutkzwtjww"),
                new KpiAlias().withAliasName("uzy").withExpression("ijcxfno")))
            .withExtracts(Arrays.asList(new KpiExtract().withExtractName("gjdydhqkk").withExpression("bjuckc"),
                new KpiExtract().withExtractName("tuqbhp").withExpression("wcnxtpzdlyseid"),
                new KpiExtract().withExtractName("oa").withExpression("atprytgrhzbq")))
            .create();

        Assertions.assertEquals(EntityTypes.INTERACTION, response.entityType());
        Assertions.assertEquals("ir", response.entityTypeName());
        Assertions.assertEquals("mdofgeoagfuoft", response.displayName().get("xodwxm"));
        Assertions.assertEquals("znmrgcdogcvucg", response.description().get("to"));
        Assertions.assertEquals(CalculationWindowTypes.WEEK, response.calculationWindow());
        Assertions.assertEquals("httnzqs", response.calculationWindowFieldName());
        Assertions.assertEquals(KpiFunctions.COUNT_DISTINCT, response.function());
        Assertions.assertEquals("mebgszplu", response.expression());
        Assertions.assertEquals("ekpdzzmssg", response.unit());
        Assertions.assertEquals("vokyejidbdqzsqun", response.filter());
        Assertions.assertEquals("ztlvv", response.groupBy().get(0));
        Assertions.assertEquals(true, response.thresHolds().increasingKpi());
        Assertions.assertEquals("djxldnaryyinzk", response.aliases().get(0).aliasName());
        Assertions.assertEquals("olrndwdb", response.aliases().get(0).expression());
        Assertions.assertEquals("th", response.extracts().get(0).extractName());
        Assertions.assertEquals("cxqqxmyzklaoanp", response.extracts().get(0).expression());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
