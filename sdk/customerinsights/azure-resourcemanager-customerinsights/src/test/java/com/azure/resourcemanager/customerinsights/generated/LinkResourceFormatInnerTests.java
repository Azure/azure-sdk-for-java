// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.LinkResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.EntityType;
import com.azure.resourcemanager.customerinsights.models.InstanceOperationType;
import com.azure.resourcemanager.customerinsights.models.LinkTypes;
import com.azure.resourcemanager.customerinsights.models.ParticipantPropertyReference;
import com.azure.resourcemanager.customerinsights.models.TypePropertiesMapping;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class LinkResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        LinkResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"tenantId\":\"cigeleohdbvqvw\",\"linkName\":\"jopwbeonrlkwz\",\"sourceEntityType\":\"Interaction\",\"targetEntityType\":\"None\",\"sourceEntityTypeName\":\"bxcea\",\"targetEntityTypeName\":\"xcptsoqfyiaseqc\",\"displayName\":{\"emv\":\"ttzrazisgyki\",\"klinhmdptysprq\":\"nbwzohmnrxxbso\",\"pli\":\"gnzxojpslsvj\",\"qvapcohhoucq\":\"fiqwoy\"},\"description\":{\"rzdcgdzbenribcaw\":\"jxcx\"},\"mappings\":[{\"sourcePropertyName\":\"qd\",\"targetPropertyName\":\"tjwfljhznamtua\",\"linkType\":\"CopyIfNull\"},{\"sourcePropertyName\":\"wcjjncqt\",\"targetPropertyName\":\"z\",\"linkType\":\"UpdateAlways\"},{\"sourcePropertyName\":\"vgbgatzuuvbxng\",\"targetPropertyName\":\"ebwgga\",\"linkType\":\"UpdateAlways\"},{\"sourcePropertyName\":\"zlswvajqf\",\"targetPropertyName\":\"t\",\"linkType\":\"UpdateAlways\"}],\"participantPropertyReferences\":[{\"sourcePropertyName\":\"qzasunwqrjzfrgqh\",\"targetPropertyName\":\"ohcmbu\"}],\"provisioningState\":\"HumanIntervention\",\"referenceOnly\":false,\"operationType\":\"Delete\"},\"id\":\"mbpyryxamebly\",\"name\":\"yvk\",\"type\":\"kmrocxne\"}")
            .toObject(LinkResourceFormatInner.class);
        Assertions.assertEquals(EntityType.INTERACTION, model.sourceEntityType());
        Assertions.assertEquals(EntityType.NONE, model.targetEntityType());
        Assertions.assertEquals("bxcea", model.sourceEntityTypeName());
        Assertions.assertEquals("xcptsoqfyiaseqc", model.targetEntityTypeName());
        Assertions.assertEquals("ttzrazisgyki", model.displayName().get("emv"));
        Assertions.assertEquals("jxcx", model.description().get("rzdcgdzbenribcaw"));
        Assertions.assertEquals("qd", model.mappings().get(0).sourcePropertyName());
        Assertions.assertEquals("tjwfljhznamtua", model.mappings().get(0).targetPropertyName());
        Assertions.assertEquals(LinkTypes.COPY_IF_NULL, model.mappings().get(0).linkType());
        Assertions.assertEquals("qzasunwqrjzfrgqh", model.participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("ohcmbu", model.participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals(false, model.referenceOnly());
        Assertions.assertEquals(InstanceOperationType.DELETE, model.operationType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        LinkResourceFormatInner model = new LinkResourceFormatInner().withSourceEntityType(EntityType.INTERACTION)
            .withTargetEntityType(EntityType.NONE)
            .withSourceEntityTypeName("bxcea")
            .withTargetEntityTypeName("xcptsoqfyiaseqc")
            .withDisplayName(mapOf("emv", "ttzrazisgyki", "klinhmdptysprq", "nbwzohmnrxxbso", "pli", "gnzxojpslsvj",
                "qvapcohhoucq", "fiqwoy"))
            .withDescription(mapOf("rzdcgdzbenribcaw", "jxcx"))
            .withMappings(Arrays.asList(
                new TypePropertiesMapping().withSourcePropertyName("qd")
                    .withTargetPropertyName("tjwfljhznamtua")
                    .withLinkType(LinkTypes.COPY_IF_NULL),
                new TypePropertiesMapping().withSourcePropertyName("wcjjncqt")
                    .withTargetPropertyName("z")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS),
                new TypePropertiesMapping().withSourcePropertyName("vgbgatzuuvbxng")
                    .withTargetPropertyName("ebwgga")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS),
                new TypePropertiesMapping().withSourcePropertyName("zlswvajqf")
                    .withTargetPropertyName("t")
                    .withLinkType(LinkTypes.UPDATE_ALWAYS)))
            .withParticipantPropertyReferences(
                Arrays.asList(new ParticipantPropertyReference().withSourcePropertyName("qzasunwqrjzfrgqh")
                    .withTargetPropertyName("ohcmbu")))
            .withReferenceOnly(false)
            .withOperationType(InstanceOperationType.DELETE);
        model = BinaryData.fromObject(model).toObject(LinkResourceFormatInner.class);
        Assertions.assertEquals(EntityType.INTERACTION, model.sourceEntityType());
        Assertions.assertEquals(EntityType.NONE, model.targetEntityType());
        Assertions.assertEquals("bxcea", model.sourceEntityTypeName());
        Assertions.assertEquals("xcptsoqfyiaseqc", model.targetEntityTypeName());
        Assertions.assertEquals("ttzrazisgyki", model.displayName().get("emv"));
        Assertions.assertEquals("jxcx", model.description().get("rzdcgdzbenribcaw"));
        Assertions.assertEquals("qd", model.mappings().get(0).sourcePropertyName());
        Assertions.assertEquals("tjwfljhznamtua", model.mappings().get(0).targetPropertyName());
        Assertions.assertEquals(LinkTypes.COPY_IF_NULL, model.mappings().get(0).linkType());
        Assertions.assertEquals("qzasunwqrjzfrgqh", model.participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("ohcmbu", model.participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals(false, model.referenceOnly());
        Assertions.assertEquals(InstanceOperationType.DELETE, model.operationType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
