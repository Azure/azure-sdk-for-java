// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.ViewResourceFormatInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ViewResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ViewResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"viewName\":\"nurnnq\",\"userId\":\"q\",\"tenantId\":\"izxqltgrd\",\"displayName\":{\"vctafsrb\":\"pxrxvbfihwu\",\"wxihs\":\"rblmli\"},\"definition\":\"nxw\",\"changed\":\"2021-06-19T05:03:08Z\",\"created\":\"2021-04-29T00:04:55Z\"},\"id\":\"pzwaklsbsbqqq\",\"name\":\"gwwrxaomzis\",\"type\":\"lrrcz\"}")
            .toObject(ViewResourceFormatInner.class);
        Assertions.assertEquals("q", model.userId());
        Assertions.assertEquals("pxrxvbfihwu", model.displayName().get("vctafsrb"));
        Assertions.assertEquals("nxw", model.definition());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ViewResourceFormatInner model = new ViewResourceFormatInner().withUserId("q")
            .withDisplayName(mapOf("vctafsrb", "pxrxvbfihwu", "wxihs", "rblmli"))
            .withDefinition("nxw");
        model = BinaryData.fromObject(model).toObject(ViewResourceFormatInner.class);
        Assertions.assertEquals("q", model.userId());
        Assertions.assertEquals("pxrxvbfihwu", model.displayName().get("vctafsrb"));
        Assertions.assertEquals("nxw", model.definition());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
