// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.PredictionResourceFormatInner;
import com.azure.resourcemanager.customerinsights.models.PredictionGradesItem;
import com.azure.resourcemanager.customerinsights.models.PredictionMappings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PredictionResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PredictionResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":{\"ouvblgmo\":\"lowuowhlxlnwyr\",\"ih\":\"zkltrfowtdvrfmv\",\"hdxlw\":\"vjdrqcrjidhftuk\"},\"displayName\":{\"kfnjyixhafrat\":\"bfqz\",\"znv\":\"xmbjroum\"},\"involvedInteractionTypes\":[\"jrhuzgf\",\"on\",\"tpusllywp\"],\"involvedKpiTypes\":[\"otz\",\"pdbollg\",\"yfqiuasig\",\"owsocnequygdjbo\"],\"involvedRelationships\":[\"mtqjkqevadrmm\",\"iuawvc\",\"jzkxiidisczskos\"],\"negativeOutcomeExpression\":\"oqiqazugamx\",\"positiveOutcomeExpression\":\"krrcoiisbamnpp\",\"primaryProfileType\":\"cekuz\",\"provisioningState\":\"Succeeded\",\"predictionName\":\"ezax\",\"scopeExpression\":\"f\",\"tenantId\":\"zxuizhyhnepkpe\",\"autoAnalyze\":true,\"mappings\":{\"score\":\"arxqiubx\",\"grade\":\"ukecpx\",\"reason\":\"azvdhctmmkosz\"},\"scoreLabel\":\"dblnsntrp\",\"grades\":[{\"gradeName\":\"iofkbtfmh\",\"minScoreThreshold\":3765578,\"maxScoreThreshold\":86261319}],\"systemGeneratedEntities\":{\"generatedInteractionTypes\":[\"cbhhez\"],\"generatedLinks\":[\"wusqx\"],\"generatedKpis\":{\"atvlmbjwcolbm\":\"pbrruyu\"}}},\"id\":\"lbnwtpcpahp\",\"name\":\"z\",\"type\":\"vxhmtfhocnxzcmj\"}")
            .toObject(PredictionResourceFormatInner.class);
        Assertions.assertEquals("lowuowhlxlnwyr", model.description().get("ouvblgmo"));
        Assertions.assertEquals("bfqz", model.displayName().get("kfnjyixhafrat"));
        Assertions.assertEquals("jrhuzgf", model.involvedInteractionTypes().get(0));
        Assertions.assertEquals("otz", model.involvedKpiTypes().get(0));
        Assertions.assertEquals("mtqjkqevadrmm", model.involvedRelationships().get(0));
        Assertions.assertEquals("oqiqazugamx", model.negativeOutcomeExpression());
        Assertions.assertEquals("krrcoiisbamnpp", model.positiveOutcomeExpression());
        Assertions.assertEquals("cekuz", model.primaryProfileType());
        Assertions.assertEquals("ezax", model.predictionName());
        Assertions.assertEquals("f", model.scopeExpression());
        Assertions.assertEquals(true, model.autoAnalyze());
        Assertions.assertEquals("arxqiubx", model.mappings().score());
        Assertions.assertEquals("ukecpx", model.mappings().grade());
        Assertions.assertEquals("azvdhctmmkosz", model.mappings().reason());
        Assertions.assertEquals("dblnsntrp", model.scoreLabel());
        Assertions.assertEquals("iofkbtfmh", model.grades().get(0).gradeName());
        Assertions.assertEquals(3765578, model.grades().get(0).minScoreThreshold());
        Assertions.assertEquals(86261319, model.grades().get(0).maxScoreThreshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PredictionResourceFormatInner model = new PredictionResourceFormatInner()
            .withDescription(mapOf("ouvblgmo", "lowuowhlxlnwyr", "ih", "zkltrfowtdvrfmv", "hdxlw", "vjdrqcrjidhftuk"))
            .withDisplayName(mapOf("kfnjyixhafrat", "bfqz", "znv", "xmbjroum"))
            .withInvolvedInteractionTypes(Arrays.asList("jrhuzgf", "on", "tpusllywp"))
            .withInvolvedKpiTypes(Arrays.asList("otz", "pdbollg", "yfqiuasig", "owsocnequygdjbo"))
            .withInvolvedRelationships(Arrays.asList("mtqjkqevadrmm", "iuawvc", "jzkxiidisczskos"))
            .withNegativeOutcomeExpression("oqiqazugamx")
            .withPositiveOutcomeExpression("krrcoiisbamnpp")
            .withPrimaryProfileType("cekuz")
            .withPredictionName("ezax")
            .withScopeExpression("f")
            .withAutoAnalyze(true)
            .withMappings(
                new PredictionMappings().withScore("arxqiubx").withGrade("ukecpx").withReason("azvdhctmmkosz"))
            .withScoreLabel("dblnsntrp")
            .withGrades(Arrays.asList(new PredictionGradesItem().withGradeName("iofkbtfmh")
                .withMinScoreThreshold(3765578)
                .withMaxScoreThreshold(86261319)));
        model = BinaryData.fromObject(model).toObject(PredictionResourceFormatInner.class);
        Assertions.assertEquals("lowuowhlxlnwyr", model.description().get("ouvblgmo"));
        Assertions.assertEquals("bfqz", model.displayName().get("kfnjyixhafrat"));
        Assertions.assertEquals("jrhuzgf", model.involvedInteractionTypes().get(0));
        Assertions.assertEquals("otz", model.involvedKpiTypes().get(0));
        Assertions.assertEquals("mtqjkqevadrmm", model.involvedRelationships().get(0));
        Assertions.assertEquals("oqiqazugamx", model.negativeOutcomeExpression());
        Assertions.assertEquals("krrcoiisbamnpp", model.positiveOutcomeExpression());
        Assertions.assertEquals("cekuz", model.primaryProfileType());
        Assertions.assertEquals("ezax", model.predictionName());
        Assertions.assertEquals("f", model.scopeExpression());
        Assertions.assertEquals(true, model.autoAnalyze());
        Assertions.assertEquals("arxqiubx", model.mappings().score());
        Assertions.assertEquals("ukecpx", model.mappings().grade());
        Assertions.assertEquals("azvdhctmmkosz", model.mappings().reason());
        Assertions.assertEquals("dblnsntrp", model.scoreLabel());
        Assertions.assertEquals("iofkbtfmh", model.grades().get(0).gradeName());
        Assertions.assertEquals(3765578, model.grades().get(0).minScoreThreshold());
        Assertions.assertEquals(86261319, model.grades().get(0).maxScoreThreshold());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
