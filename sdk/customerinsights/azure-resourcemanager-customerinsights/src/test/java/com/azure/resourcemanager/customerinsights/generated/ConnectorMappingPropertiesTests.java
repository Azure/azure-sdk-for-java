// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.CompletionOperationTypes;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingAvailability;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingCompleteOperation;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingErrorManagement;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingFormat;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingProperties;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingStructure;
import com.azure.resourcemanager.customerinsights.models.ErrorManagementTypes;
import com.azure.resourcemanager.customerinsights.models.FrequencyTypes;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ConnectorMappingPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ConnectorMappingProperties model = BinaryData.fromString(
            "{\"folderPath\":\"zvuxm\",\"fileFilter\":\"jsvthnwpzteko\",\"hasHeader\":false,\"errorManagement\":{\"errorManagementType\":\"RejectUntilLimit\",\"errorLimit\":1893519890},\"format\":{\"columnDelimiter\":\"ttgplucfotangcf\",\"acceptLanguage\":\"ykzcugswvxwl\",\"quoteCharacter\":\"qwm\",\"quoteEscapeCharacter\":\"xnjmxm\",\"arraySeparator\":\"qudtcvclx\"},\"availability\":{\"frequency\":\"Week\",\"interval\":1944925015},\"structure\":[{\"propertyName\":\"vgfab\",\"columnName\":\"iyji\",\"customFormatSpecifier\":\"zphdugneiknp\",\"isEncrypted\":false}],\"completeOperation\":{\"completionOperationType\":\"MoveFile\",\"destinationFolder\":\"uqh\"}}")
            .toObject(ConnectorMappingProperties.class);
        Assertions.assertEquals("zvuxm", model.folderPath());
        Assertions.assertEquals("jsvthnwpzteko", model.fileFilter());
        Assertions.assertEquals(false, model.hasHeader());
        Assertions.assertEquals(ErrorManagementTypes.REJECT_UNTIL_LIMIT, model.errorManagement().errorManagementType());
        Assertions.assertEquals(1893519890, model.errorManagement().errorLimit());
        Assertions.assertEquals("ttgplucfotangcf", model.format().columnDelimiter());
        Assertions.assertEquals("ykzcugswvxwl", model.format().acceptLanguage());
        Assertions.assertEquals("qwm", model.format().quoteCharacter());
        Assertions.assertEquals("xnjmxm", model.format().quoteEscapeCharacter());
        Assertions.assertEquals("qudtcvclx", model.format().arraySeparator());
        Assertions.assertEquals(FrequencyTypes.WEEK, model.availability().frequency());
        Assertions.assertEquals(1944925015, model.availability().interval());
        Assertions.assertEquals("vgfab", model.structure().get(0).propertyName());
        Assertions.assertEquals("iyji", model.structure().get(0).columnName());
        Assertions.assertEquals("zphdugneiknp", model.structure().get(0).customFormatSpecifier());
        Assertions.assertEquals(false, model.structure().get(0).isEncrypted());
        Assertions.assertEquals(CompletionOperationTypes.MOVE_FILE,
            model.completeOperation().completionOperationType());
        Assertions.assertEquals("uqh", model.completeOperation().destinationFolder());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ConnectorMappingProperties model
            = new ConnectorMappingProperties().withFolderPath("zvuxm")
                .withFileFilter("jsvthnwpzteko")
                .withHasHeader(false)
                .withErrorManagement(new ConnectorMappingErrorManagement()
                    .withErrorManagementType(ErrorManagementTypes.REJECT_UNTIL_LIMIT)
                    .withErrorLimit(1893519890))
                .withFormat(new ConnectorMappingFormat().withColumnDelimiter("ttgplucfotangcf")
                    .withAcceptLanguage("ykzcugswvxwl")
                    .withQuoteCharacter("qwm")
                    .withQuoteEscapeCharacter("xnjmxm")
                    .withArraySeparator("qudtcvclx"))
                .withAvailability(
                    new ConnectorMappingAvailability().withFrequency(FrequencyTypes.WEEK).withInterval(1944925015))
                .withStructure(Arrays.asList(new ConnectorMappingStructure().withPropertyName("vgfab")
                    .withColumnName("iyji")
                    .withCustomFormatSpecifier("zphdugneiknp")
                    .withIsEncrypted(false)))
                .withCompleteOperation(new ConnectorMappingCompleteOperation()
                    .withCompletionOperationType(CompletionOperationTypes.MOVE_FILE)
                    .withDestinationFolder("uqh"));
        model = BinaryData.fromObject(model).toObject(ConnectorMappingProperties.class);
        Assertions.assertEquals("zvuxm", model.folderPath());
        Assertions.assertEquals("jsvthnwpzteko", model.fileFilter());
        Assertions.assertEquals(false, model.hasHeader());
        Assertions.assertEquals(ErrorManagementTypes.REJECT_UNTIL_LIMIT, model.errorManagement().errorManagementType());
        Assertions.assertEquals(1893519890, model.errorManagement().errorLimit());
        Assertions.assertEquals("ttgplucfotangcf", model.format().columnDelimiter());
        Assertions.assertEquals("ykzcugswvxwl", model.format().acceptLanguage());
        Assertions.assertEquals("qwm", model.format().quoteCharacter());
        Assertions.assertEquals("xnjmxm", model.format().quoteEscapeCharacter());
        Assertions.assertEquals("qudtcvclx", model.format().arraySeparator());
        Assertions.assertEquals(FrequencyTypes.WEEK, model.availability().frequency());
        Assertions.assertEquals(1944925015, model.availability().interval());
        Assertions.assertEquals("vgfab", model.structure().get(0).propertyName());
        Assertions.assertEquals("iyji", model.structure().get(0).columnName());
        Assertions.assertEquals("zphdugneiknp", model.structure().get(0).customFormatSpecifier());
        Assertions.assertEquals(false, model.structure().get(0).isEncrypted());
        Assertions.assertEquals(CompletionOperationTypes.MOVE_FILE,
            model.completeOperation().completionOperationType());
        Assertions.assertEquals("uqh", model.completeOperation().destinationFolder());
    }
}
