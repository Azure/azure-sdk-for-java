// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.WidgetTypeResourceFormatInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WidgetTypeResourceFormatInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WidgetTypeResourceFormatInner model = BinaryData.fromString(
            "{\"properties\":{\"widgetTypeName\":\"xvgpiude\",\"definition\":\"gfsxzec\",\"description\":\"xw\",\"displayName\":{\"hxepmrutzna\":\"ykhv\",\"lujdjltymkmv\":\"aobn\",\"pphkixkykxds\":\"uihywart\",\"emmucfxh\":\"j\"},\"imageUrl\":\"kflrmymy\",\"tenantId\":\"cqlh\",\"widgetVersion\":\"s\",\"changed\":\"2021-10-22T15:55:36Z\",\"created\":\"2021-02-16T15:47:14Z\"},\"id\":\"iiovgqcgxu\",\"name\":\"gqkctotiowlxte\",\"type\":\"dptjgwdtgukranb\"}")
            .toObject(WidgetTypeResourceFormatInner.class);
        Assertions.assertEquals("gfsxzec", model.definition());
        Assertions.assertEquals("xw", model.description());
        Assertions.assertEquals("ykhv", model.displayName().get("hxepmrutzna"));
        Assertions.assertEquals("kflrmymy", model.imageUrl());
        Assertions.assertEquals("s", model.widgetVersion());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WidgetTypeResourceFormatInner model = new WidgetTypeResourceFormatInner().withDefinition("gfsxzec")
            .withDescription("xw")
            .withDisplayName(
                mapOf("hxepmrutzna", "ykhv", "lujdjltymkmv", "aobn", "pphkixkykxds", "uihywart", "emmucfxh", "j"))
            .withImageUrl("kflrmymy")
            .withWidgetVersion("s");
        model = BinaryData.fromObject(model).toObject(WidgetTypeResourceFormatInner.class);
        Assertions.assertEquals("gfsxzec", model.definition());
        Assertions.assertEquals("xw", model.description());
        Assertions.assertEquals("ykhv", model.displayName().get("hxepmrutzna"));
        Assertions.assertEquals("kflrmymy", model.imageUrl());
        Assertions.assertEquals("s", model.widgetVersion());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
