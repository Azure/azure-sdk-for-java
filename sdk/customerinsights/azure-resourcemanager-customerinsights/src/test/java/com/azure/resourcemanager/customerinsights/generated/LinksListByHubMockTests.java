// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.EntityType;
import com.azure.resourcemanager.customerinsights.models.InstanceOperationType;
import com.azure.resourcemanager.customerinsights.models.LinkResourceFormat;
import com.azure.resourcemanager.customerinsights.models.LinkTypes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinksListByHubMockTests {
    @Test
    public void testListByHub() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"tenantId\":\"zwhpjlwyxedz\",\"linkName\":\"xrfomcke\",\"sourceEntityType\":\"Interaction\",\"targetEntityType\":\"None\",\"sourceEntityTypeName\":\"yifop\",\"targetEntityTypeName\":\"fjjtpdyzou\",\"displayName\":{\"fhgnuywezygv\":\"pt\",\"pmpv\":\"dgaaqwvkgjpy\",\"nukkfaxzsvb\":\"nogehlufbort\",\"skobqoclflioewy\":\"xyji\"},\"description\":{\"eqfbd\":\"ssmvrkdps\",\"ktlpdibfmthieat\":\"mdsesbrujbjpp\"},\"mappings\":[{\"sourcePropertyName\":\"rnminzqplgtkih\",\"targetPropertyName\":\"nikzs\",\"linkType\":\"UpdateAlways\"}],\"participantPropertyReferences\":[{\"sourcePropertyName\":\"f\",\"targetPropertyName\":\"ilzfbpnto\"},{\"sourcePropertyName\":\"kensckh\",\"targetPropertyName\":\"mcarm\"},{\"sourcePropertyName\":\"yfxxkwykuqdnd\",\"targetPropertyName\":\"lykhkg\"}],\"provisioningState\":\"HumanIntervention\",\"referenceOnly\":true,\"operationType\":\"Upsert\"},\"id\":\"fpeerscdxrnr\",\"name\":\"jrcufmbgacnrgfdt\",\"type\":\"cmspsanmameubkqi\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<LinkResourceFormat> response
            = manager.links().listByHub("gyedzfzqi", "uqhtdereuno", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(EntityType.INTERACTION, response.iterator().next().sourceEntityType());
        Assertions.assertEquals(EntityType.NONE, response.iterator().next().targetEntityType());
        Assertions.assertEquals("yifop", response.iterator().next().sourceEntityTypeName());
        Assertions.assertEquals("fjjtpdyzou", response.iterator().next().targetEntityTypeName());
        Assertions.assertEquals("pt", response.iterator().next().displayName().get("fhgnuywezygv"));
        Assertions.assertEquals("ssmvrkdps", response.iterator().next().description().get("eqfbd"));
        Assertions.assertEquals("rnminzqplgtkih", response.iterator().next().mappings().get(0).sourcePropertyName());
        Assertions.assertEquals("nikzs", response.iterator().next().mappings().get(0).targetPropertyName());
        Assertions.assertEquals(LinkTypes.UPDATE_ALWAYS, response.iterator().next().mappings().get(0).linkType());
        Assertions.assertEquals("f",
            response.iterator().next().participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("ilzfbpnto",
            response.iterator().next().participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals(true, response.iterator().next().referenceOnly());
        Assertions.assertEquals(InstanceOperationType.UPSERT, response.iterator().next().operationType());
    }
}
