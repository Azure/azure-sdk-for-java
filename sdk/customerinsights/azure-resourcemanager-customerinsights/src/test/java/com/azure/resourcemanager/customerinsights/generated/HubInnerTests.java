// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.HubInner;
import com.azure.resourcemanager.customerinsights.models.HubBillingInfoFormat;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class HubInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        HubInner model = BinaryData.fromString(
            "{\"properties\":{\"apiEndpoint\":\"ewnwreitjzyfl\",\"webEndpoint\":\"arhmofcqhsmy\",\"provisioningState\":\"kdtmlxhekuk\",\"tenantFeatures\":1950851050,\"hubBillingInfo\":{\"skuName\":\"kc\",\"minUnits\":1422058480,\"maxUnits\":1935250385}},\"location\":\"cryuan\",\"tags\":{\"pmrqobm\":\"xzdxtayrlhmwh\",\"knryrtihfxtij\":\"u\"},\"id\":\"pzvgnwzsymglzufc\",\"name\":\"zk\",\"type\":\"hdbihan\"}")
            .toObject(HubInner.class);
        Assertions.assertEquals("cryuan", model.location());
        Assertions.assertEquals("xzdxtayrlhmwh", model.tags().get("pmrqobm"));
        Assertions.assertEquals(1950851050, model.tenantFeatures());
        Assertions.assertEquals("kc", model.hubBillingInfo().skuName());
        Assertions.assertEquals(1422058480, model.hubBillingInfo().minUnits());
        Assertions.assertEquals(1935250385, model.hubBillingInfo().maxUnits());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        HubInner model = new HubInner().withLocation("cryuan")
            .withTags(mapOf("pmrqobm", "xzdxtayrlhmwh", "knryrtihfxtij", "u"))
            .withTenantFeatures(1950851050)
            .withHubBillingInfo(
                new HubBillingInfoFormat().withSkuName("kc").withMinUnits(1422058480).withMaxUnits(1935250385));
        model = BinaryData.fromObject(model).toObject(HubInner.class);
        Assertions.assertEquals("cryuan", model.location());
        Assertions.assertEquals("xzdxtayrlhmwh", model.tags().get("pmrqobm"));
        Assertions.assertEquals(1950851050, model.tenantFeatures());
        Assertions.assertEquals("kc", model.hubBillingInfo().skuName());
        Assertions.assertEquals(1422058480, model.hubBillingInfo().minUnits());
        Assertions.assertEquals(1935250385, model.hubBillingInfo().maxUnits());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
