// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.EntityType;
import com.azure.resourcemanager.customerinsights.models.InstanceOperationType;
import com.azure.resourcemanager.customerinsights.models.LinkResourceFormat;
import com.azure.resourcemanager.customerinsights.models.LinkTypes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class LinksGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"tenantId\":\"praswkuhydtn\",\"linkName\":\"zkfwfatgawphn\",\"sourceEntityType\":\"Interaction\",\"targetEntityType\":\"Profile\",\"sourceEntityTypeName\":\"vdwgtqcume\",\"targetEntityTypeName\":\"saaqgoq\",\"displayName\":{\"sbskowkrbhz\":\"uy\",\"htmqowi\":\"rb\",\"ruozkgyfp\":\"asfgqgucyhfaimqv\"},\"description\":{\"lzjxp\":\"hgfmqmskkix\"},\"mappings\":[{\"sourcePropertyName\":\"evasyntvzjyie\",\"targetPropertyName\":\"bqrvvbqv\",\"linkType\":\"UpdateAlways\"},{\"sourcePropertyName\":\"pecqxgiqasifubn\",\"targetPropertyName\":\"nstlpwqpjn\",\"linkType\":\"CopyIfNull\"}],\"participantPropertyReferences\":[{\"sourcePropertyName\":\"tupsvyouweu\",\"targetPropertyName\":\"yxfwkztsmsfb\"},{\"sourcePropertyName\":\"vy\",\"targetPropertyName\":\"lznfhkqytkztado\"},{\"sourcePropertyName\":\"gfzdgjfcycrsvl\",\"targetPropertyName\":\"yyhigqkzjuqw\"},{\"sourcePropertyName\":\"ajquzxpixhyoi\",\"targetPropertyName\":\"nfdbgsoscienezf\"}],\"provisioningState\":\"Succeeded\",\"referenceOnly\":false,\"operationType\":\"Upsert\"},\"id\":\"kbpjnrte\",\"name\":\"w\",\"type\":\"nthropmdudsyiu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        LinkResourceFormat response = manager.links()
            .getWithResponse("qpfzlpejtznxlue", "ujqbbgsimwejl", "bkbpjzobd", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(EntityType.INTERACTION, response.sourceEntityType());
        Assertions.assertEquals(EntityType.PROFILE, response.targetEntityType());
        Assertions.assertEquals("vdwgtqcume", response.sourceEntityTypeName());
        Assertions.assertEquals("saaqgoq", response.targetEntityTypeName());
        Assertions.assertEquals("uy", response.displayName().get("sbskowkrbhz"));
        Assertions.assertEquals("hgfmqmskkix", response.description().get("lzjxp"));
        Assertions.assertEquals("evasyntvzjyie", response.mappings().get(0).sourcePropertyName());
        Assertions.assertEquals("bqrvvbqv", response.mappings().get(0).targetPropertyName());
        Assertions.assertEquals(LinkTypes.UPDATE_ALWAYS, response.mappings().get(0).linkType());
        Assertions.assertEquals("tupsvyouweu", response.participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("yxfwkztsmsfb", response.participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals(false, response.referenceOnly());
        Assertions.assertEquals(InstanceOperationType.UPSERT, response.operationType());
    }
}
