// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.fluent.models.Prediction;
import com.azure.resourcemanager.customerinsights.models.PredictionGradesItem;
import com.azure.resourcemanager.customerinsights.models.PredictionMappings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PredictionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Prediction model = BinaryData.fromString(
            "{\"description\":{\"evhdlmydid\":\"xnoqrxtdisn\",\"xhmw\":\"hepfwwtjfdoes\",\"kxkxhnegk\":\"dbckyo\"},\"displayName\":{\"bpgsnbagnc\":\"rbhtmeplvukaobr\"},\"involvedInteractionTypes\":[\"g\"],\"involvedKpiTypes\":[\"owa\",\"ywalhjymxcg\"],\"involvedRelationships\":[\"gdrclssolj\",\"mevtfycnlbvgjc\"],\"negativeOutcomeExpression\":\"dkkgjiiytssikizb\",\"positiveOutcomeExpression\":\"ufqbvntnr\",\"primaryProfileType\":\"mqso\",\"provisioningState\":\"Succeeded\",\"predictionName\":\"kxgnlykmxcpwzvmd\",\"scopeExpression\":\"ksqd\",\"tenantId\":\"wlwxlboncqbazqic\",\"autoAnalyze\":true,\"mappings\":{\"score\":\"hygtv\",\"grade\":\"byjanep\",\"reason\":\"bdpkxyqvgx\"},\"scoreLabel\":\"aodetv\",\"grades\":[{\"gradeName\":\"dxuwsaifm\",\"minScoreThreshold\":1078247760,\"maxScoreThreshold\":186030288},{\"gradeName\":\"zlehgcvkbcknjolg\",\"minScoreThreshold\":1296879245,\"maxScoreThreshold\":539784931},{\"gradeName\":\"els\",\"minScoreThreshold\":751664376,\"maxScoreThreshold\":47378560},{\"gradeName\":\"vxoqe\",\"minScoreThreshold\":374191638,\"maxScoreThreshold\":1759259083}],\"systemGeneratedEntities\":{\"generatedInteractionTypes\":[\"glzoblqwa\",\"frqulhmzyqbhd\",\"afjrqpjiyrqjcrg\",\"xwmzwdfkbnrz\"],\"generatedLinks\":[\"dltb\",\"ctqjfgxxsae\"],\"generatedKpis\":{\"aqqilzdcduwjoed\":\"dgvpyig\",\"ilfjqqacdmk\":\"ngucaifpaurww\",\"akeciqchx\":\"wxdcvjwcyz\",\"wdfmmpzhzzwvywr\":\"tuicds\"}}}")
            .toObject(Prediction.class);
        Assertions.assertEquals("xnoqrxtdisn", model.description().get("evhdlmydid"));
        Assertions.assertEquals("rbhtmeplvukaobr", model.displayName().get("bpgsnbagnc"));
        Assertions.assertEquals("g", model.involvedInteractionTypes().get(0));
        Assertions.assertEquals("owa", model.involvedKpiTypes().get(0));
        Assertions.assertEquals("gdrclssolj", model.involvedRelationships().get(0));
        Assertions.assertEquals("dkkgjiiytssikizb", model.negativeOutcomeExpression());
        Assertions.assertEquals("ufqbvntnr", model.positiveOutcomeExpression());
        Assertions.assertEquals("mqso", model.primaryProfileType());
        Assertions.assertEquals("kxgnlykmxcpwzvmd", model.predictionName());
        Assertions.assertEquals("ksqd", model.scopeExpression());
        Assertions.assertEquals(true, model.autoAnalyze());
        Assertions.assertEquals("hygtv", model.mappings().score());
        Assertions.assertEquals("byjanep", model.mappings().grade());
        Assertions.assertEquals("bdpkxyqvgx", model.mappings().reason());
        Assertions.assertEquals("aodetv", model.scoreLabel());
        Assertions.assertEquals("dxuwsaifm", model.grades().get(0).gradeName());
        Assertions.assertEquals(1078247760, model.grades().get(0).minScoreThreshold());
        Assertions.assertEquals(186030288, model.grades().get(0).maxScoreThreshold());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Prediction model = new Prediction()
            .withDescription(mapOf("evhdlmydid", "xnoqrxtdisn", "xhmw", "hepfwwtjfdoes", "kxkxhnegk", "dbckyo"))
            .withDisplayName(mapOf("bpgsnbagnc", "rbhtmeplvukaobr"))
            .withInvolvedInteractionTypes(Arrays.asList("g"))
            .withInvolvedKpiTypes(Arrays.asList("owa", "ywalhjymxcg"))
            .withInvolvedRelationships(Arrays.asList("gdrclssolj", "mevtfycnlbvgjc"))
            .withNegativeOutcomeExpression("dkkgjiiytssikizb")
            .withPositiveOutcomeExpression("ufqbvntnr")
            .withPrimaryProfileType("mqso")
            .withPredictionName("kxgnlykmxcpwzvmd")
            .withScopeExpression("ksqd")
            .withAutoAnalyze(true)
            .withMappings(new PredictionMappings().withScore("hygtv").withGrade("byjanep").withReason("bdpkxyqvgx"))
            .withScoreLabel("aodetv")
            .withGrades(Arrays.asList(
                new PredictionGradesItem().withGradeName("dxuwsaifm")
                    .withMinScoreThreshold(1078247760)
                    .withMaxScoreThreshold(186030288),
                new PredictionGradesItem().withGradeName("zlehgcvkbcknjolg")
                    .withMinScoreThreshold(1296879245)
                    .withMaxScoreThreshold(539784931),
                new PredictionGradesItem().withGradeName("els")
                    .withMinScoreThreshold(751664376)
                    .withMaxScoreThreshold(47378560),
                new PredictionGradesItem().withGradeName("vxoqe")
                    .withMinScoreThreshold(374191638)
                    .withMaxScoreThreshold(1759259083)));
        model = BinaryData.fromObject(model).toObject(Prediction.class);
        Assertions.assertEquals("xnoqrxtdisn", model.description().get("evhdlmydid"));
        Assertions.assertEquals("rbhtmeplvukaobr", model.displayName().get("bpgsnbagnc"));
        Assertions.assertEquals("g", model.involvedInteractionTypes().get(0));
        Assertions.assertEquals("owa", model.involvedKpiTypes().get(0));
        Assertions.assertEquals("gdrclssolj", model.involvedRelationships().get(0));
        Assertions.assertEquals("dkkgjiiytssikizb", model.negativeOutcomeExpression());
        Assertions.assertEquals("ufqbvntnr", model.positiveOutcomeExpression());
        Assertions.assertEquals("mqso", model.primaryProfileType());
        Assertions.assertEquals("kxgnlykmxcpwzvmd", model.predictionName());
        Assertions.assertEquals("ksqd", model.scopeExpression());
        Assertions.assertEquals(true, model.autoAnalyze());
        Assertions.assertEquals("hygtv", model.mappings().score());
        Assertions.assertEquals("byjanep", model.mappings().grade());
        Assertions.assertEquals("bdpkxyqvgx", model.mappings().reason());
        Assertions.assertEquals("aodetv", model.scoreLabel());
        Assertions.assertEquals("dxuwsaifm", model.grades().get(0).gradeName());
        Assertions.assertEquals(1078247760, model.grades().get(0).minScoreThreshold());
        Assertions.assertEquals(186030288, model.grades().get(0).maxScoreThreshold());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
