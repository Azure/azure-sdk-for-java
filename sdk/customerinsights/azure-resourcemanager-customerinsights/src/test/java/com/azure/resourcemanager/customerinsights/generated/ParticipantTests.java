// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.customerinsights.models.Participant;
import com.azure.resourcemanager.customerinsights.models.ParticipantPropertyReference;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ParticipantTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Participant model = BinaryData.fromString(
            "{\"profileTypeName\":\"jivfxzsjabib\",\"participantPropertyReferences\":[{\"sourcePropertyName\":\"stawfsdjpvkv\",\"targetPropertyName\":\"bjxbkzbzk\"},{\"sourcePropertyName\":\"vncjabudurgk\",\"targetPropertyName\":\"kmokz\"},{\"sourcePropertyName\":\"jjklff\",\"targetPropertyName\":\"mouwqlgzrfzeey\"},{\"sourcePropertyName\":\"bizikayuhq\",\"targetPropertyName\":\"bjbsybb\"}],\"participantName\":\"wrv\",\"displayName\":{\"paslthaqfxssmwu\":\"gmfpgvmp\",\"zpdrhneu\":\"wbdsr\",\"ircgpikpz\":\"owqkdwytisi\",\"rmbzo\":\"mejzanlfzxia\"},\"description\":{\"rjqc\":\"i\",\"frl\":\"rgz\"},\"role\":\"szrnwo\"}")
            .toObject(Participant.class);
        Assertions.assertEquals("jivfxzsjabib", model.profileTypeName());
        Assertions.assertEquals("stawfsdjpvkv", model.participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("bjxbkzbzk", model.participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals("wrv", model.participantName());
        Assertions.assertEquals("gmfpgvmp", model.displayName().get("paslthaqfxssmwu"));
        Assertions.assertEquals("i", model.description().get("rjqc"));
        Assertions.assertEquals("szrnwo", model.role());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Participant model = new Participant().withProfileTypeName("jivfxzsjabib")
            .withParticipantPropertyReferences(Arrays.asList(
                new ParticipantPropertyReference().withSourcePropertyName("stawfsdjpvkv")
                    .withTargetPropertyName("bjxbkzbzk"),
                new ParticipantPropertyReference().withSourcePropertyName("vncjabudurgk")
                    .withTargetPropertyName("kmokz"),
                new ParticipantPropertyReference().withSourcePropertyName("jjklff")
                    .withTargetPropertyName("mouwqlgzrfzeey"),
                new ParticipantPropertyReference().withSourcePropertyName("bizikayuhq")
                    .withTargetPropertyName("bjbsybb")))
            .withParticipantName("wrv")
            .withDisplayName(mapOf("paslthaqfxssmwu", "gmfpgvmp", "zpdrhneu", "wbdsr", "ircgpikpz", "owqkdwytisi",
                "rmbzo", "mejzanlfzxia"))
            .withDescription(mapOf("rjqc", "i", "frl", "rgz"))
            .withRole("szrnwo");
        model = BinaryData.fromObject(model).toObject(Participant.class);
        Assertions.assertEquals("jivfxzsjabib", model.profileTypeName());
        Assertions.assertEquals("stawfsdjpvkv", model.participantPropertyReferences().get(0).sourcePropertyName());
        Assertions.assertEquals("bjxbkzbzk", model.participantPropertyReferences().get(0).targetPropertyName());
        Assertions.assertEquals("wrv", model.participantName());
        Assertions.assertEquals("gmfpgvmp", model.displayName().get("paslthaqfxssmwu"));
        Assertions.assertEquals("i", model.description().get("rjqc"));
        Assertions.assertEquals("szrnwo", model.role());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
