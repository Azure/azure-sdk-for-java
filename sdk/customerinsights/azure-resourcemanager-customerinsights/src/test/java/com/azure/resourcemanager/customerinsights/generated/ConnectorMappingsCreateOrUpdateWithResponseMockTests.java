// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.customerinsights.CustomerInsightsManager;
import com.azure.resourcemanager.customerinsights.models.CompletionOperationTypes;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingAvailability;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingCompleteOperation;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingErrorManagement;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingFormat;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingProperties;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingResourceFormat;
import com.azure.resourcemanager.customerinsights.models.ConnectorMappingStructure;
import com.azure.resourcemanager.customerinsights.models.ConnectorTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.ErrorManagementTypes;
import com.azure.resourcemanager.customerinsights.models.FrequencyTypes;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ConnectorMappingsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"connectorName\":\"rtdb\",\"connectorType\":\"None\",\"created\":\"2021-03-12T19:56:03Z\",\"lastModified\":\"2021-07-10T04:03:54Z\",\"entityType\":\"Interaction\",\"entityTypeName\":\"vppkeqsi\",\"connectorMappingName\":\"mclngygnhrko\",\"displayName\":\"cdtajdopggorw\",\"description\":\"qtrotpvclp\",\"dataFormatId\":\"yrlmwkptsk\",\"mappingProperties\":{\"folderPath\":\"jgvhxcc\",\"fileFilter\":\"kakmkookbputmgvm\",\"hasHeader\":true,\"errorManagement\":{\"errorManagementType\":\"RejectUntilLimit\",\"errorLimit\":566633417},\"format\":{\"columnDelimiter\":\"ktfowzkroyrdur\",\"acceptLanguage\":\"lzqjimejtgzjxx\",\"quoteCharacter\":\"e\",\"quoteEscapeCharacter\":\"zuqloiwyayyzivr\",\"arraySeparator\":\"tcdqlh\"},\"availability\":{\"frequency\":\"Minute\",\"interval\":1999220256},\"structure\":[{\"propertyName\":\"ktj\",\"columnName\":\"eifibfiplhx\",\"customFormatSpecifier\":\"smyc\",\"isEncrypted\":false}],\"completeOperation\":{\"completionOperationType\":\"MoveFile\",\"destinationFolder\":\"yzmudsqcmhnx\"}},\"nextRunTime\":\"2021-07-16T13:22:45Z\",\"runId\":\"wodmachbkvnr\",\"state\":\"Expiring\",\"tenantId\":\"mvgoqpleh\"},\"id\":\"umkz\",\"name\":\"llcz\",\"type\":\"prwnhkgqggoxsst\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomerInsightsManager manager = CustomerInsightsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ConnectorMappingResourceFormat response = manager.connectorMappings()
            .define("gxq")
            .withExistingConnector("klglmnnkkwa", "qshwyqxridt", "bsaqjm")
            .withConnectorType(ConnectorTypes.OUTBOUND)
            .withEntityType(EntityTypes.PROFILE)
            .withEntityTypeName("zevjykofve")
            .withDisplayName("zkca")
            .withDescription("wz")
            .withMappingProperties(new ConnectorMappingProperties().withFolderPath("qkifmxawostfz")
                .withFileFilter("hrkmjqncfv")
                .withHasHeader(true)
                .withErrorManagement(new ConnectorMappingErrorManagement()
                    .withErrorManagementType(ErrorManagementTypes.REJECT_UNTIL_LIMIT)
                    .withErrorLimit(1315129154))
                .withFormat(new ConnectorMappingFormat().withColumnDelimiter("vwfnqqwypvn")
                    .withAcceptLanguage("wbgodtggrssg")
                    .withQuoteCharacter("fk")
                    .withQuoteEscapeCharacter("njm")
                    .withArraySeparator("mvecvztscbgmusai"))
                .withAvailability(
                    new ConnectorMappingAvailability().withFrequency(FrequencyTypes.WEEK).withInterval(552471643))
                .withStructure(Arrays.asList(new ConnectorMappingStructure().withPropertyName("nkzzohnrddclz")
                    .withColumnName("qozreh")
                    .withCustomFormatSpecifier("zqixb")
                    .withIsEncrypted(true)))
                .withCompleteOperation(new ConnectorMappingCompleteOperation()
                    .withCompletionOperationType(CompletionOperationTypes.DO_NOTHING)
                    .withDestinationFolder("yuexozonyn")))
            .create();

        Assertions.assertEquals(ConnectorTypes.NONE, response.connectorType());
        Assertions.assertEquals(EntityTypes.INTERACTION, response.entityType());
        Assertions.assertEquals("vppkeqsi", response.entityTypeName());
        Assertions.assertEquals("cdtajdopggorw", response.displayName());
        Assertions.assertEquals("qtrotpvclp", response.description());
        Assertions.assertEquals("jgvhxcc", response.mappingProperties().folderPath());
        Assertions.assertEquals("kakmkookbputmgvm", response.mappingProperties().fileFilter());
        Assertions.assertEquals(true, response.mappingProperties().hasHeader());
        Assertions.assertEquals(ErrorManagementTypes.REJECT_UNTIL_LIMIT,
            response.mappingProperties().errorManagement().errorManagementType());
        Assertions.assertEquals(566633417, response.mappingProperties().errorManagement().errorLimit());
        Assertions.assertEquals("ktfowzkroyrdur", response.mappingProperties().format().columnDelimiter());
        Assertions.assertEquals("lzqjimejtgzjxx", response.mappingProperties().format().acceptLanguage());
        Assertions.assertEquals("e", response.mappingProperties().format().quoteCharacter());
        Assertions.assertEquals("zuqloiwyayyzivr", response.mappingProperties().format().quoteEscapeCharacter());
        Assertions.assertEquals("tcdqlh", response.mappingProperties().format().arraySeparator());
        Assertions.assertEquals(FrequencyTypes.MINUTE, response.mappingProperties().availability().frequency());
        Assertions.assertEquals(1999220256, response.mappingProperties().availability().interval());
        Assertions.assertEquals("ktj", response.mappingProperties().structure().get(0).propertyName());
        Assertions.assertEquals("eifibfiplhx", response.mappingProperties().structure().get(0).columnName());
        Assertions.assertEquals("smyc", response.mappingProperties().structure().get(0).customFormatSpecifier());
        Assertions.assertEquals(false, response.mappingProperties().structure().get(0).isEncrypted());
        Assertions.assertEquals(CompletionOperationTypes.MOVE_FILE,
            response.mappingProperties().completeOperation().completionOperationType());
        Assertions.assertEquals("yzmudsqcmhnx", response.mappingProperties().completeOperation().destinationFolder());
    }
}
