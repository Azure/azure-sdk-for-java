// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The fields mapping for Relationships.
 */
@Fluent
public final class RelationshipLinkFieldMapping implements JsonSerializable<RelationshipLinkFieldMapping> {
    /*
     * The field name on the Interaction Type.
     */
    private String interactionFieldName;

    /*
     * Link type.
     */
    private LinkTypes linkType;

    /*
     * The field name on the Relationship metadata.
     */
    private String relationshipFieldName;

    /**
     * Creates an instance of RelationshipLinkFieldMapping class.
     */
    public RelationshipLinkFieldMapping() {
    }

    /**
     * Get the interactionFieldName property: The field name on the Interaction Type.
     * 
     * @return the interactionFieldName value.
     */
    public String interactionFieldName() {
        return this.interactionFieldName;
    }

    /**
     * Set the interactionFieldName property: The field name on the Interaction Type.
     * 
     * @param interactionFieldName the interactionFieldName value to set.
     * @return the RelationshipLinkFieldMapping object itself.
     */
    public RelationshipLinkFieldMapping withInteractionFieldName(String interactionFieldName) {
        this.interactionFieldName = interactionFieldName;
        return this;
    }

    /**
     * Get the linkType property: Link type.
     * 
     * @return the linkType value.
     */
    public LinkTypes linkType() {
        return this.linkType;
    }

    /**
     * Set the linkType property: Link type.
     * 
     * @param linkType the linkType value to set.
     * @return the RelationshipLinkFieldMapping object itself.
     */
    public RelationshipLinkFieldMapping withLinkType(LinkTypes linkType) {
        this.linkType = linkType;
        return this;
    }

    /**
     * Get the relationshipFieldName property: The field name on the Relationship metadata.
     * 
     * @return the relationshipFieldName value.
     */
    public String relationshipFieldName() {
        return this.relationshipFieldName;
    }

    /**
     * Set the relationshipFieldName property: The field name on the Relationship metadata.
     * 
     * @param relationshipFieldName the relationshipFieldName value to set.
     * @return the RelationshipLinkFieldMapping object itself.
     */
    public RelationshipLinkFieldMapping withRelationshipFieldName(String relationshipFieldName) {
        this.relationshipFieldName = relationshipFieldName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (interactionFieldName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property interactionFieldName in model RelationshipLinkFieldMapping"));
        }
        if (relationshipFieldName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property relationshipFieldName in model RelationshipLinkFieldMapping"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RelationshipLinkFieldMapping.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("interactionFieldName", this.interactionFieldName);
        jsonWriter.writeStringField("relationshipFieldName", this.relationshipFieldName);
        jsonWriter.writeStringField("linkType", this.linkType == null ? null : this.linkType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipLinkFieldMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipLinkFieldMapping if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelationshipLinkFieldMapping.
     */
    public static RelationshipLinkFieldMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipLinkFieldMapping deserializedRelationshipLinkFieldMapping = new RelationshipLinkFieldMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("interactionFieldName".equals(fieldName)) {
                    deserializedRelationshipLinkFieldMapping.interactionFieldName = reader.getString();
                } else if ("relationshipFieldName".equals(fieldName)) {
                    deserializedRelationshipLinkFieldMapping.relationshipFieldName = reader.getString();
                } else if ("linkType".equals(fieldName)) {
                    deserializedRelationshipLinkFieldMapping.linkType = LinkTypes.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipLinkFieldMapping;
        });
    }
}
