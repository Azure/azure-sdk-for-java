// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.PropertyDefinition;
import com.azure.resourcemanager.customerinsights.models.ProvisioningStates;
import com.azure.resourcemanager.customerinsights.models.StrongId;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/** The profile resource format. */
@JsonFlatten
@Fluent
public class ProfileResourceFormatInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ProfileResourceFormatInner.class);

    /*
     * The attributes for the Type.
     */
    @JsonProperty(value = "properties.attributes")
    private Map<String, List<String>> attributes;

    /*
     * Localized descriptions for the property.
     */
    @JsonProperty(value = "properties.description")
    private Map<String, String> description;

    /*
     * Localized display names for the property.
     */
    @JsonProperty(value = "properties.displayName")
    private Map<String, String> displayName;

    /*
     * Any custom localized attributes for the Type.
     */
    @JsonProperty(value = "properties.localizedAttributes")
    private Map<String, Map<String, String>> localizedAttributes;

    /*
     * Small Image associated with the Property or EntityType.
     */
    @JsonProperty(value = "properties.smallImage")
    private String smallImage;

    /*
     * Medium Image associated with the Property or EntityType.
     */
    @JsonProperty(value = "properties.mediumImage")
    private String mediumImage;

    /*
     * Large Image associated with the Property or EntityType.
     */
    @JsonProperty(value = "properties.largeImage")
    private String largeImage;

    /*
     * The api entity set name. This becomes the odata entity set name for the
     * entity Type being referred in this object.
     */
    @JsonProperty(value = "properties.apiEntitySetName")
    private String apiEntitySetName;

    /*
     * Type of entity.
     */
    @JsonProperty(value = "properties.entityType")
    private EntityTypes entityType;

    /*
     * The properties of the Profile.
     */
    @JsonProperty(value = "properties.fields")
    private List<PropertyDefinition> fields;

    /*
     * The instance count.
     */
    @JsonProperty(value = "properties.instancesCount")
    private Integer instancesCount;

    /*
     * The last changed time for the type definition.
     */
    @JsonProperty(value = "properties.lastChangedUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastChangedUtc;

    /*
     * Provisioning state.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStates provisioningState;

    /*
     * The schema org link. This helps ACI identify and suggest semantic
     * models.
     */
    @JsonProperty(value = "properties.schemaItemTypeLink")
    private String schemaItemTypeLink;

    /*
     * The hub name.
     */
    @JsonProperty(value = "properties.tenantId", access = JsonProperty.Access.WRITE_ONLY)
    private String tenantId;

    /*
     * The timestamp property name. Represents the time when the interaction or
     * profile update happened.
     */
    @JsonProperty(value = "properties.timestampFieldName")
    private String timestampFieldName;

    /*
     * The name of the entity.
     */
    @JsonProperty(value = "properties.typeName")
    private String typeName;

    /*
     * The strong IDs.
     */
    @JsonProperty(value = "properties.strongIds")
    private List<StrongId> strongIds;

    /**
     * Get the attributes property: The attributes for the Type.
     *
     * @return the attributes value.
     */
    public Map<String, List<String>> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: The attributes for the Type.
     *
     * @param attributes the attributes value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withAttributes(Map<String, List<String>> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the description property: Localized descriptions for the property.
     *
     * @return the description value.
     */
    public Map<String, String> description() {
        return this.description;
    }

    /**
     * Set the description property: Localized descriptions for the property.
     *
     * @param description the description value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withDescription(Map<String, String> description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: Localized display names for the property.
     *
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display names for the property.
     *
     * @param displayName the displayName value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the localizedAttributes property: Any custom localized attributes for the Type.
     *
     * @return the localizedAttributes value.
     */
    public Map<String, Map<String, String>> localizedAttributes() {
        return this.localizedAttributes;
    }

    /**
     * Set the localizedAttributes property: Any custom localized attributes for the Type.
     *
     * @param localizedAttributes the localizedAttributes value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withLocalizedAttributes(Map<String, Map<String, String>> localizedAttributes) {
        this.localizedAttributes = localizedAttributes;
        return this;
    }

    /**
     * Get the smallImage property: Small Image associated with the Property or EntityType.
     *
     * @return the smallImage value.
     */
    public String smallImage() {
        return this.smallImage;
    }

    /**
     * Set the smallImage property: Small Image associated with the Property or EntityType.
     *
     * @param smallImage the smallImage value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withSmallImage(String smallImage) {
        this.smallImage = smallImage;
        return this;
    }

    /**
     * Get the mediumImage property: Medium Image associated with the Property or EntityType.
     *
     * @return the mediumImage value.
     */
    public String mediumImage() {
        return this.mediumImage;
    }

    /**
     * Set the mediumImage property: Medium Image associated with the Property or EntityType.
     *
     * @param mediumImage the mediumImage value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withMediumImage(String mediumImage) {
        this.mediumImage = mediumImage;
        return this;
    }

    /**
     * Get the largeImage property: Large Image associated with the Property or EntityType.
     *
     * @return the largeImage value.
     */
    public String largeImage() {
        return this.largeImage;
    }

    /**
     * Set the largeImage property: Large Image associated with the Property or EntityType.
     *
     * @param largeImage the largeImage value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withLargeImage(String largeImage) {
        this.largeImage = largeImage;
        return this;
    }

    /**
     * Get the apiEntitySetName property: The api entity set name. This becomes the odata entity set name for the entity
     * Type being referred in this object.
     *
     * @return the apiEntitySetName value.
     */
    public String apiEntitySetName() {
        return this.apiEntitySetName;
    }

    /**
     * Set the apiEntitySetName property: The api entity set name. This becomes the odata entity set name for the entity
     * Type being referred in this object.
     *
     * @param apiEntitySetName the apiEntitySetName value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withApiEntitySetName(String apiEntitySetName) {
        this.apiEntitySetName = apiEntitySetName;
        return this;
    }

    /**
     * Get the entityType property: Type of entity.
     *
     * @return the entityType value.
     */
    public EntityTypes entityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: Type of entity.
     *
     * @param entityType the entityType value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withEntityType(EntityTypes entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the fields property: The properties of the Profile.
     *
     * @return the fields value.
     */
    public List<PropertyDefinition> fields() {
        return this.fields;
    }

    /**
     * Set the fields property: The properties of the Profile.
     *
     * @param fields the fields value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withFields(List<PropertyDefinition> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the instancesCount property: The instance count.
     *
     * @return the instancesCount value.
     */
    public Integer instancesCount() {
        return this.instancesCount;
    }

    /**
     * Set the instancesCount property: The instance count.
     *
     * @param instancesCount the instancesCount value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withInstancesCount(Integer instancesCount) {
        this.instancesCount = instancesCount;
        return this;
    }

    /**
     * Get the lastChangedUtc property: The last changed time for the type definition.
     *
     * @return the lastChangedUtc value.
     */
    public OffsetDateTime lastChangedUtc() {
        return this.lastChangedUtc;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the schemaItemTypeLink property: The schema org link. This helps ACI identify and suggest semantic models.
     *
     * @return the schemaItemTypeLink value.
     */
    public String schemaItemTypeLink() {
        return this.schemaItemTypeLink;
    }

    /**
     * Set the schemaItemTypeLink property: The schema org link. This helps ACI identify and suggest semantic models.
     *
     * @param schemaItemTypeLink the schemaItemTypeLink value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withSchemaItemTypeLink(String schemaItemTypeLink) {
        this.schemaItemTypeLink = schemaItemTypeLink;
        return this;
    }

    /**
     * Get the tenantId property: The hub name.
     *
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the timestampFieldName property: The timestamp property name. Represents the time when the interaction or
     * profile update happened.
     *
     * @return the timestampFieldName value.
     */
    public String timestampFieldName() {
        return this.timestampFieldName;
    }

    /**
     * Set the timestampFieldName property: The timestamp property name. Represents the time when the interaction or
     * profile update happened.
     *
     * @param timestampFieldName the timestampFieldName value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withTimestampFieldName(String timestampFieldName) {
        this.timestampFieldName = timestampFieldName;
        return this;
    }

    /**
     * Get the typeName property: The name of the entity.
     *
     * @return the typeName value.
     */
    public String typeName() {
        return this.typeName;
    }

    /**
     * Set the typeName property: The name of the entity.
     *
     * @param typeName the typeName value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withTypeName(String typeName) {
        this.typeName = typeName;
        return this;
    }

    /**
     * Get the strongIds property: The strong IDs.
     *
     * @return the strongIds value.
     */
    public List<StrongId> strongIds() {
        return this.strongIds;
    }

    /**
     * Set the strongIds property: The strong IDs.
     *
     * @param strongIds the strongIds value to set.
     * @return the ProfileResourceFormatInner object itself.
     */
    public ProfileResourceFormatInner withStrongIds(List<StrongId> strongIds) {
        this.strongIds = strongIds;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fields() != null) {
            fields().forEach(e -> e.validate());
        }
        if (strongIds() != null) {
            strongIds().forEach(e -> e.validate());
        }
    }
}
