// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.customerinsights.models.CardinalityTypes;
import com.azure.resourcemanager.customerinsights.models.PropertyDefinition;
import com.azure.resourcemanager.customerinsights.models.ProvisioningStates;
import com.azure.resourcemanager.customerinsights.models.RelationshipTypeMapping;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Map;

/**
 * The definition of Relationship.
 */
@Fluent
public final class RelationshipDefinition implements JsonSerializable<RelationshipDefinition> {
    /*
     * The Relationship Cardinality.
     */
    private CardinalityTypes cardinality;

    /*
     * Localized display name for the Relationship.
     */
    private Map<String, String> displayName;

    /*
     * Localized descriptions for the Relationship.
     */
    private Map<String, String> description;

    /*
     * The expiry date time in UTC.
     */
    private OffsetDateTime expiryDateTimeUtc;

    /*
     * The properties of the Relationship.
     */
    private List<PropertyDefinition> fields;

    /*
     * Optional property to be used to map fields in profile to their strong ids in related profile.
     */
    private List<RelationshipTypeMapping> lookupMappings;

    /*
     * Profile type.
     */
    private String profileType;

    /*
     * Provisioning state.
     */
    private ProvisioningStates provisioningState;

    /*
     * The Relationship name.
     */
    private String relationshipName;

    /*
     * Related profile being referenced.
     */
    private String relatedProfileType;

    /*
     * The relationship guid id.
     */
    private String relationshipGuidId;

    /*
     * The hub name.
     */
    private String tenantId;

    /**
     * Creates an instance of RelationshipDefinition class.
     */
    public RelationshipDefinition() {
    }

    /**
     * Get the cardinality property: The Relationship Cardinality.
     * 
     * @return the cardinality value.
     */
    public CardinalityTypes cardinality() {
        return this.cardinality;
    }

    /**
     * Set the cardinality property: The Relationship Cardinality.
     * 
     * @param cardinality the cardinality value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withCardinality(CardinalityTypes cardinality) {
        this.cardinality = cardinality;
        return this;
    }

    /**
     * Get the displayName property: Localized display name for the Relationship.
     * 
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display name for the Relationship.
     * 
     * @param displayName the displayName value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Localized descriptions for the Relationship.
     * 
     * @return the description value.
     */
    public Map<String, String> description() {
        return this.description;
    }

    /**
     * Set the description property: Localized descriptions for the Relationship.
     * 
     * @param description the description value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withDescription(Map<String, String> description) {
        this.description = description;
        return this;
    }

    /**
     * Get the expiryDateTimeUtc property: The expiry date time in UTC.
     * 
     * @return the expiryDateTimeUtc value.
     */
    public OffsetDateTime expiryDateTimeUtc() {
        return this.expiryDateTimeUtc;
    }

    /**
     * Set the expiryDateTimeUtc property: The expiry date time in UTC.
     * 
     * @param expiryDateTimeUtc the expiryDateTimeUtc value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withExpiryDateTimeUtc(OffsetDateTime expiryDateTimeUtc) {
        this.expiryDateTimeUtc = expiryDateTimeUtc;
        return this;
    }

    /**
     * Get the fields property: The properties of the Relationship.
     * 
     * @return the fields value.
     */
    public List<PropertyDefinition> fields() {
        return this.fields;
    }

    /**
     * Set the fields property: The properties of the Relationship.
     * 
     * @param fields the fields value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withFields(List<PropertyDefinition> fields) {
        this.fields = fields;
        return this;
    }

    /**
     * Get the lookupMappings property: Optional property to be used to map fields in profile to their strong ids in
     * related profile.
     * 
     * @return the lookupMappings value.
     */
    public List<RelationshipTypeMapping> lookupMappings() {
        return this.lookupMappings;
    }

    /**
     * Set the lookupMappings property: Optional property to be used to map fields in profile to their strong ids in
     * related profile.
     * 
     * @param lookupMappings the lookupMappings value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withLookupMappings(List<RelationshipTypeMapping> lookupMappings) {
        this.lookupMappings = lookupMappings;
        return this;
    }

    /**
     * Get the profileType property: Profile type.
     * 
     * @return the profileType value.
     */
    public String profileType() {
        return this.profileType;
    }

    /**
     * Set the profileType property: Profile type.
     * 
     * @param profileType the profileType value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withProfileType(String profileType) {
        this.profileType = profileType;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the relationshipName property: The Relationship name.
     * 
     * @return the relationshipName value.
     */
    public String relationshipName() {
        return this.relationshipName;
    }

    /**
     * Get the relatedProfileType property: Related profile being referenced.
     * 
     * @return the relatedProfileType value.
     */
    public String relatedProfileType() {
        return this.relatedProfileType;
    }

    /**
     * Set the relatedProfileType property: Related profile being referenced.
     * 
     * @param relatedProfileType the relatedProfileType value to set.
     * @return the RelationshipDefinition object itself.
     */
    public RelationshipDefinition withRelatedProfileType(String relatedProfileType) {
        this.relatedProfileType = relatedProfileType;
        return this;
    }

    /**
     * Get the relationshipGuidId property: The relationship guid id.
     * 
     * @return the relationshipGuidId value.
     */
    public String relationshipGuidId() {
        return this.relationshipGuidId;
    }

    /**
     * Get the tenantId property: The hub name.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (fields() != null) {
            fields().forEach(e -> e.validate());
        }
        if (lookupMappings() != null) {
            lookupMappings().forEach(e -> e.validate());
        }
        if (profileType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property profileType in model RelationshipDefinition"));
        }
        if (relatedProfileType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property relatedProfileType in model RelationshipDefinition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RelationshipDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("profileType", this.profileType);
        jsonWriter.writeStringField("relatedProfileType", this.relatedProfileType);
        jsonWriter.writeStringField("cardinality", this.cardinality == null ? null : this.cardinality.toString());
        jsonWriter.writeMapField("displayName", this.displayName, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("description", this.description, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("expiryDateTimeUtc",
            this.expiryDateTimeUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expiryDateTimeUtc));
        jsonWriter.writeArrayField("fields", this.fields, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("lookupMappings", this.lookupMappings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipDefinition if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelationshipDefinition.
     */
    public static RelationshipDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipDefinition deserializedRelationshipDefinition = new RelationshipDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("profileType".equals(fieldName)) {
                    deserializedRelationshipDefinition.profileType = reader.getString();
                } else if ("relatedProfileType".equals(fieldName)) {
                    deserializedRelationshipDefinition.relatedProfileType = reader.getString();
                } else if ("cardinality".equals(fieldName)) {
                    deserializedRelationshipDefinition.cardinality = CardinalityTypes.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    Map<String, String> displayName = reader.readMap(reader1 -> reader1.getString());
                    deserializedRelationshipDefinition.displayName = displayName;
                } else if ("description".equals(fieldName)) {
                    Map<String, String> description = reader.readMap(reader1 -> reader1.getString());
                    deserializedRelationshipDefinition.description = description;
                } else if ("expiryDateTimeUtc".equals(fieldName)) {
                    deserializedRelationshipDefinition.expiryDateTimeUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("fields".equals(fieldName)) {
                    List<PropertyDefinition> fields = reader.readArray(reader1 -> PropertyDefinition.fromJson(reader1));
                    deserializedRelationshipDefinition.fields = fields;
                } else if ("lookupMappings".equals(fieldName)) {
                    List<RelationshipTypeMapping> lookupMappings
                        = reader.readArray(reader1 -> RelationshipTypeMapping.fromJson(reader1));
                    deserializedRelationshipDefinition.lookupMappings = lookupMappings;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRelationshipDefinition.provisioningState
                        = ProvisioningStates.fromString(reader.getString());
                } else if ("relationshipName".equals(fieldName)) {
                    deserializedRelationshipDefinition.relationshipName = reader.getString();
                } else if ("relationshipGuidId".equals(fieldName)) {
                    deserializedRelationshipDefinition.relationshipGuidId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedRelationshipDefinition.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipDefinition;
        });
    }
}
