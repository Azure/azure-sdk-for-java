// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The image definition.
 */
@Fluent
public final class ImageDefinitionInner implements JsonSerializable<ImageDefinitionInner> {
    /*
     * Whether image exists already.
     */
    private Boolean imageExists;

    /*
     * Content URL for the image blob.
     */
    private String contentUrl;

    /*
     * Relative path of the image.
     */
    private String relativePath;

    /**
     * Creates an instance of ImageDefinitionInner class.
     */
    public ImageDefinitionInner() {
    }

    /**
     * Get the imageExists property: Whether image exists already.
     * 
     * @return the imageExists value.
     */
    public Boolean imageExists() {
        return this.imageExists;
    }

    /**
     * Set the imageExists property: Whether image exists already.
     * 
     * @param imageExists the imageExists value to set.
     * @return the ImageDefinitionInner object itself.
     */
    public ImageDefinitionInner withImageExists(Boolean imageExists) {
        this.imageExists = imageExists;
        return this;
    }

    /**
     * Get the contentUrl property: Content URL for the image blob.
     * 
     * @return the contentUrl value.
     */
    public String contentUrl() {
        return this.contentUrl;
    }

    /**
     * Set the contentUrl property: Content URL for the image blob.
     * 
     * @param contentUrl the contentUrl value to set.
     * @return the ImageDefinitionInner object itself.
     */
    public ImageDefinitionInner withContentUrl(String contentUrl) {
        this.contentUrl = contentUrl;
        return this;
    }

    /**
     * Get the relativePath property: Relative path of the image.
     * 
     * @return the relativePath value.
     */
    public String relativePath() {
        return this.relativePath;
    }

    /**
     * Set the relativePath property: Relative path of the image.
     * 
     * @param relativePath the relativePath value to set.
     * @return the ImageDefinitionInner object itself.
     */
    public ImageDefinitionInner withRelativePath(String relativePath) {
        this.relativePath = relativePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("imageExists", this.imageExists);
        jsonWriter.writeStringField("contentUrl", this.contentUrl);
        jsonWriter.writeStringField("relativePath", this.relativePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ImageDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ImageDefinitionInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ImageDefinitionInner.
     */
    public static ImageDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ImageDefinitionInner deserializedImageDefinitionInner = new ImageDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageExists".equals(fieldName)) {
                    deserializedImageDefinitionInner.imageExists = reader.getNullable(JsonReader::getBoolean);
                } else if ("contentUrl".equals(fieldName)) {
                    deserializedImageDefinitionInner.contentUrl = reader.getString();
                } else if ("relativePath".equals(fieldName)) {
                    deserializedImageDefinitionInner.relativePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedImageDefinitionInner;
        });
    }
}
