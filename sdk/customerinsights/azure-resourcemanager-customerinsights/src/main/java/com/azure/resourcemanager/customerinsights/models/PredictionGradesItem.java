// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The definition of a prediction grade.
 */
@Fluent
public final class PredictionGradesItem implements JsonSerializable<PredictionGradesItem> {
    /*
     * Name of the grade.
     */
    private String gradeName;

    /*
     * Minimum score threshold.
     */
    private Integer minScoreThreshold;

    /*
     * Maximum score threshold.
     */
    private Integer maxScoreThreshold;

    /**
     * Creates an instance of PredictionGradesItem class.
     */
    public PredictionGradesItem() {
    }

    /**
     * Get the gradeName property: Name of the grade.
     * 
     * @return the gradeName value.
     */
    public String gradeName() {
        return this.gradeName;
    }

    /**
     * Set the gradeName property: Name of the grade.
     * 
     * @param gradeName the gradeName value to set.
     * @return the PredictionGradesItem object itself.
     */
    public PredictionGradesItem withGradeName(String gradeName) {
        this.gradeName = gradeName;
        return this;
    }

    /**
     * Get the minScoreThreshold property: Minimum score threshold.
     * 
     * @return the minScoreThreshold value.
     */
    public Integer minScoreThreshold() {
        return this.minScoreThreshold;
    }

    /**
     * Set the minScoreThreshold property: Minimum score threshold.
     * 
     * @param minScoreThreshold the minScoreThreshold value to set.
     * @return the PredictionGradesItem object itself.
     */
    public PredictionGradesItem withMinScoreThreshold(Integer minScoreThreshold) {
        this.minScoreThreshold = minScoreThreshold;
        return this;
    }

    /**
     * Get the maxScoreThreshold property: Maximum score threshold.
     * 
     * @return the maxScoreThreshold value.
     */
    public Integer maxScoreThreshold() {
        return this.maxScoreThreshold;
    }

    /**
     * Set the maxScoreThreshold property: Maximum score threshold.
     * 
     * @param maxScoreThreshold the maxScoreThreshold value to set.
     * @return the PredictionGradesItem object itself.
     */
    public PredictionGradesItem withMaxScoreThreshold(Integer maxScoreThreshold) {
        this.maxScoreThreshold = maxScoreThreshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("gradeName", this.gradeName);
        jsonWriter.writeNumberField("minScoreThreshold", this.minScoreThreshold);
        jsonWriter.writeNumberField("maxScoreThreshold", this.maxScoreThreshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PredictionGradesItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PredictionGradesItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PredictionGradesItem.
     */
    public static PredictionGradesItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PredictionGradesItem deserializedPredictionGradesItem = new PredictionGradesItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("gradeName".equals(fieldName)) {
                    deserializedPredictionGradesItem.gradeName = reader.getString();
                } else if ("minScoreThreshold".equals(fieldName)) {
                    deserializedPredictionGradesItem.minScoreThreshold = reader.getNullable(JsonReader::getInt);
                } else if ("maxScoreThreshold".equals(fieldName)) {
                    deserializedPredictionGradesItem.maxScoreThreshold = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPredictionGradesItem;
        });
    }
}
