// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The definition of suggested relationship for the type.
 */
@Immutable
public final class RelationshipsLookup implements JsonSerializable<RelationshipsLookup> {
    /*
     * The relationship profile.
     */
    private String profileName;

    /*
     * The property references for the profile type.
     */
    private List<ParticipantProfilePropertyReference> profilePropertyReferences;

    /*
     * The related profile.
     */
    private String relatedProfileName;

    /*
     * The property references for the related profile type.
     */
    private List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences;

    /*
     * The name of existing Relationship.
     */
    private String existingRelationshipName;

    /**
     * Creates an instance of RelationshipsLookup class.
     */
    public RelationshipsLookup() {
    }

    /**
     * Get the profileName property: The relationship profile.
     * 
     * @return the profileName value.
     */
    public String profileName() {
        return this.profileName;
    }

    /**
     * Get the profilePropertyReferences property: The property references for the profile type.
     * 
     * @return the profilePropertyReferences value.
     */
    public List<ParticipantProfilePropertyReference> profilePropertyReferences() {
        return this.profilePropertyReferences;
    }

    /**
     * Get the relatedProfileName property: The related profile.
     * 
     * @return the relatedProfileName value.
     */
    public String relatedProfileName() {
        return this.relatedProfileName;
    }

    /**
     * Get the relatedProfilePropertyReferences property: The property references for the related profile type.
     * 
     * @return the relatedProfilePropertyReferences value.
     */
    public List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences() {
        return this.relatedProfilePropertyReferences;
    }

    /**
     * Get the existingRelationshipName property: The name of existing Relationship.
     * 
     * @return the existingRelationshipName value.
     */
    public String existingRelationshipName() {
        return this.existingRelationshipName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (profilePropertyReferences() != null) {
            profilePropertyReferences().forEach(e -> e.validate());
        }
        if (relatedProfilePropertyReferences() != null) {
            relatedProfilePropertyReferences().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipsLookup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipsLookup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RelationshipsLookup.
     */
    public static RelationshipsLookup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipsLookup deserializedRelationshipsLookup = new RelationshipsLookup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("profileName".equals(fieldName)) {
                    deserializedRelationshipsLookup.profileName = reader.getString();
                } else if ("profilePropertyReferences".equals(fieldName)) {
                    List<ParticipantProfilePropertyReference> profilePropertyReferences
                        = reader.readArray(reader1 -> ParticipantProfilePropertyReference.fromJson(reader1));
                    deserializedRelationshipsLookup.profilePropertyReferences = profilePropertyReferences;
                } else if ("relatedProfileName".equals(fieldName)) {
                    deserializedRelationshipsLookup.relatedProfileName = reader.getString();
                } else if ("relatedProfilePropertyReferences".equals(fieldName)) {
                    List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences
                        = reader.readArray(reader1 -> ParticipantProfilePropertyReference.fromJson(reader1));
                    deserializedRelationshipsLookup.relatedProfilePropertyReferences = relatedProfilePropertyReferences;
                } else if ("existingRelationshipName".equals(fieldName)) {
                    deserializedRelationshipsLookup.existingRelationshipName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipsLookup;
        });
    }
}
