// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Property definition.
 */
@Fluent
public final class PropertyDefinition implements JsonSerializable<PropertyDefinition> {
    /*
     * Array value separator for properties with isArray set.
     */
    private String arrayValueSeparator;

    /*
     * Describes valid values for an enum property.
     */
    private List<ProfileEnumValidValuesFormat> enumValidValues;

    /*
     * Name of the property.
     */
    private String fieldName;

    /*
     * Type of the property.
     */
    private String fieldType;

    /*
     * Indicates if the property is actually an array of the fieldType above on the data api.
     */
    private Boolean isArray;

    /*
     * Indicates if the property is an enum.
     */
    private Boolean isEnum;

    /*
     * Indicates if the property is an flag enum.
     */
    private Boolean isFlagEnum;

    /*
     * Whether the property is an Image.
     */
    private Boolean isImage;

    /*
     * Whether the property is a localized string.
     */
    private Boolean isLocalizedString;

    /*
     * Whether the property is a name or a part of name.
     */
    private Boolean isName;

    /*
     * Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not
     * check for required field.
     */
    private Boolean isRequired;

    /*
     * The ID associated with the property.
     */
    private String propertyId;

    /*
     * URL encoded schema.org item prop link for the property.
     */
    private String schemaItemPropLink;

    /*
     * Max length of string. Used only if type is string.
     */
    private Integer maxLength;

    /*
     * Whether property is available in graph or not.
     */
    private Boolean isAvailableInGraph;

    /*
     * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored
     * and also in precedence rules.
     */
    private List<DataSourcePrecedence> dataSourcePrecedenceRules;

    /**
     * Creates an instance of PropertyDefinition class.
     */
    public PropertyDefinition() {
    }

    /**
     * Get the arrayValueSeparator property: Array value separator for properties with isArray set.
     * 
     * @return the arrayValueSeparator value.
     */
    public String arrayValueSeparator() {
        return this.arrayValueSeparator;
    }

    /**
     * Set the arrayValueSeparator property: Array value separator for properties with isArray set.
     * 
     * @param arrayValueSeparator the arrayValueSeparator value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withArrayValueSeparator(String arrayValueSeparator) {
        this.arrayValueSeparator = arrayValueSeparator;
        return this;
    }

    /**
     * Get the enumValidValues property: Describes valid values for an enum property.
     * 
     * @return the enumValidValues value.
     */
    public List<ProfileEnumValidValuesFormat> enumValidValues() {
        return this.enumValidValues;
    }

    /**
     * Set the enumValidValues property: Describes valid values for an enum property.
     * 
     * @param enumValidValues the enumValidValues value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withEnumValidValues(List<ProfileEnumValidValuesFormat> enumValidValues) {
        this.enumValidValues = enumValidValues;
        return this;
    }

    /**
     * Get the fieldName property: Name of the property.
     * 
     * @return the fieldName value.
     */
    public String fieldName() {
        return this.fieldName;
    }

    /**
     * Set the fieldName property: Name of the property.
     * 
     * @param fieldName the fieldName value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withFieldName(String fieldName) {
        this.fieldName = fieldName;
        return this;
    }

    /**
     * Get the fieldType property: Type of the property.
     * 
     * @return the fieldType value.
     */
    public String fieldType() {
        return this.fieldType;
    }

    /**
     * Set the fieldType property: Type of the property.
     * 
     * @param fieldType the fieldType value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withFieldType(String fieldType) {
        this.fieldType = fieldType;
        return this;
    }

    /**
     * Get the isArray property: Indicates if the property is actually an array of the fieldType above on the data api.
     * 
     * @return the isArray value.
     */
    public Boolean isArray() {
        return this.isArray;
    }

    /**
     * Set the isArray property: Indicates if the property is actually an array of the fieldType above on the data api.
     * 
     * @param isArray the isArray value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsArray(Boolean isArray) {
        this.isArray = isArray;
        return this;
    }

    /**
     * Get the isEnum property: Indicates if the property is an enum.
     * 
     * @return the isEnum value.
     */
    public Boolean isEnum() {
        return this.isEnum;
    }

    /**
     * Set the isEnum property: Indicates if the property is an enum.
     * 
     * @param isEnum the isEnum value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsEnum(Boolean isEnum) {
        this.isEnum = isEnum;
        return this;
    }

    /**
     * Get the isFlagEnum property: Indicates if the property is an flag enum.
     * 
     * @return the isFlagEnum value.
     */
    public Boolean isFlagEnum() {
        return this.isFlagEnum;
    }

    /**
     * Set the isFlagEnum property: Indicates if the property is an flag enum.
     * 
     * @param isFlagEnum the isFlagEnum value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsFlagEnum(Boolean isFlagEnum) {
        this.isFlagEnum = isFlagEnum;
        return this;
    }

    /**
     * Get the isImage property: Whether the property is an Image.
     * 
     * @return the isImage value.
     */
    public Boolean isImage() {
        return this.isImage;
    }

    /**
     * Set the isImage property: Whether the property is an Image.
     * 
     * @param isImage the isImage value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsImage(Boolean isImage) {
        this.isImage = isImage;
        return this;
    }

    /**
     * Get the isLocalizedString property: Whether the property is a localized string.
     * 
     * @return the isLocalizedString value.
     */
    public Boolean isLocalizedString() {
        return this.isLocalizedString;
    }

    /**
     * Set the isLocalizedString property: Whether the property is a localized string.
     * 
     * @param isLocalizedString the isLocalizedString value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsLocalizedString(Boolean isLocalizedString) {
        this.isLocalizedString = isLocalizedString;
        return this;
    }

    /**
     * Get the isName property: Whether the property is a name or a part of name.
     * 
     * @return the isName value.
     */
    public Boolean isName() {
        return this.isName;
    }

    /**
     * Set the isName property: Whether the property is a name or a part of name.
     * 
     * @param isName the isName value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsName(Boolean isName) {
        this.isName = isName;
        return this;
    }

    /**
     * Get the isRequired property: Whether property value is required on instances, IsRequired field only for
     * Interaction. Profile Instance will not check for required field.
     * 
     * @return the isRequired value.
     */
    public Boolean isRequired() {
        return this.isRequired;
    }

    /**
     * Set the isRequired property: Whether property value is required on instances, IsRequired field only for
     * Interaction. Profile Instance will not check for required field.
     * 
     * @param isRequired the isRequired value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsRequired(Boolean isRequired) {
        this.isRequired = isRequired;
        return this;
    }

    /**
     * Get the propertyId property: The ID associated with the property.
     * 
     * @return the propertyId value.
     */
    public String propertyId() {
        return this.propertyId;
    }

    /**
     * Set the propertyId property: The ID associated with the property.
     * 
     * @param propertyId the propertyId value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withPropertyId(String propertyId) {
        this.propertyId = propertyId;
        return this;
    }

    /**
     * Get the schemaItemPropLink property: URL encoded schema.org item prop link for the property.
     * 
     * @return the schemaItemPropLink value.
     */
    public String schemaItemPropLink() {
        return this.schemaItemPropLink;
    }

    /**
     * Set the schemaItemPropLink property: URL encoded schema.org item prop link for the property.
     * 
     * @param schemaItemPropLink the schemaItemPropLink value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withSchemaItemPropLink(String schemaItemPropLink) {
        this.schemaItemPropLink = schemaItemPropLink;
        return this;
    }

    /**
     * Get the maxLength property: Max length of string. Used only if type is string.
     * 
     * @return the maxLength value.
     */
    public Integer maxLength() {
        return this.maxLength;
    }

    /**
     * Set the maxLength property: Max length of string. Used only if type is string.
     * 
     * @param maxLength the maxLength value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withMaxLength(Integer maxLength) {
        this.maxLength = maxLength;
        return this;
    }

    /**
     * Get the isAvailableInGraph property: Whether property is available in graph or not.
     * 
     * @return the isAvailableInGraph value.
     */
    public Boolean isAvailableInGraph() {
        return this.isAvailableInGraph;
    }

    /**
     * Set the isAvailableInGraph property: Whether property is available in graph or not.
     * 
     * @param isAvailableInGraph the isAvailableInGraph value to set.
     * @return the PropertyDefinition object itself.
     */
    public PropertyDefinition withIsAvailableInGraph(Boolean isAvailableInGraph) {
        this.isAvailableInGraph = isAvailableInGraph;
        return this;
    }

    /**
     * Get the dataSourcePrecedenceRules property: This is specific to interactions modeled as activities. Data sources
     * are used to determine where data is stored and also in precedence rules.
     * 
     * @return the dataSourcePrecedenceRules value.
     */
    public List<DataSourcePrecedence> dataSourcePrecedenceRules() {
        return this.dataSourcePrecedenceRules;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (enumValidValues() != null) {
            enumValidValues().forEach(e -> e.validate());
        }
        if (fieldName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property fieldName in model PropertyDefinition"));
        }
        if (fieldType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property fieldType in model PropertyDefinition"));
        }
        if (dataSourcePrecedenceRules() != null) {
            dataSourcePrecedenceRules().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PropertyDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fieldName", this.fieldName);
        jsonWriter.writeStringField("fieldType", this.fieldType);
        jsonWriter.writeStringField("arrayValueSeparator", this.arrayValueSeparator);
        jsonWriter.writeArrayField("enumValidValues", this.enumValidValues,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeBooleanField("isArray", this.isArray);
        jsonWriter.writeBooleanField("isEnum", this.isEnum);
        jsonWriter.writeBooleanField("isFlagEnum", this.isFlagEnum);
        jsonWriter.writeBooleanField("isImage", this.isImage);
        jsonWriter.writeBooleanField("isLocalizedString", this.isLocalizedString);
        jsonWriter.writeBooleanField("isName", this.isName);
        jsonWriter.writeBooleanField("isRequired", this.isRequired);
        jsonWriter.writeStringField("propertyId", this.propertyId);
        jsonWriter.writeStringField("schemaItemPropLink", this.schemaItemPropLink);
        jsonWriter.writeNumberField("maxLength", this.maxLength);
        jsonWriter.writeBooleanField("isAvailableInGraph", this.isAvailableInGraph);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PropertyDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PropertyDefinition if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PropertyDefinition.
     */
    public static PropertyDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PropertyDefinition deserializedPropertyDefinition = new PropertyDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String jsonFieldName = reader.getFieldName();
                reader.nextToken();

                if ("fieldName".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.fieldName = reader.getString();
                } else if ("fieldType".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.fieldType = reader.getString();
                } else if ("arrayValueSeparator".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.arrayValueSeparator = reader.getString();
                } else if ("enumValidValues".equals(jsonFieldName)) {
                    List<ProfileEnumValidValuesFormat> enumValidValues
                        = reader.readArray(reader1 -> ProfileEnumValidValuesFormat.fromJson(reader1));
                    deserializedPropertyDefinition.enumValidValues = enumValidValues;
                } else if ("isArray".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isArray = reader.getNullable(JsonReader::getBoolean);
                } else if ("isEnum".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isEnum = reader.getNullable(JsonReader::getBoolean);
                } else if ("isFlagEnum".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isFlagEnum = reader.getNullable(JsonReader::getBoolean);
                } else if ("isImage".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isImage = reader.getNullable(JsonReader::getBoolean);
                } else if ("isLocalizedString".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isLocalizedString = reader.getNullable(JsonReader::getBoolean);
                } else if ("isName".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isName = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRequired".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isRequired = reader.getNullable(JsonReader::getBoolean);
                } else if ("propertyId".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.propertyId = reader.getString();
                } else if ("schemaItemPropLink".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.schemaItemPropLink = reader.getString();
                } else if ("maxLength".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.maxLength = reader.getNullable(JsonReader::getInt);
                } else if ("isAvailableInGraph".equals(jsonFieldName)) {
                    deserializedPropertyDefinition.isAvailableInGraph = reader.getNullable(JsonReader::getBoolean);
                } else if ("dataSourcePrecedenceRules".equals(jsonFieldName)) {
                    List<DataSourcePrecedence> dataSourcePrecedenceRules
                        = reader.readArray(reader1 -> DataSourcePrecedence.fromJson(reader1));
                    deserializedPropertyDefinition.dataSourcePrecedenceRules = dataSourcePrecedenceRules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPropertyDefinition;
        });
    }
}
