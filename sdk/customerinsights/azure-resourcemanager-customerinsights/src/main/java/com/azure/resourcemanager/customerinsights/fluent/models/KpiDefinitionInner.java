// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.customerinsights.models.CalculationWindowTypes;
import com.azure.resourcemanager.customerinsights.models.EntityTypes;
import com.azure.resourcemanager.customerinsights.models.KpiAlias;
import com.azure.resourcemanager.customerinsights.models.KpiExtract;
import com.azure.resourcemanager.customerinsights.models.KpiFunctions;
import com.azure.resourcemanager.customerinsights.models.KpiGroupByMetadata;
import com.azure.resourcemanager.customerinsights.models.KpiParticipantProfilesMetadata;
import com.azure.resourcemanager.customerinsights.models.KpiThresholds;
import com.azure.resourcemanager.customerinsights.models.ProvisioningStates;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Defines the KPI Threshold limits.
 */
@Fluent
public class KpiDefinitionInner implements JsonSerializable<KpiDefinitionInner> {
    /*
     * The mapping entity type.
     */
    private EntityTypes entityType;

    /*
     * The mapping entity name.
     */
    private String entityTypeName;

    /*
     * The hub name.
     */
    private String tenantId;

    /*
     * The KPI name.
     */
    private String kpiName;

    /*
     * Localized display name for the KPI.
     */
    private Map<String, String> displayName;

    /*
     * Localized description for the KPI.
     */
    private Map<String, String> description;

    /*
     * The calculation window.
     */
    private CalculationWindowTypes calculationWindow;

    /*
     * Name of calculation window field.
     */
    private String calculationWindowFieldName;

    /*
     * The computation function for the KPI.
     */
    private KpiFunctions function;

    /*
     * The computation expression for the KPI.
     */
    private String expression;

    /*
     * The unit of measurement for the KPI.
     */
    private String unit;

    /*
     * The filter expression for the KPI.
     */
    private String filter;

    /*
     * the group by properties for the KPI.
     */
    private List<String> groupBy;

    /*
     * The KPI GroupByMetadata.
     */
    private List<KpiGroupByMetadata> groupByMetadata;

    /*
     * The participant profiles.
     */
    private List<KpiParticipantProfilesMetadata> participantProfilesMetadata;

    /*
     * Provisioning state.
     */
    private ProvisioningStates provisioningState;

    /*
     * The KPI thresholds.
     */
    private KpiThresholds thresHolds;

    /*
     * The aliases.
     */
    private List<KpiAlias> aliases;

    /*
     * The KPI extracts.
     */
    private List<KpiExtract> extracts;

    /**
     * Creates an instance of KpiDefinitionInner class.
     */
    public KpiDefinitionInner() {
    }

    /**
     * Get the entityType property: The mapping entity type.
     * 
     * @return the entityType value.
     */
    public EntityTypes entityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: The mapping entity type.
     * 
     * @param entityType the entityType value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withEntityType(EntityTypes entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the entityTypeName property: The mapping entity name.
     * 
     * @return the entityTypeName value.
     */
    public String entityTypeName() {
        return this.entityTypeName;
    }

    /**
     * Set the entityTypeName property: The mapping entity name.
     * 
     * @param entityTypeName the entityTypeName value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withEntityTypeName(String entityTypeName) {
        this.entityTypeName = entityTypeName;
        return this;
    }

    /**
     * Get the tenantId property: The hub name.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: The hub name.
     * 
     * @param tenantId the tenantId value to set.
     * @return the KpiDefinitionInner object itself.
     */
    KpiDefinitionInner withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the kpiName property: The KPI name.
     * 
     * @return the kpiName value.
     */
    public String kpiName() {
        return this.kpiName;
    }

    /**
     * Set the kpiName property: The KPI name.
     * 
     * @param kpiName the kpiName value to set.
     * @return the KpiDefinitionInner object itself.
     */
    KpiDefinitionInner withKpiName(String kpiName) {
        this.kpiName = kpiName;
        return this;
    }

    /**
     * Get the displayName property: Localized display name for the KPI.
     * 
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display name for the KPI.
     * 
     * @param displayName the displayName value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Localized description for the KPI.
     * 
     * @return the description value.
     */
    public Map<String, String> description() {
        return this.description;
    }

    /**
     * Set the description property: Localized description for the KPI.
     * 
     * @param description the description value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withDescription(Map<String, String> description) {
        this.description = description;
        return this;
    }

    /**
     * Get the calculationWindow property: The calculation window.
     * 
     * @return the calculationWindow value.
     */
    public CalculationWindowTypes calculationWindow() {
        return this.calculationWindow;
    }

    /**
     * Set the calculationWindow property: The calculation window.
     * 
     * @param calculationWindow the calculationWindow value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withCalculationWindow(CalculationWindowTypes calculationWindow) {
        this.calculationWindow = calculationWindow;
        return this;
    }

    /**
     * Get the calculationWindowFieldName property: Name of calculation window field.
     * 
     * @return the calculationWindowFieldName value.
     */
    public String calculationWindowFieldName() {
        return this.calculationWindowFieldName;
    }

    /**
     * Set the calculationWindowFieldName property: Name of calculation window field.
     * 
     * @param calculationWindowFieldName the calculationWindowFieldName value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withCalculationWindowFieldName(String calculationWindowFieldName) {
        this.calculationWindowFieldName = calculationWindowFieldName;
        return this;
    }

    /**
     * Get the function property: The computation function for the KPI.
     * 
     * @return the function value.
     */
    public KpiFunctions function() {
        return this.function;
    }

    /**
     * Set the function property: The computation function for the KPI.
     * 
     * @param function the function value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withFunction(KpiFunctions function) {
        this.function = function;
        return this;
    }

    /**
     * Get the expression property: The computation expression for the KPI.
     * 
     * @return the expression value.
     */
    public String expression() {
        return this.expression;
    }

    /**
     * Set the expression property: The computation expression for the KPI.
     * 
     * @param expression the expression value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the unit property: The unit of measurement for the KPI.
     * 
     * @return the unit value.
     */
    public String unit() {
        return this.unit;
    }

    /**
     * Set the unit property: The unit of measurement for the KPI.
     * 
     * @param unit the unit value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withUnit(String unit) {
        this.unit = unit;
        return this;
    }

    /**
     * Get the filter property: The filter expression for the KPI.
     * 
     * @return the filter value.
     */
    public String filter() {
        return this.filter;
    }

    /**
     * Set the filter property: The filter expression for the KPI.
     * 
     * @param filter the filter value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withFilter(String filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the groupBy property: the group by properties for the KPI.
     * 
     * @return the groupBy value.
     */
    public List<String> groupBy() {
        return this.groupBy;
    }

    /**
     * Set the groupBy property: the group by properties for the KPI.
     * 
     * @param groupBy the groupBy value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withGroupBy(List<String> groupBy) {
        this.groupBy = groupBy;
        return this;
    }

    /**
     * Get the groupByMetadata property: The KPI GroupByMetadata.
     * 
     * @return the groupByMetadata value.
     */
    public List<KpiGroupByMetadata> groupByMetadata() {
        return this.groupByMetadata;
    }

    /**
     * Set the groupByMetadata property: The KPI GroupByMetadata.
     * 
     * @param groupByMetadata the groupByMetadata value to set.
     * @return the KpiDefinitionInner object itself.
     */
    KpiDefinitionInner withGroupByMetadata(List<KpiGroupByMetadata> groupByMetadata) {
        this.groupByMetadata = groupByMetadata;
        return this;
    }

    /**
     * Get the participantProfilesMetadata property: The participant profiles.
     * 
     * @return the participantProfilesMetadata value.
     */
    public List<KpiParticipantProfilesMetadata> participantProfilesMetadata() {
        return this.participantProfilesMetadata;
    }

    /**
     * Set the participantProfilesMetadata property: The participant profiles.
     * 
     * @param participantProfilesMetadata the participantProfilesMetadata value to set.
     * @return the KpiDefinitionInner object itself.
     */
    KpiDefinitionInner
        withParticipantProfilesMetadata(List<KpiParticipantProfilesMetadata> participantProfilesMetadata) {
        this.participantProfilesMetadata = participantProfilesMetadata;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the KpiDefinitionInner object itself.
     */
    KpiDefinitionInner withProvisioningState(ProvisioningStates provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Get the thresHolds property: The KPI thresholds.
     * 
     * @return the thresHolds value.
     */
    public KpiThresholds thresHolds() {
        return this.thresHolds;
    }

    /**
     * Set the thresHolds property: The KPI thresholds.
     * 
     * @param thresHolds the thresHolds value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withThresHolds(KpiThresholds thresHolds) {
        this.thresHolds = thresHolds;
        return this;
    }

    /**
     * Get the aliases property: The aliases.
     * 
     * @return the aliases value.
     */
    public List<KpiAlias> aliases() {
        return this.aliases;
    }

    /**
     * Set the aliases property: The aliases.
     * 
     * @param aliases the aliases value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withAliases(List<KpiAlias> aliases) {
        this.aliases = aliases;
        return this;
    }

    /**
     * Get the extracts property: The KPI extracts.
     * 
     * @return the extracts value.
     */
    public List<KpiExtract> extracts() {
        return this.extracts;
    }

    /**
     * Set the extracts property: The KPI extracts.
     * 
     * @param extracts the extracts value to set.
     * @return the KpiDefinitionInner object itself.
     */
    public KpiDefinitionInner withExtracts(List<KpiExtract> extracts) {
        this.extracts = extracts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (entityType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property entityType in model KpiDefinitionInner"));
        }
        if (entityTypeName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property entityTypeName in model KpiDefinitionInner"));
        }
        if (calculationWindow() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property calculationWindow in model KpiDefinitionInner"));
        }
        if (function() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property function in model KpiDefinitionInner"));
        }
        if (expression() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property expression in model KpiDefinitionInner"));
        }
        if (groupByMetadata() != null) {
            groupByMetadata().forEach(e -> e.validate());
        }
        if (participantProfilesMetadata() != null) {
            participantProfilesMetadata().forEach(e -> e.validate());
        }
        if (thresHolds() != null) {
            thresHolds().validate();
        }
        if (aliases() != null) {
            aliases().forEach(e -> e.validate());
        }
        if (extracts() != null) {
            extracts().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KpiDefinitionInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityType", this.entityType == null ? null : this.entityType.toString());
        jsonWriter.writeStringField("entityTypeName", this.entityTypeName);
        jsonWriter.writeStringField("calculationWindow",
            this.calculationWindow == null ? null : this.calculationWindow.toString());
        jsonWriter.writeStringField("function", this.function == null ? null : this.function.toString());
        jsonWriter.writeStringField("expression", this.expression);
        jsonWriter.writeMapField("displayName", this.displayName, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("description", this.description, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("calculationWindowFieldName", this.calculationWindowFieldName);
        jsonWriter.writeStringField("unit", this.unit);
        jsonWriter.writeStringField("filter", this.filter);
        jsonWriter.writeArrayField("groupBy", this.groupBy, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("thresHolds", this.thresHolds);
        jsonWriter.writeArrayField("aliases", this.aliases, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("extracts", this.extracts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KpiDefinitionInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KpiDefinitionInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KpiDefinitionInner.
     */
    public static KpiDefinitionInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KpiDefinitionInner deserializedKpiDefinitionInner = new KpiDefinitionInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityType".equals(fieldName)) {
                    deserializedKpiDefinitionInner.entityType = EntityTypes.fromString(reader.getString());
                } else if ("entityTypeName".equals(fieldName)) {
                    deserializedKpiDefinitionInner.entityTypeName = reader.getString();
                } else if ("calculationWindow".equals(fieldName)) {
                    deserializedKpiDefinitionInner.calculationWindow
                        = CalculationWindowTypes.fromString(reader.getString());
                } else if ("function".equals(fieldName)) {
                    deserializedKpiDefinitionInner.function = KpiFunctions.fromString(reader.getString());
                } else if ("expression".equals(fieldName)) {
                    deserializedKpiDefinitionInner.expression = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedKpiDefinitionInner.tenantId = reader.getString();
                } else if ("kpiName".equals(fieldName)) {
                    deserializedKpiDefinitionInner.kpiName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    Map<String, String> displayName = reader.readMap(reader1 -> reader1.getString());
                    deserializedKpiDefinitionInner.displayName = displayName;
                } else if ("description".equals(fieldName)) {
                    Map<String, String> description = reader.readMap(reader1 -> reader1.getString());
                    deserializedKpiDefinitionInner.description = description;
                } else if ("calculationWindowFieldName".equals(fieldName)) {
                    deserializedKpiDefinitionInner.calculationWindowFieldName = reader.getString();
                } else if ("unit".equals(fieldName)) {
                    deserializedKpiDefinitionInner.unit = reader.getString();
                } else if ("filter".equals(fieldName)) {
                    deserializedKpiDefinitionInner.filter = reader.getString();
                } else if ("groupBy".equals(fieldName)) {
                    List<String> groupBy = reader.readArray(reader1 -> reader1.getString());
                    deserializedKpiDefinitionInner.groupBy = groupBy;
                } else if ("groupByMetadata".equals(fieldName)) {
                    List<KpiGroupByMetadata> groupByMetadata
                        = reader.readArray(reader1 -> KpiGroupByMetadata.fromJson(reader1));
                    deserializedKpiDefinitionInner.groupByMetadata = groupByMetadata;
                } else if ("participantProfilesMetadata".equals(fieldName)) {
                    List<KpiParticipantProfilesMetadata> participantProfilesMetadata
                        = reader.readArray(reader1 -> KpiParticipantProfilesMetadata.fromJson(reader1));
                    deserializedKpiDefinitionInner.participantProfilesMetadata = participantProfilesMetadata;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedKpiDefinitionInner.provisioningState
                        = ProvisioningStates.fromString(reader.getString());
                } else if ("thresHolds".equals(fieldName)) {
                    deserializedKpiDefinitionInner.thresHolds = KpiThresholds.fromJson(reader);
                } else if ("aliases".equals(fieldName)) {
                    List<KpiAlias> aliases = reader.readArray(reader1 -> KpiAlias.fromJson(reader1));
                    deserializedKpiDefinitionInner.aliases = aliases;
                } else if ("extracts".equals(fieldName)) {
                    List<KpiExtract> extracts = reader.readArray(reader1 -> KpiExtract.fromJson(reader1));
                    deserializedKpiDefinitionInner.extracts = extracts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKpiDefinitionInner;
        });
    }
}
