// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The definition of a prediction distribution.
 */
@Fluent
public final class PredictionDistributionDefinitionDistributionsItem
    implements JsonSerializable<PredictionDistributionDefinitionDistributionsItem> {
    /*
     * Score threshold.
     */
    private Integer scoreThreshold;

    /*
     * Number of positives.
     */
    private Long positives;

    /*
     * Number of negatives.
     */
    private Long negatives;

    /*
     * Number of positives above threshold.
     */
    private Long positivesAboveThreshold;

    /*
     * Number of negatives above threshold.
     */
    private Long negativesAboveThreshold;

    /**
     * Creates an instance of PredictionDistributionDefinitionDistributionsItem class.
     */
    public PredictionDistributionDefinitionDistributionsItem() {
    }

    /**
     * Get the scoreThreshold property: Score threshold.
     * 
     * @return the scoreThreshold value.
     */
    public Integer scoreThreshold() {
        return this.scoreThreshold;
    }

    /**
     * Set the scoreThreshold property: Score threshold.
     * 
     * @param scoreThreshold the scoreThreshold value to set.
     * @return the PredictionDistributionDefinitionDistributionsItem object itself.
     */
    public PredictionDistributionDefinitionDistributionsItem withScoreThreshold(Integer scoreThreshold) {
        this.scoreThreshold = scoreThreshold;
        return this;
    }

    /**
     * Get the positives property: Number of positives.
     * 
     * @return the positives value.
     */
    public Long positives() {
        return this.positives;
    }

    /**
     * Set the positives property: Number of positives.
     * 
     * @param positives the positives value to set.
     * @return the PredictionDistributionDefinitionDistributionsItem object itself.
     */
    public PredictionDistributionDefinitionDistributionsItem withPositives(Long positives) {
        this.positives = positives;
        return this;
    }

    /**
     * Get the negatives property: Number of negatives.
     * 
     * @return the negatives value.
     */
    public Long negatives() {
        return this.negatives;
    }

    /**
     * Set the negatives property: Number of negatives.
     * 
     * @param negatives the negatives value to set.
     * @return the PredictionDistributionDefinitionDistributionsItem object itself.
     */
    public PredictionDistributionDefinitionDistributionsItem withNegatives(Long negatives) {
        this.negatives = negatives;
        return this;
    }

    /**
     * Get the positivesAboveThreshold property: Number of positives above threshold.
     * 
     * @return the positivesAboveThreshold value.
     */
    public Long positivesAboveThreshold() {
        return this.positivesAboveThreshold;
    }

    /**
     * Set the positivesAboveThreshold property: Number of positives above threshold.
     * 
     * @param positivesAboveThreshold the positivesAboveThreshold value to set.
     * @return the PredictionDistributionDefinitionDistributionsItem object itself.
     */
    public PredictionDistributionDefinitionDistributionsItem withPositivesAboveThreshold(Long positivesAboveThreshold) {
        this.positivesAboveThreshold = positivesAboveThreshold;
        return this;
    }

    /**
     * Get the negativesAboveThreshold property: Number of negatives above threshold.
     * 
     * @return the negativesAboveThreshold value.
     */
    public Long negativesAboveThreshold() {
        return this.negativesAboveThreshold;
    }

    /**
     * Set the negativesAboveThreshold property: Number of negatives above threshold.
     * 
     * @param negativesAboveThreshold the negativesAboveThreshold value to set.
     * @return the PredictionDistributionDefinitionDistributionsItem object itself.
     */
    public PredictionDistributionDefinitionDistributionsItem withNegativesAboveThreshold(Long negativesAboveThreshold) {
        this.negativesAboveThreshold = negativesAboveThreshold;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("scoreThreshold", this.scoreThreshold);
        jsonWriter.writeNumberField("positives", this.positives);
        jsonWriter.writeNumberField("negatives", this.negatives);
        jsonWriter.writeNumberField("positivesAboveThreshold", this.positivesAboveThreshold);
        jsonWriter.writeNumberField("negativesAboveThreshold", this.negativesAboveThreshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PredictionDistributionDefinitionDistributionsItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PredictionDistributionDefinitionDistributionsItem if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PredictionDistributionDefinitionDistributionsItem.
     */
    public static PredictionDistributionDefinitionDistributionsItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PredictionDistributionDefinitionDistributionsItem deserializedPredictionDistributionDefinitionDistributionsItem
                = new PredictionDistributionDefinitionDistributionsItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scoreThreshold".equals(fieldName)) {
                    deserializedPredictionDistributionDefinitionDistributionsItem.scoreThreshold
                        = reader.getNullable(JsonReader::getInt);
                } else if ("positives".equals(fieldName)) {
                    deserializedPredictionDistributionDefinitionDistributionsItem.positives
                        = reader.getNullable(JsonReader::getLong);
                } else if ("negatives".equals(fieldName)) {
                    deserializedPredictionDistributionDefinitionDistributionsItem.negatives
                        = reader.getNullable(JsonReader::getLong);
                } else if ("positivesAboveThreshold".equals(fieldName)) {
                    deserializedPredictionDistributionDefinitionDistributionsItem.positivesAboveThreshold
                        = reader.getNullable(JsonReader::getLong);
                } else if ("negativesAboveThreshold".equals(fieldName)) {
                    deserializedPredictionDistributionDefinitionDistributionsItem.negativesAboveThreshold
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPredictionDistributionDefinitionDistributionsItem;
        });
    }
}
