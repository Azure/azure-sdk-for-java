// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.customerinsights.models.ParticipantProfilePropertyReference;
import com.azure.resourcemanager.customerinsights.models.ProvisioningStates;
import com.azure.resourcemanager.customerinsights.models.RelationshipLinkFieldMapping;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * The definition of relationship link.
 */
@Fluent
public final class RelationshipLinkDefinition implements JsonSerializable<RelationshipLinkDefinition> {
    /*
     * Localized display name for the Relationship Link.
     */
    private Map<String, String> displayName;

    /*
     * Localized descriptions for the Relationship Link.
     */
    private Map<String, String> description;

    /*
     * The InteractionType associated with the Relationship Link.
     */
    private String interactionType;

    /*
     * The name of the Relationship Link.
     */
    private String linkName;

    /*
     * The mappings between Interaction and Relationship fields.
     */
    private List<RelationshipLinkFieldMapping> mappings;

    /*
     * The property references for the Profile of the Relationship.
     */
    private List<ParticipantProfilePropertyReference> profilePropertyReferences;

    /*
     * Provisioning state.
     */
    private ProvisioningStates provisioningState;

    /*
     * The property references for the Related Profile of the Relationship.
     */
    private List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences;

    /*
     * The Relationship associated with the Link.
     */
    private String relationshipName;

    /*
     * The relationship guid id.
     */
    private String relationshipGuidId;

    /*
     * The hub name.
     */
    private String tenantId;

    /**
     * Creates an instance of RelationshipLinkDefinition class.
     */
    public RelationshipLinkDefinition() {
    }

    /**
     * Get the displayName property: Localized display name for the Relationship Link.
     * 
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display name for the Relationship Link.
     * 
     * @param displayName the displayName value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Localized descriptions for the Relationship Link.
     * 
     * @return the description value.
     */
    public Map<String, String> description() {
        return this.description;
    }

    /**
     * Set the description property: Localized descriptions for the Relationship Link.
     * 
     * @param description the description value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition withDescription(Map<String, String> description) {
        this.description = description;
        return this;
    }

    /**
     * Get the interactionType property: The InteractionType associated with the Relationship Link.
     * 
     * @return the interactionType value.
     */
    public String interactionType() {
        return this.interactionType;
    }

    /**
     * Set the interactionType property: The InteractionType associated with the Relationship Link.
     * 
     * @param interactionType the interactionType value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition withInteractionType(String interactionType) {
        this.interactionType = interactionType;
        return this;
    }

    /**
     * Get the linkName property: The name of the Relationship Link.
     * 
     * @return the linkName value.
     */
    public String linkName() {
        return this.linkName;
    }

    /**
     * Get the mappings property: The mappings between Interaction and Relationship fields.
     * 
     * @return the mappings value.
     */
    public List<RelationshipLinkFieldMapping> mappings() {
        return this.mappings;
    }

    /**
     * Set the mappings property: The mappings between Interaction and Relationship fields.
     * 
     * @param mappings the mappings value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition withMappings(List<RelationshipLinkFieldMapping> mappings) {
        this.mappings = mappings;
        return this;
    }

    /**
     * Get the profilePropertyReferences property: The property references for the Profile of the Relationship.
     * 
     * @return the profilePropertyReferences value.
     */
    public List<ParticipantProfilePropertyReference> profilePropertyReferences() {
        return this.profilePropertyReferences;
    }

    /**
     * Set the profilePropertyReferences property: The property references for the Profile of the Relationship.
     * 
     * @param profilePropertyReferences the profilePropertyReferences value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition
        withProfilePropertyReferences(List<ParticipantProfilePropertyReference> profilePropertyReferences) {
        this.profilePropertyReferences = profilePropertyReferences;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the relatedProfilePropertyReferences property: The property references for the Related Profile of the
     * Relationship.
     * 
     * @return the relatedProfilePropertyReferences value.
     */
    public List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences() {
        return this.relatedProfilePropertyReferences;
    }

    /**
     * Set the relatedProfilePropertyReferences property: The property references for the Related Profile of the
     * Relationship.
     * 
     * @param relatedProfilePropertyReferences the relatedProfilePropertyReferences value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition withRelatedProfilePropertyReferences(
        List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences) {
        this.relatedProfilePropertyReferences = relatedProfilePropertyReferences;
        return this;
    }

    /**
     * Get the relationshipName property: The Relationship associated with the Link.
     * 
     * @return the relationshipName value.
     */
    public String relationshipName() {
        return this.relationshipName;
    }

    /**
     * Set the relationshipName property: The Relationship associated with the Link.
     * 
     * @param relationshipName the relationshipName value to set.
     * @return the RelationshipLinkDefinition object itself.
     */
    public RelationshipLinkDefinition withRelationshipName(String relationshipName) {
        this.relationshipName = relationshipName;
        return this;
    }

    /**
     * Get the relationshipGuidId property: The relationship guid id.
     * 
     * @return the relationshipGuidId value.
     */
    public String relationshipGuidId() {
        return this.relationshipGuidId;
    }

    /**
     * Get the tenantId property: The hub name.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (interactionType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property interactionType in model RelationshipLinkDefinition"));
        }
        if (mappings() != null) {
            mappings().forEach(e -> e.validate());
        }
        if (profilePropertyReferences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property profilePropertyReferences in model RelationshipLinkDefinition"));
        } else {
            profilePropertyReferences().forEach(e -> e.validate());
        }
        if (relatedProfilePropertyReferences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property relatedProfilePropertyReferences in model RelationshipLinkDefinition"));
        } else {
            relatedProfilePropertyReferences().forEach(e -> e.validate());
        }
        if (relationshipName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property relationshipName in model RelationshipLinkDefinition"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RelationshipLinkDefinition.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("interactionType", this.interactionType);
        jsonWriter.writeArrayField("profilePropertyReferences", this.profilePropertyReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("relatedProfilePropertyReferences", this.relatedProfilePropertyReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("relationshipName", this.relationshipName);
        jsonWriter.writeMapField("displayName", this.displayName, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("description", this.description, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("mappings", this.mappings, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipLinkDefinition from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipLinkDefinition if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelationshipLinkDefinition.
     */
    public static RelationshipLinkDefinition fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipLinkDefinition deserializedRelationshipLinkDefinition = new RelationshipLinkDefinition();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("interactionType".equals(fieldName)) {
                    deserializedRelationshipLinkDefinition.interactionType = reader.getString();
                } else if ("profilePropertyReferences".equals(fieldName)) {
                    List<ParticipantProfilePropertyReference> profilePropertyReferences
                        = reader.readArray(reader1 -> ParticipantProfilePropertyReference.fromJson(reader1));
                    deserializedRelationshipLinkDefinition.profilePropertyReferences = profilePropertyReferences;
                } else if ("relatedProfilePropertyReferences".equals(fieldName)) {
                    List<ParticipantProfilePropertyReference> relatedProfilePropertyReferences
                        = reader.readArray(reader1 -> ParticipantProfilePropertyReference.fromJson(reader1));
                    deserializedRelationshipLinkDefinition.relatedProfilePropertyReferences
                        = relatedProfilePropertyReferences;
                } else if ("relationshipName".equals(fieldName)) {
                    deserializedRelationshipLinkDefinition.relationshipName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    Map<String, String> displayName = reader.readMap(reader1 -> reader1.getString());
                    deserializedRelationshipLinkDefinition.displayName = displayName;
                } else if ("description".equals(fieldName)) {
                    Map<String, String> description = reader.readMap(reader1 -> reader1.getString());
                    deserializedRelationshipLinkDefinition.description = description;
                } else if ("linkName".equals(fieldName)) {
                    deserializedRelationshipLinkDefinition.linkName = reader.getString();
                } else if ("mappings".equals(fieldName)) {
                    List<RelationshipLinkFieldMapping> mappings
                        = reader.readArray(reader1 -> RelationshipLinkFieldMapping.fromJson(reader1));
                    deserializedRelationshipLinkDefinition.mappings = mappings;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRelationshipLinkDefinition.provisioningState
                        = ProvisioningStates.fromString(reader.getString());
                } else if ("relationshipGuidId".equals(fieldName)) {
                    deserializedRelationshipLinkDefinition.relationshipGuidId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedRelationshipLinkDefinition.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipLinkDefinition;
        });
    }
}
