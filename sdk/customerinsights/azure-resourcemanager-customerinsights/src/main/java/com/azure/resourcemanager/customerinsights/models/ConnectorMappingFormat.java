// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connector mapping property format.
 */
@Fluent
public final class ConnectorMappingFormat implements JsonSerializable<ConnectorMappingFormat> {
    /*
     * The type mapping format.
     */
    private String formatType = "TextFormat";

    /*
     * The character that signifies a break between columns.
     */
    private String columnDelimiter;

    /*
     * The oData language.
     */
    private String acceptLanguage;

    /*
     * Quote character, used to indicate enquoted fields.
     */
    private String quoteCharacter;

    /*
     * Escape character for quotes, can be the same as the quoteCharacter.
     */
    private String quoteEscapeCharacter;

    /*
     * Character separating array elements.
     */
    private String arraySeparator;

    /**
     * Creates an instance of ConnectorMappingFormat class.
     */
    public ConnectorMappingFormat() {
    }

    /**
     * Get the formatType property: The type mapping format.
     * 
     * @return the formatType value.
     */
    public String formatType() {
        return this.formatType;
    }

    /**
     * Set the formatType property: The type mapping format.
     * 
     * @param formatType the formatType value to set.
     * @return the ConnectorMappingFormat object itself.
     */
    public ConnectorMappingFormat withFormatType(String formatType) {
        this.formatType = formatType;
        return this;
    }

    /**
     * Get the columnDelimiter property: The character that signifies a break between columns.
     * 
     * @return the columnDelimiter value.
     */
    public String columnDelimiter() {
        return this.columnDelimiter;
    }

    /**
     * Set the columnDelimiter property: The character that signifies a break between columns.
     * 
     * @param columnDelimiter the columnDelimiter value to set.
     * @return the ConnectorMappingFormat object itself.
     */
    public ConnectorMappingFormat withColumnDelimiter(String columnDelimiter) {
        this.columnDelimiter = columnDelimiter;
        return this;
    }

    /**
     * Get the acceptLanguage property: The oData language.
     * 
     * @return the acceptLanguage value.
     */
    public String acceptLanguage() {
        return this.acceptLanguage;
    }

    /**
     * Set the acceptLanguage property: The oData language.
     * 
     * @param acceptLanguage the acceptLanguage value to set.
     * @return the ConnectorMappingFormat object itself.
     */
    public ConnectorMappingFormat withAcceptLanguage(String acceptLanguage) {
        this.acceptLanguage = acceptLanguage;
        return this;
    }

    /**
     * Get the quoteCharacter property: Quote character, used to indicate enquoted fields.
     * 
     * @return the quoteCharacter value.
     */
    public String quoteCharacter() {
        return this.quoteCharacter;
    }

    /**
     * Set the quoteCharacter property: Quote character, used to indicate enquoted fields.
     * 
     * @param quoteCharacter the quoteCharacter value to set.
     * @return the ConnectorMappingFormat object itself.
     */
    public ConnectorMappingFormat withQuoteCharacter(String quoteCharacter) {
        this.quoteCharacter = quoteCharacter;
        return this;
    }

    /**
     * Get the quoteEscapeCharacter property: Escape character for quotes, can be the same as the quoteCharacter.
     * 
     * @return the quoteEscapeCharacter value.
     */
    public String quoteEscapeCharacter() {
        return this.quoteEscapeCharacter;
    }

    /**
     * Set the quoteEscapeCharacter property: Escape character for quotes, can be the same as the quoteCharacter.
     * 
     * @param quoteEscapeCharacter the quoteEscapeCharacter value to set.
     * @return the ConnectorMappingFormat object itself.
     */
    public ConnectorMappingFormat withQuoteEscapeCharacter(String quoteEscapeCharacter) {
        this.quoteEscapeCharacter = quoteEscapeCharacter;
        return this;
    }

    /**
     * Get the arraySeparator property: Character separating array elements.
     * 
     * @return the arraySeparator value.
     */
    public String arraySeparator() {
        return this.arraySeparator;
    }

    /**
     * Set the arraySeparator property: Character separating array elements.
     * 
     * @param arraySeparator the arraySeparator value to set.
     * @return the ConnectorMappingFormat object itself.
     */
    public ConnectorMappingFormat withArraySeparator(String arraySeparator) {
        this.arraySeparator = arraySeparator;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("formatType", this.formatType);
        jsonWriter.writeStringField("columnDelimiter", this.columnDelimiter);
        jsonWriter.writeStringField("acceptLanguage", this.acceptLanguage);
        jsonWriter.writeStringField("quoteCharacter", this.quoteCharacter);
        jsonWriter.writeStringField("quoteEscapeCharacter", this.quoteEscapeCharacter);
        jsonWriter.writeStringField("arraySeparator", this.arraySeparator);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorMappingFormat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorMappingFormat if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectorMappingFormat.
     */
    public static ConnectorMappingFormat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorMappingFormat deserializedConnectorMappingFormat = new ConnectorMappingFormat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("columnDelimiter".equals(fieldName)) {
                    deserializedConnectorMappingFormat.columnDelimiter = reader.getString();
                } else if ("acceptLanguage".equals(fieldName)) {
                    deserializedConnectorMappingFormat.acceptLanguage = reader.getString();
                } else if ("quoteCharacter".equals(fieldName)) {
                    deserializedConnectorMappingFormat.quoteCharacter = reader.getString();
                } else if ("quoteEscapeCharacter".equals(fieldName)) {
                    deserializedConnectorMappingFormat.quoteEscapeCharacter = reader.getString();
                } else if ("arraySeparator".equals(fieldName)) {
                    deserializedConnectorMappingFormat.arraySeparator = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorMappingFormat;
        });
    }
}
