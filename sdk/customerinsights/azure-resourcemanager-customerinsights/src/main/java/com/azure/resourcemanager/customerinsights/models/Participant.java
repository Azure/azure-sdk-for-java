// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Describes a profile type participating in an interaction.
 */
@Fluent
public final class Participant implements JsonSerializable<Participant> {
    /*
     * Profile type name.
     */
    private String profileTypeName;

    /*
     * The property references.
     */
    private List<ParticipantPropertyReference> participantPropertyReferences;

    /*
     * Participant name.
     */
    private String participantName;

    /*
     * Localized display name.
     */
    private Map<String, String> displayName;

    /*
     * Localized descriptions.
     */
    private Map<String, String> description;

    /*
     * The role that the participant is playing in the interaction.
     */
    private String role;

    /**
     * Creates an instance of Participant class.
     */
    public Participant() {
    }

    /**
     * Get the profileTypeName property: Profile type name.
     * 
     * @return the profileTypeName value.
     */
    public String profileTypeName() {
        return this.profileTypeName;
    }

    /**
     * Set the profileTypeName property: Profile type name.
     * 
     * @param profileTypeName the profileTypeName value to set.
     * @return the Participant object itself.
     */
    public Participant withProfileTypeName(String profileTypeName) {
        this.profileTypeName = profileTypeName;
        return this;
    }

    /**
     * Get the participantPropertyReferences property: The property references.
     * 
     * @return the participantPropertyReferences value.
     */
    public List<ParticipantPropertyReference> participantPropertyReferences() {
        return this.participantPropertyReferences;
    }

    /**
     * Set the participantPropertyReferences property: The property references.
     * 
     * @param participantPropertyReferences the participantPropertyReferences value to set.
     * @return the Participant object itself.
     */
    public Participant
        withParticipantPropertyReferences(List<ParticipantPropertyReference> participantPropertyReferences) {
        this.participantPropertyReferences = participantPropertyReferences;
        return this;
    }

    /**
     * Get the participantName property: Participant name.
     * 
     * @return the participantName value.
     */
    public String participantName() {
        return this.participantName;
    }

    /**
     * Set the participantName property: Participant name.
     * 
     * @param participantName the participantName value to set.
     * @return the Participant object itself.
     */
    public Participant withParticipantName(String participantName) {
        this.participantName = participantName;
        return this;
    }

    /**
     * Get the displayName property: Localized display name.
     * 
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display name.
     * 
     * @param displayName the displayName value to set.
     * @return the Participant object itself.
     */
    public Participant withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Localized descriptions.
     * 
     * @return the description value.
     */
    public Map<String, String> description() {
        return this.description;
    }

    /**
     * Set the description property: Localized descriptions.
     * 
     * @param description the description value to set.
     * @return the Participant object itself.
     */
    public Participant withDescription(Map<String, String> description) {
        this.description = description;
        return this;
    }

    /**
     * Get the role property: The role that the participant is playing in the interaction.
     * 
     * @return the role value.
     */
    public String role() {
        return this.role;
    }

    /**
     * Set the role property: The role that the participant is playing in the interaction.
     * 
     * @param role the role value to set.
     * @return the Participant object itself.
     */
    public Participant withRole(String role) {
        this.role = role;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (profileTypeName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property profileTypeName in model Participant"));
        }
        if (participantPropertyReferences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property participantPropertyReferences in model Participant"));
        } else {
            participantPropertyReferences().forEach(e -> e.validate());
        }
        if (participantName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property participantName in model Participant"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Participant.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("profileTypeName", this.profileTypeName);
        jsonWriter.writeArrayField("participantPropertyReferences", this.participantPropertyReferences,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("participantName", this.participantName);
        jsonWriter.writeMapField("displayName", this.displayName, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("description", this.description, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("role", this.role);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Participant from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Participant if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Participant.
     */
    public static Participant fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Participant deserializedParticipant = new Participant();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("profileTypeName".equals(fieldName)) {
                    deserializedParticipant.profileTypeName = reader.getString();
                } else if ("participantPropertyReferences".equals(fieldName)) {
                    List<ParticipantPropertyReference> participantPropertyReferences
                        = reader.readArray(reader1 -> ParticipantPropertyReference.fromJson(reader1));
                    deserializedParticipant.participantPropertyReferences = participantPropertyReferences;
                } else if ("participantName".equals(fieldName)) {
                    deserializedParticipant.participantName = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    Map<String, String> displayName = reader.readMap(reader1 -> reader1.getString());
                    deserializedParticipant.displayName = displayName;
                } else if ("description".equals(fieldName)) {
                    Map<String, String> description = reader.readMap(reader1 -> reader1.getString());
                    deserializedParticipant.description = description;
                } else if ("role".equals(fieldName)) {
                    deserializedParticipant.role = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedParticipant;
        });
    }
}
