// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connector mapping property structure.
 */
@Fluent
public final class ConnectorMappingStructure implements JsonSerializable<ConnectorMappingStructure> {
    /*
     * The property name of the mapping entity.
     */
    private String propertyName;

    /*
     * The column name of the import file.
     */
    private String columnName;

    /*
     * Custom format specifier for input parsing.
     */
    private String customFormatSpecifier;

    /*
     * Indicates if the column is encrypted.
     */
    private Boolean isEncrypted;

    /**
     * Creates an instance of ConnectorMappingStructure class.
     */
    public ConnectorMappingStructure() {
    }

    /**
     * Get the propertyName property: The property name of the mapping entity.
     * 
     * @return the propertyName value.
     */
    public String propertyName() {
        return this.propertyName;
    }

    /**
     * Set the propertyName property: The property name of the mapping entity.
     * 
     * @param propertyName the propertyName value to set.
     * @return the ConnectorMappingStructure object itself.
     */
    public ConnectorMappingStructure withPropertyName(String propertyName) {
        this.propertyName = propertyName;
        return this;
    }

    /**
     * Get the columnName property: The column name of the import file.
     * 
     * @return the columnName value.
     */
    public String columnName() {
        return this.columnName;
    }

    /**
     * Set the columnName property: The column name of the import file.
     * 
     * @param columnName the columnName value to set.
     * @return the ConnectorMappingStructure object itself.
     */
    public ConnectorMappingStructure withColumnName(String columnName) {
        this.columnName = columnName;
        return this;
    }

    /**
     * Get the customFormatSpecifier property: Custom format specifier for input parsing.
     * 
     * @return the customFormatSpecifier value.
     */
    public String customFormatSpecifier() {
        return this.customFormatSpecifier;
    }

    /**
     * Set the customFormatSpecifier property: Custom format specifier for input parsing.
     * 
     * @param customFormatSpecifier the customFormatSpecifier value to set.
     * @return the ConnectorMappingStructure object itself.
     */
    public ConnectorMappingStructure withCustomFormatSpecifier(String customFormatSpecifier) {
        this.customFormatSpecifier = customFormatSpecifier;
        return this;
    }

    /**
     * Get the isEncrypted property: Indicates if the column is encrypted.
     * 
     * @return the isEncrypted value.
     */
    public Boolean isEncrypted() {
        return this.isEncrypted;
    }

    /**
     * Set the isEncrypted property: Indicates if the column is encrypted.
     * 
     * @param isEncrypted the isEncrypted value to set.
     * @return the ConnectorMappingStructure object itself.
     */
    public ConnectorMappingStructure withIsEncrypted(Boolean isEncrypted) {
        this.isEncrypted = isEncrypted;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (propertyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property propertyName in model ConnectorMappingStructure"));
        }
        if (columnName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property columnName in model ConnectorMappingStructure"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorMappingStructure.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("propertyName", this.propertyName);
        jsonWriter.writeStringField("columnName", this.columnName);
        jsonWriter.writeStringField("customFormatSpecifier", this.customFormatSpecifier);
        jsonWriter.writeBooleanField("isEncrypted", this.isEncrypted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorMappingStructure from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorMappingStructure if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectorMappingStructure.
     */
    public static ConnectorMappingStructure fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorMappingStructure deserializedConnectorMappingStructure = new ConnectorMappingStructure();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("propertyName".equals(fieldName)) {
                    deserializedConnectorMappingStructure.propertyName = reader.getString();
                } else if ("columnName".equals(fieldName)) {
                    deserializedConnectorMappingStructure.columnName = reader.getString();
                } else if ("customFormatSpecifier".equals(fieldName)) {
                    deserializedConnectorMappingStructure.customFormatSpecifier = reader.getString();
                } else if ("isEncrypted".equals(fieldName)) {
                    deserializedConnectorMappingStructure.isEncrypted = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorMappingStructure;
        });
    }
}
