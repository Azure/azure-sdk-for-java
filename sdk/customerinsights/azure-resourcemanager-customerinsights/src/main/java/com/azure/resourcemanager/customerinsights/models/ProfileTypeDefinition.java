// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The profile type definition. */
@Fluent
public final class ProfileTypeDefinition extends EntityTypeDefinition {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ProfileTypeDefinition.class);

    /*
     * The strong IDs.
     */
    @JsonProperty(value = "strongIds")
    private List<StrongId> strongIds;

    /**
     * Get the strongIds property: The strong IDs.
     *
     * @return the strongIds value.
     */
    public List<StrongId> strongIds() {
        return this.strongIds;
    }

    /**
     * Set the strongIds property: The strong IDs.
     *
     * @param strongIds the strongIds value to set.
     * @return the ProfileTypeDefinition object itself.
     */
    public ProfileTypeDefinition withStrongIds(List<StrongId> strongIds) {
        this.strongIds = strongIds;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withApiEntitySetName(String apiEntitySetName) {
        super.withApiEntitySetName(apiEntitySetName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withEntityType(EntityTypes entityType) {
        super.withEntityType(entityType);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withFields(List<PropertyDefinition> fields) {
        super.withFields(fields);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withInstancesCount(Integer instancesCount) {
        super.withInstancesCount(instancesCount);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withSchemaItemTypeLink(String schemaItemTypeLink) {
        super.withSchemaItemTypeLink(schemaItemTypeLink);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withTimestampFieldName(String timestampFieldName) {
        super.withTimestampFieldName(timestampFieldName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withTypeName(String typeName) {
        super.withTypeName(typeName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withAttributes(Map<String, List<String>> attributes) {
        super.withAttributes(attributes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withDescription(Map<String, String> description) {
        super.withDescription(description);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withDisplayName(Map<String, String> displayName) {
        super.withDisplayName(displayName);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withLocalizedAttributes(Map<String, Map<String, String>> localizedAttributes) {
        super.withLocalizedAttributes(localizedAttributes);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withSmallImage(String smallImage) {
        super.withSmallImage(smallImage);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withMediumImage(String mediumImage) {
        super.withMediumImage(mediumImage);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ProfileTypeDefinition withLargeImage(String largeImage) {
        super.withLargeImage(largeImage);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (strongIds() != null) {
            strongIds().forEach(e -> e.validate());
        }
    }
}
