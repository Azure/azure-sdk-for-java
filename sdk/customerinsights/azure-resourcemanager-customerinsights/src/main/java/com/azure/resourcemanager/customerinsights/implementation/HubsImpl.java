// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.customerinsights.fluent.HubsClient;
import com.azure.resourcemanager.customerinsights.fluent.models.HubInner;
import com.azure.resourcemanager.customerinsights.models.Hub;
import com.azure.resourcemanager.customerinsights.models.Hubs;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class HubsImpl implements Hubs {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HubsImpl.class);

    private final HubsClient innerClient;

    private final com.azure.resourcemanager.customerinsights.CustomerInsightsManager serviceManager;

    public HubsImpl(
        HubsClient innerClient, com.azure.resourcemanager.customerinsights.CustomerInsightsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String hubName) {
        this.serviceClient().delete(resourceGroupName, hubName);
    }

    public void delete(String resourceGroupName, String hubName, Context context) {
        this.serviceClient().delete(resourceGroupName, hubName, context);
    }

    public Hub getByResourceGroup(String resourceGroupName, String hubName) {
        HubInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, hubName);
        if (inner != null) {
            return new HubImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Hub> getByResourceGroupWithResponse(String resourceGroupName, String hubName, Context context) {
        Response<HubInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, hubName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HubImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<Hub> listByResourceGroup(String resourceGroupName) {
        PagedIterable<HubInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new HubImpl(inner1, this.manager()));
    }

    public PagedIterable<Hub> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<HubInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new HubImpl(inner1, this.manager()));
    }

    public PagedIterable<Hub> list() {
        PagedIterable<HubInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new HubImpl(inner1, this.manager()));
    }

    public PagedIterable<Hub> list(Context context) {
        PagedIterable<HubInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new HubImpl(inner1, this.manager()));
    }

    public Hub getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hubName = Utils.getValueFromIdByName(id, "hubs");
        if (hubName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hubs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, hubName, Context.NONE).getValue();
    }

    public Response<Hub> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hubName = Utils.getValueFromIdByName(id, "hubs");
        if (hubName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hubs'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, hubName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hubName = Utils.getValueFromIdByName(id, "hubs");
        if (hubName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hubs'.", id)));
        }
        this.delete(resourceGroupName, hubName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String hubName = Utils.getValueFromIdByName(id, "hubs");
        if (hubName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'hubs'.", id)));
        }
        this.delete(resourceGroupName, hubName, context);
    }

    private HubsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.customerinsights.CustomerInsightsManager manager() {
        return this.serviceManager;
    }

    public HubImpl define(String name) {
        return new HubImpl(name, this.manager());
    }
}
