// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Definition of WidgetType.
 */
@Fluent
public final class WidgetType implements JsonSerializable<WidgetType> {
    /*
     * Name of the widget type.
     */
    private String widgetTypeName;

    /*
     * Definition for widget type.
     */
    private String definition;

    /*
     * Description for widget type.
     */
    private String description;

    /*
     * Localized display name for the widget type.
     */
    private Map<String, String> displayName;

    /*
     * The image URL.
     */
    private String imageUrl;

    /*
     * The hub name.
     */
    private String tenantId;

    /*
     * The widget version.
     */
    private String widgetVersion;

    /*
     * Date time when widget type was last modified.
     */
    private OffsetDateTime changed;

    /*
     * Date time when widget type was created.
     */
    private OffsetDateTime created;

    /**
     * Creates an instance of WidgetType class.
     */
    public WidgetType() {
    }

    /**
     * Get the widgetTypeName property: Name of the widget type.
     * 
     * @return the widgetTypeName value.
     */
    public String widgetTypeName() {
        return this.widgetTypeName;
    }

    /**
     * Get the definition property: Definition for widget type.
     * 
     * @return the definition value.
     */
    public String definition() {
        return this.definition;
    }

    /**
     * Set the definition property: Definition for widget type.
     * 
     * @param definition the definition value to set.
     * @return the WidgetType object itself.
     */
    public WidgetType withDefinition(String definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Get the description property: Description for widget type.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description for widget type.
     * 
     * @param description the description value to set.
     * @return the WidgetType object itself.
     */
    public WidgetType withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the displayName property: Localized display name for the widget type.
     * 
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display name for the widget type.
     * 
     * @param displayName the displayName value to set.
     * @return the WidgetType object itself.
     */
    public WidgetType withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the imageUrl property: The image URL.
     * 
     * @return the imageUrl value.
     */
    public String imageUrl() {
        return this.imageUrl;
    }

    /**
     * Set the imageUrl property: The image URL.
     * 
     * @param imageUrl the imageUrl value to set.
     * @return the WidgetType object itself.
     */
    public WidgetType withImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
        return this;
    }

    /**
     * Get the tenantId property: The hub name.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the widgetVersion property: The widget version.
     * 
     * @return the widgetVersion value.
     */
    public String widgetVersion() {
        return this.widgetVersion;
    }

    /**
     * Set the widgetVersion property: The widget version.
     * 
     * @param widgetVersion the widgetVersion value to set.
     * @return the WidgetType object itself.
     */
    public WidgetType withWidgetVersion(String widgetVersion) {
        this.widgetVersion = widgetVersion;
        return this;
    }

    /**
     * Get the changed property: Date time when widget type was last modified.
     * 
     * @return the changed value.
     */
    public OffsetDateTime changed() {
        return this.changed;
    }

    /**
     * Get the created property: Date time when widget type was created.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.created;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (definition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property definition in model WidgetType"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WidgetType.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("definition", this.definition);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeMapField("displayName", this.displayName, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("imageUrl", this.imageUrl);
        jsonWriter.writeStringField("widgetVersion", this.widgetVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WidgetType from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WidgetType if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WidgetType.
     */
    public static WidgetType fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WidgetType deserializedWidgetType = new WidgetType();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("definition".equals(fieldName)) {
                    deserializedWidgetType.definition = reader.getString();
                } else if ("widgetTypeName".equals(fieldName)) {
                    deserializedWidgetType.widgetTypeName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedWidgetType.description = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    Map<String, String> displayName = reader.readMap(reader1 -> reader1.getString());
                    deserializedWidgetType.displayName = displayName;
                } else if ("imageUrl".equals(fieldName)) {
                    deserializedWidgetType.imageUrl = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedWidgetType.tenantId = reader.getString();
                } else if ("widgetVersion".equals(fieldName)) {
                    deserializedWidgetType.widgetVersion = reader.getString();
                } else if ("changed".equals(fieldName)) {
                    deserializedWidgetType.changed = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("created".equals(fieldName)) {
                    deserializedWidgetType.created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWidgetType;
        });
    }
}
