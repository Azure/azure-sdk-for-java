// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Metadata for a Link's property mapping.
 */
@Fluent
public final class TypePropertiesMapping implements JsonSerializable<TypePropertiesMapping> {
    /*
     * Property name on the source Entity Type.
     */
    private String sourcePropertyName;

    /*
     * Property name on the target Entity Type.
     */
    private String targetPropertyName;

    /*
     * Link type.
     */
    private LinkTypes linkType;

    /**
     * Creates an instance of TypePropertiesMapping class.
     */
    public TypePropertiesMapping() {
    }

    /**
     * Get the sourcePropertyName property: Property name on the source Entity Type.
     * 
     * @return the sourcePropertyName value.
     */
    public String sourcePropertyName() {
        return this.sourcePropertyName;
    }

    /**
     * Set the sourcePropertyName property: Property name on the source Entity Type.
     * 
     * @param sourcePropertyName the sourcePropertyName value to set.
     * @return the TypePropertiesMapping object itself.
     */
    public TypePropertiesMapping withSourcePropertyName(String sourcePropertyName) {
        this.sourcePropertyName = sourcePropertyName;
        return this;
    }

    /**
     * Get the targetPropertyName property: Property name on the target Entity Type.
     * 
     * @return the targetPropertyName value.
     */
    public String targetPropertyName() {
        return this.targetPropertyName;
    }

    /**
     * Set the targetPropertyName property: Property name on the target Entity Type.
     * 
     * @param targetPropertyName the targetPropertyName value to set.
     * @return the TypePropertiesMapping object itself.
     */
    public TypePropertiesMapping withTargetPropertyName(String targetPropertyName) {
        this.targetPropertyName = targetPropertyName;
        return this;
    }

    /**
     * Get the linkType property: Link type.
     * 
     * @return the linkType value.
     */
    public LinkTypes linkType() {
        return this.linkType;
    }

    /**
     * Set the linkType property: Link type.
     * 
     * @param linkType the linkType value to set.
     * @return the TypePropertiesMapping object itself.
     */
    public TypePropertiesMapping withLinkType(LinkTypes linkType) {
        this.linkType = linkType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourcePropertyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourcePropertyName in model TypePropertiesMapping"));
        }
        if (targetPropertyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetPropertyName in model TypePropertiesMapping"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TypePropertiesMapping.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourcePropertyName", this.sourcePropertyName);
        jsonWriter.writeStringField("targetPropertyName", this.targetPropertyName);
        jsonWriter.writeStringField("linkType", this.linkType == null ? null : this.linkType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TypePropertiesMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TypePropertiesMapping if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TypePropertiesMapping.
     */
    public static TypePropertiesMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TypePropertiesMapping deserializedTypePropertiesMapping = new TypePropertiesMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourcePropertyName".equals(fieldName)) {
                    deserializedTypePropertiesMapping.sourcePropertyName = reader.getString();
                } else if ("targetPropertyName".equals(fieldName)) {
                    deserializedTypePropertiesMapping.targetPropertyName = reader.getString();
                } else if ("linkType".equals(fieldName)) {
                    deserializedTypePropertiesMapping.linkType = LinkTypes.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTypePropertiesMapping;
        });
    }
}
