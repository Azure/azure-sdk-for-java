// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Input type for getting image upload url.
 */
@Fluent
public final class GetImageUploadUrlInput implements JsonSerializable<GetImageUploadUrlInput> {
    /*
     * Type of entity. Can be Profile or Interaction.
     */
    private String entityType;

    /*
     * Name of the entity type.
     */
    private String entityTypeName;

    /*
     * Relative path of the image.
     */
    private String relativePath;

    /**
     * Creates an instance of GetImageUploadUrlInput class.
     */
    public GetImageUploadUrlInput() {
    }

    /**
     * Get the entityType property: Type of entity. Can be Profile or Interaction.
     * 
     * @return the entityType value.
     */
    public String entityType() {
        return this.entityType;
    }

    /**
     * Set the entityType property: Type of entity. Can be Profile or Interaction.
     * 
     * @param entityType the entityType value to set.
     * @return the GetImageUploadUrlInput object itself.
     */
    public GetImageUploadUrlInput withEntityType(String entityType) {
        this.entityType = entityType;
        return this;
    }

    /**
     * Get the entityTypeName property: Name of the entity type.
     * 
     * @return the entityTypeName value.
     */
    public String entityTypeName() {
        return this.entityTypeName;
    }

    /**
     * Set the entityTypeName property: Name of the entity type.
     * 
     * @param entityTypeName the entityTypeName value to set.
     * @return the GetImageUploadUrlInput object itself.
     */
    public GetImageUploadUrlInput withEntityTypeName(String entityTypeName) {
        this.entityTypeName = entityTypeName;
        return this;
    }

    /**
     * Get the relativePath property: Relative path of the image.
     * 
     * @return the relativePath value.
     */
    public String relativePath() {
        return this.relativePath;
    }

    /**
     * Set the relativePath property: Relative path of the image.
     * 
     * @param relativePath the relativePath value to set.
     * @return the GetImageUploadUrlInput object itself.
     */
    public GetImageUploadUrlInput withRelativePath(String relativePath) {
        this.relativePath = relativePath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("entityType", this.entityType);
        jsonWriter.writeStringField("entityTypeName", this.entityTypeName);
        jsonWriter.writeStringField("relativePath", this.relativePath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GetImageUploadUrlInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GetImageUploadUrlInput if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GetImageUploadUrlInput.
     */
    public static GetImageUploadUrlInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GetImageUploadUrlInput deserializedGetImageUploadUrlInput = new GetImageUploadUrlInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("entityType".equals(fieldName)) {
                    deserializedGetImageUploadUrlInput.entityType = reader.getString();
                } else if ("entityTypeName".equals(fieldName)) {
                    deserializedGetImageUploadUrlInput.entityTypeName = reader.getString();
                } else if ("relativePath".equals(fieldName)) {
                    deserializedGetImageUploadUrlInput.relativePath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGetImageUploadUrlInput;
        });
    }
}
