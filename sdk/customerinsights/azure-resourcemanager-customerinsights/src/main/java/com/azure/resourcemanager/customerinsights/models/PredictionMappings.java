// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Definition of the link mapping of prediction.
 */
@Fluent
public final class PredictionMappings implements JsonSerializable<PredictionMappings> {
    /*
     * The score of the link mapping.
     */
    private String score;

    /*
     * The grade of the link mapping.
     */
    private String grade;

    /*
     * The reason of the link mapping.
     */
    private String reason;

    /**
     * Creates an instance of PredictionMappings class.
     */
    public PredictionMappings() {
    }

    /**
     * Get the score property: The score of the link mapping.
     * 
     * @return the score value.
     */
    public String score() {
        return this.score;
    }

    /**
     * Set the score property: The score of the link mapping.
     * 
     * @param score the score value to set.
     * @return the PredictionMappings object itself.
     */
    public PredictionMappings withScore(String score) {
        this.score = score;
        return this;
    }

    /**
     * Get the grade property: The grade of the link mapping.
     * 
     * @return the grade value.
     */
    public String grade() {
        return this.grade;
    }

    /**
     * Set the grade property: The grade of the link mapping.
     * 
     * @param grade the grade value to set.
     * @return the PredictionMappings object itself.
     */
    public PredictionMappings withGrade(String grade) {
        this.grade = grade;
        return this;
    }

    /**
     * Get the reason property: The reason of the link mapping.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: The reason of the link mapping.
     * 
     * @param reason the reason value to set.
     * @return the PredictionMappings object itself.
     */
    public PredictionMappings withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (score() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property score in model PredictionMappings"));
        }
        if (grade() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property grade in model PredictionMappings"));
        }
        if (reason() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property reason in model PredictionMappings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PredictionMappings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("score", this.score);
        jsonWriter.writeStringField("grade", this.grade);
        jsonWriter.writeStringField("reason", this.reason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PredictionMappings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PredictionMappings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PredictionMappings.
     */
    public static PredictionMappings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PredictionMappings deserializedPredictionMappings = new PredictionMappings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("score".equals(fieldName)) {
                    deserializedPredictionMappings.score = reader.getString();
                } else if ("grade".equals(fieldName)) {
                    deserializedPredictionMappings.grade = reader.getString();
                } else if ("reason".equals(fieldName)) {
                    deserializedPredictionMappings.reason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPredictionMappings;
        });
    }
}
