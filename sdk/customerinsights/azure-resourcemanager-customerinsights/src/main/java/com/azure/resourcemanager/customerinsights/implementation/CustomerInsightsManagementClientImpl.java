// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.resourcemanager.customerinsights.fluent.AuthorizationPoliciesClient;
import com.azure.resourcemanager.customerinsights.fluent.ConnectorMappingsClient;
import com.azure.resourcemanager.customerinsights.fluent.ConnectorsClient;
import com.azure.resourcemanager.customerinsights.fluent.CustomerInsightsManagementClient;
import com.azure.resourcemanager.customerinsights.fluent.HubsClient;
import com.azure.resourcemanager.customerinsights.fluent.ImagesClient;
import com.azure.resourcemanager.customerinsights.fluent.InteractionsClient;
import com.azure.resourcemanager.customerinsights.fluent.KpisClient;
import com.azure.resourcemanager.customerinsights.fluent.LinksClient;
import com.azure.resourcemanager.customerinsights.fluent.OperationsClient;
import com.azure.resourcemanager.customerinsights.fluent.PredictionsClient;
import com.azure.resourcemanager.customerinsights.fluent.ProfilesClient;
import com.azure.resourcemanager.customerinsights.fluent.RelationshipLinksClient;
import com.azure.resourcemanager.customerinsights.fluent.RelationshipsClient;
import com.azure.resourcemanager.customerinsights.fluent.RoleAssignmentsClient;
import com.azure.resourcemanager.customerinsights.fluent.RolesClient;
import com.azure.resourcemanager.customerinsights.fluent.ViewsClient;
import com.azure.resourcemanager.customerinsights.fluent.WidgetTypesClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import java.util.Map;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the CustomerInsightsManagementClientImpl type. */
@ServiceClient(builder = CustomerInsightsManagementClientBuilder.class)
public final class CustomerInsightsManagementClientImpl implements CustomerInsightsManagementClient {
    private final ClientLogger logger = new ClientLogger(CustomerInsightsManagementClientImpl.class);

    /**
     * Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms
     * part of the URI for every service call.
     */
    private final String subscriptionId;

    /**
     * Gets Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID
     * forms part of the URI for every service call.
     *
     * @return the subscriptionId value.
     */
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /** server parameter. */
    private final String endpoint;

    /**
     * Gets server parameter.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Api Version. */
    private final String apiVersion;

    /**
     * Gets Api Version.
     *
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /** The default poll interval for long-running operation. */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     *
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /** The OperationsClient object to access its operations. */
    private final OperationsClient operations;

    /**
     * Gets the OperationsClient object to access its operations.
     *
     * @return the OperationsClient object.
     */
    public OperationsClient getOperations() {
        return this.operations;
    }

    /** The HubsClient object to access its operations. */
    private final HubsClient hubs;

    /**
     * Gets the HubsClient object to access its operations.
     *
     * @return the HubsClient object.
     */
    public HubsClient getHubs() {
        return this.hubs;
    }

    /** The ProfilesClient object to access its operations. */
    private final ProfilesClient profiles;

    /**
     * Gets the ProfilesClient object to access its operations.
     *
     * @return the ProfilesClient object.
     */
    public ProfilesClient getProfiles() {
        return this.profiles;
    }

    /** The InteractionsClient object to access its operations. */
    private final InteractionsClient interactions;

    /**
     * Gets the InteractionsClient object to access its operations.
     *
     * @return the InteractionsClient object.
     */
    public InteractionsClient getInteractions() {
        return this.interactions;
    }

    /** The RelationshipsClient object to access its operations. */
    private final RelationshipsClient relationships;

    /**
     * Gets the RelationshipsClient object to access its operations.
     *
     * @return the RelationshipsClient object.
     */
    public RelationshipsClient getRelationships() {
        return this.relationships;
    }

    /** The RelationshipLinksClient object to access its operations. */
    private final RelationshipLinksClient relationshipLinks;

    /**
     * Gets the RelationshipLinksClient object to access its operations.
     *
     * @return the RelationshipLinksClient object.
     */
    public RelationshipLinksClient getRelationshipLinks() {
        return this.relationshipLinks;
    }

    /** The AuthorizationPoliciesClient object to access its operations. */
    private final AuthorizationPoliciesClient authorizationPolicies;

    /**
     * Gets the AuthorizationPoliciesClient object to access its operations.
     *
     * @return the AuthorizationPoliciesClient object.
     */
    public AuthorizationPoliciesClient getAuthorizationPolicies() {
        return this.authorizationPolicies;
    }

    /** The ConnectorsClient object to access its operations. */
    private final ConnectorsClient connectors;

    /**
     * Gets the ConnectorsClient object to access its operations.
     *
     * @return the ConnectorsClient object.
     */
    public ConnectorsClient getConnectors() {
        return this.connectors;
    }

    /** The ConnectorMappingsClient object to access its operations. */
    private final ConnectorMappingsClient connectorMappings;

    /**
     * Gets the ConnectorMappingsClient object to access its operations.
     *
     * @return the ConnectorMappingsClient object.
     */
    public ConnectorMappingsClient getConnectorMappings() {
        return this.connectorMappings;
    }

    /** The KpisClient object to access its operations. */
    private final KpisClient kpis;

    /**
     * Gets the KpisClient object to access its operations.
     *
     * @return the KpisClient object.
     */
    public KpisClient getKpis() {
        return this.kpis;
    }

    /** The WidgetTypesClient object to access its operations. */
    private final WidgetTypesClient widgetTypes;

    /**
     * Gets the WidgetTypesClient object to access its operations.
     *
     * @return the WidgetTypesClient object.
     */
    public WidgetTypesClient getWidgetTypes() {
        return this.widgetTypes;
    }

    /** The ViewsClient object to access its operations. */
    private final ViewsClient views;

    /**
     * Gets the ViewsClient object to access its operations.
     *
     * @return the ViewsClient object.
     */
    public ViewsClient getViews() {
        return this.views;
    }

    /** The LinksClient object to access its operations. */
    private final LinksClient links;

    /**
     * Gets the LinksClient object to access its operations.
     *
     * @return the LinksClient object.
     */
    public LinksClient getLinks() {
        return this.links;
    }

    /** The RolesClient object to access its operations. */
    private final RolesClient roles;

    /**
     * Gets the RolesClient object to access its operations.
     *
     * @return the RolesClient object.
     */
    public RolesClient getRoles() {
        return this.roles;
    }

    /** The RoleAssignmentsClient object to access its operations. */
    private final RoleAssignmentsClient roleAssignments;

    /**
     * Gets the RoleAssignmentsClient object to access its operations.
     *
     * @return the RoleAssignmentsClient object.
     */
    public RoleAssignmentsClient getRoleAssignments() {
        return this.roleAssignments;
    }

    /** The ImagesClient object to access its operations. */
    private final ImagesClient images;

    /**
     * Gets the ImagesClient object to access its operations.
     *
     * @return the ImagesClient object.
     */
    public ImagesClient getImages() {
        return this.images;
    }

    /** The PredictionsClient object to access its operations. */
    private final PredictionsClient predictions;

    /**
     * Gets the PredictionsClient object to access its operations.
     *
     * @return the PredictionsClient object.
     */
    public PredictionsClient getPredictions() {
        return this.predictions;
    }

    /**
     * Initializes an instance of CustomerInsightsManagementClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The
     *     subscription ID forms part of the URI for every service call.
     * @param endpoint server parameter.
     */
    CustomerInsightsManagementClientImpl(
        HttpPipeline httpPipeline,
        SerializerAdapter serializerAdapter,
        Duration defaultPollInterval,
        AzureEnvironment environment,
        String subscriptionId,
        String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.subscriptionId = subscriptionId;
        this.endpoint = endpoint;
        this.apiVersion = "2017-04-26";
        this.operations = new OperationsClientImpl(this);
        this.hubs = new HubsClientImpl(this);
        this.profiles = new ProfilesClientImpl(this);
        this.interactions = new InteractionsClientImpl(this);
        this.relationships = new RelationshipsClientImpl(this);
        this.relationshipLinks = new RelationshipLinksClientImpl(this);
        this.authorizationPolicies = new AuthorizationPoliciesClientImpl(this);
        this.connectors = new ConnectorsClientImpl(this);
        this.connectorMappings = new ConnectorMappingsClientImpl(this);
        this.kpis = new KpisClientImpl(this);
        this.widgetTypes = new WidgetTypesClientImpl(this);
        this.views = new ViewsClientImpl(this);
        this.links = new LinksClientImpl(this);
        this.roles = new RolesClientImpl(this);
        this.roleAssignments = new RoleAssignmentsClientImpl(this);
        this.images = new ImagesClientImpl(this);
        this.predictions = new PredictionsClientImpl(this);
    }

    /**
     * Gets default client context.
     *
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     *
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        for (Map.Entry<Object, Object> entry : this.getContext().getValues().entrySet()) {
            context = context.addData(entry.getKey(), entry.getValue());
        }
        return context;
    }

    /**
     * Gets long running operation result.
     *
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(
        Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline,
        Type pollResultType,
        Type finalResultType,
        Context context) {
        return PollerFactory
            .create(
                serializerAdapter,
                httpPipeline,
                pollResultType,
                finalResultType,
                defaultPollInterval,
                activationResponse,
                context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     *
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse =
                    new HttpResponseImpl(
                        lroError.getResponseStatusCode(), lroError.getResponseHeaders(), lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError =
                            this
                                .getSerializerAdapter()
                                .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        logger.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(s);
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }
}
