// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Map a field of profile to its corresponding StrongId in Related Profile.
 */
@Fluent
public final class RelationshipTypeFieldMapping implements JsonSerializable<RelationshipTypeFieldMapping> {
    /*
     * Specifies the fieldName in profile.
     */
    private String profileFieldName;

    /*
     * Specifies the KeyProperty (from StrongId) of the related profile.
     */
    private String relatedProfileKeyProperty;

    /**
     * Creates an instance of RelationshipTypeFieldMapping class.
     */
    public RelationshipTypeFieldMapping() {
    }

    /**
     * Get the profileFieldName property: Specifies the fieldName in profile.
     * 
     * @return the profileFieldName value.
     */
    public String profileFieldName() {
        return this.profileFieldName;
    }

    /**
     * Set the profileFieldName property: Specifies the fieldName in profile.
     * 
     * @param profileFieldName the profileFieldName value to set.
     * @return the RelationshipTypeFieldMapping object itself.
     */
    public RelationshipTypeFieldMapping withProfileFieldName(String profileFieldName) {
        this.profileFieldName = profileFieldName;
        return this;
    }

    /**
     * Get the relatedProfileKeyProperty property: Specifies the KeyProperty (from StrongId) of the related profile.
     * 
     * @return the relatedProfileKeyProperty value.
     */
    public String relatedProfileKeyProperty() {
        return this.relatedProfileKeyProperty;
    }

    /**
     * Set the relatedProfileKeyProperty property: Specifies the KeyProperty (from StrongId) of the related profile.
     * 
     * @param relatedProfileKeyProperty the relatedProfileKeyProperty value to set.
     * @return the RelationshipTypeFieldMapping object itself.
     */
    public RelationshipTypeFieldMapping withRelatedProfileKeyProperty(String relatedProfileKeyProperty) {
        this.relatedProfileKeyProperty = relatedProfileKeyProperty;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (profileFieldName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property profileFieldName in model RelationshipTypeFieldMapping"));
        }
        if (relatedProfileKeyProperty() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property relatedProfileKeyProperty in model RelationshipTypeFieldMapping"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RelationshipTypeFieldMapping.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("profileFieldName", this.profileFieldName);
        jsonWriter.writeStringField("relatedProfileKeyProperty", this.relatedProfileKeyProperty);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RelationshipTypeFieldMapping from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RelationshipTypeFieldMapping if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RelationshipTypeFieldMapping.
     */
    public static RelationshipTypeFieldMapping fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RelationshipTypeFieldMapping deserializedRelationshipTypeFieldMapping = new RelationshipTypeFieldMapping();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("profileFieldName".equals(fieldName)) {
                    deserializedRelationshipTypeFieldMapping.profileFieldName = reader.getString();
                } else if ("relatedProfileKeyProperty".equals(fieldName)) {
                    deserializedRelationshipTypeFieldMapping.relatedProfileKeyProperty = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRelationshipTypeFieldMapping;
        });
    }
}
