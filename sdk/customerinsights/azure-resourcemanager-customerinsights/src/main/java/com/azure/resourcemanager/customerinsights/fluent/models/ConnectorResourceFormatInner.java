// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.customerinsights.models.ConnectorStates;
import com.azure.resourcemanager.customerinsights.models.ConnectorTypes;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * The connector resource format.
 */
@Fluent
public final class ConnectorResourceFormatInner extends ProxyResource {
    /*
     * Properties of connector.
     */
    private Connector innerProperties;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of ConnectorResourceFormatInner class.
     */
    public ConnectorResourceFormatInner() {
    }

    /**
     * Get the innerProperties property: Properties of connector.
     * 
     * @return the innerProperties value.
     */
    private Connector innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the connectorId property: ID of the connector.
     * 
     * @return the connectorId value.
     */
    public Integer connectorId() {
        return this.innerProperties() == null ? null : this.innerProperties().connectorId();
    }

    /**
     * Get the connectorName property: Name of the connector.
     * 
     * @return the connectorName value.
     */
    public String connectorName() {
        return this.innerProperties() == null ? null : this.innerProperties().connectorName();
    }

    /**
     * Set the connectorName property: Name of the connector.
     * 
     * @param connectorName the connectorName value to set.
     * @return the ConnectorResourceFormatInner object itself.
     */
    public ConnectorResourceFormatInner withConnectorName(String connectorName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Connector();
        }
        this.innerProperties().withConnectorName(connectorName);
        return this;
    }

    /**
     * Get the connectorType property: Type of connector.
     * 
     * @return the connectorType value.
     */
    public ConnectorTypes connectorType() {
        return this.innerProperties() == null ? null : this.innerProperties().connectorType();
    }

    /**
     * Set the connectorType property: Type of connector.
     * 
     * @param connectorType the connectorType value to set.
     * @return the ConnectorResourceFormatInner object itself.
     */
    public ConnectorResourceFormatInner withConnectorType(ConnectorTypes connectorType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Connector();
        }
        this.innerProperties().withConnectorType(connectorType);
        return this;
    }

    /**
     * Get the displayName property: Display name of the connector.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Display name of the connector.
     * 
     * @param displayName the displayName value to set.
     * @return the ConnectorResourceFormatInner object itself.
     */
    public ConnectorResourceFormatInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Connector();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the description property: Description of the connector.
     * 
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: Description of the connector.
     * 
     * @param description the description value to set.
     * @return the ConnectorResourceFormatInner object itself.
     */
    public ConnectorResourceFormatInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Connector();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the connectorProperties property: The connector properties.
     * 
     * @return the connectorProperties value.
     */
    public Map<String, Object> connectorProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().connectorProperties();
    }

    /**
     * Set the connectorProperties property: The connector properties.
     * 
     * @param connectorProperties the connectorProperties value to set.
     * @return the ConnectorResourceFormatInner object itself.
     */
    public ConnectorResourceFormatInner withConnectorProperties(Map<String, Object> connectorProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Connector();
        }
        this.innerProperties().withConnectorProperties(connectorProperties);
        return this;
    }

    /**
     * Get the created property: The created time.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.innerProperties() == null ? null : this.innerProperties().created();
    }

    /**
     * Get the lastModified property: The last modified time.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.innerProperties() == null ? null : this.innerProperties().lastModified();
    }

    /**
     * Get the state property: State of connector.
     * 
     * @return the state value.
     */
    public ConnectorStates state() {
        return this.innerProperties() == null ? null : this.innerProperties().state();
    }

    /**
     * Get the tenantId property: The hub name.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.innerProperties() == null ? null : this.innerProperties().tenantId();
    }

    /**
     * Get the isInternal property: If this is an internal connector.
     * 
     * @return the isInternal value.
     */
    public Boolean isInternal() {
        return this.innerProperties() == null ? null : this.innerProperties().isInternal();
    }

    /**
     * Set the isInternal property: If this is an internal connector.
     * 
     * @param isInternal the isInternal value to set.
     * @return the ConnectorResourceFormatInner object itself.
     */
    public ConnectorResourceFormatInner withIsInternal(Boolean isInternal) {
        if (this.innerProperties() == null) {
            this.innerProperties = new Connector();
        }
        this.innerProperties().withIsInternal(isInternal);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ConnectorResourceFormatInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ConnectorResourceFormatInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ConnectorResourceFormatInner.
     */
    public static ConnectorResourceFormatInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ConnectorResourceFormatInner deserializedConnectorResourceFormatInner = new ConnectorResourceFormatInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedConnectorResourceFormatInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedConnectorResourceFormatInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedConnectorResourceFormatInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedConnectorResourceFormatInner.innerProperties = Connector.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedConnectorResourceFormatInner;
        });
    }
}
