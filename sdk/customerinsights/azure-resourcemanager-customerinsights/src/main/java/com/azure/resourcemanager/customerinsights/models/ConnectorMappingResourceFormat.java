// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.customerinsights.fluent.models.ConnectorMappingResourceFormatInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of ConnectorMappingResourceFormat. */
public interface ConnectorMappingResourceFormat {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the connectorName property: The connector name.
     *
     * @return the connectorName value.
     */
    String connectorName();

    /**
     * Gets the connectorType property: Type of connector.
     *
     * @return the connectorType value.
     */
    ConnectorTypes connectorType();

    /**
     * Gets the created property: The created time.
     *
     * @return the created value.
     */
    OffsetDateTime created();

    /**
     * Gets the lastModified property: The last modified time.
     *
     * @return the lastModified value.
     */
    OffsetDateTime lastModified();

    /**
     * Gets the entityType property: Defines which entity type the file should map to.
     *
     * @return the entityType value.
     */
    EntityTypes entityType();

    /**
     * Gets the entityTypeName property: The mapping entity name.
     *
     * @return the entityTypeName value.
     */
    String entityTypeName();

    /**
     * Gets the connectorMappingName property: The connector mapping name.
     *
     * @return the connectorMappingName value.
     */
    String connectorMappingName();

    /**
     * Gets the displayName property: Display name for the connector mapping.
     *
     * @return the displayName value.
     */
    String displayName();

    /**
     * Gets the description property: The description of the connector mapping.
     *
     * @return the description value.
     */
    String description();

    /**
     * Gets the dataFormatId property: The DataFormat ID.
     *
     * @return the dataFormatId value.
     */
    String dataFormatId();

    /**
     * Gets the mappingProperties property: The properties of the mapping.
     *
     * @return the mappingProperties value.
     */
    ConnectorMappingProperties mappingProperties();

    /**
     * Gets the nextRunTime property: The next run time based on customer's settings.
     *
     * @return the nextRunTime value.
     */
    OffsetDateTime nextRunTime();

    /**
     * Gets the runId property: The RunId.
     *
     * @return the runId value.
     */
    String runId();

    /**
     * Gets the state property: State of connector mapping.
     *
     * @return the state value.
     */
    ConnectorMappingStates state();

    /**
     * Gets the tenantId property: The hub name.
     *
     * @return the tenantId value.
     */
    String tenantId();

    /**
     * Gets the inner com.azure.resourcemanager.customerinsights.fluent.models.ConnectorMappingResourceFormatInner
     * object.
     *
     * @return the inner object.
     */
    ConnectorMappingResourceFormatInner innerModel();

    /** The entirety of the ConnectorMappingResourceFormat definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The ConnectorMappingResourceFormat definition stages. */
    interface DefinitionStages {
        /** The first stage of the ConnectorMappingResourceFormat definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, hubName, connectorName.
             *
             * @param resourceGroupName The name of the resource group.
             * @param hubName The name of the hub.
             * @param connectorName The name of the connector.
             * @return the next definition stage.
             */
            WithCreate withExistingConnector(String resourceGroupName, String hubName, String connectorName);
        }
        /**
         * The stage of the ConnectorMappingResourceFormat definition which contains all the minimum required properties
         * for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithConnectorType,
                DefinitionStages.WithEntityType,
                DefinitionStages.WithEntityTypeName,
                DefinitionStages.WithDisplayName,
                DefinitionStages.WithDescription,
                DefinitionStages.WithMappingProperties {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ConnectorMappingResourceFormat create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ConnectorMappingResourceFormat create(Context context);
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify connectorType. */
        interface WithConnectorType {
            /**
             * Specifies the connectorType property: Type of connector..
             *
             * @param connectorType Type of connector.
             * @return the next definition stage.
             */
            WithCreate withConnectorType(ConnectorTypes connectorType);
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify entityType. */
        interface WithEntityType {
            /**
             * Specifies the entityType property: Defines which entity type the file should map to..
             *
             * @param entityType Defines which entity type the file should map to.
             * @return the next definition stage.
             */
            WithCreate withEntityType(EntityTypes entityType);
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify entityTypeName. */
        interface WithEntityTypeName {
            /**
             * Specifies the entityTypeName property: The mapping entity name..
             *
             * @param entityTypeName The mapping entity name.
             * @return the next definition stage.
             */
            WithCreate withEntityTypeName(String entityTypeName);
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: Display name for the connector mapping..
             *
             * @param displayName Display name for the connector mapping.
             * @return the next definition stage.
             */
            WithCreate withDisplayName(String displayName);
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description of the connector mapping..
             *
             * @param description The description of the connector mapping.
             * @return the next definition stage.
             */
            WithCreate withDescription(String description);
        }
        /** The stage of the ConnectorMappingResourceFormat definition allowing to specify mappingProperties. */
        interface WithMappingProperties {
            /**
             * Specifies the mappingProperties property: The properties of the mapping..
             *
             * @param mappingProperties The properties of the mapping.
             * @return the next definition stage.
             */
            WithCreate withMappingProperties(ConnectorMappingProperties mappingProperties);
        }
    }
    /**
     * Begins update for the ConnectorMappingResourceFormat resource.
     *
     * @return the stage of resource update.
     */
    ConnectorMappingResourceFormat.Update update();

    /** The template for ConnectorMappingResourceFormat update. */
    interface Update
        extends UpdateStages.WithConnectorType,
            UpdateStages.WithEntityType,
            UpdateStages.WithEntityTypeName,
            UpdateStages.WithDisplayName,
            UpdateStages.WithDescription,
            UpdateStages.WithMappingProperties {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ConnectorMappingResourceFormat apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ConnectorMappingResourceFormat apply(Context context);
    }
    /** The ConnectorMappingResourceFormat update stages. */
    interface UpdateStages {
        /** The stage of the ConnectorMappingResourceFormat update allowing to specify connectorType. */
        interface WithConnectorType {
            /**
             * Specifies the connectorType property: Type of connector..
             *
             * @param connectorType Type of connector.
             * @return the next definition stage.
             */
            Update withConnectorType(ConnectorTypes connectorType);
        }
        /** The stage of the ConnectorMappingResourceFormat update allowing to specify entityType. */
        interface WithEntityType {
            /**
             * Specifies the entityType property: Defines which entity type the file should map to..
             *
             * @param entityType Defines which entity type the file should map to.
             * @return the next definition stage.
             */
            Update withEntityType(EntityTypes entityType);
        }
        /** The stage of the ConnectorMappingResourceFormat update allowing to specify entityTypeName. */
        interface WithEntityTypeName {
            /**
             * Specifies the entityTypeName property: The mapping entity name..
             *
             * @param entityTypeName The mapping entity name.
             * @return the next definition stage.
             */
            Update withEntityTypeName(String entityTypeName);
        }
        /** The stage of the ConnectorMappingResourceFormat update allowing to specify displayName. */
        interface WithDisplayName {
            /**
             * Specifies the displayName property: Display name for the connector mapping..
             *
             * @param displayName Display name for the connector mapping.
             * @return the next definition stage.
             */
            Update withDisplayName(String displayName);
        }
        /** The stage of the ConnectorMappingResourceFormat update allowing to specify description. */
        interface WithDescription {
            /**
             * Specifies the description property: The description of the connector mapping..
             *
             * @param description The description of the connector mapping.
             * @return the next definition stage.
             */
            Update withDescription(String description);
        }
        /** The stage of the ConnectorMappingResourceFormat update allowing to specify mappingProperties. */
        interface WithMappingProperties {
            /**
             * Specifies the mappingProperties property: The properties of the mapping..
             *
             * @param mappingProperties The properties of the mapping.
             * @return the next definition stage.
             */
            Update withMappingProperties(ConnectorMappingProperties mappingProperties);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ConnectorMappingResourceFormat refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ConnectorMappingResourceFormat refresh(Context context);
}
