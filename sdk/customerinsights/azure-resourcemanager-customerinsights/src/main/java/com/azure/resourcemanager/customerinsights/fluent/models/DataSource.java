// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.customerinsights.models.DataSourceType;
import com.azure.resourcemanager.customerinsights.models.Status;
import java.io.IOException;

/**
 * Data Source is a way for us to know the source of instances. A single type can have data coming in from multiple
 * places. In activities we use this to determine precedence rules.
 */
@Immutable
public final class DataSource implements JsonSerializable<DataSource> {
    /*
     * The data source name
     */
    private String name;

    /*
     * The data source type.
     */
    private DataSourceType dataSourceType;

    /*
     * The data source status.
     */
    private Status status;

    /*
     * The data source ID.
     */
    private Integer id;

    /*
     * The data source reference id.
     */
    private String dataSourceReferenceId;

    /**
     * Creates an instance of DataSource class.
     */
    public DataSource() {
    }

    /**
     * Get the name property: The data source name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the dataSourceType property: The data source type.
     * 
     * @return the dataSourceType value.
     */
    public DataSourceType dataSourceType() {
        return this.dataSourceType;
    }

    /**
     * Get the status property: The data source status.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Get the id property: The data source ID.
     * 
     * @return the id value.
     */
    public Integer id() {
        return this.id;
    }

    /**
     * Get the dataSourceReferenceId property: The data source reference id.
     * 
     * @return the dataSourceReferenceId value.
     */
    public String dataSourceReferenceId() {
        return this.dataSourceReferenceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataSource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataSource if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the DataSource.
     */
    public static DataSource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataSource deserializedDataSource = new DataSource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataSource.name = reader.getString();
                } else if ("dataSourceType".equals(fieldName)) {
                    deserializedDataSource.dataSourceType = DataSourceType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedDataSource.status = Status.fromString(reader.getString());
                } else if ("id".equals(fieldName)) {
                    deserializedDataSource.id = reader.getNullable(JsonReader::getInt);
                } else if ("dataSourceReferenceId".equals(fieldName)) {
                    deserializedDataSource.dataSourceReferenceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataSource;
        });
    }
}
