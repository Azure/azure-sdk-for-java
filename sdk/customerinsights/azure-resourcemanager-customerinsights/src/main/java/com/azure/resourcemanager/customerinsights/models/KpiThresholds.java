// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Defines the KPI Threshold limits.
 */
@Fluent
public final class KpiThresholds implements JsonSerializable<KpiThresholds> {
    /*
     * The lower threshold limit.
     */
    private BigDecimal lowerLimit;

    /*
     * The upper threshold limit.
     */
    private BigDecimal upperLimit;

    /*
     * Whether or not the KPI is an increasing KPI.
     */
    private boolean increasingKpi;

    /**
     * Creates an instance of KpiThresholds class.
     */
    public KpiThresholds() {
    }

    /**
     * Get the lowerLimit property: The lower threshold limit.
     * 
     * @return the lowerLimit value.
     */
    public BigDecimal lowerLimit() {
        return this.lowerLimit;
    }

    /**
     * Set the lowerLimit property: The lower threshold limit.
     * 
     * @param lowerLimit the lowerLimit value to set.
     * @return the KpiThresholds object itself.
     */
    public KpiThresholds withLowerLimit(BigDecimal lowerLimit) {
        this.lowerLimit = lowerLimit;
        return this;
    }

    /**
     * Get the upperLimit property: The upper threshold limit.
     * 
     * @return the upperLimit value.
     */
    public BigDecimal upperLimit() {
        return this.upperLimit;
    }

    /**
     * Set the upperLimit property: The upper threshold limit.
     * 
     * @param upperLimit the upperLimit value to set.
     * @return the KpiThresholds object itself.
     */
    public KpiThresholds withUpperLimit(BigDecimal upperLimit) {
        this.upperLimit = upperLimit;
        return this;
    }

    /**
     * Get the increasingKpi property: Whether or not the KPI is an increasing KPI.
     * 
     * @return the increasingKpi value.
     */
    public boolean increasingKpi() {
        return this.increasingKpi;
    }

    /**
     * Set the increasingKpi property: Whether or not the KPI is an increasing KPI.
     * 
     * @param increasingKpi the increasingKpi value to set.
     * @return the KpiThresholds object itself.
     */
    public KpiThresholds withIncreasingKpi(boolean increasingKpi) {
        this.increasingKpi = increasingKpi;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lowerLimit() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property lowerLimit in model KpiThresholds"));
        }
        if (upperLimit() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property upperLimit in model KpiThresholds"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KpiThresholds.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("lowerLimit", this.lowerLimit);
        jsonWriter.writeNumberField("upperLimit", this.upperLimit);
        jsonWriter.writeBooleanField("increasingKpi", this.increasingKpi);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KpiThresholds from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KpiThresholds if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KpiThresholds.
     */
    public static KpiThresholds fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KpiThresholds deserializedKpiThresholds = new KpiThresholds();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lowerLimit".equals(fieldName)) {
                    deserializedKpiThresholds.lowerLimit
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("upperLimit".equals(fieldName)) {
                    deserializedKpiThresholds.upperLimit
                        = reader.getNullable(nonNullReader -> new BigDecimal(nonNullReader.getString()));
                } else if ("increasingKpi".equals(fieldName)) {
                    deserializedKpiThresholds.increasingKpi = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKpiThresholds;
        });
    }
}
