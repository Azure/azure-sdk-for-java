// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * The view in Customer 360 web application.
 */
@Fluent
public final class View implements JsonSerializable<View> {
    /*
     * Name of the view.
     */
    private String viewName;

    /*
     * the user ID.
     */
    private String userId;

    /*
     * the hub name.
     */
    private String tenantId;

    /*
     * Localized display name for the view.
     */
    private Map<String, String> displayName;

    /*
     * View definition.
     */
    private String definition;

    /*
     * Date time when view was last modified.
     */
    private OffsetDateTime changed;

    /*
     * Date time when view was created.
     */
    private OffsetDateTime created;

    /**
     * Creates an instance of View class.
     */
    public View() {
    }

    /**
     * Get the viewName property: Name of the view.
     * 
     * @return the viewName value.
     */
    public String viewName() {
        return this.viewName;
    }

    /**
     * Get the userId property: the user ID.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: the user ID.
     * 
     * @param userId the userId value to set.
     * @return the View object itself.
     */
    public View withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the tenantId property: the hub name.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Get the displayName property: Localized display name for the view.
     * 
     * @return the displayName value.
     */
    public Map<String, String> displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Localized display name for the view.
     * 
     * @param displayName the displayName value to set.
     * @return the View object itself.
     */
    public View withDisplayName(Map<String, String> displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the definition property: View definition.
     * 
     * @return the definition value.
     */
    public String definition() {
        return this.definition;
    }

    /**
     * Set the definition property: View definition.
     * 
     * @param definition the definition value to set.
     * @return the View object itself.
     */
    public View withDefinition(String definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Get the changed property: Date time when view was last modified.
     * 
     * @return the changed value.
     */
    public OffsetDateTime changed() {
        return this.changed;
    }

    /**
     * Get the created property: Date time when view was created.
     * 
     * @return the created value.
     */
    public OffsetDateTime created() {
        return this.created;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (definition() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property definition in model View"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(View.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("definition", this.definition);
        jsonWriter.writeStringField("userId", this.userId);
        jsonWriter.writeMapField("displayName", this.displayName, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of View from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of View if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the View.
     */
    public static View fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            View deserializedView = new View();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("definition".equals(fieldName)) {
                    deserializedView.definition = reader.getString();
                } else if ("viewName".equals(fieldName)) {
                    deserializedView.viewName = reader.getString();
                } else if ("userId".equals(fieldName)) {
                    deserializedView.userId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedView.tenantId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    Map<String, String> displayName = reader.readMap(reader1 -> reader1.getString());
                    deserializedView.displayName = displayName;
                } else if ("changed".equals(fieldName)) {
                    deserializedView.changed = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("created".equals(fieldName)) {
                    deserializedView.created = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedView;
        });
    }
}
