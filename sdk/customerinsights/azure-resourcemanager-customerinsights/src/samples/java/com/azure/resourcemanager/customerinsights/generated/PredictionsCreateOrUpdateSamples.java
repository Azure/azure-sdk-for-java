// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.customerinsights.generated;

import com.azure.resourcemanager.customerinsights.models.PredictionMappings;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/** Samples for Predictions CreateOrUpdate. */
public final class PredictionsCreateOrUpdateSamples {
    /*
     * x-ms-original-file: specification/customer-insights/resource-manager/Microsoft.CustomerInsights/stable/2017-04-26/examples/PredictionsCreateOrUpdate.json
     */
    /**
     * Sample code: Predictions_CreateOrUpdate.
     *
     * @param manager Entry point to CustomerInsightsManager.
     */
    public static void predictionsCreateOrUpdate(
        com.azure.resourcemanager.customerinsights.CustomerInsightsManager manager) {
        manager
            .predictions()
            .define("sdktest")
            .withExistingHub("TestHubRG", "sdkTestHub")
            .withDescription(mapOf("en-us", "sdktest"))
            .withDisplayName(mapOf("en-us", "sdktest"))
            .withInvolvedInteractionTypes(Arrays.asList())
            .withInvolvedKpiTypes(Arrays.asList())
            .withInvolvedRelationships(Arrays.asList())
            .withNegativeOutcomeExpression("Customers.FirstName = 'Mike'")
            .withPositiveOutcomeExpression("Customers.FirstName = 'David'")
            .withPrimaryProfileType("Customers")
            .withPredictionName("sdktest")
            .withScopeExpression("*")
            .withAutoAnalyze(true)
            .withMappings(
                new PredictionMappings()
                    .withScore("sdktest_Score")
                    .withGrade("sdktest_Grade")
                    .withReason("sdktest_Reason"))
            .withScoreLabel("score label")
            .withGrades(Arrays.asList())
            .create();
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
