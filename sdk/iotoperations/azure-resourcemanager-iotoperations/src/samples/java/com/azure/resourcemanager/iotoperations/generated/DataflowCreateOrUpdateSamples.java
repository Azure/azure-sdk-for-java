// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.resourcemanager.iotoperations.models.DataflowBuiltInTransformationDataset;
import com.azure.resourcemanager.iotoperations.models.DataflowBuiltInTransformationFilter;
import com.azure.resourcemanager.iotoperations.models.DataflowBuiltInTransformationMap;
import com.azure.resourcemanager.iotoperations.models.DataflowBuiltInTransformationSettings;
import com.azure.resourcemanager.iotoperations.models.DataflowDestinationOperationSettings;
import com.azure.resourcemanager.iotoperations.models.DataflowMappingType;
import com.azure.resourcemanager.iotoperations.models.DataflowOperation;
import com.azure.resourcemanager.iotoperations.models.DataflowProperties;
import com.azure.resourcemanager.iotoperations.models.DataflowSourceOperationSettings;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.FilterType;
import com.azure.resourcemanager.iotoperations.models.OperationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.SourceSerializationFormat;
import com.azure.resourcemanager.iotoperations.models.TransformationSerializationFormat;
import java.util.Arrays;

/**
 * Samples for Dataflow CreateOrUpdate.
 */
public final class DataflowCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2024-09-15-preview/Dataflow_CreateOrUpdate_FilterToTopic.json
     */
    /**
     * Sample code: Dataflow_CreateOrUpdate_FilterToTopic.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void
        dataflowCreateOrUpdateFilterToTopic(com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.dataflows()
            .define("mqtt-filter-to-topic")
            .withExistingDataflowProfile("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(
                new DataflowProperties().withMode(OperationalMode.ENABLED)
                    .withOperations(
                        Arrays.asList(
                            new DataflowOperation().withOperationType(OperationType.SOURCE)
                                .withName("source1")
                                .withSourceSettings(new DataflowSourceOperationSettings()
                                    .withEndpointRef("aio-builtin-broker-endpoint")
                                    .withDataSources(Arrays.asList("azure-iot-operations/data/thermostat"))),
                            new DataflowOperation().withOperationType(OperationType.BUILT_IN_TRANSFORMATION)
                                .withName("transformation1")
                                .withBuiltInTransformationSettings(new DataflowBuiltInTransformationSettings()
                                    .withFilter(Arrays
                                        .asList(new DataflowBuiltInTransformationFilter().withType(FilterType.FILTER)
                                            .withDescription("filter-datapoint")
                                            .withInputs(Arrays.asList("temperature.Value", "\"Tag 10\".Value"))
                                            .withExpression("$1 > 9000 && $2 >= 8000")))
                                    .withMap(Arrays.asList(new DataflowBuiltInTransformationMap()
                                        .withType(DataflowMappingType.PASS_THROUGH)
                                        .withInputs(Arrays.asList("*"))
                                        .withOutput("*")))),
                            new DataflowOperation().withOperationType(OperationType.DESTINATION)
                                .withName("destination1")
                                .withDestinationSettings(new DataflowDestinationOperationSettings()
                                    .withEndpointRef("aio-builtin-broker-endpoint")
                                    .withDataDestination("data/filtered/thermostat")))))
            .create();
    }

    /*
     * x-ms-original-file: 2024-09-15-preview/Dataflow_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Dataflow_CreateOrUpdate.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void dataflowCreateOrUpdate(com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.dataflows()
            .define("resource-name123")
            .withExistingDataflowProfile("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(
                new DataflowProperties().withMode(OperationalMode.ENABLED)
                    .withOperations(Arrays.asList(new DataflowOperation().withOperationType(OperationType.SOURCE)
                        .withName("knnafvkwoeakm")
                        .withSourceSettings(new DataflowSourceOperationSettings()
                            .withEndpointRef("iixotodhvhkkfcfyrkoveslqig")
                            .withAssetRef("zayyykwmckaocywdkohmu")
                            .withSerializationFormat(SourceSerializationFormat.JSON)
                            .withSchemaRef("pknmdzqll")
                            .withDataSources(Arrays.asList("chkkpymxhp")))
                        .withBuiltInTransformationSettings(new DataflowBuiltInTransformationSettings()
                            .withSerializationFormat(TransformationSerializationFormat.DELTA)
                            .withSchemaRef("mcdc")
                            .withDatasets(
                                Arrays.asList(new DataflowBuiltInTransformationDataset().withKey("fakeTokenPlaceholder")
                                    .withDescription("Lorem ipsum odor amet, consectetuer adipiscing elit.")
                                    .withSchemaRef("n")
                                    .withInputs(Arrays.asList("mosffpsslifkq"))
                                    .withExpression("aatbwomvflemsxialv")))
                            .withFilter(
                                Arrays.asList(new DataflowBuiltInTransformationFilter().withType(FilterType.FILTER)
                                    .withDescription("Lorem ipsum odor amet, consectetuer adipiscing elit.")
                                    .withInputs(Arrays.asList("sxmjkbntgb"))
                                    .withExpression("n")))
                            .withMap(Arrays.asList(
                                new DataflowBuiltInTransformationMap().withType(DataflowMappingType.NEW_PROPERTIES)
                                    .withDescription("Lorem ipsum odor amet, consectetuer adipiscing elit.")
                                    .withInputs(Arrays.asList("xsbxuk"))
                                    .withExpression("txoiltogsarwkzalsphvlmt")
                                    .withOutput("nvgtmkfl"))))
                        .withDestinationSettings(
                            new DataflowDestinationOperationSettings().withEndpointRef("kybkchnzimerguekuvqlqiqdvvrt")
                                .withDataDestination("cbrh")))))
            .create();
    }

    /*
     * x-ms-original-file: 2024-09-15-preview/Dataflow_CreateOrUpdate_ComplexContextualization.json
     */
    /**
     * Sample code: Dataflow_CreateOrUpdate_ComplexContextualization.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void dataflowCreateOrUpdateComplexContextualization(
        com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.dataflows()
            .define("aio-to-adx-contexualized")
            .withExistingDataflowProfile("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(
                new DataflowProperties().withMode(OperationalMode.ENABLED)
                    .withOperations(Arrays.asList(
                        new DataflowOperation().withOperationType(OperationType.SOURCE)
                            .withName("source1")
                            .withSourceSettings(new DataflowSourceOperationSettings()
                                .withEndpointRef("aio-builtin-broker-endpoint")
                                .withDataSources(Arrays.asList("azure-iot-operations/data/thermostat"))),
                        new DataflowOperation().withOperationType(OperationType.BUILT_IN_TRANSFORMATION)
                            .withName("transformation1")
                            .withBuiltInTransformationSettings(new DataflowBuiltInTransformationSettings()
                                .withDatasets(Arrays
                                    .asList(new DataflowBuiltInTransformationDataset().withKey("fakeTokenPlaceholder")
                                        .withInputs(Arrays.asList("$source.country", "$context.country"))
                                        .withExpression("$1 == $2")))
                                .withMap(Arrays.asList(
                                    new DataflowBuiltInTransformationMap().withInputs(Arrays.asList("*"))
                                        .withOutput("*"),
                                    new DataflowBuiltInTransformationMap()
                                        .withInputs(Arrays.asList("$context(quality).*"))
                                        .withOutput("enriched.*")))),
                        new DataflowOperation().withOperationType(OperationType.DESTINATION)
                            .withName("destination1")
                            .withDestinationSettings(
                                new DataflowDestinationOperationSettings().withEndpointRef("adx-endpoint")
                                    .withDataDestination("mytable")))))
            .create();
    }

    /*
     * x-ms-original-file: 2024-09-15-preview/Dataflow_CreateOrUpdate_ComplexEventHub.json
     */
    /**
     * Sample code: Dataflow_CreateOrUpdate_ComplexEventHub.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void
        dataflowCreateOrUpdateComplexEventHub(com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.dataflows()
            .define("aio-to-event-hub-transformed")
            .withExistingDataflowProfile("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(
                new DataflowProperties().withMode(OperationalMode.ENABLED)
                    .withOperations(
                        Arrays
                            .asList(
                                new DataflowOperation().withOperationType(OperationType.SOURCE)
                                    .withName("source1")
                                    .withSourceSettings(new DataflowSourceOperationSettings()
                                        .withEndpointRef("aio-builtin-broker-endpoint")
                                        .withDataSources(Arrays.asList("azure-iot-operations/data/thermostat"))),
                                new DataflowOperation().withOperationType(OperationType.BUILT_IN_TRANSFORMATION)
                                    .withBuiltInTransformationSettings(new DataflowBuiltInTransformationSettings()
                                        .withFilter(Arrays.asList(new DataflowBuiltInTransformationFilter()
                                            .withInputs(Arrays.asList("temperature.Value", "\"Tag 10\".Value"))
                                            .withExpression("$1 > 9000 && $2 >= 8000")))
                                        .withMap(Arrays.asList(
                                            new DataflowBuiltInTransformationMap().withInputs(Arrays.asList("*"))
                                                .withOutput("*"),
                                            new DataflowBuiltInTransformationMap()
                                                .withInputs(Arrays.asList("temperature.Value", "\"Tag 10\".Value"))
                                                .withExpression("($1+$2)/2")
                                                .withOutput("AvgTemp.Value"),
                                            new DataflowBuiltInTransformationMap().withInputs(Arrays.asList())
                                                .withExpression("true")
                                                .withOutput("dataflow-processed"),
                                            new DataflowBuiltInTransformationMap()
                                                .withInputs(Arrays.asList("temperature.SourceTimestamp"))
                                                .withExpression("")
                                                .withOutput(""),
                                            new DataflowBuiltInTransformationMap()
                                                .withInputs(Arrays.asList("\"Tag 10\""))
                                                .withExpression("")
                                                .withOutput("pressure"),
                                            new DataflowBuiltInTransformationMap()
                                                .withInputs(Arrays.asList("temperature.Value"))
                                                .withExpression("cToF($1)")
                                                .withOutput("temperatureF.Value"),
                                            new DataflowBuiltInTransformationMap()
                                                .withInputs(Arrays.asList("\"Tag 10\".Value"))
                                                .withExpression("scale ($1,0,10,0,100)")
                                                .withOutput("\"Scale Tag 10\".Value")))),
                                new DataflowOperation().withOperationType(OperationType.DESTINATION)
                                    .withName("destination1")
                                    .withDestinationSettings(
                                        new DataflowDestinationOperationSettings().withEndpointRef("event-hub-endpoint")
                                            .withDataDestination("myuniqueeventhub")))))
            .create();
    }

    /*
     * x-ms-original-file: 2024-09-15-preview/Dataflow_CreateOrUpdate_SimpleFabric.json
     */
    /**
     * Sample code: Dataflow_CreateOrUpdate_SimpleFabric.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void
        dataflowCreateOrUpdateSimpleFabric(com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.dataflows()
            .define("aio-to-fabric")
            .withExistingDataflowProfile("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(
                new DataflowProperties().withMode(OperationalMode.ENABLED)
                    .withOperations(
                        Arrays
                            .asList(
                                new DataflowOperation().withOperationType(OperationType.SOURCE)
                                    .withName("source1")
                                    .withSourceSettings(new DataflowSourceOperationSettings()
                                        .withEndpointRef("aio-builtin-broker-endpoint")
                                        .withDataSources(Arrays.asList("azure-iot-operations/data/thermostat"))),
                                new DataflowOperation().withOperationType(OperationType.BUILT_IN_TRANSFORMATION)
                                    .withBuiltInTransformationSettings(new DataflowBuiltInTransformationSettings()
                                        .withSerializationFormat(TransformationSerializationFormat.PARQUET)
                                        .withSchemaRef("aio-sr://exampleNamespace/exmapleParquetSchema:1.0.0")),
                                new DataflowOperation().withOperationType(OperationType.DESTINATION)
                                    .withName("destination1")
                                    .withDestinationSettings(
                                        new DataflowDestinationOperationSettings().withEndpointRef("fabric-endpoint")
                                            .withDataDestination("telemetryTable")))))
            .create();
    }

    /*
     * x-ms-original-file: 2024-09-15-preview/Dataflow_CreateOrUpdate_SimpleEventGrid.json
     */
    /**
     * Sample code: Dataflow_CreateOrUpdate_SimpleEventGrid.
     * 
     * @param manager Entry point to IoTOperationsManager.
     */
    public static void
        dataflowCreateOrUpdateSimpleEventGrid(com.azure.resourcemanager.iotoperations.IoTOperationsManager manager) {
        manager.dataflows()
            .define("aio-to-event-grid")
            .withExistingDataflowProfile("rgiotoperations", "resource-name123", "resource-name123")
            .withExtendedLocation(
                new ExtendedLocation().withName("qmbrfwcpwwhggszhrdjv").withType(ExtendedLocationType.CUSTOM_LOCATION))
            .withProperties(new DataflowProperties().withMode(OperationalMode.ENABLED)
                .withOperations(Arrays.asList(
                    new DataflowOperation().withOperationType(OperationType.SOURCE)
                        .withName("source1")
                        .withSourceSettings(
                            new DataflowSourceOperationSettings().withEndpointRef("aio-builtin-broker-endpoint")
                                .withDataSources(Arrays.asList("thermostats/+/telemetry/temperature/#"))),
                    new DataflowOperation().withOperationType(OperationType.DESTINATION)
                        .withName("destination1")
                        .withDestinationSettings(
                            new DataflowDestinationOperationSettings().withEndpointRef("event-grid-endpoint")
                                .withDataDestination("factory/telemetry")))))
            .create();
    }
}
