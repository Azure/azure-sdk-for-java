// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateHelmDeleteConfiguration properties.
 */
@Fluent
public final class AkriConnectorTemplateHelmDeleteConfiguration
    implements JsonSerializable<AkriConnectorTemplateHelmDeleteConfiguration> {
    /*
     * Time to wait for any individual Kubernetes operation (like `Jobs` for hooks).
     */
    private Integer timeout;

    /*
     * If set, the operation will wait for jobs to complete before marking the release as successful.
     */
    private Boolean waitForJobs;

    /*
     * If set, the operation will be atomic. If the operation fails, all changes will be rolled back.
     */
    private Boolean atomic;

    /*
     * Disable pre/post upgrade hooks for the operation.
     */
    private Boolean disableHooks;

    /*
     * If set, the operation will wait until all Pods, PVCs, Services, and minimum number of Pods of a `Deployment`,
     * `StatefulSet`, or `ReplicaSet` are in a ready state before marking the release as successful.
     */
    private Boolean waitForResources;

    /**
     * Creates an instance of AkriConnectorTemplateHelmDeleteConfiguration class.
     */
    public AkriConnectorTemplateHelmDeleteConfiguration() {
    }

    /**
     * Get the timeout property: Time to wait for any individual Kubernetes operation (like `Jobs` for hooks).
     * 
     * @return the timeout value.
     */
    public Integer timeout() {
        return this.timeout;
    }

    /**
     * Set the timeout property: Time to wait for any individual Kubernetes operation (like `Jobs` for hooks).
     * 
     * @param timeout the timeout value to set.
     * @return the AkriConnectorTemplateHelmDeleteConfiguration object itself.
     */
    public AkriConnectorTemplateHelmDeleteConfiguration withTimeout(Integer timeout) {
        this.timeout = timeout;
        return this;
    }

    /**
     * Get the waitForJobs property: If set, the operation will wait for jobs to complete before marking the release as
     * successful.
     * 
     * @return the waitForJobs value.
     */
    public Boolean waitForJobs() {
        return this.waitForJobs;
    }

    /**
     * Set the waitForJobs property: If set, the operation will wait for jobs to complete before marking the release as
     * successful.
     * 
     * @param waitForJobs the waitForJobs value to set.
     * @return the AkriConnectorTemplateHelmDeleteConfiguration object itself.
     */
    public AkriConnectorTemplateHelmDeleteConfiguration withWaitForJobs(Boolean waitForJobs) {
        this.waitForJobs = waitForJobs;
        return this;
    }

    /**
     * Get the atomic property: If set, the operation will be atomic. If the operation fails, all changes will be rolled
     * back.
     * 
     * @return the atomic value.
     */
    public Boolean atomic() {
        return this.atomic;
    }

    /**
     * Set the atomic property: If set, the operation will be atomic. If the operation fails, all changes will be rolled
     * back.
     * 
     * @param atomic the atomic value to set.
     * @return the AkriConnectorTemplateHelmDeleteConfiguration object itself.
     */
    public AkriConnectorTemplateHelmDeleteConfiguration withAtomic(Boolean atomic) {
        this.atomic = atomic;
        return this;
    }

    /**
     * Get the disableHooks property: Disable pre/post upgrade hooks for the operation.
     * 
     * @return the disableHooks value.
     */
    public Boolean disableHooks() {
        return this.disableHooks;
    }

    /**
     * Set the disableHooks property: Disable pre/post upgrade hooks for the operation.
     * 
     * @param disableHooks the disableHooks value to set.
     * @return the AkriConnectorTemplateHelmDeleteConfiguration object itself.
     */
    public AkriConnectorTemplateHelmDeleteConfiguration withDisableHooks(Boolean disableHooks) {
        this.disableHooks = disableHooks;
        return this;
    }

    /**
     * Get the waitForResources property: If set, the operation will wait until all Pods, PVCs, Services, and minimum
     * number of Pods of a `Deployment`, `StatefulSet`, or `ReplicaSet` are in a ready state before marking the release
     * as successful.
     * 
     * @return the waitForResources value.
     */
    public Boolean waitForResources() {
        return this.waitForResources;
    }

    /**
     * Set the waitForResources property: If set, the operation will wait until all Pods, PVCs, Services, and minimum
     * number of Pods of a `Deployment`, `StatefulSet`, or `ReplicaSet` are in a ready state before marking the release
     * as successful.
     * 
     * @param waitForResources the waitForResources value to set.
     * @return the AkriConnectorTemplateHelmDeleteConfiguration object itself.
     */
    public AkriConnectorTemplateHelmDeleteConfiguration withWaitForResources(Boolean waitForResources) {
        this.waitForResources = waitForResources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("timeout", this.timeout);
        jsonWriter.writeBooleanField("waitForJobs", this.waitForJobs);
        jsonWriter.writeBooleanField("atomic", this.atomic);
        jsonWriter.writeBooleanField("disableHooks", this.disableHooks);
        jsonWriter.writeBooleanField("wait", this.waitForResources);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateHelmDeleteConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateHelmDeleteConfiguration if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateHelmDeleteConfiguration.
     */
    public static AkriConnectorTemplateHelmDeleteConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateHelmDeleteConfiguration deserializedAkriConnectorTemplateHelmDeleteConfiguration
                = new AkriConnectorTemplateHelmDeleteConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timeout".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmDeleteConfiguration.timeout
                        = reader.getNullable(JsonReader::getInt);
                } else if ("waitForJobs".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmDeleteConfiguration.waitForJobs
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("atomic".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmDeleteConfiguration.atomic
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("disableHooks".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmDeleteConfiguration.disableHooks
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("wait".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmDeleteConfiguration.waitForResources
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateHelmDeleteConfiguration;
        });
    }
}
