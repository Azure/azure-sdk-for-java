// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * BrokerAuthenticatorMethodX509Attributes properties.
 */
@Fluent
public final class BrokerAuthenticatorMethodX509Attributes
    implements JsonSerializable<BrokerAuthenticatorMethodX509Attributes> {
    /*
     * Attributes object.
     */
    private Map<String, String> attributes;

    /*
     * Subject of the X509 attribute.
     */
    private String subject;

    /**
     * Creates an instance of BrokerAuthenticatorMethodX509Attributes class.
     */
    public BrokerAuthenticatorMethodX509Attributes() {
    }

    /**
     * Get the attributes property: Attributes object.
     * 
     * @return the attributes value.
     */
    public Map<String, String> attributes() {
        return this.attributes;
    }

    /**
     * Set the attributes property: Attributes object.
     * 
     * @param attributes the attributes value to set.
     * @return the BrokerAuthenticatorMethodX509Attributes object itself.
     */
    public BrokerAuthenticatorMethodX509Attributes withAttributes(Map<String, String> attributes) {
        this.attributes = attributes;
        return this;
    }

    /**
     * Get the subject property: Subject of the X509 attribute.
     * 
     * @return the subject value.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Set the subject property: Subject of the X509 attribute.
     * 
     * @param subject the subject value to set.
     * @return the BrokerAuthenticatorMethodX509Attributes object itself.
     */
    public BrokerAuthenticatorMethodX509Attributes withSubject(String subject) {
        this.subject = subject;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (attributes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property attributes in model BrokerAuthenticatorMethodX509Attributes"));
        }
        if (subject() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subject in model BrokerAuthenticatorMethodX509Attributes"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrokerAuthenticatorMethodX509Attributes.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("subject", this.subject);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerAuthenticatorMethodX509Attributes from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerAuthenticatorMethodX509Attributes if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerAuthenticatorMethodX509Attributes.
     */
    public static BrokerAuthenticatorMethodX509Attributes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerAuthenticatorMethodX509Attributes deserializedBrokerAuthenticatorMethodX509Attributes
                = new BrokerAuthenticatorMethodX509Attributes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attributes".equals(fieldName)) {
                    Map<String, String> attributes = reader.readMap(reader1 -> reader1.getString());
                    deserializedBrokerAuthenticatorMethodX509Attributes.attributes = attributes;
                } else if ("subject".equals(fieldName)) {
                    deserializedBrokerAuthenticatorMethodX509Attributes.subject = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerAuthenticatorMethodX509Attributes;
        });
    }
}
