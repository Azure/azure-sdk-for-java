// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Custom Broker Retain Message Policy.
 */
@Fluent
public final class BrokerRetainMessagesCustomPolicy extends BrokerRetainMessagesPolicy {
    /*
     * 'All' to persist all retain messages, 'None' to not persist any, 'Custom' to persist only the specified topics.
     */
    private BrokerPersistencePolicyMode mode = BrokerPersistencePolicyMode.CUSTOM;

    /*
     * Settings for the policy.
     */
    private BrokerRetainMessagesSettings retainSettings;

    /**
     * Creates an instance of BrokerRetainMessagesCustomPolicy class.
     */
    public BrokerRetainMessagesCustomPolicy() {
    }

    /**
     * Get the mode property: 'All' to persist all retain messages, 'None' to not persist any, 'Custom' to persist only
     * the specified topics.
     * 
     * @return the mode value.
     */
    @Override
    public BrokerPersistencePolicyMode mode() {
        return this.mode;
    }

    /**
     * Get the retainSettings property: Settings for the policy.
     * 
     * @return the retainSettings value.
     */
    public BrokerRetainMessagesSettings retainSettings() {
        return this.retainSettings;
    }

    /**
     * Set the retainSettings property: Settings for the policy.
     * 
     * @param retainSettings the retainSettings value to set.
     * @return the BrokerRetainMessagesCustomPolicy object itself.
     */
    public BrokerRetainMessagesCustomPolicy withRetainSettings(BrokerRetainMessagesSettings retainSettings) {
        this.retainSettings = retainSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("retainSettings", this.retainSettings);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerRetainMessagesCustomPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerRetainMessagesCustomPolicy if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerRetainMessagesCustomPolicy.
     */
    public static BrokerRetainMessagesCustomPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerRetainMessagesCustomPolicy deserializedBrokerRetainMessagesCustomPolicy
                = new BrokerRetainMessagesCustomPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retainSettings".equals(fieldName)) {
                    deserializedBrokerRetainMessagesCustomPolicy.retainSettings
                        = BrokerRetainMessagesSettings.fromJson(reader);
                } else if ("mode".equals(fieldName)) {
                    deserializedBrokerRetainMessagesCustomPolicy.mode
                        = BrokerPersistencePolicyMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerRetainMessagesCustomPolicy;
        });
    }
}
