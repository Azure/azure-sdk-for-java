// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowEndpoint Resource properties. NOTE - Only one type of endpoint is supported for one Resource.
 */
@Fluent
public final class DataflowEndpointProperties implements JsonSerializable<DataflowEndpointProperties> {
    /*
     * Endpoint Type.
     */
    @Generated
    private EndpointType endpointType;

    /*
     * Azure Data Explorer endpoint.
     */
    @Generated
    private DataflowEndpointDataExplorer dataExplorerSettings;

    /*
     * Azure Data Lake endpoint.
     */
    @Generated
    private DataflowEndpointDataLakeStorage dataLakeStorageSettings;

    /*
     * Microsoft Fabric endpoint.
     */
    @Generated
    private DataflowEndpointFabricOneLake fabricOneLakeSettings;

    /*
     * Kafka endpoint.
     */
    @Generated
    private DataflowEndpointKafka kafkaSettings;

    /*
     * Local persistent volume endpoint.
     */
    @Generated
    private DataflowEndpointLocalStorage localStorageSettings;

    /*
     * Broker endpoint.
     */
    @Generated
    private DataflowEndpointMqtt mqttSettings;

    /*
     * The status of the last operation.
     */
    @Generated
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DataflowEndpointProperties class.
     */
    @Generated
    public DataflowEndpointProperties() {
    }

    /**
     * Get the endpointType property: Endpoint Type.
     * 
     * @return the endpointType value.
     */
    @Generated
    public EndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Set the endpointType property: Endpoint Type.
     * 
     * @param endpointType the endpointType value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties withEndpointType(EndpointType endpointType) {
        this.endpointType = endpointType;
        return this;
    }

    /**
     * Get the dataExplorerSettings property: Azure Data Explorer endpoint.
     * 
     * @return the dataExplorerSettings value.
     */
    @Generated
    public DataflowEndpointDataExplorer dataExplorerSettings() {
        return this.dataExplorerSettings;
    }

    /**
     * Set the dataExplorerSettings property: Azure Data Explorer endpoint.
     * 
     * @param dataExplorerSettings the dataExplorerSettings value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties withDataExplorerSettings(DataflowEndpointDataExplorer dataExplorerSettings) {
        this.dataExplorerSettings = dataExplorerSettings;
        return this;
    }

    /**
     * Get the dataLakeStorageSettings property: Azure Data Lake endpoint.
     * 
     * @return the dataLakeStorageSettings value.
     */
    @Generated
    public DataflowEndpointDataLakeStorage dataLakeStorageSettings() {
        return this.dataLakeStorageSettings;
    }

    /**
     * Set the dataLakeStorageSettings property: Azure Data Lake endpoint.
     * 
     * @param dataLakeStorageSettings the dataLakeStorageSettings value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties
        withDataLakeStorageSettings(DataflowEndpointDataLakeStorage dataLakeStorageSettings) {
        this.dataLakeStorageSettings = dataLakeStorageSettings;
        return this;
    }

    /**
     * Get the fabricOneLakeSettings property: Microsoft Fabric endpoint.
     * 
     * @return the fabricOneLakeSettings value.
     */
    @Generated
    public DataflowEndpointFabricOneLake fabricOneLakeSettings() {
        return this.fabricOneLakeSettings;
    }

    /**
     * Set the fabricOneLakeSettings property: Microsoft Fabric endpoint.
     * 
     * @param fabricOneLakeSettings the fabricOneLakeSettings value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties withFabricOneLakeSettings(DataflowEndpointFabricOneLake fabricOneLakeSettings) {
        this.fabricOneLakeSettings = fabricOneLakeSettings;
        return this;
    }

    /**
     * Get the kafkaSettings property: Kafka endpoint.
     * 
     * @return the kafkaSettings value.
     */
    @Generated
    public DataflowEndpointKafka kafkaSettings() {
        return this.kafkaSettings;
    }

    /**
     * Set the kafkaSettings property: Kafka endpoint.
     * 
     * @param kafkaSettings the kafkaSettings value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties withKafkaSettings(DataflowEndpointKafka kafkaSettings) {
        this.kafkaSettings = kafkaSettings;
        return this;
    }

    /**
     * Get the localStorageSettings property: Local persistent volume endpoint.
     * 
     * @return the localStorageSettings value.
     */
    @Generated
    public DataflowEndpointLocalStorage localStorageSettings() {
        return this.localStorageSettings;
    }

    /**
     * Set the localStorageSettings property: Local persistent volume endpoint.
     * 
     * @param localStorageSettings the localStorageSettings value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties withLocalStorageSettings(DataflowEndpointLocalStorage localStorageSettings) {
        this.localStorageSettings = localStorageSettings;
        return this;
    }

    /**
     * Get the mqttSettings property: Broker endpoint.
     * 
     * @return the mqttSettings value.
     */
    @Generated
    public DataflowEndpointMqtt mqttSettings() {
        return this.mqttSettings;
    }

    /**
     * Set the mqttSettings property: Broker endpoint.
     * 
     * @param mqttSettings the mqttSettings value to set.
     * @return the DataflowEndpointProperties object itself.
     */
    @Generated
    public DataflowEndpointProperties withMqttSettings(DataflowEndpointMqtt mqttSettings) {
        this.mqttSettings = mqttSettings;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointType in model DataflowEndpointProperties"));
        }
        if (dataExplorerSettings() != null) {
            dataExplorerSettings().validate();
        }
        if (dataLakeStorageSettings() != null) {
            dataLakeStorageSettings().validate();
        }
        if (fabricOneLakeSettings() != null) {
            fabricOneLakeSettings().validate();
        }
        if (kafkaSettings() != null) {
            kafkaSettings().validate();
        }
        if (localStorageSettings() != null) {
            localStorageSettings().validate();
        }
        if (mqttSettings() != null) {
            mqttSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeJsonField("dataExplorerSettings", this.dataExplorerSettings);
        jsonWriter.writeJsonField("dataLakeStorageSettings", this.dataLakeStorageSettings);
        jsonWriter.writeJsonField("fabricOneLakeSettings", this.fabricOneLakeSettings);
        jsonWriter.writeJsonField("kafkaSettings", this.kafkaSettings);
        jsonWriter.writeJsonField("localStorageSettings", this.localStorageSettings);
        jsonWriter.writeJsonField("mqttSettings", this.mqttSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowEndpointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowEndpointProperties.
     */
    public static DataflowEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowEndpointProperties deserializedDataflowEndpointProperties = new DataflowEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointType".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.endpointType = EndpointType.fromString(reader.getString());
                } else if ("dataExplorerSettings".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.dataExplorerSettings
                        = DataflowEndpointDataExplorer.fromJson(reader);
                } else if ("dataLakeStorageSettings".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.dataLakeStorageSettings
                        = DataflowEndpointDataLakeStorage.fromJson(reader);
                } else if ("fabricOneLakeSettings".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.fabricOneLakeSettings
                        = DataflowEndpointFabricOneLake.fromJson(reader);
                } else if ("kafkaSettings".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.kafkaSettings = DataflowEndpointKafka.fromJson(reader);
                } else if ("localStorageSettings".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.localStorageSettings
                        = DataflowEndpointLocalStorage.fromJson(reader);
                } else if ("mqttSettings".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.mqttSettings = DataflowEndpointMqtt.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataflowEndpointProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowEndpointProperties;
        });
    }
}
