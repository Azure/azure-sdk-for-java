// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowGraph destination node settings.
 */
@Fluent
public final class DataflowGraphDestinationNodeSettings
    implements JsonSerializable<DataflowGraphDestinationNodeSettings> {
    /*
     * The name of the DataflowEndpoint resource .
     */
    private String endpointRef;

    /*
     * Data destination at the endpoint.
     */
    private String dataDestination;

    /*
     * Output schema settings.
     */
    private DataflowGraphDestinationSchemaSettings outputSchemaSettings;

    /**
     * Creates an instance of DataflowGraphDestinationNodeSettings class.
     */
    public DataflowGraphDestinationNodeSettings() {
    }

    /**
     * Get the endpointRef property: The name of the DataflowEndpoint resource .
     * 
     * @return the endpointRef value.
     */
    public String endpointRef() {
        return this.endpointRef;
    }

    /**
     * Set the endpointRef property: The name of the DataflowEndpoint resource .
     * 
     * @param endpointRef the endpointRef value to set.
     * @return the DataflowGraphDestinationNodeSettings object itself.
     */
    public DataflowGraphDestinationNodeSettings withEndpointRef(String endpointRef) {
        this.endpointRef = endpointRef;
        return this;
    }

    /**
     * Get the dataDestination property: Data destination at the endpoint.
     * 
     * @return the dataDestination value.
     */
    public String dataDestination() {
        return this.dataDestination;
    }

    /**
     * Set the dataDestination property: Data destination at the endpoint.
     * 
     * @param dataDestination the dataDestination value to set.
     * @return the DataflowGraphDestinationNodeSettings object itself.
     */
    public DataflowGraphDestinationNodeSettings withDataDestination(String dataDestination) {
        this.dataDestination = dataDestination;
        return this;
    }

    /**
     * Get the outputSchemaSettings property: Output schema settings.
     * 
     * @return the outputSchemaSettings value.
     */
    public DataflowGraphDestinationSchemaSettings outputSchemaSettings() {
        return this.outputSchemaSettings;
    }

    /**
     * Set the outputSchemaSettings property: Output schema settings.
     * 
     * @param outputSchemaSettings the outputSchemaSettings value to set.
     * @return the DataflowGraphDestinationNodeSettings object itself.
     */
    public DataflowGraphDestinationNodeSettings
        withOutputSchemaSettings(DataflowGraphDestinationSchemaSettings outputSchemaSettings) {
        this.outputSchemaSettings = outputSchemaSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointRef", this.endpointRef);
        jsonWriter.writeStringField("dataDestination", this.dataDestination);
        jsonWriter.writeJsonField("outputSchemaSettings", this.outputSchemaSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphDestinationNodeSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphDestinationNodeSettings if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphDestinationNodeSettings.
     */
    public static DataflowGraphDestinationNodeSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphDestinationNodeSettings deserializedDataflowGraphDestinationNodeSettings
                = new DataflowGraphDestinationNodeSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointRef".equals(fieldName)) {
                    deserializedDataflowGraphDestinationNodeSettings.endpointRef = reader.getString();
                } else if ("dataDestination".equals(fieldName)) {
                    deserializedDataflowGraphDestinationNodeSettings.dataDestination = reader.getString();
                } else if ("outputSchemaSettings".equals(fieldName)) {
                    deserializedDataflowGraphDestinationNodeSettings.outputSchemaSettings
                        = DataflowGraphDestinationSchemaSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphDestinationNodeSettings;
        });
    }
}
