// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported.
 */
@Fluent
public final class TlsCertMethod implements JsonSerializable<TlsCertMethod> {
    /*
     * Mode of TLS server certificate management.
     */
    private TlsCertMethodMode mode;

    /*
     * Option 1 - Automatic TLS server certificate management with cert-manager.
     */
    private CertManagerCertificateSpec certManagerCertificateSpec;

    /*
     * Option 2 - Manual TLS server certificate management through a defined secret.
     */
    private X509ManualCertificate manual;

    /**
     * Creates an instance of TlsCertMethod class.
     */
    public TlsCertMethod() {
    }

    /**
     * Get the mode property: Mode of TLS server certificate management.
     * 
     * @return the mode value.
     */
    public TlsCertMethodMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: Mode of TLS server certificate management.
     * 
     * @param mode the mode value to set.
     * @return the TlsCertMethod object itself.
     */
    public TlsCertMethod withMode(TlsCertMethodMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the certManagerCertificateSpec property: Option 1 - Automatic TLS server certificate management with
     * cert-manager.
     * 
     * @return the certManagerCertificateSpec value.
     */
    public CertManagerCertificateSpec certManagerCertificateSpec() {
        return this.certManagerCertificateSpec;
    }

    /**
     * Set the certManagerCertificateSpec property: Option 1 - Automatic TLS server certificate management with
     * cert-manager.
     * 
     * @param certManagerCertificateSpec the certManagerCertificateSpec value to set.
     * @return the TlsCertMethod object itself.
     */
    public TlsCertMethod withCertManagerCertificateSpec(CertManagerCertificateSpec certManagerCertificateSpec) {
        this.certManagerCertificateSpec = certManagerCertificateSpec;
        return this;
    }

    /**
     * Get the manual property: Option 2 - Manual TLS server certificate management through a defined secret.
     * 
     * @return the manual value.
     */
    public X509ManualCertificate manual() {
        return this.manual;
    }

    /**
     * Set the manual property: Option 2 - Manual TLS server certificate management through a defined secret.
     * 
     * @param manual the manual value to set.
     * @return the TlsCertMethod object itself.
     */
    public TlsCertMethod withManual(X509ManualCertificate manual) {
        this.manual = manual;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (mode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property mode in model TlsCertMethod"));
        }
        if (certManagerCertificateSpec() != null) {
            certManagerCertificateSpec().validate();
        }
        if (manual() != null) {
            manual().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(TlsCertMethod.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeJsonField("certManagerCertificateSpec", this.certManagerCertificateSpec);
        jsonWriter.writeJsonField("manual", this.manual);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TlsCertMethod from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TlsCertMethod if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the TlsCertMethod.
     */
    public static TlsCertMethod fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TlsCertMethod deserializedTlsCertMethod = new TlsCertMethod();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedTlsCertMethod.mode = TlsCertMethodMode.fromString(reader.getString());
                } else if ("certManagerCertificateSpec".equals(fieldName)) {
                    deserializedTlsCertMethod.certManagerCertificateSpec = CertManagerCertificateSpec.fromJson(reader);
                } else if ("manual".equals(fieldName)) {
                    deserializedTlsCertMethod.manual = X509ManualCertificate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTlsCertMethod;
        });
    }
}
