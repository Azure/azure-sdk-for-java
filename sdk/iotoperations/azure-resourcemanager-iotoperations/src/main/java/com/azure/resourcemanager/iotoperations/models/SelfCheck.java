// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker Diagnostic Self check properties.
 */
@Fluent
public final class SelfCheck implements JsonSerializable<SelfCheck> {
    /*
     * The toggle to enable/disable self check.
     */
    private OperationalMode mode;

    /*
     * The self check interval.
     */
    private Integer intervalSeconds;

    /*
     * The timeout for self check.
     */
    private Integer timeoutSeconds;

    /**
     * Creates an instance of SelfCheck class.
     */
    public SelfCheck() {
    }

    /**
     * Get the mode property: The toggle to enable/disable self check.
     * 
     * @return the mode value.
     */
    public OperationalMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The toggle to enable/disable self check.
     * 
     * @param mode the mode value to set.
     * @return the SelfCheck object itself.
     */
    public SelfCheck withMode(OperationalMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the intervalSeconds property: The self check interval.
     * 
     * @return the intervalSeconds value.
     */
    public Integer intervalSeconds() {
        return this.intervalSeconds;
    }

    /**
     * Set the intervalSeconds property: The self check interval.
     * 
     * @param intervalSeconds the intervalSeconds value to set.
     * @return the SelfCheck object itself.
     */
    public SelfCheck withIntervalSeconds(Integer intervalSeconds) {
        this.intervalSeconds = intervalSeconds;
        return this;
    }

    /**
     * Get the timeoutSeconds property: The timeout for self check.
     * 
     * @return the timeoutSeconds value.
     */
    public Integer timeoutSeconds() {
        return this.timeoutSeconds;
    }

    /**
     * Set the timeoutSeconds property: The timeout for self check.
     * 
     * @param timeoutSeconds the timeoutSeconds value to set.
     * @return the SelfCheck object itself.
     */
    public SelfCheck withTimeoutSeconds(Integer timeoutSeconds) {
        this.timeoutSeconds = timeoutSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeNumberField("intervalSeconds", this.intervalSeconds);
        jsonWriter.writeNumberField("timeoutSeconds", this.timeoutSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SelfCheck from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SelfCheck if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the SelfCheck.
     */
    public static SelfCheck fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SelfCheck deserializedSelfCheck = new SelfCheck();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedSelfCheck.mode = OperationalMode.fromString(reader.getString());
                } else if ("intervalSeconds".equals(fieldName)) {
                    deserializedSelfCheck.intervalSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("timeoutSeconds".equals(fieldName)) {
                    deserializedSelfCheck.timeoutSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSelfCheck;
        });
    }
}
