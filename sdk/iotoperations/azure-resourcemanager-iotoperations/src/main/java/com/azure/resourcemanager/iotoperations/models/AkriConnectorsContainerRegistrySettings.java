// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AkriConnectorsContainerRegistry properties.
 */
@Fluent
public final class AkriConnectorsContainerRegistrySettings
    implements JsonSerializable<AkriConnectorsContainerRegistrySettings> {
    /*
     * The container registry to use for the artifact.
     */
    private String registry;

    /*
     * Optional list of references to secrets in the same namespace to use for pulling the connector image.
     */
    private List<AkriConnectorsImagePullSecret> imagePullSecrets;

    /**
     * Creates an instance of AkriConnectorsContainerRegistrySettings class.
     */
    public AkriConnectorsContainerRegistrySettings() {
    }

    /**
     * Get the registry property: The container registry to use for the artifact.
     * 
     * @return the registry value.
     */
    public String registry() {
        return this.registry;
    }

    /**
     * Set the registry property: The container registry to use for the artifact.
     * 
     * @param registry the registry value to set.
     * @return the AkriConnectorsContainerRegistrySettings object itself.
     */
    public AkriConnectorsContainerRegistrySettings withRegistry(String registry) {
        this.registry = registry;
        return this;
    }

    /**
     * Get the imagePullSecrets property: Optional list of references to secrets in the same namespace to use for
     * pulling the connector image.
     * 
     * @return the imagePullSecrets value.
     */
    public List<AkriConnectorsImagePullSecret> imagePullSecrets() {
        return this.imagePullSecrets;
    }

    /**
     * Set the imagePullSecrets property: Optional list of references to secrets in the same namespace to use for
     * pulling the connector image.
     * 
     * @param imagePullSecrets the imagePullSecrets value to set.
     * @return the AkriConnectorsContainerRegistrySettings object itself.
     */
    public AkriConnectorsContainerRegistrySettings
        withImagePullSecrets(List<AkriConnectorsImagePullSecret> imagePullSecrets) {
        this.imagePullSecrets = imagePullSecrets;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registry() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property registry in model AkriConnectorsContainerRegistrySettings"));
        }
        if (imagePullSecrets() != null) {
            imagePullSecrets().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorsContainerRegistrySettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("registry", this.registry);
        jsonWriter.writeArrayField("imagePullSecrets", this.imagePullSecrets,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorsContainerRegistrySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorsContainerRegistrySettings if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorsContainerRegistrySettings.
     */
    public static AkriConnectorsContainerRegistrySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorsContainerRegistrySettings deserializedAkriConnectorsContainerRegistrySettings
                = new AkriConnectorsContainerRegistrySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registry".equals(fieldName)) {
                    deserializedAkriConnectorsContainerRegistrySettings.registry = reader.getString();
                } else if ("imagePullSecrets".equals(fieldName)) {
                    List<AkriConnectorsImagePullSecret> imagePullSecrets
                        = reader.readArray(reader1 -> AkriConnectorsImagePullSecret.fromJson(reader1));
                    deserializedAkriConnectorsContainerRegistrySettings.imagePullSecrets = imagePullSecrets;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorsContainerRegistrySettings;
        });
    }
}
