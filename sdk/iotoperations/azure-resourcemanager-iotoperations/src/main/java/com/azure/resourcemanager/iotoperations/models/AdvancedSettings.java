// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker Advanced Settings.
 */
@Fluent
public final class AdvancedSettings implements JsonSerializable<AdvancedSettings> {
    /*
     * Configurations related to All Clients.
     */
    private ClientConfig clients;

    /*
     * The setting to enable or disable encryption of internal Traffic.
     */
    private OperationalMode encryptInternalTraffic;

    /*
     * Certificate rotation and private key configuration.
     */
    private CertManagerCertOptions internalCerts;

    /**
     * Creates an instance of AdvancedSettings class.
     */
    public AdvancedSettings() {
    }

    /**
     * Get the clients property: Configurations related to All Clients.
     * 
     * @return the clients value.
     */
    public ClientConfig clients() {
        return this.clients;
    }

    /**
     * Set the clients property: Configurations related to All Clients.
     * 
     * @param clients the clients value to set.
     * @return the AdvancedSettings object itself.
     */
    public AdvancedSettings withClients(ClientConfig clients) {
        this.clients = clients;
        return this;
    }

    /**
     * Get the encryptInternalTraffic property: The setting to enable or disable encryption of internal Traffic.
     * 
     * @return the encryptInternalTraffic value.
     */
    public OperationalMode encryptInternalTraffic() {
        return this.encryptInternalTraffic;
    }

    /**
     * Set the encryptInternalTraffic property: The setting to enable or disable encryption of internal Traffic.
     * 
     * @param encryptInternalTraffic the encryptInternalTraffic value to set.
     * @return the AdvancedSettings object itself.
     */
    public AdvancedSettings withEncryptInternalTraffic(OperationalMode encryptInternalTraffic) {
        this.encryptInternalTraffic = encryptInternalTraffic;
        return this;
    }

    /**
     * Get the internalCerts property: Certificate rotation and private key configuration.
     * 
     * @return the internalCerts value.
     */
    public CertManagerCertOptions internalCerts() {
        return this.internalCerts;
    }

    /**
     * Set the internalCerts property: Certificate rotation and private key configuration.
     * 
     * @param internalCerts the internalCerts value to set.
     * @return the AdvancedSettings object itself.
     */
    public AdvancedSettings withInternalCerts(CertManagerCertOptions internalCerts) {
        this.internalCerts = internalCerts;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clients() != null) {
            clients().validate();
        }
        if (internalCerts() != null) {
            internalCerts().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("clients", this.clients);
        jsonWriter.writeStringField("encryptInternalTraffic",
            this.encryptInternalTraffic == null ? null : this.encryptInternalTraffic.toString());
        jsonWriter.writeJsonField("internalCerts", this.internalCerts);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AdvancedSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AdvancedSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AdvancedSettings.
     */
    public static AdvancedSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AdvancedSettings deserializedAdvancedSettings = new AdvancedSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clients".equals(fieldName)) {
                    deserializedAdvancedSettings.clients = ClientConfig.fromJson(reader);
                } else if ("encryptInternalTraffic".equals(fieldName)) {
                    deserializedAdvancedSettings.encryptInternalTraffic
                        = OperationalMode.fromString(reader.getString());
                } else if ("internalCerts".equals(fieldName)) {
                    deserializedAdvancedSettings.internalCerts = CertManagerCertOptions.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAdvancedSettings;
        });
    }
}
