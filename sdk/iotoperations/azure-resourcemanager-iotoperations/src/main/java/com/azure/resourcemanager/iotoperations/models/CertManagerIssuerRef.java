// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cert-Manager issuerRef properties.
 */
@Fluent
public final class CertManagerIssuerRef implements JsonSerializable<CertManagerIssuerRef> {
    /*
     * group of issuer.
     */
    private String group;

    /*
     * kind of issuer (Issuer or ClusterIssuer).
     */
    private CertManagerIssuerKind kind;

    /*
     * name of issuer.
     */
    private String name;

    /**
     * Creates an instance of CertManagerIssuerRef class.
     */
    public CertManagerIssuerRef() {
    }

    /**
     * Get the group property: group of issuer.
     * 
     * @return the group value.
     */
    public String group() {
        return this.group;
    }

    /**
     * Set the group property: group of issuer.
     * 
     * @param group the group value to set.
     * @return the CertManagerIssuerRef object itself.
     */
    public CertManagerIssuerRef withGroup(String group) {
        this.group = group;
        return this;
    }

    /**
     * Get the kind property: kind of issuer (Issuer or ClusterIssuer).
     * 
     * @return the kind value.
     */
    public CertManagerIssuerKind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: kind of issuer (Issuer or ClusterIssuer).
     * 
     * @param kind the kind value to set.
     * @return the CertManagerIssuerRef object itself.
     */
    public CertManagerIssuerRef withKind(CertManagerIssuerKind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the name property: name of issuer.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: name of issuer.
     * 
     * @param name the name value to set.
     * @return the CertManagerIssuerRef object itself.
     */
    public CertManagerIssuerRef withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (group() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property group in model CertManagerIssuerRef"));
        }
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model CertManagerIssuerRef"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model CertManagerIssuerRef"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertManagerIssuerRef.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("group", this.group);
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertManagerIssuerRef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertManagerIssuerRef if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertManagerIssuerRef.
     */
    public static CertManagerIssuerRef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertManagerIssuerRef deserializedCertManagerIssuerRef = new CertManagerIssuerRef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("group".equals(fieldName)) {
                    deserializedCertManagerIssuerRef.group = reader.getString();
                } else if ("kind".equals(fieldName)) {
                    deserializedCertManagerIssuerRef.kind = CertManagerIssuerKind.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedCertManagerIssuerRef.name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertManagerIssuerRef;
        });
    }
}
