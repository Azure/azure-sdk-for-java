// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowGraph connection node output schema settings.
 */
@Fluent
public final class DataflowGraphConnectionSchemaSettings
    implements JsonSerializable<DataflowGraphConnectionSchemaSettings> {
    /*
     * Output serialization format.
     */
    private DataflowGraphConnectionSchemaSerializationFormat serializationFormat;

    /*
     * Reference to the schema that describes the output of the transformation.
     */
    private String schemaRef;

    /**
     * Creates an instance of DataflowGraphConnectionSchemaSettings class.
     */
    public DataflowGraphConnectionSchemaSettings() {
    }

    /**
     * Get the serializationFormat property: Output serialization format.
     * 
     * @return the serializationFormat value.
     */
    public DataflowGraphConnectionSchemaSerializationFormat serializationFormat() {
        return this.serializationFormat;
    }

    /**
     * Set the serializationFormat property: Output serialization format.
     * 
     * @param serializationFormat the serializationFormat value to set.
     * @return the DataflowGraphConnectionSchemaSettings object itself.
     */
    public DataflowGraphConnectionSchemaSettings
        withSerializationFormat(DataflowGraphConnectionSchemaSerializationFormat serializationFormat) {
        this.serializationFormat = serializationFormat;
        return this;
    }

    /**
     * Get the schemaRef property: Reference to the schema that describes the output of the transformation.
     * 
     * @return the schemaRef value.
     */
    public String schemaRef() {
        return this.schemaRef;
    }

    /**
     * Set the schemaRef property: Reference to the schema that describes the output of the transformation.
     * 
     * @param schemaRef the schemaRef value to set.
     * @return the DataflowGraphConnectionSchemaSettings object itself.
     */
    public DataflowGraphConnectionSchemaSettings withSchemaRef(String schemaRef) {
        this.schemaRef = schemaRef;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serializationFormat",
            this.serializationFormat == null ? null : this.serializationFormat.toString());
        jsonWriter.writeStringField("schemaRef", this.schemaRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphConnectionSchemaSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphConnectionSchemaSettings if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataflowGraphConnectionSchemaSettings.
     */
    public static DataflowGraphConnectionSchemaSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphConnectionSchemaSettings deserializedDataflowGraphConnectionSchemaSettings
                = new DataflowGraphConnectionSchemaSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serializationFormat".equals(fieldName)) {
                    deserializedDataflowGraphConnectionSchemaSettings.serializationFormat
                        = DataflowGraphConnectionSchemaSerializationFormat.fromString(reader.getString());
                } else if ("schemaRef".equals(fieldName)) {
                    deserializedDataflowGraphConnectionSchemaSettings.schemaRef = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphConnectionSchemaSettings;
        });
    }
}
