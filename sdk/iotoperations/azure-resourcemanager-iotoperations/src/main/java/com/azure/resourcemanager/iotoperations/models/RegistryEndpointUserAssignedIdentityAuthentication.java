// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User assigned identity authentication.
 */
@Fluent
public final class RegistryEndpointUserAssignedIdentityAuthentication extends RegistryEndpointAuthentication {
    /*
     * The authentication method.
     */
    private RegistryEndpointAuthenticationMethod method
        = RegistryEndpointAuthenticationMethod.USER_ASSIGNED_MANAGED_IDENTITY;

    /*
     * User assigned managed identity properties
     */
    private RegistryEndpointUserAssignedManagedIdentitySettings userAssignedManagedIdentitySettings;

    /**
     * Creates an instance of RegistryEndpointUserAssignedIdentityAuthentication class.
     */
    public RegistryEndpointUserAssignedIdentityAuthentication() {
    }

    /**
     * Get the method property: The authentication method.
     * 
     * @return the method value.
     */
    @Override
    public RegistryEndpointAuthenticationMethod method() {
        return this.method;
    }

    /**
     * Get the userAssignedManagedIdentitySettings property: User assigned managed identity properties.
     * 
     * @return the userAssignedManagedIdentitySettings value.
     */
    public RegistryEndpointUserAssignedManagedIdentitySettings userAssignedManagedIdentitySettings() {
        return this.userAssignedManagedIdentitySettings;
    }

    /**
     * Set the userAssignedManagedIdentitySettings property: User assigned managed identity properties.
     * 
     * @param userAssignedManagedIdentitySettings the userAssignedManagedIdentitySettings value to set.
     * @return the RegistryEndpointUserAssignedIdentityAuthentication object itself.
     */
    public RegistryEndpointUserAssignedIdentityAuthentication withUserAssignedManagedIdentitySettings(
        RegistryEndpointUserAssignedManagedIdentitySettings userAssignedManagedIdentitySettings) {
        this.userAssignedManagedIdentitySettings = userAssignedManagedIdentitySettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (userAssignedManagedIdentitySettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userAssignedManagedIdentitySettings in model RegistryEndpointUserAssignedIdentityAuthentication"));
        } else {
            userAssignedManagedIdentitySettings().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(RegistryEndpointUserAssignedIdentityAuthentication.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("userAssignedManagedIdentitySettings", this.userAssignedManagedIdentitySettings);
        jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryEndpointUserAssignedIdentityAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryEndpointUserAssignedIdentityAuthentication if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegistryEndpointUserAssignedIdentityAuthentication.
     */
    public static RegistryEndpointUserAssignedIdentityAuthentication fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryEndpointUserAssignedIdentityAuthentication deserializedRegistryEndpointUserAssignedIdentityAuthentication
                = new RegistryEndpointUserAssignedIdentityAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userAssignedManagedIdentitySettings".equals(fieldName)) {
                    deserializedRegistryEndpointUserAssignedIdentityAuthentication.userAssignedManagedIdentitySettings
                        = RegistryEndpointUserAssignedManagedIdentitySettings.fromJson(reader);
                } else if ("method".equals(fieldName)) {
                    deserializedRegistryEndpointUserAssignedIdentityAuthentication.method
                        = RegistryEndpointAuthenticationMethod.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryEndpointUserAssignedIdentityAuthentication;
        });
    }
}
