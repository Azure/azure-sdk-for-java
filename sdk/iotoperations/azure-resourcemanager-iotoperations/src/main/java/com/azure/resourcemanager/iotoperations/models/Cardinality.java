// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cardinality properties.
 */
@Fluent
public final class Cardinality implements JsonSerializable<Cardinality> {
    /*
     * The backend broker desired properties
     */
    private BackendChain backendChain;

    /*
     * The frontend desired properties
     */
    private Frontend frontend;

    /**
     * Creates an instance of Cardinality class.
     */
    public Cardinality() {
    }

    /**
     * Get the backendChain property: The backend broker desired properties.
     * 
     * @return the backendChain value.
     */
    public BackendChain backendChain() {
        return this.backendChain;
    }

    /**
     * Set the backendChain property: The backend broker desired properties.
     * 
     * @param backendChain the backendChain value to set.
     * @return the Cardinality object itself.
     */
    public Cardinality withBackendChain(BackendChain backendChain) {
        this.backendChain = backendChain;
        return this;
    }

    /**
     * Get the frontend property: The frontend desired properties.
     * 
     * @return the frontend value.
     */
    public Frontend frontend() {
        return this.frontend;
    }

    /**
     * Set the frontend property: The frontend desired properties.
     * 
     * @param frontend the frontend value to set.
     * @return the Cardinality object itself.
     */
    public Cardinality withFrontend(Frontend frontend) {
        this.frontend = frontend;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (backendChain() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property backendChain in model Cardinality"));
        } else {
            backendChain().validate();
        }
        if (frontend() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property frontend in model Cardinality"));
        } else {
            frontend().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Cardinality.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("backendChain", this.backendChain);
        jsonWriter.writeJsonField("frontend", this.frontend);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Cardinality from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Cardinality if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Cardinality.
     */
    public static Cardinality fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Cardinality deserializedCardinality = new Cardinality();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backendChain".equals(fieldName)) {
                    deserializedCardinality.backendChain = BackendChain.fromJson(reader);
                } else if ("frontend".equals(fieldName)) {
                    deserializedCardinality.frontend = Frontend.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCardinality;
        });
    }
}
