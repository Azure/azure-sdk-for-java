// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Kubernetes reference.
 */
@Fluent
public final class KubernetesReference implements JsonSerializable<KubernetesReference> {
    /*
     * APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be
     * in the core API group. For any other third-party types, APIGroup is required.
     */
    private String apiGroup;

    /*
     * Kind is the type of resource being referenced
     */
    private String kind;

    /*
     * Name is the name of resource being referenced
     */
    private String name;

    /*
     * Namespace is the namespace of the resource being referenced. This field is required when the resource has a
     * namespace.
     */
    private String namespace;

    /**
     * Creates an instance of KubernetesReference class.
     */
    public KubernetesReference() {
    }

    /**
     * Get the apiGroup property: APIGroup is the group for the resource being referenced. If APIGroup is not specified,
     * the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     * 
     * @return the apiGroup value.
     */
    public String apiGroup() {
        return this.apiGroup;
    }

    /**
     * Set the apiGroup property: APIGroup is the group for the resource being referenced. If APIGroup is not specified,
     * the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
     * 
     * @param apiGroup the apiGroup value to set.
     * @return the KubernetesReference object itself.
     */
    public KubernetesReference withApiGroup(String apiGroup) {
        this.apiGroup = apiGroup;
        return this;
    }

    /**
     * Get the kind property: Kind is the type of resource being referenced.
     * 
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Kind is the type of resource being referenced.
     * 
     * @param kind the kind value to set.
     * @return the KubernetesReference object itself.
     */
    public KubernetesReference withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the name property: Name is the name of resource being referenced.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name is the name of resource being referenced.
     * 
     * @param name the name value to set.
     * @return the KubernetesReference object itself.
     */
    public KubernetesReference withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the namespace property: Namespace is the namespace of the resource being referenced. This field is required
     * when the resource has a namespace.
     * 
     * @return the namespace value.
     */
    public String namespace() {
        return this.namespace;
    }

    /**
     * Set the namespace property: Namespace is the namespace of the resource being referenced. This field is required
     * when the resource has a namespace.
     * 
     * @param namespace the namespace value to set.
     * @return the KubernetesReference object itself.
     */
    public KubernetesReference withNamespace(String namespace) {
        this.namespace = namespace;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kind() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kind in model KubernetesReference"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model KubernetesReference"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(KubernetesReference.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("apiGroup", this.apiGroup);
        jsonWriter.writeStringField("namespace", this.namespace);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KubernetesReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KubernetesReference if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KubernetesReference.
     */
    public static KubernetesReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            KubernetesReference deserializedKubernetesReference = new KubernetesReference();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedKubernetesReference.kind = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedKubernetesReference.name = reader.getString();
                } else if ("apiGroup".equals(fieldName)) {
                    deserializedKubernetesReference.apiGroup = reader.getString();
                } else if ("namespace".equals(fieldName)) {
                    deserializedKubernetesReference.namespace = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedKubernetesReference;
        });
    }
}
