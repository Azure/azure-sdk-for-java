// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Cert Manager private key properties.
 */
@Fluent
public final class CertManagerPrivateKey implements JsonSerializable<CertManagerPrivateKey> {
    /*
     * algorithm for private key.
     */
    private PrivateKeyAlgorithm algorithm;

    /*
     * cert-manager private key rotationPolicy.
     */
    private PrivateKeyRotationPolicy rotationPolicy;

    /**
     * Creates an instance of CertManagerPrivateKey class.
     */
    public CertManagerPrivateKey() {
    }

    /**
     * Get the algorithm property: algorithm for private key.
     * 
     * @return the algorithm value.
     */
    public PrivateKeyAlgorithm algorithm() {
        return this.algorithm;
    }

    /**
     * Set the algorithm property: algorithm for private key.
     * 
     * @param algorithm the algorithm value to set.
     * @return the CertManagerPrivateKey object itself.
     */
    public CertManagerPrivateKey withAlgorithm(PrivateKeyAlgorithm algorithm) {
        this.algorithm = algorithm;
        return this;
    }

    /**
     * Get the rotationPolicy property: cert-manager private key rotationPolicy.
     * 
     * @return the rotationPolicy value.
     */
    public PrivateKeyRotationPolicy rotationPolicy() {
        return this.rotationPolicy;
    }

    /**
     * Set the rotationPolicy property: cert-manager private key rotationPolicy.
     * 
     * @param rotationPolicy the rotationPolicy value to set.
     * @return the CertManagerPrivateKey object itself.
     */
    public CertManagerPrivateKey withRotationPolicy(PrivateKeyRotationPolicy rotationPolicy) {
        this.rotationPolicy = rotationPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (algorithm() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property algorithm in model CertManagerPrivateKey"));
        }
        if (rotationPolicy() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property rotationPolicy in model CertManagerPrivateKey"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertManagerPrivateKey.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("algorithm", this.algorithm == null ? null : this.algorithm.toString());
        jsonWriter.writeStringField("rotationPolicy",
            this.rotationPolicy == null ? null : this.rotationPolicy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertManagerPrivateKey from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertManagerPrivateKey if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertManagerPrivateKey.
     */
    public static CertManagerPrivateKey fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertManagerPrivateKey deserializedCertManagerPrivateKey = new CertManagerPrivateKey();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("algorithm".equals(fieldName)) {
                    deserializedCertManagerPrivateKey.algorithm = PrivateKeyAlgorithm.fromString(reader.getString());
                } else if ("rotationPolicy".equals(fieldName)) {
                    deserializedCertManagerPrivateKey.rotationPolicy
                        = PrivateKeyRotationPolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertManagerPrivateKey;
        });
    }
}
