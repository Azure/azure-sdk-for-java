// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VolumeClaimSpecSelectorMatchExpressions properties.
 */
@Fluent
public final class VolumeClaimSpecSelectorMatchExpressions
    implements JsonSerializable<VolumeClaimSpecSelectorMatchExpressions> {
    /*
     * key is the label key that the selector applies to.
     */
    private String key;

    /*
     * operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and
     * DoesNotExist.
     */
    private OperatorValues operator;

    /*
     * values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the
     * operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic
     * merge patch.
     */
    private List<String> values;

    /**
     * Creates an instance of VolumeClaimSpecSelectorMatchExpressions class.
     */
    public VolumeClaimSpecSelectorMatchExpressions() {
    }

    /**
     * Get the key property: key is the label key that the selector applies to.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: key is the label key that the selector applies to.
     * 
     * @param key the key value to set.
     * @return the VolumeClaimSpecSelectorMatchExpressions object itself.
     */
    public VolumeClaimSpecSelectorMatchExpressions withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the operator property: operator represents a key's relationship to a set of values. Valid operators are In,
     * NotIn, Exists and DoesNotExist.
     * 
     * @return the operator value.
     */
    public OperatorValues operator() {
        return this.operator;
    }

    /**
     * Set the operator property: operator represents a key's relationship to a set of values. Valid operators are In,
     * NotIn, Exists and DoesNotExist.
     * 
     * @param operator the operator value to set.
     * @return the VolumeClaimSpecSelectorMatchExpressions object itself.
     */
    public VolumeClaimSpecSelectorMatchExpressions withOperator(OperatorValues operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the values property: values is an array of string values. If the operator is In or NotIn, the values array
     * must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is
     * replaced during a strategic merge patch.
     * 
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Set the values property: values is an array of string values. If the operator is In or NotIn, the values array
     * must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is
     * replaced during a strategic merge patch.
     * 
     * @param values the values value to set.
     * @return the VolumeClaimSpecSelectorMatchExpressions object itself.
     */
    public VolumeClaimSpecSelectorMatchExpressions withValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (key() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property key in model VolumeClaimSpecSelectorMatchExpressions"));
        }
        if (operator() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property operator in model VolumeClaimSpecSelectorMatchExpressions"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VolumeClaimSpecSelectorMatchExpressions.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("operator", this.operator == null ? null : this.operator.toString());
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeClaimSpecSelectorMatchExpressions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeClaimSpecSelectorMatchExpressions if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VolumeClaimSpecSelectorMatchExpressions.
     */
    public static VolumeClaimSpecSelectorMatchExpressions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeClaimSpecSelectorMatchExpressions deserializedVolumeClaimSpecSelectorMatchExpressions
                = new VolumeClaimSpecSelectorMatchExpressions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedVolumeClaimSpecSelectorMatchExpressions.key = reader.getString();
                } else if ("operator".equals(fieldName)) {
                    deserializedVolumeClaimSpecSelectorMatchExpressions.operator
                        = OperatorValues.fromString(reader.getString());
                } else if ("values".equals(fieldName)) {
                    List<String> values = reader.readArray(reader1 -> reader1.getString());
                    deserializedVolumeClaimSpecSelectorMatchExpressions.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeClaimSpecSelectorMatchExpressions;
        });
    }
}
