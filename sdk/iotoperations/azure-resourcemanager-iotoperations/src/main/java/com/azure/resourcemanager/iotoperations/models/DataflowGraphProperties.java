// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DataflowGraph properties.
 */
@Fluent
public final class DataflowGraphProperties implements JsonSerializable<DataflowGraphProperties> {
    /*
     * The mode of the dataflow graph.
     */
    private OperationalMode mode;

    /*
     * Disk persistence mode.
     */
    private OperationalMode requestDiskPersistence;

    /*
     * List of nodes in the dataflow graph.
     */
    private List<DataflowGraphNode> nodes;

    /*
     * List of connections between nodes in the dataflow graph.
     */
    private List<DataflowGraphNodeConnection> nodeConnections;

    /*
     * The provisioning state of the dataflow graph.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of DataflowGraphProperties class.
     */
    public DataflowGraphProperties() {
    }

    /**
     * Get the mode property: The mode of the dataflow graph.
     * 
     * @return the mode value.
     */
    public OperationalMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The mode of the dataflow graph.
     * 
     * @param mode the mode value to set.
     * @return the DataflowGraphProperties object itself.
     */
    public DataflowGraphProperties withMode(OperationalMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the requestDiskPersistence property: Disk persistence mode.
     * 
     * @return the requestDiskPersistence value.
     */
    public OperationalMode requestDiskPersistence() {
        return this.requestDiskPersistence;
    }

    /**
     * Set the requestDiskPersistence property: Disk persistence mode.
     * 
     * @param requestDiskPersistence the requestDiskPersistence value to set.
     * @return the DataflowGraphProperties object itself.
     */
    public DataflowGraphProperties withRequestDiskPersistence(OperationalMode requestDiskPersistence) {
        this.requestDiskPersistence = requestDiskPersistence;
        return this;
    }

    /**
     * Get the nodes property: List of nodes in the dataflow graph.
     * 
     * @return the nodes value.
     */
    public List<DataflowGraphNode> nodes() {
        return this.nodes;
    }

    /**
     * Set the nodes property: List of nodes in the dataflow graph.
     * 
     * @param nodes the nodes value to set.
     * @return the DataflowGraphProperties object itself.
     */
    public DataflowGraphProperties withNodes(List<DataflowGraphNode> nodes) {
        this.nodes = nodes;
        return this;
    }

    /**
     * Get the nodeConnections property: List of connections between nodes in the dataflow graph.
     * 
     * @return the nodeConnections value.
     */
    public List<DataflowGraphNodeConnection> nodeConnections() {
        return this.nodeConnections;
    }

    /**
     * Set the nodeConnections property: List of connections between nodes in the dataflow graph.
     * 
     * @param nodeConnections the nodeConnections value to set.
     * @return the DataflowGraphProperties object itself.
     */
    public DataflowGraphProperties withNodeConnections(List<DataflowGraphNodeConnection> nodeConnections) {
        this.nodeConnections = nodeConnections;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state of the dataflow graph.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (nodes() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property nodes in model DataflowGraphProperties"));
        } else {
            nodes().forEach(e -> e.validate());
        }
        if (nodeConnections() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property nodeConnections in model DataflowGraphProperties"));
        } else {
            nodeConnections().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowGraphProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("nodes", this.nodes, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("nodeConnections", this.nodeConnections,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeStringField("requestDiskPersistence",
            this.requestDiskPersistence == null ? null : this.requestDiskPersistence.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphProperties.
     */
    public static DataflowGraphProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphProperties deserializedDataflowGraphProperties = new DataflowGraphProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("nodes".equals(fieldName)) {
                    List<DataflowGraphNode> nodes = reader.readArray(reader1 -> DataflowGraphNode.fromJson(reader1));
                    deserializedDataflowGraphProperties.nodes = nodes;
                } else if ("nodeConnections".equals(fieldName)) {
                    List<DataflowGraphNodeConnection> nodeConnections
                        = reader.readArray(reader1 -> DataflowGraphNodeConnection.fromJson(reader1));
                    deserializedDataflowGraphProperties.nodeConnections = nodeConnections;
                } else if ("mode".equals(fieldName)) {
                    deserializedDataflowGraphProperties.mode = OperationalMode.fromString(reader.getString());
                } else if ("requestDiskPersistence".equals(fieldName)) {
                    deserializedDataflowGraphProperties.requestDiskPersistence
                        = OperationalMode.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDataflowGraphProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphProperties;
        });
    }
}
