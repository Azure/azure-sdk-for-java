// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Broker Retain Messages properties.
 */
@Fluent
public final class BrokerRetainMessagesSettings implements JsonSerializable<BrokerRetainMessagesSettings> {
    /*
     * List of topics under which retained messages would be persisted to disk. Wildcards # and + supported.
     */
    private List<String> topics;

    /*
     * Controls if MQTT clients can request for disk persistence via `MQTTv5` user property. Works in addition to other
     * groups (logical OR).
     */
    private BrokerRetainMessagesDynamic dynamic;

    /**
     * Creates an instance of BrokerRetainMessagesSettings class.
     */
    public BrokerRetainMessagesSettings() {
    }

    /**
     * Get the topics property: List of topics under which retained messages would be persisted to disk. Wildcards # and
     * + supported.
     * 
     * @return the topics value.
     */
    public List<String> topics() {
        return this.topics;
    }

    /**
     * Set the topics property: List of topics under which retained messages would be persisted to disk. Wildcards # and
     * + supported.
     * 
     * @param topics the topics value to set.
     * @return the BrokerRetainMessagesSettings object itself.
     */
    public BrokerRetainMessagesSettings withTopics(List<String> topics) {
        this.topics = topics;
        return this;
    }

    /**
     * Get the dynamic property: Controls if MQTT clients can request for disk persistence via `MQTTv5` user property.
     * Works in addition to other groups (logical OR).
     * 
     * @return the dynamic value.
     */
    public BrokerRetainMessagesDynamic dynamic() {
        return this.dynamic;
    }

    /**
     * Set the dynamic property: Controls if MQTT clients can request for disk persistence via `MQTTv5` user property.
     * Works in addition to other groups (logical OR).
     * 
     * @param dynamic the dynamic value to set.
     * @return the BrokerRetainMessagesSettings object itself.
     */
    public BrokerRetainMessagesSettings withDynamic(BrokerRetainMessagesDynamic dynamic) {
        this.dynamic = dynamic;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dynamic() != null) {
            dynamic().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("topics", this.topics, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("dynamic", this.dynamic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerRetainMessagesSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerRetainMessagesSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BrokerRetainMessagesSettings.
     */
    public static BrokerRetainMessagesSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerRetainMessagesSettings deserializedBrokerRetainMessagesSettings = new BrokerRetainMessagesSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("topics".equals(fieldName)) {
                    List<String> topics = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerRetainMessagesSettings.topics = topics;
                } else if ("dynamic".equals(fieldName)) {
                    deserializedBrokerRetainMessagesSettings.dynamic = BrokerRetainMessagesDynamic.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerRetainMessagesSettings;
        });
    }
}
