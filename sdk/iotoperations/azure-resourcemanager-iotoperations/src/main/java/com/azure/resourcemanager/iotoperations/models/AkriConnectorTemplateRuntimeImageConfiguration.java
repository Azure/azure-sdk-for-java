// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * AkriConnectorTemplateRuntimeImageConfiguration properties.
 */
@Fluent
public final class AkriConnectorTemplateRuntimeImageConfiguration
    extends AkriConnectorTemplateManagedConfigurationSettings {
    /*
     * The type of the managed configuration.
     */
    private AkriConnectorTemplateManagedConfigurationType managedConfigurationType
        = AkriConnectorTemplateManagedConfigurationType.IMAGE_CONFIGURATION;

    /*
     * The image configuration settings.
     */
    private AkriConnectorTemplateRuntimeImageConfigurationSettings imageConfigurationSettings;

    /**
     * Creates an instance of AkriConnectorTemplateRuntimeImageConfiguration class.
     */
    public AkriConnectorTemplateRuntimeImageConfiguration() {
    }

    /**
     * Get the managedConfigurationType property: The type of the managed configuration.
     * 
     * @return the managedConfigurationType value.
     */
    @Override
    public AkriConnectorTemplateManagedConfigurationType managedConfigurationType() {
        return this.managedConfigurationType;
    }

    /**
     * Get the imageConfigurationSettings property: The image configuration settings.
     * 
     * @return the imageConfigurationSettings value.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings imageConfigurationSettings() {
        return this.imageConfigurationSettings;
    }

    /**
     * Set the imageConfigurationSettings property: The image configuration settings.
     * 
     * @param imageConfigurationSettings the imageConfigurationSettings value to set.
     * @return the AkriConnectorTemplateRuntimeImageConfiguration object itself.
     */
    public AkriConnectorTemplateRuntimeImageConfiguration withImageConfigurationSettings(
        AkriConnectorTemplateRuntimeImageConfigurationSettings imageConfigurationSettings) {
        this.imageConfigurationSettings = imageConfigurationSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeImageConfiguration withAllocation(AkriConnectorTemplateAllocation allocation) {
        super.withAllocation(allocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeImageConfiguration
        withPersistentVolumeClaims(List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims) {
        super.withPersistentVolumeClaims(persistentVolumeClaims);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeImageConfiguration
        withAdditionalConfiguration(Map<String, String> additionalConfiguration) {
        super.withAdditionalConfiguration(additionalConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeImageConfiguration
        withPersistentVolumeClaimTemplates(List<Map<String, BinaryData>> persistentVolumeClaimTemplates) {
        super.withPersistentVolumeClaimTemplates(persistentVolumeClaimTemplates);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeImageConfiguration withSecrets(List<AkriConnectorsSecret> secrets) {
        super.withSecrets(secrets);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeImageConfiguration
        withTrustSettings(AkriConnectorTemplateTrustList trustSettings) {
        super.withTrustSettings(trustSettings);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (imageConfigurationSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageConfigurationSettings in model AkriConnectorTemplateRuntimeImageConfiguration"));
        } else {
            imageConfigurationSettings().validate();
        }
        if (allocation() != null) {
            allocation().validate();
        }
        if (persistentVolumeClaims() != null) {
            persistentVolumeClaims().forEach(e -> e.validate());
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (trustSettings() != null) {
            trustSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorTemplateRuntimeImageConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("allocation", allocation());
        jsonWriter.writeArrayField("persistentVolumeClaims", persistentVolumeClaims(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("additionalConfiguration", additionalConfiguration(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("persistentVolumeClaimTemplates", persistentVolumeClaimTemplates(),
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1
                .writeUntyped(element1 == null ? null : element1.toObject(Object.class))));
        jsonWriter.writeArrayField("secrets", secrets(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("trustSettings", trustSettings());
        jsonWriter.writeJsonField("imageConfigurationSettings", this.imageConfigurationSettings);
        jsonWriter.writeStringField("managedConfigurationType",
            this.managedConfigurationType == null ? null : this.managedConfigurationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateRuntimeImageConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateRuntimeImageConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateRuntimeImageConfiguration.
     */
    public static AkriConnectorTemplateRuntimeImageConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateRuntimeImageConfiguration deserializedAkriConnectorTemplateRuntimeImageConfiguration
                = new AkriConnectorTemplateRuntimeImageConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocation".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration
                        .withAllocation(AkriConnectorTemplateAllocation.fromJson(reader));
                } else if ("persistentVolumeClaims".equals(fieldName)) {
                    List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims
                        = reader.readArray(reader1 -> AkriConnectorTemplatePersistentVolumeClaim.fromJson(reader1));
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration
                        .withPersistentVolumeClaims(persistentVolumeClaims);
                } else if ("additionalConfiguration".equals(fieldName)) {
                    Map<String, String> additionalConfiguration = reader.readMap(reader1 -> reader1.getString());
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration
                        .withAdditionalConfiguration(additionalConfiguration);
                } else if ("persistentVolumeClaimTemplates".equals(fieldName)) {
                    List<Map<String, BinaryData>> persistentVolumeClaimTemplates
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2
                            .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()))));
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration
                        .withPersistentVolumeClaimTemplates(persistentVolumeClaimTemplates);
                } else if ("secrets".equals(fieldName)) {
                    List<AkriConnectorsSecret> secrets
                        = reader.readArray(reader1 -> AkriConnectorsSecret.fromJson(reader1));
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration.withSecrets(secrets);
                } else if ("trustSettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration
                        .withTrustSettings(AkriConnectorTemplateTrustList.fromJson(reader));
                } else if ("imageConfigurationSettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration.imageConfigurationSettings
                        = AkriConnectorTemplateRuntimeImageConfigurationSettings.fromJson(reader);
                } else if ("managedConfigurationType".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfiguration.managedConfigurationType
                        = AkriConnectorTemplateManagedConfigurationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateRuntimeImageConfiguration;
        });
    }
}
