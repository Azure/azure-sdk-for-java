// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * RegistryEndpoint properties.
 */
@Fluent
public final class RegistryEndpointProperties implements JsonSerializable<RegistryEndpointProperties> {
    /*
     * The Container Registry endpoint hostname.
     */
    private String host;

    /*
     * The authentication settings for the Azure Container Registry.
     */
    private RegistryEndpointAuthentication authentication;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Trust settings for the registry endpoint
     */
    private RegistryEndpointTrustedSettings trustSettings;

    /**
     * Creates an instance of RegistryEndpointProperties class.
     */
    public RegistryEndpointProperties() {
    }

    /**
     * Get the host property: The Container Registry endpoint hostname.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: The Container Registry endpoint hostname.
     * 
     * @param host the host value to set.
     * @return the RegistryEndpointProperties object itself.
     */
    public RegistryEndpointProperties withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the authentication property: The authentication settings for the Azure Container Registry.
     * 
     * @return the authentication value.
     */
    public RegistryEndpointAuthentication authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: The authentication settings for the Azure Container Registry.
     * 
     * @param authentication the authentication value to set.
     * @return the RegistryEndpointProperties object itself.
     */
    public RegistryEndpointProperties withAuthentication(RegistryEndpointAuthentication authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the trustSettings property: Trust settings for the registry endpoint.
     * 
     * @return the trustSettings value.
     */
    public RegistryEndpointTrustedSettings trustSettings() {
        return this.trustSettings;
    }

    /**
     * Set the trustSettings property: Trust settings for the registry endpoint.
     * 
     * @param trustSettings the trustSettings value to set.
     * @return the RegistryEndpointProperties object itself.
     */
    public RegistryEndpointProperties withTrustSettings(RegistryEndpointTrustedSettings trustSettings) {
        this.trustSettings = trustSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (host() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property host in model RegistryEndpointProperties"));
        }
        if (authentication() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authentication in model RegistryEndpointProperties"));
        } else {
            authentication().validate();
        }
        if (trustSettings() != null) {
            trustSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RegistryEndpointProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeJsonField("trustSettings", this.trustSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryEndpointProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryEndpointProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegistryEndpointProperties.
     */
    public static RegistryEndpointProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryEndpointProperties deserializedRegistryEndpointProperties = new RegistryEndpointProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("host".equals(fieldName)) {
                    deserializedRegistryEndpointProperties.host = reader.getString();
                } else if ("authentication".equals(fieldName)) {
                    deserializedRegistryEndpointProperties.authentication
                        = RegistryEndpointAuthentication.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedRegistryEndpointProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("trustSettings".equals(fieldName)) {
                    deserializedRegistryEndpointProperties.trustSettings
                        = RegistryEndpointTrustedSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryEndpointProperties;
        });
    }
}
