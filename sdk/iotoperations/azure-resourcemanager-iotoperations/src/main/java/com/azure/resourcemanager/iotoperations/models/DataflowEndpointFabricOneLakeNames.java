// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Microsoft Fabric endpoint Names properties.
 */
@Fluent
public final class DataflowEndpointFabricOneLakeNames implements JsonSerializable<DataflowEndpointFabricOneLakeNames> {
    /*
     * Lakehouse name.
     */
    private String lakehouseName;

    /*
     * Workspace name.
     */
    private String workspaceName;

    /**
     * Creates an instance of DataflowEndpointFabricOneLakeNames class.
     */
    public DataflowEndpointFabricOneLakeNames() {
    }

    /**
     * Get the lakehouseName property: Lakehouse name.
     * 
     * @return the lakehouseName value.
     */
    public String lakehouseName() {
        return this.lakehouseName;
    }

    /**
     * Set the lakehouseName property: Lakehouse name.
     * 
     * @param lakehouseName the lakehouseName value to set.
     * @return the DataflowEndpointFabricOneLakeNames object itself.
     */
    public DataflowEndpointFabricOneLakeNames withLakehouseName(String lakehouseName) {
        this.lakehouseName = lakehouseName;
        return this;
    }

    /**
     * Get the workspaceName property: Workspace name.
     * 
     * @return the workspaceName value.
     */
    public String workspaceName() {
        return this.workspaceName;
    }

    /**
     * Set the workspaceName property: Workspace name.
     * 
     * @param workspaceName the workspaceName value to set.
     * @return the DataflowEndpointFabricOneLakeNames object itself.
     */
    public DataflowEndpointFabricOneLakeNames withWorkspaceName(String workspaceName) {
        this.workspaceName = workspaceName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (lakehouseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property lakehouseName in model DataflowEndpointFabricOneLakeNames"));
        }
        if (workspaceName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property workspaceName in model DataflowEndpointFabricOneLakeNames"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowEndpointFabricOneLakeNames.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lakehouseName", this.lakehouseName);
        jsonWriter.writeStringField("workspaceName", this.workspaceName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowEndpointFabricOneLakeNames from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowEndpointFabricOneLakeNames if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowEndpointFabricOneLakeNames.
     */
    public static DataflowEndpointFabricOneLakeNames fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowEndpointFabricOneLakeNames deserializedDataflowEndpointFabricOneLakeNames
                = new DataflowEndpointFabricOneLakeNames();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("lakehouseName".equals(fieldName)) {
                    deserializedDataflowEndpointFabricOneLakeNames.lakehouseName = reader.getString();
                } else if ("workspaceName".equals(fieldName)) {
                    deserializedDataflowEndpointFabricOneLakeNames.workspaceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowEndpointFabricOneLakeNames;
        });
    }
}
