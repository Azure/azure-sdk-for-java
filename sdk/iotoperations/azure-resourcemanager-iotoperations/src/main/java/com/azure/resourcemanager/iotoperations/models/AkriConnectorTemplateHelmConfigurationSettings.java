// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * AkriConnectorTemplateHelmConfiguration properties.
 */
@Fluent
public final class AkriConnectorTemplateHelmConfigurationSettings
    implements JsonSerializable<AkriConnectorTemplateHelmConfigurationSettings> {
    /*
     * The registry settings for the helm chart to be used.
     */
    private AkriConnectorTemplateHelmRegistrySettings registrySettings;

    /*
     * The release name of the Helm chart.
     */
    private String releaseName;

    /*
     * The name of the repository
     */
    private String repositoryName;

    /*
     * The version of the Helm chart.
     */
    private String version;

    /*
     * Advanced configuration for the Helm chart.
     * Install, upgrade, and uninstall options for the helm chart such as atomic, wait, timeout, `wait_for_jobs`, and
     * `disable_hooks`.
     */
    private AkriConnectorTemplateHelmAdvancedConfiguration advancedConfiguration;

    /*
     * A map of values to pass to the helm chart.
     */
    private Map<String, String> values;

    /**
     * Creates an instance of AkriConnectorTemplateHelmConfigurationSettings class.
     */
    public AkriConnectorTemplateHelmConfigurationSettings() {
    }

    /**
     * Get the registrySettings property: The registry settings for the helm chart to be used.
     * 
     * @return the registrySettings value.
     */
    public AkriConnectorTemplateHelmRegistrySettings registrySettings() {
        return this.registrySettings;
    }

    /**
     * Set the registrySettings property: The registry settings for the helm chart to be used.
     * 
     * @param registrySettings the registrySettings value to set.
     * @return the AkriConnectorTemplateHelmConfigurationSettings object itself.
     */
    public AkriConnectorTemplateHelmConfigurationSettings
        withRegistrySettings(AkriConnectorTemplateHelmRegistrySettings registrySettings) {
        this.registrySettings = registrySettings;
        return this;
    }

    /**
     * Get the releaseName property: The release name of the Helm chart.
     * 
     * @return the releaseName value.
     */
    public String releaseName() {
        return this.releaseName;
    }

    /**
     * Set the releaseName property: The release name of the Helm chart.
     * 
     * @param releaseName the releaseName value to set.
     * @return the AkriConnectorTemplateHelmConfigurationSettings object itself.
     */
    public AkriConnectorTemplateHelmConfigurationSettings withReleaseName(String releaseName) {
        this.releaseName = releaseName;
        return this;
    }

    /**
     * Get the repositoryName property: The name of the repository.
     * 
     * @return the repositoryName value.
     */
    public String repositoryName() {
        return this.repositoryName;
    }

    /**
     * Set the repositoryName property: The name of the repository.
     * 
     * @param repositoryName the repositoryName value to set.
     * @return the AkriConnectorTemplateHelmConfigurationSettings object itself.
     */
    public AkriConnectorTemplateHelmConfigurationSettings withRepositoryName(String repositoryName) {
        this.repositoryName = repositoryName;
        return this;
    }

    /**
     * Get the version property: The version of the Helm chart.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: The version of the Helm chart.
     * 
     * @param version the version value to set.
     * @return the AkriConnectorTemplateHelmConfigurationSettings object itself.
     */
    public AkriConnectorTemplateHelmConfigurationSettings withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the advancedConfiguration property: Advanced configuration for the Helm chart.
     * Install, upgrade, and uninstall options for the helm chart such as atomic, wait, timeout, `wait_for_jobs`, and
     * `disable_hooks`.
     * 
     * @return the advancedConfiguration value.
     */
    public AkriConnectorTemplateHelmAdvancedConfiguration advancedConfiguration() {
        return this.advancedConfiguration;
    }

    /**
     * Set the advancedConfiguration property: Advanced configuration for the Helm chart.
     * Install, upgrade, and uninstall options for the helm chart such as atomic, wait, timeout, `wait_for_jobs`, and
     * `disable_hooks`.
     * 
     * @param advancedConfiguration the advancedConfiguration value to set.
     * @return the AkriConnectorTemplateHelmConfigurationSettings object itself.
     */
    public AkriConnectorTemplateHelmConfigurationSettings
        withAdvancedConfiguration(AkriConnectorTemplateHelmAdvancedConfiguration advancedConfiguration) {
        this.advancedConfiguration = advancedConfiguration;
        return this;
    }

    /**
     * Get the values property: A map of values to pass to the helm chart.
     * 
     * @return the values value.
     */
    public Map<String, String> values() {
        return this.values;
    }

    /**
     * Set the values property: A map of values to pass to the helm chart.
     * 
     * @param values the values value to set.
     * @return the AkriConnectorTemplateHelmConfigurationSettings object itself.
     */
    public AkriConnectorTemplateHelmConfigurationSettings withValues(Map<String, String> values) {
        this.values = values;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("releaseName", this.releaseName);
        jsonWriter.writeStringField("repositoryName", this.repositoryName);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeJsonField("registrySettings", this.registrySettings);
        jsonWriter.writeJsonField("advancedConfiguration", this.advancedConfiguration);
        jsonWriter.writeMapField("values", this.values, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateHelmConfigurationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateHelmConfigurationSettings if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateHelmConfigurationSettings.
     */
    public static AkriConnectorTemplateHelmConfigurationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateHelmConfigurationSettings deserializedAkriConnectorTemplateHelmConfigurationSettings
                = new AkriConnectorTemplateHelmConfigurationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("releaseName".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmConfigurationSettings.releaseName = reader.getString();
                } else if ("repositoryName".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmConfigurationSettings.repositoryName = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmConfigurationSettings.version = reader.getString();
                } else if ("registrySettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmConfigurationSettings.registrySettings
                        = AkriConnectorTemplateHelmRegistrySettings.fromJson(reader);
                } else if ("advancedConfiguration".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmConfigurationSettings.advancedConfiguration
                        = AkriConnectorTemplateHelmAdvancedConfiguration.fromJson(reader);
                } else if ("values".equals(fieldName)) {
                    Map<String, String> values = reader.readMap(reader1 -> reader1.getString());
                    deserializedAkriConnectorTemplateHelmConfigurationSettings.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateHelmConfigurationSettings;
        });
    }
}
