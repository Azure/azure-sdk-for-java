// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateHelmContainerRegistrySettings properties.
 */
@Fluent
public final class AkriConnectorTemplateHelmContainerRegistrySettings
    implements JsonSerializable<AkriConnectorTemplateHelmContainerRegistrySettings> {
    /*
     * The registry to use for the Helm chart.
     */
    private String registry;

    /*
     * Optional reference to a secret in the same namespace to use for pulling the Helm chart.
     */
    private AkriConnectorTemplateHelmAuthSecretRef authSecretRef;

    /**
     * Creates an instance of AkriConnectorTemplateHelmContainerRegistrySettings class.
     */
    public AkriConnectorTemplateHelmContainerRegistrySettings() {
    }

    /**
     * Get the registry property: The registry to use for the Helm chart.
     * 
     * @return the registry value.
     */
    public String registry() {
        return this.registry;
    }

    /**
     * Set the registry property: The registry to use for the Helm chart.
     * 
     * @param registry the registry value to set.
     * @return the AkriConnectorTemplateHelmContainerRegistrySettings object itself.
     */
    public AkriConnectorTemplateHelmContainerRegistrySettings withRegistry(String registry) {
        this.registry = registry;
        return this;
    }

    /**
     * Get the authSecretRef property: Optional reference to a secret in the same namespace to use for pulling the Helm
     * chart.
     * 
     * @return the authSecretRef value.
     */
    public AkriConnectorTemplateHelmAuthSecretRef authSecretRef() {
        return this.authSecretRef;
    }

    /**
     * Set the authSecretRef property: Optional reference to a secret in the same namespace to use for pulling the Helm
     * chart.
     * 
     * @param authSecretRef the authSecretRef value to set.
     * @return the AkriConnectorTemplateHelmContainerRegistrySettings object itself.
     */
    public AkriConnectorTemplateHelmContainerRegistrySettings
        withAuthSecretRef(AkriConnectorTemplateHelmAuthSecretRef authSecretRef) {
        this.authSecretRef = authSecretRef;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (registry() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property registry in model AkriConnectorTemplateHelmContainerRegistrySettings"));
        }
        if (authSecretRef() != null) {
            authSecretRef().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(AkriConnectorTemplateHelmContainerRegistrySettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("registry", this.registry);
        jsonWriter.writeJsonField("authSecretRef", this.authSecretRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateHelmContainerRegistrySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateHelmContainerRegistrySettings if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateHelmContainerRegistrySettings.
     */
    public static AkriConnectorTemplateHelmContainerRegistrySettings fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateHelmContainerRegistrySettings deserializedAkriConnectorTemplateHelmContainerRegistrySettings
                = new AkriConnectorTemplateHelmContainerRegistrySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registry".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmContainerRegistrySettings.registry = reader.getString();
                } else if ("authSecretRef".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmContainerRegistrySettings.authSecretRef
                        = AkriConnectorTemplateHelmAuthSecretRef.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateHelmContainerRegistrySettings;
        });
    }
}
