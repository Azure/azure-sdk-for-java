// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker Diagnostic Setting properties.
 */
@Fluent
public final class BrokerDiagnostics implements JsonSerializable<BrokerDiagnostics> {
    /*
     * Diagnostic log settings for the resource.
     */
    private DiagnosticsLogs logs;

    /*
     * The metrics settings for the resource.
     */
    private Metrics metrics;

    /*
     * The self check properties.
     */
    private SelfCheck selfCheck;

    /*
     * The trace properties.
     */
    private Traces traces;

    /**
     * Creates an instance of BrokerDiagnostics class.
     */
    public BrokerDiagnostics() {
    }

    /**
     * Get the logs property: Diagnostic log settings for the resource.
     * 
     * @return the logs value.
     */
    public DiagnosticsLogs logs() {
        return this.logs;
    }

    /**
     * Set the logs property: Diagnostic log settings for the resource.
     * 
     * @param logs the logs value to set.
     * @return the BrokerDiagnostics object itself.
     */
    public BrokerDiagnostics withLogs(DiagnosticsLogs logs) {
        this.logs = logs;
        return this;
    }

    /**
     * Get the metrics property: The metrics settings for the resource.
     * 
     * @return the metrics value.
     */
    public Metrics metrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: The metrics settings for the resource.
     * 
     * @param metrics the metrics value to set.
     * @return the BrokerDiagnostics object itself.
     */
    public BrokerDiagnostics withMetrics(Metrics metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the selfCheck property: The self check properties.
     * 
     * @return the selfCheck value.
     */
    public SelfCheck selfCheck() {
        return this.selfCheck;
    }

    /**
     * Set the selfCheck property: The self check properties.
     * 
     * @param selfCheck the selfCheck value to set.
     * @return the BrokerDiagnostics object itself.
     */
    public BrokerDiagnostics withSelfCheck(SelfCheck selfCheck) {
        this.selfCheck = selfCheck;
        return this;
    }

    /**
     * Get the traces property: The trace properties.
     * 
     * @return the traces value.
     */
    public Traces traces() {
        return this.traces;
    }

    /**
     * Set the traces property: The trace properties.
     * 
     * @param traces the traces value to set.
     * @return the BrokerDiagnostics object itself.
     */
    public BrokerDiagnostics withTraces(Traces traces) {
        this.traces = traces;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (logs() != null) {
            logs().validate();
        }
        if (metrics() != null) {
            metrics().validate();
        }
        if (selfCheck() != null) {
            selfCheck().validate();
        }
        if (traces() != null) {
            traces().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("logs", this.logs);
        jsonWriter.writeJsonField("metrics", this.metrics);
        jsonWriter.writeJsonField("selfCheck", this.selfCheck);
        jsonWriter.writeJsonField("traces", this.traces);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerDiagnostics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerDiagnostics if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BrokerDiagnostics.
     */
    public static BrokerDiagnostics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerDiagnostics deserializedBrokerDiagnostics = new BrokerDiagnostics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logs".equals(fieldName)) {
                    deserializedBrokerDiagnostics.logs = DiagnosticsLogs.fromJson(reader);
                } else if ("metrics".equals(fieldName)) {
                    deserializedBrokerDiagnostics.metrics = Metrics.fromJson(reader);
                } else if ("selfCheck".equals(fieldName)) {
                    deserializedBrokerDiagnostics.selfCheck = SelfCheck.fromJson(reader);
                } else if ("traces".equals(fieldName)) {
                    deserializedBrokerDiagnostics.traces = Traces.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerDiagnostics;
        });
    }
}
