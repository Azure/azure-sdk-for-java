// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Diagnostic Log properties.
 */
@Fluent
public final class DiagnosticsLogs implements JsonSerializable<DiagnosticsLogs> {
    /*
     * The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
     */
    private String level;

    /**
     * Creates an instance of DiagnosticsLogs class.
     */
    public DiagnosticsLogs() {
    }

    /**
     * Get the level property: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
     * 
     * @return the level value.
     */
    public String level() {
        return this.level;
    }

    /**
     * Set the level property: The log level. Examples - 'debug', 'info', 'warn', 'error', 'trace'.
     * 
     * @param level the level value to set.
     * @return the DiagnosticsLogs object itself.
     */
    public DiagnosticsLogs withLevel(String level) {
        this.level = level;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("level", this.level);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticsLogs from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticsLogs if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnosticsLogs.
     */
    public static DiagnosticsLogs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticsLogs deserializedDiagnosticsLogs = new DiagnosticsLogs();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("level".equals(fieldName)) {
                    deserializedDiagnosticsLogs.level = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnosticsLogs;
        });
    }
}
