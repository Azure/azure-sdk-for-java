// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Desired properties of the backend instances of the broker.
 */
@Fluent
public final class BackendChain implements JsonSerializable<BackendChain> {
    /*
     * The desired number of physical backend partitions.
     */
    private int partitions;

    /*
     * The desired numbers of backend replicas (pods) in a physical partition.
     */
    private int redundancyFactor;

    /*
     * Number of logical backend workers per replica (pod).
     */
    private Integer workers;

    /**
     * Creates an instance of BackendChain class.
     */
    public BackendChain() {
    }

    /**
     * Get the partitions property: The desired number of physical backend partitions.
     * 
     * @return the partitions value.
     */
    public int partitions() {
        return this.partitions;
    }

    /**
     * Set the partitions property: The desired number of physical backend partitions.
     * 
     * @param partitions the partitions value to set.
     * @return the BackendChain object itself.
     */
    public BackendChain withPartitions(int partitions) {
        this.partitions = partitions;
        return this;
    }

    /**
     * Get the redundancyFactor property: The desired numbers of backend replicas (pods) in a physical partition.
     * 
     * @return the redundancyFactor value.
     */
    public int redundancyFactor() {
        return this.redundancyFactor;
    }

    /**
     * Set the redundancyFactor property: The desired numbers of backend replicas (pods) in a physical partition.
     * 
     * @param redundancyFactor the redundancyFactor value to set.
     * @return the BackendChain object itself.
     */
    public BackendChain withRedundancyFactor(int redundancyFactor) {
        this.redundancyFactor = redundancyFactor;
        return this;
    }

    /**
     * Get the workers property: Number of logical backend workers per replica (pod).
     * 
     * @return the workers value.
     */
    public Integer workers() {
        return this.workers;
    }

    /**
     * Set the workers property: Number of logical backend workers per replica (pod).
     * 
     * @param workers the workers value to set.
     * @return the BackendChain object itself.
     */
    public BackendChain withWorkers(Integer workers) {
        this.workers = workers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("partitions", this.partitions);
        jsonWriter.writeIntField("redundancyFactor", this.redundancyFactor);
        jsonWriter.writeNumberField("workers", this.workers);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BackendChain from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BackendChain if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BackendChain.
     */
    public static BackendChain fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BackendChain deserializedBackendChain = new BackendChain();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partitions".equals(fieldName)) {
                    deserializedBackendChain.partitions = reader.getInt();
                } else if ("redundancyFactor".equals(fieldName)) {
                    deserializedBackendChain.redundancyFactor = reader.getInt();
                } else if ("workers".equals(fieldName)) {
                    deserializedBackendChain.workers = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBackendChain;
        });
    }
}
