// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AuthorizationConfig Rule Properties.
 */
@Fluent
public final class AuthorizationRule implements JsonSerializable<AuthorizationRule> {
    /*
     * Give access to Broker methods and topics.
     */
    private List<BrokerResourceRule> brokerResources;

    /*
     * Give access to clients based on the following properties.
     */
    private PrincipalDefinition principals;

    /*
     * Give access to state store resources.
     */
    private List<StateStoreResourceRule> stateStoreResources;

    /**
     * Creates an instance of AuthorizationRule class.
     */
    public AuthorizationRule() {
    }

    /**
     * Get the brokerResources property: Give access to Broker methods and topics.
     * 
     * @return the brokerResources value.
     */
    public List<BrokerResourceRule> brokerResources() {
        return this.brokerResources;
    }

    /**
     * Set the brokerResources property: Give access to Broker methods and topics.
     * 
     * @param brokerResources the brokerResources value to set.
     * @return the AuthorizationRule object itself.
     */
    public AuthorizationRule withBrokerResources(List<BrokerResourceRule> brokerResources) {
        this.brokerResources = brokerResources;
        return this;
    }

    /**
     * Get the principals property: Give access to clients based on the following properties.
     * 
     * @return the principals value.
     */
    public PrincipalDefinition principals() {
        return this.principals;
    }

    /**
     * Set the principals property: Give access to clients based on the following properties.
     * 
     * @param principals the principals value to set.
     * @return the AuthorizationRule object itself.
     */
    public AuthorizationRule withPrincipals(PrincipalDefinition principals) {
        this.principals = principals;
        return this;
    }

    /**
     * Get the stateStoreResources property: Give access to state store resources.
     * 
     * @return the stateStoreResources value.
     */
    public List<StateStoreResourceRule> stateStoreResources() {
        return this.stateStoreResources;
    }

    /**
     * Set the stateStoreResources property: Give access to state store resources.
     * 
     * @param stateStoreResources the stateStoreResources value to set.
     * @return the AuthorizationRule object itself.
     */
    public AuthorizationRule withStateStoreResources(List<StateStoreResourceRule> stateStoreResources) {
        this.stateStoreResources = stateStoreResources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (brokerResources() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property brokerResources in model AuthorizationRule"));
        } else {
            brokerResources().forEach(e -> e.validate());
        }
        if (principals() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property principals in model AuthorizationRule"));
        } else {
            principals().validate();
        }
        if (stateStoreResources() != null) {
            stateStoreResources().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AuthorizationRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("brokerResources", this.brokerResources,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("principals", this.principals);
        jsonWriter.writeArrayField("stateStoreResources", this.stateStoreResources,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizationRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizationRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AuthorizationRule.
     */
    public static AuthorizationRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizationRule deserializedAuthorizationRule = new AuthorizationRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("brokerResources".equals(fieldName)) {
                    List<BrokerResourceRule> brokerResources
                        = reader.readArray(reader1 -> BrokerResourceRule.fromJson(reader1));
                    deserializedAuthorizationRule.brokerResources = brokerResources;
                } else if ("principals".equals(fieldName)) {
                    deserializedAuthorizationRule.principals = PrincipalDefinition.fromJson(reader);
                } else if ("stateStoreResources".equals(fieldName)) {
                    List<StateStoreResourceRule> stateStoreResources
                        = reader.readArray(reader1 -> StateStoreResourceRule.fromJson(reader1));
                    deserializedAuthorizationRule.stateStoreResources = stateStoreResources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizationRule;
        });
    }
}
