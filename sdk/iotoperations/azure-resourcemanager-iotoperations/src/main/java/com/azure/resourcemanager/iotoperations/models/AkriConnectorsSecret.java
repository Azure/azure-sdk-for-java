// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorsSecret properties.
 */
@Fluent
public final class AkriConnectorsSecret implements JsonSerializable<AkriConnectorsSecret> {
    /*
     * The key in the secret to be mounted.
     */
    private String secretKey;

    /*
     * The application-defined alias for the secret.
     */
    private String secretAlias;

    /*
     * The name of the secret to be mounted.
     */
    private String secretRef;

    /**
     * Creates an instance of AkriConnectorsSecret class.
     */
    public AkriConnectorsSecret() {
    }

    /**
     * Get the secretKey property: The key in the secret to be mounted.
     * 
     * @return the secretKey value.
     */
    public String secretKey() {
        return this.secretKey;
    }

    /**
     * Set the secretKey property: The key in the secret to be mounted.
     * 
     * @param secretKey the secretKey value to set.
     * @return the AkriConnectorsSecret object itself.
     */
    public AkriConnectorsSecret withSecretKey(String secretKey) {
        this.secretKey = secretKey;
        return this;
    }

    /**
     * Get the secretAlias property: The application-defined alias for the secret.
     * 
     * @return the secretAlias value.
     */
    public String secretAlias() {
        return this.secretAlias;
    }

    /**
     * Set the secretAlias property: The application-defined alias for the secret.
     * 
     * @param secretAlias the secretAlias value to set.
     * @return the AkriConnectorsSecret object itself.
     */
    public AkriConnectorsSecret withSecretAlias(String secretAlias) {
        this.secretAlias = secretAlias;
        return this;
    }

    /**
     * Get the secretRef property: The name of the secret to be mounted.
     * 
     * @return the secretRef value.
     */
    public String secretRef() {
        return this.secretRef;
    }

    /**
     * Set the secretRef property: The name of the secret to be mounted.
     * 
     * @param secretRef the secretRef value to set.
     * @return the AkriConnectorsSecret object itself.
     */
    public AkriConnectorsSecret withSecretRef(String secretRef) {
        this.secretRef = secretRef;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (secretKey() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property secretKey in model AkriConnectorsSecret"));
        }
        if (secretAlias() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property secretAlias in model AkriConnectorsSecret"));
        }
        if (secretRef() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property secretRef in model AkriConnectorsSecret"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorsSecret.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("secretKey", this.secretKey);
        jsonWriter.writeStringField("secretAlias", this.secretAlias);
        jsonWriter.writeStringField("secretRef", this.secretRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorsSecret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorsSecret if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorsSecret.
     */
    public static AkriConnectorsSecret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorsSecret deserializedAkriConnectorsSecret = new AkriConnectorsSecret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("secretKey".equals(fieldName)) {
                    deserializedAkriConnectorsSecret.secretKey = reader.getString();
                } else if ("secretAlias".equals(fieldName)) {
                    deserializedAkriConnectorsSecret.secretAlias = reader.getString();
                } else if ("secretRef".equals(fieldName)) {
                    deserializedAkriConnectorsSecret.secretRef = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorsSecret;
        });
    }
}
