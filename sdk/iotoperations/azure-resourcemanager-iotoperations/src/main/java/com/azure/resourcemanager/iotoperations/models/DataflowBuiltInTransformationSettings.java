// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Dataflow BuiltIn Transformation properties.
 */
@Fluent
public final class DataflowBuiltInTransformationSettings
    implements JsonSerializable<DataflowBuiltInTransformationSettings> {
    /*
     * Serialization format. Optional; defaults to JSON. Allowed value JSON Schema/draft-7, Parquet. Default: Json
     */
    private TransformationSerializationFormat serializationFormat;

    /*
     * Reference to the schema that describes the output of the transformation.
     */
    private String schemaRef;

    /*
     * Enrich data from Broker State Store. Dataset references a key in Broker State Store.
     */
    private List<DataflowBuiltInTransformationDataset> datasets;

    /*
     * Filters input record or datapoints based on condition.
     */
    private List<DataflowBuiltInTransformationFilter> filter;

    /*
     * Maps input to output message.
     */
    private List<DataflowBuiltInTransformationMap> map;

    /**
     * Creates an instance of DataflowBuiltInTransformationSettings class.
     */
    public DataflowBuiltInTransformationSettings() {
    }

    /**
     * Get the serializationFormat property: Serialization format. Optional; defaults to JSON. Allowed value JSON
     * Schema/draft-7, Parquet. Default: Json.
     * 
     * @return the serializationFormat value.
     */
    public TransformationSerializationFormat serializationFormat() {
        return this.serializationFormat;
    }

    /**
     * Set the serializationFormat property: Serialization format. Optional; defaults to JSON. Allowed value JSON
     * Schema/draft-7, Parquet. Default: Json.
     * 
     * @param serializationFormat the serializationFormat value to set.
     * @return the DataflowBuiltInTransformationSettings object itself.
     */
    public DataflowBuiltInTransformationSettings
        withSerializationFormat(TransformationSerializationFormat serializationFormat) {
        this.serializationFormat = serializationFormat;
        return this;
    }

    /**
     * Get the schemaRef property: Reference to the schema that describes the output of the transformation.
     * 
     * @return the schemaRef value.
     */
    public String schemaRef() {
        return this.schemaRef;
    }

    /**
     * Set the schemaRef property: Reference to the schema that describes the output of the transformation.
     * 
     * @param schemaRef the schemaRef value to set.
     * @return the DataflowBuiltInTransformationSettings object itself.
     */
    public DataflowBuiltInTransformationSettings withSchemaRef(String schemaRef) {
        this.schemaRef = schemaRef;
        return this;
    }

    /**
     * Get the datasets property: Enrich data from Broker State Store. Dataset references a key in Broker State Store.
     * 
     * @return the datasets value.
     */
    public List<DataflowBuiltInTransformationDataset> datasets() {
        return this.datasets;
    }

    /**
     * Set the datasets property: Enrich data from Broker State Store. Dataset references a key in Broker State Store.
     * 
     * @param datasets the datasets value to set.
     * @return the DataflowBuiltInTransformationSettings object itself.
     */
    public DataflowBuiltInTransformationSettings withDatasets(List<DataflowBuiltInTransformationDataset> datasets) {
        this.datasets = datasets;
        return this;
    }

    /**
     * Get the filter property: Filters input record or datapoints based on condition.
     * 
     * @return the filter value.
     */
    public List<DataflowBuiltInTransformationFilter> filter() {
        return this.filter;
    }

    /**
     * Set the filter property: Filters input record or datapoints based on condition.
     * 
     * @param filter the filter value to set.
     * @return the DataflowBuiltInTransformationSettings object itself.
     */
    public DataflowBuiltInTransformationSettings withFilter(List<DataflowBuiltInTransformationFilter> filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the map property: Maps input to output message.
     * 
     * @return the map value.
     */
    public List<DataflowBuiltInTransformationMap> map() {
        return this.map;
    }

    /**
     * Set the map property: Maps input to output message.
     * 
     * @param map the map value to set.
     * @return the DataflowBuiltInTransformationSettings object itself.
     */
    public DataflowBuiltInTransformationSettings withMap(List<DataflowBuiltInTransformationMap> map) {
        this.map = map;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (datasets() != null) {
            datasets().forEach(e -> e.validate());
        }
        if (filter() != null) {
            filter().forEach(e -> e.validate());
        }
        if (map() != null) {
            map().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serializationFormat",
            this.serializationFormat == null ? null : this.serializationFormat.toString());
        jsonWriter.writeStringField("schemaRef", this.schemaRef);
        jsonWriter.writeArrayField("datasets", this.datasets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("filter", this.filter, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("map", this.map, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowBuiltInTransformationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowBuiltInTransformationSettings if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DataflowBuiltInTransformationSettings.
     */
    public static DataflowBuiltInTransformationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowBuiltInTransformationSettings deserializedDataflowBuiltInTransformationSettings
                = new DataflowBuiltInTransformationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serializationFormat".equals(fieldName)) {
                    deserializedDataflowBuiltInTransformationSettings.serializationFormat
                        = TransformationSerializationFormat.fromString(reader.getString());
                } else if ("schemaRef".equals(fieldName)) {
                    deserializedDataflowBuiltInTransformationSettings.schemaRef = reader.getString();
                } else if ("datasets".equals(fieldName)) {
                    List<DataflowBuiltInTransformationDataset> datasets
                        = reader.readArray(reader1 -> DataflowBuiltInTransformationDataset.fromJson(reader1));
                    deserializedDataflowBuiltInTransformationSettings.datasets = datasets;
                } else if ("filter".equals(fieldName)) {
                    List<DataflowBuiltInTransformationFilter> filter
                        = reader.readArray(reader1 -> DataflowBuiltInTransformationFilter.fromJson(reader1));
                    deserializedDataflowBuiltInTransformationSettings.filter = filter;
                } else if ("map".equals(fieldName)) {
                    List<DataflowBuiltInTransformationMap> map
                        = reader.readArray(reader1 -> DataflowBuiltInTransformationMap.fromJson(reader1));
                    deserializedDataflowBuiltInTransformationSettings.map = map;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowBuiltInTransformationSettings;
        });
    }
}
