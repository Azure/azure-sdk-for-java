// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Broker State Store Custom Policy Settings.
 */
@Fluent
public final class BrokerStateStorePolicySettings implements JsonSerializable<BrokerStateStorePolicySettings> {
    /*
     * List of key and key type to persist to disk.
     */
    private List<BrokerStateStorePolicyResources> stateStoreResources;

    /*
     * Controls if MQTT clients can request for disk persistence via `MQTTv5` user property. Works in addition to other
     * groups (logical OR).
     */
    private BrokerStateStoreDynamic dynamic;

    /**
     * Creates an instance of BrokerStateStorePolicySettings class.
     */
    public BrokerStateStorePolicySettings() {
    }

    /**
     * Get the stateStoreResources property: List of key and key type to persist to disk.
     * 
     * @return the stateStoreResources value.
     */
    public List<BrokerStateStorePolicyResources> stateStoreResources() {
        return this.stateStoreResources;
    }

    /**
     * Set the stateStoreResources property: List of key and key type to persist to disk.
     * 
     * @param stateStoreResources the stateStoreResources value to set.
     * @return the BrokerStateStorePolicySettings object itself.
     */
    public BrokerStateStorePolicySettings
        withStateStoreResources(List<BrokerStateStorePolicyResources> stateStoreResources) {
        this.stateStoreResources = stateStoreResources;
        return this;
    }

    /**
     * Get the dynamic property: Controls if MQTT clients can request for disk persistence via `MQTTv5` user property.
     * Works in addition to other groups (logical OR).
     * 
     * @return the dynamic value.
     */
    public BrokerStateStoreDynamic dynamic() {
        return this.dynamic;
    }

    /**
     * Set the dynamic property: Controls if MQTT clients can request for disk persistence via `MQTTv5` user property.
     * Works in addition to other groups (logical OR).
     * 
     * @param dynamic the dynamic value to set.
     * @return the BrokerStateStorePolicySettings object itself.
     */
    public BrokerStateStorePolicySettings withDynamic(BrokerStateStoreDynamic dynamic) {
        this.dynamic = dynamic;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (stateStoreResources() != null) {
            stateStoreResources().forEach(e -> e.validate());
        }
        if (dynamic() != null) {
            dynamic().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("stateStoreResources", this.stateStoreResources,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("dynamic", this.dynamic);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerStateStorePolicySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerStateStorePolicySettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BrokerStateStorePolicySettings.
     */
    public static BrokerStateStorePolicySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerStateStorePolicySettings deserializedBrokerStateStorePolicySettings
                = new BrokerStateStorePolicySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stateStoreResources".equals(fieldName)) {
                    List<BrokerStateStorePolicyResources> stateStoreResources
                        = reader.readArray(reader1 -> BrokerStateStorePolicyResources.fromJson(reader1));
                    deserializedBrokerStateStorePolicySettings.stateStoreResources = stateStoreResources;
                } else if ("dynamic".equals(fieldName)) {
                    deserializedBrokerStateStorePolicySettings.dynamic = BrokerStateStoreDynamic.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerStateStorePolicySettings;
        });
    }
}
