// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Batching configuration.
 */
@Fluent
public final class BatchingConfiguration implements JsonSerializable<BatchingConfiguration> {
    /*
     * Batching latency in seconds.
     */
    private Integer latencySeconds;

    /*
     * Maximum number of messages in a batch.
     */
    private Integer maxMessages;

    /**
     * Creates an instance of BatchingConfiguration class.
     */
    public BatchingConfiguration() {
    }

    /**
     * Get the latencySeconds property: Batching latency in seconds.
     * 
     * @return the latencySeconds value.
     */
    public Integer latencySeconds() {
        return this.latencySeconds;
    }

    /**
     * Set the latencySeconds property: Batching latency in seconds.
     * 
     * @param latencySeconds the latencySeconds value to set.
     * @return the BatchingConfiguration object itself.
     */
    public BatchingConfiguration withLatencySeconds(Integer latencySeconds) {
        this.latencySeconds = latencySeconds;
        return this;
    }

    /**
     * Get the maxMessages property: Maximum number of messages in a batch.
     * 
     * @return the maxMessages value.
     */
    public Integer maxMessages() {
        return this.maxMessages;
    }

    /**
     * Set the maxMessages property: Maximum number of messages in a batch.
     * 
     * @param maxMessages the maxMessages value to set.
     * @return the BatchingConfiguration object itself.
     */
    public BatchingConfiguration withMaxMessages(Integer maxMessages) {
        this.maxMessages = maxMessages;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("latencySeconds", this.latencySeconds);
        jsonWriter.writeNumberField("maxMessages", this.maxMessages);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BatchingConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BatchingConfiguration if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BatchingConfiguration.
     */
    public static BatchingConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BatchingConfiguration deserializedBatchingConfiguration = new BatchingConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("latencySeconds".equals(fieldName)) {
                    deserializedBatchingConfiguration.latencySeconds = reader.getNullable(JsonReader::getInt);
                } else if ("maxMessages".equals(fieldName)) {
                    deserializedBatchingConfiguration.maxMessages = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBatchingConfiguration;
        });
    }
}
