// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker endpoint properties.
 */
@Fluent
public final class DataflowEndpointMqtt implements JsonSerializable<DataflowEndpointMqtt> {
    /*
     * authentication properties. DEFAULT: kubernetes.audience=aio-internal. NOTE - Enum field only property is allowed
     */
    private DataflowEndpointMqttAuthentication authentication;

    /*
     * Client ID prefix. Client ID generated by the dataflow is <prefix>-TBD. Optional; no prefix if omitted.
     */
    private String clientIdPrefix;

    /*
     * Host of the Broker in the form of <hostname>:<port>. Optional; connects to Broker if omitted.
     */
    private String host;

    /*
     * Enable or disable websockets.
     */
    private BrokerProtocolType protocol;

    /*
     * Broker KeepAlive for connection in seconds.
     */
    private Integer keepAliveSeconds;

    /*
     * Whether or not to keep the retain setting.
     */
    private MqttRetainType retain;

    /*
     * The max number of messages to keep in flight. For subscribe, this is the receive maximum. For publish, this is
     * the maximum number of messages to send before waiting for an ack.
     */
    private Integer maxInflightMessages;

    /*
     * Qos for Broker connection.
     */
    private Integer qos;

    /*
     * Session expiry in seconds.
     */
    private Integer sessionExpirySeconds;

    /*
     * TLS configuration.
     */
    private TlsProperties tls;

    /*
     * Cloud event mapping config.
     */
    private CloudEventAttributeType cloudEventAttributes;

    /**
     * Creates an instance of DataflowEndpointMqtt class.
     */
    public DataflowEndpointMqtt() {
    }

    /**
     * Get the authentication property: authentication properties. DEFAULT: kubernetes.audience=aio-internal. NOTE -
     * Enum field only property is allowed.
     * 
     * @return the authentication value.
     */
    public DataflowEndpointMqttAuthentication authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: authentication properties. DEFAULT: kubernetes.audience=aio-internal. NOTE -
     * Enum field only property is allowed.
     * 
     * @param authentication the authentication value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withAuthentication(DataflowEndpointMqttAuthentication authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the clientIdPrefix property: Client ID prefix. Client ID generated by the dataflow is &lt;prefix&gt;-TBD.
     * Optional; no prefix if omitted.
     * 
     * @return the clientIdPrefix value.
     */
    public String clientIdPrefix() {
        return this.clientIdPrefix;
    }

    /**
     * Set the clientIdPrefix property: Client ID prefix. Client ID generated by the dataflow is &lt;prefix&gt;-TBD.
     * Optional; no prefix if omitted.
     * 
     * @param clientIdPrefix the clientIdPrefix value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withClientIdPrefix(String clientIdPrefix) {
        this.clientIdPrefix = clientIdPrefix;
        return this;
    }

    /**
     * Get the host property: Host of the Broker in the form of &lt;hostname&gt;:&lt;port&gt;. Optional; connects to
     * Broker if omitted.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: Host of the Broker in the form of &lt;hostname&gt;:&lt;port&gt;. Optional; connects to
     * Broker if omitted.
     * 
     * @param host the host value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the protocol property: Enable or disable websockets.
     * 
     * @return the protocol value.
     */
    public BrokerProtocolType protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: Enable or disable websockets.
     * 
     * @param protocol the protocol value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withProtocol(BrokerProtocolType protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the keepAliveSeconds property: Broker KeepAlive for connection in seconds.
     * 
     * @return the keepAliveSeconds value.
     */
    public Integer keepAliveSeconds() {
        return this.keepAliveSeconds;
    }

    /**
     * Set the keepAliveSeconds property: Broker KeepAlive for connection in seconds.
     * 
     * @param keepAliveSeconds the keepAliveSeconds value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withKeepAliveSeconds(Integer keepAliveSeconds) {
        this.keepAliveSeconds = keepAliveSeconds;
        return this;
    }

    /**
     * Get the retain property: Whether or not to keep the retain setting.
     * 
     * @return the retain value.
     */
    public MqttRetainType retain() {
        return this.retain;
    }

    /**
     * Set the retain property: Whether or not to keep the retain setting.
     * 
     * @param retain the retain value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withRetain(MqttRetainType retain) {
        this.retain = retain;
        return this;
    }

    /**
     * Get the maxInflightMessages property: The max number of messages to keep in flight. For subscribe, this is the
     * receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
     * 
     * @return the maxInflightMessages value.
     */
    public Integer maxInflightMessages() {
        return this.maxInflightMessages;
    }

    /**
     * Set the maxInflightMessages property: The max number of messages to keep in flight. For subscribe, this is the
     * receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
     * 
     * @param maxInflightMessages the maxInflightMessages value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withMaxInflightMessages(Integer maxInflightMessages) {
        this.maxInflightMessages = maxInflightMessages;
        return this;
    }

    /**
     * Get the qos property: Qos for Broker connection.
     * 
     * @return the qos value.
     */
    public Integer qos() {
        return this.qos;
    }

    /**
     * Set the qos property: Qos for Broker connection.
     * 
     * @param qos the qos value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withQos(Integer qos) {
        this.qos = qos;
        return this;
    }

    /**
     * Get the sessionExpirySeconds property: Session expiry in seconds.
     * 
     * @return the sessionExpirySeconds value.
     */
    public Integer sessionExpirySeconds() {
        return this.sessionExpirySeconds;
    }

    /**
     * Set the sessionExpirySeconds property: Session expiry in seconds.
     * 
     * @param sessionExpirySeconds the sessionExpirySeconds value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withSessionExpirySeconds(Integer sessionExpirySeconds) {
        this.sessionExpirySeconds = sessionExpirySeconds;
        return this;
    }

    /**
     * Get the tls property: TLS configuration.
     * 
     * @return the tls value.
     */
    public TlsProperties tls() {
        return this.tls;
    }

    /**
     * Set the tls property: TLS configuration.
     * 
     * @param tls the tls value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withTls(TlsProperties tls) {
        this.tls = tls;
        return this;
    }

    /**
     * Get the cloudEventAttributes property: Cloud event mapping config.
     * 
     * @return the cloudEventAttributes value.
     */
    public CloudEventAttributeType cloudEventAttributes() {
        return this.cloudEventAttributes;
    }

    /**
     * Set the cloudEventAttributes property: Cloud event mapping config.
     * 
     * @param cloudEventAttributes the cloudEventAttributes value to set.
     * @return the DataflowEndpointMqtt object itself.
     */
    public DataflowEndpointMqtt withCloudEventAttributes(CloudEventAttributeType cloudEventAttributes) {
        this.cloudEventAttributes = cloudEventAttributes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authentication() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property authentication in model DataflowEndpointMqtt"));
        } else {
            authentication().validate();
        }
        if (tls() != null) {
            tls().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowEndpointMqtt.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeStringField("clientIdPrefix", this.clientIdPrefix);
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeNumberField("keepAliveSeconds", this.keepAliveSeconds);
        jsonWriter.writeStringField("retain", this.retain == null ? null : this.retain.toString());
        jsonWriter.writeNumberField("maxInflightMessages", this.maxInflightMessages);
        jsonWriter.writeNumberField("qos", this.qos);
        jsonWriter.writeNumberField("sessionExpirySeconds", this.sessionExpirySeconds);
        jsonWriter.writeJsonField("tls", this.tls);
        jsonWriter.writeStringField("cloudEventAttributes",
            this.cloudEventAttributes == null ? null : this.cloudEventAttributes.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowEndpointMqtt from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowEndpointMqtt if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowEndpointMqtt.
     */
    public static DataflowEndpointMqtt fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowEndpointMqtt deserializedDataflowEndpointMqtt = new DataflowEndpointMqtt();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authentication".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.authentication
                        = DataflowEndpointMqttAuthentication.fromJson(reader);
                } else if ("clientIdPrefix".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.clientIdPrefix = reader.getString();
                } else if ("host".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.host = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.protocol = BrokerProtocolType.fromString(reader.getString());
                } else if ("keepAliveSeconds".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.keepAliveSeconds = reader.getNullable(JsonReader::getInt);
                } else if ("retain".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.retain = MqttRetainType.fromString(reader.getString());
                } else if ("maxInflightMessages".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.maxInflightMessages = reader.getNullable(JsonReader::getInt);
                } else if ("qos".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.qos = reader.getNullable(JsonReader::getInt);
                } else if ("sessionExpirySeconds".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.sessionExpirySeconds = reader.getNullable(JsonReader::getInt);
                } else if ("tls".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.tls = TlsProperties.fromJson(reader);
                } else if ("cloudEventAttributes".equals(fieldName)) {
                    deserializedDataflowEndpointMqtt.cloudEventAttributes
                        = CloudEventAttributeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowEndpointMqtt;
        });
    }
}
