// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowGraph DataflowGraphNode Connection.
 */
@Fluent
public final class DataflowGraphNodeConnection implements JsonSerializable<DataflowGraphNodeConnection> {
    /*
     * Information about the source node.
     */
    private DataflowGraphConnectionInput from;

    /*
     * Information about the destination node.
     */
    private DataflowGraphConnectionOutput to;

    /**
     * Creates an instance of DataflowGraphNodeConnection class.
     */
    public DataflowGraphNodeConnection() {
    }

    /**
     * Get the from property: Information about the source node.
     * 
     * @return the from value.
     */
    public DataflowGraphConnectionInput from() {
        return this.from;
    }

    /**
     * Set the from property: Information about the source node.
     * 
     * @param from the from value to set.
     * @return the DataflowGraphNodeConnection object itself.
     */
    public DataflowGraphNodeConnection withFrom(DataflowGraphConnectionInput from) {
        this.from = from;
        return this;
    }

    /**
     * Get the to property: Information about the destination node.
     * 
     * @return the to value.
     */
    public DataflowGraphConnectionOutput to() {
        return this.to;
    }

    /**
     * Set the to property: Information about the destination node.
     * 
     * @param to the to value to set.
     * @return the DataflowGraphNodeConnection object itself.
     */
    public DataflowGraphNodeConnection withTo(DataflowGraphConnectionOutput to) {
        this.to = to;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (from() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property from in model DataflowGraphNodeConnection"));
        } else {
            from().validate();
        }
        if (to() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property to in model DataflowGraphNodeConnection"));
        } else {
            to().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowGraphNodeConnection.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("from", this.from);
        jsonWriter.writeJsonField("to", this.to);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphNodeConnection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphNodeConnection if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphNodeConnection.
     */
    public static DataflowGraphNodeConnection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphNodeConnection deserializedDataflowGraphNodeConnection = new DataflowGraphNodeConnection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("from".equals(fieldName)) {
                    deserializedDataflowGraphNodeConnection.from = DataflowGraphConnectionInput.fromJson(reader);
                } else if ("to".equals(fieldName)) {
                    deserializedDataflowGraphNodeConnection.to = DataflowGraphConnectionOutput.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphNodeConnection;
        });
    }
}
