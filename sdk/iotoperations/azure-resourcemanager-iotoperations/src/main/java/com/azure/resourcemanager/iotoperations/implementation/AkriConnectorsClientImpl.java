// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.iotoperations.fluent.AkriConnectorsClient;
import com.azure.resourcemanager.iotoperations.fluent.models.AkriConnectorResourceInner;
import com.azure.resourcemanager.iotoperations.implementation.models.AkriConnectorResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in AkriConnectorsClient.
 */
public final class AkriConnectorsClientImpl implements AkriConnectorsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final AkriConnectorsService service;

    /**
     * The service client containing this operation class.
     */
    private final IoTOperationsManagementClientImpl client;

    /**
     * Initializes an instance of AkriConnectorsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    AkriConnectorsClientImpl(IoTOperationsManagementClientImpl client) {
        this.service
            = RestProxy.create(AkriConnectorsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for IoTOperationsManagementClientAkriConnectors to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "IoTOperationsManagementClientAkriConnectors")
    public interface AkriConnectorsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors/{connectorName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AkriConnectorResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @PathParam("connectorName") String connectorName, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors/{connectorName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AkriConnectorResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @PathParam("connectorName") String connectorName, @HeaderParam("Accept") String accept, Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors/{connectorName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @PathParam("connectorName") String connectorName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") AkriConnectorResourceInner resource,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors/{connectorName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @PathParam("connectorName") String connectorName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") AkriConnectorResourceInner resource,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors/{connectorName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @PathParam("connectorName") String connectorName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors/{connectorName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @PathParam("connectorName") String connectorName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AkriConnectorResourceListResult>> listByTemplate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/akriConnectorTemplates/{akriConnectorTemplateName}/connectors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AkriConnectorResourceListResult> listByTemplateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("akriConnectorTemplateName") String akriConnectorTemplateName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AkriConnectorResourceListResult>> listByTemplateNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<AkriConnectorResourceListResult> listByTemplateNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AkriConnectorResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AkriConnectorResourceInner>> getWithResponseAsync(String resourceGroupName,
        String instanceName, String akriConnectorTemplateName, String connectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName,
                connectorName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AkriConnectorResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AkriConnectorResourceInner> getAsync(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName) {
        return getWithResponseAsync(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AkriConnectorResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AkriConnectorResourceInner> getWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, accept, context);
    }

    /**
     * Get a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a AkriConnectorResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AkriConnectorResourceInner get(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName) {
        return getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, Context.NONE)
            .getValue();
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return akriConnector resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String instanceName, String akriConnectorTemplateName, String connectorName,
        AkriConnectorResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (resource == null) {
            return Mono.error(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName,
                connectorName, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return akriConnector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, AkriConnectorResourceInner resource) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName, connectorName,
            contentType, accept, resource, Context.NONE);
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return akriConnector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, AkriConnectorResourceInner resource, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (resource == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resource is required and cannot be null."));
        } else {
            resource.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName, connectorName,
            contentType, accept, resource, context);
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of akriConnector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AkriConnectorResourceInner>, AkriConnectorResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String instanceName, String akriConnectorTemplateName, String connectorName,
        AkriConnectorResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, instanceName,
            akriConnectorTemplateName, connectorName, resource);
        return this.client.<AkriConnectorResourceInner, AkriConnectorResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), AkriConnectorResourceInner.class, AkriConnectorResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of akriConnector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AkriConnectorResourceInner>, AkriConnectorResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String instanceName, String akriConnectorTemplateName, String connectorName,
        AkriConnectorResourceInner resource) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, instanceName,
            akriConnectorTemplateName, connectorName, resource);
        return this.client.<AkriConnectorResourceInner, AkriConnectorResourceInner>getLroResult(response,
            AkriConnectorResourceInner.class, AkriConnectorResourceInner.class, Context.NONE);
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of akriConnector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AkriConnectorResourceInner>, AkriConnectorResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String instanceName, String akriConnectorTemplateName, String connectorName,
        AkriConnectorResourceInner resource, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, instanceName,
            akriConnectorTemplateName, connectorName, resource, context);
        return this.client.<AkriConnectorResourceInner, AkriConnectorResourceInner>getLroResult(response,
            AkriConnectorResourceInner.class, AkriConnectorResourceInner.class, context);
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return akriConnector resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AkriConnectorResourceInner> createOrUpdateAsync(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, AkriConnectorResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName,
            resource).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return akriConnector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AkriConnectorResourceInner createOrUpdate(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, AkriConnectorResourceInner resource) {
        return beginCreateOrUpdate(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, resource)
            .getFinalResult();
    }

    /**
     * Create a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return akriConnector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AkriConnectorResourceInner createOrUpdate(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, AkriConnectorResourceInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, resource,
            context).getFinalResult();
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName,
                connectorName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName, connectorName,
            Context.NONE);
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        if (connectorName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName, connectorName,
            context);
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        String connectorName) {
        return beginDeleteAsync(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        String connectorName) {
        beginDelete(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName).getFinalResult();
    }

    /**
     * Delete a AkriConnectorResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param connectorName Name of AkriConnector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        String connectorName, Context context) {
        beginDelete(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, context)
            .getFinalResult();
    }

    /**
     * List AkriConnectorResource resources by AkriConnectorTemplateResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AkriConnectorResourceInner>> listByTemplateSinglePageAsync(String resourceGroupName,
        String instanceName, String akriConnectorTemplateName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByTemplate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, akriConnectorTemplateName, accept,
                context))
            .<PagedResponse<AkriConnectorResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List AkriConnectorResource resources by AkriConnectorTemplateResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AkriConnectorResourceInner> listByTemplateAsync(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName) {
        return new PagedFlux<>(
            () -> listByTemplateSinglePageAsync(resourceGroupName, instanceName, akriConnectorTemplateName),
            nextLink -> listByTemplateNextSinglePageAsync(nextLink));
    }

    /**
     * List AkriConnectorResource resources by AkriConnectorTemplateResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AkriConnectorResourceInner> listByTemplateSinglePage(String resourceGroupName,
        String instanceName, String akriConnectorTemplateName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AkriConnectorResourceListResult> res = service.listByTemplateSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, instanceName,
            akriConnectorTemplateName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List AkriConnectorResource resources by AkriConnectorTemplateResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AkriConnectorResourceInner> listByTemplateSinglePage(String resourceGroupName,
        String instanceName, String akriConnectorTemplateName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (instanceName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter instanceName is required and cannot be null."));
        }
        if (akriConnectorTemplateName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter akriConnectorTemplateName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AkriConnectorResourceListResult> res = service.listByTemplateSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, instanceName,
            akriConnectorTemplateName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List AkriConnectorResource resources by AkriConnectorTemplateResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AkriConnectorResourceInner> listByTemplate(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName) {
        return new PagedIterable<>(
            () -> listByTemplateSinglePage(resourceGroupName, instanceName, akriConnectorTemplateName),
            nextLink -> listByTemplateNextSinglePage(nextLink));
    }

    /**
     * List AkriConnectorResource resources by AkriConnectorTemplateResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param akriConnectorTemplateName Name of AkriConnectorTemplate resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AkriConnectorResourceInner> listByTemplate(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, Context context) {
        return new PagedIterable<>(
            () -> listByTemplateSinglePage(resourceGroupName, instanceName, akriConnectorTemplateName, context),
            nextLink -> listByTemplateNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AkriConnectorResourceInner>> listByTemplateNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByTemplateNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AkriConnectorResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AkriConnectorResourceInner> listByTemplateNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AkriConnectorResourceListResult> res
            = service.listByTemplateNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a AkriConnectorResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<AkriConnectorResourceInner> listByTemplateNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<AkriConnectorResourceListResult> res
            = service.listByTemplateNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorsClientImpl.class);
}
