// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * X509 for BrokerAuthentication.
 */
@Fluent
public final class BrokerAuthenticatorMethodX509 implements JsonSerializable<BrokerAuthenticatorMethodX509> {
    /*
     * X509 authorization attributes properties.
     */
    private Map<String, BrokerAuthenticatorMethodX509Attributes> authorizationAttributes;

    /*
     * Name of the trusted client ca cert resource.
     */
    private String trustedClientCaCert;

    /**
     * Creates an instance of BrokerAuthenticatorMethodX509 class.
     */
    public BrokerAuthenticatorMethodX509() {
    }

    /**
     * Get the authorizationAttributes property: X509 authorization attributes properties.
     * 
     * @return the authorizationAttributes value.
     */
    public Map<String, BrokerAuthenticatorMethodX509Attributes> authorizationAttributes() {
        return this.authorizationAttributes;
    }

    /**
     * Set the authorizationAttributes property: X509 authorization attributes properties.
     * 
     * @param authorizationAttributes the authorizationAttributes value to set.
     * @return the BrokerAuthenticatorMethodX509 object itself.
     */
    public BrokerAuthenticatorMethodX509
        withAuthorizationAttributes(Map<String, BrokerAuthenticatorMethodX509Attributes> authorizationAttributes) {
        this.authorizationAttributes = authorizationAttributes;
        return this;
    }

    /**
     * Get the trustedClientCaCert property: Name of the trusted client ca cert resource.
     * 
     * @return the trustedClientCaCert value.
     */
    public String trustedClientCaCert() {
        return this.trustedClientCaCert;
    }

    /**
     * Set the trustedClientCaCert property: Name of the trusted client ca cert resource.
     * 
     * @param trustedClientCaCert the trustedClientCaCert value to set.
     * @return the BrokerAuthenticatorMethodX509 object itself.
     */
    public BrokerAuthenticatorMethodX509 withTrustedClientCaCert(String trustedClientCaCert) {
        this.trustedClientCaCert = trustedClientCaCert;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (authorizationAttributes() != null) {
            authorizationAttributes().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("authorizationAttributes", this.authorizationAttributes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("trustedClientCaCert", this.trustedClientCaCert);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerAuthenticatorMethodX509 from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerAuthenticatorMethodX509 if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BrokerAuthenticatorMethodX509.
     */
    public static BrokerAuthenticatorMethodX509 fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerAuthenticatorMethodX509 deserializedBrokerAuthenticatorMethodX509
                = new BrokerAuthenticatorMethodX509();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorizationAttributes".equals(fieldName)) {
                    Map<String, BrokerAuthenticatorMethodX509Attributes> authorizationAttributes
                        = reader.readMap(reader1 -> BrokerAuthenticatorMethodX509Attributes.fromJson(reader1));
                    deserializedBrokerAuthenticatorMethodX509.authorizationAttributes = authorizationAttributes;
                } else if ("trustedClientCaCert".equals(fieldName)) {
                    deserializedBrokerAuthenticatorMethodX509.trustedClientCaCert = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerAuthenticatorMethodX509;
        });
    }
}
