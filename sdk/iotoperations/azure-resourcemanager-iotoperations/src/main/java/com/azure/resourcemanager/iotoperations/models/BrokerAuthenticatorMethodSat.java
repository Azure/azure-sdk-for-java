// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Service Account Token for BrokerAuthentication.
 */
@Fluent
public final class BrokerAuthenticatorMethodSat implements JsonSerializable<BrokerAuthenticatorMethodSat> {
    /*
     * List of allowed audience.
     */
    private List<String> audiences;

    /**
     * Creates an instance of BrokerAuthenticatorMethodSat class.
     */
    public BrokerAuthenticatorMethodSat() {
    }

    /**
     * Get the audiences property: List of allowed audience.
     * 
     * @return the audiences value.
     */
    public List<String> audiences() {
        return this.audiences;
    }

    /**
     * Set the audiences property: List of allowed audience.
     * 
     * @param audiences the audiences value to set.
     * @return the BrokerAuthenticatorMethodSat object itself.
     */
    public BrokerAuthenticatorMethodSat withAudiences(List<String> audiences) {
        this.audiences = audiences;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (audiences() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property audiences in model BrokerAuthenticatorMethodSat"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrokerAuthenticatorMethodSat.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("audiences", this.audiences, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerAuthenticatorMethodSat from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerAuthenticatorMethodSat if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerAuthenticatorMethodSat.
     */
    public static BrokerAuthenticatorMethodSat fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerAuthenticatorMethodSat deserializedBrokerAuthenticatorMethodSat = new BrokerAuthenticatorMethodSat();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("audiences".equals(fieldName)) {
                    List<String> audiences = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerAuthenticatorMethodSat.audiences = audiences;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerAuthenticatorMethodSat;
        });
    }
}
