// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * GenerateResourceLimits properties.
 */
@Fluent
public final class GenerateResourceLimits implements JsonSerializable<GenerateResourceLimits> {
    /*
     * The toggle to enable/disable cpu resource limits.
     */
    private OperationalMode cpu;

    /**
     * Creates an instance of GenerateResourceLimits class.
     */
    public GenerateResourceLimits() {
    }

    /**
     * Get the cpu property: The toggle to enable/disable cpu resource limits.
     * 
     * @return the cpu value.
     */
    public OperationalMode cpu() {
        return this.cpu;
    }

    /**
     * Set the cpu property: The toggle to enable/disable cpu resource limits.
     * 
     * @param cpu the cpu value to set.
     * @return the GenerateResourceLimits object itself.
     */
    public GenerateResourceLimits withCpu(OperationalMode cpu) {
        this.cpu = cpu;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cpu", this.cpu == null ? null : this.cpu.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GenerateResourceLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GenerateResourceLimits if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GenerateResourceLimits.
     */
    public static GenerateResourceLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GenerateResourceLimits deserializedGenerateResourceLimits = new GenerateResourceLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cpu".equals(fieldName)) {
                    deserializedGenerateResourceLimits.cpu = OperationalMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGenerateResourceLimits;
        });
    }
}
