// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.iotoperations.fluent.DataflowGraphsClient;
import com.azure.resourcemanager.iotoperations.fluent.models.DataflowGraphResourceInner;
import com.azure.resourcemanager.iotoperations.implementation.models.DataflowGraphResourceListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in DataflowGraphsClient.
 */
public final class DataflowGraphsClientImpl implements DataflowGraphsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final DataflowGraphsService service;

    /**
     * The service client containing this operation class.
     */
    private final IoTOperationsManagementClientImpl client;

    /**
     * Initializes an instance of DataflowGraphsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    DataflowGraphsClientImpl(IoTOperationsManagementClientImpl client) {
        this.service
            = RestProxy.create(DataflowGraphsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for IoTOperationsManagementClientDataflowGraphs to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "IoTOperationsManagementClientDataflowGraphs")
    public interface DataflowGraphsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataflowGraphResourceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName,
            @PathParam("dataflowGraphName") String dataflowGraphName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DataflowGraphResourceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName,
            @PathParam("dataflowGraphName") String dataflowGraphName, @HeaderParam("Accept") String accept,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName,
            @PathParam("dataflowGraphName") String dataflowGraphName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DataflowGraphResourceInner resource,
            Context context);

        @Put("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> createOrUpdateSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName,
            @PathParam("dataflowGraphName") String dataflowGraphName, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DataflowGraphResourceInner resource,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName,
            @PathParam("dataflowGraphName") String dataflowGraphName, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs/{dataflowGraphName}")
        @ExpectedResponses({ 202, 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> deleteSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName,
            @PathParam("dataflowGraphName") String dataflowGraphName, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataflowGraphResourceListResult>> listByDataflowProfile(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowProfiles/{dataflowProfileName}/dataflowGraphs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DataflowGraphResourceListResult> listByDataflowProfileSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("instanceName") String instanceName,
            @PathParam("dataflowProfileName") String dataflowProfileName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DataflowGraphResourceListResult>> listByDataflowProfileNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<DataflowGraphResourceListResult> listByDataflowProfileNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataflowGraphResource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DataflowGraphResourceInner>> getWithResponseAsync(String resourceGroupName,
        String instanceName, String dataflowProfileName, String dataflowGraphName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName,
                dataflowGraphName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataflowGraphResource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataflowGraphResourceInner> getAsync(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName) {
        return getWithResponseAsync(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataflowGraphResource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DataflowGraphResourceInner> getWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, Context context) {
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, accept, context);
    }

    /**
     * Get a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a DataflowGraphResource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataflowGraphResourceInner get(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName) {
        return getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, Context.NONE)
            .getValue();
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance dataflowEndpoint resource along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(String resourceGroupName,
        String instanceName, String dataflowProfileName, String dataflowGraphName,
        DataflowGraphResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createOrUpdate(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName,
                dataflowGraphName, contentType, accept, resource, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance dataflowEndpoint resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, DataflowGraphResourceInner resource) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName,
            contentType, accept, resource, Context.NONE);
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance dataflowEndpoint resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> createOrUpdateWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, DataflowGraphResourceInner resource, Context context) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createOrUpdateSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName,
            contentType, accept, resource, context);
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of instance dataflowEndpoint resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<DataflowGraphResourceInner>, DataflowGraphResourceInner> beginCreateOrUpdateAsync(
        String resourceGroupName, String instanceName, String dataflowProfileName, String dataflowGraphName,
        DataflowGraphResourceInner resource) {
        Mono<Response<Flux<ByteBuffer>>> mono = createOrUpdateWithResponseAsync(resourceGroupName, instanceName,
            dataflowProfileName, dataflowGraphName, resource);
        return this.client.<DataflowGraphResourceInner, DataflowGraphResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), DataflowGraphResourceInner.class, DataflowGraphResourceInner.class,
            this.client.getContext());
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance dataflowEndpoint resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DataflowGraphResourceInner>, DataflowGraphResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String instanceName, String dataflowProfileName, String dataflowGraphName,
        DataflowGraphResourceInner resource) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, instanceName, dataflowProfileName,
            dataflowGraphName, resource);
        return this.client.<DataflowGraphResourceInner, DataflowGraphResourceInner>getLroResult(response,
            DataflowGraphResourceInner.class, DataflowGraphResourceInner.class, Context.NONE);
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of instance dataflowEndpoint resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<DataflowGraphResourceInner>, DataflowGraphResourceInner> beginCreateOrUpdate(
        String resourceGroupName, String instanceName, String dataflowProfileName, String dataflowGraphName,
        DataflowGraphResourceInner resource, Context context) {
        Response<BinaryData> response = createOrUpdateWithResponse(resourceGroupName, instanceName, dataflowProfileName,
            dataflowGraphName, resource, context);
        return this.client.<DataflowGraphResourceInner, DataflowGraphResourceInner>getLroResult(response,
            DataflowGraphResourceInner.class, DataflowGraphResourceInner.class, context);
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance dataflowEndpoint resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DataflowGraphResourceInner> createOrUpdateAsync(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, DataflowGraphResourceInner resource) {
        return beginCreateOrUpdateAsync(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName,
            resource).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance dataflowEndpoint resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataflowGraphResourceInner createOrUpdate(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, DataflowGraphResourceInner resource) {
        return beginCreateOrUpdate(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, resource)
            .getFinalResult();
    }

    /**
     * Create a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return instance dataflowEndpoint resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DataflowGraphResourceInner createOrUpdate(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, DataflowGraphResourceInner resource, Context context) {
        return beginCreateOrUpdate(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, resource,
            context).getFinalResult();
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName) {
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName,
                dataflowGraphName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName,
            Context.NONE);
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> deleteWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, Context context) {
        return service.deleteSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName,
            context);
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = deleteWithResponseAsync(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, Context context) {
        Response<BinaryData> response
            = deleteWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName) {
        return beginDeleteAsync(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName) {
        beginDelete(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName).getFinalResult();
    }

    /**
     * Delete a DataflowGraphResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param dataflowGraphName Name of Instance dataflowEndpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName, Context context) {
        beginDelete(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, context).getFinalResult();
    }

    /**
     * List DataflowGraphResource resources by DataflowProfileResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataflowGraphResourceInner>> listByDataflowProfileSinglePageAsync(
        String resourceGroupName, String instanceName, String dataflowProfileName) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByDataflowProfile(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, instanceName,
                dataflowProfileName, accept, context))
            .<PagedResponse<DataflowGraphResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List DataflowGraphResource resources by DataflowProfileResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<DataflowGraphResourceInner> listByDataflowProfileAsync(String resourceGroupName,
        String instanceName, String dataflowProfileName) {
        return new PagedFlux<>(
            () -> listByDataflowProfileSinglePageAsync(resourceGroupName, instanceName, dataflowProfileName),
            nextLink -> listByDataflowProfileNextSinglePageAsync(nextLink));
    }

    /**
     * List DataflowGraphResource resources by DataflowProfileResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DataflowGraphResourceInner> listByDataflowProfileSinglePage(String resourceGroupName,
        String instanceName, String dataflowProfileName) {
        final String accept = "application/json";
        Response<DataflowGraphResourceListResult> res = service.listByDataflowProfileSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, instanceName,
            dataflowProfileName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DataflowGraphResource resources by DataflowProfileResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DataflowGraphResourceInner> listByDataflowProfileSinglePage(String resourceGroupName,
        String instanceName, String dataflowProfileName, Context context) {
        final String accept = "application/json";
        Response<DataflowGraphResourceListResult> res
            = service.listByDataflowProfileSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, instanceName, dataflowProfileName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List DataflowGraphResource resources by DataflowProfileResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataflowGraphResourceInner> listByDataflowProfile(String resourceGroupName,
        String instanceName, String dataflowProfileName) {
        return new PagedIterable<>(
            () -> listByDataflowProfileSinglePage(resourceGroupName, instanceName, dataflowProfileName),
            nextLink -> listByDataflowProfileNextSinglePage(nextLink));
    }

    /**
     * List DataflowGraphResource resources by DataflowProfileResource.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param instanceName Name of instance.
     * @param dataflowProfileName Name of Instance dataflowProfile resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<DataflowGraphResourceInner> listByDataflowProfile(String resourceGroupName,
        String instanceName, String dataflowProfileName, Context context) {
        return new PagedIterable<>(
            () -> listByDataflowProfileSinglePage(resourceGroupName, instanceName, dataflowProfileName, context),
            nextLink -> listByDataflowProfileNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<DataflowGraphResourceInner>> listByDataflowProfileNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByDataflowProfileNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<DataflowGraphResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DataflowGraphResourceInner> listByDataflowProfileNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<DataflowGraphResourceListResult> res
            = service.listByDataflowProfileNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a DataflowGraphResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<DataflowGraphResourceInner> listByDataflowProfileNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<DataflowGraphResourceListResult> res
            = service.listByDataflowProfileNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
