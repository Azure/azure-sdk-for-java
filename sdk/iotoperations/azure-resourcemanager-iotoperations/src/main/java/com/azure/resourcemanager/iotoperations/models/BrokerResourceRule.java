// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Broker Resource Rule properties. This defines the objects that represent the actions or topics, such as -
 * method.Connect, method.Publish, etc.
 */
@Fluent
public final class BrokerResourceRule implements JsonSerializable<BrokerResourceRule> {
    /*
     * Give access for a Broker method (i.e., Connect, Subscribe, or Publish).
     */
    private BrokerResourceDefinitionMethods method;

    /*
     * A list of client IDs that match the clients. The client IDs are case-sensitive and must match the client IDs
     * provided by the clients during connection. This subfield may be set if the method is Connect.
     */
    private List<String> clientIds;

    /*
     * A list of topics or topic patterns that match the topics that the clients can publish or subscribe to. This
     * subfield is required if the method is Publish or Subscribe.
     */
    private List<String> topics;

    /**
     * Creates an instance of BrokerResourceRule class.
     */
    public BrokerResourceRule() {
    }

    /**
     * Get the method property: Give access for a Broker method (i.e., Connect, Subscribe, or Publish).
     * 
     * @return the method value.
     */
    public BrokerResourceDefinitionMethods method() {
        return this.method;
    }

    /**
     * Set the method property: Give access for a Broker method (i.e., Connect, Subscribe, or Publish).
     * 
     * @param method the method value to set.
     * @return the BrokerResourceRule object itself.
     */
    public BrokerResourceRule withMethod(BrokerResourceDefinitionMethods method) {
        this.method = method;
        return this;
    }

    /**
     * Get the clientIds property: A list of client IDs that match the clients. The client IDs are case-sensitive and
     * must match the client IDs provided by the clients during connection. This subfield may be set if the method is
     * Connect.
     * 
     * @return the clientIds value.
     */
    public List<String> clientIds() {
        return this.clientIds;
    }

    /**
     * Set the clientIds property: A list of client IDs that match the clients. The client IDs are case-sensitive and
     * must match the client IDs provided by the clients during connection. This subfield may be set if the method is
     * Connect.
     * 
     * @param clientIds the clientIds value to set.
     * @return the BrokerResourceRule object itself.
     */
    public BrokerResourceRule withClientIds(List<String> clientIds) {
        this.clientIds = clientIds;
        return this;
    }

    /**
     * Get the topics property: A list of topics or topic patterns that match the topics that the clients can publish or
     * subscribe to. This subfield is required if the method is Publish or Subscribe.
     * 
     * @return the topics value.
     */
    public List<String> topics() {
        return this.topics;
    }

    /**
     * Set the topics property: A list of topics or topic patterns that match the topics that the clients can publish or
     * subscribe to. This subfield is required if the method is Publish or Subscribe.
     * 
     * @param topics the topics value to set.
     * @return the BrokerResourceRule object itself.
     */
    public BrokerResourceRule withTopics(List<String> topics) {
        this.topics = topics;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (method() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property method in model BrokerResourceRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrokerResourceRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
        jsonWriter.writeArrayField("clientIds", this.clientIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("topics", this.topics, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerResourceRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerResourceRule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerResourceRule.
     */
    public static BrokerResourceRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerResourceRule deserializedBrokerResourceRule = new BrokerResourceRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("method".equals(fieldName)) {
                    deserializedBrokerResourceRule.method
                        = BrokerResourceDefinitionMethods.fromString(reader.getString());
                } else if ("clientIds".equals(fieldName)) {
                    List<String> clientIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerResourceRule.clientIds = clientIds;
                } else if ("topics".equals(fieldName)) {
                    List<String> topics = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerResourceRule.topics = topics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerResourceRule;
        });
    }
}
