// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The features of the AIO Instance.
 */
@Fluent
public final class InstanceFeature implements JsonSerializable<InstanceFeature> {
    /*
     * The state of the feature.
     */
    private InstanceFeatureMode mode;

    /*
     * The settings of the feature.
     */
    private Map<String, OperationalMode> settings;

    /**
     * Creates an instance of InstanceFeature class.
     */
    public InstanceFeature() {
    }

    /**
     * Get the mode property: The state of the feature.
     * 
     * @return the mode value.
     */
    public InstanceFeatureMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The state of the feature.
     * 
     * @param mode the mode value to set.
     * @return the InstanceFeature object itself.
     */
    public InstanceFeature withMode(InstanceFeatureMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the settings property: The settings of the feature.
     * 
     * @return the settings value.
     */
    public Map<String, OperationalMode> settings() {
        return this.settings;
    }

    /**
     * Set the settings property: The settings of the feature.
     * 
     * @param settings the settings value to set.
     * @return the InstanceFeature object itself.
     */
    public InstanceFeature withSettings(Map<String, OperationalMode> settings) {
        this.settings = settings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeMapField("settings", this.settings,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InstanceFeature from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InstanceFeature if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the InstanceFeature.
     */
    public static InstanceFeature fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InstanceFeature deserializedInstanceFeature = new InstanceFeature();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedInstanceFeature.mode = InstanceFeatureMode.fromString(reader.getString());
                } else if ("settings".equals(fieldName)) {
                    Map<String, OperationalMode> settings
                        = reader.readMap(reader1 -> OperationalMode.fromString(reader1.getString()));
                    deserializedInstanceFeature.settings = settings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInstanceFeature;
        });
    }
}
