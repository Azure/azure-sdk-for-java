// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateHelmContainerRegistry properties.
 */
@Fluent
public final class AkriConnectorTemplateHelmContainerRegistry extends AkriConnectorTemplateHelmRegistrySettings {
    /*
     * The registrySettingsType property.
     */
    private AkriConnectorTemplateHelmRegistrySettingsType registrySettingsType
        = AkriConnectorTemplateHelmRegistrySettingsType.CONTAINER_REGISTRY;

    /*
     * The registry settings for the container registry.
     */
    private AkriConnectorTemplateHelmContainerRegistrySettings containerRegistrySettings;

    /**
     * Creates an instance of AkriConnectorTemplateHelmContainerRegistry class.
     */
    public AkriConnectorTemplateHelmContainerRegistry() {
    }

    /**
     * Get the registrySettingsType property: The registrySettingsType property.
     * 
     * @return the registrySettingsType value.
     */
    @Override
    public AkriConnectorTemplateHelmRegistrySettingsType registrySettingsType() {
        return this.registrySettingsType;
    }

    /**
     * Get the containerRegistrySettings property: The registry settings for the container registry.
     * 
     * @return the containerRegistrySettings value.
     */
    public AkriConnectorTemplateHelmContainerRegistrySettings containerRegistrySettings() {
        return this.containerRegistrySettings;
    }

    /**
     * Set the containerRegistrySettings property: The registry settings for the container registry.
     * 
     * @param containerRegistrySettings the containerRegistrySettings value to set.
     * @return the AkriConnectorTemplateHelmContainerRegistry object itself.
     */
    public AkriConnectorTemplateHelmContainerRegistry
        withContainerRegistrySettings(AkriConnectorTemplateHelmContainerRegistrySettings containerRegistrySettings) {
        this.containerRegistrySettings = containerRegistrySettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (containerRegistrySettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property containerRegistrySettings in model AkriConnectorTemplateHelmContainerRegistry"));
        } else {
            containerRegistrySettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorTemplateHelmContainerRegistry.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("containerRegistrySettings", this.containerRegistrySettings);
        jsonWriter.writeStringField("registrySettingsType",
            this.registrySettingsType == null ? null : this.registrySettingsType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateHelmContainerRegistry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateHelmContainerRegistry if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateHelmContainerRegistry.
     */
    public static AkriConnectorTemplateHelmContainerRegistry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateHelmContainerRegistry deserializedAkriConnectorTemplateHelmContainerRegistry
                = new AkriConnectorTemplateHelmContainerRegistry();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("containerRegistrySettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmContainerRegistry.containerRegistrySettings
                        = AkriConnectorTemplateHelmContainerRegistrySettings.fromJson(reader);
                } else if ("registrySettingsType".equals(fieldName)) {
                    deserializedAkriConnectorTemplateHelmContainerRegistry.registrySettingsType
                        = AkriConnectorTemplateHelmRegistrySettingsType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateHelmContainerRegistry;
        });
    }
}
