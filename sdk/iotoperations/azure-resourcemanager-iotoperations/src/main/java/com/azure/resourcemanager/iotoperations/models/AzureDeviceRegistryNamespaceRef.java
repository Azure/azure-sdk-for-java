// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Device Registry Namespace reference.
 */
@Fluent
public final class AzureDeviceRegistryNamespaceRef implements JsonSerializable<AzureDeviceRegistryNamespaceRef> {
    /*
     * The resource ID of the Azure Device Registry Namespace.
     */
    private String resourceId;

    /**
     * Creates an instance of AzureDeviceRegistryNamespaceRef class.
     */
    public AzureDeviceRegistryNamespaceRef() {
    }

    /**
     * Get the resourceId property: The resource ID of the Azure Device Registry Namespace.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The resource ID of the Azure Device Registry Namespace.
     * 
     * @param resourceId the resourceId value to set.
     * @return the AzureDeviceRegistryNamespaceRef object itself.
     */
    public AzureDeviceRegistryNamespaceRef withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureDeviceRegistryNamespaceRef from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureDeviceRegistryNamespaceRef if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureDeviceRegistryNamespaceRef.
     */
    public static AzureDeviceRegistryNamespaceRef fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureDeviceRegistryNamespaceRef deserializedAzureDeviceRegistryNamespaceRef
                = new AzureDeviceRegistryNamespaceRef();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedAzureDeviceRegistryNamespaceRef.resourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureDeviceRegistryNamespaceRef;
        });
    }
}
