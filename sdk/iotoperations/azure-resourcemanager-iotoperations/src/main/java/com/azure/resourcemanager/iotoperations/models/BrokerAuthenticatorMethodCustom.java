// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Custom method for BrokerAuthentication.
 */
@Fluent
public final class BrokerAuthenticatorMethodCustom implements JsonSerializable<BrokerAuthenticatorMethodCustom> {
    /*
     * Optional authentication needed for authenticating with the custom authentication server.
     */
    private BrokerAuthenticatorCustomAuth auth;

    /*
     * Optional CA certificate for validating the custom authentication server's certificate.
     */
    private String caCertConfigMap;

    /*
     * Endpoint of the custom authentication server. Must be an HTTPS endpoint.
     */
    private String endpoint;

    /*
     * Additional HTTP headers to pass to the custom authentication server.
     */
    private Map<String, String> headers;

    /**
     * Creates an instance of BrokerAuthenticatorMethodCustom class.
     */
    public BrokerAuthenticatorMethodCustom() {
    }

    /**
     * Get the auth property: Optional authentication needed for authenticating with the custom authentication server.
     * 
     * @return the auth value.
     */
    public BrokerAuthenticatorCustomAuth auth() {
        return this.auth;
    }

    /**
     * Set the auth property: Optional authentication needed for authenticating with the custom authentication server.
     * 
     * @param auth the auth value to set.
     * @return the BrokerAuthenticatorMethodCustom object itself.
     */
    public BrokerAuthenticatorMethodCustom withAuth(BrokerAuthenticatorCustomAuth auth) {
        this.auth = auth;
        return this;
    }

    /**
     * Get the caCertConfigMap property: Optional CA certificate for validating the custom authentication server's
     * certificate.
     * 
     * @return the caCertConfigMap value.
     */
    public String caCertConfigMap() {
        return this.caCertConfigMap;
    }

    /**
     * Set the caCertConfigMap property: Optional CA certificate for validating the custom authentication server's
     * certificate.
     * 
     * @param caCertConfigMap the caCertConfigMap value to set.
     * @return the BrokerAuthenticatorMethodCustom object itself.
     */
    public BrokerAuthenticatorMethodCustom withCaCertConfigMap(String caCertConfigMap) {
        this.caCertConfigMap = caCertConfigMap;
        return this;
    }

    /**
     * Get the endpoint property: Endpoint of the custom authentication server. Must be an HTTPS endpoint.
     * 
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Set the endpoint property: Endpoint of the custom authentication server. Must be an HTTPS endpoint.
     * 
     * @param endpoint the endpoint value to set.
     * @return the BrokerAuthenticatorMethodCustom object itself.
     */
    public BrokerAuthenticatorMethodCustom withEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * Get the headers property: Additional HTTP headers to pass to the custom authentication server.
     * 
     * @return the headers value.
     */
    public Map<String, String> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: Additional HTTP headers to pass to the custom authentication server.
     * 
     * @param headers the headers value to set.
     * @return the BrokerAuthenticatorMethodCustom object itself.
     */
    public BrokerAuthenticatorMethodCustom withHeaders(Map<String, String> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (auth() != null) {
            auth().validate();
        }
        if (endpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpoint in model BrokerAuthenticatorMethodCustom"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrokerAuthenticatorMethodCustom.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpoint", this.endpoint);
        jsonWriter.writeJsonField("auth", this.auth);
        jsonWriter.writeStringField("caCertConfigMap", this.caCertConfigMap);
        jsonWriter.writeMapField("headers", this.headers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerAuthenticatorMethodCustom from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerAuthenticatorMethodCustom if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerAuthenticatorMethodCustom.
     */
    public static BrokerAuthenticatorMethodCustom fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerAuthenticatorMethodCustom deserializedBrokerAuthenticatorMethodCustom
                = new BrokerAuthenticatorMethodCustom();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpoint".equals(fieldName)) {
                    deserializedBrokerAuthenticatorMethodCustom.endpoint = reader.getString();
                } else if ("auth".equals(fieldName)) {
                    deserializedBrokerAuthenticatorMethodCustom.auth = BrokerAuthenticatorCustomAuth.fromJson(reader);
                } else if ("caCertConfigMap".equals(fieldName)) {
                    deserializedBrokerAuthenticatorMethodCustom.caCertConfigMap = reader.getString();
                } else if ("headers".equals(fieldName)) {
                    Map<String, String> headers = reader.readMap(reader1 -> reader1.getString());
                    deserializedBrokerAuthenticatorMethodCustom.headers = headers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerAuthenticatorMethodCustom;
        });
    }
}
