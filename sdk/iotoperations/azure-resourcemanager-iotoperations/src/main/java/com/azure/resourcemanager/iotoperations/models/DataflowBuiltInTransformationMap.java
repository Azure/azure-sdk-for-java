// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Dataflow BuiltIn Transformation map properties.
 */
@Fluent
public final class DataflowBuiltInTransformationMap implements JsonSerializable<DataflowBuiltInTransformationMap> {
    /*
     * Type of transformation.
     */
    private DataflowMappingType type;

    /*
     * A user provided optional description of the mapping function.
     */
    private String description;

    /*
     * List of fields for mapping in JSON path expression.
     */
    private List<String> inputs;

    /*
     * Modify the inputs field(s) to the final output field. Example: $1 * 2.2 (Assuming inputs section $1 is provided)
     */
    private String expression;

    /*
     * Where and how the input fields to be organized in the output record.
     */
    private String output;

    /**
     * Creates an instance of DataflowBuiltInTransformationMap class.
     */
    public DataflowBuiltInTransformationMap() {
    }

    /**
     * Get the type property: Type of transformation.
     * 
     * @return the type value.
     */
    public DataflowMappingType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of transformation.
     * 
     * @param type the type value to set.
     * @return the DataflowBuiltInTransformationMap object itself.
     */
    public DataflowBuiltInTransformationMap withType(DataflowMappingType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the description property: A user provided optional description of the mapping function.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A user provided optional description of the mapping function.
     * 
     * @param description the description value to set.
     * @return the DataflowBuiltInTransformationMap object itself.
     */
    public DataflowBuiltInTransformationMap withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the inputs property: List of fields for mapping in JSON path expression.
     * 
     * @return the inputs value.
     */
    public List<String> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: List of fields for mapping in JSON path expression.
     * 
     * @param inputs the inputs value to set.
     * @return the DataflowBuiltInTransformationMap object itself.
     */
    public DataflowBuiltInTransformationMap withInputs(List<String> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the expression property: Modify the inputs field(s) to the final output field. Example: $1 * 2.2 (Assuming
     * inputs section $1 is provided).
     * 
     * @return the expression value.
     */
    public String expression() {
        return this.expression;
    }

    /**
     * Set the expression property: Modify the inputs field(s) to the final output field. Example: $1 * 2.2 (Assuming
     * inputs section $1 is provided).
     * 
     * @param expression the expression value to set.
     * @return the DataflowBuiltInTransformationMap object itself.
     */
    public DataflowBuiltInTransformationMap withExpression(String expression) {
        this.expression = expression;
        return this;
    }

    /**
     * Get the output property: Where and how the input fields to be organized in the output record.
     * 
     * @return the output value.
     */
    public String output() {
        return this.output;
    }

    /**
     * Set the output property: Where and how the input fields to be organized in the output record.
     * 
     * @param output the output value to set.
     * @return the DataflowBuiltInTransformationMap object itself.
     */
    public DataflowBuiltInTransformationMap withOutput(String output) {
        this.output = output;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputs() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property inputs in model DataflowBuiltInTransformationMap"));
        }
        if (output() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property output in model DataflowBuiltInTransformationMap"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowBuiltInTransformationMap.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("output", this.output);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("expression", this.expression);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowBuiltInTransformationMap from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowBuiltInTransformationMap if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowBuiltInTransformationMap.
     */
    public static DataflowBuiltInTransformationMap fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowBuiltInTransformationMap deserializedDataflowBuiltInTransformationMap
                = new DataflowBuiltInTransformationMap();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inputs".equals(fieldName)) {
                    List<String> inputs = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataflowBuiltInTransformationMap.inputs = inputs;
                } else if ("output".equals(fieldName)) {
                    deserializedDataflowBuiltInTransformationMap.output = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDataflowBuiltInTransformationMap.type
                        = DataflowMappingType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedDataflowBuiltInTransformationMap.description = reader.getString();
                } else if ("expression".equals(fieldName)) {
                    deserializedDataflowBuiltInTransformationMap.expression = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowBuiltInTransformationMap;
        });
    }
}
