// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.AkriConnectorsClient;
import com.azure.resourcemanager.iotoperations.fluent.models.AkriConnectorResourceInner;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorResource;
import com.azure.resourcemanager.iotoperations.models.AkriConnectors;

public final class AkriConnectorsImpl implements AkriConnectors {
    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorsImpl.class);

    private final AkriConnectorsClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public AkriConnectorsImpl(AkriConnectorsClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AkriConnectorResource> getWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, String connectorName, Context context) {
        Response<AkriConnectorResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AkriConnectorResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AkriConnectorResource get(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        String connectorName) {
        AkriConnectorResourceInner inner
            = this.serviceClient().get(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName);
        if (inner != null) {
            return new AkriConnectorResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        String connectorName) {
        this.serviceClient().delete(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName);
    }

    public void delete(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        String connectorName, Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, context);
    }

    public PagedIterable<AkriConnectorResource> listByTemplate(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName) {
        PagedIterable<AkriConnectorResourceInner> inner
            = this.serviceClient().listByTemplate(resourceGroupName, instanceName, akriConnectorTemplateName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AkriConnectorResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AkriConnectorResource> listByTemplate(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, Context context) {
        PagedIterable<AkriConnectorResourceInner> inner
            = this.serviceClient().listByTemplate(resourceGroupName, instanceName, akriConnectorTemplateName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AkriConnectorResourceImpl(inner1, this.manager()));
    }

    public AkriConnectorResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, Context.NONE)
            .getValue();
    }

    public Response<AkriConnectorResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        this.delete(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        String connectorName = ResourceManagerUtils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        this.delete(resourceGroupName, instanceName, akriConnectorTemplateName, connectorName, context);
    }

    private AkriConnectorsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public AkriConnectorResourceImpl define(String name) {
        return new AkriConnectorResourceImpl(name, this.manager());
    }
}
