// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * AkriConnectorTemplateRuntimeStatefulSetConfiguration properties.
 */
@Fluent
public final class AkriConnectorTemplateRuntimeStatefulSetConfiguration
    extends AkriConnectorTemplateManagedConfigurationSettings {
    /*
     * The type of the managed configuration.
     */
    private AkriConnectorTemplateManagedConfigurationType managedConfigurationType
        = AkriConnectorTemplateManagedConfigurationType.STATEFUL_SET_CONFIGURATION;

    /*
     * The stateful set configuration settings. This corresponds to the Kubernetes StatefulSet resource.
     * See https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/
     * apis__apps__v1_openapi.json#/components/schemas/io.k8s.api.apps.v1.StatefulSetSpec
     */
    private Map<String, BinaryData> statefulSetConfigurationSettings;

    /**
     * Creates an instance of AkriConnectorTemplateRuntimeStatefulSetConfiguration class.
     */
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration() {
    }

    /**
     * Get the managedConfigurationType property: The type of the managed configuration.
     * 
     * @return the managedConfigurationType value.
     */
    @Override
    public AkriConnectorTemplateManagedConfigurationType managedConfigurationType() {
        return this.managedConfigurationType;
    }

    /**
     * Get the statefulSetConfigurationSettings property: The stateful set configuration settings. This corresponds to
     * the Kubernetes StatefulSet resource.
     * See
     * https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json#/components/schemas/io.k8s.api.apps.v1.StatefulSetSpec.
     * 
     * @return the statefulSetConfigurationSettings value.
     */
    public Map<String, BinaryData> statefulSetConfigurationSettings() {
        return this.statefulSetConfigurationSettings;
    }

    /**
     * Set the statefulSetConfigurationSettings property: The stateful set configuration settings. This corresponds to
     * the Kubernetes StatefulSet resource.
     * See
     * https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json#/components/schemas/io.k8s.api.apps.v1.StatefulSetSpec.
     * 
     * @param statefulSetConfigurationSettings the statefulSetConfigurationSettings value to set.
     * @return the AkriConnectorTemplateRuntimeStatefulSetConfiguration object itself.
     */
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration
        withStatefulSetConfigurationSettings(Map<String, BinaryData> statefulSetConfigurationSettings) {
        this.statefulSetConfigurationSettings = statefulSetConfigurationSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration
        withAllocation(AkriConnectorTemplateAllocation allocation) {
        super.withAllocation(allocation);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration
        withPersistentVolumeClaims(List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims) {
        super.withPersistentVolumeClaims(persistentVolumeClaims);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration
        withAdditionalConfiguration(Map<String, String> additionalConfiguration) {
        super.withAdditionalConfiguration(additionalConfiguration);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration
        withPersistentVolumeClaimTemplates(List<Map<String, BinaryData>> persistentVolumeClaimTemplates) {
        super.withPersistentVolumeClaimTemplates(persistentVolumeClaimTemplates);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration withSecrets(List<AkriConnectorsSecret> secrets) {
        super.withSecrets(secrets);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AkriConnectorTemplateRuntimeStatefulSetConfiguration
        withTrustSettings(AkriConnectorTemplateTrustList trustSettings) {
        super.withTrustSettings(trustSettings);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (statefulSetConfigurationSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property statefulSetConfigurationSettings in model AkriConnectorTemplateRuntimeStatefulSetConfiguration"));
        }
        if (allocation() != null) {
            allocation().validate();
        }
        if (persistentVolumeClaims() != null) {
            persistentVolumeClaims().forEach(e -> e.validate());
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (trustSettings() != null) {
            trustSettings().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(AkriConnectorTemplateRuntimeStatefulSetConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("allocation", allocation());
        jsonWriter.writeArrayField("persistentVolumeClaims", persistentVolumeClaims(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("additionalConfiguration", additionalConfiguration(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("persistentVolumeClaimTemplates", persistentVolumeClaimTemplates(),
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1
                .writeUntyped(element1 == null ? null : element1.toObject(Object.class))));
        jsonWriter.writeArrayField("secrets", secrets(), (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("trustSettings", trustSettings());
        jsonWriter.writeMapField("statefulSetConfigurationSettings", this.statefulSetConfigurationSettings,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("managedConfigurationType",
            this.managedConfigurationType == null ? null : this.managedConfigurationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateRuntimeStatefulSetConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateRuntimeStatefulSetConfiguration if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateRuntimeStatefulSetConfiguration.
     */
    public static AkriConnectorTemplateRuntimeStatefulSetConfiguration fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateRuntimeStatefulSetConfiguration deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration
                = new AkriConnectorTemplateRuntimeStatefulSetConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocation".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration
                        .withAllocation(AkriConnectorTemplateAllocation.fromJson(reader));
                } else if ("persistentVolumeClaims".equals(fieldName)) {
                    List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims
                        = reader.readArray(reader1 -> AkriConnectorTemplatePersistentVolumeClaim.fromJson(reader1));
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration
                        .withPersistentVolumeClaims(persistentVolumeClaims);
                } else if ("additionalConfiguration".equals(fieldName)) {
                    Map<String, String> additionalConfiguration = reader.readMap(reader1 -> reader1.getString());
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration
                        .withAdditionalConfiguration(additionalConfiguration);
                } else if ("persistentVolumeClaimTemplates".equals(fieldName)) {
                    List<Map<String, BinaryData>> persistentVolumeClaimTemplates
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2
                            .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()))));
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration
                        .withPersistentVolumeClaimTemplates(persistentVolumeClaimTemplates);
                } else if ("secrets".equals(fieldName)) {
                    List<AkriConnectorsSecret> secrets
                        = reader.readArray(reader1 -> AkriConnectorsSecret.fromJson(reader1));
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration.withSecrets(secrets);
                } else if ("trustSettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration
                        .withTrustSettings(AkriConnectorTemplateTrustList.fromJson(reader));
                } else if ("statefulSetConfigurationSettings".equals(fieldName)) {
                    Map<String, BinaryData> statefulSetConfigurationSettings = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration.statefulSetConfigurationSettings
                        = statefulSetConfigurationSettings;
                } else if ("managedConfigurationType".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration.managedConfigurationType
                        = AkriConnectorTemplateManagedConfigurationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateRuntimeStatefulSetConfiguration;
        });
    }
}
