// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowGraph graph node properties.
 */
@Fluent
public final class DataflowGraphGraphNode extends DataflowGraphNode {
    /*
     * Type of the node.
     */
    private DataflowGraphNodeType nodeType = DataflowGraphNodeType.GRAPH;

    /*
     * Graph configuration.
     */
    private DataflowGraphNodeGraphSettings graphSettings;

    /**
     * Creates an instance of DataflowGraphGraphNode class.
     */
    public DataflowGraphGraphNode() {
    }

    /**
     * Get the nodeType property: Type of the node.
     * 
     * @return the nodeType value.
     */
    @Override
    public DataflowGraphNodeType nodeType() {
        return this.nodeType;
    }

    /**
     * Get the graphSettings property: Graph configuration.
     * 
     * @return the graphSettings value.
     */
    public DataflowGraphNodeGraphSettings graphSettings() {
        return this.graphSettings;
    }

    /**
     * Set the graphSettings property: Graph configuration.
     * 
     * @param graphSettings the graphSettings value to set.
     * @return the DataflowGraphGraphNode object itself.
     */
    public DataflowGraphGraphNode withGraphSettings(DataflowGraphNodeGraphSettings graphSettings) {
        this.graphSettings = graphSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataflowGraphGraphNode withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (graphSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property graphSettings in model DataflowGraphGraphNode"));
        } else {
            graphSettings().validate();
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DataflowGraphGraphNode"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowGraphGraphNode.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeJsonField("graphSettings", this.graphSettings);
        jsonWriter.writeStringField("nodeType", this.nodeType == null ? null : this.nodeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphGraphNode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphGraphNode if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphGraphNode.
     */
    public static DataflowGraphGraphNode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphGraphNode deserializedDataflowGraphGraphNode = new DataflowGraphGraphNode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataflowGraphGraphNode.withName(reader.getString());
                } else if ("graphSettings".equals(fieldName)) {
                    deserializedDataflowGraphGraphNode.graphSettings = DataflowGraphNodeGraphSettings.fromJson(reader);
                } else if ("nodeType".equals(fieldName)) {
                    deserializedDataflowGraphGraphNode.nodeType = DataflowGraphNodeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphGraphNode;
        });
    }
}
