// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Dataflow Source Operation properties.
 */
@Fluent
public final class DataflowSourceOperationSettings implements JsonSerializable<DataflowSourceOperationSettings> {
    /*
     * Reference to the Dataflow Endpoint resource. Can only be of Broker and Kafka type.
     */
    private String endpointRef;

    /*
     * Reference to the resource in Azure Device Registry where the data in the endpoint originates from.
     */
    private String assetRef;

    /*
     * Content is a JSON Schema. Allowed: JSON Schema/draft-7.
     */
    private SourceSerializationFormat serializationFormat;

    /*
     * Schema CR reference. Data will be deserialized according to the schema, and dropped if it doesn't match.
     */
    private String schemaRef;

    /*
     * List of source locations. Can be Broker or Kafka topics. Supports wildcards # and +.
     */
    private List<String> dataSources;

    /**
     * Creates an instance of DataflowSourceOperationSettings class.
     */
    public DataflowSourceOperationSettings() {
    }

    /**
     * Get the endpointRef property: Reference to the Dataflow Endpoint resource. Can only be of Broker and Kafka type.
     * 
     * @return the endpointRef value.
     */
    public String endpointRef() {
        return this.endpointRef;
    }

    /**
     * Set the endpointRef property: Reference to the Dataflow Endpoint resource. Can only be of Broker and Kafka type.
     * 
     * @param endpointRef the endpointRef value to set.
     * @return the DataflowSourceOperationSettings object itself.
     */
    public DataflowSourceOperationSettings withEndpointRef(String endpointRef) {
        this.endpointRef = endpointRef;
        return this;
    }

    /**
     * Get the assetRef property: Reference to the resource in Azure Device Registry where the data in the endpoint
     * originates from.
     * 
     * @return the assetRef value.
     */
    public String assetRef() {
        return this.assetRef;
    }

    /**
     * Set the assetRef property: Reference to the resource in Azure Device Registry where the data in the endpoint
     * originates from.
     * 
     * @param assetRef the assetRef value to set.
     * @return the DataflowSourceOperationSettings object itself.
     */
    public DataflowSourceOperationSettings withAssetRef(String assetRef) {
        this.assetRef = assetRef;
        return this;
    }

    /**
     * Get the serializationFormat property: Content is a JSON Schema. Allowed: JSON Schema/draft-7.
     * 
     * @return the serializationFormat value.
     */
    public SourceSerializationFormat serializationFormat() {
        return this.serializationFormat;
    }

    /**
     * Set the serializationFormat property: Content is a JSON Schema. Allowed: JSON Schema/draft-7.
     * 
     * @param serializationFormat the serializationFormat value to set.
     * @return the DataflowSourceOperationSettings object itself.
     */
    public DataflowSourceOperationSettings withSerializationFormat(SourceSerializationFormat serializationFormat) {
        this.serializationFormat = serializationFormat;
        return this;
    }

    /**
     * Get the schemaRef property: Schema CR reference. Data will be deserialized according to the schema, and dropped
     * if it doesn't match.
     * 
     * @return the schemaRef value.
     */
    public String schemaRef() {
        return this.schemaRef;
    }

    /**
     * Set the schemaRef property: Schema CR reference. Data will be deserialized according to the schema, and dropped
     * if it doesn't match.
     * 
     * @param schemaRef the schemaRef value to set.
     * @return the DataflowSourceOperationSettings object itself.
     */
    public DataflowSourceOperationSettings withSchemaRef(String schemaRef) {
        this.schemaRef = schemaRef;
        return this;
    }

    /**
     * Get the dataSources property: List of source locations. Can be Broker or Kafka topics. Supports wildcards # and
     * +.
     * 
     * @return the dataSources value.
     */
    public List<String> dataSources() {
        return this.dataSources;
    }

    /**
     * Set the dataSources property: List of source locations. Can be Broker or Kafka topics. Supports wildcards # and
     * +.
     * 
     * @param dataSources the dataSources value to set.
     * @return the DataflowSourceOperationSettings object itself.
     */
    public DataflowSourceOperationSettings withDataSources(List<String> dataSources) {
        this.dataSources = dataSources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointRef() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointRef in model DataflowSourceOperationSettings"));
        }
        if (dataSources() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataSources in model DataflowSourceOperationSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowSourceOperationSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointRef", this.endpointRef);
        jsonWriter.writeArrayField("dataSources", this.dataSources, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("assetRef", this.assetRef);
        jsonWriter.writeStringField("serializationFormat",
            this.serializationFormat == null ? null : this.serializationFormat.toString());
        jsonWriter.writeStringField("schemaRef", this.schemaRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowSourceOperationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowSourceOperationSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowSourceOperationSettings.
     */
    public static DataflowSourceOperationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowSourceOperationSettings deserializedDataflowSourceOperationSettings
                = new DataflowSourceOperationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointRef".equals(fieldName)) {
                    deserializedDataflowSourceOperationSettings.endpointRef = reader.getString();
                } else if ("dataSources".equals(fieldName)) {
                    List<String> dataSources = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataflowSourceOperationSettings.dataSources = dataSources;
                } else if ("assetRef".equals(fieldName)) {
                    deserializedDataflowSourceOperationSettings.assetRef = reader.getString();
                } else if ("serializationFormat".equals(fieldName)) {
                    deserializedDataflowSourceOperationSettings.serializationFormat
                        = SourceSerializationFormat.fromString(reader.getString());
                } else if ("schemaRef".equals(fieldName)) {
                    deserializedDataflowSourceOperationSettings.schemaRef = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowSourceOperationSettings;
        });
    }
}
