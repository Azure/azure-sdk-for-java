// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Broker Subscriber Queue Custom Policy properties.
 */
@Fluent
public final class BrokerSubscriberQueueCustomPolicySettings
    implements JsonSerializable<BrokerSubscriberQueueCustomPolicySettings> {
    /*
     * List of client IDs of the subscribers, wildcard * supported.
     */
    private List<String> subscriberClientIds;

    /*
     * Controls if MQTT clients can request for disk persistence via `MQTTv5` user property. Works in addition to other
     * groups (logical OR).
     */
    private BrokerSubscriberQueueDynamic dynamic;

    /*
     * List of topics under which messages would be persisted to disk for each subscriber. Wildcards # and + supported.
     */
    private List<String> topics;

    /**
     * Creates an instance of BrokerSubscriberQueueCustomPolicySettings class.
     */
    public BrokerSubscriberQueueCustomPolicySettings() {
    }

    /**
     * Get the subscriberClientIds property: List of client IDs of the subscribers, wildcard * supported.
     * 
     * @return the subscriberClientIds value.
     */
    public List<String> subscriberClientIds() {
        return this.subscriberClientIds;
    }

    /**
     * Set the subscriberClientIds property: List of client IDs of the subscribers, wildcard * supported.
     * 
     * @param subscriberClientIds the subscriberClientIds value to set.
     * @return the BrokerSubscriberQueueCustomPolicySettings object itself.
     */
    public BrokerSubscriberQueueCustomPolicySettings withSubscriberClientIds(List<String> subscriberClientIds) {
        this.subscriberClientIds = subscriberClientIds;
        return this;
    }

    /**
     * Get the dynamic property: Controls if MQTT clients can request for disk persistence via `MQTTv5` user property.
     * Works in addition to other groups (logical OR).
     * 
     * @return the dynamic value.
     */
    public BrokerSubscriberQueueDynamic dynamic() {
        return this.dynamic;
    }

    /**
     * Set the dynamic property: Controls if MQTT clients can request for disk persistence via `MQTTv5` user property.
     * Works in addition to other groups (logical OR).
     * 
     * @param dynamic the dynamic value to set.
     * @return the BrokerSubscriberQueueCustomPolicySettings object itself.
     */
    public BrokerSubscriberQueueCustomPolicySettings withDynamic(BrokerSubscriberQueueDynamic dynamic) {
        this.dynamic = dynamic;
        return this;
    }

    /**
     * Get the topics property: List of topics under which messages would be persisted to disk for each subscriber.
     * Wildcards # and + supported.
     * 
     * @return the topics value.
     */
    public List<String> topics() {
        return this.topics;
    }

    /**
     * Set the topics property: List of topics under which messages would be persisted to disk for each subscriber.
     * Wildcards # and + supported.
     * 
     * @param topics the topics value to set.
     * @return the BrokerSubscriberQueueCustomPolicySettings object itself.
     */
    public BrokerSubscriberQueueCustomPolicySettings withTopics(List<String> topics) {
        this.topics = topics;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("subscriberClientIds", this.subscriberClientIds,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("dynamic", this.dynamic);
        jsonWriter.writeArrayField("topics", this.topics, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerSubscriberQueueCustomPolicySettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerSubscriberQueueCustomPolicySettings if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the BrokerSubscriberQueueCustomPolicySettings.
     */
    public static BrokerSubscriberQueueCustomPolicySettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerSubscriberQueueCustomPolicySettings deserializedBrokerSubscriberQueueCustomPolicySettings
                = new BrokerSubscriberQueueCustomPolicySettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriberClientIds".equals(fieldName)) {
                    List<String> subscriberClientIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerSubscriberQueueCustomPolicySettings.subscriberClientIds = subscriberClientIds;
                } else if ("dynamic".equals(fieldName)) {
                    deserializedBrokerSubscriberQueueCustomPolicySettings.dynamic
                        = BrokerSubscriberQueueDynamic.fromJson(reader);
                } else if ("topics".equals(fieldName)) {
                    List<String> topics = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerSubscriberQueueCustomPolicySettings.topics = topics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerSubscriberQueueCustomPolicySettings;
        });
    }
}
