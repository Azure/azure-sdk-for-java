// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.AkriConnectorTemplatesClient;
import com.azure.resourcemanager.iotoperations.fluent.models.AkriConnectorTemplateResourceInner;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateResource;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplates;

public final class AkriConnectorTemplatesImpl implements AkriConnectorTemplates {
    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorTemplatesImpl.class);

    private final AkriConnectorTemplatesClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public AkriConnectorTemplatesImpl(AkriConnectorTemplatesClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AkriConnectorTemplateResource> getWithResponse(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName, Context context) {
        Response<AkriConnectorTemplateResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AkriConnectorTemplateResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AkriConnectorTemplateResource get(String resourceGroupName, String instanceName,
        String akriConnectorTemplateName) {
        AkriConnectorTemplateResourceInner inner
            = this.serviceClient().get(resourceGroupName, instanceName, akriConnectorTemplateName);
        if (inner != null) {
            return new AkriConnectorTemplateResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String instanceName, String akriConnectorTemplateName) {
        this.serviceClient().delete(resourceGroupName, instanceName, akriConnectorTemplateName);
    }

    public void delete(String resourceGroupName, String instanceName, String akriConnectorTemplateName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, akriConnectorTemplateName, context);
    }

    public PagedIterable<AkriConnectorTemplateResource> listByInstanceResource(String resourceGroupName,
        String instanceName) {
        PagedIterable<AkriConnectorTemplateResourceInner> inner
            = this.serviceClient().listByInstanceResource(resourceGroupName, instanceName);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AkriConnectorTemplateResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AkriConnectorTemplateResource> listByInstanceResource(String resourceGroupName,
        String instanceName, Context context) {
        PagedIterable<AkriConnectorTemplateResourceInner> inner
            = this.serviceClient().listByInstanceResource(resourceGroupName, instanceName, context);
        return ResourceManagerUtils.mapPage(inner,
            inner1 -> new AkriConnectorTemplateResourceImpl(inner1, this.manager()));
    }

    public AkriConnectorTemplateResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, Context.NONE)
            .getValue();
    }

    public Response<AkriConnectorTemplateResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, akriConnectorTemplateName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        this.delete(resourceGroupName, instanceName, akriConnectorTemplateName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String akriConnectorTemplateName = ResourceManagerUtils.getValueFromIdByName(id, "akriConnectorTemplates");
        if (akriConnectorTemplateName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'akriConnectorTemplates'.", id)));
        }
        this.delete(resourceGroupName, instanceName, akriConnectorTemplateName, context);
    }

    private AkriConnectorTemplatesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public AkriConnectorTemplateResourceImpl define(String name) {
        return new AkriConnectorTemplateResourceImpl(name, this.manager());
    }
}
