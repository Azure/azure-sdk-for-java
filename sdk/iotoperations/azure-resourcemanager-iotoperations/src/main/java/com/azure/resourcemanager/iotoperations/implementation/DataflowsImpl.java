// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.DataflowsClient;
import com.azure.resourcemanager.iotoperations.fluent.models.DataflowResourceInner;
import com.azure.resourcemanager.iotoperations.models.DataflowResource;
import com.azure.resourcemanager.iotoperations.models.Dataflows;

public final class DataflowsImpl implements Dataflows {
    private static final ClientLogger LOGGER = new ClientLogger(DataflowsImpl.class);

    private final DataflowsClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public DataflowsImpl(DataflowsClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DataflowResource> getWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowName, Context context) {
        Response<DataflowResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataflowResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataflowResource get(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowName) {
        DataflowResourceInner inner
            = this.serviceClient().get(resourceGroupName, instanceName, dataflowProfileName, dataflowName);
        if (inner != null) {
            return new DataflowResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String instanceName, String dataflowProfileName, String dataflowName) {
        this.serviceClient().delete(resourceGroupName, instanceName, dataflowProfileName, dataflowName);
    }

    public void delete(String resourceGroupName, String instanceName, String dataflowProfileName, String dataflowName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, dataflowProfileName, dataflowName, context);
    }

    public PagedIterable<DataflowResource> listByResourceGroup(String resourceGroupName, String instanceName,
        String dataflowProfileName) {
        PagedIterable<DataflowResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, instanceName, dataflowProfileName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataflowResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DataflowResource> listByResourceGroup(String resourceGroupName, String instanceName,
        String dataflowProfileName, Context context) {
        PagedIterable<DataflowResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, instanceName, dataflowProfileName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataflowResourceImpl(inner1, this.manager()));
    }

    public DataflowResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowName = ResourceManagerUtils.getValueFromIdByName(id, "dataflows");
        if (dataflowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflows'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowName, Context.NONE)
            .getValue();
    }

    public Response<DataflowResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowName = ResourceManagerUtils.getValueFromIdByName(id, "dataflows");
        if (dataflowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflows'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowName = ResourceManagerUtils.getValueFromIdByName(id, "dataflows");
        if (dataflowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflows'.", id)));
        }
        this.delete(resourceGroupName, instanceName, dataflowProfileName, dataflowName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowName = ResourceManagerUtils.getValueFromIdByName(id, "dataflows");
        if (dataflowName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflows'.", id)));
        }
        this.delete(resourceGroupName, instanceName, dataflowProfileName, dataflowName, context);
    }

    private DataflowsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public DataflowResourceImpl define(String name) {
        return new DataflowResourceImpl(name, this.manager());
    }
}
