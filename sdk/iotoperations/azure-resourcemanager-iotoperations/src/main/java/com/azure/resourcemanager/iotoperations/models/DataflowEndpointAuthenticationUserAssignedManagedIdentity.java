// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowEndpoint Authentication UserAssignedManagedIdentity properties.
 */
@Fluent
public final class DataflowEndpointAuthenticationUserAssignedManagedIdentity
    implements JsonSerializable<DataflowEndpointAuthenticationUserAssignedManagedIdentity> {
    /*
     * Client ID for the user-assigned managed identity.
     */
    private String clientId;

    /*
     * Resource identifier (application ID URI) of the resource, affixed with the .default suffix.
     */
    private String scope;

    /*
     * Tenant ID.
     */
    private String tenantId;

    /**
     * Creates an instance of DataflowEndpointAuthenticationUserAssignedManagedIdentity class.
     */
    public DataflowEndpointAuthenticationUserAssignedManagedIdentity() {
    }

    /**
     * Get the clientId property: Client ID for the user-assigned managed identity.
     * 
     * @return the clientId value.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Set the clientId property: Client ID for the user-assigned managed identity.
     * 
     * @param clientId the clientId value to set.
     * @return the DataflowEndpointAuthenticationUserAssignedManagedIdentity object itself.
     */
    public DataflowEndpointAuthenticationUserAssignedManagedIdentity withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }

    /**
     * Get the scope property: Resource identifier (application ID URI) of the resource, affixed with the .default
     * suffix.
     * 
     * @return the scope value.
     */
    public String scope() {
        return this.scope;
    }

    /**
     * Set the scope property: Resource identifier (application ID URI) of the resource, affixed with the .default
     * suffix.
     * 
     * @param scope the scope value to set.
     * @return the DataflowEndpointAuthenticationUserAssignedManagedIdentity object itself.
     */
    public DataflowEndpointAuthenticationUserAssignedManagedIdentity withScope(String scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the tenantId property: Tenant ID.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant ID.
     * 
     * @param tenantId the tenantId value to set.
     * @return the DataflowEndpointAuthenticationUserAssignedManagedIdentity object itself.
     */
    public DataflowEndpointAuthenticationUserAssignedManagedIdentity withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clientId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property clientId in model DataflowEndpointAuthenticationUserAssignedManagedIdentity"));
        }
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model DataflowEndpointAuthenticationUserAssignedManagedIdentity"));
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(DataflowEndpointAuthenticationUserAssignedManagedIdentity.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientId", this.clientId);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("scope", this.scope);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowEndpointAuthenticationUserAssignedManagedIdentity from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowEndpointAuthenticationUserAssignedManagedIdentity if the JsonReader was pointing
     * to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * DataflowEndpointAuthenticationUserAssignedManagedIdentity.
     */
    public static DataflowEndpointAuthenticationUserAssignedManagedIdentity fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowEndpointAuthenticationUserAssignedManagedIdentity deserializedDataflowEndpointAuthenticationUserAssignedManagedIdentity
                = new DataflowEndpointAuthenticationUserAssignedManagedIdentity();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientId".equals(fieldName)) {
                    deserializedDataflowEndpointAuthenticationUserAssignedManagedIdentity.clientId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedDataflowEndpointAuthenticationUserAssignedManagedIdentity.tenantId = reader.getString();
                } else if ("scope".equals(fieldName)) {
                    deserializedDataflowEndpointAuthenticationUserAssignedManagedIdentity.scope = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowEndpointAuthenticationUserAssignedManagedIdentity;
        });
    }
}
