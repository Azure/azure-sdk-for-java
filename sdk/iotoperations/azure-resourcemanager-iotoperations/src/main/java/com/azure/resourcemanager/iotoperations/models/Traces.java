// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker Diagnostic Trace properties.
 */
@Fluent
public final class Traces implements JsonSerializable<Traces> {
    /*
     * The toggle to enable/disable traces.
     */
    private OperationalMode mode;

    /*
     * The cache size in megabytes.
     */
    private Integer cacheSizeMegabytes;

    /*
     * The self tracing properties.
     */
    private SelfTracing selfTracing;

    /*
     * The span channel capacity.
     */
    private Integer spanChannelCapacity;

    /**
     * Creates an instance of Traces class.
     */
    public Traces() {
    }

    /**
     * Get the mode property: The toggle to enable/disable traces.
     * 
     * @return the mode value.
     */
    public OperationalMode mode() {
        return this.mode;
    }

    /**
     * Set the mode property: The toggle to enable/disable traces.
     * 
     * @param mode the mode value to set.
     * @return the Traces object itself.
     */
    public Traces withMode(OperationalMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the cacheSizeMegabytes property: The cache size in megabytes.
     * 
     * @return the cacheSizeMegabytes value.
     */
    public Integer cacheSizeMegabytes() {
        return this.cacheSizeMegabytes;
    }

    /**
     * Set the cacheSizeMegabytes property: The cache size in megabytes.
     * 
     * @param cacheSizeMegabytes the cacheSizeMegabytes value to set.
     * @return the Traces object itself.
     */
    public Traces withCacheSizeMegabytes(Integer cacheSizeMegabytes) {
        this.cacheSizeMegabytes = cacheSizeMegabytes;
        return this;
    }

    /**
     * Get the selfTracing property: The self tracing properties.
     * 
     * @return the selfTracing value.
     */
    public SelfTracing selfTracing() {
        return this.selfTracing;
    }

    /**
     * Set the selfTracing property: The self tracing properties.
     * 
     * @param selfTracing the selfTracing value to set.
     * @return the Traces object itself.
     */
    public Traces withSelfTracing(SelfTracing selfTracing) {
        this.selfTracing = selfTracing;
        return this;
    }

    /**
     * Get the spanChannelCapacity property: The span channel capacity.
     * 
     * @return the spanChannelCapacity value.
     */
    public Integer spanChannelCapacity() {
        return this.spanChannelCapacity;
    }

    /**
     * Set the spanChannelCapacity property: The span channel capacity.
     * 
     * @param spanChannelCapacity the spanChannelCapacity value to set.
     * @return the Traces object itself.
     */
    public Traces withSpanChannelCapacity(Integer spanChannelCapacity) {
        this.spanChannelCapacity = spanChannelCapacity;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (selfTracing() != null) {
            selfTracing().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        jsonWriter.writeNumberField("cacheSizeMegabytes", this.cacheSizeMegabytes);
        jsonWriter.writeJsonField("selfTracing", this.selfTracing);
        jsonWriter.writeNumberField("spanChannelCapacity", this.spanChannelCapacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Traces from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Traces if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Traces.
     */
    public static Traces fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Traces deserializedTraces = new Traces();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mode".equals(fieldName)) {
                    deserializedTraces.mode = OperationalMode.fromString(reader.getString());
                } else if ("cacheSizeMegabytes".equals(fieldName)) {
                    deserializedTraces.cacheSizeMegabytes = reader.getNullable(JsonReader::getInt);
                } else if ("selfTracing".equals(fieldName)) {
                    deserializedTraces.selfTracing = SelfTracing.fromJson(reader);
                } else if ("spanChannelCapacity".equals(fieldName)) {
                    deserializedTraces.spanChannelCapacity = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTraces;
        });
    }
}
