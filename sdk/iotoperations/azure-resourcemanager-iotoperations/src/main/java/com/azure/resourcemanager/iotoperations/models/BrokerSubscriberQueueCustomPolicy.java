// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Custom Subscriber Queue Policy Properties.
 */
@Fluent
public final class BrokerSubscriberQueueCustomPolicy extends BrokerSubscriberQueuePolicy {
    /*
     * 'All' to persist all subscriber queues, 'None' to not persist any, 'Custom' to persist only the specified queues.
     */
    private BrokerPersistencePolicyMode mode = BrokerPersistencePolicyMode.CUSTOM;

    /*
     * Custom policy, required if mode is Custom. Subscriber queues from all groups are persisted to disk (logical OR).
     */
    private BrokerSubscriberQueueCustomPolicySettings subscriberQueueSettings;

    /**
     * Creates an instance of BrokerSubscriberQueueCustomPolicy class.
     */
    public BrokerSubscriberQueueCustomPolicy() {
    }

    /**
     * Get the mode property: 'All' to persist all subscriber queues, 'None' to not persist any, 'Custom' to persist
     * only the specified queues.
     * 
     * @return the mode value.
     */
    @Override
    public BrokerPersistencePolicyMode mode() {
        return this.mode;
    }

    /**
     * Get the subscriberQueueSettings property: Custom policy, required if mode is Custom. Subscriber queues from all
     * groups are persisted to disk (logical OR).
     * 
     * @return the subscriberQueueSettings value.
     */
    public BrokerSubscriberQueueCustomPolicySettings subscriberQueueSettings() {
        return this.subscriberQueueSettings;
    }

    /**
     * Set the subscriberQueueSettings property: Custom policy, required if mode is Custom. Subscriber queues from all
     * groups are persisted to disk (logical OR).
     * 
     * @param subscriberQueueSettings the subscriberQueueSettings value to set.
     * @return the BrokerSubscriberQueueCustomPolicy object itself.
     */
    public BrokerSubscriberQueueCustomPolicy
        withSubscriberQueueSettings(BrokerSubscriberQueueCustomPolicySettings subscriberQueueSettings) {
        this.subscriberQueueSettings = subscriberQueueSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("subscriberQueueSettings", this.subscriberQueueSettings);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerSubscriberQueueCustomPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerSubscriberQueueCustomPolicy if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerSubscriberQueueCustomPolicy.
     */
    public static BrokerSubscriberQueueCustomPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerSubscriberQueueCustomPolicy deserializedBrokerSubscriberQueueCustomPolicy
                = new BrokerSubscriberQueueCustomPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriberQueueSettings".equals(fieldName)) {
                    deserializedBrokerSubscriberQueueCustomPolicy.subscriberQueueSettings
                        = BrokerSubscriberQueueCustomPolicySettings.fromJson(reader);
                } else if ("mode".equals(fieldName)) {
                    deserializedBrokerSubscriberQueueCustomPolicy.mode
                        = BrokerPersistencePolicyMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerSubscriberQueueCustomPolicy;
        });
    }
}
