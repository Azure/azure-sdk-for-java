// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The settings of Subscriber Queue Limit.
 */
@Fluent
public final class SubscriberQueueLimit implements JsonSerializable<SubscriberQueueLimit> {
    /*
     * The maximum length of the queue before messages start getting dropped.
     */
    private Long length;

    /*
     * The strategy to use for dropping messages from the queue.
     */
    private SubscriberMessageDropStrategy strategy;

    /**
     * Creates an instance of SubscriberQueueLimit class.
     */
    public SubscriberQueueLimit() {
    }

    /**
     * Get the length property: The maximum length of the queue before messages start getting dropped.
     * 
     * @return the length value.
     */
    public Long length() {
        return this.length;
    }

    /**
     * Set the length property: The maximum length of the queue before messages start getting dropped.
     * 
     * @param length the length value to set.
     * @return the SubscriberQueueLimit object itself.
     */
    public SubscriberQueueLimit withLength(Long length) {
        this.length = length;
        return this;
    }

    /**
     * Get the strategy property: The strategy to use for dropping messages from the queue.
     * 
     * @return the strategy value.
     */
    public SubscriberMessageDropStrategy strategy() {
        return this.strategy;
    }

    /**
     * Set the strategy property: The strategy to use for dropping messages from the queue.
     * 
     * @param strategy the strategy value to set.
     * @return the SubscriberQueueLimit object itself.
     */
    public SubscriberQueueLimit withStrategy(SubscriberMessageDropStrategy strategy) {
        this.strategy = strategy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("length", this.length);
        jsonWriter.writeStringField("strategy", this.strategy == null ? null : this.strategy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SubscriberQueueLimit from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SubscriberQueueLimit if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SubscriberQueueLimit.
     */
    public static SubscriberQueueLimit fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SubscriberQueueLimit deserializedSubscriberQueueLimit = new SubscriberQueueLimit();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("length".equals(fieldName)) {
                    deserializedSubscriberQueueLimit.length = reader.getNullable(JsonReader::getLong);
                } else if ("strategy".equals(fieldName)) {
                    deserializedSubscriberQueueLimit.strategy
                        = SubscriberMessageDropStrategy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSubscriberQueueLimit;
        });
    }
}
