// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorsServiceAccountTokenSettings properties.
 */
@Fluent
public final class AkriConnectorsServiceAccountTokenSettings
    implements JsonSerializable<AkriConnectorsServiceAccountTokenSettings> {
    /*
     * The audience for the service account token.
     */
    private String audience;

    /**
     * Creates an instance of AkriConnectorsServiceAccountTokenSettings class.
     */
    public AkriConnectorsServiceAccountTokenSettings() {
    }

    /**
     * Get the audience property: The audience for the service account token.
     * 
     * @return the audience value.
     */
    public String audience() {
        return this.audience;
    }

    /**
     * Set the audience property: The audience for the service account token.
     * 
     * @param audience the audience value to set.
     * @return the AkriConnectorsServiceAccountTokenSettings object itself.
     */
    public AkriConnectorsServiceAccountTokenSettings withAudience(String audience) {
        this.audience = audience;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (audience() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property audience in model AkriConnectorsServiceAccountTokenSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorsServiceAccountTokenSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("audience", this.audience);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorsServiceAccountTokenSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorsServiceAccountTokenSettings if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorsServiceAccountTokenSettings.
     */
    public static AkriConnectorsServiceAccountTokenSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorsServiceAccountTokenSettings deserializedAkriConnectorsServiceAccountTokenSettings
                = new AkriConnectorsServiceAccountTokenSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("audience".equals(fieldName)) {
                    deserializedAkriConnectorsServiceAccountTokenSettings.audience = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorsServiceAccountTokenSettings;
        });
    }
}
