// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DataflowGraph source node settings.
 */
@Fluent
public final class DataflowGraphSourceSettings implements JsonSerializable<DataflowGraphSourceSettings> {
    /*
     * The endpoint reference for the source.
     */
    private String endpointRef;

    /*
     * List of data sources.
     */
    private List<String> dataSources;

    /*
     * Reference to the resource in Azure Device Registry where the data in the endpoint originates from.
     */
    private String assetRef;

    /**
     * Creates an instance of DataflowGraphSourceSettings class.
     */
    public DataflowGraphSourceSettings() {
    }

    /**
     * Get the endpointRef property: The endpoint reference for the source.
     * 
     * @return the endpointRef value.
     */
    public String endpointRef() {
        return this.endpointRef;
    }

    /**
     * Set the endpointRef property: The endpoint reference for the source.
     * 
     * @param endpointRef the endpointRef value to set.
     * @return the DataflowGraphSourceSettings object itself.
     */
    public DataflowGraphSourceSettings withEndpointRef(String endpointRef) {
        this.endpointRef = endpointRef;
        return this;
    }

    /**
     * Get the dataSources property: List of data sources.
     * 
     * @return the dataSources value.
     */
    public List<String> dataSources() {
        return this.dataSources;
    }

    /**
     * Set the dataSources property: List of data sources.
     * 
     * @param dataSources the dataSources value to set.
     * @return the DataflowGraphSourceSettings object itself.
     */
    public DataflowGraphSourceSettings withDataSources(List<String> dataSources) {
        this.dataSources = dataSources;
        return this;
    }

    /**
     * Get the assetRef property: Reference to the resource in Azure Device Registry where the data in the endpoint
     * originates from.
     * 
     * @return the assetRef value.
     */
    public String assetRef() {
        return this.assetRef;
    }

    /**
     * Set the assetRef property: Reference to the resource in Azure Device Registry where the data in the endpoint
     * originates from.
     * 
     * @param assetRef the assetRef value to set.
     * @return the DataflowGraphSourceSettings object itself.
     */
    public DataflowGraphSourceSettings withAssetRef(String assetRef) {
        this.assetRef = assetRef;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointRef() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointRef in model DataflowGraphSourceSettings"));
        }
        if (dataSources() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataSources in model DataflowGraphSourceSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowGraphSourceSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointRef", this.endpointRef);
        jsonWriter.writeArrayField("dataSources", this.dataSources, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("assetRef", this.assetRef);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphSourceSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphSourceSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphSourceSettings.
     */
    public static DataflowGraphSourceSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphSourceSettings deserializedDataflowGraphSourceSettings = new DataflowGraphSourceSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointRef".equals(fieldName)) {
                    deserializedDataflowGraphSourceSettings.endpointRef = reader.getString();
                } else if ("dataSources".equals(fieldName)) {
                    List<String> dataSources = reader.readArray(reader1 -> reader1.getString());
                    deserializedDataflowGraphSourceSettings.dataSources = dataSources;
                } else if ("assetRef".equals(fieldName)) {
                    deserializedDataflowGraphSourceSettings.assetRef = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphSourceSettings;
        });
    }
}
