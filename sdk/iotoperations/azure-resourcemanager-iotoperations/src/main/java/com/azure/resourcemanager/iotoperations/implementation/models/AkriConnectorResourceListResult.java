// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.iotoperations.fluent.models.AkriConnectorResourceInner;
import java.io.IOException;
import java.util.List;

/**
 * The response of a AkriConnectorResource list operation.
 */
@Immutable
public final class AkriConnectorResourceListResult implements JsonSerializable<AkriConnectorResourceListResult> {
    /*
     * The AkriConnectorResource items on this page
     */
    private List<AkriConnectorResourceInner> value;

    /*
     * The link to the next page of items
     */
    private String nextLink;

    /**
     * Creates an instance of AkriConnectorResourceListResult class.
     */
    private AkriConnectorResourceListResult() {
    }

    /**
     * Get the value property: The AkriConnectorResource items on this page.
     * 
     * @return the value value.
     */
    public List<AkriConnectorResourceInner> value() {
        return this.value;
    }

    /**
     * Get the nextLink property: The link to the next page of items.
     * 
     * @return the nextLink value.
     */
    public String nextLink() {
        return this.nextLink;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("value", this.value, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("nextLink", this.nextLink);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorResourceListResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorResourceListResult if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorResourceListResult.
     */
    public static AkriConnectorResourceListResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorResourceListResult deserializedAkriConnectorResourceListResult
                = new AkriConnectorResourceListResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("value".equals(fieldName)) {
                    List<AkriConnectorResourceInner> value
                        = reader.readArray(reader1 -> AkriConnectorResourceInner.fromJson(reader1));
                    deserializedAkriConnectorResourceListResult.value = value;
                } else if ("nextLink".equals(fieldName)) {
                    deserializedAkriConnectorResourceListResult.nextLink = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorResourceListResult;
        });
    }
}
