// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorsServiceAccountAuthentication properties.
 */
@Fluent
public final class AkriConnectorsServiceAccountAuthentication extends AkriConnectorsMqttAuthentication {
    /*
     * The authentication method for the MQTT connection.
     */
    private AkriConnectorsMqttAuthenticationMethod method
        = AkriConnectorsMqttAuthenticationMethod.SERVICE_ACCOUNT_TOKEN;

    /*
     * The service account token for the MQTT connection.
     */
    private AkriConnectorsServiceAccountTokenSettings serviceAccountTokenSettings;

    /**
     * Creates an instance of AkriConnectorsServiceAccountAuthentication class.
     */
    public AkriConnectorsServiceAccountAuthentication() {
    }

    /**
     * Get the method property: The authentication method for the MQTT connection.
     * 
     * @return the method value.
     */
    @Override
    public AkriConnectorsMqttAuthenticationMethod method() {
        return this.method;
    }

    /**
     * Get the serviceAccountTokenSettings property: The service account token for the MQTT connection.
     * 
     * @return the serviceAccountTokenSettings value.
     */
    public AkriConnectorsServiceAccountTokenSettings serviceAccountTokenSettings() {
        return this.serviceAccountTokenSettings;
    }

    /**
     * Set the serviceAccountTokenSettings property: The service account token for the MQTT connection.
     * 
     * @param serviceAccountTokenSettings the serviceAccountTokenSettings value to set.
     * @return the AkriConnectorsServiceAccountAuthentication object itself.
     */
    public AkriConnectorsServiceAccountAuthentication
        withServiceAccountTokenSettings(AkriConnectorsServiceAccountTokenSettings serviceAccountTokenSettings) {
        this.serviceAccountTokenSettings = serviceAccountTokenSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("serviceAccountTokenSettings", this.serviceAccountTokenSettings);
        jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorsServiceAccountAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorsServiceAccountAuthentication if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorsServiceAccountAuthentication.
     */
    public static AkriConnectorsServiceAccountAuthentication fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorsServiceAccountAuthentication deserializedAkriConnectorsServiceAccountAuthentication
                = new AkriConnectorsServiceAccountAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceAccountTokenSettings".equals(fieldName)) {
                    deserializedAkriConnectorsServiceAccountAuthentication.serviceAccountTokenSettings
                        = AkriConnectorsServiceAccountTokenSettings.fromJson(reader);
                } else if ("method".equals(fieldName)) {
                    deserializedAkriConnectorsServiceAccountAuthentication.method
                        = AkriConnectorsMqttAuthenticationMethod.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorsServiceAccountAuthentication;
        });
    }
}
