// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Broker AuthorizationConfig properties.
 */
@Fluent
public final class AuthorizationConfig implements JsonSerializable<AuthorizationConfig> {
    /*
     * Enable caching of the authorization rules.
     */
    private OperationalMode cache;

    /*
     * The authorization rules to follow. If no rule is set, but Authorization Resource is used that would mean DenyAll.
     */
    private List<AuthorizationRule> rules;

    /**
     * Creates an instance of AuthorizationConfig class.
     */
    public AuthorizationConfig() {
    }

    /**
     * Get the cache property: Enable caching of the authorization rules.
     * 
     * @return the cache value.
     */
    public OperationalMode cache() {
        return this.cache;
    }

    /**
     * Set the cache property: Enable caching of the authorization rules.
     * 
     * @param cache the cache value to set.
     * @return the AuthorizationConfig object itself.
     */
    public AuthorizationConfig withCache(OperationalMode cache) {
        this.cache = cache;
        return this;
    }

    /**
     * Get the rules property: The authorization rules to follow. If no rule is set, but Authorization Resource is used
     * that would mean DenyAll.
     * 
     * @return the rules value.
     */
    public List<AuthorizationRule> rules() {
        return this.rules;
    }

    /**
     * Set the rules property: The authorization rules to follow. If no rule is set, but Authorization Resource is used
     * that would mean DenyAll.
     * 
     * @param rules the rules value to set.
     * @return the AuthorizationConfig object itself.
     */
    public AuthorizationConfig withRules(List<AuthorizationRule> rules) {
        this.rules = rules;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (rules() != null) {
            rules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("cache", this.cache == null ? null : this.cache.toString());
        jsonWriter.writeArrayField("rules", this.rules, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AuthorizationConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AuthorizationConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AuthorizationConfig.
     */
    public static AuthorizationConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AuthorizationConfig deserializedAuthorizationConfig = new AuthorizationConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("cache".equals(fieldName)) {
                    deserializedAuthorizationConfig.cache = OperationalMode.fromString(reader.getString());
                } else if ("rules".equals(fieldName)) {
                    List<AuthorizationRule> rules = reader.readArray(reader1 -> AuthorizationRule.fromJson(reader1));
                    deserializedAuthorizationConfig.rules = rules;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAuthorizationConfig;
        });
    }
}
