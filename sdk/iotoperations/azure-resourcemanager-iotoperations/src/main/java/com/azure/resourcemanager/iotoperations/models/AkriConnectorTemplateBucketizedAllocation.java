// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateBucketizedAllocation properties.
 */
@Fluent
public final class AkriConnectorTemplateBucketizedAllocation extends AkriConnectorTemplateAllocation {
    /*
     * The allocation policy type.
     */
    private AkriConnectorTemplateAllocationPolicy policy = AkriConnectorTemplateAllocationPolicy.BUCKETIZED;

    /*
     * The bucketized allocation of AEPs for connectors.
     */
    private int bucketSize;

    /**
     * Creates an instance of AkriConnectorTemplateBucketizedAllocation class.
     */
    public AkriConnectorTemplateBucketizedAllocation() {
    }

    /**
     * Get the policy property: The allocation policy type.
     * 
     * @return the policy value.
     */
    @Override
    public AkriConnectorTemplateAllocationPolicy policy() {
        return this.policy;
    }

    /**
     * Get the bucketSize property: The bucketized allocation of AEPs for connectors.
     * 
     * @return the bucketSize value.
     */
    public int bucketSize() {
        return this.bucketSize;
    }

    /**
     * Set the bucketSize property: The bucketized allocation of AEPs for connectors.
     * 
     * @param bucketSize the bucketSize value to set.
     * @return the AkriConnectorTemplateBucketizedAllocation object itself.
     */
    public AkriConnectorTemplateBucketizedAllocation withBucketSize(int bucketSize) {
        this.bucketSize = bucketSize;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("bucketSize", this.bucketSize);
        jsonWriter.writeStringField("policy", this.policy == null ? null : this.policy.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateBucketizedAllocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateBucketizedAllocation if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateBucketizedAllocation.
     */
    public static AkriConnectorTemplateBucketizedAllocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateBucketizedAllocation deserializedAkriConnectorTemplateBucketizedAllocation
                = new AkriConnectorTemplateBucketizedAllocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("bucketSize".equals(fieldName)) {
                    deserializedAkriConnectorTemplateBucketizedAllocation.bucketSize = reader.getInt();
                } else if ("policy".equals(fieldName)) {
                    deserializedAkriConnectorTemplateBucketizedAllocation.policy
                        = AkriConnectorTemplateAllocationPolicy.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateBucketizedAllocation;
        });
    }
}
