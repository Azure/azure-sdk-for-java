// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * AkriConnectorTemplate properties.
 */
@Fluent
public final class AkriConnectorTemplateProperties implements JsonSerializable<AkriConnectorTemplateProperties> {
    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /*
     * Metadata about AIO.
     */
    private AkriConnectorTemplateAioMetadata aioMetadata;

    /*
     * The runtime configuration for the Connector template.
     */
    private AkriConnectorTemplateRuntimeConfiguration runtimeConfiguration;

    /*
     * Diagnostics settings for the Connector template.
     */
    private AkriConnectorTemplateDiagnostics diagnostics;

    /*
     * Device inbound endpoint types.
     */
    private List<AkriConnectorTemplateDeviceInboundEndpointType> deviceInboundEndpointTypes;

    /*
     * Mqtt connection configuration settings.
     */
    private AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration;

    /**
     * Creates an instance of AkriConnectorTemplateProperties class.
     */
    public AkriConnectorTemplateProperties() {
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the aioMetadata property: Metadata about AIO.
     * 
     * @return the aioMetadata value.
     */
    public AkriConnectorTemplateAioMetadata aioMetadata() {
        return this.aioMetadata;
    }

    /**
     * Set the aioMetadata property: Metadata about AIO.
     * 
     * @param aioMetadata the aioMetadata value to set.
     * @return the AkriConnectorTemplateProperties object itself.
     */
    public AkriConnectorTemplateProperties withAioMetadata(AkriConnectorTemplateAioMetadata aioMetadata) {
        this.aioMetadata = aioMetadata;
        return this;
    }

    /**
     * Get the runtimeConfiguration property: The runtime configuration for the Connector template.
     * 
     * @return the runtimeConfiguration value.
     */
    public AkriConnectorTemplateRuntimeConfiguration runtimeConfiguration() {
        return this.runtimeConfiguration;
    }

    /**
     * Set the runtimeConfiguration property: The runtime configuration for the Connector template.
     * 
     * @param runtimeConfiguration the runtimeConfiguration value to set.
     * @return the AkriConnectorTemplateProperties object itself.
     */
    public AkriConnectorTemplateProperties
        withRuntimeConfiguration(AkriConnectorTemplateRuntimeConfiguration runtimeConfiguration) {
        this.runtimeConfiguration = runtimeConfiguration;
        return this;
    }

    /**
     * Get the diagnostics property: Diagnostics settings for the Connector template.
     * 
     * @return the diagnostics value.
     */
    public AkriConnectorTemplateDiagnostics diagnostics() {
        return this.diagnostics;
    }

    /**
     * Set the diagnostics property: Diagnostics settings for the Connector template.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the AkriConnectorTemplateProperties object itself.
     */
    public AkriConnectorTemplateProperties withDiagnostics(AkriConnectorTemplateDiagnostics diagnostics) {
        this.diagnostics = diagnostics;
        return this;
    }

    /**
     * Get the deviceInboundEndpointTypes property: Device inbound endpoint types.
     * 
     * @return the deviceInboundEndpointTypes value.
     */
    public List<AkriConnectorTemplateDeviceInboundEndpointType> deviceInboundEndpointTypes() {
        return this.deviceInboundEndpointTypes;
    }

    /**
     * Set the deviceInboundEndpointTypes property: Device inbound endpoint types.
     * 
     * @param deviceInboundEndpointTypes the deviceInboundEndpointTypes value to set.
     * @return the AkriConnectorTemplateProperties object itself.
     */
    public AkriConnectorTemplateProperties withDeviceInboundEndpointTypes(
        List<AkriConnectorTemplateDeviceInboundEndpointType> deviceInboundEndpointTypes) {
        this.deviceInboundEndpointTypes = deviceInboundEndpointTypes;
        return this;
    }

    /**
     * Get the mqttConnectionConfiguration property: Mqtt connection configuration settings.
     * 
     * @return the mqttConnectionConfiguration value.
     */
    public AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration() {
        return this.mqttConnectionConfiguration;
    }

    /**
     * Set the mqttConnectionConfiguration property: Mqtt connection configuration settings.
     * 
     * @param mqttConnectionConfiguration the mqttConnectionConfiguration value to set.
     * @return the AkriConnectorTemplateProperties object itself.
     */
    public AkriConnectorTemplateProperties
        withMqttConnectionConfiguration(AkriConnectorsMqttConnectionConfiguration mqttConnectionConfiguration) {
        this.mqttConnectionConfiguration = mqttConnectionConfiguration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("runtimeConfiguration", this.runtimeConfiguration);
        jsonWriter.writeArrayField("deviceInboundEndpointTypes", this.deviceInboundEndpointTypes,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("aioMetadata", this.aioMetadata);
        jsonWriter.writeJsonField("diagnostics", this.diagnostics);
        jsonWriter.writeJsonField("mqttConnectionConfiguration", this.mqttConnectionConfiguration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateProperties.
     */
    public static AkriConnectorTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateProperties deserializedAkriConnectorTemplateProperties
                = new AkriConnectorTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runtimeConfiguration".equals(fieldName)) {
                    deserializedAkriConnectorTemplateProperties.runtimeConfiguration
                        = AkriConnectorTemplateRuntimeConfiguration.fromJson(reader);
                } else if ("deviceInboundEndpointTypes".equals(fieldName)) {
                    List<AkriConnectorTemplateDeviceInboundEndpointType> deviceInboundEndpointTypes
                        = reader.readArray(reader1 -> AkriConnectorTemplateDeviceInboundEndpointType.fromJson(reader1));
                    deserializedAkriConnectorTemplateProperties.deviceInboundEndpointTypes = deviceInboundEndpointTypes;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAkriConnectorTemplateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("aioMetadata".equals(fieldName)) {
                    deserializedAkriConnectorTemplateProperties.aioMetadata
                        = AkriConnectorTemplateAioMetadata.fromJson(reader);
                } else if ("diagnostics".equals(fieldName)) {
                    deserializedAkriConnectorTemplateProperties.diagnostics
                        = AkriConnectorTemplateDiagnostics.fromJson(reader);
                } else if ("mqttConnectionConfiguration".equals(fieldName)) {
                    deserializedAkriConnectorTemplateProperties.mqttConnectionConfiguration
                        = AkriConnectorsMqttConnectionConfiguration.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateProperties;
        });
    }
}
