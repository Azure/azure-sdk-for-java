// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dataflow Operation properties. NOTE - One only method is allowed to be used for one entry.
 */
@Fluent
public final class DataflowOperation implements JsonSerializable<DataflowOperation> {
    /*
     * Type of operation.
     */
    private OperationType operationType;

    /*
     * Optional user provided name of the transformation.
     */
    private String name;

    /*
     * Source configuration.
     */
    private DataflowSourceOperationSettings sourceSettings;

    /*
     * Built In Transformation configuration.
     */
    private DataflowBuiltInTransformationSettings builtInTransformationSettings;

    /*
     * Destination configuration.
     */
    private DataflowDestinationOperationSettings destinationSettings;

    /**
     * Creates an instance of DataflowOperation class.
     */
    public DataflowOperation() {
    }

    /**
     * Get the operationType property: Type of operation.
     * 
     * @return the operationType value.
     */
    public OperationType operationType() {
        return this.operationType;
    }

    /**
     * Set the operationType property: Type of operation.
     * 
     * @param operationType the operationType value to set.
     * @return the DataflowOperation object itself.
     */
    public DataflowOperation withOperationType(OperationType operationType) {
        this.operationType = operationType;
        return this;
    }

    /**
     * Get the name property: Optional user provided name of the transformation.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Optional user provided name of the transformation.
     * 
     * @param name the name value to set.
     * @return the DataflowOperation object itself.
     */
    public DataflowOperation withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the sourceSettings property: Source configuration.
     * 
     * @return the sourceSettings value.
     */
    public DataflowSourceOperationSettings sourceSettings() {
        return this.sourceSettings;
    }

    /**
     * Set the sourceSettings property: Source configuration.
     * 
     * @param sourceSettings the sourceSettings value to set.
     * @return the DataflowOperation object itself.
     */
    public DataflowOperation withSourceSettings(DataflowSourceOperationSettings sourceSettings) {
        this.sourceSettings = sourceSettings;
        return this;
    }

    /**
     * Get the builtInTransformationSettings property: Built In Transformation configuration.
     * 
     * @return the builtInTransformationSettings value.
     */
    public DataflowBuiltInTransformationSettings builtInTransformationSettings() {
        return this.builtInTransformationSettings;
    }

    /**
     * Set the builtInTransformationSettings property: Built In Transformation configuration.
     * 
     * @param builtInTransformationSettings the builtInTransformationSettings value to set.
     * @return the DataflowOperation object itself.
     */
    public DataflowOperation
        withBuiltInTransformationSettings(DataflowBuiltInTransformationSettings builtInTransformationSettings) {
        this.builtInTransformationSettings = builtInTransformationSettings;
        return this;
    }

    /**
     * Get the destinationSettings property: Destination configuration.
     * 
     * @return the destinationSettings value.
     */
    public DataflowDestinationOperationSettings destinationSettings() {
        return this.destinationSettings;
    }

    /**
     * Set the destinationSettings property: Destination configuration.
     * 
     * @param destinationSettings the destinationSettings value to set.
     * @return the DataflowOperation object itself.
     */
    public DataflowOperation withDestinationSettings(DataflowDestinationOperationSettings destinationSettings) {
        this.destinationSettings = destinationSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationType() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property operationType in model DataflowOperation"));
        }
        if (sourceSettings() != null) {
            sourceSettings().validate();
        }
        if (builtInTransformationSettings() != null) {
            builtInTransformationSettings().validate();
        }
        if (destinationSettings() != null) {
            destinationSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowOperation.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationType", this.operationType == null ? null : this.operationType.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeJsonField("sourceSettings", this.sourceSettings);
        jsonWriter.writeJsonField("builtInTransformationSettings", this.builtInTransformationSettings);
        jsonWriter.writeJsonField("destinationSettings", this.destinationSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowOperation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowOperation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowOperation.
     */
    public static DataflowOperation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowOperation deserializedDataflowOperation = new DataflowOperation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationType".equals(fieldName)) {
                    deserializedDataflowOperation.operationType = OperationType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedDataflowOperation.name = reader.getString();
                } else if ("sourceSettings".equals(fieldName)) {
                    deserializedDataflowOperation.sourceSettings = DataflowSourceOperationSettings.fromJson(reader);
                } else if ("builtInTransformationSettings".equals(fieldName)) {
                    deserializedDataflowOperation.builtInTransformationSettings
                        = DataflowBuiltInTransformationSettings.fromJson(reader);
                } else if ("destinationSettings".equals(fieldName)) {
                    deserializedDataflowOperation.destinationSettings
                        = DataflowDestinationOperationSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowOperation;
        });
    }
}
