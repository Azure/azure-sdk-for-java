// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.BrokerListenersClient;
import com.azure.resourcemanager.iotoperations.fluent.models.BrokerListenerResourceInner;
import com.azure.resourcemanager.iotoperations.models.BrokerListenerResource;
import com.azure.resourcemanager.iotoperations.models.BrokerListeners;

public final class BrokerListenersImpl implements BrokerListeners {
    private static final ClientLogger LOGGER = new ClientLogger(BrokerListenersImpl.class);

    private final BrokerListenersClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public BrokerListenersImpl(BrokerListenersClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<BrokerListenerResource> getWithResponse(String resourceGroupName, String instanceName,
        String brokerName, String listenerName, Context context) {
        Response<BrokerListenerResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, instanceName, brokerName, listenerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new BrokerListenerResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public BrokerListenerResource get(String resourceGroupName, String instanceName, String brokerName,
        String listenerName) {
        BrokerListenerResourceInner inner
            = this.serviceClient().get(resourceGroupName, instanceName, brokerName, listenerName);
        if (inner != null) {
            return new BrokerListenerResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String instanceName, String brokerName, String listenerName) {
        this.serviceClient().delete(resourceGroupName, instanceName, brokerName, listenerName);
    }

    public void delete(String resourceGroupName, String instanceName, String brokerName, String listenerName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, brokerName, listenerName, context);
    }

    public PagedIterable<BrokerListenerResource> listByResourceGroup(String resourceGroupName, String instanceName,
        String brokerName) {
        PagedIterable<BrokerListenerResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, instanceName, brokerName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BrokerListenerResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<BrokerListenerResource> listByResourceGroup(String resourceGroupName, String instanceName,
        String brokerName, Context context) {
        PagedIterable<BrokerListenerResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, instanceName, brokerName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new BrokerListenerResourceImpl(inner1, this.manager()));
    }

    public BrokerListenerResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String brokerName = ResourceManagerUtils.getValueFromIdByName(id, "brokers");
        if (brokerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'brokers'.", id)));
        }
        String listenerName = ResourceManagerUtils.getValueFromIdByName(id, "listeners");
        if (listenerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'listeners'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, brokerName, listenerName, Context.NONE).getValue();
    }

    public Response<BrokerListenerResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String brokerName = ResourceManagerUtils.getValueFromIdByName(id, "brokers");
        if (brokerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'brokers'.", id)));
        }
        String listenerName = ResourceManagerUtils.getValueFromIdByName(id, "listeners");
        if (listenerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'listeners'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, brokerName, listenerName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String brokerName = ResourceManagerUtils.getValueFromIdByName(id, "brokers");
        if (brokerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'brokers'.", id)));
        }
        String listenerName = ResourceManagerUtils.getValueFromIdByName(id, "listeners");
        if (listenerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'listeners'.", id)));
        }
        this.delete(resourceGroupName, instanceName, brokerName, listenerName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String brokerName = ResourceManagerUtils.getValueFromIdByName(id, "brokers");
        if (brokerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'brokers'.", id)));
        }
        String listenerName = ResourceManagerUtils.getValueFromIdByName(id, "listeners");
        if (listenerName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'listeners'.", id)));
        }
        this.delete(resourceGroupName, instanceName, brokerName, listenerName, context);
    }

    private BrokerListenersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public BrokerListenerResourceImpl define(String name) {
        return new BrokerListenerResourceImpl(name, this.manager());
    }
}
