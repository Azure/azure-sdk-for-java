// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * DataflowGraph graph node settings.
 */
@Fluent
public final class DataflowGraphNodeGraphSettings implements JsonSerializable<DataflowGraphNodeGraphSettings> {
    /*
     * Reference to the registry endpoint for pulling the artifact.
     */
    private String registryEndpointRef;

    /*
     * The artifact name and version to pull. This should be in the format `<artifact-name>:<version>`.
     */
    private String artifact;

    /*
     * Configuration key-value pairs.
     */
    private List<DataflowGraphGraphNodeConfiguration> configuration;

    /**
     * Creates an instance of DataflowGraphNodeGraphSettings class.
     */
    public DataflowGraphNodeGraphSettings() {
    }

    /**
     * Get the registryEndpointRef property: Reference to the registry endpoint for pulling the artifact.
     * 
     * @return the registryEndpointRef value.
     */
    public String registryEndpointRef() {
        return this.registryEndpointRef;
    }

    /**
     * Set the registryEndpointRef property: Reference to the registry endpoint for pulling the artifact.
     * 
     * @param registryEndpointRef the registryEndpointRef value to set.
     * @return the DataflowGraphNodeGraphSettings object itself.
     */
    public DataflowGraphNodeGraphSettings withRegistryEndpointRef(String registryEndpointRef) {
        this.registryEndpointRef = registryEndpointRef;
        return this;
    }

    /**
     * Get the artifact property: The artifact name and version to pull. This should be in the format
     * `&lt;artifact-name&gt;:&lt;version&gt;`.
     * 
     * @return the artifact value.
     */
    public String artifact() {
        return this.artifact;
    }

    /**
     * Set the artifact property: The artifact name and version to pull. This should be in the format
     * `&lt;artifact-name&gt;:&lt;version&gt;`.
     * 
     * @param artifact the artifact value to set.
     * @return the DataflowGraphNodeGraphSettings object itself.
     */
    public DataflowGraphNodeGraphSettings withArtifact(String artifact) {
        this.artifact = artifact;
        return this;
    }

    /**
     * Get the configuration property: Configuration key-value pairs.
     * 
     * @return the configuration value.
     */
    public List<DataflowGraphGraphNodeConfiguration> configuration() {
        return this.configuration;
    }

    /**
     * Set the configuration property: Configuration key-value pairs.
     * 
     * @param configuration the configuration value to set.
     * @return the DataflowGraphNodeGraphSettings object itself.
     */
    public DataflowGraphNodeGraphSettings withConfiguration(List<DataflowGraphGraphNodeConfiguration> configuration) {
        this.configuration = configuration;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("registryEndpointRef", this.registryEndpointRef);
        jsonWriter.writeStringField("artifact", this.artifact);
        jsonWriter.writeArrayField("configuration", this.configuration, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphNodeGraphSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphNodeGraphSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphNodeGraphSettings.
     */
    public static DataflowGraphNodeGraphSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphNodeGraphSettings deserializedDataflowGraphNodeGraphSettings
                = new DataflowGraphNodeGraphSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("registryEndpointRef".equals(fieldName)) {
                    deserializedDataflowGraphNodeGraphSettings.registryEndpointRef = reader.getString();
                } else if ("artifact".equals(fieldName)) {
                    deserializedDataflowGraphNodeGraphSettings.artifact = reader.getString();
                } else if ("configuration".equals(fieldName)) {
                    List<DataflowGraphGraphNodeConfiguration> configuration
                        = reader.readArray(reader1 -> DataflowGraphGraphNodeConfiguration.fromJson(reader1));
                    deserializedDataflowGraphNodeGraphSettings.configuration = configuration;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphNodeGraphSettings;
        });
    }
}
