// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dataflow Destination Operation properties.
 */
@Fluent
public final class DataflowDestinationOperationSettings
    implements JsonSerializable<DataflowDestinationOperationSettings> {
    /*
     * Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX type.
     */
    private String endpointRef;

    /*
     * Destination location, can be a topic or table name. Supports dynamic values with $topic, $systemProperties,
     * $userProperties, $payload, $context, and $subscription.
     */
    private String dataDestination;

    /**
     * Creates an instance of DataflowDestinationOperationSettings class.
     */
    public DataflowDestinationOperationSettings() {
    }

    /**
     * Get the endpointRef property: Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX type.
     * 
     * @return the endpointRef value.
     */
    public String endpointRef() {
        return this.endpointRef;
    }

    /**
     * Set the endpointRef property: Reference to the Endpoint CR. Can be of Broker, Kafka, Fabric, ADLS, ADX type.
     * 
     * @param endpointRef the endpointRef value to set.
     * @return the DataflowDestinationOperationSettings object itself.
     */
    public DataflowDestinationOperationSettings withEndpointRef(String endpointRef) {
        this.endpointRef = endpointRef;
        return this;
    }

    /**
     * Get the dataDestination property: Destination location, can be a topic or table name. Supports dynamic values
     * with $topic, $systemProperties, $userProperties, $payload, $context, and $subscription.
     * 
     * @return the dataDestination value.
     */
    public String dataDestination() {
        return this.dataDestination;
    }

    /**
     * Set the dataDestination property: Destination location, can be a topic or table name. Supports dynamic values
     * with $topic, $systemProperties, $userProperties, $payload, $context, and $subscription.
     * 
     * @param dataDestination the dataDestination value to set.
     * @return the DataflowDestinationOperationSettings object itself.
     */
    public DataflowDestinationOperationSettings withDataDestination(String dataDestination) {
        this.dataDestination = dataDestination;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (endpointRef() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointRef in model DataflowDestinationOperationSettings"));
        }
        if (dataDestination() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property dataDestination in model DataflowDestinationOperationSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowDestinationOperationSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointRef", this.endpointRef);
        jsonWriter.writeStringField("dataDestination", this.dataDestination);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowDestinationOperationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowDestinationOperationSettings if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowDestinationOperationSettings.
     */
    public static DataflowDestinationOperationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowDestinationOperationSettings deserializedDataflowDestinationOperationSettings
                = new DataflowDestinationOperationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointRef".equals(fieldName)) {
                    deserializedDataflowDestinationOperationSettings.endpointRef = reader.getString();
                } else if ("dataDestination".equals(fieldName)) {
                    deserializedDataflowDestinationOperationSettings.dataDestination = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowDestinationOperationSettings;
        });
    }
}
