// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplatePersistentVolumeClaim properties.
 */
@Fluent
public final class AkriConnectorTemplatePersistentVolumeClaim
    implements JsonSerializable<AkriConnectorTemplatePersistentVolumeClaim> {
    /*
     * The name of the persistent volume claim.
     */
    private String claimName;

    /*
     * The mount path for the persistent volume claim.
     */
    private String mountPath;

    /**
     * Creates an instance of AkriConnectorTemplatePersistentVolumeClaim class.
     */
    public AkriConnectorTemplatePersistentVolumeClaim() {
    }

    /**
     * Get the claimName property: The name of the persistent volume claim.
     * 
     * @return the claimName value.
     */
    public String claimName() {
        return this.claimName;
    }

    /**
     * Set the claimName property: The name of the persistent volume claim.
     * 
     * @param claimName the claimName value to set.
     * @return the AkriConnectorTemplatePersistentVolumeClaim object itself.
     */
    public AkriConnectorTemplatePersistentVolumeClaim withClaimName(String claimName) {
        this.claimName = claimName;
        return this;
    }

    /**
     * Get the mountPath property: The mount path for the persistent volume claim.
     * 
     * @return the mountPath value.
     */
    public String mountPath() {
        return this.mountPath;
    }

    /**
     * Set the mountPath property: The mount path for the persistent volume claim.
     * 
     * @param mountPath the mountPath value to set.
     * @return the AkriConnectorTemplatePersistentVolumeClaim object itself.
     */
    public AkriConnectorTemplatePersistentVolumeClaim withMountPath(String mountPath) {
        this.mountPath = mountPath;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (claimName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property claimName in model AkriConnectorTemplatePersistentVolumeClaim"));
        }
        if (mountPath() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property mountPath in model AkriConnectorTemplatePersistentVolumeClaim"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorTemplatePersistentVolumeClaim.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("claimName", this.claimName);
        jsonWriter.writeStringField("mountPath", this.mountPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplatePersistentVolumeClaim from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplatePersistentVolumeClaim if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplatePersistentVolumeClaim.
     */
    public static AkriConnectorTemplatePersistentVolumeClaim fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplatePersistentVolumeClaim deserializedAkriConnectorTemplatePersistentVolumeClaim
                = new AkriConnectorTemplatePersistentVolumeClaim();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("claimName".equals(fieldName)) {
                    deserializedAkriConnectorTemplatePersistentVolumeClaim.claimName = reader.getString();
                } else if ("mountPath".equals(fieldName)) {
                    deserializedAkriConnectorTemplatePersistentVolumeClaim.mountPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplatePersistentVolumeClaim;
        });
    }
}
