// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Broker State Store Policy Resources properties.
 */
@Fluent
public final class BrokerStateStorePolicyResources implements JsonSerializable<BrokerStateStorePolicyResources> {
    /*
     * The key to persist to disk.
     */
    private BrokerStateStoreKeyType keyType;

    /*
     * List of keys to persist to disk, required.
     */
    private List<String> keys;

    /**
     * Creates an instance of BrokerStateStorePolicyResources class.
     */
    public BrokerStateStorePolicyResources() {
    }

    /**
     * Get the keyType property: The key to persist to disk.
     * 
     * @return the keyType value.
     */
    public BrokerStateStoreKeyType keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: The key to persist to disk.
     * 
     * @param keyType the keyType value to set.
     * @return the BrokerStateStorePolicyResources object itself.
     */
    public BrokerStateStorePolicyResources withKeyType(BrokerStateStoreKeyType keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the keys property: List of keys to persist to disk, required.
     * 
     * @return the keys value.
     */
    public List<String> keys() {
        return this.keys;
    }

    /**
     * Set the keys property: List of keys to persist to disk, required.
     * 
     * @param keys the keys value to set.
     * @return the BrokerStateStorePolicyResources object itself.
     */
    public BrokerStateStorePolicyResources withKeys(List<String> keys) {
        this.keys = keys;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyType", this.keyType == null ? null : this.keyType.toString());
        jsonWriter.writeArrayField("keys", this.keys, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerStateStorePolicyResources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerStateStorePolicyResources if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerStateStorePolicyResources.
     */
    public static BrokerStateStorePolicyResources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerStateStorePolicyResources deserializedBrokerStateStorePolicyResources
                = new BrokerStateStorePolicyResources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyType".equals(fieldName)) {
                    deserializedBrokerStateStorePolicyResources.keyType
                        = BrokerStateStoreKeyType.fromString(reader.getString());
                } else if ("keys".equals(fieldName)) {
                    List<String> keys = reader.readArray(reader1 -> reader1.getString());
                    deserializedBrokerStateStorePolicyResources.keys = keys;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerStateStorePolicyResources;
        });
    }
}
