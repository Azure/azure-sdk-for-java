// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Automatic TLS server certificate management with cert-manager.
 */
@Fluent
public final class CertManagerCertificateSpec implements JsonSerializable<CertManagerCertificateSpec> {
    /*
     * Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and
     * 45m for 45 minutes.
     */
    private String duration;

    /*
     * Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret
     * through an identifying name, not the secret itself.
     */
    private String secretName;

    /*
     * When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240
     * hours and 45m for 45 minutes.
     */
    private String renewBefore;

    /*
     * cert-manager issuerRef.
     */
    private CertManagerIssuerRef issuerRef;

    /*
     * Type of certificate private key.
     */
    private CertManagerPrivateKey privateKey;

    /*
     * Additional Subject Alternative Names (SANs) to include in the certificate.
     */
    private SanForCert san;

    /**
     * Creates an instance of CertManagerCertificateSpec class.
     */
    public CertManagerCertificateSpec() {
    }

    /**
     * Get the duration property: Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s).
     * E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Set the duration property: Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s).
     * E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @param duration the duration value to set.
     * @return the CertManagerCertificateSpec object itself.
     */
    public CertManagerCertificateSpec withDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the secretName property: Secret for storing server certificate. Any existing data will be overwritten. This
     * is a reference to the secret through an identifying name, not the secret itself.
     * 
     * @return the secretName value.
     */
    public String secretName() {
        return this.secretName;
    }

    /**
     * Set the secretName property: Secret for storing server certificate. Any existing data will be overwritten. This
     * is a reference to the secret through an identifying name, not the secret itself.
     * 
     * @param secretName the secretName value to set.
     * @return the CertManagerCertificateSpec object itself.
     */
    public CertManagerCertificateSpec withSecretName(String secretName) {
        this.secretName = secretName;
        return this;
    }

    /**
     * Get the renewBefore property: When to begin renewing certificate. Must be specified using a Go time.Duration
     * format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @return the renewBefore value.
     */
    public String renewBefore() {
        return this.renewBefore;
    }

    /**
     * Set the renewBefore property: When to begin renewing certificate. Must be specified using a Go time.Duration
     * format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.
     * 
     * @param renewBefore the renewBefore value to set.
     * @return the CertManagerCertificateSpec object itself.
     */
    public CertManagerCertificateSpec withRenewBefore(String renewBefore) {
        this.renewBefore = renewBefore;
        return this;
    }

    /**
     * Get the issuerRef property: cert-manager issuerRef.
     * 
     * @return the issuerRef value.
     */
    public CertManagerIssuerRef issuerRef() {
        return this.issuerRef;
    }

    /**
     * Set the issuerRef property: cert-manager issuerRef.
     * 
     * @param issuerRef the issuerRef value to set.
     * @return the CertManagerCertificateSpec object itself.
     */
    public CertManagerCertificateSpec withIssuerRef(CertManagerIssuerRef issuerRef) {
        this.issuerRef = issuerRef;
        return this;
    }

    /**
     * Get the privateKey property: Type of certificate private key.
     * 
     * @return the privateKey value.
     */
    public CertManagerPrivateKey privateKey() {
        return this.privateKey;
    }

    /**
     * Set the privateKey property: Type of certificate private key.
     * 
     * @param privateKey the privateKey value to set.
     * @return the CertManagerCertificateSpec object itself.
     */
    public CertManagerCertificateSpec withPrivateKey(CertManagerPrivateKey privateKey) {
        this.privateKey = privateKey;
        return this;
    }

    /**
     * Get the san property: Additional Subject Alternative Names (SANs) to include in the certificate.
     * 
     * @return the san value.
     */
    public SanForCert san() {
        return this.san;
    }

    /**
     * Set the san property: Additional Subject Alternative Names (SANs) to include in the certificate.
     * 
     * @param san the san value to set.
     * @return the CertManagerCertificateSpec object itself.
     */
    public CertManagerCertificateSpec withSan(SanForCert san) {
        this.san = san;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issuerRef() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property issuerRef in model CertManagerCertificateSpec"));
        } else {
            issuerRef().validate();
        }
        if (privateKey() != null) {
            privateKey().validate();
        }
        if (san() != null) {
            san().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CertManagerCertificateSpec.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("issuerRef", this.issuerRef);
        jsonWriter.writeStringField("duration", this.duration);
        jsonWriter.writeStringField("secretName", this.secretName);
        jsonWriter.writeStringField("renewBefore", this.renewBefore);
        jsonWriter.writeJsonField("privateKey", this.privateKey);
        jsonWriter.writeJsonField("san", this.san);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CertManagerCertificateSpec from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CertManagerCertificateSpec if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CertManagerCertificateSpec.
     */
    public static CertManagerCertificateSpec fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CertManagerCertificateSpec deserializedCertManagerCertificateSpec = new CertManagerCertificateSpec();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issuerRef".equals(fieldName)) {
                    deserializedCertManagerCertificateSpec.issuerRef = CertManagerIssuerRef.fromJson(reader);
                } else if ("duration".equals(fieldName)) {
                    deserializedCertManagerCertificateSpec.duration = reader.getString();
                } else if ("secretName".equals(fieldName)) {
                    deserializedCertManagerCertificateSpec.secretName = reader.getString();
                } else if ("renewBefore".equals(fieldName)) {
                    deserializedCertManagerCertificateSpec.renewBefore = reader.getString();
                } else if ("privateKey".equals(fieldName)) {
                    deserializedCertManagerCertificateSpec.privateKey = CertManagerPrivateKey.fromJson(reader);
                } else if ("san".equals(fieldName)) {
                    deserializedCertManagerCertificateSpec.san = SanForCert.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCertManagerCertificateSpec;
        });
    }
}
