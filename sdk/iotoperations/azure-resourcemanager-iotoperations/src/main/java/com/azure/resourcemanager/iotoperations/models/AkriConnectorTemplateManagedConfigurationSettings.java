// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * AkriConnectorTemplateManagedConfiguration properties.
 */
@Fluent
public class AkriConnectorTemplateManagedConfigurationSettings
    implements JsonSerializable<AkriConnectorTemplateManagedConfigurationSettings> {
    /*
     * The type of the managed configuration.
     */
    private AkriConnectorTemplateManagedConfigurationType managedConfigurationType
        = AkriConnectorTemplateManagedConfigurationType.fromString("AkriConnectorTemplateManagedConfigurationSettings");

    /*
     * Allocation settings for the managed configuration.
     */
    private AkriConnectorTemplateAllocation allocation;

    /*
     * The persistent volume claims for the managed configuration.
     */
    private List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims;

    /*
     * Additional configuration for the image of the managed configuration.
     */
    private Map<String, String> additionalConfiguration;

    /*
     * The persistent volume claim templates for the managed configuration.
     * See https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/
     * apis__apps__v1_openapi.json.
     */
    private List<Map<String, BinaryData>> persistentVolumeClaimTemplates;

    /*
     * Connector secrets that will be mounted onto all connector instances.
     */
    private List<AkriConnectorsSecret> secrets;

    /*
     * Trust list for the connector. This is used to specify the certificates that all connector instances should trust.
     */
    private AkriConnectorTemplateTrustList trustSettings;

    /**
     * Creates an instance of AkriConnectorTemplateManagedConfigurationSettings class.
     */
    public AkriConnectorTemplateManagedConfigurationSettings() {
    }

    /**
     * Get the managedConfigurationType property: The type of the managed configuration.
     * 
     * @return the managedConfigurationType value.
     */
    public AkriConnectorTemplateManagedConfigurationType managedConfigurationType() {
        return this.managedConfigurationType;
    }

    /**
     * Get the allocation property: Allocation settings for the managed configuration.
     * 
     * @return the allocation value.
     */
    public AkriConnectorTemplateAllocation allocation() {
        return this.allocation;
    }

    /**
     * Set the allocation property: Allocation settings for the managed configuration.
     * 
     * @param allocation the allocation value to set.
     * @return the AkriConnectorTemplateManagedConfigurationSettings object itself.
     */
    public AkriConnectorTemplateManagedConfigurationSettings
        withAllocation(AkriConnectorTemplateAllocation allocation) {
        this.allocation = allocation;
        return this;
    }

    /**
     * Get the persistentVolumeClaims property: The persistent volume claims for the managed configuration.
     * 
     * @return the persistentVolumeClaims value.
     */
    public List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims() {
        return this.persistentVolumeClaims;
    }

    /**
     * Set the persistentVolumeClaims property: The persistent volume claims for the managed configuration.
     * 
     * @param persistentVolumeClaims the persistentVolumeClaims value to set.
     * @return the AkriConnectorTemplateManagedConfigurationSettings object itself.
     */
    public AkriConnectorTemplateManagedConfigurationSettings
        withPersistentVolumeClaims(List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims) {
        this.persistentVolumeClaims = persistentVolumeClaims;
        return this;
    }

    /**
     * Get the additionalConfiguration property: Additional configuration for the image of the managed configuration.
     * 
     * @return the additionalConfiguration value.
     */
    public Map<String, String> additionalConfiguration() {
        return this.additionalConfiguration;
    }

    /**
     * Set the additionalConfiguration property: Additional configuration for the image of the managed configuration.
     * 
     * @param additionalConfiguration the additionalConfiguration value to set.
     * @return the AkriConnectorTemplateManagedConfigurationSettings object itself.
     */
    public AkriConnectorTemplateManagedConfigurationSettings
        withAdditionalConfiguration(Map<String, String> additionalConfiguration) {
        this.additionalConfiguration = additionalConfiguration;
        return this;
    }

    /**
     * Get the persistentVolumeClaimTemplates property: The persistent volume claim templates for the managed
     * configuration.
     * See
     * https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json.
     * 
     * @return the persistentVolumeClaimTemplates value.
     */
    public List<Map<String, BinaryData>> persistentVolumeClaimTemplates() {
        return this.persistentVolumeClaimTemplates;
    }

    /**
     * Set the persistentVolumeClaimTemplates property: The persistent volume claim templates for the managed
     * configuration.
     * See
     * https://raw.githubusercontent.com/kubernetes/kubernetes/refs/heads/master/api/openapi-spec/v3/apis__apps__v1_openapi.json.
     * 
     * @param persistentVolumeClaimTemplates the persistentVolumeClaimTemplates value to set.
     * @return the AkriConnectorTemplateManagedConfigurationSettings object itself.
     */
    public AkriConnectorTemplateManagedConfigurationSettings
        withPersistentVolumeClaimTemplates(List<Map<String, BinaryData>> persistentVolumeClaimTemplates) {
        this.persistentVolumeClaimTemplates = persistentVolumeClaimTemplates;
        return this;
    }

    /**
     * Get the secrets property: Connector secrets that will be mounted onto all connector instances.
     * 
     * @return the secrets value.
     */
    public List<AkriConnectorsSecret> secrets() {
        return this.secrets;
    }

    /**
     * Set the secrets property: Connector secrets that will be mounted onto all connector instances.
     * 
     * @param secrets the secrets value to set.
     * @return the AkriConnectorTemplateManagedConfigurationSettings object itself.
     */
    public AkriConnectorTemplateManagedConfigurationSettings withSecrets(List<AkriConnectorsSecret> secrets) {
        this.secrets = secrets;
        return this;
    }

    /**
     * Get the trustSettings property: Trust list for the connector. This is used to specify the certificates that all
     * connector instances should trust.
     * 
     * @return the trustSettings value.
     */
    public AkriConnectorTemplateTrustList trustSettings() {
        return this.trustSettings;
    }

    /**
     * Set the trustSettings property: Trust list for the connector. This is used to specify the certificates that all
     * connector instances should trust.
     * 
     * @param trustSettings the trustSettings value to set.
     * @return the AkriConnectorTemplateManagedConfigurationSettings object itself.
     */
    public AkriConnectorTemplateManagedConfigurationSettings
        withTrustSettings(AkriConnectorTemplateTrustList trustSettings) {
        this.trustSettings = trustSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (allocation() != null) {
            allocation().validate();
        }
        if (persistentVolumeClaims() != null) {
            persistentVolumeClaims().forEach(e -> e.validate());
        }
        if (secrets() != null) {
            secrets().forEach(e -> e.validate());
        }
        if (trustSettings() != null) {
            trustSettings().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedConfigurationType",
            this.managedConfigurationType == null ? null : this.managedConfigurationType.toString());
        jsonWriter.writeJsonField("allocation", this.allocation);
        jsonWriter.writeArrayField("persistentVolumeClaims", this.persistentVolumeClaims,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("additionalConfiguration", this.additionalConfiguration,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("persistentVolumeClaimTemplates", this.persistentVolumeClaimTemplates,
            (writer, element) -> writer.writeMap(element, (writer1, element1) -> writer1
                .writeUntyped(element1 == null ? null : element1.toObject(Object.class))));
        jsonWriter.writeArrayField("secrets", this.secrets, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("trustSettings", this.trustSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateManagedConfigurationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateManagedConfigurationSettings if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateManagedConfigurationSettings.
     */
    public static AkriConnectorTemplateManagedConfigurationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("managedConfigurationType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ImageConfiguration".equals(discriminatorValue)) {
                    return AkriConnectorTemplateRuntimeImageConfiguration.fromJson(readerToUse.reset());
                } else if ("StatefulSetConfiguration".equals(discriminatorValue)) {
                    return AkriConnectorTemplateRuntimeStatefulSetConfiguration.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static AkriConnectorTemplateManagedConfigurationSettings fromJsonKnownDiscriminator(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateManagedConfigurationSettings deserializedAkriConnectorTemplateManagedConfigurationSettings
                = new AkriConnectorTemplateManagedConfigurationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedConfigurationType".equals(fieldName)) {
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.managedConfigurationType
                        = AkriConnectorTemplateManagedConfigurationType.fromString(reader.getString());
                } else if ("allocation".equals(fieldName)) {
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.allocation
                        = AkriConnectorTemplateAllocation.fromJson(reader);
                } else if ("persistentVolumeClaims".equals(fieldName)) {
                    List<AkriConnectorTemplatePersistentVolumeClaim> persistentVolumeClaims
                        = reader.readArray(reader1 -> AkriConnectorTemplatePersistentVolumeClaim.fromJson(reader1));
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.persistentVolumeClaims
                        = persistentVolumeClaims;
                } else if ("additionalConfiguration".equals(fieldName)) {
                    Map<String, String> additionalConfiguration = reader.readMap(reader1 -> reader1.getString());
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.additionalConfiguration
                        = additionalConfiguration;
                } else if ("persistentVolumeClaimTemplates".equals(fieldName)) {
                    List<Map<String, BinaryData>> persistentVolumeClaimTemplates
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2
                            .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()))));
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.persistentVolumeClaimTemplates
                        = persistentVolumeClaimTemplates;
                } else if ("secrets".equals(fieldName)) {
                    List<AkriConnectorsSecret> secrets
                        = reader.readArray(reader1 -> AkriConnectorsSecret.fromJson(reader1));
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.secrets = secrets;
                } else if ("trustSettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateManagedConfigurationSettings.trustSettings
                        = AkriConnectorTemplateTrustList.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateManagedConfigurationSettings;
        });
    }
}
