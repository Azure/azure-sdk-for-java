// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The settings of Client Config.
 */
@Fluent
public final class ClientConfig implements JsonSerializable<ClientConfig> {
    /*
     * Upper bound of Session Expiry Interval, in seconds.
     */
    private Integer maxSessionExpirySeconds;

    /*
     * Upper bound of Message Expiry Interval, in seconds.
     */
    private Integer maxMessageExpirySeconds;

    /*
     * Max message size for a packet in Bytes.
     */
    private Integer maxPacketSizeBytes;

    /*
     * The limit on the number of queued messages for a subscriber.
     */
    private SubscriberQueueLimit subscriberQueueLimit;

    /*
     * Upper bound of Receive Maximum that a client can request in the CONNECT packet.
     */
    private Integer maxReceiveMaximum;

    /*
     * Upper bound of a client's Keep Alive, in seconds.
     */
    private Integer maxKeepAliveSeconds;

    /**
     * Creates an instance of ClientConfig class.
     */
    public ClientConfig() {
    }

    /**
     * Get the maxSessionExpirySeconds property: Upper bound of Session Expiry Interval, in seconds.
     * 
     * @return the maxSessionExpirySeconds value.
     */
    public Integer maxSessionExpirySeconds() {
        return this.maxSessionExpirySeconds;
    }

    /**
     * Set the maxSessionExpirySeconds property: Upper bound of Session Expiry Interval, in seconds.
     * 
     * @param maxSessionExpirySeconds the maxSessionExpirySeconds value to set.
     * @return the ClientConfig object itself.
     */
    public ClientConfig withMaxSessionExpirySeconds(Integer maxSessionExpirySeconds) {
        this.maxSessionExpirySeconds = maxSessionExpirySeconds;
        return this;
    }

    /**
     * Get the maxMessageExpirySeconds property: Upper bound of Message Expiry Interval, in seconds.
     * 
     * @return the maxMessageExpirySeconds value.
     */
    public Integer maxMessageExpirySeconds() {
        return this.maxMessageExpirySeconds;
    }

    /**
     * Set the maxMessageExpirySeconds property: Upper bound of Message Expiry Interval, in seconds.
     * 
     * @param maxMessageExpirySeconds the maxMessageExpirySeconds value to set.
     * @return the ClientConfig object itself.
     */
    public ClientConfig withMaxMessageExpirySeconds(Integer maxMessageExpirySeconds) {
        this.maxMessageExpirySeconds = maxMessageExpirySeconds;
        return this;
    }

    /**
     * Get the maxPacketSizeBytes property: Max message size for a packet in Bytes.
     * 
     * @return the maxPacketSizeBytes value.
     */
    public Integer maxPacketSizeBytes() {
        return this.maxPacketSizeBytes;
    }

    /**
     * Set the maxPacketSizeBytes property: Max message size for a packet in Bytes.
     * 
     * @param maxPacketSizeBytes the maxPacketSizeBytes value to set.
     * @return the ClientConfig object itself.
     */
    public ClientConfig withMaxPacketSizeBytes(Integer maxPacketSizeBytes) {
        this.maxPacketSizeBytes = maxPacketSizeBytes;
        return this;
    }

    /**
     * Get the subscriberQueueLimit property: The limit on the number of queued messages for a subscriber.
     * 
     * @return the subscriberQueueLimit value.
     */
    public SubscriberQueueLimit subscriberQueueLimit() {
        return this.subscriberQueueLimit;
    }

    /**
     * Set the subscriberQueueLimit property: The limit on the number of queued messages for a subscriber.
     * 
     * @param subscriberQueueLimit the subscriberQueueLimit value to set.
     * @return the ClientConfig object itself.
     */
    public ClientConfig withSubscriberQueueLimit(SubscriberQueueLimit subscriberQueueLimit) {
        this.subscriberQueueLimit = subscriberQueueLimit;
        return this;
    }

    /**
     * Get the maxReceiveMaximum property: Upper bound of Receive Maximum that a client can request in the CONNECT
     * packet.
     * 
     * @return the maxReceiveMaximum value.
     */
    public Integer maxReceiveMaximum() {
        return this.maxReceiveMaximum;
    }

    /**
     * Set the maxReceiveMaximum property: Upper bound of Receive Maximum that a client can request in the CONNECT
     * packet.
     * 
     * @param maxReceiveMaximum the maxReceiveMaximum value to set.
     * @return the ClientConfig object itself.
     */
    public ClientConfig withMaxReceiveMaximum(Integer maxReceiveMaximum) {
        this.maxReceiveMaximum = maxReceiveMaximum;
        return this;
    }

    /**
     * Get the maxKeepAliveSeconds property: Upper bound of a client's Keep Alive, in seconds.
     * 
     * @return the maxKeepAliveSeconds value.
     */
    public Integer maxKeepAliveSeconds() {
        return this.maxKeepAliveSeconds;
    }

    /**
     * Set the maxKeepAliveSeconds property: Upper bound of a client's Keep Alive, in seconds.
     * 
     * @param maxKeepAliveSeconds the maxKeepAliveSeconds value to set.
     * @return the ClientConfig object itself.
     */
    public ClientConfig withMaxKeepAliveSeconds(Integer maxKeepAliveSeconds) {
        this.maxKeepAliveSeconds = maxKeepAliveSeconds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subscriberQueueLimit() != null) {
            subscriberQueueLimit().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("maxSessionExpirySeconds", this.maxSessionExpirySeconds);
        jsonWriter.writeNumberField("maxMessageExpirySeconds", this.maxMessageExpirySeconds);
        jsonWriter.writeNumberField("maxPacketSizeBytes", this.maxPacketSizeBytes);
        jsonWriter.writeJsonField("subscriberQueueLimit", this.subscriberQueueLimit);
        jsonWriter.writeNumberField("maxReceiveMaximum", this.maxReceiveMaximum);
        jsonWriter.writeNumberField("maxKeepAliveSeconds", this.maxKeepAliveSeconds);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClientConfig from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClientConfig if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClientConfig.
     */
    public static ClientConfig fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClientConfig deserializedClientConfig = new ClientConfig();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxSessionExpirySeconds".equals(fieldName)) {
                    deserializedClientConfig.maxSessionExpirySeconds = reader.getNullable(JsonReader::getInt);
                } else if ("maxMessageExpirySeconds".equals(fieldName)) {
                    deserializedClientConfig.maxMessageExpirySeconds = reader.getNullable(JsonReader::getInt);
                } else if ("maxPacketSizeBytes".equals(fieldName)) {
                    deserializedClientConfig.maxPacketSizeBytes = reader.getNullable(JsonReader::getInt);
                } else if ("subscriberQueueLimit".equals(fieldName)) {
                    deserializedClientConfig.subscriberQueueLimit = SubscriberQueueLimit.fromJson(reader);
                } else if ("maxReceiveMaximum".equals(fieldName)) {
                    deserializedClientConfig.maxReceiveMaximum = reader.getNullable(JsonReader::getInt);
                } else if ("maxKeepAliveSeconds".equals(fieldName)) {
                    deserializedClientConfig.maxKeepAliveSeconds = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClientConfig;
        });
    }
}
