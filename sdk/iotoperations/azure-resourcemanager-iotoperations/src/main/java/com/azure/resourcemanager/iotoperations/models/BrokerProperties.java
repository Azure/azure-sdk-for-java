// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Broker Resource properties.
 */
@Fluent
public final class BrokerProperties implements JsonSerializable<BrokerProperties> {
    /*
     * Advanced settings of Broker.
     */
    @Generated
    private AdvancedSettings advanced;

    /*
     * The cardinality details of the broker.
     */
    @Generated
    private Cardinality cardinality;

    /*
     * Spec defines the desired identities of Broker diagnostics settings.
     */
    @Generated
    private BrokerDiagnostics diagnostics;

    /*
     * Settings of Disk Backed Message Buffer.
     */
    @Generated
    private DiskBackedMessageBuffer diskBackedMessageBuffer;

    /*
     * This setting controls whether Kubernetes CPU resource limits are requested. Increasing the number of replicas or
     * workers proportionally increases the amount of CPU resources requested. If this setting is enabled and there are
     * insufficient CPU resources, an error will be emitted.
     */
    @Generated
    private GenerateResourceLimits generateResourceLimits;

    /*
     * Memory profile of Broker.
     */
    @Generated
    private BrokerMemoryProfile memoryProfile;

    /*
     * The status of the last operation.
     */
    @Generated
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of BrokerProperties class.
     */
    @Generated
    public BrokerProperties() {
    }

    /**
     * Get the advanced property: Advanced settings of Broker.
     * 
     * @return the advanced value.
     */
    @Generated
    public AdvancedSettings advanced() {
        return this.advanced;
    }

    /**
     * Set the advanced property: Advanced settings of Broker.
     * 
     * @param advanced the advanced value to set.
     * @return the BrokerProperties object itself.
     */
    @Generated
    public BrokerProperties withAdvanced(AdvancedSettings advanced) {
        this.advanced = advanced;
        return this;
    }

    /**
     * Get the cardinality property: The cardinality details of the broker.
     * 
     * @return the cardinality value.
     */
    @Generated
    public Cardinality cardinality() {
        return this.cardinality;
    }

    /**
     * Set the cardinality property: The cardinality details of the broker.
     * 
     * @param cardinality the cardinality value to set.
     * @return the BrokerProperties object itself.
     */
    @Generated
    public BrokerProperties withCardinality(Cardinality cardinality) {
        this.cardinality = cardinality;
        return this;
    }

    /**
     * Get the diagnostics property: Spec defines the desired identities of Broker diagnostics settings.
     * 
     * @return the diagnostics value.
     */
    @Generated
    public BrokerDiagnostics diagnostics() {
        return this.diagnostics;
    }

    /**
     * Set the diagnostics property: Spec defines the desired identities of Broker diagnostics settings.
     * 
     * @param diagnostics the diagnostics value to set.
     * @return the BrokerProperties object itself.
     */
    @Generated
    public BrokerProperties withDiagnostics(BrokerDiagnostics diagnostics) {
        this.diagnostics = diagnostics;
        return this;
    }

    /**
     * Get the diskBackedMessageBuffer property: Settings of Disk Backed Message Buffer.
     * 
     * @return the diskBackedMessageBuffer value.
     */
    @Generated
    public DiskBackedMessageBuffer diskBackedMessageBuffer() {
        return this.diskBackedMessageBuffer;
    }

    /**
     * Set the diskBackedMessageBuffer property: Settings of Disk Backed Message Buffer.
     * 
     * @param diskBackedMessageBuffer the diskBackedMessageBuffer value to set.
     * @return the BrokerProperties object itself.
     */
    @Generated
    public BrokerProperties withDiskBackedMessageBuffer(DiskBackedMessageBuffer diskBackedMessageBuffer) {
        this.diskBackedMessageBuffer = diskBackedMessageBuffer;
        return this;
    }

    /**
     * Get the generateResourceLimits property: This setting controls whether Kubernetes CPU resource limits are
     * requested. Increasing the number of replicas or workers proportionally increases the amount of CPU resources
     * requested. If this setting is enabled and there are insufficient CPU resources, an error will be emitted.
     * 
     * @return the generateResourceLimits value.
     */
    @Generated
    public GenerateResourceLimits generateResourceLimits() {
        return this.generateResourceLimits;
    }

    /**
     * Set the generateResourceLimits property: This setting controls whether Kubernetes CPU resource limits are
     * requested. Increasing the number of replicas or workers proportionally increases the amount of CPU resources
     * requested. If this setting is enabled and there are insufficient CPU resources, an error will be emitted.
     * 
     * @param generateResourceLimits the generateResourceLimits value to set.
     * @return the BrokerProperties object itself.
     */
    @Generated
    public BrokerProperties withGenerateResourceLimits(GenerateResourceLimits generateResourceLimits) {
        this.generateResourceLimits = generateResourceLimits;
        return this;
    }

    /**
     * Get the memoryProfile property: Memory profile of Broker.
     * 
     * @return the memoryProfile value.
     */
    @Generated
    public BrokerMemoryProfile memoryProfile() {
        return this.memoryProfile;
    }

    /**
     * Set the memoryProfile property: Memory profile of Broker.
     * 
     * @param memoryProfile the memoryProfile value to set.
     * @return the BrokerProperties object itself.
     */
    @Generated
    public BrokerProperties withMemoryProfile(BrokerMemoryProfile memoryProfile) {
        this.memoryProfile = memoryProfile;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    @Generated
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (advanced() != null) {
            advanced().validate();
        }
        if (cardinality() != null) {
            cardinality().validate();
        }
        if (diagnostics() != null) {
            diagnostics().validate();
        }
        if (diskBackedMessageBuffer() != null) {
            diskBackedMessageBuffer().validate();
        }
        if (generateResourceLimits() != null) {
            generateResourceLimits().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("advanced", this.advanced);
        jsonWriter.writeJsonField("cardinality", this.cardinality);
        jsonWriter.writeJsonField("diagnostics", this.diagnostics);
        jsonWriter.writeJsonField("diskBackedMessageBuffer", this.diskBackedMessageBuffer);
        jsonWriter.writeJsonField("generateResourceLimits", this.generateResourceLimits);
        jsonWriter.writeStringField("memoryProfile", this.memoryProfile == null ? null : this.memoryProfile.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the BrokerProperties.
     */
    public static BrokerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerProperties deserializedBrokerProperties = new BrokerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("advanced".equals(fieldName)) {
                    deserializedBrokerProperties.advanced = AdvancedSettings.fromJson(reader);
                } else if ("cardinality".equals(fieldName)) {
                    deserializedBrokerProperties.cardinality = Cardinality.fromJson(reader);
                } else if ("diagnostics".equals(fieldName)) {
                    deserializedBrokerProperties.diagnostics = BrokerDiagnostics.fromJson(reader);
                } else if ("diskBackedMessageBuffer".equals(fieldName)) {
                    deserializedBrokerProperties.diskBackedMessageBuffer = DiskBackedMessageBuffer.fromJson(reader);
                } else if ("generateResourceLimits".equals(fieldName)) {
                    deserializedBrokerProperties.generateResourceLimits = GenerateResourceLimits.fromJson(reader);
                } else if ("memoryProfile".equals(fieldName)) {
                    deserializedBrokerProperties.memoryProfile = BrokerMemoryProfile.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBrokerProperties.provisioningState = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerProperties;
        });
    }
}
