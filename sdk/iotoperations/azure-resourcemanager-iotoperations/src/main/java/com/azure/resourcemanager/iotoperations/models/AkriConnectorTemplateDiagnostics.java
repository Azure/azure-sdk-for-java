// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateDiagnostics properties.
 */
@Fluent
public final class AkriConnectorTemplateDiagnostics implements JsonSerializable<AkriConnectorTemplateDiagnostics> {
    /*
     * The log settings for the Connector template.
     */
    private AkriConnectorsDiagnosticsLogs logs;

    /**
     * Creates an instance of AkriConnectorTemplateDiagnostics class.
     */
    public AkriConnectorTemplateDiagnostics() {
    }

    /**
     * Get the logs property: The log settings for the Connector template.
     * 
     * @return the logs value.
     */
    public AkriConnectorsDiagnosticsLogs logs() {
        return this.logs;
    }

    /**
     * Set the logs property: The log settings for the Connector template.
     * 
     * @param logs the logs value to set.
     * @return the AkriConnectorTemplateDiagnostics object itself.
     */
    public AkriConnectorTemplateDiagnostics withLogs(AkriConnectorsDiagnosticsLogs logs) {
        this.logs = logs;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("logs", this.logs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateDiagnostics from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateDiagnostics if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateDiagnostics.
     */
    public static AkriConnectorTemplateDiagnostics fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateDiagnostics deserializedAkriConnectorTemplateDiagnostics
                = new AkriConnectorTemplateDiagnostics();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("logs".equals(fieldName)) {
                    deserializedAkriConnectorTemplateDiagnostics.logs = AkriConnectorsDiagnosticsLogs.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateDiagnostics;
        });
    }
}
