// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowOpenTelemetryX509CertificateAuthentication properties.
 */
@Fluent
public final class DataflowOpenTelemetryX509CertificateAuthentication extends DataflowOpenTelemetryAuthentication {
    /*
     * The authentication method.
     */
    private DataflowOpenTelemetryAuthenticationMethod method
        = DataflowOpenTelemetryAuthenticationMethod.X509CERTIFICATE;

    /*
     * X.509 certificate authentication settings.
     */
    private DataflowEndpointAuthenticationX509 x509CertificateSettings;

    /**
     * Creates an instance of DataflowOpenTelemetryX509CertificateAuthentication class.
     */
    public DataflowOpenTelemetryX509CertificateAuthentication() {
    }

    /**
     * Get the method property: The authentication method.
     * 
     * @return the method value.
     */
    @Override
    public DataflowOpenTelemetryAuthenticationMethod method() {
        return this.method;
    }

    /**
     * Get the x509CertificateSettings property: X.509 certificate authentication settings.
     * 
     * @return the x509CertificateSettings value.
     */
    public DataflowEndpointAuthenticationX509 x509CertificateSettings() {
        return this.x509CertificateSettings;
    }

    /**
     * Set the x509CertificateSettings property: X.509 certificate authentication settings.
     * 
     * @param x509CertificateSettings the x509CertificateSettings value to set.
     * @return the DataflowOpenTelemetryX509CertificateAuthentication object itself.
     */
    public DataflowOpenTelemetryX509CertificateAuthentication
        withX509CertificateSettings(DataflowEndpointAuthenticationX509 x509CertificateSettings) {
        this.x509CertificateSettings = x509CertificateSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (x509CertificateSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property x509CertificateSettings in model DataflowOpenTelemetryX509CertificateAuthentication"));
        } else {
            x509CertificateSettings().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(DataflowOpenTelemetryX509CertificateAuthentication.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("x509CertificateSettings", this.x509CertificateSettings);
        jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowOpenTelemetryX509CertificateAuthentication from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowOpenTelemetryX509CertificateAuthentication if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowOpenTelemetryX509CertificateAuthentication.
     */
    public static DataflowOpenTelemetryX509CertificateAuthentication fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowOpenTelemetryX509CertificateAuthentication deserializedDataflowOpenTelemetryX509CertificateAuthentication
                = new DataflowOpenTelemetryX509CertificateAuthentication();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("x509CertificateSettings".equals(fieldName)) {
                    deserializedDataflowOpenTelemetryX509CertificateAuthentication.x509CertificateSettings
                        = DataflowEndpointAuthenticationX509.fromJson(reader);
                } else if ("method".equals(fieldName)) {
                    deserializedDataflowOpenTelemetryX509CertificateAuthentication.method
                        = DataflowOpenTelemetryAuthenticationMethod.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowOpenTelemetryX509CertificateAuthentication;
        });
    }
}
