// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateManagedConfiguration properties.
 */
@Fluent
public final class AkriConnectorTemplateManagedConfiguration extends AkriConnectorTemplateRuntimeConfiguration {
    /*
     * Runtime configuration type for the Connector template.
     */
    private AkriConnectorTemplateRuntimeConfigurationType runtimeConfigurationType
        = AkriConnectorTemplateRuntimeConfigurationType.MANAGED_CONFIGURATION;

    /*
     * The managed configuration settings.
     */
    private AkriConnectorTemplateManagedConfigurationSettings managedConfigurationSettings;

    /**
     * Creates an instance of AkriConnectorTemplateManagedConfiguration class.
     */
    public AkriConnectorTemplateManagedConfiguration() {
    }

    /**
     * Get the runtimeConfigurationType property: Runtime configuration type for the Connector template.
     * 
     * @return the runtimeConfigurationType value.
     */
    @Override
    public AkriConnectorTemplateRuntimeConfigurationType runtimeConfigurationType() {
        return this.runtimeConfigurationType;
    }

    /**
     * Get the managedConfigurationSettings property: The managed configuration settings.
     * 
     * @return the managedConfigurationSettings value.
     */
    public AkriConnectorTemplateManagedConfigurationSettings managedConfigurationSettings() {
        return this.managedConfigurationSettings;
    }

    /**
     * Set the managedConfigurationSettings property: The managed configuration settings.
     * 
     * @param managedConfigurationSettings the managedConfigurationSettings value to set.
     * @return the AkriConnectorTemplateManagedConfiguration object itself.
     */
    public AkriConnectorTemplateManagedConfiguration withManagedConfigurationSettings(
        AkriConnectorTemplateManagedConfigurationSettings managedConfigurationSettings) {
        this.managedConfigurationSettings = managedConfigurationSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (managedConfigurationSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property managedConfigurationSettings in model AkriConnectorTemplateManagedConfiguration"));
        } else {
            managedConfigurationSettings().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(AkriConnectorTemplateManagedConfiguration.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("managedConfigurationSettings", this.managedConfigurationSettings);
        jsonWriter.writeStringField("runtimeConfigurationType",
            this.runtimeConfigurationType == null ? null : this.runtimeConfigurationType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateManagedConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateManagedConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateManagedConfiguration.
     */
    public static AkriConnectorTemplateManagedConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateManagedConfiguration deserializedAkriConnectorTemplateManagedConfiguration
                = new AkriConnectorTemplateManagedConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedConfigurationSettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateManagedConfiguration.managedConfigurationSettings
                        = AkriConnectorTemplateManagedConfigurationSettings.fromJson(reader);
                } else if ("runtimeConfigurationType".equals(fieldName)) {
                    deserializedAkriConnectorTemplateManagedConfiguration.runtimeConfigurationType
                        = AkriConnectorTemplateRuntimeConfigurationType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateManagedConfiguration;
        });
    }
}
