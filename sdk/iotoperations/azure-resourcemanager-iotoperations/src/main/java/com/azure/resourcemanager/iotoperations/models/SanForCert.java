// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Subject Alternative Names (SANs) for certificate.
 */
@Fluent
public final class SanForCert implements JsonSerializable<SanForCert> {
    /*
     * DNS SANs.
     */
    private List<String> dns;

    /*
     * IP address SANs.
     */
    private List<String> ip;

    /**
     * Creates an instance of SanForCert class.
     */
    public SanForCert() {
    }

    /**
     * Get the dns property: DNS SANs.
     * 
     * @return the dns value.
     */
    public List<String> dns() {
        return this.dns;
    }

    /**
     * Set the dns property: DNS SANs.
     * 
     * @param dns the dns value to set.
     * @return the SanForCert object itself.
     */
    public SanForCert withDns(List<String> dns) {
        this.dns = dns;
        return this;
    }

    /**
     * Get the ip property: IP address SANs.
     * 
     * @return the ip value.
     */
    public List<String> ip() {
        return this.ip;
    }

    /**
     * Set the ip property: IP address SANs.
     * 
     * @param ip the ip value to set.
     * @return the SanForCert object itself.
     */
    public SanForCert withIp(List<String> ip) {
        this.ip = ip;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dns() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property dns in model SanForCert"));
        }
        if (ip() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ip in model SanForCert"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SanForCert.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dns", this.dns, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("ip", this.ip, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SanForCert from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SanForCert if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SanForCert.
     */
    public static SanForCert fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SanForCert deserializedSanForCert = new SanForCert();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dns".equals(fieldName)) {
                    List<String> dns = reader.readArray(reader1 -> reader1.getString());
                    deserializedSanForCert.dns = dns;
                } else if ("ip".equals(fieldName)) {
                    List<String> ip = reader.readArray(reader1 -> reader1.getString());
                    deserializedSanForCert.ip = ip;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSanForCert;
        });
    }
}
