// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.InstancesClient;
import com.azure.resourcemanager.iotoperations.fluent.models.InstanceResourceInner;
import com.azure.resourcemanager.iotoperations.models.InstanceResource;
import com.azure.resourcemanager.iotoperations.models.Instances;

public final class InstancesImpl implements Instances {
    private static final ClientLogger LOGGER = new ClientLogger(InstancesImpl.class);

    private final InstancesClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public InstancesImpl(InstancesClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<InstanceResource> getByResourceGroupWithResponse(String resourceGroupName, String instanceName,
        Context context) {
        Response<InstanceResourceInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new InstanceResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InstanceResource getByResourceGroup(String resourceGroupName, String instanceName) {
        InstanceResourceInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, instanceName);
        if (inner != null) {
            return new InstanceResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String instanceName) {
        this.serviceClient().delete(resourceGroupName, instanceName);
    }

    public void delete(String resourceGroupName, String instanceName, Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, context);
    }

    public PagedIterable<InstanceResource> listByResourceGroup(String resourceGroupName) {
        PagedIterable<InstanceResourceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new InstanceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<InstanceResource> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<InstanceResourceInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new InstanceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<InstanceResource> list() {
        PagedIterable<InstanceResourceInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new InstanceResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<InstanceResource> list(Context context) {
        PagedIterable<InstanceResourceInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new InstanceResourceImpl(inner1, this.manager()));
    }

    public InstanceResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, Context.NONE).getValue();
    }

    public Response<InstanceResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, instanceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        this.delete(resourceGroupName, instanceName, context);
    }

    private InstancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public InstanceResourceImpl define(String name) {
        return new InstanceResourceImpl(name, this.manager());
    }
}
