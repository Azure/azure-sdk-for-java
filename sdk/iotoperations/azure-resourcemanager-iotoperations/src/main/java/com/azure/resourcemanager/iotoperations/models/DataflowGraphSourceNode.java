// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DataflowGraph source node properties.
 */
@Fluent
public final class DataflowGraphSourceNode extends DataflowGraphNode {
    /*
     * Type of the node.
     */
    private DataflowGraphNodeType nodeType = DataflowGraphNodeType.SOURCE;

    /*
     * Source configuration.
     */
    private DataflowGraphSourceSettings sourceSettings;

    /**
     * Creates an instance of DataflowGraphSourceNode class.
     */
    public DataflowGraphSourceNode() {
    }

    /**
     * Get the nodeType property: Type of the node.
     * 
     * @return the nodeType value.
     */
    @Override
    public DataflowGraphNodeType nodeType() {
        return this.nodeType;
    }

    /**
     * Get the sourceSettings property: Source configuration.
     * 
     * @return the sourceSettings value.
     */
    public DataflowGraphSourceSettings sourceSettings() {
        return this.sourceSettings;
    }

    /**
     * Set the sourceSettings property: Source configuration.
     * 
     * @param sourceSettings the sourceSettings value to set.
     * @return the DataflowGraphSourceNode object itself.
     */
    public DataflowGraphSourceNode withSourceSettings(DataflowGraphSourceSettings sourceSettings) {
        this.sourceSettings = sourceSettings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DataflowGraphSourceNode withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sourceSettings() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sourceSettings in model DataflowGraphSourceNode"));
        } else {
            sourceSettings().validate();
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model DataflowGraphSourceNode"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DataflowGraphSourceNode.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeJsonField("sourceSettings", this.sourceSettings);
        jsonWriter.writeStringField("nodeType", this.nodeType == null ? null : this.nodeType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataflowGraphSourceNode from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataflowGraphSourceNode if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataflowGraphSourceNode.
     */
    public static DataflowGraphSourceNode fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DataflowGraphSourceNode deserializedDataflowGraphSourceNode = new DataflowGraphSourceNode();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedDataflowGraphSourceNode.withName(reader.getString());
                } else if ("sourceSettings".equals(fieldName)) {
                    deserializedDataflowGraphSourceNode.sourceSettings = DataflowGraphSourceSettings.fromJson(reader);
                } else if ("nodeType".equals(fieldName)) {
                    deserializedDataflowGraphSourceNode.nodeType = DataflowGraphNodeType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDataflowGraphSourceNode;
        });
    }
}
