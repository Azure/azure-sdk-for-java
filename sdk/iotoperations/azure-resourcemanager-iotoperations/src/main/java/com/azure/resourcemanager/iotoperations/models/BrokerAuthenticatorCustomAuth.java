// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Custom Authentication properties.
 */
@Fluent
public final class BrokerAuthenticatorCustomAuth implements JsonSerializable<BrokerAuthenticatorCustomAuth> {
    /*
     * X509 Custom Auth type details.
     */
    private X509ManualCertificate x509;

    /**
     * Creates an instance of BrokerAuthenticatorCustomAuth class.
     */
    public BrokerAuthenticatorCustomAuth() {
    }

    /**
     * Get the x509 property: X509 Custom Auth type details.
     * 
     * @return the x509 value.
     */
    public X509ManualCertificate x509() {
        return this.x509;
    }

    /**
     * Set the x509 property: X509 Custom Auth type details.
     * 
     * @param x509 the x509 value to set.
     * @return the BrokerAuthenticatorCustomAuth object itself.
     */
    public BrokerAuthenticatorCustomAuth withX509(X509ManualCertificate x509) {
        this.x509 = x509;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (x509() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property x509 in model BrokerAuthenticatorCustomAuth"));
        } else {
            x509().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrokerAuthenticatorCustomAuth.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("x509", this.x509);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerAuthenticatorCustomAuth from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerAuthenticatorCustomAuth if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerAuthenticatorCustomAuth.
     */
    public static BrokerAuthenticatorCustomAuth fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerAuthenticatorCustomAuth deserializedBrokerAuthenticatorCustomAuth
                = new BrokerAuthenticatorCustomAuth();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("x509".equals(fieldName)) {
                    deserializedBrokerAuthenticatorCustomAuth.x509 = X509ManualCertificate.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerAuthenticatorCustomAuth;
        });
    }
}
