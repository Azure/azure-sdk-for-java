// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * State Store Resource Rule properties.
 */
@Fluent
public final class StateStoreResourceRule implements JsonSerializable<StateStoreResourceRule> {
    /*
     * Allowed keyTypes pattern, string, binary. The key type used for matching, for example pattern tries to match the
     * key to a glob-style pattern and string checks key is equal to value provided in keys.
     */
    private StateStoreResourceKeyTypes keyType;

    /*
     * Give access to state store keys for the corresponding principals defined. When key type is pattern set glob-style
     * pattern (e.g., '*', 'clients/*').
     */
    private List<String> keys;

    /*
     * Give access for `Read`, `Write` and `ReadWrite` access level.
     */
    private StateStoreResourceDefinitionMethods method;

    /**
     * Creates an instance of StateStoreResourceRule class.
     */
    public StateStoreResourceRule() {
    }

    /**
     * Get the keyType property: Allowed keyTypes pattern, string, binary. The key type used for matching, for example
     * pattern tries to match the key to a glob-style pattern and string checks key is equal to value provided in keys.
     * 
     * @return the keyType value.
     */
    public StateStoreResourceKeyTypes keyType() {
        return this.keyType;
    }

    /**
     * Set the keyType property: Allowed keyTypes pattern, string, binary. The key type used for matching, for example
     * pattern tries to match the key to a glob-style pattern and string checks key is equal to value provided in keys.
     * 
     * @param keyType the keyType value to set.
     * @return the StateStoreResourceRule object itself.
     */
    public StateStoreResourceRule withKeyType(StateStoreResourceKeyTypes keyType) {
        this.keyType = keyType;
        return this;
    }

    /**
     * Get the keys property: Give access to state store keys for the corresponding principals defined. When key type is
     * pattern set glob-style pattern (e.g., '*', 'clients/*').
     * 
     * @return the keys value.
     */
    public List<String> keys() {
        return this.keys;
    }

    /**
     * Set the keys property: Give access to state store keys for the corresponding principals defined. When key type is
     * pattern set glob-style pattern (e.g., '*', 'clients/*').
     * 
     * @param keys the keys value to set.
     * @return the StateStoreResourceRule object itself.
     */
    public StateStoreResourceRule withKeys(List<String> keys) {
        this.keys = keys;
        return this;
    }

    /**
     * Get the method property: Give access for `Read`, `Write` and `ReadWrite` access level.
     * 
     * @return the method value.
     */
    public StateStoreResourceDefinitionMethods method() {
        return this.method;
    }

    /**
     * Set the method property: Give access for `Read`, `Write` and `ReadWrite` access level.
     * 
     * @param method the method value to set.
     * @return the StateStoreResourceRule object itself.
     */
    public StateStoreResourceRule withMethod(StateStoreResourceDefinitionMethods method) {
        this.method = method;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (keyType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keyType in model StateStoreResourceRule"));
        }
        if (keys() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property keys in model StateStoreResourceRule"));
        }
        if (method() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property method in model StateStoreResourceRule"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StateStoreResourceRule.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyType", this.keyType == null ? null : this.keyType.toString());
        jsonWriter.writeArrayField("keys", this.keys, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("method", this.method == null ? null : this.method.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StateStoreResourceRule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StateStoreResourceRule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StateStoreResourceRule.
     */
    public static StateStoreResourceRule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StateStoreResourceRule deserializedStateStoreResourceRule = new StateStoreResourceRule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyType".equals(fieldName)) {
                    deserializedStateStoreResourceRule.keyType
                        = StateStoreResourceKeyTypes.fromString(reader.getString());
                } else if ("keys".equals(fieldName)) {
                    List<String> keys = reader.readArray(reader1 -> reader1.getString());
                    deserializedStateStoreResourceRule.keys = keys;
                } else if ("method".equals(fieldName)) {
                    deserializedStateStoreResourceRule.method
                        = StateStoreResourceDefinitionMethods.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStateStoreResourceRule;
        });
    }
}
