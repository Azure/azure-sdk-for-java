// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateAioMetadata properties.
 */
@Fluent
public final class AkriConnectorTemplateAioMetadata implements JsonSerializable<AkriConnectorTemplateAioMetadata> {
    /*
     * The minimum version of AIO required for the connector.
     */
    private String aioMinVersion;

    /*
     * The maximum version of AIO required for the connector.
     */
    private String aioMaxVersion;

    /**
     * Creates an instance of AkriConnectorTemplateAioMetadata class.
     */
    public AkriConnectorTemplateAioMetadata() {
    }

    /**
     * Get the aioMinVersion property: The minimum version of AIO required for the connector.
     * 
     * @return the aioMinVersion value.
     */
    public String aioMinVersion() {
        return this.aioMinVersion;
    }

    /**
     * Set the aioMinVersion property: The minimum version of AIO required for the connector.
     * 
     * @param aioMinVersion the aioMinVersion value to set.
     * @return the AkriConnectorTemplateAioMetadata object itself.
     */
    public AkriConnectorTemplateAioMetadata withAioMinVersion(String aioMinVersion) {
        this.aioMinVersion = aioMinVersion;
        return this;
    }

    /**
     * Get the aioMaxVersion property: The maximum version of AIO required for the connector.
     * 
     * @return the aioMaxVersion value.
     */
    public String aioMaxVersion() {
        return this.aioMaxVersion;
    }

    /**
     * Set the aioMaxVersion property: The maximum version of AIO required for the connector.
     * 
     * @param aioMaxVersion the aioMaxVersion value to set.
     * @return the AkriConnectorTemplateAioMetadata object itself.
     */
    public AkriConnectorTemplateAioMetadata withAioMaxVersion(String aioMaxVersion) {
        this.aioMaxVersion = aioMaxVersion;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aioMinVersion", this.aioMinVersion);
        jsonWriter.writeStringField("aioMaxVersion", this.aioMaxVersion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateAioMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateAioMetadata if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateAioMetadata.
     */
    public static AkriConnectorTemplateAioMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateAioMetadata deserializedAkriConnectorTemplateAioMetadata
                = new AkriConnectorTemplateAioMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aioMinVersion".equals(fieldName)) {
                    deserializedAkriConnectorTemplateAioMetadata.aioMinVersion = reader.getString();
                } else if ("aioMaxVersion".equals(fieldName)) {
                    deserializedAkriConnectorTemplateAioMetadata.aioMaxVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateAioMetadata;
        });
    }
}
