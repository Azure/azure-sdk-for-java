// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Dynamic settings of the persistence.
 */
@Fluent
public final class BrokerPersistenceDynamicSettings implements JsonSerializable<BrokerPersistenceDynamicSettings> {
    /*
     * The user property key to enable persistence.
     */
    private String userPropertyKey;

    /*
     * The user property value to enable persistence.
     */
    private String userPropertyValue;

    /**
     * Creates an instance of BrokerPersistenceDynamicSettings class.
     */
    public BrokerPersistenceDynamicSettings() {
    }

    /**
     * Get the userPropertyKey property: The user property key to enable persistence.
     * 
     * @return the userPropertyKey value.
     */
    public String userPropertyKey() {
        return this.userPropertyKey;
    }

    /**
     * Set the userPropertyKey property: The user property key to enable persistence.
     * 
     * @param userPropertyKey the userPropertyKey value to set.
     * @return the BrokerPersistenceDynamicSettings object itself.
     */
    public BrokerPersistenceDynamicSettings withUserPropertyKey(String userPropertyKey) {
        this.userPropertyKey = userPropertyKey;
        return this;
    }

    /**
     * Get the userPropertyValue property: The user property value to enable persistence.
     * 
     * @return the userPropertyValue value.
     */
    public String userPropertyValue() {
        return this.userPropertyValue;
    }

    /**
     * Set the userPropertyValue property: The user property value to enable persistence.
     * 
     * @param userPropertyValue the userPropertyValue value to set.
     * @return the BrokerPersistenceDynamicSettings object itself.
     */
    public BrokerPersistenceDynamicSettings withUserPropertyValue(String userPropertyValue) {
        this.userPropertyValue = userPropertyValue;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userPropertyKey", this.userPropertyKey);
        jsonWriter.writeStringField("userPropertyValue", this.userPropertyValue);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerPersistenceDynamicSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerPersistenceDynamicSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerPersistenceDynamicSettings.
     */
    public static BrokerPersistenceDynamicSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerPersistenceDynamicSettings deserializedBrokerPersistenceDynamicSettings
                = new BrokerPersistenceDynamicSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userPropertyKey".equals(fieldName)) {
                    deserializedBrokerPersistenceDynamicSettings.userPropertyKey = reader.getString();
                } else if ("userPropertyValue".equals(fieldName)) {
                    deserializedBrokerPersistenceDynamicSettings.userPropertyValue = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerPersistenceDynamicSettings;
        });
    }
}
