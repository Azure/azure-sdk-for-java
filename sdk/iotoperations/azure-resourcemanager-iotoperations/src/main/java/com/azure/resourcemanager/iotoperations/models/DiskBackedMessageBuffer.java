// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * DiskBackedMessageBuffer properties.
 */
@Fluent
public final class DiskBackedMessageBuffer implements JsonSerializable<DiskBackedMessageBuffer> {
    /*
     * The max size of the message buffer on disk. If a PVC template is specified using one of ephemeralVolumeClaimSpec
     * or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of that template. If neither
     * ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir volume is mounted with
     * this size as its limit. See <https://kubernetes.io/docs/concepts/storage/volumes/#emptydir> for details.
     */
    private String maxSize;

    /*
     * Use the specified persistent volume claim template to mount a "generic ephemeral volume" for the message buffer.
     * See <https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes> for details.
     */
    private VolumeClaimSpec ephemeralVolumeClaimSpec;

    /*
     * Use the specified persistent volume claim template to mount a persistent volume for the message buffer.
     */
    private VolumeClaimSpec persistentVolumeClaimSpec;

    /**
     * Creates an instance of DiskBackedMessageBuffer class.
     */
    public DiskBackedMessageBuffer() {
    }

    /**
     * Get the maxSize property: The max size of the message buffer on disk. If a PVC template is specified using one of
     * ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of
     * that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir
     * volume is mounted with this size as its limit. See
     * &lt;https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&gt; for details.
     * 
     * @return the maxSize value.
     */
    public String maxSize() {
        return this.maxSize;
    }

    /**
     * Set the maxSize property: The max size of the message buffer on disk. If a PVC template is specified using one of
     * ephemeralVolumeClaimSpec or persistentVolumeClaimSpec, then this size is used as the request and limit sizes of
     * that template. If neither ephemeralVolumeClaimSpec nor persistentVolumeClaimSpec are specified, then an emptyDir
     * volume is mounted with this size as its limit. See
     * &lt;https://kubernetes.io/docs/concepts/storage/volumes/#emptydir&gt; for details.
     * 
     * @param maxSize the maxSize value to set.
     * @return the DiskBackedMessageBuffer object itself.
     */
    public DiskBackedMessageBuffer withMaxSize(String maxSize) {
        this.maxSize = maxSize;
        return this;
    }

    /**
     * Get the ephemeralVolumeClaimSpec property: Use the specified persistent volume claim template to mount a "generic
     * ephemeral volume" for the message buffer. See
     * &lt;https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes&gt; for details.
     * 
     * @return the ephemeralVolumeClaimSpec value.
     */
    public VolumeClaimSpec ephemeralVolumeClaimSpec() {
        return this.ephemeralVolumeClaimSpec;
    }

    /**
     * Set the ephemeralVolumeClaimSpec property: Use the specified persistent volume claim template to mount a "generic
     * ephemeral volume" for the message buffer. See
     * &lt;https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes&gt; for details.
     * 
     * @param ephemeralVolumeClaimSpec the ephemeralVolumeClaimSpec value to set.
     * @return the DiskBackedMessageBuffer object itself.
     */
    public DiskBackedMessageBuffer withEphemeralVolumeClaimSpec(VolumeClaimSpec ephemeralVolumeClaimSpec) {
        this.ephemeralVolumeClaimSpec = ephemeralVolumeClaimSpec;
        return this;
    }

    /**
     * Get the persistentVolumeClaimSpec property: Use the specified persistent volume claim template to mount a
     * persistent volume for the message buffer.
     * 
     * @return the persistentVolumeClaimSpec value.
     */
    public VolumeClaimSpec persistentVolumeClaimSpec() {
        return this.persistentVolumeClaimSpec;
    }

    /**
     * Set the persistentVolumeClaimSpec property: Use the specified persistent volume claim template to mount a
     * persistent volume for the message buffer.
     * 
     * @param persistentVolumeClaimSpec the persistentVolumeClaimSpec value to set.
     * @return the DiskBackedMessageBuffer object itself.
     */
    public DiskBackedMessageBuffer withPersistentVolumeClaimSpec(VolumeClaimSpec persistentVolumeClaimSpec) {
        this.persistentVolumeClaimSpec = persistentVolumeClaimSpec;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (maxSize() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property maxSize in model DiskBackedMessageBuffer"));
        }
        if (ephemeralVolumeClaimSpec() != null) {
            ephemeralVolumeClaimSpec().validate();
        }
        if (persistentVolumeClaimSpec() != null) {
            persistentVolumeClaimSpec().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskBackedMessageBuffer.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("maxSize", this.maxSize);
        jsonWriter.writeJsonField("ephemeralVolumeClaimSpec", this.ephemeralVolumeClaimSpec);
        jsonWriter.writeJsonField("persistentVolumeClaimSpec", this.persistentVolumeClaimSpec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskBackedMessageBuffer from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskBackedMessageBuffer if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskBackedMessageBuffer.
     */
    public static DiskBackedMessageBuffer fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskBackedMessageBuffer deserializedDiskBackedMessageBuffer = new DiskBackedMessageBuffer();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("maxSize".equals(fieldName)) {
                    deserializedDiskBackedMessageBuffer.maxSize = reader.getString();
                } else if ("ephemeralVolumeClaimSpec".equals(fieldName)) {
                    deserializedDiskBackedMessageBuffer.ephemeralVolumeClaimSpec = VolumeClaimSpec.fromJson(reader);
                } else if ("persistentVolumeClaimSpec".equals(fieldName)) {
                    deserializedDiskBackedMessageBuffer.persistentVolumeClaimSpec = VolumeClaimSpec.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskBackedMessageBuffer;
        });
    }
}
