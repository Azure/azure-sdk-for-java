// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorTemplateRuntimeImageConfiguration properties.
 */
@Fluent
public final class AkriConnectorTemplateRuntimeImageConfigurationSettings
    implements JsonSerializable<AkriConnectorTemplateRuntimeImageConfigurationSettings> {
    /*
     * The image name without any registry reference, tag or digest.
     */
    private String imageName;

    /*
     * The pull policy of the image.
     */
    private AkriConnectorsImagePullPolicy imagePullPolicy;

    /*
     * The number of replicas to be set up.
     */
    private Integer replicas;

    /*
     * The registry settings for the image. You can omit this field if using the default docker hub repository or using
     * a local image.
     */
    private AkriConnectorsRegistrySettings registrySettings;

    /*
     * Optional image tag or digest. If not specified, the default tag is `latest`.
     */
    private AkriConnectorsTagDigestSettings tagDigestSettings;

    /**
     * Creates an instance of AkriConnectorTemplateRuntimeImageConfigurationSettings class.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings() {
    }

    /**
     * Get the imageName property: The image name without any registry reference, tag or digest.
     * 
     * @return the imageName value.
     */
    public String imageName() {
        return this.imageName;
    }

    /**
     * Set the imageName property: The image name without any registry reference, tag or digest.
     * 
     * @param imageName the imageName value to set.
     * @return the AkriConnectorTemplateRuntimeImageConfigurationSettings object itself.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings withImageName(String imageName) {
        this.imageName = imageName;
        return this;
    }

    /**
     * Get the imagePullPolicy property: The pull policy of the image.
     * 
     * @return the imagePullPolicy value.
     */
    public AkriConnectorsImagePullPolicy imagePullPolicy() {
        return this.imagePullPolicy;
    }

    /**
     * Set the imagePullPolicy property: The pull policy of the image.
     * 
     * @param imagePullPolicy the imagePullPolicy value to set.
     * @return the AkriConnectorTemplateRuntimeImageConfigurationSettings object itself.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings
        withImagePullPolicy(AkriConnectorsImagePullPolicy imagePullPolicy) {
        this.imagePullPolicy = imagePullPolicy;
        return this;
    }

    /**
     * Get the replicas property: The number of replicas to be set up.
     * 
     * @return the replicas value.
     */
    public Integer replicas() {
        return this.replicas;
    }

    /**
     * Set the replicas property: The number of replicas to be set up.
     * 
     * @param replicas the replicas value to set.
     * @return the AkriConnectorTemplateRuntimeImageConfigurationSettings object itself.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings withReplicas(Integer replicas) {
        this.replicas = replicas;
        return this;
    }

    /**
     * Get the registrySettings property: The registry settings for the image. You can omit this field if using the
     * default docker hub repository or using a local image.
     * 
     * @return the registrySettings value.
     */
    public AkriConnectorsRegistrySettings registrySettings() {
        return this.registrySettings;
    }

    /**
     * Set the registrySettings property: The registry settings for the image. You can omit this field if using the
     * default docker hub repository or using a local image.
     * 
     * @param registrySettings the registrySettings value to set.
     * @return the AkriConnectorTemplateRuntimeImageConfigurationSettings object itself.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings
        withRegistrySettings(AkriConnectorsRegistrySettings registrySettings) {
        this.registrySettings = registrySettings;
        return this;
    }

    /**
     * Get the tagDigestSettings property: Optional image tag or digest. If not specified, the default tag is `latest`.
     * 
     * @return the tagDigestSettings value.
     */
    public AkriConnectorsTagDigestSettings tagDigestSettings() {
        return this.tagDigestSettings;
    }

    /**
     * Set the tagDigestSettings property: Optional image tag or digest. If not specified, the default tag is `latest`.
     * 
     * @param tagDigestSettings the tagDigestSettings value to set.
     * @return the AkriConnectorTemplateRuntimeImageConfigurationSettings object itself.
     */
    public AkriConnectorTemplateRuntimeImageConfigurationSettings
        withTagDigestSettings(AkriConnectorsTagDigestSettings tagDigestSettings) {
        this.tagDigestSettings = tagDigestSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (imageName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property imageName in model AkriConnectorTemplateRuntimeImageConfigurationSettings"));
        }
        if (registrySettings() != null) {
            registrySettings().validate();
        }
        if (tagDigestSettings() != null) {
            tagDigestSettings().validate();
        }
    }

    private static final ClientLogger LOGGER
        = new ClientLogger(AkriConnectorTemplateRuntimeImageConfigurationSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("imageName", this.imageName);
        jsonWriter.writeStringField("imagePullPolicy",
            this.imagePullPolicy == null ? null : this.imagePullPolicy.toString());
        jsonWriter.writeNumberField("replicas", this.replicas);
        jsonWriter.writeJsonField("registrySettings", this.registrySettings);
        jsonWriter.writeJsonField("tagDigestSettings", this.tagDigestSettings);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorTemplateRuntimeImageConfigurationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorTemplateRuntimeImageConfigurationSettings if the JsonReader was pointing to
     * an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AkriConnectorTemplateRuntimeImageConfigurationSettings.
     */
    public static AkriConnectorTemplateRuntimeImageConfigurationSettings fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorTemplateRuntimeImageConfigurationSettings deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings
                = new AkriConnectorTemplateRuntimeImageConfigurationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("imageName".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings.imageName = reader.getString();
                } else if ("imagePullPolicy".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings.imagePullPolicy
                        = AkriConnectorsImagePullPolicy.fromString(reader.getString());
                } else if ("replicas".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings.replicas
                        = reader.getNullable(JsonReader::getInt);
                } else if ("registrySettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings.registrySettings
                        = AkriConnectorsRegistrySettings.fromJson(reader);
                } else if ("tagDigestSettings".equals(fieldName)) {
                    deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings.tagDigestSettings
                        = AkriConnectorsTagDigestSettings.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorTemplateRuntimeImageConfigurationSettings;
        });
    }
}
