// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines a Broker listener. A listener is a collection of ports on which the broker accepts connections from clients.
 */
@Fluent
public final class BrokerListenerProperties implements JsonSerializable<BrokerListenerProperties> {
    /*
     * Kubernetes Service name of this listener.
     */
    private String serviceName;

    /*
     * Ports on which this listener accepts client connections.
     */
    private List<ListenerPort> ports;

    /*
     * Kubernetes Service type of this listener.
     */
    private ServiceType serviceType;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of BrokerListenerProperties class.
     */
    public BrokerListenerProperties() {
    }

    /**
     * Get the serviceName property: Kubernetes Service name of this listener.
     * 
     * @return the serviceName value.
     */
    public String serviceName() {
        return this.serviceName;
    }

    /**
     * Set the serviceName property: Kubernetes Service name of this listener.
     * 
     * @param serviceName the serviceName value to set.
     * @return the BrokerListenerProperties object itself.
     */
    public BrokerListenerProperties withServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    /**
     * Get the ports property: Ports on which this listener accepts client connections.
     * 
     * @return the ports value.
     */
    public List<ListenerPort> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: Ports on which this listener accepts client connections.
     * 
     * @param ports the ports value to set.
     * @return the BrokerListenerProperties object itself.
     */
    public BrokerListenerProperties withPorts(List<ListenerPort> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Get the serviceType property: Kubernetes Service type of this listener.
     * 
     * @return the serviceType value.
     */
    public ServiceType serviceType() {
        return this.serviceType;
    }

    /**
     * Set the serviceType property: Kubernetes Service type of this listener.
     * 
     * @param serviceType the serviceType value to set.
     * @return the BrokerListenerProperties object itself.
     */
    public BrokerListenerProperties withServiceType(ServiceType serviceType) {
        this.serviceType = serviceType;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ports() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ports in model BrokerListenerProperties"));
        } else {
            ports().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(BrokerListenerProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ports", this.ports, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("serviceName", this.serviceName);
        jsonWriter.writeStringField("serviceType", this.serviceType == null ? null : this.serviceType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerListenerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerListenerProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerListenerProperties.
     */
    public static BrokerListenerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BrokerListenerProperties deserializedBrokerListenerProperties = new BrokerListenerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ports".equals(fieldName)) {
                    List<ListenerPort> ports = reader.readArray(reader1 -> ListenerPort.fromJson(reader1));
                    deserializedBrokerListenerProperties.ports = ports;
                } else if ("serviceName".equals(fieldName)) {
                    deserializedBrokerListenerProperties.serviceName = reader.getString();
                } else if ("serviceType".equals(fieldName)) {
                    deserializedBrokerListenerProperties.serviceType = ServiceType.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedBrokerListenerProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBrokerListenerProperties;
        });
    }
}
