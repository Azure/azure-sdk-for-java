// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * RegistryEndpointTrustedSettings properties.
 */
@Fluent
public final class RegistryEndpointTrustedSettings implements JsonSerializable<RegistryEndpointTrustedSettings> {
    /*
     * The trust properties for the registry endpoint.
     */
    private RegistryEndpointTrustedSigningKey trustedSigningKeys;

    /**
     * Creates an instance of RegistryEndpointTrustedSettings class.
     */
    public RegistryEndpointTrustedSettings() {
    }

    /**
     * Get the trustedSigningKeys property: The trust properties for the registry endpoint.
     * 
     * @return the trustedSigningKeys value.
     */
    public RegistryEndpointTrustedSigningKey trustedSigningKeys() {
        return this.trustedSigningKeys;
    }

    /**
     * Set the trustedSigningKeys property: The trust properties for the registry endpoint.
     * 
     * @param trustedSigningKeys the trustedSigningKeys value to set.
     * @return the RegistryEndpointTrustedSettings object itself.
     */
    public RegistryEndpointTrustedSettings
        withTrustedSigningKeys(RegistryEndpointTrustedSigningKey trustedSigningKeys) {
        this.trustedSigningKeys = trustedSigningKeys;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (trustedSigningKeys() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property trustedSigningKeys in model RegistryEndpointTrustedSettings"));
        } else {
            trustedSigningKeys().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(RegistryEndpointTrustedSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("trustedSigningKeys", this.trustedSigningKeys);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RegistryEndpointTrustedSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RegistryEndpointTrustedSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RegistryEndpointTrustedSettings.
     */
    public static RegistryEndpointTrustedSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RegistryEndpointTrustedSettings deserializedRegistryEndpointTrustedSettings
                = new RegistryEndpointTrustedSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("trustedSigningKeys".equals(fieldName)) {
                    deserializedRegistryEndpointTrustedSettings.trustedSigningKeys
                        = RegistryEndpointTrustedSigningKey.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRegistryEndpointTrustedSettings;
        });
    }
}
