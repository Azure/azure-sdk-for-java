// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * VolumeClaimResourceRequirements properties.
 */
@Fluent
public final class VolumeClaimResourceRequirements implements JsonSerializable<VolumeClaimResourceRequirements> {
    /*
     * Limits describes the maximum amount of compute resources allowed. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    private Map<String, String> limits;

    /*
     * Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it
     * defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
     */
    private Map<String, String> requests;

    /*
     * Claims lists the names of resources, defined in spec.resourceClaims, that are used by this container.
     * 
     * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     * 
     * This field is immutable. It can only be set for containers.
     */
    private List<VolumeClaimResourceRequirementsClaims> claims;

    /**
     * Creates an instance of VolumeClaimResourceRequirements class.
     */
    public VolumeClaimResourceRequirements() {
    }

    /**
     * Get the limits property: Limits describes the maximum amount of compute resources allowed. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
     * 
     * @return the limits value.
     */
    public Map<String, String> limits() {
        return this.limits;
    }

    /**
     * Set the limits property: Limits describes the maximum amount of compute resources allowed. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
     * 
     * @param limits the limits value to set.
     * @return the VolumeClaimResourceRequirements object itself.
     */
    public VolumeClaimResourceRequirements withLimits(Map<String, String> limits) {
        this.limits = limits;
        return this;
    }

    /**
     * Get the requests property: Requests describes the minimum amount of compute resources required. If Requests is
     * omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an
     * implementation-defined value. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
     * 
     * @return the requests value.
     */
    public Map<String, String> requests() {
        return this.requests;
    }

    /**
     * Set the requests property: Requests describes the minimum amount of compute resources required. If Requests is
     * omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an
     * implementation-defined value. More info:
     * https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/.
     * 
     * @param requests the requests value to set.
     * @return the VolumeClaimResourceRequirements object itself.
     */
    public VolumeClaimResourceRequirements withRequests(Map<String, String> requests) {
        this.requests = requests;
        return this;
    }

    /**
     * Get the claims property: Claims lists the names of resources, defined in spec.resourceClaims, that are used by
     * this container.
     * 
     * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     * 
     * This field is immutable. It can only be set for containers.
     * 
     * @return the claims value.
     */
    public List<VolumeClaimResourceRequirementsClaims> claims() {
        return this.claims;
    }

    /**
     * Set the claims property: Claims lists the names of resources, defined in spec.resourceClaims, that are used by
     * this container.
     * 
     * This is an alpha field and requires enabling the DynamicResourceAllocation feature gate.
     * 
     * This field is immutable. It can only be set for containers.
     * 
     * @param claims the claims value to set.
     * @return the VolumeClaimResourceRequirements object itself.
     */
    public VolumeClaimResourceRequirements withClaims(List<VolumeClaimResourceRequirementsClaims> claims) {
        this.claims = claims;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("limits", this.limits, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("requests", this.requests, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("claims", this.claims, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeClaimResourceRequirements from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeClaimResourceRequirements if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VolumeClaimResourceRequirements.
     */
    public static VolumeClaimResourceRequirements fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeClaimResourceRequirements deserializedVolumeClaimResourceRequirements
                = new VolumeClaimResourceRequirements();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("limits".equals(fieldName)) {
                    Map<String, String> limits = reader.readMap(reader1 -> reader1.getString());
                    deserializedVolumeClaimResourceRequirements.limits = limits;
                } else if ("requests".equals(fieldName)) {
                    Map<String, String> requests = reader.readMap(reader1 -> reader1.getString());
                    deserializedVolumeClaimResourceRequirements.requests = requests;
                } else if ("claims".equals(fieldName)) {
                    List<VolumeClaimResourceRequirementsClaims> claims
                        = reader.readArray(reader1 -> VolumeClaimResourceRequirementsClaims.fromJson(reader1));
                    deserializedVolumeClaimResourceRequirements.claims = claims;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeClaimResourceRequirements;
        });
    }
}
