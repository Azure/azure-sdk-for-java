// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.iotoperations.fluent.DataflowGraphsClient;
import com.azure.resourcemanager.iotoperations.fluent.models.DataflowGraphResourceInner;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphResource;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphs;

public final class DataflowGraphsImpl implements DataflowGraphs {
    private static final ClientLogger LOGGER = new ClientLogger(DataflowGraphsImpl.class);

    private final DataflowGraphsClient innerClient;

    private final com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager;

    public DataflowGraphsImpl(DataflowGraphsClient innerClient,
        com.azure.resourcemanager.iotoperations.IoTOperationsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DataflowGraphResource> getWithResponse(String resourceGroupName, String instanceName,
        String dataflowProfileName, String dataflowGraphName, Context context) {
        Response<DataflowGraphResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DataflowGraphResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DataflowGraphResource get(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName) {
        DataflowGraphResourceInner inner
            = this.serviceClient().get(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
        if (inner != null) {
            return new DataflowGraphResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName) {
        this.serviceClient().delete(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName);
    }

    public void delete(String resourceGroupName, String instanceName, String dataflowProfileName,
        String dataflowGraphName, Context context) {
        this.serviceClient().delete(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, context);
    }

    public PagedIterable<DataflowGraphResource> listByDataflowProfile(String resourceGroupName, String instanceName,
        String dataflowProfileName) {
        PagedIterable<DataflowGraphResourceInner> inner
            = this.serviceClient().listByDataflowProfile(resourceGroupName, instanceName, dataflowProfileName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataflowGraphResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<DataflowGraphResource> listByDataflowProfile(String resourceGroupName, String instanceName,
        String dataflowProfileName, Context context) {
        PagedIterable<DataflowGraphResourceInner> inner
            = this.serviceClient().listByDataflowProfile(resourceGroupName, instanceName, dataflowProfileName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new DataflowGraphResourceImpl(inner1, this.manager()));
    }

    public DataflowGraphResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowGraphName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowGraphs");
        if (dataflowGraphName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowGraphs'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, Context.NONE)
            .getValue();
    }

    public Response<DataflowGraphResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowGraphName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowGraphs");
        if (dataflowGraphName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowGraphs'.", id)));
        }
        return this.getWithResponse(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowGraphName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowGraphs");
        if (dataflowGraphName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowGraphs'.", id)));
        }
        this.delete(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String instanceName = ResourceManagerUtils.getValueFromIdByName(id, "instances");
        if (instanceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'instances'.", id)));
        }
        String dataflowProfileName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowProfiles");
        if (dataflowProfileName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowProfiles'.", id)));
        }
        String dataflowGraphName = ResourceManagerUtils.getValueFromIdByName(id, "dataflowGraphs");
        if (dataflowGraphName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dataflowGraphs'.", id)));
        }
        this.delete(resourceGroupName, instanceName, dataflowProfileName, dataflowGraphName, context);
    }

    private DataflowGraphsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.iotoperations.IoTOperationsManager manager() {
        return this.serviceManager;
    }

    public DataflowGraphResourceImpl define(String name) {
        return new DataflowGraphResourceImpl(name, this.manager());
    }
}
