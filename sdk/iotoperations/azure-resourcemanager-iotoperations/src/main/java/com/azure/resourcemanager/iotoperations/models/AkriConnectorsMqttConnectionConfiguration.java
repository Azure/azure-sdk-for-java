// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AkriConnectorsMqttConnectionConfiguration properties.
 */
@Fluent
public final class AkriConnectorsMqttConnectionConfiguration
    implements JsonSerializable<AkriConnectorsMqttConnectionConfiguration> {
    /*
     * Authentication properties.
     */
    private AkriConnectorsMqttAuthentication authentication;

    /*
     * Host of the Broker in the form of <hostname>:<port>.
     */
    private String host;

    /*
     * The protocol to use for the connection. Currently only `mqtt` is supported.
     */
    private AkriConnectorsMqttProtocolType protocol;

    /*
     * KeepAlive for connection in seconds.
     */
    private Integer keepAliveSeconds;

    /*
     * The max number of messages to keep in flight. For subscribe, this is the receive maximum. For publish, this is
     * the maximum number of messages to send before waiting for an ack.
     */
    private Integer maxInflightMessages;

    /*
     * Session expiry in seconds.
     */
    private Integer sessionExpirySeconds;

    /*
     * TLS configuration.
     */
    private TlsProperties tls;

    /**
     * Creates an instance of AkriConnectorsMqttConnectionConfiguration class.
     */
    public AkriConnectorsMqttConnectionConfiguration() {
    }

    /**
     * Get the authentication property: Authentication properties.
     * 
     * @return the authentication value.
     */
    public AkriConnectorsMqttAuthentication authentication() {
        return this.authentication;
    }

    /**
     * Set the authentication property: Authentication properties.
     * 
     * @param authentication the authentication value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration
        withAuthentication(AkriConnectorsMqttAuthentication authentication) {
        this.authentication = authentication;
        return this;
    }

    /**
     * Get the host property: Host of the Broker in the form of &lt;hostname&gt;:&lt;port&gt;.
     * 
     * @return the host value.
     */
    public String host() {
        return this.host;
    }

    /**
     * Set the host property: Host of the Broker in the form of &lt;hostname&gt;:&lt;port&gt;.
     * 
     * @param host the host value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration withHost(String host) {
        this.host = host;
        return this;
    }

    /**
     * Get the protocol property: The protocol to use for the connection. Currently only `mqtt` is supported.
     * 
     * @return the protocol value.
     */
    public AkriConnectorsMqttProtocolType protocol() {
        return this.protocol;
    }

    /**
     * Set the protocol property: The protocol to use for the connection. Currently only `mqtt` is supported.
     * 
     * @param protocol the protocol value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration withProtocol(AkriConnectorsMqttProtocolType protocol) {
        this.protocol = protocol;
        return this;
    }

    /**
     * Get the keepAliveSeconds property: KeepAlive for connection in seconds.
     * 
     * @return the keepAliveSeconds value.
     */
    public Integer keepAliveSeconds() {
        return this.keepAliveSeconds;
    }

    /**
     * Set the keepAliveSeconds property: KeepAlive for connection in seconds.
     * 
     * @param keepAliveSeconds the keepAliveSeconds value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration withKeepAliveSeconds(Integer keepAliveSeconds) {
        this.keepAliveSeconds = keepAliveSeconds;
        return this;
    }

    /**
     * Get the maxInflightMessages property: The max number of messages to keep in flight. For subscribe, this is the
     * receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
     * 
     * @return the maxInflightMessages value.
     */
    public Integer maxInflightMessages() {
        return this.maxInflightMessages;
    }

    /**
     * Set the maxInflightMessages property: The max number of messages to keep in flight. For subscribe, this is the
     * receive maximum. For publish, this is the maximum number of messages to send before waiting for an ack.
     * 
     * @param maxInflightMessages the maxInflightMessages value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration withMaxInflightMessages(Integer maxInflightMessages) {
        this.maxInflightMessages = maxInflightMessages;
        return this;
    }

    /**
     * Get the sessionExpirySeconds property: Session expiry in seconds.
     * 
     * @return the sessionExpirySeconds value.
     */
    public Integer sessionExpirySeconds() {
        return this.sessionExpirySeconds;
    }

    /**
     * Set the sessionExpirySeconds property: Session expiry in seconds.
     * 
     * @param sessionExpirySeconds the sessionExpirySeconds value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration withSessionExpirySeconds(Integer sessionExpirySeconds) {
        this.sessionExpirySeconds = sessionExpirySeconds;
        return this;
    }

    /**
     * Get the tls property: TLS configuration.
     * 
     * @return the tls value.
     */
    public TlsProperties tls() {
        return this.tls;
    }

    /**
     * Set the tls property: TLS configuration.
     * 
     * @param tls the tls value to set.
     * @return the AkriConnectorsMqttConnectionConfiguration object itself.
     */
    public AkriConnectorsMqttConnectionConfiguration withTls(TlsProperties tls) {
        this.tls = tls;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authentication", this.authentication);
        jsonWriter.writeStringField("host", this.host);
        jsonWriter.writeStringField("protocol", this.protocol == null ? null : this.protocol.toString());
        jsonWriter.writeNumberField("keepAliveSeconds", this.keepAliveSeconds);
        jsonWriter.writeNumberField("maxInflightMessages", this.maxInflightMessages);
        jsonWriter.writeNumberField("sessionExpirySeconds", this.sessionExpirySeconds);
        jsonWriter.writeJsonField("tls", this.tls);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AkriConnectorsMqttConnectionConfiguration from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AkriConnectorsMqttConnectionConfiguration if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AkriConnectorsMqttConnectionConfiguration.
     */
    public static AkriConnectorsMqttConnectionConfiguration fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AkriConnectorsMqttConnectionConfiguration deserializedAkriConnectorsMqttConnectionConfiguration
                = new AkriConnectorsMqttConnectionConfiguration();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authentication".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.authentication
                        = AkriConnectorsMqttAuthentication.fromJson(reader);
                } else if ("host".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.host = reader.getString();
                } else if ("protocol".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.protocol
                        = AkriConnectorsMqttProtocolType.fromString(reader.getString());
                } else if ("keepAliveSeconds".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.keepAliveSeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxInflightMessages".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.maxInflightMessages
                        = reader.getNullable(JsonReader::getInt);
                } else if ("sessionExpirySeconds".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.sessionExpirySeconds
                        = reader.getNullable(JsonReader::getInt);
                } else if ("tls".equals(fieldName)) {
                    deserializedAkriConnectorsMqttConnectionConfiguration.tls = TlsProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAkriConnectorsMqttConnectionConfiguration;
        });
    }
}
