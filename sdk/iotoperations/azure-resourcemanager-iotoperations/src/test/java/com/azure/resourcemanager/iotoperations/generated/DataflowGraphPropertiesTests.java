// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionInput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionOutput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionSchemaSerializationFormat;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionSchemaSettings;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNode;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNodeConnection;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphProperties;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataflowGraphPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowGraphProperties model = BinaryData.fromString(
            "{\"mode\":\"Enabled\",\"requestDiskPersistence\":\"Disabled\",\"nodes\":[{\"nodeType\":\"DataflowGraphNode\",\"name\":\"dmjsjqb\"},{\"nodeType\":\"DataflowGraphNode\",\"name\":\"hhyxxrw\"},{\"nodeType\":\"DataflowGraphNode\",\"name\":\"yc\"},{\"nodeType\":\"DataflowGraphNode\",\"name\":\"duhpk\"}],\"nodeConnections\":[{\"from\":{\"name\":\"gymare\",\"schema\":{\"serializationFormat\":\"Parquet\",\"schemaRef\":\"qugjhkycube\"}},\"to\":{\"name\":\"dgssofwqmzqal\"}},{\"from\":{\"name\":\"rmnjijpx\",\"schema\":{\"serializationFormat\":\"Delta\",\"schemaRef\":\"dfnbyxbaaabjyv\"}},\"to\":{\"name\":\"yffimrzrtuzqogs\"}},{\"from\":{\"name\":\"xnevfdnwn\",\"schema\":{\"serializationFormat\":\"Parquet\",\"schemaRef\":\"syyceuzsoibjud\"}},\"to\":{\"name\":\"frxtrthzvaytdwk\"}},{\"from\":{\"name\":\"brqubp\",\"schema\":{\"serializationFormat\":\"Json\",\"schemaRef\":\"iilivpdtiirqtd\"}},\"to\":{\"name\":\"oaxoruzfgsqu\"}}],\"provisioningState\":\"Succeeded\"}")
            .toObject(DataflowGraphProperties.class);
        Assertions.assertEquals(OperationalMode.ENABLED, model.mode());
        Assertions.assertEquals(OperationalMode.DISABLED, model.requestDiskPersistence());
        Assertions.assertEquals("dmjsjqb", model.nodes().get(0).name());
        Assertions.assertEquals("gymare", model.nodeConnections().get(0).from().name());
        Assertions.assertEquals(DataflowGraphConnectionSchemaSerializationFormat.PARQUET,
            model.nodeConnections().get(0).from().schema().serializationFormat());
        Assertions.assertEquals("qugjhkycube", model.nodeConnections().get(0).from().schema().schemaRef());
        Assertions.assertEquals("dgssofwqmzqal", model.nodeConnections().get(0).to().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowGraphProperties model
            = new DataflowGraphProperties().withMode(OperationalMode.ENABLED)
                .withRequestDiskPersistence(OperationalMode.DISABLED)
                .withNodes(Arrays.asList(new DataflowGraphNode().withName("dmjsjqb"),
                    new DataflowGraphNode().withName("hhyxxrw"), new DataflowGraphNode().withName("yc"),
                    new DataflowGraphNode().withName("duhpk")))
                .withNodeConnections(
                    Arrays
                        .asList(
                            new DataflowGraphNodeConnection()
                                .withFrom(
                                    new DataflowGraphConnectionInput().withName("gymare")
                                        .withSchema(new DataflowGraphConnectionSchemaSettings()
                                            .withSerializationFormat(
                                                DataflowGraphConnectionSchemaSerializationFormat.PARQUET)
                                            .withSchemaRef("qugjhkycube")))
                                .withTo(new DataflowGraphConnectionOutput().withName("dgssofwqmzqal")),
                            new DataflowGraphNodeConnection()
                                .withFrom(
                                    new DataflowGraphConnectionInput().withName("rmnjijpx")
                                        .withSchema(new DataflowGraphConnectionSchemaSettings()
                                            .withSerializationFormat(
                                                DataflowGraphConnectionSchemaSerializationFormat.DELTA)
                                            .withSchemaRef("dfnbyxbaaabjyv")))
                                .withTo(new DataflowGraphConnectionOutput().withName("yffimrzrtuzqogs")),
                            new DataflowGraphNodeConnection()
                                .withFrom(new DataflowGraphConnectionInput().withName("xnevfdnwn")
                                    .withSchema(new DataflowGraphConnectionSchemaSettings()
                                        .withSerializationFormat(
                                            DataflowGraphConnectionSchemaSerializationFormat.PARQUET)
                                        .withSchemaRef("syyceuzsoibjud")))
                                .withTo(new DataflowGraphConnectionOutput().withName("frxtrthzvaytdwk")),
                            new DataflowGraphNodeConnection()
                                .withFrom(new DataflowGraphConnectionInput().withName("brqubp")
                                    .withSchema(new DataflowGraphConnectionSchemaSettings()
                                        .withSerializationFormat(DataflowGraphConnectionSchemaSerializationFormat.JSON)
                                        .withSchemaRef("iilivpdtiirqtd")))
                                .withTo(new DataflowGraphConnectionOutput().withName("oaxoruzfgsqu"))));
        model = BinaryData.fromObject(model).toObject(DataflowGraphProperties.class);
        Assertions.assertEquals(OperationalMode.ENABLED, model.mode());
        Assertions.assertEquals(OperationalMode.DISABLED, model.requestDiskPersistence());
        Assertions.assertEquals("dmjsjqb", model.nodes().get(0).name());
        Assertions.assertEquals("gymare", model.nodeConnections().get(0).from().name());
        Assertions.assertEquals(DataflowGraphConnectionSchemaSerializationFormat.PARQUET,
            model.nodeConnections().get(0).from().schema().serializationFormat());
        Assertions.assertEquals("qugjhkycube", model.nodeConnections().get(0).from().schema().schemaRef());
        Assertions.assertEquals("dgssofwqmzqal", model.nodeConnections().get(0).to().name());
    }
}
