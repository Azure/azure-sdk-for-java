// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.DataflowProfileResource;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DataflowProfilesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"diagnostics\":{\"logs\":{\"level\":\"jn\"},\"metrics\":{\"prometheusPort\":1488634157}},\"instanceCount\":1315745127,\"provisioningState\":\"Accepted\"},\"extendedLocation\":{\"name\":\"jzgxmrhublwp\",\"type\":\"CustomLocation\"},\"id\":\"utr\",\"name\":\"jupauut\",\"type\":\"woqhihe\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DataflowProfileResource> response = manager.dataflowProfiles()
            .listByResourceGroup("wdgzxulucv", "amrsreuzv", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jn", response.iterator().next().properties().diagnostics().logs().level());
        Assertions.assertEquals(1488634157,
            response.iterator().next().properties().diagnostics().metrics().prometheusPort());
        Assertions.assertEquals(1315745127, response.iterator().next().properties().instanceCount());
        Assertions.assertEquals("jzgxmrhublwp", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
    }
}
