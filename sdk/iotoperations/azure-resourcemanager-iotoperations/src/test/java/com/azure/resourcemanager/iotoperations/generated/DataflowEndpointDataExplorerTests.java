// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataExplorerAuthMethod;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorer;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorerAuthentication;
import org.junit.jupiter.api.Assertions;

public final class DataflowEndpointDataExplorerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowEndpointDataExplorer model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"SystemAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"xvy\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"mg\",\"scope\":\"pkwhojvpa\",\"tenantId\":\"qgxy\"}},\"database\":\"mocmbqfqvmk\",\"host\":\"xozap\",\"batching\":{\"latencySeconds\":2066979028,\"maxMessages\":1480663750}}")
            .toObject(DataflowEndpointDataExplorer.class);
        Assertions.assertEquals(DataExplorerAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("xvy", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("mg", model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("pkwhojvpa", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("qgxy", model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("mocmbqfqvmk", model.database());
        Assertions.assertEquals("xozap", model.host());
        Assertions.assertEquals(2066979028, model.batching().latencySeconds());
        Assertions.assertEquals(1480663750, model.batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowEndpointDataExplorer model = new DataflowEndpointDataExplorer()
            .withAuthentication(new DataflowEndpointDataExplorerAuthentication()
                .withMethod(DataExplorerAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("xvy"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("mg")
                        .withScope("pkwhojvpa")
                        .withTenantId("qgxy")))
            .withDatabase("mocmbqfqvmk")
            .withHost("xozap")
            .withBatching(new BatchingConfiguration().withLatencySeconds(2066979028).withMaxMessages(1480663750));
        model = BinaryData.fromObject(model).toObject(DataflowEndpointDataExplorer.class);
        Assertions.assertEquals(DataExplorerAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("xvy", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("mg", model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("pkwhojvpa", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("qgxy", model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("mocmbqfqvmk", model.database());
        Assertions.assertEquals("xozap", model.host());
        Assertions.assertEquals(2066979028, model.batching().latencySeconds());
        Assertions.assertEquals(1480663750, model.batching().maxMessages());
    }
}
