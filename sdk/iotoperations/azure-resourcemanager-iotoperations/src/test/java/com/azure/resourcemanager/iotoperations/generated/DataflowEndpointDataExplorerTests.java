// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataExplorerAuthMethod;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorer;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointDataExplorerAuthentication;
import org.junit.jupiter.api.Assertions;

public final class DataflowEndpointDataExplorerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowEndpointDataExplorer model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"UserAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"queziky\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"gxk\",\"scope\":\"la\",\"tenantId\":\"melwuipiccjz\"}},\"database\":\"z\",\"host\":\"v\",\"batching\":{\"latencySeconds\":105922794,\"maxMessages\":2028866606}}")
            .toObject(DataflowEndpointDataExplorer.class);
        Assertions.assertEquals(DataExplorerAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY, model.authentication().method());
        Assertions.assertEquals("queziky", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("gxk", model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("la", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("melwuipiccjz",
            model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("z", model.database());
        Assertions.assertEquals("v", model.host());
        Assertions.assertEquals(105922794, model.batching().latencySeconds());
        Assertions.assertEquals(2028866606, model.batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowEndpointDataExplorer model = new DataflowEndpointDataExplorer()
            .withAuthentication(new DataflowEndpointDataExplorerAuthentication()
                .withMethod(DataExplorerAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("queziky"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("gxk")
                        .withScope("la")
                        .withTenantId("melwuipiccjz")))
            .withDatabase("z")
            .withHost("v")
            .withBatching(new BatchingConfiguration().withLatencySeconds(105922794).withMaxMessages(2028866606));
        model = BinaryData.fromObject(model).toObject(DataflowEndpointDataExplorer.class);
        Assertions.assertEquals(DataExplorerAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY, model.authentication().method());
        Assertions.assertEquals("queziky", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("gxk", model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("la", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("melwuipiccjz",
            model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("z", model.database());
        Assertions.assertEquals("v", model.host());
        Assertions.assertEquals(105922794, model.batching().latencySeconds());
        Assertions.assertEquals(2028866606, model.batching().maxMessages());
    }
}
