// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateAioMetadata;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointType;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDiagnostics;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateProperties;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateRuntimeConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsDiagnosticsLogs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttAuthentication;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttConnectionConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.TlsProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AkriConnectorTemplatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AkriConnectorTemplateProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Accepted\",\"aioMetadata\":{\"aioMinVersion\":\"otzi\",\"aioMaxVersion\":\"amvpphoszqzudph\"},\"runtimeConfiguration\":{\"runtimeConfigurationType\":\"AkriConnectorTemplateRuntimeConfiguration\"},\"diagnostics\":{\"logs\":{\"level\":\"vdkfwynwcvtbvk\"}},\"deviceInboundEndpointTypes\":[{\"description\":\"mtnvyq\",\"endpointType\":\"atkzwpcnpw\",\"version\":\"jaesgvvsccya\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"qfhwyg\",\"defaultEventsConfigSchemaRef\":\"vdnkfxusem\",\"defaultProcessControlConfigSchemaRef\":\"zrmuhapfcqdps\",\"defaultStreamsConfigSchemaRef\":\"qvpsvuoymg\",\"additionalConfigSchemaRef\":\"elvezrypq\"}},{\"description\":\"feo\",\"endpointType\":\"erqwkyhkobopg\",\"version\":\"dkow\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"qpcrf\",\"defaultEventsConfigSchemaRef\":\"wccsnjvcdwxlpqek\",\"defaultProcessControlConfigSchemaRef\":\"nkhtjsyingw\",\"defaultStreamsConfigSchemaRef\":\"atmtdhtmdvy\",\"additionalConfigSchemaRef\":\"ikdgszywkbir\"}},{\"description\":\"uzhlhkjoqrv\",\"endpointType\":\"qaatjinrv\",\"version\":\"upmfiibfg\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"ool\",\"defaultEventsConfigSchemaRef\":\"wxkvtkkgll\",\"defaultProcessControlConfigSchemaRef\":\"jygvjayvbl\",\"defaultStreamsConfigSchemaRef\":\"vkzuhbxvvyhgso\",\"additionalConfigSchemaRef\":\"yrqufegxuvwz\"}}],\"mqttConnectionConfiguration\":{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"lmctlpd\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":1360421335,\"maxInflightMessages\":1613274561,\"sessionExpirySeconds\":1991662633,\"tls\":{\"mode\":\"Enabled\",\"trustedCaCertificateConfigMapRef\":\"wmyijejveg\"}}}")
            .toObject(AkriConnectorTemplateProperties.class);
        Assertions.assertEquals("otzi", model.aioMetadata().aioMinVersion());
        Assertions.assertEquals("amvpphoszqzudph", model.aioMetadata().aioMaxVersion());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.diagnostics().logs().level());
        Assertions.assertEquals("mtnvyq", model.deviceInboundEndpointTypes().get(0).description());
        Assertions.assertEquals("atkzwpcnpw", model.deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("jaesgvvsccya", model.deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("qfhwyg",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("vdnkfxusem",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultEventsConfigSchemaRef());
        Assertions.assertEquals("zrmuhapfcqdps",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("qvpsvuoymg",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("elvezrypq",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().additionalConfigSchemaRef());
        Assertions.assertEquals("lmctlpd", model.mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT, model.mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(1360421335, model.mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(1613274561, model.mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(1991662633, model.mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED, model.mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("wmyijejveg",
            model.mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AkriConnectorTemplateProperties model = new AkriConnectorTemplateProperties()
            .withAioMetadata(
                new AkriConnectorTemplateAioMetadata().withAioMinVersion("otzi").withAioMaxVersion("amvpphoszqzudph"))
            .withRuntimeConfiguration(new AkriConnectorTemplateRuntimeConfiguration())
            .withDiagnostics(new AkriConnectorTemplateDiagnostics()
                .withLogs(new AkriConnectorsDiagnosticsLogs().withLevel("vdkfwynwcvtbvk")))
            .withDeviceInboundEndpointTypes(Arrays.asList(
                new AkriConnectorTemplateDeviceInboundEndpointType().withDescription("mtnvyq")
                    .withEndpointType("atkzwpcnpw")
                    .withVersion("jaesgvvsccya")
                    .withConfigurationSchemaRefs(new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                        .withDefaultDatasetConfigSchemaRef("qfhwyg")
                        .withDefaultEventsConfigSchemaRef("vdnkfxusem")
                        .withDefaultProcessControlConfigSchemaRef("zrmuhapfcqdps")
                        .withDefaultStreamsConfigSchemaRef("qvpsvuoymg")
                        .withAdditionalConfigSchemaRef("elvezrypq")),
                new AkriConnectorTemplateDeviceInboundEndpointType().withDescription("feo")
                    .withEndpointType("erqwkyhkobopg")
                    .withVersion("dkow")
                    .withConfigurationSchemaRefs(new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                        .withDefaultDatasetConfigSchemaRef("qpcrf")
                        .withDefaultEventsConfigSchemaRef("wccsnjvcdwxlpqek")
                        .withDefaultProcessControlConfigSchemaRef("nkhtjsyingw")
                        .withDefaultStreamsConfigSchemaRef("atmtdhtmdvy")
                        .withAdditionalConfigSchemaRef("ikdgszywkbir")),
                new AkriConnectorTemplateDeviceInboundEndpointType().withDescription("uzhlhkjoqrv")
                    .withEndpointType("qaatjinrv")
                    .withVersion("upmfiibfg")
                    .withConfigurationSchemaRefs(new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                        .withDefaultDatasetConfigSchemaRef("ool")
                        .withDefaultEventsConfigSchemaRef("wxkvtkkgll")
                        .withDefaultProcessControlConfigSchemaRef("jygvjayvbl")
                        .withDefaultStreamsConfigSchemaRef("vkzuhbxvvyhgso")
                        .withAdditionalConfigSchemaRef("yrqufegxuvwz"))))
            .withMqttConnectionConfiguration(new AkriConnectorsMqttConnectionConfiguration()
                .withAuthentication(new AkriConnectorsMqttAuthentication())
                .withHost("lmctlpd")
                .withProtocol(AkriConnectorsMqttProtocolType.MQTT)
                .withKeepAliveSeconds(1360421335)
                .withMaxInflightMessages(1613274561)
                .withSessionExpirySeconds(1991662633)
                .withTls(new TlsProperties().withMode(OperationalMode.ENABLED)
                    .withTrustedCaCertificateConfigMapRef("wmyijejveg")));
        model = BinaryData.fromObject(model).toObject(AkriConnectorTemplateProperties.class);
        Assertions.assertEquals("otzi", model.aioMetadata().aioMinVersion());
        Assertions.assertEquals("amvpphoszqzudph", model.aioMetadata().aioMaxVersion());
        Assertions.assertEquals("vdkfwynwcvtbvk", model.diagnostics().logs().level());
        Assertions.assertEquals("mtnvyq", model.deviceInboundEndpointTypes().get(0).description());
        Assertions.assertEquals("atkzwpcnpw", model.deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("jaesgvvsccya", model.deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("qfhwyg",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("vdnkfxusem",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultEventsConfigSchemaRef());
        Assertions.assertEquals("zrmuhapfcqdps",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("qvpsvuoymg",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("elvezrypq",
            model.deviceInboundEndpointTypes().get(0).configurationSchemaRefs().additionalConfigSchemaRef());
        Assertions.assertEquals("lmctlpd", model.mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT, model.mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(1360421335, model.mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(1613274561, model.mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(1991662633, model.mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED, model.mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("wmyijejveg",
            model.mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
    }
}
