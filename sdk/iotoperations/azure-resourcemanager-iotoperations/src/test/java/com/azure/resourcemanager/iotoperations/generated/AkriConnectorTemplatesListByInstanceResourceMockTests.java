// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateResource;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AkriConnectorTemplatesListByInstanceResourceMockTests {
    @Test
    public void testListByInstanceResource() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"aioMetadata\":{\"aioMinVersion\":\"swqrntvlwijp\",\"aioMaxVersion\":\"texoqqpwc\"},\"runtimeConfiguration\":{\"runtimeConfigurationType\":\"AkriConnectorTemplateRuntimeConfiguration\"},\"diagnostics\":{\"logs\":{\"level\":\"fmhruncuwm\"}},\"deviceInboundEndpointTypes\":[{\"description\":\"kcdqzhlct\",\"endpointType\":\"dunqnd\",\"version\":\"pchrqbn\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"cgegydcwbo\",\"defaultEventsConfigSchemaRef\":\"umvq\",\"defaultProcessControlConfigSchemaRef\":\"lihrraiouaubr\",\"defaultStreamsConfigSchemaRef\":\"loqxfuojrngif\",\"additionalConfigSchemaRef\":\"z\"}},{\"description\":\"sccbiuimzd\",\"endpointType\":\"yjdfqwmky\",\"version\":\"ufdvruz\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"ojhp\",\"defaultEventsConfigSchemaRef\":\"fnmdxotn\",\"defaultProcessControlConfigSchemaRef\":\"dgug\",\"defaultStreamsConfigSchemaRef\":\"zihgrkyu\",\"additionalConfigSchemaRef\":\"absnmfpp\"}}],\"mqttConnectionConfiguration\":{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"evy\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":837668712,\"maxInflightMessages\":1792442027,\"sessionExpirySeconds\":296401749,\"tls\":{\"mode\":\"Disabled\",\"trustedCaCertificateConfigMapRef\":\"fgbegl\"}}},\"extendedLocation\":{\"name\":\"leohibetnluankr\",\"type\":\"CustomLocation\"},\"id\":\"eeebtijvacv\",\"name\":\"mq\",\"type\":\"bqqxlaj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<AkriConnectorTemplateResource> response = manager.akriConnectorTemplates()
            .listByInstanceResource("xqnrkcxk", "ibn", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("swqrntvlwijp", response.iterator().next().properties().aioMetadata().aioMinVersion());
        Assertions.assertEquals("texoqqpwc", response.iterator().next().properties().aioMetadata().aioMaxVersion());
        Assertions.assertEquals("fmhruncuwm", response.iterator().next().properties().diagnostics().logs().level());
        Assertions.assertEquals("kcdqzhlct",
            response.iterator().next().properties().deviceInboundEndpointTypes().get(0).description());
        Assertions.assertEquals("dunqnd",
            response.iterator().next().properties().deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("pchrqbn",
            response.iterator().next().properties().deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("cgegydcwbo",
            response.iterator()
                .next()
                .properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("umvq",
            response.iterator()
                .next()
                .properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultEventsConfigSchemaRef());
        Assertions.assertEquals("lihrraiouaubr",
            response.iterator()
                .next()
                .properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("loqxfuojrngif",
            response.iterator()
                .next()
                .properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("z",
            response.iterator()
                .next()
                .properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .additionalConfigSchemaRef());
        Assertions.assertEquals("evy", response.iterator().next().properties().mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT,
            response.iterator().next().properties().mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(837668712,
            response.iterator().next().properties().mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(1792442027,
            response.iterator().next().properties().mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(296401749,
            response.iterator().next().properties().mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.DISABLED,
            response.iterator().next().properties().mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("fgbegl",
            response.iterator()
                .next()
                .properties()
                .mqttConnectionConfiguration()
                .tls()
                .trustedCaCertificateConfigMapRef());
        Assertions.assertEquals("leohibetnluankr", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION,
            response.iterator().next().extendedLocation().type());
    }
}
