// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.VolumeClaimResourceRequirements;
import com.azure.resourcemanager.iotoperations.models.VolumeClaimResourceRequirementsClaims;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VolumeClaimResourceRequirementsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VolumeClaimResourceRequirements model = BinaryData.fromString(
            "{\"limits\":{\"hd\":\"hvpmoue\",\"bzv\":\"xibqeojnx\"},\"requests\":{\"ndei\":\"t\",\"cyddglmjthjqk\":\"btwnpzaoqvuhrhcf\",\"ciwqvhk\":\"pyeicxm\",\"ghmewuam\":\"ixuigdtopbobj\"},\"claims\":[{\"name\":\"rzayv\"},{\"name\":\"t\"},{\"name\":\"gvdfgiotkftutq\"},{\"name\":\"ln\"}]}")
            .toObject(VolumeClaimResourceRequirements.class);
        Assertions.assertEquals("hvpmoue", model.limits().get("hd"));
        Assertions.assertEquals("t", model.requests().get("ndei"));
        Assertions.assertEquals("rzayv", model.claims().get(0).name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VolumeClaimResourceRequirements model
            = new VolumeClaimResourceRequirements().withLimits(mapOf("hd", "hvpmoue", "bzv", "xibqeojnx"))
                .withRequests(mapOf("ndei", "t", "cyddglmjthjqk", "btwnpzaoqvuhrhcf", "ciwqvhk", "pyeicxm", "ghmewuam",
                    "ixuigdtopbobj"))
                .withClaims(Arrays.asList(new VolumeClaimResourceRequirementsClaims().withName("rzayv"),
                    new VolumeClaimResourceRequirementsClaims().withName("t"),
                    new VolumeClaimResourceRequirementsClaims().withName("gvdfgiotkftutq"),
                    new VolumeClaimResourceRequirementsClaims().withName("ln")));
        model = BinaryData.fromObject(model).toObject(VolumeClaimResourceRequirements.class);
        Assertions.assertEquals("hvpmoue", model.limits().get("hd"));
        Assertions.assertEquals("t", model.requests().get("ndei"));
        Assertions.assertEquals("rzayv", model.claims().get(0).name());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
