// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttAuthentication;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttConnectionConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.TlsProperties;
import org.junit.jupiter.api.Assertions;

public final class AkriConnectorsMqttConnectionConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AkriConnectorsMqttConnectionConfiguration model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"mlmbtxhwgfwsrta\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":1337562236,\"maxInflightMessages\":240888782,\"sessionExpirySeconds\":1803656390,\"tls\":{\"mode\":\"Enabled\",\"trustedCaCertificateConfigMapRef\":\"udygooo\"}}")
            .toObject(AkriConnectorsMqttConnectionConfiguration.class);
        Assertions.assertEquals("mlmbtxhwgfwsrta", model.host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT, model.protocol());
        Assertions.assertEquals(1337562236, model.keepAliveSeconds());
        Assertions.assertEquals(240888782, model.maxInflightMessages());
        Assertions.assertEquals(1803656390, model.sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED, model.tls().mode());
        Assertions.assertEquals("udygooo", model.tls().trustedCaCertificateConfigMapRef());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AkriConnectorsMqttConnectionConfiguration model = new AkriConnectorsMqttConnectionConfiguration()
            .withAuthentication(new AkriConnectorsMqttAuthentication())
            .withHost("mlmbtxhwgfwsrta")
            .withProtocol(AkriConnectorsMqttProtocolType.MQTT)
            .withKeepAliveSeconds(1337562236)
            .withMaxInflightMessages(240888782)
            .withSessionExpirySeconds(1803656390)
            .withTls(
                new TlsProperties().withMode(OperationalMode.ENABLED).withTrustedCaCertificateConfigMapRef("udygooo"));
        model = BinaryData.fromObject(model).toObject(AkriConnectorsMqttConnectionConfiguration.class);
        Assertions.assertEquals("mlmbtxhwgfwsrta", model.host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT, model.protocol());
        Assertions.assertEquals(1337562236, model.keepAliveSeconds());
        Assertions.assertEquals(240888782, model.maxInflightMessages());
        Assertions.assertEquals(1803656390, model.sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED, model.tls().mode());
        Assertions.assertEquals("udygooo", model.tls().trustedCaCertificateConfigMapRef());
    }
}
