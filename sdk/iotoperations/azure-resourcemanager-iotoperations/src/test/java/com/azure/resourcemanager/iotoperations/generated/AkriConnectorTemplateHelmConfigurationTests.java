// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmAdvancedConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmConfigurationSettings;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmDeleteConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmInstallConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmRegistrySettings;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmUpgradeConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AkriConnectorTemplateHelmConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AkriConnectorTemplateHelmConfiguration model = BinaryData.fromString(
            "{\"runtimeConfigurationType\":\"HelmConfiguration\",\"helmConfigurationSettings\":{\"registrySettings\":{\"registrySettingsType\":\"AkriConnectorTemplateHelmRegistrySettings\"},\"releaseName\":\"kghtpwijnh\",\"repositoryName\":\"jsvfycxzbfvoowv\",\"version\":\"vmtgjqppy\",\"advancedConfiguration\":{\"delete\":{\"timeout\":465000674,\"waitForJobs\":false,\"atomic\":true,\"disableHooks\":false,\"wait\":false},\"install\":{\"timeout\":884290238,\"waitForJobs\":true,\"atomic\":true,\"disableHooks\":false,\"wait\":false},\"upgrade\":{\"timeout\":750731446,\"waitForJobs\":true,\"atomic\":false,\"disableHooks\":false,\"wait\":true}},\"values\":{\"wslolbqp\":\"hjglikk\",\"felfktg\":\"uzlm\",\"xeznoi\":\"lcrpw\",\"pn\":\"brnjwmw\"}}}")
            .toObject(AkriConnectorTemplateHelmConfiguration.class);
        Assertions.assertEquals("kghtpwijnh", model.helmConfigurationSettings().releaseName());
        Assertions.assertEquals("jsvfycxzbfvoowv", model.helmConfigurationSettings().repositoryName());
        Assertions.assertEquals("vmtgjqppy", model.helmConfigurationSettings().version());
        Assertions.assertEquals(465000674,
            model.helmConfigurationSettings().advancedConfiguration().delete().timeout());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().delete().waitForJobs());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().delete().atomic());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().delete().disableHooks());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().delete().waitForResources());
        Assertions.assertEquals(884290238,
            model.helmConfigurationSettings().advancedConfiguration().install().timeout());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().install().waitForJobs());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().install().atomic());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().install().disableHooks());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().install().waitForResources());
        Assertions.assertEquals(750731446,
            model.helmConfigurationSettings().advancedConfiguration().upgrade().timeout());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().upgrade().waitForJobs());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().upgrade().atomic());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().upgrade().disableHooks());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().upgrade().waitForResources());
        Assertions.assertEquals("hjglikk", model.helmConfigurationSettings().values().get("wslolbqp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AkriConnectorTemplateHelmConfiguration model = new AkriConnectorTemplateHelmConfiguration()
            .withHelmConfigurationSettings(new AkriConnectorTemplateHelmConfigurationSettings()
                .withRegistrySettings(new AkriConnectorTemplateHelmRegistrySettings())
                .withReleaseName("kghtpwijnh")
                .withRepositoryName("jsvfycxzbfvoowv")
                .withVersion("vmtgjqppy")
                .withAdvancedConfiguration(new AkriConnectorTemplateHelmAdvancedConfiguration()
                    .withDelete(new AkriConnectorTemplateHelmDeleteConfiguration().withTimeout(465000674)
                        .withWaitForJobs(false)
                        .withAtomic(true)
                        .withDisableHooks(false)
                        .withWaitForResources(false))
                    .withInstall(new AkriConnectorTemplateHelmInstallConfiguration().withTimeout(884290238)
                        .withWaitForJobs(true)
                        .withAtomic(true)
                        .withDisableHooks(false)
                        .withWaitForResources(false))
                    .withUpgrade(new AkriConnectorTemplateHelmUpgradeConfiguration().withTimeout(750731446)
                        .withWaitForJobs(true)
                        .withAtomic(false)
                        .withDisableHooks(false)
                        .withWaitForResources(true)))
                .withValues(mapOf("wslolbqp", "hjglikk", "felfktg", "uzlm", "xeznoi", "lcrpw", "pn", "brnjwmw")));
        model = BinaryData.fromObject(model).toObject(AkriConnectorTemplateHelmConfiguration.class);
        Assertions.assertEquals("kghtpwijnh", model.helmConfigurationSettings().releaseName());
        Assertions.assertEquals("jsvfycxzbfvoowv", model.helmConfigurationSettings().repositoryName());
        Assertions.assertEquals("vmtgjqppy", model.helmConfigurationSettings().version());
        Assertions.assertEquals(465000674,
            model.helmConfigurationSettings().advancedConfiguration().delete().timeout());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().delete().waitForJobs());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().delete().atomic());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().delete().disableHooks());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().delete().waitForResources());
        Assertions.assertEquals(884290238,
            model.helmConfigurationSettings().advancedConfiguration().install().timeout());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().install().waitForJobs());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().install().atomic());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().install().disableHooks());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().install().waitForResources());
        Assertions.assertEquals(750731446,
            model.helmConfigurationSettings().advancedConfiguration().upgrade().timeout());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().upgrade().waitForJobs());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().upgrade().atomic());
        Assertions.assertFalse(model.helmConfigurationSettings().advancedConfiguration().upgrade().disableHooks());
        Assertions.assertTrue(model.helmConfigurationSettings().advancedConfiguration().upgrade().waitForResources());
        Assertions.assertEquals("hjglikk", model.helmConfigurationSettings().values().get("wslolbqp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
