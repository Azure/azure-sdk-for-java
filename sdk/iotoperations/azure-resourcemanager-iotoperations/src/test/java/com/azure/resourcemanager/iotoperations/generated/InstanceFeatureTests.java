// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.InstanceFeature;
import com.azure.resourcemanager.iotoperations.models.InstanceFeatureMode;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceFeatureTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceFeature model = BinaryData.fromString(
            "{\"mode\":\"Disabled\",\"settings\":{\"ntnbybkzg\":\"Disabled\",\"rwclxxwrljdo\":\"Disabled\",\"kcqvkocrc\":\"Disabled\",\"kwt\":\"Enabled\"}}")
            .toObject(InstanceFeature.class);
        Assertions.assertEquals(InstanceFeatureMode.DISABLED, model.mode());
        Assertions.assertEquals(OperationalMode.DISABLED, model.settings().get("ntnbybkzg"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceFeature model = new InstanceFeature().withMode(InstanceFeatureMode.DISABLED)
            .withSettings(mapOf("ntnbybkzg", OperationalMode.DISABLED, "rwclxxwrljdo", OperationalMode.DISABLED,
                "kcqvkocrc", OperationalMode.DISABLED, "kwt", OperationalMode.ENABLED));
        model = BinaryData.fromObject(model).toObject(InstanceFeature.class);
        Assertions.assertEquals(InstanceFeatureMode.DISABLED, model.mode());
        Assertions.assertEquals(OperationalMode.DISABLED, model.settings().get("ntnbybkzg"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
