// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.iotoperations.IoTOperationsManager;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateResource;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AkriConnectorTemplatesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Provisioning\",\"aioMetadata\":{\"aioMinVersion\":\"ju\",\"aioMaxVersion\":\"fcdis\"},\"runtimeConfiguration\":{\"runtimeConfigurationType\":\"AkriConnectorTemplateRuntimeConfiguration\"},\"diagnostics\":{\"logs\":{\"level\":\"nxzhcze\"}},\"deviceInboundEndpointTypes\":[{\"description\":\"zbujrt\",\"endpointType\":\"hqvwrevkhgnlnzon\",\"version\":\"rpiqywncv\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"z\",\"defaultEventsConfigSchemaRef\":\"fizehtdhgbjk\",\"defaultProcessControlConfigSchemaRef\":\"eljeamurvzmlovua\",\"defaultStreamsConfigSchemaRef\":\"shcxlpmjerbdk\",\"additionalConfigSchemaRef\":\"vidizozsdb\"}},{\"description\":\"xjmonf\",\"endpointType\":\"gnwncypuuwwlt\",\"version\":\"qjctzenkeif\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"mkdasv\",\"defaultEventsConfigSchemaRef\":\"yhbxcudchxgs\",\"defaultProcessControlConfigSchemaRef\":\"oldforobw\",\"defaultStreamsConfigSchemaRef\":\"vizbfhfo\",\"additionalConfigSchemaRef\":\"acqpbtuodxesza\"}}],\"mqttConnectionConfiguration\":{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"awumuaslzkwrrwo\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":2074554756,\"maxInflightMessages\":913388028,\"sessionExpirySeconds\":671664231,\"tls\":{\"mode\":\"Enabled\",\"trustedCaCertificateConfigMapRef\":\"drkywuhps\"}}},\"extendedLocation\":{\"name\":\"uurutlwexxwlalni\",\"type\":\"CustomLocation\"},\"id\":\"srzpgepqtybbww\",\"name\":\"gdakchz\",\"type\":\"vl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        IoTOperationsManager manager = IoTOperationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AkriConnectorTemplateResource response = manager.akriConnectorTemplates()
            .getWithResponse("yaqitmhheioqaqhv", "eufuqyrxpdlcgql", "ismjqfrddgamqu", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("ju", response.properties().aioMetadata().aioMinVersion());
        Assertions.assertEquals("fcdis", response.properties().aioMetadata().aioMaxVersion());
        Assertions.assertEquals("nxzhcze", response.properties().diagnostics().logs().level());
        Assertions.assertEquals("zbujrt", response.properties().deviceInboundEndpointTypes().get(0).description());
        Assertions.assertEquals("hqvwrevkhgnlnzon",
            response.properties().deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("rpiqywncv", response.properties().deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("z",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("fizehtdhgbjk",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultEventsConfigSchemaRef());
        Assertions.assertEquals("eljeamurvzmlovua",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("shcxlpmjerbdk",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("vidizozsdb",
            response.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .additionalConfigSchemaRef());
        Assertions.assertEquals("awumuaslzkwrrwo", response.properties().mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT,
            response.properties().mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(2074554756, response.properties().mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(913388028, response.properties().mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(671664231, response.properties().mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED,
            response.properties().mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("drkywuhps",
            response.properties().mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
        Assertions.assertEquals("uurutlwexxwlalni", response.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, response.extendedLocation().type());
    }
}
