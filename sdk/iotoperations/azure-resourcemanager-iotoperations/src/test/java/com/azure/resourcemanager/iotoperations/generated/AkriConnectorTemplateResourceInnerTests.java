// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.fluent.models.AkriConnectorTemplateResourceInner;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateAioMetadata;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDeviceInboundEndpointType;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateDiagnostics;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateProperties;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateRuntimeConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsDiagnosticsLogs;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttAuthentication;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttConnectionConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorsMqttProtocolType;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.TlsProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class AkriConnectorTemplateResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AkriConnectorTemplateResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"aioMetadata\":{\"aioMinVersion\":\"xltjcvnhltiu\",\"aioMaxVersion\":\"xnavvwxq\"},\"runtimeConfiguration\":{\"runtimeConfigurationType\":\"AkriConnectorTemplateRuntimeConfiguration\"},\"diagnostics\":{\"logs\":{\"level\":\"qunyowxwlmdjr\"}},\"deviceInboundEndpointTypes\":[{\"description\":\"g\",\"endpointType\":\"vfvpdbodaciz\",\"version\":\"q\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"rribd\",\"defaultEventsConfigSchemaRef\":\"b\",\"defaultProcessControlConfigSchemaRef\":\"p\",\"defaultStreamsConfigSchemaRef\":\"ghvxndzwmkrefa\",\"additionalConfigSchemaRef\":\"jorwkqnyhgbij\"}},{\"description\":\"ivfxzsjabibsyst\",\"endpointType\":\"wfsdjpvkvpbj\",\"version\":\"kzbzkdvncjabudu\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"akmokzhjjklf\",\"defaultEventsConfigSchemaRef\":\"mouwqlgzrfzeey\",\"defaultProcessControlConfigSchemaRef\":\"izikayuhq\",\"defaultStreamsConfigSchemaRef\":\"jbsybbqw\",\"additionalConfigSchemaRef\":\"t\"}},{\"description\":\"gmfpgvmp\",\"endpointType\":\"paslthaqfxssmwu\",\"version\":\"bdsrez\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"hneuyowqkd\",\"defaultEventsConfigSchemaRef\":\"t\",\"defaultProcessControlConfigSchemaRef\":\"ib\",\"defaultStreamsConfigSchemaRef\":\"cgpik\",\"additionalConfigSchemaRef\":\"imejzanl\"}},{\"description\":\"xi\",\"endpointType\":\"vrmbzono\",\"version\":\"xrjqcirgzpfrlazs\",\"configurationSchemaRefs\":{\"defaultDatasetConfigSchemaRef\":\"woiindf\",\"defaultEventsConfigSchemaRef\":\"pj\",\"defaultProcessControlConfigSchemaRef\":\"wbtlhflsjcdh\",\"defaultStreamsConfigSchemaRef\":\"fjvfbgofeljagr\",\"additionalConfigSchemaRef\":\"qhl\"}}],\"mqttConnectionConfiguration\":{\"authentication\":{\"method\":\"AkriConnectorsMqttAuthentication\"},\"host\":\"iiojnal\",\"protocol\":\"Mqtt\",\"keepAliveSeconds\":1358973508,\"maxInflightMessages\":762010823,\"sessionExpirySeconds\":477043409,\"tls\":{\"mode\":\"Enabled\",\"trustedCaCertificateConfigMapRef\":\"ueluqhhahhxvrhmz\"}}},\"extendedLocation\":{\"name\":\"pjgwwspug\",\"type\":\"CustomLocation\"},\"id\":\"qs\",\"name\":\"hqxujxukndxdi\",\"type\":\"rjguufzdmsyqtf\"}")
            .toObject(AkriConnectorTemplateResourceInner.class);
        Assertions.assertEquals("xltjcvnhltiu", model.properties().aioMetadata().aioMinVersion());
        Assertions.assertEquals("xnavvwxq", model.properties().aioMetadata().aioMaxVersion());
        Assertions.assertEquals("qunyowxwlmdjr", model.properties().diagnostics().logs().level());
        Assertions.assertEquals("g", model.properties().deviceInboundEndpointTypes().get(0).description());
        Assertions.assertEquals("vfvpdbodaciz", model.properties().deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("q", model.properties().deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("rribd",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("b",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultEventsConfigSchemaRef());
        Assertions.assertEquals("p",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("ghvxndzwmkrefa",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("jorwkqnyhgbij",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .additionalConfigSchemaRef());
        Assertions.assertEquals("iiojnal", model.properties().mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT,
            model.properties().mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(1358973508, model.properties().mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(762010823, model.properties().mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(477043409, model.properties().mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("ueluqhhahhxvrhmz",
            model.properties().mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
        Assertions.assertEquals("pjgwwspug", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AkriConnectorTemplateResourceInner model = new AkriConnectorTemplateResourceInner()
            .withProperties(new AkriConnectorTemplateProperties()
                .withAioMetadata(new AkriConnectorTemplateAioMetadata().withAioMinVersion("xltjcvnhltiu")
                    .withAioMaxVersion("xnavvwxq"))
                .withRuntimeConfiguration(new AkriConnectorTemplateRuntimeConfiguration())
                .withDiagnostics(new AkriConnectorTemplateDiagnostics()
                    .withLogs(new AkriConnectorsDiagnosticsLogs().withLevel("qunyowxwlmdjr")))
                .withDeviceInboundEndpointTypes(Arrays.asList(new AkriConnectorTemplateDeviceInboundEndpointType()
                    .withDescription("g")
                    .withEndpointType("vfvpdbodaciz")
                    .withVersion("q")
                    .withConfigurationSchemaRefs(new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                        .withDefaultDatasetConfigSchemaRef("rribd")
                        .withDefaultEventsConfigSchemaRef("b")
                        .withDefaultProcessControlConfigSchemaRef("p")
                        .withDefaultStreamsConfigSchemaRef("ghvxndzwmkrefa")
                        .withAdditionalConfigSchemaRef("jorwkqnyhgbij")),
                    new AkriConnectorTemplateDeviceInboundEndpointType().withDescription("ivfxzsjabibsyst")
                        .withEndpointType("wfsdjpvkvpbj")
                        .withVersion("kzbzkdvncjabudu")
                        .withConfigurationSchemaRefs(
                            new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                                .withDefaultDatasetConfigSchemaRef("akmokzhjjklf")
                                .withDefaultEventsConfigSchemaRef("mouwqlgzrfzeey")
                                .withDefaultProcessControlConfigSchemaRef("izikayuhq")
                                .withDefaultStreamsConfigSchemaRef("jbsybbqw")
                                .withAdditionalConfigSchemaRef("t")),
                    new AkriConnectorTemplateDeviceInboundEndpointType().withDescription("gmfpgvmp")
                        .withEndpointType("paslthaqfxssmwu")
                        .withVersion("bdsrez")
                        .withConfigurationSchemaRefs(
                            new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                                .withDefaultDatasetConfigSchemaRef("hneuyowqkd")
                                .withDefaultEventsConfigSchemaRef("t")
                                .withDefaultProcessControlConfigSchemaRef("ib")
                                .withDefaultStreamsConfigSchemaRef("cgpik")
                                .withAdditionalConfigSchemaRef("imejzanl")),
                    new AkriConnectorTemplateDeviceInboundEndpointType().withDescription("xi")
                        .withEndpointType("vrmbzono")
                        .withVersion("xrjqcirgzpfrlazs")
                        .withConfigurationSchemaRefs(
                            new AkriConnectorTemplateDeviceInboundEndpointConfigurationSchemaRefs()
                                .withDefaultDatasetConfigSchemaRef("woiindf")
                                .withDefaultEventsConfigSchemaRef("pj")
                                .withDefaultProcessControlConfigSchemaRef("wbtlhflsjcdh")
                                .withDefaultStreamsConfigSchemaRef("fjvfbgofeljagr")
                                .withAdditionalConfigSchemaRef("qhl"))))
                .withMqttConnectionConfiguration(new AkriConnectorsMqttConnectionConfiguration()
                    .withAuthentication(new AkriConnectorsMqttAuthentication())
                    .withHost("iiojnal")
                    .withProtocol(AkriConnectorsMqttProtocolType.MQTT)
                    .withKeepAliveSeconds(1358973508)
                    .withMaxInflightMessages(762010823)
                    .withSessionExpirySeconds(477043409)
                    .withTls(new TlsProperties().withMode(OperationalMode.ENABLED)
                        .withTrustedCaCertificateConfigMapRef("ueluqhhahhxvrhmz"))))
            .withExtendedLocation(
                new ExtendedLocation().withName("pjgwwspug").withType(ExtendedLocationType.CUSTOM_LOCATION));
        model = BinaryData.fromObject(model).toObject(AkriConnectorTemplateResourceInner.class);
        Assertions.assertEquals("xltjcvnhltiu", model.properties().aioMetadata().aioMinVersion());
        Assertions.assertEquals("xnavvwxq", model.properties().aioMetadata().aioMaxVersion());
        Assertions.assertEquals("qunyowxwlmdjr", model.properties().diagnostics().logs().level());
        Assertions.assertEquals("g", model.properties().deviceInboundEndpointTypes().get(0).description());
        Assertions.assertEquals("vfvpdbodaciz", model.properties().deviceInboundEndpointTypes().get(0).endpointType());
        Assertions.assertEquals("q", model.properties().deviceInboundEndpointTypes().get(0).version());
        Assertions.assertEquals("rribd",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultDatasetConfigSchemaRef());
        Assertions.assertEquals("b",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultEventsConfigSchemaRef());
        Assertions.assertEquals("p",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultProcessControlConfigSchemaRef());
        Assertions.assertEquals("ghvxndzwmkrefa",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .defaultStreamsConfigSchemaRef());
        Assertions.assertEquals("jorwkqnyhgbij",
            model.properties()
                .deviceInboundEndpointTypes()
                .get(0)
                .configurationSchemaRefs()
                .additionalConfigSchemaRef());
        Assertions.assertEquals("iiojnal", model.properties().mqttConnectionConfiguration().host());
        Assertions.assertEquals(AkriConnectorsMqttProtocolType.MQTT,
            model.properties().mqttConnectionConfiguration().protocol());
        Assertions.assertEquals(1358973508, model.properties().mqttConnectionConfiguration().keepAliveSeconds());
        Assertions.assertEquals(762010823, model.properties().mqttConnectionConfiguration().maxInflightMessages());
        Assertions.assertEquals(477043409, model.properties().mqttConnectionConfiguration().sessionExpirySeconds());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().mqttConnectionConfiguration().tls().mode());
        Assertions.assertEquals("ueluqhhahhxvrhmz",
            model.properties().mqttConnectionConfiguration().tls().trustedCaCertificateConfigMapRef());
        Assertions.assertEquals("pjgwwspug", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }
}
