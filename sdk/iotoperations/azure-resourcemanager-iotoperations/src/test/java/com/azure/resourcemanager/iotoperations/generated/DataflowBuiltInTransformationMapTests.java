// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.DataflowBuiltInTransformationMap;
import com.azure.resourcemanager.iotoperations.models.DataflowMappingType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataflowBuiltInTransformationMapTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowBuiltInTransformationMap model = BinaryData.fromString(
            "{\"type\":\"Rename\",\"description\":\"pybsrfbjfdtw\",\"inputs\":[\"otftpvjzbexilz\",\"nfqqnvwp\"],\"expression\":\"taruoujmkcj\",\"output\":\"wqytjrybnwjewgdr\"}")
            .toObject(DataflowBuiltInTransformationMap.class);
        Assertions.assertEquals(DataflowMappingType.RENAME, model.type());
        Assertions.assertEquals("pybsrfbjfdtw", model.description());
        Assertions.assertEquals("otftpvjzbexilz", model.inputs().get(0));
        Assertions.assertEquals("taruoujmkcj", model.expression());
        Assertions.assertEquals("wqytjrybnwjewgdr", model.output());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowBuiltInTransformationMap model
            = new DataflowBuiltInTransformationMap().withType(DataflowMappingType.RENAME)
                .withDescription("pybsrfbjfdtw")
                .withInputs(Arrays.asList("otftpvjzbexilz", "nfqqnvwp"))
                .withExpression("taruoujmkcj")
                .withOutput("wqytjrybnwjewgdr");
        model = BinaryData.fromObject(model).toObject(DataflowBuiltInTransformationMap.class);
        Assertions.assertEquals(DataflowMappingType.RENAME, model.type());
        Assertions.assertEquals("pybsrfbjfdtw", model.description());
        Assertions.assertEquals("otftpvjzbexilz", model.inputs().get(0));
        Assertions.assertEquals("taruoujmkcj", model.expression());
        Assertions.assertEquals("wqytjrybnwjewgdr", model.output());
    }
}
