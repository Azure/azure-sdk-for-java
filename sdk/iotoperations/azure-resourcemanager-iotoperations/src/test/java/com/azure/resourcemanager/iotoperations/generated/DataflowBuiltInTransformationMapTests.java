// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.DataflowBuiltInTransformationMap;
import com.azure.resourcemanager.iotoperations.models.DataflowMappingType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataflowBuiltInTransformationMapTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowBuiltInTransformationMap model = BinaryData.fromString(
            "{\"type\":\"BuiltInFunction\",\"description\":\"tmhrkwofyyvoqacp\",\"inputs\":[\"xpbtgiwbwo\",\"nwashrtd\"],\"expression\":\"cnqxwbpokulpi\",\"output\":\"jwaa\"}")
            .toObject(DataflowBuiltInTransformationMap.class);
        Assertions.assertEquals(DataflowMappingType.BUILT_IN_FUNCTION, model.type());
        Assertions.assertEquals("tmhrkwofyyvoqacp", model.description());
        Assertions.assertEquals("xpbtgiwbwo", model.inputs().get(0));
        Assertions.assertEquals("cnqxwbpokulpi", model.expression());
        Assertions.assertEquals("jwaa", model.output());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowBuiltInTransformationMap model
            = new DataflowBuiltInTransformationMap().withType(DataflowMappingType.BUILT_IN_FUNCTION)
                .withDescription("tmhrkwofyyvoqacp")
                .withInputs(Arrays.asList("xpbtgiwbwo", "nwashrtd"))
                .withExpression("cnqxwbpokulpi")
                .withOutput("jwaa");
        model = BinaryData.fromObject(model).toObject(DataflowBuiltInTransformationMap.class);
        Assertions.assertEquals(DataflowMappingType.BUILT_IN_FUNCTION, model.type());
        Assertions.assertEquals("tmhrkwofyyvoqacp", model.description());
        Assertions.assertEquals("xpbtgiwbwo", model.inputs().get(0));
        Assertions.assertEquals("cnqxwbpokulpi", model.expression());
        Assertions.assertEquals("jwaa", model.output());
    }
}
