// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmAdvancedConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmConfigurationSettings;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmDeleteConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmInstallConfiguration;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmRegistrySettings;
import com.azure.resourcemanager.iotoperations.models.AkriConnectorTemplateHelmUpgradeConfiguration;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AkriConnectorTemplateHelmConfigurationSettingsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AkriConnectorTemplateHelmConfigurationSettings model = BinaryData.fromString(
            "{\"registrySettings\":{\"registrySettingsType\":\"AkriConnectorTemplateHelmRegistrySettings\"},\"releaseName\":\"azej\",\"repositoryName\":\"oqkag\",\"version\":\"hsxttaugzxnf\",\"advancedConfiguration\":{\"delete\":{\"timeout\":1339153822,\"waitForJobs\":false,\"atomic\":true,\"disableHooks\":false,\"wait\":false},\"install\":{\"timeout\":135595246,\"waitForJobs\":false,\"atomic\":false,\"disableHooks\":true,\"wait\":true},\"upgrade\":{\"timeout\":1149694160,\"waitForJobs\":false,\"atomic\":true,\"disableHooks\":false,\"wait\":false}},\"values\":{\"ixqtn\":\"sj\",\"ffiakp\":\"ttezlw\",\"tmmjihyeozph\":\"pqqmted\",\"qncygupkvi\":\"wau\"}}")
            .toObject(AkriConnectorTemplateHelmConfigurationSettings.class);
        Assertions.assertEquals("azej", model.releaseName());
        Assertions.assertEquals("oqkag", model.repositoryName());
        Assertions.assertEquals("hsxttaugzxnf", model.version());
        Assertions.assertEquals(1339153822, model.advancedConfiguration().delete().timeout());
        Assertions.assertFalse(model.advancedConfiguration().delete().waitForJobs());
        Assertions.assertTrue(model.advancedConfiguration().delete().atomic());
        Assertions.assertFalse(model.advancedConfiguration().delete().disableHooks());
        Assertions.assertFalse(model.advancedConfiguration().delete().waitForResources());
        Assertions.assertEquals(135595246, model.advancedConfiguration().install().timeout());
        Assertions.assertFalse(model.advancedConfiguration().install().waitForJobs());
        Assertions.assertFalse(model.advancedConfiguration().install().atomic());
        Assertions.assertTrue(model.advancedConfiguration().install().disableHooks());
        Assertions.assertTrue(model.advancedConfiguration().install().waitForResources());
        Assertions.assertEquals(1149694160, model.advancedConfiguration().upgrade().timeout());
        Assertions.assertFalse(model.advancedConfiguration().upgrade().waitForJobs());
        Assertions.assertTrue(model.advancedConfiguration().upgrade().atomic());
        Assertions.assertFalse(model.advancedConfiguration().upgrade().disableHooks());
        Assertions.assertFalse(model.advancedConfiguration().upgrade().waitForResources());
        Assertions.assertEquals("sj", model.values().get("ixqtn"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AkriConnectorTemplateHelmConfigurationSettings model = new AkriConnectorTemplateHelmConfigurationSettings()
            .withRegistrySettings(new AkriConnectorTemplateHelmRegistrySettings())
            .withReleaseName("azej")
            .withRepositoryName("oqkag")
            .withVersion("hsxttaugzxnf")
            .withAdvancedConfiguration(new AkriConnectorTemplateHelmAdvancedConfiguration()
                .withDelete(new AkriConnectorTemplateHelmDeleteConfiguration().withTimeout(1339153822)
                    .withWaitForJobs(false)
                    .withAtomic(true)
                    .withDisableHooks(false)
                    .withWaitForResources(false))
                .withInstall(new AkriConnectorTemplateHelmInstallConfiguration().withTimeout(135595246)
                    .withWaitForJobs(false)
                    .withAtomic(false)
                    .withDisableHooks(true)
                    .withWaitForResources(true))
                .withUpgrade(new AkriConnectorTemplateHelmUpgradeConfiguration().withTimeout(1149694160)
                    .withWaitForJobs(false)
                    .withAtomic(true)
                    .withDisableHooks(false)
                    .withWaitForResources(false)))
            .withValues(mapOf("ixqtn", "sj", "ffiakp", "ttezlw", "tmmjihyeozph", "pqqmted", "qncygupkvi", "wau"));
        model = BinaryData.fromObject(model).toObject(AkriConnectorTemplateHelmConfigurationSettings.class);
        Assertions.assertEquals("azej", model.releaseName());
        Assertions.assertEquals("oqkag", model.repositoryName());
        Assertions.assertEquals("hsxttaugzxnf", model.version());
        Assertions.assertEquals(1339153822, model.advancedConfiguration().delete().timeout());
        Assertions.assertFalse(model.advancedConfiguration().delete().waitForJobs());
        Assertions.assertTrue(model.advancedConfiguration().delete().atomic());
        Assertions.assertFalse(model.advancedConfiguration().delete().disableHooks());
        Assertions.assertFalse(model.advancedConfiguration().delete().waitForResources());
        Assertions.assertEquals(135595246, model.advancedConfiguration().install().timeout());
        Assertions.assertFalse(model.advancedConfiguration().install().waitForJobs());
        Assertions.assertFalse(model.advancedConfiguration().install().atomic());
        Assertions.assertTrue(model.advancedConfiguration().install().disableHooks());
        Assertions.assertTrue(model.advancedConfiguration().install().waitForResources());
        Assertions.assertEquals(1149694160, model.advancedConfiguration().upgrade().timeout());
        Assertions.assertFalse(model.advancedConfiguration().upgrade().waitForJobs());
        Assertions.assertTrue(model.advancedConfiguration().upgrade().atomic());
        Assertions.assertFalse(model.advancedConfiguration().upgrade().disableHooks());
        Assertions.assertFalse(model.advancedConfiguration().upgrade().waitForResources());
        Assertions.assertEquals("sj", model.values().get("ixqtn"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
