// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionInput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionOutput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionSchemaSerializationFormat;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionSchemaSettings;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNodeConnection;
import org.junit.jupiter.api.Assertions;

public final class DataflowGraphNodeConnectionTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowGraphNodeConnection model = BinaryData.fromString(
            "{\"from\":{\"name\":\"nqntorudsgsahm\",\"schema\":{\"serializationFormat\":\"Avro\",\"schemaRef\":\"auwjuetaebu\"}},\"to\":{\"name\":\"u\"}}")
            .toObject(DataflowGraphNodeConnection.class);
        Assertions.assertEquals("nqntorudsgsahm", model.from().name());
        Assertions.assertEquals(DataflowGraphConnectionSchemaSerializationFormat.AVRO,
            model.from().schema().serializationFormat());
        Assertions.assertEquals("auwjuetaebu", model.from().schema().schemaRef());
        Assertions.assertEquals("u", model.to().name());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowGraphNodeConnection model
            = new DataflowGraphNodeConnection().withFrom(new DataflowGraphConnectionInput().withName("nqntorudsgsahm")
                .withSchema(new DataflowGraphConnectionSchemaSettings()
                    .withSerializationFormat(DataflowGraphConnectionSchemaSerializationFormat.AVRO)
                    .withSchemaRef("auwjuetaebu")))
                .withTo(new DataflowGraphConnectionOutput().withName("u"));
        model = BinaryData.fromObject(model).toObject(DataflowGraphNodeConnection.class);
        Assertions.assertEquals("nqntorudsgsahm", model.from().name());
        Assertions.assertEquals(DataflowGraphConnectionSchemaSerializationFormat.AVRO,
            model.from().schema().serializationFormat());
        Assertions.assertEquals("auwjuetaebu", model.from().schema().schemaRef());
        Assertions.assertEquals("u", model.to().name());
    }
}
