// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.fluent.models.DataflowGraphResourceInner;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionInput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionOutput;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionSchemaSerializationFormat;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphConnectionSchemaSettings;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNode;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphNodeConnection;
import com.azure.resourcemanager.iotoperations.models.DataflowGraphProperties;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DataflowGraphResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowGraphResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"mode\":\"Enabled\",\"requestDiskPersistence\":\"Enabled\",\"nodes\":[{\"nodeType\":\"DataflowGraphNode\",\"name\":\"youlp\"},{\"nodeType\":\"DataflowGraphNode\",\"name\":\"rvxaglrvimjwosy\"}],\"nodeConnections\":[{\"from\":{\"name\":\"itc\",\"schema\":{\"serializationFormat\":\"Avro\",\"schemaRef\":\"tq\"}},\"to\":{\"name\":\"miekkezzikhlyfjh\"}}],\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"name\":\"gebdunygaeq\",\"type\":\"CustomLocation\"},\"id\":\"qfatpxllrxcyjm\",\"name\":\"a\",\"type\":\"su\"}")
            .toObject(DataflowGraphResourceInner.class);
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().mode());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().requestDiskPersistence());
        Assertions.assertEquals("youlp", model.properties().nodes().get(0).name());
        Assertions.assertEquals("itc", model.properties().nodeConnections().get(0).from().name());
        Assertions.assertEquals(DataflowGraphConnectionSchemaSerializationFormat.AVRO,
            model.properties().nodeConnections().get(0).from().schema().serializationFormat());
        Assertions.assertEquals("tq", model.properties().nodeConnections().get(0).from().schema().schemaRef());
        Assertions.assertEquals("miekkezzikhlyfjh", model.properties().nodeConnections().get(0).to().name());
        Assertions.assertEquals("gebdunygaeq", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowGraphResourceInner model
            = new DataflowGraphResourceInner()
                .withProperties(
                    new DataflowGraphProperties().withMode(OperationalMode.ENABLED)
                        .withRequestDiskPersistence(OperationalMode.ENABLED)
                        .withNodes(Arrays.asList(new DataflowGraphNode().withName("youlp"),
                            new DataflowGraphNode().withName("rvxaglrvimjwosy")))
                        .withNodeConnections(
                            Arrays
                                .asList(new DataflowGraphNodeConnection()
                                    .withFrom(new DataflowGraphConnectionInput().withName("itc")
                                        .withSchema(new DataflowGraphConnectionSchemaSettings()
                                            .withSerializationFormat(
                                                DataflowGraphConnectionSchemaSerializationFormat.AVRO)
                                            .withSchemaRef("tq")))
                                    .withTo(new DataflowGraphConnectionOutput().withName("miekkezzikhlyfjh")))))
                .withExtendedLocation(
                    new ExtendedLocation().withName("gebdunygaeq").withType(ExtendedLocationType.CUSTOM_LOCATION));
        model = BinaryData.fromObject(model).toObject(DataflowGraphResourceInner.class);
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().mode());
        Assertions.assertEquals(OperationalMode.ENABLED, model.properties().requestDiskPersistence());
        Assertions.assertEquals("youlp", model.properties().nodes().get(0).name());
        Assertions.assertEquals("itc", model.properties().nodeConnections().get(0).from().name());
        Assertions.assertEquals(DataflowGraphConnectionSchemaSerializationFormat.AVRO,
            model.properties().nodeConnections().get(0).from().schema().serializationFormat());
        Assertions.assertEquals("tq", model.properties().nodeConnections().get(0).from().schema().schemaRef());
        Assertions.assertEquals("miekkezzikhlyfjh", model.properties().nodeConnections().get(0).to().name());
        Assertions.assertEquals("gebdunygaeq", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
    }
}
