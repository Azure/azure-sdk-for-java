// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.fluent.models.InstanceResourceInner;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryRef;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"jbpzvgnwzsymg\",\"provisioningState\":\"Accepted\",\"version\":\"cyzkohdbihanuf\",\"schemaRegistryRef\":{\"resourceId\":\"fcbjysagithxqha\"}},\"extendedLocation\":{\"name\":\"ifpikxwczby\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"q\",\"tenantId\":\"hiv\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"grtfwvu\":{\"principalId\":\"b\",\"clientId\":\"rkxvdum\"},\"jcny\":{\"principalId\":\"gaudcc\",\"clientId\":\"h\"},\"kvnipjoxz\":{\"principalId\":\"hkryhtn\",\"clientId\":\"czwlokjyem\"},\"npmqnjaqwixjspro\":{\"principalId\":\"chgejspodm\",\"clientId\":\"lzydehojwyahux\"}}},\"location\":\"cputegjvwmfdats\",\"tags\":{\"kjozkrwfnd\":\"vpjhulsuuv\",\"vwryoqpso\":\"odjpslwejd\",\"yffdfdos\":\"cctazakljlahbc\",\"hcrzevd\":\"gexpaojakhmsbz\"},\"id\":\"hlxaolthqtr\",\"name\":\"qjbpfzfsin\",\"type\":\"gvfcj\"}")
            .toObject(InstanceResourceInner.class);
        Assertions.assertEquals("cputegjvwmfdats", model.location());
        Assertions.assertEquals("vpjhulsuuv", model.tags().get("kjozkrwfnd"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals("ifpikxwczby", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceResourceInner model
            = new InstanceResourceInner().withLocation("cputegjvwmfdats")
                .withTags(mapOf("kjozkrwfnd", "vpjhulsuuv", "vwryoqpso", "odjpslwejd", "yffdfdos", "cctazakljlahbc",
                    "hcrzevd", "gexpaojakhmsbz"))
                .withProperties(new InstanceProperties().withDescription("jbpzvgnwzsymg")
                    .withSchemaRegistryRef(new SchemaRegistryRef().withResourceId("fcbjysagithxqha")))
                .withExtendedLocation(
                    new ExtendedLocation().withName("ifpikxwczby").withType(ExtendedLocationType.CUSTOM_LOCATION))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("grtfwvu", new UserAssignedIdentity(), "jcny",
                            new UserAssignedIdentity(), "kvnipjoxz", new UserAssignedIdentity(), "npmqnjaqwixjspro",
                            new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(InstanceResourceInner.class);
        Assertions.assertEquals("cputegjvwmfdats", model.location());
        Assertions.assertEquals("vpjhulsuuv", model.tags().get("kjozkrwfnd"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals("ifpikxwczby", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
