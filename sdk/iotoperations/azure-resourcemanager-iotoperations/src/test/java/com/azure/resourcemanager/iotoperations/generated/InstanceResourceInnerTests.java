// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.fluent.models.InstanceResourceInner;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocation;
import com.azure.resourcemanager.iotoperations.models.ExtendedLocationType;
import com.azure.resourcemanager.iotoperations.models.InstanceFeature;
import com.azure.resourcemanager.iotoperations.models.InstanceFeatureMode;
import com.azure.resourcemanager.iotoperations.models.InstanceProperties;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentity;
import com.azure.resourcemanager.iotoperations.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.iotoperations.models.OperationalMode;
import com.azure.resourcemanager.iotoperations.models.SchemaRegistryRef;
import com.azure.resourcemanager.iotoperations.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class InstanceResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        InstanceResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"jbpzvgnwzsymg\",\"provisioningState\":\"Accepted\",\"version\":\"cyzkohdbihanuf\",\"schemaRegistryRef\":{\"resourceId\":\"fcbjysagithxqha\"},\"features\":{\"qniwbybrkxvdumj\":{\"mode\":\"Stable\",\"settings\":{\"czbysc\":\"Enabled\",\"q\":\"Enabled\",\"hiv\":\"Disabled\"}},\"napczwlokjy\":{\"mode\":\"Disabled\",\"settings\":{\"ukxgaud\":\"Enabled\",\"snhsjcnyejhkryh\":\"Enabled\"}},\"ahuxinpm\":{\"mode\":\"Preview\",\"settings\":{\"ipjoxzjnchgejs\":\"Enabled\",\"dmailzydehojw\":\"Disabled\"}}}},\"extendedLocation\":{\"name\":\"njaqwixjspro\",\"type\":\"CustomLocation\"},\"identity\":{\"principalId\":\"utegjvwmfdats\",\"tenantId\":\"dvpjhulsuuvmk\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"psoacctazakljl\":{\"clientId\":\"wfndiodjpsl\",\"principalId\":\"jdpvwryo\"}}},\"location\":\"bcryffdfd\",\"tags\":{\"hcrzevd\":\"gexpaojakhmsbz\",\"qjbpfzfsin\":\"hlxaolthqtr\",\"wzo\":\"gvfcj\",\"np\":\"xjtfelluwfzit\"},\"id\":\"qfpjk\",\"name\":\"lxofpdvhpfxxypin\",\"type\":\"nmayhuybb\"}")
            .toObject(InstanceResourceInner.class);
        Assertions.assertEquals("bcryffdfd", model.location());
        Assertions.assertEquals("gexpaojakhmsbz", model.tags().get("hcrzevd"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals(InstanceFeatureMode.STABLE,
            model.properties().features().get("qniwbybrkxvdumj").mode());
        Assertions.assertEquals(OperationalMode.ENABLED,
            model.properties().features().get("qniwbybrkxvdumj").settings().get("czbysc"));
        Assertions.assertEquals("njaqwixjspro", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        InstanceResourceInner model
            = new InstanceResourceInner().withLocation("bcryffdfd")
                .withTags(mapOf("hcrzevd", "gexpaojakhmsbz", "qjbpfzfsin", "hlxaolthqtr", "wzo", "gvfcj", "np",
                    "xjtfelluwfzit"))
                .withProperties(
                    new InstanceProperties().withDescription("jbpzvgnwzsymg")
                        .withSchemaRegistryRef(new SchemaRegistryRef().withResourceId("fcbjysagithxqha"))
                        .withFeatures(mapOf("qniwbybrkxvdumj",
                            new InstanceFeature().withMode(InstanceFeatureMode.STABLE)
                                .withSettings(mapOf("czbysc", OperationalMode.ENABLED, "q", OperationalMode.ENABLED,
                                    "hiv", OperationalMode.DISABLED)),
                            "napczwlokjy",
                            new InstanceFeature().withMode(InstanceFeatureMode.DISABLED)
                                .withSettings(mapOf(
                                    "ukxgaud", OperationalMode.ENABLED, "snhsjcnyejhkryh", OperationalMode.ENABLED)),
                            "ahuxinpm",
                            new InstanceFeature().withMode(InstanceFeatureMode.PREVIEW)
                                .withSettings(mapOf("ipjoxzjnchgejs", OperationalMode.ENABLED, "dmailzydehojw",
                                    OperationalMode.DISABLED)))))
                .withExtendedLocation(
                    new ExtendedLocation().withName("njaqwixjspro").withType(ExtendedLocationType.CUSTOM_LOCATION))
                .withIdentity(
                    new ManagedServiceIdentity().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf("psoacctazakljl", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(InstanceResourceInner.class);
        Assertions.assertEquals("bcryffdfd", model.location());
        Assertions.assertEquals("gexpaojakhmsbz", model.tags().get("hcrzevd"));
        Assertions.assertEquals("jbpzvgnwzsymg", model.properties().description());
        Assertions.assertEquals("fcbjysagithxqha", model.properties().schemaRegistryRef().resourceId());
        Assertions.assertEquals(InstanceFeatureMode.STABLE,
            model.properties().features().get("qniwbybrkxvdumj").mode());
        Assertions.assertEquals(OperationalMode.ENABLED,
            model.properties().features().get("qniwbybrkxvdumj").settings().get("czbysc"));
        Assertions.assertEquals("njaqwixjspro", model.extendedLocation().name());
        Assertions.assertEquals(ExtendedLocationType.CUSTOM_LOCATION, model.extendedLocation().type());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
