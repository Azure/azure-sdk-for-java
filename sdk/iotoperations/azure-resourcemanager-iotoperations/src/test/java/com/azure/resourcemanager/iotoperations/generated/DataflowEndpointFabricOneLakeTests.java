// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLake;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLakeAuthentication;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLakeNames;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricPathType;
import com.azure.resourcemanager.iotoperations.models.FabricOneLakeAuthMethod;
import org.junit.jupiter.api.Assertions;

public final class DataflowEndpointFabricOneLakeTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowEndpointFabricOneLake model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"UserAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"vdkcrodtj\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"fw\",\"scope\":\"fltkacjv\",\"tenantId\":\"f\"}},\"names\":{\"lakehouseName\":\"dlfoakggkfp\",\"workspaceName\":\"gaowpulpqblylsyx\"},\"oneLakePathType\":\"Tables\",\"host\":\"jnsjervtiagxsd\",\"batching\":{\"latencySeconds\":6214613,\"maxMessages\":1182322128}}")
            .toObject(DataflowEndpointFabricOneLake.class);
        Assertions.assertEquals(FabricOneLakeAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("vdkcrodtj", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("fw", model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("fltkacjv", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("f", model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("dlfoakggkfp", model.names().lakehouseName());
        Assertions.assertEquals("gaowpulpqblylsyx", model.names().workspaceName());
        Assertions.assertEquals(DataflowEndpointFabricPathType.TABLES, model.oneLakePathType());
        Assertions.assertEquals("jnsjervtiagxsd", model.host());
        Assertions.assertEquals(6214613, model.batching().latencySeconds());
        Assertions.assertEquals(1182322128, model.batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowEndpointFabricOneLake model = new DataflowEndpointFabricOneLake()
            .withAuthentication(new DataflowEndpointFabricOneLakeAuthentication()
                .withMethod(FabricOneLakeAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("vdkcrodtj"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("fw")
                        .withScope("fltkacjv")
                        .withTenantId("f")))
            .withNames(new DataflowEndpointFabricOneLakeNames().withLakehouseName("dlfoakggkfp")
                .withWorkspaceName("gaowpulpqblylsyx"))
            .withOneLakePathType(DataflowEndpointFabricPathType.TABLES)
            .withHost("jnsjervtiagxsd")
            .withBatching(new BatchingConfiguration().withLatencySeconds(6214613).withMaxMessages(1182322128));
        model = BinaryData.fromObject(model).toObject(DataflowEndpointFabricOneLake.class);
        Assertions.assertEquals(FabricOneLakeAuthMethod.USER_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("vdkcrodtj", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("fw", model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("fltkacjv", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("f", model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("dlfoakggkfp", model.names().lakehouseName());
        Assertions.assertEquals("gaowpulpqblylsyx", model.names().workspaceName());
        Assertions.assertEquals(DataflowEndpointFabricPathType.TABLES, model.oneLakePathType());
        Assertions.assertEquals("jnsjervtiagxsd", model.host());
        Assertions.assertEquals(6214613, model.batching().latencySeconds());
        Assertions.assertEquals(1182322128, model.batching().maxMessages());
    }
}
