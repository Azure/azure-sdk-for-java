// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.iotoperations.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.iotoperations.models.BatchingConfiguration;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationSystemAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointAuthenticationUserAssignedManagedIdentity;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLake;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLakeAuthentication;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricOneLakeNames;
import com.azure.resourcemanager.iotoperations.models.DataflowEndpointFabricPathType;
import com.azure.resourcemanager.iotoperations.models.FabricOneLakeAuthMethod;
import org.junit.jupiter.api.Assertions;

public final class DataflowEndpointFabricOneLakeTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DataflowEndpointFabricOneLake model = BinaryData.fromString(
            "{\"authentication\":{\"method\":\"SystemAssignedManagedIdentity\",\"systemAssignedManagedIdentitySettings\":{\"audience\":\"elsfeaen\"},\"userAssignedManagedIdentitySettings\":{\"clientId\":\"bfatklddxbjhwu\",\"scope\":\"nozj\",\"tenantId\":\"sphyoulpjrvxa\"}},\"names\":{\"lakehouseName\":\"l\",\"workspaceName\":\"vimjwos\"},\"oneLakePathType\":\"Files\",\"host\":\"xitc\",\"batching\":{\"latencySeconds\":1365275067,\"maxMessages\":468391476}}")
            .toObject(DataflowEndpointFabricOneLake.class);
        Assertions.assertEquals(FabricOneLakeAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("elsfeaen", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("bfatklddxbjhwu",
            model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("nozj", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("sphyoulpjrvxa",
            model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("l", model.names().lakehouseName());
        Assertions.assertEquals("vimjwos", model.names().workspaceName());
        Assertions.assertEquals(DataflowEndpointFabricPathType.FILES, model.oneLakePathType());
        Assertions.assertEquals("xitc", model.host());
        Assertions.assertEquals(1365275067, model.batching().latencySeconds());
        Assertions.assertEquals(468391476, model.batching().maxMessages());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DataflowEndpointFabricOneLake model = new DataflowEndpointFabricOneLake()
            .withAuthentication(new DataflowEndpointFabricOneLakeAuthentication()
                .withMethod(FabricOneLakeAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY)
                .withSystemAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationSystemAssignedManagedIdentity().withAudience("elsfeaen"))
                .withUserAssignedManagedIdentitySettings(
                    new DataflowEndpointAuthenticationUserAssignedManagedIdentity().withClientId("bfatklddxbjhwu")
                        .withScope("nozj")
                        .withTenantId("sphyoulpjrvxa")))
            .withNames(new DataflowEndpointFabricOneLakeNames().withLakehouseName("l").withWorkspaceName("vimjwos"))
            .withOneLakePathType(DataflowEndpointFabricPathType.FILES)
            .withHost("xitc")
            .withBatching(new BatchingConfiguration().withLatencySeconds(1365275067).withMaxMessages(468391476));
        model = BinaryData.fromObject(model).toObject(DataflowEndpointFabricOneLake.class);
        Assertions.assertEquals(FabricOneLakeAuthMethod.SYSTEM_ASSIGNED_MANAGED_IDENTITY,
            model.authentication().method());
        Assertions.assertEquals("elsfeaen", model.authentication().systemAssignedManagedIdentitySettings().audience());
        Assertions.assertEquals("bfatklddxbjhwu",
            model.authentication().userAssignedManagedIdentitySettings().clientId());
        Assertions.assertEquals("nozj", model.authentication().userAssignedManagedIdentitySettings().scope());
        Assertions.assertEquals("sphyoulpjrvxa",
            model.authentication().userAssignedManagedIdentitySettings().tenantId());
        Assertions.assertEquals("l", model.names().lakehouseName());
        Assertions.assertEquals("vimjwos", model.names().workspaceName());
        Assertions.assertEquals(DataflowEndpointFabricPathType.FILES, model.oneLakePathType());
        Assertions.assertEquals("xitc", model.host());
        Assertions.assertEquals(1365275067, model.batching().latencySeconds());
        Assertions.assertEquals(468391476, model.batching().maxMessages());
    }
}
