// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.AcssBackupConnectionsClient;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.models.AcssBackupConnectionInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.AcssBackupConnection;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.AcssBackupConnections;

public final class AcssBackupConnectionsImpl implements AcssBackupConnections {
    private static final ClientLogger LOGGER = new ClientLogger(AcssBackupConnectionsImpl.class);

    private final AcssBackupConnectionsClient innerClient;

    private final com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager;

    public AcssBackupConnectionsImpl(
        AcssBackupConnectionsClient innerClient,
        com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AcssBackupConnection> getWithResponse(
        String resourceGroupName, String connectorName, String backupName, Context context) {
        Response<AcssBackupConnectionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, connectorName, backupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new AcssBackupConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AcssBackupConnection get(String resourceGroupName, String connectorName, String backupName) {
        AcssBackupConnectionInner inner = this.serviceClient().get(resourceGroupName, connectorName, backupName);
        if (inner != null) {
            return new AcssBackupConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String connectorName, String backupName) {
        this.serviceClient().delete(resourceGroupName, connectorName, backupName);
    }

    public void delete(String resourceGroupName, String connectorName, String backupName, Context context) {
        this.serviceClient().delete(resourceGroupName, connectorName, backupName, context);
    }

    public PagedIterable<AcssBackupConnection> list(String resourceGroupName, String connectorName) {
        PagedIterable<AcssBackupConnectionInner> inner = this.serviceClient().list(resourceGroupName, connectorName);
        return Utils.mapPage(inner, inner1 -> new AcssBackupConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<AcssBackupConnection> list(String resourceGroupName, String connectorName, Context context) {
        PagedIterable<AcssBackupConnectionInner> inner =
            this.serviceClient().list(resourceGroupName, connectorName, context);
        return Utils.mapPage(inner, inner1 -> new AcssBackupConnectionImpl(inner1, this.manager()));
    }

    public AcssBackupConnection getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectorName = Utils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        String backupName = Utils.getValueFromIdByName(id, "acssBackups");
        if (backupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'acssBackups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, connectorName, backupName, Context.NONE).getValue();
    }

    public Response<AcssBackupConnection> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectorName = Utils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        String backupName = Utils.getValueFromIdByName(id, "acssBackups");
        if (backupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'acssBackups'.", id)));
        }
        return this.getWithResponse(resourceGroupName, connectorName, backupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectorName = Utils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        String backupName = Utils.getValueFromIdByName(id, "acssBackups");
        if (backupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'acssBackups'.", id)));
        }
        this.delete(resourceGroupName, connectorName, backupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String connectorName = Utils.getValueFromIdByName(id, "connectors");
        if (connectorName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'connectors'.", id)));
        }
        String backupName = Utils.getValueFromIdByName(id, "acssBackups");
        if (backupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'acssBackups'.", id)));
        }
        this.delete(resourceGroupName, connectorName, backupName, context);
    }

    private AcssBackupConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager manager() {
        return this.serviceManager;
    }

    public AcssBackupConnectionImpl define(String name) {
        return new AcssBackupConnectionImpl(name, this.manager());
    }
}
