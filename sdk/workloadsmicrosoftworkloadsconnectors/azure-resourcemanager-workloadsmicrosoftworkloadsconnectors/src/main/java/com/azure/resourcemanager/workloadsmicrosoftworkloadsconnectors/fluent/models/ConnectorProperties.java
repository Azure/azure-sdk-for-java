// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ConnectorErrorDefinition;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ConnectorProvisioningState;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ManagedRGConfiguration;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Defines the connector resource properties. */
@Fluent
public final class ConnectorProperties {
    /*
     * Defines the ID of the connector's source resource.
     */
    @JsonProperty(value = "sourceResourceId", required = true)
    private String sourceResourceId;

    /*
     * Defines the provisioning states.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectorProvisioningState provisioningState;

    /*
     * Indicates any errors on the connector resource.
     */
    @JsonProperty(value = "errors", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectorErrorDefinition errors;

    /*
     * Managed resource group configuration
     */
    @JsonProperty(value = "managedResourceGroupConfiguration")
    private ManagedRGConfiguration managedResourceGroupConfiguration;

    /** Creates an instance of ConnectorProperties class. */
    public ConnectorProperties() {
    }

    /**
     * Get the sourceResourceId property: Defines the ID of the connector's source resource.
     *
     * @return the sourceResourceId value.
     */
    public String sourceResourceId() {
        return this.sourceResourceId;
    }

    /**
     * Set the sourceResourceId property: Defines the ID of the connector's source resource.
     *
     * @param sourceResourceId the sourceResourceId value to set.
     * @return the ConnectorProperties object itself.
     */
    public ConnectorProperties withSourceResourceId(String sourceResourceId) {
        this.sourceResourceId = sourceResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: Defines the provisioning states.
     *
     * @return the provisioningState value.
     */
    public ConnectorProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errors property: Indicates any errors on the connector resource.
     *
     * @return the errors value.
     */
    public ConnectorErrorDefinition errors() {
        return this.errors;
    }

    /**
     * Get the managedResourceGroupConfiguration property: Managed resource group configuration.
     *
     * @return the managedResourceGroupConfiguration value.
     */
    public ManagedRGConfiguration managedResourceGroupConfiguration() {
        return this.managedResourceGroupConfiguration;
    }

    /**
     * Set the managedResourceGroupConfiguration property: Managed resource group configuration.
     *
     * @param managedResourceGroupConfiguration the managedResourceGroupConfiguration value to set.
     * @return the ConnectorProperties object itself.
     */
    public ConnectorProperties withManagedResourceGroupConfiguration(
        ManagedRGConfiguration managedResourceGroupConfiguration) {
        this.managedResourceGroupConfiguration = managedResourceGroupConfiguration;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sourceResourceId() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property sourceResourceId in model ConnectorProperties"));
        }
        if (errors() != null) {
            errors().validate();
        }
        if (managedResourceGroupConfiguration() != null) {
            managedResourceGroupConfiguration().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ConnectorProperties.class);
}
