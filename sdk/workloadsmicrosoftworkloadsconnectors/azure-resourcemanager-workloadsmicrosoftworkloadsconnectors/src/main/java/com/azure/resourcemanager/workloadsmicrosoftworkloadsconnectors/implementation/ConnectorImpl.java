// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.models.ConnectorInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.Connector;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ConnectorErrorDefinition;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ConnectorProvisioningState;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ManagedRGConfiguration;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.UpdateConnectorRequest;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.UserAssignedServiceIdentity;
import java.util.Collections;
import java.util.Map;

public final class ConnectorImpl implements Connector, Connector.Definition, Connector.Update {
    private ConnectorInner innerObject;

    private final com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public UserAssignedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String sourceResourceId() {
        return this.innerModel().sourceResourceId();
    }

    public ConnectorProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ConnectorErrorDefinition errors() {
        return this.innerModel().errors();
    }

    public ManagedRGConfiguration managedResourceGroupConfiguration() {
        return this.innerModel().managedResourceGroupConfiguration();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ConnectorInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String connectorName;

    private UpdateConnectorRequest updateBody;

    public ConnectorImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Connector create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .create(resourceGroupName, connectorName, this.innerModel(), Context.NONE);
        return this;
    }

    public Connector create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .create(resourceGroupName, connectorName, this.innerModel(), context);
        return this;
    }

    ConnectorImpl(
        String name, com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager) {
        this.innerObject = new ConnectorInner();
        this.serviceManager = serviceManager;
        this.connectorName = name;
    }

    public ConnectorImpl update() {
        this.updateBody = new UpdateConnectorRequest();
        return this;
    }

    public Connector apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .updateWithResponse(resourceGroupName, connectorName, updateBody, Context.NONE)
                .getValue();
        return this;
    }

    public Connector apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .updateWithResponse(resourceGroupName, connectorName, updateBody, context)
                .getValue();
        return this;
    }

    ConnectorImpl(
        ConnectorInner innerObject,
        com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.connectorName = Utils.getValueFromIdByName(innerObject.id(), "connectors");
    }

    public Connector refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .getByResourceGroupWithResponse(resourceGroupName, connectorName, Context.NONE)
                .getValue();
        return this;
    }

    public Connector refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getConnectors()
                .getByResourceGroupWithResponse(resourceGroupName, connectorName, context)
                .getValue();
        return this;
    }

    public ConnectorImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ConnectorImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ConnectorImpl withSourceResourceId(String sourceResourceId) {
        this.innerModel().withSourceResourceId(sourceResourceId);
        return this;
    }

    public ConnectorImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public ConnectorImpl withIdentity(UserAssignedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateBody.withIdentity(identity);
            return this;
        }
    }

    public ConnectorImpl withManagedResourceGroupConfiguration(
        ManagedRGConfiguration managedResourceGroupConfiguration) {
        this.innerModel().withManagedResourceGroupConfiguration(managedResourceGroupConfiguration);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
