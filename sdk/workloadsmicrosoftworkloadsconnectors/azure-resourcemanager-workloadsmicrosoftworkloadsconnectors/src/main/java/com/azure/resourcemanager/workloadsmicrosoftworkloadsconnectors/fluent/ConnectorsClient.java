// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.models.ConnectorInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.UpdateConnectorRequest;

/** An instance of this class provides access to all the operations defined in ConnectorsClient. */
public interface ConnectorsClient {
    /**
     * Creates a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectorInner>, ConnectorInner> beginCreate(String resourceGroupName, String connectorName);

    /**
     * Creates a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param body Connector resource request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the connector resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ConnectorInner>, ConnectorInner> beginCreate(
        String resourceGroupName, String connectorName, ConnectorInner body, Context context);

    /**
     * Creates a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner create(String resourceGroupName, String connectorName);

    /**
     * Creates a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param body Connector resource request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner create(String resourceGroupName, String connectorName, ConnectorInner body, Context context);

    /**
     * Gets a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectorInner> getByResourceGroupWithResponse(
        String resourceGroupName, String connectorName, Context context);

    /**
     * Gets a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner getByResourceGroup(String resourceGroupName, String connectorName);

    /**
     * Updates a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param body Request body to update a connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the connector resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ConnectorInner> updateWithResponse(
        String resourceGroupName, String connectorName, UpdateConnectorRequest body, Context context);

    /**
     * Updates a connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the connector resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ConnectorInner update(String resourceGroupName, String connectorName);

    /**
     * Deletes a connector resource and its child resources, which are the associated connection resources. All the
     * child resources have to be deleted before deleting the connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String connectorName);

    /**
     * Deletes a connector resource and its child resources, which are the associated connection resources. All the
     * child resources have to be deleted before deleting the connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String connectorName, Context context);

    /**
     * Deletes a connector resource and its child resources, which are the associated connection resources. All the
     * child resources have to be deleted before deleting the connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String connectorName);

    /**
     * Deletes a connector resource and its child resources, which are the associated connection resources. All the
     * child resources have to be deleted before deleting the connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String connectorName, Context context);

    /**
     * Gets all connector resources in a Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all connector resources in a Resource Group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets all connector resources in a Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all connector resources in a Resource Group as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets all connector resources in a Subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all connector resources in a Subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorInner> list();

    /**
     * Gets all connector resources in a Subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all connector resources in a Subscription as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ConnectorInner> list(Context context);
}
