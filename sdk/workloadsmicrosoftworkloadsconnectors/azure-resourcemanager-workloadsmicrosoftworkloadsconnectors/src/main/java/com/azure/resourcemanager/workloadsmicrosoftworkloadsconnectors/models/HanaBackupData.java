// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** Defines the HANA Backup data for a virtual instance for SAP. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "backupType")
@JsonTypeName("HANA")
@Fluent
public final class HanaBackupData extends BackupData {
    /*
     * Path of the SSL key store.
     */
    @JsonProperty(value = "sslConfiguration")
    private SslConfiguration sslConfiguration;

    /*
     * Defines the policy properties for database backup.
     */
    @JsonProperty(value = "backupPolicy", required = true)
    private DBBackupPolicyProperties backupPolicy;

    /*
     * Name of the HANA Database User Store Key.
     */
    @JsonProperty(value = "hdbuserstoreKeyName", required = true)
    private String hdbuserstoreKeyName;

    /*
     * Gets or sets the database instance number.
     */
    @JsonProperty(value = "instanceNumber")
    private String instanceNumber;

    /*
     * Defines the policy properties for database backup.
     */
    @JsonProperty(value = "dbInstanceSnapshotBackupPolicy")
    private DBBackupPolicyProperties dbInstanceSnapshotBackupPolicy;

    /** Creates an instance of HanaBackupData class. */
    public HanaBackupData() {
    }

    /**
     * Get the sslConfiguration property: Path of the SSL key store.
     *
     * @return the sslConfiguration value.
     */
    public SslConfiguration sslConfiguration() {
        return this.sslConfiguration;
    }

    /**
     * Set the sslConfiguration property: Path of the SSL key store.
     *
     * @param sslConfiguration the sslConfiguration value to set.
     * @return the HanaBackupData object itself.
     */
    public HanaBackupData withSslConfiguration(SslConfiguration sslConfiguration) {
        this.sslConfiguration = sslConfiguration;
        return this;
    }

    /**
     * Get the backupPolicy property: Defines the policy properties for database backup.
     *
     * @return the backupPolicy value.
     */
    public DBBackupPolicyProperties backupPolicy() {
        return this.backupPolicy;
    }

    /**
     * Set the backupPolicy property: Defines the policy properties for database backup.
     *
     * @param backupPolicy the backupPolicy value to set.
     * @return the HanaBackupData object itself.
     */
    public HanaBackupData withBackupPolicy(DBBackupPolicyProperties backupPolicy) {
        this.backupPolicy = backupPolicy;
        return this;
    }

    /**
     * Get the hdbuserstoreKeyName property: Name of the HANA Database User Store Key.
     *
     * @return the hdbuserstoreKeyName value.
     */
    public String hdbuserstoreKeyName() {
        return this.hdbuserstoreKeyName;
    }

    /**
     * Set the hdbuserstoreKeyName property: Name of the HANA Database User Store Key.
     *
     * @param hdbuserstoreKeyName the hdbuserstoreKeyName value to set.
     * @return the HanaBackupData object itself.
     */
    public HanaBackupData withHdbuserstoreKeyName(String hdbuserstoreKeyName) {
        this.hdbuserstoreKeyName = hdbuserstoreKeyName;
        return this;
    }

    /**
     * Get the instanceNumber property: Gets or sets the database instance number.
     *
     * @return the instanceNumber value.
     */
    public String instanceNumber() {
        return this.instanceNumber;
    }

    /**
     * Set the instanceNumber property: Gets or sets the database instance number.
     *
     * @param instanceNumber the instanceNumber value to set.
     * @return the HanaBackupData object itself.
     */
    public HanaBackupData withInstanceNumber(String instanceNumber) {
        this.instanceNumber = instanceNumber;
        return this;
    }

    /**
     * Get the dbInstanceSnapshotBackupPolicy property: Defines the policy properties for database backup.
     *
     * @return the dbInstanceSnapshotBackupPolicy value.
     */
    public DBBackupPolicyProperties dbInstanceSnapshotBackupPolicy() {
        return this.dbInstanceSnapshotBackupPolicy;
    }

    /**
     * Set the dbInstanceSnapshotBackupPolicy property: Defines the policy properties for database backup.
     *
     * @param dbInstanceSnapshotBackupPolicy the dbInstanceSnapshotBackupPolicy value to set.
     * @return the HanaBackupData object itself.
     */
    public HanaBackupData withDbInstanceSnapshotBackupPolicy(DBBackupPolicyProperties dbInstanceSnapshotBackupPolicy) {
        this.dbInstanceSnapshotBackupPolicy = dbInstanceSnapshotBackupPolicy;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public HanaBackupData withRecoveryServicesVault(RecoveryServicesVaultProperties recoveryServicesVault) {
        super.withRecoveryServicesVault(recoveryServicesVault);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (sslConfiguration() != null) {
            sslConfiguration().validate();
        }
        if (backupPolicy() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property backupPolicy in model HanaBackupData"));
        } else {
            backupPolicy().validate();
        }
        if (hdbuserstoreKeyName() == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        "Missing required property hdbuserstoreKeyName in model HanaBackupData"));
        }
        if (dbInstanceSnapshotBackupPolicy() != null) {
            dbInstanceSnapshotBackupPolicy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HanaBackupData.class);
}
