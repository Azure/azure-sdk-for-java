// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Specify the HANA database TLS/SSL properties which will be used for enabling Azure Backup for this database. You need
 * to specify these details if you have enabled secure communication for your HANA database.
 */
@Fluent
public final class SslConfiguration {
    /*
     * Specify the name of the keystore file that contains the client's identity (eg. sapsrv.pse). The script will
     * search for the file in the appropriate directory depending on the crypto provider mentioned. If this argument is
     * not provided, it is automatically determined by searching in the configuration files.
     */
    @JsonProperty(value = "sslKeyStore")
    private String sslKeyStore;

    /*
     * Specify the name of the trust store file that contains the server’s public certificates (eg. sapsrv.pse). The
     * script will search for the file in the appropriate directory depending on the crypto provider mentioned. If this
     * argument is not provided, it is automatically determined by searching in the configuration files.
     */
    @JsonProperty(value = "sslTrustStore")
    private String sslTrustStore;

    /*
     * Specify the hostname as mentioned in the SSL certificate. If this argument is not provided, it is automatically
     * determined by searching in the SSL certificate.
     */
    @JsonProperty(value = "sslHostNameInCertificate")
    private String sslHostnameInCertificate;

    /*
     * Specify the crypto provider being used (commoncrypto/openssl). If this argument is not provided, it is
     * automatically determined by searching in the configuration files.
     */
    @JsonProperty(value = "sslCryptoProvider")
    private SslCryptoProvider sslCryptoProvider;

    /** Creates an instance of SslConfiguration class. */
    public SslConfiguration() {
    }

    /**
     * Get the sslKeyStore property: Specify the name of the keystore file that contains the client's identity (eg.
     * sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider
     * mentioned. If this argument is not provided, it is automatically determined by searching in the configuration
     * files.
     *
     * @return the sslKeyStore value.
     */
    public String sslKeyStore() {
        return this.sslKeyStore;
    }

    /**
     * Set the sslKeyStore property: Specify the name of the keystore file that contains the client's identity (eg.
     * sapsrv.pse). The script will search for the file in the appropriate directory depending on the crypto provider
     * mentioned. If this argument is not provided, it is automatically determined by searching in the configuration
     * files.
     *
     * @param sslKeyStore the sslKeyStore value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withSslKeyStore(String sslKeyStore) {
        this.sslKeyStore = sslKeyStore;
        return this;
    }

    /**
     * Get the sslTrustStore property: Specify the name of the trust store file that contains the server’s public
     * certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the
     * crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the
     * configuration files.
     *
     * @return the sslTrustStore value.
     */
    public String sslTrustStore() {
        return this.sslTrustStore;
    }

    /**
     * Set the sslTrustStore property: Specify the name of the trust store file that contains the server’s public
     * certificates (eg. sapsrv.pse). The script will search for the file in the appropriate directory depending on the
     * crypto provider mentioned. If this argument is not provided, it is automatically determined by searching in the
     * configuration files.
     *
     * @param sslTrustStore the sslTrustStore value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withSslTrustStore(String sslTrustStore) {
        this.sslTrustStore = sslTrustStore;
        return this;
    }

    /**
     * Get the sslHostnameInCertificate property: Specify the hostname as mentioned in the SSL certificate. If this
     * argument is not provided, it is automatically determined by searching in the SSL certificate.
     *
     * @return the sslHostnameInCertificate value.
     */
    public String sslHostnameInCertificate() {
        return this.sslHostnameInCertificate;
    }

    /**
     * Set the sslHostnameInCertificate property: Specify the hostname as mentioned in the SSL certificate. If this
     * argument is not provided, it is automatically determined by searching in the SSL certificate.
     *
     * @param sslHostnameInCertificate the sslHostnameInCertificate value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withSslHostnameInCertificate(String sslHostnameInCertificate) {
        this.sslHostnameInCertificate = sslHostnameInCertificate;
        return this;
    }

    /**
     * Get the sslCryptoProvider property: Specify the crypto provider being used (commoncrypto/openssl). If this
     * argument is not provided, it is automatically determined by searching in the configuration files.
     *
     * @return the sslCryptoProvider value.
     */
    public SslCryptoProvider sslCryptoProvider() {
        return this.sslCryptoProvider;
    }

    /**
     * Set the sslCryptoProvider property: Specify the crypto provider being used (commoncrypto/openssl). If this
     * argument is not provided, it is automatically determined by searching in the configuration files.
     *
     * @param sslCryptoProvider the sslCryptoProvider value to set.
     * @return the SslConfiguration object itself.
     */
    public SslConfiguration withSslCryptoProvider(SslCryptoProvider sslCryptoProvider) {
        this.sslCryptoProvider = sslCryptoProvider;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
