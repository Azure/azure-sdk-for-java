// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.AcssBackupConnectionsClient;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.models.AcssBackupConnectionInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.AcssBackupConnectionList;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.UpdateAcssBackupConnectionRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in AcssBackupConnectionsClient. */
public final class AcssBackupConnectionsClientImpl implements AcssBackupConnectionsClient {
    /** The proxy service used to perform REST calls. */
    private final AcssBackupConnectionsService service;

    /** The service client containing this operation class. */
    private final WorkloadsClientImpl client;

    /**
     * Initializes an instance of AcssBackupConnectionsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    AcssBackupConnectionsClientImpl(WorkloadsClientImpl client) {
        this.service =
            RestProxy
                .create(AcssBackupConnectionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadsClientAcssBackupConnections to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "WorkloadsClientAcssB")
    public interface AcssBackupConnectionsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AcssBackupConnectionInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectorName") String connectorName,
            @PathParam("backupName") String backupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectorName") String connectorName,
            @PathParam("backupName") String backupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") AcssBackupConnectionInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectorName") String connectorName,
            @PathParam("backupName") String backupName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") UpdateAcssBackupConnectionRequest body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups/{backupName}")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectorName") String connectorName,
            @PathParam("backupName") String backupName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Workloads/connectors/{connectorName}/acssBackups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AcssBackupConnectionList>> list(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("connectorName") String connectorName,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<AcssBackupConnectionList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Gets the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup connection resource of virtual instance for SAP along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AcssBackupConnectionInner>> getWithResponseAsync(
        String resourceGroupName, String connectorName, String backupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            connectorName,
                            backupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup connection resource of virtual instance for SAP along with {@link Response} on successful
     *     completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<AcssBackupConnectionInner>> getWithResponseAsync(
        String resourceGroupName, String connectorName, String backupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                connectorName,
                backupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Gets the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup connection resource of virtual instance for SAP on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> getAsync(
        String resourceGroupName, String connectorName, String backupName) {
        return getWithResponseAsync(resourceGroupName, connectorName, backupName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup connection resource of virtual instance for SAP along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AcssBackupConnectionInner> getWithResponse(
        String resourceGroupName, String connectorName, String backupName, Context context) {
        return getWithResponseAsync(resourceGroupName, connectorName, backupName, context).block();
    }

    /**
     * Gets the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcssBackupConnectionInner get(String resourceGroupName, String connectorName, String backupName) {
        return getWithResponse(resourceGroupName, connectorName, backupName, Context.NONE).getValue();
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName, String connectorName, String backupName, AcssBackupConnectionInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            connectorName,
                            backupName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String connectorName,
        String backupName,
        AcssBackupConnectionInner body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                connectorName,
                backupName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginCreateAsync(
        String resourceGroupName, String connectorName, String backupName, AcssBackupConnectionInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, connectorName, backupName, body);
        return this
            .client
            .<AcssBackupConnectionInner, AcssBackupConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AcssBackupConnectionInner.class,
                AcssBackupConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginCreateAsync(
        String resourceGroupName, String connectorName, String backupName) {
        final AcssBackupConnectionInner body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, connectorName, backupName, body);
        return this
            .client
            .<AcssBackupConnectionInner, AcssBackupConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AcssBackupConnectionInner.class,
                AcssBackupConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginCreateAsync(
        String resourceGroupName,
        String connectorName,
        String backupName,
        AcssBackupConnectionInner body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(resourceGroupName, connectorName, backupName, body, context);
        return this
            .client
            .<AcssBackupConnectionInner, AcssBackupConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AcssBackupConnectionInner.class,
                AcssBackupConnectionInner.class,
                context);
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginCreate(
        String resourceGroupName, String connectorName, String backupName) {
        final AcssBackupConnectionInner body = null;
        return this.beginCreateAsync(resourceGroupName, connectorName, backupName, body).getSyncPoller();
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginCreate(
        String resourceGroupName,
        String connectorName,
        String backupName,
        AcssBackupConnectionInner body,
        Context context) {
        return this.beginCreateAsync(resourceGroupName, connectorName, backupName, body, context).getSyncPoller();
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> createAsync(
        String resourceGroupName, String connectorName, String backupName, AcssBackupConnectionInner body) {
        return beginCreateAsync(resourceGroupName, connectorName, backupName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> createAsync(
        String resourceGroupName, String connectorName, String backupName) {
        final AcssBackupConnectionInner body = null;
        return beginCreateAsync(resourceGroupName, connectorName, backupName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> createAsync(
        String resourceGroupName,
        String connectorName,
        String backupName,
        AcssBackupConnectionInner body,
        Context context) {
        return beginCreateAsync(resourceGroupName, connectorName, backupName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcssBackupConnectionInner create(String resourceGroupName, String connectorName, String backupName) {
        final AcssBackupConnectionInner body = null;
        return createAsync(resourceGroupName, connectorName, backupName, body).block();
    }

    /**
     * Creates the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcssBackupConnectionInner create(
        String resourceGroupName,
        String connectorName,
        String backupName,
        AcssBackupConnectionInner body,
        Context context) {
        return createAsync(resourceGroupName, connectorName, backupName, body, context).block();
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName, String connectorName, String backupName, UpdateAcssBackupConnectionRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            connectorName,
                            backupName,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. along with {@link Response} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String connectorName,
        String backupName,
        UpdateAcssBackupConnectionRequest body,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                connectorName,
                backupName,
                this.client.getApiVersion(),
                body,
                accept,
                context);
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginUpdateAsync(
        String resourceGroupName, String connectorName, String backupName, UpdateAcssBackupConnectionRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, connectorName, backupName, body);
        return this
            .client
            .<AcssBackupConnectionInner, AcssBackupConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AcssBackupConnectionInner.class,
                AcssBackupConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginUpdateAsync(
        String resourceGroupName, String connectorName, String backupName) {
        final UpdateAcssBackupConnectionRequest body = null;
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, connectorName, backupName, body);
        return this
            .client
            .<AcssBackupConnectionInner, AcssBackupConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AcssBackupConnectionInner.class,
                AcssBackupConnectionInner.class,
                this.client.getContext());
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginUpdateAsync(
        String resourceGroupName,
        String connectorName,
        String backupName,
        UpdateAcssBackupConnectionRequest body,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(resourceGroupName, connectorName, backupName, body, context);
        return this
            .client
            .<AcssBackupConnectionInner, AcssBackupConnectionInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                AcssBackupConnectionInner.class,
                AcssBackupConnectionInner.class,
                context);
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginUpdate(
        String resourceGroupName, String connectorName, String backupName) {
        final UpdateAcssBackupConnectionRequest body = null;
        return this.beginUpdateAsync(resourceGroupName, connectorName, backupName, body).getSyncPoller();
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<AcssBackupConnectionInner>, AcssBackupConnectionInner> beginUpdate(
        String resourceGroupName,
        String connectorName,
        String backupName,
        UpdateAcssBackupConnectionRequest body,
        Context context) {
        return this.beginUpdateAsync(resourceGroupName, connectorName, backupName, body, context).getSyncPoller();
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> updateAsync(
        String resourceGroupName, String connectorName, String backupName, UpdateAcssBackupConnectionRequest body) {
        return beginUpdateAsync(resourceGroupName, connectorName, backupName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> updateAsync(
        String resourceGroupName, String connectorName, String backupName) {
        final UpdateAcssBackupConnectionRequest body = null;
        return beginUpdateAsync(resourceGroupName, connectorName, backupName, body)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP. on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<AcssBackupConnectionInner> updateAsync(
        String resourceGroupName,
        String connectorName,
        String backupName,
        UpdateAcssBackupConnectionRequest body,
        Context context) {
        return beginUpdateAsync(resourceGroupName, connectorName, backupName, body, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcssBackupConnectionInner update(String resourceGroupName, String connectorName, String backupName) {
        final UpdateAcssBackupConnectionRequest body = null;
        return updateAsync(resourceGroupName, connectorName, backupName, body).block();
    }

    /**
     * Updates the backup connection resource of virtual instance for SAP. &lt;br&gt;&lt;br&gt;This can be used to
     * update tags on the resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param body The request body of backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the backup connection resource of virtual instance for SAP.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcssBackupConnectionInner update(
        String resourceGroupName,
        String connectorName,
        String backupName,
        UpdateAcssBackupConnectionRequest body,
        Context context) {
        return updateAsync(resourceGroupName, connectorName, backupName, body, context).block();
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String connectorName, String backupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            connectorName,
                            backupName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String connectorName, String backupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        if (backupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter backupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                connectorName,
                backupName,
                this.client.getApiVersion(),
                accept,
                context);
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String connectorName, String backupName) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceGroupName, connectorName, backupName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String connectorName, String backupName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, connectorName, backupName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String connectorName, String backupName) {
        return this.beginDeleteAsync(resourceGroupName, connectorName, backupName).getSyncPoller();
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String connectorName, String backupName, Context context) {
        return this.beginDeleteAsync(resourceGroupName, connectorName, backupName, context).getSyncPoller();
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String connectorName, String backupName) {
        return beginDeleteAsync(resourceGroupName, connectorName, backupName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String connectorName, String backupName, Context context) {
        return beginDeleteAsync(resourceGroupName, connectorName, backupName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String connectorName, String backupName) {
        deleteAsync(resourceGroupName, connectorName, backupName).block();
    }

    /**
     * Deletes the backup connection resource of virtual instance for SAP.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param backupName The name of the backup connection resource of virtual instance for SAP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String connectorName, String backupName, Context context) {
        deleteAsync(resourceGroupName, connectorName, backupName, context).block();
    }

    /**
     * Lists the backup connection resources of virtual instance for SAP under the given connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AcssBackupConnectionInner>> listSinglePageAsync(
        String resourceGroupName, String connectorName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            connectorName,
                            this.client.getApiVersion(),
                            accept,
                            context))
            .<PagedResponse<AcssBackupConnectionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Lists the backup connection resources of virtual instance for SAP under the given connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AcssBackupConnectionInner>> listSinglePageAsync(
        String resourceGroupName, String connectorName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (connectorName == null) {
            return Mono.error(new IllegalArgumentException("Parameter connectorName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                connectorName,
                this.client.getApiVersion(),
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Lists the backup connection resources of virtual instance for SAP under the given connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP as paginated response
     *     with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AcssBackupConnectionInner> listAsync(String resourceGroupName, String connectorName) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, connectorName), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Lists the backup connection resources of virtual instance for SAP under the given connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP as paginated response
     *     with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<AcssBackupConnectionInner> listAsync(
        String resourceGroupName, String connectorName, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceGroupName, connectorName, context),
            nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Lists the backup connection resources of virtual instance for SAP under the given connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP as paginated response
     *     with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AcssBackupConnectionInner> list(String resourceGroupName, String connectorName) {
        return new PagedIterable<>(listAsync(resourceGroupName, connectorName));
    }

    /**
     * Lists the backup connection resources of virtual instance for SAP under the given connector resource.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param connectorName The name of the connector resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP as paginated response
     *     with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<AcssBackupConnectionInner> list(
        String resourceGroupName, String connectorName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, connectorName, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AcssBackupConnectionInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<AcssBackupConnectionInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the collection of backup connection resources of virtual instances for SAP along with {@link
     *     PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<AcssBackupConnectionInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
