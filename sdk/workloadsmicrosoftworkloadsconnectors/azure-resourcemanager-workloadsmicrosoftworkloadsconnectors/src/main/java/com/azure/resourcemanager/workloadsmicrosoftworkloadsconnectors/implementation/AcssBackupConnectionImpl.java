// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.fluent.models.AcssBackupConnectionInner;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.AcssBackupConnection;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.BackupData;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ConnectorErrorDefinition;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.ConnectorProvisioningState;
import com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.models.UpdateAcssBackupConnectionRequest;
import java.util.Collections;
import java.util.Map;

public final class AcssBackupConnectionImpl
    implements AcssBackupConnection, AcssBackupConnection.Definition, AcssBackupConnection.Update {
    private AcssBackupConnectionInner innerObject;

    private final com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public BackupData backupData() {
        return this.innerModel().backupData();
    }

    public ConnectorProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public ConnectorErrorDefinition errors() {
        return this.innerModel().errors();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public AcssBackupConnectionInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String connectorName;

    private String backupName;

    private UpdateAcssBackupConnectionRequest updateBody;

    public AcssBackupConnectionImpl withExistingConnector(String resourceGroupName, String connectorName) {
        this.resourceGroupName = resourceGroupName;
        this.connectorName = connectorName;
        return this;
    }

    public AcssBackupConnection create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAcssBackupConnections()
                .create(resourceGroupName, connectorName, backupName, this.innerModel(), Context.NONE);
        return this;
    }

    public AcssBackupConnection create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAcssBackupConnections()
                .create(resourceGroupName, connectorName, backupName, this.innerModel(), context);
        return this;
    }

    AcssBackupConnectionImpl(
        String name, com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager) {
        this.innerObject = new AcssBackupConnectionInner();
        this.serviceManager = serviceManager;
        this.backupName = name;
    }

    public AcssBackupConnectionImpl update() {
        this.updateBody = new UpdateAcssBackupConnectionRequest();
        return this;
    }

    public AcssBackupConnection apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAcssBackupConnections()
                .update(resourceGroupName, connectorName, backupName, updateBody, Context.NONE);
        return this;
    }

    public AcssBackupConnection apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAcssBackupConnections()
                .update(resourceGroupName, connectorName, backupName, updateBody, context);
        return this;
    }

    AcssBackupConnectionImpl(
        AcssBackupConnectionInner innerObject,
        com.azure.resourcemanager.workloadsmicrosoftworkloadsconnectors.WorkloadsManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.connectorName = Utils.getValueFromIdByName(innerObject.id(), "connectors");
        this.backupName = Utils.getValueFromIdByName(innerObject.id(), "acssBackups");
    }

    public AcssBackupConnection refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAcssBackupConnections()
                .getWithResponse(resourceGroupName, connectorName, backupName, Context.NONE)
                .getValue();
        return this;
    }

    public AcssBackupConnection refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAcssBackupConnections()
                .getWithResponse(resourceGroupName, connectorName, backupName, context)
                .getValue();
        return this;
    }

    public AcssBackupConnectionImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AcssBackupConnectionImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AcssBackupConnectionImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateBody.withTags(tags);
            return this;
        }
    }

    public AcssBackupConnectionImpl withBackupData(BackupData backupData) {
        this.innerModel().withBackupData(backupData);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
