// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sitemanager.generated;

import com.azure.resourcemanager.sitemanager.models.SiteAddressProperties;
import com.azure.resourcemanager.sitemanager.models.SiteProperties;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Sites CreateOrUpdate.
 */
public final class SitesCreateOrUpdateSamples {
    /*
     * x-ms-original-file: 2025-06-01/Sites_CreateOrUpdate_MaximumSet_Gen.json
     */
    /**
     * Sample code: Create or update Site - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to SiteManagerManager.
     */
    public static void
        createOrUpdateSiteGeneratedByMaximumSetRule(com.azure.resourcemanager.sitemanager.SiteManagerManager manager) {
        manager.sites()
            .define("string")
            .withExistingResourceGroup("rgsites")
            .withProperties(new SiteProperties().withDisplayName("string")
                .withDescription("enxcmpvfvadbapo")
                .withSiteAddress(new SiteAddressProperties().withStreetAddress1("fodimymrxbhrfslsmzfhmitn")
                    .withStreetAddress2("widjg")
                    .withCity("zkcbzjkatafo")
                    .withStateOrProvince("wk")
                    .withCountry("xeevcfvimlfzsfuxtyujw")
                    .withPostalCode("fakeTokenPlaceholder"))
                .withLabels(mapOf("key8188", "fakeTokenPlaceholder")))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
