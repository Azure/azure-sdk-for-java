// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sitemanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Site properties.
 */
@Fluent
public final class SiteProperties implements JsonSerializable<SiteProperties> {
    /*
     * displayName of Site resource
     */
    private String displayName;

    /*
     * Description of Site resource
     */
    private String description;

    /*
     * Physical address of the site
     */
    private SiteAddressProperties siteAddress;

    /*
     * Key-value pairs for labeling the site resource.
     */
    private Map<String, String> labels;

    /*
     * Provisioning state of last operation
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of SiteProperties class.
     */
    public SiteProperties() {
    }

    /**
     * Get the displayName property: displayName of Site resource.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: displayName of Site resource.
     * 
     * @param displayName the displayName value to set.
     * @return the SiteProperties object itself.
     */
    public SiteProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the description property: Description of Site resource.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of Site resource.
     * 
     * @param description the description value to set.
     * @return the SiteProperties object itself.
     */
    public SiteProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the siteAddress property: Physical address of the site.
     * 
     * @return the siteAddress value.
     */
    public SiteAddressProperties siteAddress() {
        return this.siteAddress;
    }

    /**
     * Set the siteAddress property: Physical address of the site.
     * 
     * @param siteAddress the siteAddress value to set.
     * @return the SiteProperties object itself.
     */
    public SiteProperties withSiteAddress(SiteAddressProperties siteAddress) {
        this.siteAddress = siteAddress;
        return this;
    }

    /**
     * Get the labels property: Key-value pairs for labeling the site resource.
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Key-value pairs for labeling the site resource.
     * 
     * @param labels the labels value to set.
     * @return the SiteProperties object itself.
     */
    public SiteProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of last operation.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeJsonField("siteAddress", this.siteAddress);
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SiteProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SiteProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SiteProperties.
     */
    public static SiteProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SiteProperties deserializedSiteProperties = new SiteProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedSiteProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedSiteProperties.description = reader.getString();
                } else if ("siteAddress".equals(fieldName)) {
                    deserializedSiteProperties.siteAddress = SiteAddressProperties.fromJson(reader);
                } else if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedSiteProperties.labels = labels;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSiteProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSiteProperties;
        });
    }
}
