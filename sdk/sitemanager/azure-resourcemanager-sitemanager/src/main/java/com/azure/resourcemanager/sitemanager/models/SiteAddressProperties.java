// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sitemanager.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Site address properties.
 */
@Fluent
public final class SiteAddressProperties implements JsonSerializable<SiteAddressProperties> {
    /*
     * First line of the street address
     */
    private String streetAddress1;

    /*
     * Second line of the street address
     */
    private String streetAddress2;

    /*
     * City of the address
     */
    private String city;

    /*
     * State or province of the address
     */
    private String stateOrProvince;

    /*
     * Country of the address
     */
    private String country;

    /*
     * Postal or ZIP code of the address
     */
    private String postalCode;

    /**
     * Creates an instance of SiteAddressProperties class.
     */
    public SiteAddressProperties() {
    }

    /**
     * Get the streetAddress1 property: First line of the street address.
     * 
     * @return the streetAddress1 value.
     */
    public String streetAddress1() {
        return this.streetAddress1;
    }

    /**
     * Set the streetAddress1 property: First line of the street address.
     * 
     * @param streetAddress1 the streetAddress1 value to set.
     * @return the SiteAddressProperties object itself.
     */
    public SiteAddressProperties withStreetAddress1(String streetAddress1) {
        this.streetAddress1 = streetAddress1;
        return this;
    }

    /**
     * Get the streetAddress2 property: Second line of the street address.
     * 
     * @return the streetAddress2 value.
     */
    public String streetAddress2() {
        return this.streetAddress2;
    }

    /**
     * Set the streetAddress2 property: Second line of the street address.
     * 
     * @param streetAddress2 the streetAddress2 value to set.
     * @return the SiteAddressProperties object itself.
     */
    public SiteAddressProperties withStreetAddress2(String streetAddress2) {
        this.streetAddress2 = streetAddress2;
        return this;
    }

    /**
     * Get the city property: City of the address.
     * 
     * @return the city value.
     */
    public String city() {
        return this.city;
    }

    /**
     * Set the city property: City of the address.
     * 
     * @param city the city value to set.
     * @return the SiteAddressProperties object itself.
     */
    public SiteAddressProperties withCity(String city) {
        this.city = city;
        return this;
    }

    /**
     * Get the stateOrProvince property: State or province of the address.
     * 
     * @return the stateOrProvince value.
     */
    public String stateOrProvince() {
        return this.stateOrProvince;
    }

    /**
     * Set the stateOrProvince property: State or province of the address.
     * 
     * @param stateOrProvince the stateOrProvince value to set.
     * @return the SiteAddressProperties object itself.
     */
    public SiteAddressProperties withStateOrProvince(String stateOrProvince) {
        this.stateOrProvince = stateOrProvince;
        return this;
    }

    /**
     * Get the country property: Country of the address.
     * 
     * @return the country value.
     */
    public String country() {
        return this.country;
    }

    /**
     * Set the country property: Country of the address.
     * 
     * @param country the country value to set.
     * @return the SiteAddressProperties object itself.
     */
    public SiteAddressProperties withCountry(String country) {
        this.country = country;
        return this;
    }

    /**
     * Get the postalCode property: Postal or ZIP code of the address.
     * 
     * @return the postalCode value.
     */
    public String postalCode() {
        return this.postalCode;
    }

    /**
     * Set the postalCode property: Postal or ZIP code of the address.
     * 
     * @param postalCode the postalCode value to set.
     * @return the SiteAddressProperties object itself.
     */
    public SiteAddressProperties withPostalCode(String postalCode) {
        this.postalCode = postalCode;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("streetAddress1", this.streetAddress1);
        jsonWriter.writeStringField("streetAddress2", this.streetAddress2);
        jsonWriter.writeStringField("city", this.city);
        jsonWriter.writeStringField("stateOrProvince", this.stateOrProvince);
        jsonWriter.writeStringField("country", this.country);
        jsonWriter.writeStringField("postalCode", this.postalCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SiteAddressProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SiteAddressProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SiteAddressProperties.
     */
    public static SiteAddressProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SiteAddressProperties deserializedSiteAddressProperties = new SiteAddressProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("streetAddress1".equals(fieldName)) {
                    deserializedSiteAddressProperties.streetAddress1 = reader.getString();
                } else if ("streetAddress2".equals(fieldName)) {
                    deserializedSiteAddressProperties.streetAddress2 = reader.getString();
                } else if ("city".equals(fieldName)) {
                    deserializedSiteAddressProperties.city = reader.getString();
                } else if ("stateOrProvince".equals(fieldName)) {
                    deserializedSiteAddressProperties.stateOrProvince = reader.getString();
                } else if ("country".equals(fieldName)) {
                    deserializedSiteAddressProperties.country = reader.getString();
                } else if ("postalCode".equals(fieldName)) {
                    deserializedSiteAddressProperties.postalCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSiteAddressProperties;
        });
    }
}
