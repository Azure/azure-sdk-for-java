// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.sitemanager.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.sitemanager.fluent.SitesByServiceGroupsClient;
import com.azure.resourcemanager.sitemanager.fluent.models.SiteInner;
import com.azure.resourcemanager.sitemanager.models.Site;
import com.azure.resourcemanager.sitemanager.models.SiteUpdate;
import com.azure.resourcemanager.sitemanager.models.SitesByServiceGroups;

public final class SitesByServiceGroupsImpl implements SitesByServiceGroups {
    private static final ClientLogger LOGGER = new ClientLogger(SitesByServiceGroupsImpl.class);

    private final SitesByServiceGroupsClient innerClient;

    private final com.azure.resourcemanager.sitemanager.SiteManagerManager serviceManager;

    public SitesByServiceGroupsImpl(SitesByServiceGroupsClient innerClient,
        com.azure.resourcemanager.sitemanager.SiteManagerManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Site> listByServiceGroup(String servicegroupName) {
        PagedIterable<SiteInner> inner = this.serviceClient().listByServiceGroup(servicegroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public PagedIterable<Site> listByServiceGroup(String servicegroupName, Context context) {
        PagedIterable<SiteInner> inner = this.serviceClient().listByServiceGroup(servicegroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SiteImpl(inner1, this.manager()));
    }

    public Response<Site> getWithResponse(String servicegroupName, String siteName, Context context) {
        Response<SiteInner> inner = this.serviceClient().getWithResponse(servicegroupName, siteName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site get(String servicegroupName, String siteName) {
        SiteInner inner = this.serviceClient().get(servicegroupName, siteName);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site createOrUpdate(String servicegroupName, String siteName, SiteInner resource) {
        SiteInner inner = this.serviceClient().createOrUpdate(servicegroupName, siteName, resource);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Site createOrUpdate(String servicegroupName, String siteName, SiteInner resource, Context context) {
        SiteInner inner = this.serviceClient().createOrUpdate(servicegroupName, siteName, resource, context);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Site> updateWithResponse(String servicegroupName, String siteName, SiteUpdate properties,
        Context context) {
        Response<SiteInner> inner
            = this.serviceClient().updateWithResponse(servicegroupName, siteName, properties, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SiteImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Site update(String servicegroupName, String siteName, SiteUpdate properties) {
        SiteInner inner = this.serviceClient().update(servicegroupName, siteName, properties);
        if (inner != null) {
            return new SiteImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String servicegroupName, String siteName, Context context) {
        return this.serviceClient().deleteWithResponse(servicegroupName, siteName, context);
    }

    public void deleteByResourceGroup(String servicegroupName, String siteName) {
        this.serviceClient().delete(servicegroupName, siteName);
    }

    private SitesByServiceGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.sitemanager.SiteManagerManager manager() {
        return this.serviceManager;
    }
}
