// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Video group detail.
 */
@Fluent
public final class VideoGroup implements JsonSerializable<VideoGroup> {
    /*
     * List of videos will be shown to customers
     */
    private List<VideoGroupVideo> videos;

    /*
     * Place holder used in HTML Content replace control with the insight content
     */
    private String replacementKey;

    /**
     * Creates an instance of VideoGroup class.
     */
    public VideoGroup() {
    }

    /**
     * Get the videos property: List of videos will be shown to customers.
     * 
     * @return the videos value.
     */
    public List<VideoGroupVideo> videos() {
        return this.videos;
    }

    /**
     * Set the videos property: List of videos will be shown to customers.
     * 
     * @param videos the videos value to set.
     * @return the VideoGroup object itself.
     */
    public VideoGroup withVideos(List<VideoGroupVideo> videos) {
        this.videos = videos;
        return this;
    }

    /**
     * Get the replacementKey property: Place holder used in HTML Content replace control with the insight content.
     * 
     * @return the replacementKey value.
     */
    public String replacementKey() {
        return this.replacementKey;
    }

    /**
     * Set the replacementKey property: Place holder used in HTML Content replace control with the insight content.
     * 
     * @param replacementKey the replacementKey value to set.
     * @return the VideoGroup object itself.
     */
    public VideoGroup withReplacementKey(String replacementKey) {
        this.replacementKey = replacementKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (videos() != null) {
            videos().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("videos", this.videos, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("replacementKey", this.replacementKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VideoGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VideoGroup if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the VideoGroup.
     */
    public static VideoGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VideoGroup deserializedVideoGroup = new VideoGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("videos".equals(fieldName)) {
                    List<VideoGroupVideo> videos = reader.readArray(reader1 -> VideoGroupVideo.fromJson(reader1));
                    deserializedVideoGroup.videos = videos;
                } else if ("replacementKey".equals(fieldName)) {
                    deserializedVideoGroup.replacementKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVideoGroup;
        });
    }
}
