// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.exception.ManagementError;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Troubleshooter step.
 */
@Fluent
public final class Step implements JsonSerializable<Step> {
    /*
     * Unique step id.
     */
    private String id;

    /*
     * Step title.
     */
    private String title;

    /*
     * Step description.
     */
    private String description;

    /*
     * Get or sets the Step guidance.
     */
    private String guidance;

    /*
     * Status of Troubleshooter Step execution.
     */
    private ExecutionStatus executionStatus;

    /*
     * This field has more detailed status description of the execution status.
     */
    private String executionStatusDescription;

    /*
     * Type of Troubleshooting step.
     */
    private Type type;

    /*
     * is this last step of the workflow.
     */
    private Boolean isLastStep;

    /*
     * The inputs property.
     */
    private List<StepInput> inputs;

    /*
     * Only for AutomatedStep type
     */
    private AutomatedCheckResult automatedCheckResults;

    /*
     * The insights property.
     */
    private List<Insight> insights;

    /*
     * The error detail.
     */
    private ManagementError error;

    /**
     * Creates an instance of Step class.
     */
    public Step() {
    }

    /**
     * Get the id property: Unique step id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Unique step id.
     * 
     * @param id the id value to set.
     * @return the Step object itself.
     */
    public Step withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the title property: Step title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Step title.
     * 
     * @param title the title value to set.
     * @return the Step object itself.
     */
    public Step withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the description property: Step description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Step description.
     * 
     * @param description the description value to set.
     * @return the Step object itself.
     */
    public Step withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the guidance property: Get or sets the Step guidance.
     * 
     * @return the guidance value.
     */
    public String guidance() {
        return this.guidance;
    }

    /**
     * Set the guidance property: Get or sets the Step guidance.
     * 
     * @param guidance the guidance value to set.
     * @return the Step object itself.
     */
    public Step withGuidance(String guidance) {
        this.guidance = guidance;
        return this;
    }

    /**
     * Get the executionStatus property: Status of Troubleshooter Step execution.
     * 
     * @return the executionStatus value.
     */
    public ExecutionStatus executionStatus() {
        return this.executionStatus;
    }

    /**
     * Set the executionStatus property: Status of Troubleshooter Step execution.
     * 
     * @param executionStatus the executionStatus value to set.
     * @return the Step object itself.
     */
    public Step withExecutionStatus(ExecutionStatus executionStatus) {
        this.executionStatus = executionStatus;
        return this;
    }

    /**
     * Get the executionStatusDescription property: This field has more detailed status description of the execution
     * status.
     * 
     * @return the executionStatusDescription value.
     */
    public String executionStatusDescription() {
        return this.executionStatusDescription;
    }

    /**
     * Set the executionStatusDescription property: This field has more detailed status description of the execution
     * status.
     * 
     * @param executionStatusDescription the executionStatusDescription value to set.
     * @return the Step object itself.
     */
    public Step withExecutionStatusDescription(String executionStatusDescription) {
        this.executionStatusDescription = executionStatusDescription;
        return this;
    }

    /**
     * Get the type property: Type of Troubleshooting step.
     * 
     * @return the type value.
     */
    public Type type() {
        return this.type;
    }

    /**
     * Set the type property: Type of Troubleshooting step.
     * 
     * @param type the type value to set.
     * @return the Step object itself.
     */
    public Step withType(Type type) {
        this.type = type;
        return this;
    }

    /**
     * Get the isLastStep property: is this last step of the workflow.
     * 
     * @return the isLastStep value.
     */
    public Boolean isLastStep() {
        return this.isLastStep;
    }

    /**
     * Set the isLastStep property: is this last step of the workflow.
     * 
     * @param isLastStep the isLastStep value to set.
     * @return the Step object itself.
     */
    public Step withIsLastStep(Boolean isLastStep) {
        this.isLastStep = isLastStep;
        return this;
    }

    /**
     * Get the inputs property: The inputs property.
     * 
     * @return the inputs value.
     */
    public List<StepInput> inputs() {
        return this.inputs;
    }

    /**
     * Set the inputs property: The inputs property.
     * 
     * @param inputs the inputs value to set.
     * @return the Step object itself.
     */
    public Step withInputs(List<StepInput> inputs) {
        this.inputs = inputs;
        return this;
    }

    /**
     * Get the automatedCheckResults property: Only for AutomatedStep type.
     * 
     * @return the automatedCheckResults value.
     */
    public AutomatedCheckResult automatedCheckResults() {
        return this.automatedCheckResults;
    }

    /**
     * Set the automatedCheckResults property: Only for AutomatedStep type.
     * 
     * @param automatedCheckResults the automatedCheckResults value to set.
     * @return the Step object itself.
     */
    public Step withAutomatedCheckResults(AutomatedCheckResult automatedCheckResults) {
        this.automatedCheckResults = automatedCheckResults;
        return this;
    }

    /**
     * Get the insights property: The insights property.
     * 
     * @return the insights value.
     */
    public List<Insight> insights() {
        return this.insights;
    }

    /**
     * Set the insights property: The insights property.
     * 
     * @param insights the insights value to set.
     * @return the Step object itself.
     */
    public Step withInsights(List<Insight> insights) {
        this.insights = insights;
        return this;
    }

    /**
     * Get the error property: The error detail.
     * 
     * @return the error value.
     */
    public ManagementError error() {
        return this.error;
    }

    /**
     * Set the error property: The error detail.
     * 
     * @param error the error value to set.
     * @return the Step object itself.
     */
    public Step withError(ManagementError error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (inputs() != null) {
            inputs().forEach(e -> e.validate());
        }
        if (automatedCheckResults() != null) {
            automatedCheckResults().validate();
        }
        if (insights() != null) {
            insights().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("description", this.description);
        jsonWriter.writeStringField("guidance", this.guidance);
        jsonWriter.writeStringField("executionStatus",
            this.executionStatus == null ? null : this.executionStatus.toString());
        jsonWriter.writeStringField("executionStatusDescription", this.executionStatusDescription);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeBooleanField("isLastStep", this.isLastStep);
        jsonWriter.writeArrayField("inputs", this.inputs, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("automatedCheckResults", this.automatedCheckResults);
        jsonWriter.writeArrayField("insights", this.insights, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Step from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Step if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Step.
     */
    public static Step fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Step deserializedStep = new Step();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedStep.id = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedStep.title = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedStep.description = reader.getString();
                } else if ("guidance".equals(fieldName)) {
                    deserializedStep.guidance = reader.getString();
                } else if ("executionStatus".equals(fieldName)) {
                    deserializedStep.executionStatus = ExecutionStatus.fromString(reader.getString());
                } else if ("executionStatusDescription".equals(fieldName)) {
                    deserializedStep.executionStatusDescription = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedStep.type = Type.fromString(reader.getString());
                } else if ("isLastStep".equals(fieldName)) {
                    deserializedStep.isLastStep = reader.getNullable(JsonReader::getBoolean);
                } else if ("inputs".equals(fieldName)) {
                    List<StepInput> inputs = reader.readArray(reader1 -> StepInput.fromJson(reader1));
                    deserializedStep.inputs = inputs;
                } else if ("automatedCheckResults".equals(fieldName)) {
                    deserializedStep.automatedCheckResults = AutomatedCheckResult.fromJson(reader);
                } else if ("insights".equals(fieldName)) {
                    List<Insight> insights = reader.readArray(reader1 -> Insight.fromJson(reader1));
                    deserializedStep.insights = insights;
                } else if ("error".equals(fieldName)) {
                    deserializedStep.error = ManagementError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStep;
        });
    }
}
