// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.selfhelp.fluent.models.SimplifiedSolutionsResourceInner;
import com.azure.resourcemanager.selfhelp.models.SimplifiedSolutionsResource;
import com.azure.resourcemanager.selfhelp.models.SolutionProvisioningState;
import java.util.Collections;
import java.util.Map;

public final class SimplifiedSolutionsResourceImpl
    implements SimplifiedSolutionsResource, SimplifiedSolutionsResource.Definition {
    private SimplifiedSolutionsResourceInner innerObject;

    private final com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager;

    SimplifiedSolutionsResourceImpl(SimplifiedSolutionsResourceInner innerObject,
        com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public String solutionId() {
        return this.innerModel().solutionId();
    }

    public Map<String, String> parameters() {
        Map<String, String> inner = this.innerModel().parameters();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String title() {
        return this.innerModel().title();
    }

    public Map<String, String> appendix() {
        Map<String, String> inner = this.innerModel().appendix();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String content() {
        return this.innerModel().content();
    }

    public SolutionProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public SimplifiedSolutionsResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.selfhelp.SelfHelpManager manager() {
        return this.serviceManager;
    }

    private String scope;

    private String simplifiedSolutionsResourceName;

    public SimplifiedSolutionsResourceImpl withExistingScope(String scope) {
        this.scope = scope;
        return this;
    }

    public SimplifiedSolutionsResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getSimplifiedSolutions()
            .create(scope, simplifiedSolutionsResourceName, this.innerModel(), Context.NONE);
        return this;
    }

    public SimplifiedSolutionsResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSimplifiedSolutions()
            .create(scope, simplifiedSolutionsResourceName, this.innerModel(), context);
        return this;
    }

    SimplifiedSolutionsResourceImpl(String name, com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager) {
        this.innerObject = new SimplifiedSolutionsResourceInner();
        this.serviceManager = serviceManager;
        this.simplifiedSolutionsResourceName = name;
    }

    public SimplifiedSolutionsResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSimplifiedSolutions()
            .getWithResponse(scope, simplifiedSolutionsResourceName, Context.NONE)
            .getValue();
        return this;
    }

    public SimplifiedSolutionsResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSimplifiedSolutions()
            .getWithResponse(scope, simplifiedSolutionsResourceName, context)
            .getValue();
        return this;
    }

    public SimplifiedSolutionsResourceImpl withSolutionId(String solutionId) {
        this.innerModel().withSolutionId(solutionId);
        return this;
    }

    public SimplifiedSolutionsResourceImpl withParameters(Map<String, String> parameters) {
        this.innerModel().withParameters(parameters);
        return this;
    }
}
