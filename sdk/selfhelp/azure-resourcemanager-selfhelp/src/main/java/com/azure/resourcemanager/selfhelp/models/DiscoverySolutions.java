// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;

/** Resource collection API of DiscoverySolutions. */
public interface DiscoverySolutions {
    /**
     * Solutions Discovery is the initial point of entry within Help API, which helps you identify the relevant
     * solutions for your Azure issue.&lt;br/&gt;&lt;br/&gt; You can discover solutions using resourceUri OR resourceUri
     * + problemClassificationId.&lt;br/&gt;&lt;br/&gt;We will do our best in returning relevant diagnostics for your
     * Azure issue.&lt;br/&gt;&lt;br/&gt; Get the problemClassificationId(s) using this
     * [reference](https://learn.microsoft.com/rest/api/support/problem-classifications/list?tabs=HTTP).&lt;br/&gt;&lt;br/&gt;
     * &lt;b&gt;Note: &lt;/b&gt; ‘requiredParameterSets’ from Solutions Discovery API response must be passed via
     * ‘additionalParameters’ as an input to Diagnostics API.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SolutionMetadataResource> list(String scope);

    /**
     * Solutions Discovery is the initial point of entry within Help API, which helps you identify the relevant
     * solutions for your Azure issue.&lt;br/&gt;&lt;br/&gt; You can discover solutions using resourceUri OR resourceUri
     * + problemClassificationId.&lt;br/&gt;&lt;br/&gt;We will do our best in returning relevant diagnostics for your
     * Azure issue.&lt;br/&gt;&lt;br/&gt; Get the problemClassificationId(s) using this
     * [reference](https://learn.microsoft.com/rest/api/support/problem-classifications/list?tabs=HTTP).&lt;br/&gt;&lt;br/&gt;
     * &lt;b&gt;Note: &lt;/b&gt; ‘requiredParameterSets’ from Solutions Discovery API response must be passed via
     * ‘additionalParameters’ as an input to Diagnostics API.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param filter Can be used to filter solutionIds by 'ProblemClassificationId'. The filter supports only 'and' and
     *     'eq' operators. Example: $filter=ProblemClassificationId eq '1ddda5b4-cf6c-4d4f-91ad-bc38ab0e811e' and
     *     ProblemClassificationId eq '0a9673c2-7af6-4e19-90d3-4ee2461076d9'.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return discovery response as paginated response with {@link PagedIterable}.
     */
    PagedIterable<SolutionMetadataResource> list(String scope, String filter, String skiptoken, Context context);
}
