// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.selfhelp.fluent.TroubleshootersClient;
import com.azure.resourcemanager.selfhelp.fluent.models.RestartTroubleshooterResponseInner;
import com.azure.resourcemanager.selfhelp.fluent.models.TroubleshooterResourceInner;
import com.azure.resourcemanager.selfhelp.models.ContinueRequestBody;
import com.azure.resourcemanager.selfhelp.models.TroubleshootersContinueMethodResponse;
import com.azure.resourcemanager.selfhelp.models.TroubleshootersEndResponse;
import com.azure.resourcemanager.selfhelp.models.TroubleshootersRestartResponse;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in TroubleshootersClient.
 */
public final class TroubleshootersClientImpl implements TroubleshootersClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final TroubleshootersService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpRPImpl client;

    /**
     * Initializes an instance of TroubleshootersClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    TroubleshootersClientImpl(HelpRPImpl client) {
        this.service
            = RestProxy.create(TroubleshootersService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpRPTroubleshooters to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HelpRPTroubleshooter")
    public interface TroubleshootersService {
        @Headers({ "Content-Type: application/json" })
        @Put("/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TroubleshooterResourceInner>> create(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("troubleshooterName") String troubleshooterName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") TroubleshooterResourceInner createTroubleshooterRequestBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<TroubleshooterResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("troubleshooterName") String troubleshooterName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/continue")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<TroubleshootersContinueMethodResponse> continueMethod(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("troubleshooterName") String troubleshooterName, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") ContinueRequestBody continueRequestBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/end")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<TroubleshootersEndResponse> end(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("troubleshooterName") String troubleshooterName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}/restart")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<TroubleshootersRestartResponse> restart(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("troubleshooterName") String troubleshooterName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Creates the specific troubleshooter action under a resource or subscription using the ‘solutionId’ and
     * ‘properties.parameters’ as the trigger. &lt;br/&gt; Azure Troubleshooters help with hard to classify issues,
     * reducing the gap between customer observed problems and solutions by guiding the user effortlessly through the
     * troubleshooting process. Each Troubleshooter flow represents a problem area within Azure and has a complex
     * tree-like structure that addresses many root causes. These flows are prepared with the help of Subject Matter
     * experts and customer support engineers by carefully considering previous support requests raised by customers.
     * Troubleshooters terminate at a well curated solution based off of resource backend signals and customer manual
     * selections.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param createTroubleshooterRequestBody The required request body for this Troubleshooter resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TroubleshooterResourceInner>> createWithResponseAsync(String scope, String troubleshooterName,
        TroubleshooterResourceInner createTroubleshooterRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        if (createTroubleshooterRequestBody != null) {
            createTroubleshooterRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), scope, troubleshooterName,
                this.client.getApiVersion(), createTroubleshooterRequestBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates the specific troubleshooter action under a resource or subscription using the ‘solutionId’ and
     * ‘properties.parameters’ as the trigger. &lt;br/&gt; Azure Troubleshooters help with hard to classify issues,
     * reducing the gap between customer observed problems and solutions by guiding the user effortlessly through the
     * troubleshooting process. Each Troubleshooter flow represents a problem area within Azure and has a complex
     * tree-like structure that addresses many root causes. These flows are prepared with the help of Subject Matter
     * experts and customer support engineers by carefully considering previous support requests raised by customers.
     * Troubleshooters terminate at a well curated solution based off of resource backend signals and customer manual
     * selections.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param createTroubleshooterRequestBody The required request body for this Troubleshooter resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TroubleshooterResourceInner>> createWithResponseAsync(String scope, String troubleshooterName,
        TroubleshooterResourceInner createTroubleshooterRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        if (createTroubleshooterRequestBody != null) {
            createTroubleshooterRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), scope, troubleshooterName, this.client.getApiVersion(),
            createTroubleshooterRequestBody, accept, context);
    }

    /**
     * Creates the specific troubleshooter action under a resource or subscription using the ‘solutionId’ and
     * ‘properties.parameters’ as the trigger. &lt;br/&gt; Azure Troubleshooters help with hard to classify issues,
     * reducing the gap between customer observed problems and solutions by guiding the user effortlessly through the
     * troubleshooting process. Each Troubleshooter flow represents a problem area within Azure and has a complex
     * tree-like structure that addresses many root causes. These flows are prepared with the help of Subject Matter
     * experts and customer support engineers by carefully considering previous support requests raised by customers.
     * Troubleshooters terminate at a well curated solution based off of resource backend signals and customer manual
     * selections.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshooterResourceInner> createAsync(String scope, String troubleshooterName) {
        final TroubleshooterResourceInner createTroubleshooterRequestBody = null;
        return createWithResponseAsync(scope, troubleshooterName, createTroubleshooterRequestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Creates the specific troubleshooter action under a resource or subscription using the ‘solutionId’ and
     * ‘properties.parameters’ as the trigger. &lt;br/&gt; Azure Troubleshooters help with hard to classify issues,
     * reducing the gap between customer observed problems and solutions by guiding the user effortlessly through the
     * troubleshooting process. Each Troubleshooter flow represents a problem area within Azure and has a complex
     * tree-like structure that addresses many root causes. These flows are prepared with the help of Subject Matter
     * experts and customer support engineers by carefully considering previous support requests raised by customers.
     * Troubleshooters terminate at a well curated solution based off of resource backend signals and customer manual
     * selections.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param createTroubleshooterRequestBody The required request body for this Troubleshooter resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TroubleshooterResourceInner> createWithResponse(String scope, String troubleshooterName,
        TroubleshooterResourceInner createTroubleshooterRequestBody, Context context) {
        return createWithResponseAsync(scope, troubleshooterName, createTroubleshooterRequestBody, context).block();
    }

    /**
     * Creates the specific troubleshooter action under a resource or subscription using the ‘solutionId’ and
     * ‘properties.parameters’ as the trigger. &lt;br/&gt; Azure Troubleshooters help with hard to classify issues,
     * reducing the gap between customer observed problems and solutions by guiding the user effortlessly through the
     * troubleshooting process. Each Troubleshooter flow represents a problem area within Azure and has a complex
     * tree-like structure that addresses many root causes. These flows are prepared with the help of Subject Matter
     * experts and customer support engineers by carefully considering previous support requests raised by customers.
     * Troubleshooters terminate at a well curated solution based off of resource backend signals and customer manual
     * selections.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TroubleshooterResourceInner create(String scope, String troubleshooterName) {
        final TroubleshooterResourceInner createTroubleshooterRequestBody = null;
        return createWithResponse(scope, troubleshooterName, createTroubleshooterRequestBody, Context.NONE).getValue();
    }

    /**
     * Gets troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow. This API requires the Troubleshooter
     * resource name that was created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TroubleshooterResourceInner>> getWithResponseAsync(String scope, String troubleshooterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), scope, troubleshooterName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow. This API requires the Troubleshooter
     * resource name that was created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<TroubleshooterResourceInner>> getWithResponseAsync(String scope, String troubleshooterName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), scope, troubleshooterName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Gets troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow. This API requires the Troubleshooter
     * resource name that was created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshooterResourceInner> getAsync(String scope, String troubleshooterName) {
        return getWithResponseAsync(scope, troubleshooterName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow. This API requires the Troubleshooter
     * resource name that was created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<TroubleshooterResourceInner> getWithResponse(String scope, String troubleshooterName,
        Context context) {
        return getWithResponseAsync(scope, troubleshooterName, context).block();
    }

    /**
     * Gets troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow. This API requires the Troubleshooter
     * resource name that was created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter instance result which includes the step status/result of the troubleshooter resource name
     * that is being executed.&lt;br/&gt; Get API is used to retrieve the result of a Troubleshooter instance, which
     * includes the status and result of each step in the Troubleshooter workflow.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TroubleshooterResourceInner get(String scope, String troubleshooterName) {
        return getWithResponse(scope, troubleshooterName, Context.NONE).getValue();
    }

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param continueRequestBody The required request body for going to next step in Troubleshooter resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshootersContinueMethodResponse> continueMethodWithResponseAsync(String scope,
        String troubleshooterName, ContinueRequestBody continueRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        if (continueRequestBody != null) {
            continueRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.continueMethod(this.client.getEndpoint(), scope, troubleshooterName,
                this.client.getApiVersion(), continueRequestBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param continueRequestBody The required request body for going to next step in Troubleshooter resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshootersContinueMethodResponse> continueMethodWithResponseAsync(String scope,
        String troubleshooterName, ContinueRequestBody continueRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        if (continueRequestBody != null) {
            continueRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.continueMethod(this.client.getEndpoint(), scope, troubleshooterName, this.client.getApiVersion(),
            continueRequestBody, accept, context);
    }

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> continueMethodAsync(String scope, String troubleshooterName) {
        final ContinueRequestBody continueRequestBody = null;
        return continueMethodWithResponseAsync(scope, troubleshooterName, continueRequestBody)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param continueRequestBody The required request body for going to next step in Troubleshooter resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TroubleshootersContinueMethodResponse continueMethodWithResponse(String scope, String troubleshooterName,
        ContinueRequestBody continueRequestBody, Context context) {
        return continueMethodWithResponseAsync(scope, troubleshooterName, continueRequestBody, context).block();
    }

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void continueMethod(String scope, String troubleshooterName) {
        final ContinueRequestBody continueRequestBody = null;
        continueMethodWithResponse(scope, troubleshooterName, continueRequestBody, Context.NONE);
    }

    /**
     * Ends the troubleshooter action.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshootersEndResponse> endWithResponseAsync(String scope, String troubleshooterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.end(this.client.getEndpoint(), scope, troubleshooterName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Ends the troubleshooter action.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshootersEndResponse> endWithResponseAsync(String scope, String troubleshooterName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.end(this.client.getEndpoint(), scope, troubleshooterName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Ends the troubleshooter action.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> endAsync(String scope, String troubleshooterName) {
        return endWithResponseAsync(scope, troubleshooterName).flatMap(ignored -> Mono.empty());
    }

    /**
     * Ends the troubleshooter action.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TroubleshootersEndResponse endWithResponse(String scope, String troubleshooterName, Context context) {
        return endWithResponseAsync(scope, troubleshooterName, context).block();
    }

    /**
     * Ends the troubleshooter action.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void end(String scope, String troubleshooterName) {
        endWithResponse(scope, troubleshooterName, Context.NONE);
    }

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshootersRestartResponse> restartWithResponseAsync(String scope, String troubleshooterName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.restart(this.client.getEndpoint(), scope, troubleshooterName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<TroubleshootersRestartResponse> restartWithResponseAsync(String scope, String troubleshooterName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (troubleshooterName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter troubleshooterName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.restart(this.client.getEndpoint(), scope, troubleshooterName, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RestartTroubleshooterResponseInner> restartAsync(String scope, String troubleshooterName) {
        return restartWithResponseAsync(scope, troubleshooterName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public TroubleshootersRestartResponse restartWithResponse(String scope, String troubleshooterName,
        Context context) {
        return restartWithResponseAsync(scope, troubleshooterName, context).block();
    }

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param troubleshooterName Troubleshooter resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RestartTroubleshooterResponseInner restart(String scope, String troubleshooterName) {
        return restartWithResponse(scope, troubleshooterName, Context.NONE).getValue();
    }
}
