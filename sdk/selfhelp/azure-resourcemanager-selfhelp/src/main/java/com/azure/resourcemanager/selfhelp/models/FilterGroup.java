// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Filter group.
 */
@Fluent
public final class FilterGroup implements JsonSerializable<FilterGroup> {
    /*
     * List of filters
     */
    private List<Filter> filter;

    /**
     * Creates an instance of FilterGroup class.
     */
    public FilterGroup() {
    }

    /**
     * Get the filter property: List of filters.
     * 
     * @return the filter value.
     */
    public List<Filter> filter() {
        return this.filter;
    }

    /**
     * Set the filter property: List of filters.
     * 
     * @param filter the filter value to set.
     * @return the FilterGroup object itself.
     */
    public FilterGroup withFilter(List<Filter> filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filter() != null) {
            filter().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("filter", this.filter, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FilterGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FilterGroup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FilterGroup.
     */
    public static FilterGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FilterGroup deserializedFilterGroup = new FilterGroup();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("filter".equals(fieldName)) {
                    List<Filter> filter = reader.readArray(reader1 -> Filter.fromJson(reader1));
                    deserializedFilterGroup.filter = filter;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFilterGroup;
        });
    }
}
