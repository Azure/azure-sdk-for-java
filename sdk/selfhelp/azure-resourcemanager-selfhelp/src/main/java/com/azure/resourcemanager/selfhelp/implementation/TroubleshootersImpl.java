// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.selfhelp.fluent.TroubleshootersClient;
import com.azure.resourcemanager.selfhelp.fluent.models.RestartTroubleshooterResponseInner;
import com.azure.resourcemanager.selfhelp.fluent.models.TroubleshooterResourceInner;
import com.azure.resourcemanager.selfhelp.models.ContinueRequestBody;
import com.azure.resourcemanager.selfhelp.models.RestartTroubleshooterResponse;
import com.azure.resourcemanager.selfhelp.models.TroubleshooterResource;
import com.azure.resourcemanager.selfhelp.models.Troubleshooters;
import com.azure.resourcemanager.selfhelp.models.TroubleshootersContinueMethodResponse;
import com.azure.resourcemanager.selfhelp.models.TroubleshootersEndResponse;
import com.azure.resourcemanager.selfhelp.models.TroubleshootersRestartResponse;

public final class TroubleshootersImpl implements Troubleshooters {
    private static final ClientLogger LOGGER = new ClientLogger(TroubleshootersImpl.class);

    private final TroubleshootersClient innerClient;

    private final com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager;

    public TroubleshootersImpl(TroubleshootersClient innerClient,
        com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<TroubleshooterResource> getWithResponse(String scope, String troubleshooterName, Context context) {
        Response<TroubleshooterResourceInner> inner
            = this.serviceClient().getWithResponse(scope, troubleshooterName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TroubleshooterResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public TroubleshooterResource get(String scope, String troubleshooterName) {
        TroubleshooterResourceInner inner = this.serviceClient().get(scope, troubleshooterName);
        if (inner != null) {
            return new TroubleshooterResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TroubleshootersContinueMethodResponse continueMethodWithResponse(String scope, String troubleshooterName,
        ContinueRequestBody continueRequestBody, Context context) {
        return this.serviceClient().continueMethodWithResponse(scope, troubleshooterName, continueRequestBody, context);
    }

    public void continueMethod(String scope, String troubleshooterName) {
        this.serviceClient().continueMethod(scope, troubleshooterName);
    }

    public TroubleshootersEndResponse endWithResponse(String scope, String troubleshooterName, Context context) {
        return this.serviceClient().endWithResponse(scope, troubleshooterName, context);
    }

    public void end(String scope, String troubleshooterName) {
        this.serviceClient().end(scope, troubleshooterName);
    }

    public Response<RestartTroubleshooterResponse> restartWithResponse(String scope, String troubleshooterName,
        Context context) {
        TroubleshootersRestartResponse inner
            = this.serviceClient().restartWithResponse(scope, troubleshooterName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RestartTroubleshooterResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RestartTroubleshooterResponse restart(String scope, String troubleshooterName) {
        RestartTroubleshooterResponseInner inner = this.serviceClient().restart(scope, troubleshooterName);
        if (inner != null) {
            return new RestartTroubleshooterResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public TroubleshooterResource getById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String troubleshooterName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}", "troubleshooterName");
        if (troubleshooterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'troubleshooters'.", id)));
        }
        return this.getWithResponse(scope, troubleshooterName, Context.NONE).getValue();
    }

    public Response<TroubleshooterResource> getByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String troubleshooterName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/troubleshooters/{troubleshooterName}", "troubleshooterName");
        if (troubleshooterName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'troubleshooters'.", id)));
        }
        return this.getWithResponse(scope, troubleshooterName, context);
    }

    private TroubleshootersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.selfhelp.SelfHelpManager manager() {
        return this.serviceManager;
    }

    public TroubleshooterResourceImpl define(String name) {
        return new TroubleshooterResourceImpl(name, this.manager());
    }
}
