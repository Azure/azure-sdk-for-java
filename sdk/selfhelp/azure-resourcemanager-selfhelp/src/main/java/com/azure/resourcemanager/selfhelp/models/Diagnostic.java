// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties returned with in an insight.
 */
@Fluent
public final class Diagnostic implements JsonSerializable<Diagnostic> {
    /*
     * Solution Id
     */
    private String solutionId;

    /*
     * Denotes the status of the diagnostic resource.
     */
    private Status status;

    /*
     * The problems (if any) detected by this insight.
     */
    private List<Insight> insights;

    /*
     * Error definition.
     */
    private Error error;

    /**
     * Creates an instance of Diagnostic class.
     */
    public Diagnostic() {
    }

    /**
     * Get the solutionId property: Solution Id.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id.
     * 
     * @param solutionId the solutionId value to set.
     * @return the Diagnostic object itself.
     */
    public Diagnostic withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the status property: Denotes the status of the diagnostic resource.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: Denotes the status of the diagnostic resource.
     * 
     * @param status the status value to set.
     * @return the Diagnostic object itself.
     */
    public Diagnostic withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the insights property: The problems (if any) detected by this insight.
     * 
     * @return the insights value.
     */
    public List<Insight> insights() {
        return this.insights;
    }

    /**
     * Set the insights property: The problems (if any) detected by this insight.
     * 
     * @param insights the insights value to set.
     * @return the Diagnostic object itself.
     */
    public Diagnostic withInsights(List<Insight> insights) {
        this.insights = insights;
        return this;
    }

    /**
     * Get the error property: Error definition.
     * 
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Set the error property: Error definition.
     * 
     * @param error the error value to set.
     * @return the Diagnostic object itself.
     */
    public Diagnostic withError(Error error) {
        this.error = error;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (insights() != null) {
            insights().forEach(e -> e.validate());
        }
        if (error() != null) {
            error().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("insights", this.insights, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Diagnostic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Diagnostic if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Diagnostic.
     */
    public static Diagnostic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Diagnostic deserializedDiagnostic = new Diagnostic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedDiagnostic.solutionId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedDiagnostic.status = Status.fromString(reader.getString());
                } else if ("insights".equals(fieldName)) {
                    List<Insight> insights = reader.readArray(reader1 -> Insight.fromJson(reader1));
                    deserializedDiagnostic.insights = insights;
                } else if ("error".equals(fieldName)) {
                    deserializedDiagnostic.error = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnostic;
        });
    }
}
