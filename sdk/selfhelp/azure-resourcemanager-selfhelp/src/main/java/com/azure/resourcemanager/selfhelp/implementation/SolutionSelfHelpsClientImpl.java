// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.selfhelp.fluent.SolutionSelfHelpsClient;
import com.azure.resourcemanager.selfhelp.fluent.models.SolutionResourceSelfHelpInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SolutionSelfHelpsClient.
 */
public final class SolutionSelfHelpsClientImpl implements SolutionSelfHelpsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SolutionSelfHelpsService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpRPImpl client;

    /**
     * Initializes an instance of SolutionSelfHelpsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SolutionSelfHelpsClientImpl(HelpRPImpl client) {
        this.service
            = RestProxy.create(SolutionSelfHelpsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpRPSolutionSelfHelps to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HelpRPSolutionSelfHe")
    public interface SolutionSelfHelpsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/providers/Microsoft.Help/selfHelp/{solutionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionResourceSelfHelpInner>> get(@HostParam("$host") String endpoint,
            @PathParam("solutionId") String solutionId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets Self Help Solutions for a given solutionId. Self Help Solutions consist of rich instructional video
     * tutorials, links and guides to public documentation related to a specific problem that enables users to
     * troubleshoot Azure issues.
     * 
     * @param solutionId SolutionId is a unique id to identify a solution. You can retrieve the solution id using the
     * Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&amp;tabs=HTTP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return self Help Solutions for a given solutionId along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionResourceSelfHelpInner>> getWithResponseAsync(String solutionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.get(this.client.getEndpoint(), solutionId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets Self Help Solutions for a given solutionId. Self Help Solutions consist of rich instructional video
     * tutorials, links and guides to public documentation related to a specific problem that enables users to
     * troubleshoot Azure issues.
     * 
     * @param solutionId SolutionId is a unique id to identify a solution. You can retrieve the solution id using the
     * Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&amp;tabs=HTTP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return self Help Solutions for a given solutionId along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionResourceSelfHelpInner>> getWithResponseAsync(String solutionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (solutionId == null) {
            return Mono.error(new IllegalArgumentException("Parameter solutionId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), solutionId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets Self Help Solutions for a given solutionId. Self Help Solutions consist of rich instructional video
     * tutorials, links and guides to public documentation related to a specific problem that enables users to
     * troubleshoot Azure issues.
     * 
     * @param solutionId SolutionId is a unique id to identify a solution. You can retrieve the solution id using the
     * Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&amp;tabs=HTTP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return self Help Solutions for a given solutionId on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceSelfHelpInner> getAsync(String solutionId) {
        return getWithResponseAsync(solutionId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets Self Help Solutions for a given solutionId. Self Help Solutions consist of rich instructional video
     * tutorials, links and guides to public documentation related to a specific problem that enables users to
     * troubleshoot Azure issues.
     * 
     * @param solutionId SolutionId is a unique id to identify a solution. You can retrieve the solution id using the
     * Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&amp;tabs=HTTP.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return self Help Solutions for a given solutionId along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SolutionResourceSelfHelpInner> getWithResponse(String solutionId, Context context) {
        return getWithResponseAsync(solutionId, context).block();
    }

    /**
     * Gets Self Help Solutions for a given solutionId. Self Help Solutions consist of rich instructional video
     * tutorials, links and guides to public documentation related to a specific problem that enables users to
     * troubleshoot Azure issues.
     * 
     * @param solutionId SolutionId is a unique id to identify a solution. You can retrieve the solution id using the
     * Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&amp;tabs=HTTP.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return self Help Solutions for a given solutionId.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceSelfHelpInner get(String solutionId) {
        return getWithResponse(solutionId, Context.NONE).getValue();
    }
}
