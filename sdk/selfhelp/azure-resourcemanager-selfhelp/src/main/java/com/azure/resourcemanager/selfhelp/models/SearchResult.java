// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Details of an AzureKB search result.
 */
@Fluent
public final class SearchResult implements JsonSerializable<SearchResult> {
    /*
     * Unique id of the result.
     */
    private String solutionId;

    /*
     * Content of the search result.
     */
    private String content;

    /*
     * Title of the search result.
     */
    private String title;

    /*
     * Confidence of the search result.
     */
    private Confidence confidence;

    /*
     * Source of the search result.
     */
    private String source;

    /*
     * Result type of the search result.
     */
    private ResultType resultType;

    /*
     * rank of the search result
     */
    private Integer rank;

    /*
     * Link to the document.
     */
    private String link;

    /**
     * Creates an instance of SearchResult class.
     */
    public SearchResult() {
    }

    /**
     * Get the solutionId property: Unique id of the result.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Unique id of the result.
     * 
     * @param solutionId the solutionId value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the content property: Content of the search result.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Set the content property: Content of the search result.
     * 
     * @param content the content value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withContent(String content) {
        this.content = content;
        return this;
    }

    /**
     * Get the title property: Title of the search result.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Title of the search result.
     * 
     * @param title the title value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the confidence property: Confidence of the search result.
     * 
     * @return the confidence value.
     */
    public Confidence confidence() {
        return this.confidence;
    }

    /**
     * Set the confidence property: Confidence of the search result.
     * 
     * @param confidence the confidence value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withConfidence(Confidence confidence) {
        this.confidence = confidence;
        return this;
    }

    /**
     * Get the source property: Source of the search result.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Source of the search result.
     * 
     * @param source the source value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the resultType property: Result type of the search result.
     * 
     * @return the resultType value.
     */
    public ResultType resultType() {
        return this.resultType;
    }

    /**
     * Set the resultType property: Result type of the search result.
     * 
     * @param resultType the resultType value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withResultType(ResultType resultType) {
        this.resultType = resultType;
        return this;
    }

    /**
     * Get the rank property: rank of the search result.
     * 
     * @return the rank value.
     */
    public Integer rank() {
        return this.rank;
    }

    /**
     * Set the rank property: rank of the search result.
     * 
     * @param rank the rank value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withRank(Integer rank) {
        this.rank = rank;
        return this;
    }

    /**
     * Get the link property: Link to the document.
     * 
     * @return the link value.
     */
    public String link() {
        return this.link;
    }

    /**
     * Set the link property: Link to the document.
     * 
     * @param link the link value to set.
     * @return the SearchResult object itself.
     */
    public SearchResult withLink(String link) {
        this.link = link;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeStringField("confidence", this.confidence == null ? null : this.confidence.toString());
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("resultType", this.resultType == null ? null : this.resultType.toString());
        jsonWriter.writeNumberField("rank", this.rank);
        jsonWriter.writeStringField("link", this.link);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SearchResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SearchResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SearchResult.
     */
    public static SearchResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SearchResult deserializedSearchResult = new SearchResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedSearchResult.solutionId = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedSearchResult.content = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedSearchResult.title = reader.getString();
                } else if ("confidence".equals(fieldName)) {
                    deserializedSearchResult.confidence = Confidence.fromString(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedSearchResult.source = reader.getString();
                } else if ("resultType".equals(fieldName)) {
                    deserializedSearchResult.resultType = ResultType.fromString(reader.getString());
                } else if ("rank".equals(fieldName)) {
                    deserializedSearchResult.rank = reader.getNullable(JsonReader::getInt);
                } else if ("link".equals(fieldName)) {
                    deserializedSearchResult.link = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSearchResult;
        });
    }
}
