// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Service Classification result object.
 */
@Fluent
public final class ClassificationService implements JsonSerializable<ClassificationService> {
    /*
     * Azure resource Id of the service.
     */
    private String serviceId;

    /*
     * Localized name of the azure service.
     */
    private String displayName;

    /*
     * List of applicable ARM resource types for this service.
     */
    private List<String> resourceTypes;

    /**
     * Creates an instance of ClassificationService class.
     */
    public ClassificationService() {
    }

    /**
     * Get the serviceId property: Azure resource Id of the service.
     * 
     * @return the serviceId value.
     */
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * Get the displayName property: Localized name of the azure service.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the resourceTypes property: List of applicable ARM resource types for this service.
     * 
     * @return the resourceTypes value.
     */
    public List<String> resourceTypes() {
        return this.resourceTypes;
    }

    /**
     * Set the resourceTypes property: List of applicable ARM resource types for this service.
     * 
     * @param resourceTypes the resourceTypes value to set.
     * @return the ClassificationService object itself.
     */
    public ClassificationService withResourceTypes(List<String> resourceTypes) {
        this.resourceTypes = resourceTypes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceTypes", this.resourceTypes,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClassificationService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClassificationService if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClassificationService.
     */
    public static ClassificationService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClassificationService deserializedClassificationService = new ClassificationService();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceId".equals(fieldName)) {
                    deserializedClassificationService.serviceId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedClassificationService.displayName = reader.getString();
                } else if ("resourceTypes".equals(fieldName)) {
                    List<String> resourceTypes = reader.readArray(reader1 -> reader1.getString());
                    deserializedClassificationService.resourceTypes = resourceTypes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClassificationService;
        });
    }
}
