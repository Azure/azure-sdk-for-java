// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Metadata Properties.
 */
@Fluent
public final class SolutionMetadataProperties implements JsonSerializable<SolutionMetadataProperties> {
    /*
     * Solution Id.
     */
    private String solutionId;

    /*
     * Solution Type.
     */
    private SolutionType solutionType;

    /*
     * A detailed description of solution.
     */
    private String description;

    /*
     * Required parameters for invoking this particular solution.
     */
    private List<String> requiredInputs;

    /**
     * Creates an instance of SolutionMetadataProperties class.
     */
    public SolutionMetadataProperties() {
    }

    /**
     * Get the solutionId property: Solution Id.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id.
     * 
     * @param solutionId the solutionId value to set.
     * @return the SolutionMetadataProperties object itself.
     */
    public SolutionMetadataProperties withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the solutionType property: Solution Type.
     * 
     * @return the solutionType value.
     */
    public SolutionType solutionType() {
        return this.solutionType;
    }

    /**
     * Get the description property: A detailed description of solution.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the requiredInputs property: Required parameters for invoking this particular solution.
     * 
     * @return the requiredInputs value.
     */
    public List<String> requiredInputs() {
        return this.requiredInputs;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionMetadataProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionMetadataProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionMetadataProperties.
     */
    public static SolutionMetadataProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionMetadataProperties deserializedSolutionMetadataProperties = new SolutionMetadataProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedSolutionMetadataProperties.solutionId = reader.getString();
                } else if ("solutionType".equals(fieldName)) {
                    deserializedSolutionMetadataProperties.solutionType = SolutionType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedSolutionMetadataProperties.description = reader.getString();
                } else if ("requiredInputs".equals(fieldName)) {
                    List<String> requiredInputs = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionMetadataProperties.requiredInputs = requiredInputs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionMetadataProperties;
        });
    }
}
