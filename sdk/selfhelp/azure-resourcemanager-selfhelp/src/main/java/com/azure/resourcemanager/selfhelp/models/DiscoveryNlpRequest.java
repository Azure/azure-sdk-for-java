// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Discover NLP request.
 */
@Fluent
public final class DiscoveryNlpRequest implements JsonSerializable<DiscoveryNlpRequest> {
    /*
     * Natural language description of the issue.
     */
    private String issueSummary;

    /*
     * ARM resource Id of the resource that is having the issue. Only applicable for Discovery Solution NLP Subscription
     * Scope.
     */
    private String resourceId;

    /*
     * ARM service Id of the service that is having the issue. For more information on service Id see
     * https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP.
     */
    private String serviceId;

    /*
     * Additional information in the form of a string.
     */
    private String additionalContext;

    /**
     * Creates an instance of DiscoveryNlpRequest class.
     */
    public DiscoveryNlpRequest() {
    }

    /**
     * Get the issueSummary property: Natural language description of the issue.
     * 
     * @return the issueSummary value.
     */
    public String issueSummary() {
        return this.issueSummary;
    }

    /**
     * Set the issueSummary property: Natural language description of the issue.
     * 
     * @param issueSummary the issueSummary value to set.
     * @return the DiscoveryNlpRequest object itself.
     */
    public DiscoveryNlpRequest withIssueSummary(String issueSummary) {
        this.issueSummary = issueSummary;
        return this;
    }

    /**
     * Get the resourceId property: ARM resource Id of the resource that is having the issue. Only applicable for
     * Discovery Solution NLP Subscription Scope.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: ARM resource Id of the resource that is having the issue. Only applicable for
     * Discovery Solution NLP Subscription Scope.
     * 
     * @param resourceId the resourceId value to set.
     * @return the DiscoveryNlpRequest object itself.
     */
    public DiscoveryNlpRequest withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the serviceId property: ARM service Id of the service that is having the issue. For more information on
     * service Id see https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP.
     * 
     * @return the serviceId value.
     */
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * Set the serviceId property: ARM service Id of the service that is having the issue. For more information on
     * service Id see https://learn.microsoft.com/rest/api/support/services/list?tabs=HTTP.
     * 
     * @param serviceId the serviceId value to set.
     * @return the DiscoveryNlpRequest object itself.
     */
    public DiscoveryNlpRequest withServiceId(String serviceId) {
        this.serviceId = serviceId;
        return this;
    }

    /**
     * Get the additionalContext property: Additional information in the form of a string.
     * 
     * @return the additionalContext value.
     */
    public String additionalContext() {
        return this.additionalContext;
    }

    /**
     * Set the additionalContext property: Additional information in the form of a string.
     * 
     * @param additionalContext the additionalContext value to set.
     * @return the DiscoveryNlpRequest object itself.
     */
    public DiscoveryNlpRequest withAdditionalContext(String additionalContext) {
        this.additionalContext = additionalContext;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issueSummary() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property issueSummary in model DiscoveryNlpRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiscoveryNlpRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("issueSummary", this.issueSummary);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("serviceId", this.serviceId);
        jsonWriter.writeStringField("additionalContext", this.additionalContext);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiscoveryNlpRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiscoveryNlpRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiscoveryNlpRequest.
     */
    public static DiscoveryNlpRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiscoveryNlpRequest deserializedDiscoveryNlpRequest = new DiscoveryNlpRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueSummary".equals(fieldName)) {
                    deserializedDiscoveryNlpRequest.issueSummary = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedDiscoveryNlpRequest.resourceId = reader.getString();
                } else if ("serviceId".equals(fieldName)) {
                    deserializedDiscoveryNlpRequest.serviceId = reader.getString();
                } else if ("additionalContext".equals(fieldName)) {
                    deserializedDiscoveryNlpRequest.additionalContext = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiscoveryNlpRequest;
        });
    }
}
