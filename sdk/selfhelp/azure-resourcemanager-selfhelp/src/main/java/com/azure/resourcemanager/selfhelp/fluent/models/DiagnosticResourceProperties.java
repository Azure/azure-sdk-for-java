// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.models.Diagnostic;
import com.azure.resourcemanager.selfhelp.models.DiagnosticInvocation;
import com.azure.resourcemanager.selfhelp.models.DiagnosticProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Diagnostic resource properties.
 */
@Fluent
public final class DiagnosticResourceProperties implements JsonSerializable<DiagnosticResourceProperties> {
    /*
     * Global parameters is an optional map which can be used to add key and value to request body to improve the
     * diagnostics results
     */
    private Map<String, String> globalParameters;

    /*
     * SolutionIds that are needed to be invoked.
     */
    private List<DiagnosticInvocation> insights;

    /*
     * Diagnostic Request Accepted time.
     */
    private String acceptedAt;

    /*
     * Status of diagnostic provisioning.
     */
    private DiagnosticProvisioningState provisioningState;

    /*
     * Array of Diagnostics.
     */
    private List<Diagnostic> diagnostics;

    /**
     * Creates an instance of DiagnosticResourceProperties class.
     */
    public DiagnosticResourceProperties() {
    }

    /**
     * Get the globalParameters property: Global parameters is an optional map which can be used to add key and value to
     * request body to improve the diagnostics results.
     * 
     * @return the globalParameters value.
     */
    public Map<String, String> globalParameters() {
        return this.globalParameters;
    }

    /**
     * Set the globalParameters property: Global parameters is an optional map which can be used to add key and value to
     * request body to improve the diagnostics results.
     * 
     * @param globalParameters the globalParameters value to set.
     * @return the DiagnosticResourceProperties object itself.
     */
    public DiagnosticResourceProperties withGlobalParameters(Map<String, String> globalParameters) {
        this.globalParameters = globalParameters;
        return this;
    }

    /**
     * Get the insights property: SolutionIds that are needed to be invoked.
     * 
     * @return the insights value.
     */
    public List<DiagnosticInvocation> insights() {
        return this.insights;
    }

    /**
     * Set the insights property: SolutionIds that are needed to be invoked.
     * 
     * @param insights the insights value to set.
     * @return the DiagnosticResourceProperties object itself.
     */
    public DiagnosticResourceProperties withInsights(List<DiagnosticInvocation> insights) {
        this.insights = insights;
        return this;
    }

    /**
     * Get the acceptedAt property: Diagnostic Request Accepted time.
     * 
     * @return the acceptedAt value.
     */
    public String acceptedAt() {
        return this.acceptedAt;
    }

    /**
     * Get the provisioningState property: Status of diagnostic provisioning.
     * 
     * @return the provisioningState value.
     */
    public DiagnosticProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the diagnostics property: Array of Diagnostics.
     * 
     * @return the diagnostics value.
     */
    public List<Diagnostic> diagnostics() {
        return this.diagnostics;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (insights() != null) {
            insights().forEach(e -> e.validate());
        }
        if (diagnostics() != null) {
            diagnostics().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("globalParameters", this.globalParameters,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("insights", this.insights, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticResourceProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnosticResourceProperties.
     */
    public static DiagnosticResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticResourceProperties deserializedDiagnosticResourceProperties = new DiagnosticResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("globalParameters".equals(fieldName)) {
                    Map<String, String> globalParameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedDiagnosticResourceProperties.globalParameters = globalParameters;
                } else if ("insights".equals(fieldName)) {
                    List<DiagnosticInvocation> insights
                        = reader.readArray(reader1 -> DiagnosticInvocation.fromJson(reader1));
                    deserializedDiagnosticResourceProperties.insights = insights;
                } else if ("acceptedAt".equals(fieldName)) {
                    deserializedDiagnosticResourceProperties.acceptedAt = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDiagnosticResourceProperties.provisioningState
                        = DiagnosticProvisioningState.fromString(reader.getString());
                } else if ("diagnostics".equals(fieldName)) {
                    List<Diagnostic> diagnostics = reader.readArray(reader1 -> Diagnostic.fromJson(reader1));
                    deserializedDiagnosticResourceProperties.diagnostics = diagnostics;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnosticResourceProperties;
        });
    }
}
