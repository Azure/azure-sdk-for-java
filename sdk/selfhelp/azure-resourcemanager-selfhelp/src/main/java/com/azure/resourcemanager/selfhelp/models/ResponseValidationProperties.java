// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Troubleshooter step input response validation properties.
 */
@Fluent
public final class ResponseValidationProperties implements JsonSerializable<ResponseValidationProperties> {
    /*
     * Regex used for the input validation.
     */
    private String regex;

    /*
     * Validation scope
     */
    private ValidationScope validationScope;

    /*
     * Default True
     */
    private Boolean isRequired;

    /*
     * Validation Error Message.
     */
    private String validationErrorMessage;

    /*
     * Max text input (open Ended Text).
     */
    private Long maxLength;

    /**
     * Creates an instance of ResponseValidationProperties class.
     */
    public ResponseValidationProperties() {
    }

    /**
     * Get the regex property: Regex used for the input validation.
     * 
     * @return the regex value.
     */
    public String regex() {
        return this.regex;
    }

    /**
     * Set the regex property: Regex used for the input validation.
     * 
     * @param regex the regex value to set.
     * @return the ResponseValidationProperties object itself.
     */
    public ResponseValidationProperties withRegex(String regex) {
        this.regex = regex;
        return this;
    }

    /**
     * Get the validationScope property: Validation scope.
     * 
     * @return the validationScope value.
     */
    public ValidationScope validationScope() {
        return this.validationScope;
    }

    /**
     * Set the validationScope property: Validation scope.
     * 
     * @param validationScope the validationScope value to set.
     * @return the ResponseValidationProperties object itself.
     */
    public ResponseValidationProperties withValidationScope(ValidationScope validationScope) {
        this.validationScope = validationScope;
        return this;
    }

    /**
     * Get the isRequired property: Default True.
     * 
     * @return the isRequired value.
     */
    public Boolean isRequired() {
        return this.isRequired;
    }

    /**
     * Set the isRequired property: Default True.
     * 
     * @param isRequired the isRequired value to set.
     * @return the ResponseValidationProperties object itself.
     */
    public ResponseValidationProperties withIsRequired(Boolean isRequired) {
        this.isRequired = isRequired;
        return this;
    }

    /**
     * Get the validationErrorMessage property: Validation Error Message.
     * 
     * @return the validationErrorMessage value.
     */
    public String validationErrorMessage() {
        return this.validationErrorMessage;
    }

    /**
     * Set the validationErrorMessage property: Validation Error Message.
     * 
     * @param validationErrorMessage the validationErrorMessage value to set.
     * @return the ResponseValidationProperties object itself.
     */
    public ResponseValidationProperties withValidationErrorMessage(String validationErrorMessage) {
        this.validationErrorMessage = validationErrorMessage;
        return this;
    }

    /**
     * Get the maxLength property: Max text input (open Ended Text).
     * 
     * @return the maxLength value.
     */
    public Long maxLength() {
        return this.maxLength;
    }

    /**
     * Set the maxLength property: Max text input (open Ended Text).
     * 
     * @param maxLength the maxLength value to set.
     * @return the ResponseValidationProperties object itself.
     */
    public ResponseValidationProperties withMaxLength(Long maxLength) {
        this.maxLength = maxLength;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("regex", this.regex);
        jsonWriter.writeStringField("validationScope",
            this.validationScope == null ? null : this.validationScope.toString());
        jsonWriter.writeBooleanField("isRequired", this.isRequired);
        jsonWriter.writeStringField("validationErrorMessage", this.validationErrorMessage);
        jsonWriter.writeNumberField("maxLength", this.maxLength);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResponseValidationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResponseValidationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResponseValidationProperties.
     */
    public static ResponseValidationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResponseValidationProperties deserializedResponseValidationProperties = new ResponseValidationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("regex".equals(fieldName)) {
                    deserializedResponseValidationProperties.regex = reader.getString();
                } else if ("validationScope".equals(fieldName)) {
                    deserializedResponseValidationProperties.validationScope
                        = ValidationScope.fromString(reader.getString());
                } else if ("isRequired".equals(fieldName)) {
                    deserializedResponseValidationProperties.isRequired = reader.getNullable(JsonReader::getBoolean);
                } else if ("validationErrorMessage".equals(fieldName)) {
                    deserializedResponseValidationProperties.validationErrorMessage = reader.getString();
                } else if ("maxLength".equals(fieldName)) {
                    deserializedResponseValidationProperties.maxLength = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResponseValidationProperties;
        });
    }
}
