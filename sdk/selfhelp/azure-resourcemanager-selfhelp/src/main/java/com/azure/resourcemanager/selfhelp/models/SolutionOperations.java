// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/**
 * Resource collection API of SolutionOperations.
 */
public interface SolutionOperations {
    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response}.
     */
    Response<SolutionResource> getWithResponse(String scope, String solutionResourceName, Context context);

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution.
     */
    SolutionResource get(String scope, String solutionResourceName);

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionWarmUpRequestBody The required request body for warming up a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> warmUpWithResponse(String scope, String solutionResourceName,
        SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context);

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void warmUp(String scope, String solutionResourceName);

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response}.
     */
    SolutionResource getById(String id);

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response}.
     */
    Response<SolutionResource> getByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new SolutionResource resource.
     * 
     * @param name resource name.
     * @return the first stage of the new SolutionResource definition.
     */
    SolutionResource.DefinitionStages.Blank define(String name);
}
