// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.models.ReplacementMaps;
import com.azure.resourcemanager.selfhelp.models.Section;
import com.azure.resourcemanager.selfhelp.models.SolutionProvisioningState;
import com.azure.resourcemanager.selfhelp.models.TriggerCriterion;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Solution result.
 */
@Fluent
public final class SolutionResourceProperties implements JsonSerializable<SolutionResourceProperties> {
    /*
     * Solution request trigger criteria
     */
    private List<TriggerCriterion> triggerCriteria;

    /*
     * Client input parameters to run Solution
     */
    private Map<String, String> parameters;

    /*
     * Solution Id to identify single solution.
     */
    private String solutionId;

    /*
     * Status of solution provisioning.
     */
    private SolutionProvisioningState provisioningState;

    /*
     * The title.
     */
    private String title;

    /*
     * The HTML content that needs to be rendered and shown to customer.
     */
    private String content;

    /*
     * Solution replacement maps.
     */
    private ReplacementMaps replacementMaps;

    /*
     * List of section object.
     */
    private List<Section> sections;

    /**
     * Creates an instance of SolutionResourceProperties class.
     */
    public SolutionResourceProperties() {
    }

    /**
     * Get the triggerCriteria property: Solution request trigger criteria.
     * 
     * @return the triggerCriteria value.
     */
    public List<TriggerCriterion> triggerCriteria() {
        return this.triggerCriteria;
    }

    /**
     * Set the triggerCriteria property: Solution request trigger criteria.
     * 
     * @param triggerCriteria the triggerCriteria value to set.
     * @return the SolutionResourceProperties object itself.
     */
    public SolutionResourceProperties withTriggerCriteria(List<TriggerCriterion> triggerCriteria) {
        this.triggerCriteria = triggerCriteria;
        return this;
    }

    /**
     * Get the parameters property: Client input parameters to run Solution.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Client input parameters to run Solution.
     * 
     * @param parameters the parameters value to set.
     * @return the SolutionResourceProperties object itself.
     */
    public SolutionResourceProperties withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the solutionId property: Solution Id to identify single solution.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Get the provisioningState property: Status of solution provisioning.
     * 
     * @return the provisioningState value.
     */
    public SolutionProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the title property: The title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the content property: The HTML content that needs to be rendered and shown to customer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Get the replacementMaps property: Solution replacement maps.
     * 
     * @return the replacementMaps value.
     */
    public ReplacementMaps replacementMaps() {
        return this.replacementMaps;
    }

    /**
     * Get the sections property: List of section object.
     * 
     * @return the sections value.
     */
    public List<Section> sections() {
        return this.sections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (triggerCriteria() != null) {
            triggerCriteria().forEach(e -> e.validate());
        }
        if (replacementMaps() != null) {
            replacementMaps().validate();
        }
        if (sections() != null) {
            sections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("triggerCriteria", this.triggerCriteria,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionResourceProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionResourceProperties.
     */
    public static SolutionResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionResourceProperties deserializedSolutionResourceProperties = new SolutionResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("triggerCriteria".equals(fieldName)) {
                    List<TriggerCriterion> triggerCriteria
                        = reader.readArray(reader1 -> TriggerCriterion.fromJson(reader1));
                    deserializedSolutionResourceProperties.triggerCriteria = triggerCriteria;
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedSolutionResourceProperties.parameters = parameters;
                } else if ("solutionId".equals(fieldName)) {
                    deserializedSolutionResourceProperties.solutionId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSolutionResourceProperties.provisioningState
                        = SolutionProvisioningState.fromString(reader.getString());
                } else if ("title".equals(fieldName)) {
                    deserializedSolutionResourceProperties.title = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedSolutionResourceProperties.content = reader.getString();
                } else if ("replacementMaps".equals(fieldName)) {
                    deserializedSolutionResourceProperties.replacementMaps = ReplacementMaps.fromJson(reader);
                } else if ("sections".equals(fieldName)) {
                    List<Section> sections = reader.readArray(reader1 -> Section.fromJson(reader1));
                    deserializedSolutionResourceProperties.sections = sections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionResourceProperties;
        });
    }
}
