// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.selfhelp.fluent.SolutionOperationsClient;
import com.azure.resourcemanager.selfhelp.fluent.models.SolutionResourceInner;
import com.azure.resourcemanager.selfhelp.models.SolutionPatchRequestBody;
import com.azure.resourcemanager.selfhelp.models.SolutionWarmUpRequestBody;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in SolutionOperationsClient.
 */
public final class SolutionOperationsClientImpl implements SolutionOperationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final SolutionOperationsService service;

    /**
     * The service client containing this operation class.
     */
    private final HelpRPImpl client;

    /**
     * Initializes an instance of SolutionOperationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    SolutionOperationsClientImpl(HelpRPImpl client) {
        this.service = RestProxy.create(SolutionOperationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for HelpRPSolutionOperations to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "HelpRPSolutionOperat")
    public interface SolutionOperationsService {
        @Headers({ "Content-Type: application/json" })
        @Put("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200, 201 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SolutionResourceInner solutionRequestBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<SolutionResourceInner>> get(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> update(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SolutionPatchRequestBody solutionPatchRequestBody,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}/warmup")
        @ExpectedResponses({ 204 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> warmUp(@HostParam("$host") String endpoint,
            @PathParam(value = "scope", encoded = true) String scope,
            @PathParam("solutionResourceName") String solutionResourceName,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") SolutionWarmUpRequestBody solutionWarmUpRequestBody,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionRequestBody != null) {
            solutionRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), scope, solutionResourceName,
                this.client.getApiVersion(), solutionRequestBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionRequestBody != null) {
            solutionRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), scope, solutionResourceName, this.client.getApiVersion(),
            solutionRequestBody, accept, context);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreateAsync(String scope,
        String solutionResourceName, SolutionResourceInner solutionRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(scope, solutionResourceName, solutionRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class,
            this.client.getContext());
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreateAsync(String scope,
        String solutionResourceName) {
        final SolutionResourceInner solutionRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(scope, solutionResourceName, solutionRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class,
            this.client.getContext());
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreateAsync(String scope,
        String solutionResourceName, SolutionResourceInner solutionRequestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = createWithResponseAsync(scope, solutionResourceName, solutionRequestBody, context);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class, context);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreate(String scope,
        String solutionResourceName) {
        final SolutionResourceInner solutionRequestBody = null;
        return this.beginCreateAsync(scope, solutionResourceName, solutionRequestBody).getSyncPoller();
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreate(String scope,
        String solutionResourceName, SolutionResourceInner solutionRequestBody, Context context) {
        return this.beginCreateAsync(scope, solutionResourceName, solutionRequestBody, context).getSyncPoller();
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> createAsync(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody) {
        return beginCreateAsync(scope, solutionResourceName, solutionRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> createAsync(String scope, String solutionResourceName) {
        final SolutionResourceInner solutionRequestBody = null;
        return beginCreateAsync(scope, solutionResourceName, solutionRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> createAsync(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody, Context context) {
        return beginCreateAsync(scope, solutionResourceName, solutionRequestBody, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner create(String scope, String solutionResourceName) {
        final SolutionResourceInner solutionRequestBody = null;
        return createAsync(scope, solutionResourceName, solutionRequestBody).block();
    }

    /**
     * Creates a solution for the specific Azure resource or subscription using the inputs ‘solutionId and
     * requiredInputs’ from discovery solutions. &lt;br/&gt; Azure solutions comprise a comprehensive library of
     * self-help resources that have been thoughtfully curated by Azure engineers to aid customers in resolving typical
     * troubleshooting issues. These solutions encompass: &lt;br/&gt; (1.) Dynamic and context-aware diagnostics, guided
     * troubleshooting wizards, and data visualizations. &lt;br/&gt; (2.) Rich instructional video tutorials and
     * illustrative diagrams and images. &lt;br/&gt; (3.) Thoughtfully assembled textual troubleshooting instructions.
     * &lt;br/&gt; All these components are seamlessly converged into unified solutions tailored to address a specific
     * support problem area.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner create(String scope, String solutionResourceName,
        SolutionResourceInner solutionRequestBody, Context context) {
        return createAsync(scope, solutionResourceName, solutionRequestBody, context).block();
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionResourceInner>> getWithResponseAsync(String scope, String solutionResourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), scope, solutionResourceName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<SolutionResourceInner>> getWithResponseAsync(String scope, String solutionResourceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), scope, solutionResourceName, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> getAsync(String scope, String solutionResourceName) {
        return getWithResponseAsync(scope, solutionResourceName).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<SolutionResourceInner> getWithResponse(String scope, String solutionResourceName, Context context) {
        return getWithResponseAsync(scope, solutionResourceName, context).block();
    }

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner get(String scope, String solutionResourceName) {
        return getWithResponse(scope, solutionResourceName, Context.NONE).getValue();
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionPatchRequestBody != null) {
            solutionPatchRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), scope, solutionResourceName,
                this.client.getApiVersion(), solutionPatchRequestBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionPatchRequestBody != null) {
            solutionPatchRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), scope, solutionResourceName, this.client.getApiVersion(),
            solutionPatchRequestBody, accept, context);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdateAsync(String scope,
        String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(scope, solutionResourceName, solutionPatchRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdateAsync(String scope,
        String solutionResourceName) {
        final SolutionPatchRequestBody solutionPatchRequestBody = null;
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(scope, solutionResourceName, solutionPatchRequestBody);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class,
            this.client.getContext());
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdateAsync(String scope,
        String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = updateWithResponseAsync(scope, solutionResourceName, solutionPatchRequestBody, context);
        return this.client.<SolutionResourceInner, SolutionResourceInner>getLroResult(mono,
            this.client.getHttpPipeline(), SolutionResourceInner.class, SolutionResourceInner.class, context);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdate(String scope,
        String solutionResourceName) {
        final SolutionPatchRequestBody solutionPatchRequestBody = null;
        return this.beginUpdateAsync(scope, solutionResourceName, solutionPatchRequestBody).getSyncPoller();
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdate(String scope,
        String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        return this.beginUpdateAsync(scope, solutionResourceName, solutionPatchRequestBody, context).getSyncPoller();
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> updateAsync(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody) {
        return beginUpdateAsync(scope, solutionResourceName, solutionPatchRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> updateAsync(String scope, String solutionResourceName) {
        final SolutionPatchRequestBody solutionPatchRequestBody = null;
        return beginUpdateAsync(scope, solutionResourceName, solutionPatchRequestBody).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SolutionResourceInner> updateAsync(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        return beginUpdateAsync(scope, solutionResourceName, solutionPatchRequestBody, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner update(String scope, String solutionResourceName) {
        final SolutionPatchRequestBody solutionPatchRequestBody = null;
        return updateAsync(scope, solutionResourceName, solutionPatchRequestBody).block();
    }

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SolutionResourceInner update(String scope, String solutionResourceName,
        SolutionPatchRequestBody solutionPatchRequestBody, Context context) {
        return updateAsync(scope, solutionResourceName, solutionPatchRequestBody, context).block();
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionWarmUpRequestBody The required request body for warming up a solution resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> warmUpWithResponseAsync(String scope, String solutionResourceName,
        SolutionWarmUpRequestBody solutionWarmUpRequestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionWarmUpRequestBody != null) {
            solutionWarmUpRequestBody.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.warmUp(this.client.getEndpoint(), scope, solutionResourceName,
                this.client.getApiVersion(), solutionWarmUpRequestBody, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionWarmUpRequestBody The required request body for warming up a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> warmUpWithResponseAsync(String scope, String solutionResourceName,
        SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (solutionResourceName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter solutionResourceName is required and cannot be null."));
        }
        if (solutionWarmUpRequestBody != null) {
            solutionWarmUpRequestBody.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.warmUp(this.client.getEndpoint(), scope, solutionResourceName, this.client.getApiVersion(),
            solutionWarmUpRequestBody, accept, context);
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> warmUpAsync(String scope, String solutionResourceName) {
        final SolutionWarmUpRequestBody solutionWarmUpRequestBody = null;
        return warmUpWithResponseAsync(scope, solutionResourceName, solutionWarmUpRequestBody)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @param solutionWarmUpRequestBody The required request body for warming up a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> warmUpWithResponse(String scope, String solutionResourceName,
        SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context) {
        return warmUpWithResponseAsync(scope, solutionResourceName, solutionWarmUpRequestBody, context).block();
    }

    /**
     * Warm up the solution resource by preloading asynchronous diagnostics results into cache.
     * 
     * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
     * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void warmUp(String scope, String solutionResourceName) {
        final SolutionWarmUpRequestBody solutionWarmUpRequestBody = null;
        warmUpWithResponse(scope, solutionResourceName, solutionWarmUpRequestBody, Context.NONE);
    }
}
