// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Troubleshooter ContinueRequest body.
 */
@Fluent
public final class ContinueRequestBody implements JsonSerializable<ContinueRequestBody> {
    /*
     * Unique id of the result.
     */
    private String stepId;

    /*
     * The responses property.
     */
    private List<TroubleshooterResponse> responses;

    /**
     * Creates an instance of ContinueRequestBody class.
     */
    public ContinueRequestBody() {
    }

    /**
     * Get the stepId property: Unique id of the result.
     * 
     * @return the stepId value.
     */
    public String stepId() {
        return this.stepId;
    }

    /**
     * Set the stepId property: Unique id of the result.
     * 
     * @param stepId the stepId value to set.
     * @return the ContinueRequestBody object itself.
     */
    public ContinueRequestBody withStepId(String stepId) {
        this.stepId = stepId;
        return this;
    }

    /**
     * Get the responses property: The responses property.
     * 
     * @return the responses value.
     */
    public List<TroubleshooterResponse> responses() {
        return this.responses;
    }

    /**
     * Set the responses property: The responses property.
     * 
     * @param responses the responses value to set.
     * @return the ContinueRequestBody object itself.
     */
    public ContinueRequestBody withResponses(List<TroubleshooterResponse> responses) {
        this.responses = responses;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (responses() != null) {
            responses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("stepId", this.stepId);
        jsonWriter.writeArrayField("responses", this.responses, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContinueRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContinueRequestBody if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ContinueRequestBody.
     */
    public static ContinueRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ContinueRequestBody deserializedContinueRequestBody = new ContinueRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("stepId".equals(fieldName)) {
                    deserializedContinueRequestBody.stepId = reader.getString();
                } else if ("responses".equals(fieldName)) {
                    List<TroubleshooterResponse> responses
                        = reader.readArray(reader1 -> TroubleshooterResponse.fromJson(reader1));
                    deserializedContinueRequestBody.responses = responses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedContinueRequestBody;
        });
    }
}
