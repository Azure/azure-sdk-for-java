// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.selfhelp.fluent.models.TroubleshooterResourceInner;
import java.util.List;
import java.util.Map;

/**
 * An immutable client-side representation of TroubleshooterResource.
 */
public interface TroubleshooterResource {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     * 
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     * 
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the solutionId property: Solution Id to identify single troubleshooter.
     * 
     * @return the solutionId value.
     */
    String solutionId();

    /**
     * Gets the parameters property: Client input parameters to run Troubleshooter Resource.
     * 
     * @return the parameters value.
     */
    Map<String, String> parameters();

    /**
     * Gets the provisioningState property: Status of troubleshooter provisioning.
     * 
     * @return the provisioningState value.
     */
    TroubleshooterProvisioningState provisioningState();

    /**
     * Gets the steps property: List of step object.
     * 
     * @return the steps value.
     */
    List<Step> steps();

    /**
     * Gets the inner com.azure.resourcemanager.selfhelp.fluent.models.TroubleshooterResourceInner object.
     * 
     * @return the inner object.
     */
    TroubleshooterResourceInner innerModel();

    /**
     * The entirety of the TroubleshooterResource definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }

    /**
     * The TroubleshooterResource definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of the TroubleshooterResource definition.
         */
        interface Blank extends WithScope {
        }

        /**
         * The stage of the TroubleshooterResource definition allowing to specify parent resource.
         */
        interface WithScope {
            /**
             * Specifies scope.
             * 
             * @param scope scope = resourceUri of affected resource.&lt;br/&gt; For example:
             * /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read.
             * @return the next definition stage.
             */
            WithCreate withExistingScope(String scope);
        }

        /**
         * The stage of the TroubleshooterResource definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithSolutionId, DefinitionStages.WithParameters {
            /**
             * Executes the create request.
             * 
             * @return the created resource.
             */
            TroubleshooterResource create();

            /**
             * Executes the create request.
             * 
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            TroubleshooterResource create(Context context);
        }

        /**
         * The stage of the TroubleshooterResource definition allowing to specify solutionId.
         */
        interface WithSolutionId {
            /**
             * Specifies the solutionId property: Solution Id to identify single troubleshooter..
             * 
             * @param solutionId Solution Id to identify single troubleshooter.
             * @return the next definition stage.
             */
            WithCreate withSolutionId(String solutionId);
        }

        /**
         * The stage of the TroubleshooterResource definition allowing to specify parameters.
         */
        interface WithParameters {
            /**
             * Specifies the parameters property: Client input parameters to run Troubleshooter Resource.
             * 
             * @param parameters Client input parameters to run Troubleshooter Resource.
             * @return the next definition stage.
             */
            WithCreate withParameters(Map<String, String> parameters);
        }
    }

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @return the refreshed resource.
     */
    TroubleshooterResource refresh();

    /**
     * Refreshes the resource to sync with Azure.
     * 
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    TroubleshooterResource refresh(Context context);

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @param continueRequestBody The required request body for going to next step in Troubleshooter resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    TroubleshootersContinueMethodResponse continueMethodWithResponse(ContinueRequestBody continueRequestBody,
        Context context);

    /**
     * Uses ‘stepId’ and ‘responses’ as the trigger to continue the troubleshooting steps for the respective
     * troubleshooter resource name. &lt;br/&gt;Continue API is used to provide inputs that are required for the
     * specific troubleshooter to progress into the next step in the process. This API is used after the Troubleshooter
     * has been created using the Create API.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void continueMethod();

    /**
     * Ends the troubleshooter action.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    TroubleshootersEndResponse endWithResponse(Context context);

    /**
     * Ends the troubleshooter action.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void end();

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response.
     */
    Response<RestartTroubleshooterResponse> restartWithResponse(Context context);

    /**
     * Restarts the troubleshooter API using applicable troubleshooter resource name as the input.&lt;br/&gt; It returns
     * new resource name which should be used in subsequent request. The old resource name is obsolete after this API is
     * invoked.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return troubleshooter restart response.
     */
    RestartTroubleshooterResponse restart();
}
