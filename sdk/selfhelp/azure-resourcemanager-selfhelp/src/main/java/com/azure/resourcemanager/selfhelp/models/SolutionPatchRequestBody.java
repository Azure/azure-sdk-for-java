// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.fluent.models.SolutionResourceProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Solution PatchRequest body.
 */
@Fluent
public final class SolutionPatchRequestBody implements JsonSerializable<SolutionPatchRequestBody> {
    /*
     * Solution result
     */
    private SolutionResourceProperties innerProperties;

    /**
     * Creates an instance of SolutionPatchRequestBody class.
     */
    public SolutionPatchRequestBody() {
    }

    /**
     * Get the innerProperties property: Solution result.
     * 
     * @return the innerProperties value.
     */
    private SolutionResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the triggerCriteria property: Solution request trigger criteria.
     * 
     * @return the triggerCriteria value.
     */
    public List<TriggerCriterion> triggerCriteria() {
        return this.innerProperties() == null ? null : this.innerProperties().triggerCriteria();
    }

    /**
     * Set the triggerCriteria property: Solution request trigger criteria.
     * 
     * @param triggerCriteria the triggerCriteria value to set.
     * @return the SolutionPatchRequestBody object itself.
     */
    public SolutionPatchRequestBody withTriggerCriteria(List<TriggerCriterion> triggerCriteria) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionResourceProperties();
        }
        this.innerProperties().withTriggerCriteria(triggerCriteria);
        return this;
    }

    /**
     * Get the parameters property: Client input parameters to run Solution.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.innerProperties() == null ? null : this.innerProperties().parameters();
    }

    /**
     * Set the parameters property: Client input parameters to run Solution.
     * 
     * @param parameters the parameters value to set.
     * @return the SolutionPatchRequestBody object itself.
     */
    public SolutionPatchRequestBody withParameters(Map<String, String> parameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionResourceProperties();
        }
        this.innerProperties().withParameters(parameters);
        return this;
    }

    /**
     * Get the solutionId property: Solution Id to identify single solution.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.innerProperties() == null ? null : this.innerProperties().solutionId();
    }

    /**
     * Get the provisioningState property: Status of solution provisioning.
     * 
     * @return the provisioningState value.
     */
    public SolutionProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the title property: The title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.innerProperties() == null ? null : this.innerProperties().title();
    }

    /**
     * Get the content property: The HTML content that needs to be rendered and shown to customer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.innerProperties() == null ? null : this.innerProperties().content();
    }

    /**
     * Get the replacementMaps property: Solution replacement maps.
     * 
     * @return the replacementMaps value.
     */
    public ReplacementMaps replacementMaps() {
        return this.innerProperties() == null ? null : this.innerProperties().replacementMaps();
    }

    /**
     * Get the sections property: List of section object.
     * 
     * @return the sections value.
     */
    public List<Section> sections() {
        return this.innerProperties() == null ? null : this.innerProperties().sections();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionPatchRequestBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionPatchRequestBody if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionPatchRequestBody.
     */
    public static SolutionPatchRequestBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionPatchRequestBody deserializedSolutionPatchRequestBody = new SolutionPatchRequestBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedSolutionPatchRequestBody.innerProperties = SolutionResourceProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionPatchRequestBody;
        });
    }
}
