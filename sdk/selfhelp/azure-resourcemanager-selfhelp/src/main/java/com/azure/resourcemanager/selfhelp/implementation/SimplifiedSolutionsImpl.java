// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.selfhelp.fluent.SimplifiedSolutionsClient;
import com.azure.resourcemanager.selfhelp.fluent.models.SimplifiedSolutionsResourceInner;
import com.azure.resourcemanager.selfhelp.models.SimplifiedSolutions;
import com.azure.resourcemanager.selfhelp.models.SimplifiedSolutionsResource;

public final class SimplifiedSolutionsImpl implements SimplifiedSolutions {
    private static final ClientLogger LOGGER = new ClientLogger(SimplifiedSolutionsImpl.class);

    private final SimplifiedSolutionsClient innerClient;

    private final com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager;

    public SimplifiedSolutionsImpl(SimplifiedSolutionsClient innerClient,
        com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SimplifiedSolutionsResource> getWithResponse(String scope, String simplifiedSolutionsResourceName,
        Context context) {
        Response<SimplifiedSolutionsResourceInner> inner
            = this.serviceClient().getWithResponse(scope, simplifiedSolutionsResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SimplifiedSolutionsResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SimplifiedSolutionsResource get(String scope, String simplifiedSolutionsResourceName) {
        SimplifiedSolutionsResourceInner inner = this.serviceClient().get(scope, simplifiedSolutionsResourceName);
        if (inner != null) {
            return new SimplifiedSolutionsResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public SimplifiedSolutionsResource getById(String id) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String simplifiedSolutionsResourceName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}",
            "simplifiedSolutionsResourceName");
        if (simplifiedSolutionsResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'simplifiedSolutions'.", id)));
        }
        return this.getWithResponse(scope, simplifiedSolutionsResourceName, Context.NONE).getValue();
    }

    public Response<SimplifiedSolutionsResource> getByIdWithResponse(String id, Context context) {
        String scope = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}", "scope");
        if (scope == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String simplifiedSolutionsResourceName = ResourceManagerUtils.getValueFromIdByParameterName(id,
            "/{scope}/providers/Microsoft.Help/simplifiedSolutions/{simplifiedSolutionsResourceName}",
            "simplifiedSolutionsResourceName");
        if (simplifiedSolutionsResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'simplifiedSolutions'.", id)));
        }
        return this.getWithResponse(scope, simplifiedSolutionsResourceName, context);
    }

    private SimplifiedSolutionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.selfhelp.SelfHelpManager manager() {
        return this.serviceManager;
    }

    public SimplifiedSolutionsResourceImpl define(String name) {
        return new SimplifiedSolutionsResourceImpl(name, this.manager());
    }
}
