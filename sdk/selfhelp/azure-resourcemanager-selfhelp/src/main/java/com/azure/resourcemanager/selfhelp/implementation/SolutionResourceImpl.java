// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.selfhelp.fluent.models.SolutionResourceInner;
import com.azure.resourcemanager.selfhelp.models.ReplacementMaps;
import com.azure.resourcemanager.selfhelp.models.Section;
import com.azure.resourcemanager.selfhelp.models.SolutionPatchRequestBody;
import com.azure.resourcemanager.selfhelp.models.SolutionProvisioningState;
import com.azure.resourcemanager.selfhelp.models.SolutionResource;
import com.azure.resourcemanager.selfhelp.models.SolutionWarmUpRequestBody;
import com.azure.resourcemanager.selfhelp.models.TriggerCriterion;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class SolutionResourceImpl
    implements SolutionResource, SolutionResource.Definition, SolutionResource.Update {
    private SolutionResourceInner innerObject;

    private final com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public List<TriggerCriterion> triggerCriteria() {
        List<TriggerCriterion> inner = this.innerModel().triggerCriteria();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, String> parameters() {
        Map<String, String> inner = this.innerModel().parameters();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String solutionId() {
        return this.innerModel().solutionId();
    }

    public SolutionProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String title() {
        return this.innerModel().title();
    }

    public String content() {
        return this.innerModel().content();
    }

    public ReplacementMaps replacementMaps() {
        return this.innerModel().replacementMaps();
    }

    public List<Section> sections() {
        List<Section> inner = this.innerModel().sections();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public SolutionResourceInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.selfhelp.SelfHelpManager manager() {
        return this.serviceManager;
    }

    private String scope;

    private String solutionResourceName;

    private SolutionPatchRequestBody updateSolutionPatchRequestBody;

    public SolutionResourceImpl withExistingScope(String scope) {
        this.scope = scope;
        return this;
    }

    public SolutionResource create() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionOperations()
            .create(scope, solutionResourceName, this.innerModel(), Context.NONE);
        return this;
    }

    public SolutionResource create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionOperations()
            .create(scope, solutionResourceName, this.innerModel(), context);
        return this;
    }

    SolutionResourceImpl(String name, com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager) {
        this.innerObject = new SolutionResourceInner();
        this.serviceManager = serviceManager;
        this.solutionResourceName = name;
    }

    public SolutionResourceImpl update() {
        this.updateSolutionPatchRequestBody = new SolutionPatchRequestBody();
        return this;
    }

    public SolutionResource apply() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionOperations()
            .update(scope, solutionResourceName, updateSolutionPatchRequestBody, Context.NONE);
        return this;
    }

    public SolutionResource apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionOperations()
            .update(scope, solutionResourceName, updateSolutionPatchRequestBody, context);
        return this;
    }

    SolutionResourceImpl(SolutionResourceInner innerObject,
        com.azure.resourcemanager.selfhelp.SelfHelpManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.scope = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}", "scope");
        this.solutionResourceName = ResourceManagerUtils.getValueFromIdByParameterName(innerObject.id(),
            "/{scope}/providers/Microsoft.Help/solutions/{solutionResourceName}", "solutionResourceName");
    }

    public SolutionResource refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionOperations()
            .getWithResponse(scope, solutionResourceName, Context.NONE)
            .getValue();
        return this;
    }

    public SolutionResource refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getSolutionOperations()
            .getWithResponse(scope, solutionResourceName, context)
            .getValue();
        return this;
    }

    public Response<Void> warmUpWithResponse(SolutionWarmUpRequestBody solutionWarmUpRequestBody, Context context) {
        return serviceManager.solutionOperations()
            .warmUpWithResponse(scope, solutionResourceName, solutionWarmUpRequestBody, context);
    }

    public void warmUp() {
        serviceManager.solutionOperations().warmUp(scope, solutionResourceName);
    }

    public SolutionResourceImpl withTriggerCriteria(List<TriggerCriterion> triggerCriteria) {
        if (isInCreateMode()) {
            this.innerModel().withTriggerCriteria(triggerCriteria);
            return this;
        } else {
            this.updateSolutionPatchRequestBody.withTriggerCriteria(triggerCriteria);
            return this;
        }
    }

    public SolutionResourceImpl withParameters(Map<String, String> parameters) {
        if (isInCreateMode()) {
            this.innerModel().withParameters(parameters);
            return this;
        } else {
            this.updateSolutionPatchRequestBody.withParameters(parameters);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
