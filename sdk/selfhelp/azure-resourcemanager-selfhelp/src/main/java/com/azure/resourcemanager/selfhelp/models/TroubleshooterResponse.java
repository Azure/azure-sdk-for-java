// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User Response for Troubleshooter continue request.
 */
@Fluent
public final class TroubleshooterResponse implements JsonSerializable<TroubleshooterResponse> {
    /*
     * id of the question.
     */
    private String questionId;

    /*
     * Type of Question
     */
    private QuestionType questionType;

    /*
     * Response key for SingleInput. For Multi-line test/open ended question it is free form text
     */
    private String response;

    /**
     * Creates an instance of TroubleshooterResponse class.
     */
    public TroubleshooterResponse() {
    }

    /**
     * Get the questionId property: id of the question.
     * 
     * @return the questionId value.
     */
    public String questionId() {
        return this.questionId;
    }

    /**
     * Set the questionId property: id of the question.
     * 
     * @param questionId the questionId value to set.
     * @return the TroubleshooterResponse object itself.
     */
    public TroubleshooterResponse withQuestionId(String questionId) {
        this.questionId = questionId;
        return this;
    }

    /**
     * Get the questionType property: Type of Question.
     * 
     * @return the questionType value.
     */
    public QuestionType questionType() {
        return this.questionType;
    }

    /**
     * Set the questionType property: Type of Question.
     * 
     * @param questionType the questionType value to set.
     * @return the TroubleshooterResponse object itself.
     */
    public TroubleshooterResponse withQuestionType(QuestionType questionType) {
        this.questionType = questionType;
        return this;
    }

    /**
     * Get the response property: Response key for SingleInput. For Multi-line test/open ended question it is free form
     * text.
     * 
     * @return the response value.
     */
    public String response() {
        return this.response;
    }

    /**
     * Set the response property: Response key for SingleInput. For Multi-line test/open ended question it is free form
     * text.
     * 
     * @param response the response value to set.
     * @return the TroubleshooterResponse object itself.
     */
    public TroubleshooterResponse withResponse(String response) {
        this.response = response;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("questionId", this.questionId);
        jsonWriter.writeStringField("questionType", this.questionType == null ? null : this.questionType.toString());
        jsonWriter.writeStringField("response", this.response);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of TroubleshooterResponse from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of TroubleshooterResponse if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the TroubleshooterResponse.
     */
    public static TroubleshooterResponse fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            TroubleshooterResponse deserializedTroubleshooterResponse = new TroubleshooterResponse();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("questionId".equals(fieldName)) {
                    deserializedTroubleshooterResponse.questionId = reader.getString();
                } else if ("questionType".equals(fieldName)) {
                    deserializedTroubleshooterResponse.questionType = QuestionType.fromString(reader.getString());
                } else if ("response".equals(fieldName)) {
                    deserializedTroubleshooterResponse.response = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedTroubleshooterResponse;
        });
    }
}
