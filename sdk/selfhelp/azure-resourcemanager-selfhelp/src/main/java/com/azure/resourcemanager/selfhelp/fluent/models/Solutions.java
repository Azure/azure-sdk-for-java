// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.models.SolutionMetadataProperties;
import java.io.IOException;
import java.util.List;

/**
 * List of solutions.
 */
@Fluent
public final class Solutions implements JsonSerializable<Solutions> {
    /*
     * List of metadata.
     */
    private List<SolutionMetadataProperties> solutions;

    /**
     * Creates an instance of Solutions class.
     */
    public Solutions() {
    }

    /**
     * Get the solutions property: List of metadata.
     * 
     * @return the solutions value.
     */
    public List<SolutionMetadataProperties> solutions() {
        return this.solutions;
    }

    /**
     * Set the solutions property: List of metadata.
     * 
     * @param solutions the solutions value to set.
     * @return the Solutions object itself.
     */
    public Solutions withSolutions(List<SolutionMetadataProperties> solutions) {
        this.solutions = solutions;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (solutions() != null) {
            solutions().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("solutions", this.solutions, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Solutions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Solutions if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IOException If an error occurs while reading the Solutions.
     */
    public static Solutions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Solutions deserializedSolutions = new Solutions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutions".equals(fieldName)) {
                    List<SolutionMetadataProperties> solutions
                        = reader.readArray(reader1 -> SolutionMetadataProperties.fromJson(reader1));
                    deserializedSolutions.solutions = solutions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutions;
        });
    }
}
