// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Solutions Diagnostic.
 */
@Fluent
public final class SolutionsDiagnostic implements JsonSerializable<SolutionsDiagnostic> {
    /*
     * Solution Id to identify single Solutions Diagnostic
     */
    private String solutionId;

    /*
     * Denotes the status of the diagnostic resource.
     */
    private Status status;

    /*
     * Details of the status
     */
    private String statusDetails;

    /*
     * Place holder used in HTML Content replace control with the content
     */
    private String replacementKey;

    /*
     * Diagnostics estimated completion time in minutes
     */
    private String estimatedCompletionTime;

    /*
     * Required parameters of this item
     */
    private List<String> requiredParameters;

    /*
     * Diagnostic insights
     */
    private List<Insight> insights;

    /**
     * Creates an instance of SolutionsDiagnostic class.
     */
    public SolutionsDiagnostic() {
    }

    /**
     * Get the solutionId property: Solution Id to identify single Solutions Diagnostic.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id to identify single Solutions Diagnostic.
     * 
     * @param solutionId the solutionId value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the status property: Denotes the status of the diagnostic resource.
     * 
     * @return the status value.
     */
    public Status status() {
        return this.status;
    }

    /**
     * Set the status property: Denotes the status of the diagnostic resource.
     * 
     * @param status the status value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withStatus(Status status) {
        this.status = status;
        return this;
    }

    /**
     * Get the statusDetails property: Details of the status.
     * 
     * @return the statusDetails value.
     */
    public String statusDetails() {
        return this.statusDetails;
    }

    /**
     * Set the statusDetails property: Details of the status.
     * 
     * @param statusDetails the statusDetails value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withStatusDetails(String statusDetails) {
        this.statusDetails = statusDetails;
        return this;
    }

    /**
     * Get the replacementKey property: Place holder used in HTML Content replace control with the content.
     * 
     * @return the replacementKey value.
     */
    public String replacementKey() {
        return this.replacementKey;
    }

    /**
     * Set the replacementKey property: Place holder used in HTML Content replace control with the content.
     * 
     * @param replacementKey the replacementKey value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withReplacementKey(String replacementKey) {
        this.replacementKey = replacementKey;
        return this;
    }

    /**
     * Get the estimatedCompletionTime property: Diagnostics estimated completion time in minutes.
     * 
     * @return the estimatedCompletionTime value.
     */
    public String estimatedCompletionTime() {
        return this.estimatedCompletionTime;
    }

    /**
     * Set the estimatedCompletionTime property: Diagnostics estimated completion time in minutes.
     * 
     * @param estimatedCompletionTime the estimatedCompletionTime value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withEstimatedCompletionTime(String estimatedCompletionTime) {
        this.estimatedCompletionTime = estimatedCompletionTime;
        return this;
    }

    /**
     * Get the requiredParameters property: Required parameters of this item.
     * 
     * @return the requiredParameters value.
     */
    public List<String> requiredParameters() {
        return this.requiredParameters;
    }

    /**
     * Set the requiredParameters property: Required parameters of this item.
     * 
     * @param requiredParameters the requiredParameters value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withRequiredParameters(List<String> requiredParameters) {
        this.requiredParameters = requiredParameters;
        return this;
    }

    /**
     * Get the insights property: Diagnostic insights.
     * 
     * @return the insights value.
     */
    public List<Insight> insights() {
        return this.insights;
    }

    /**
     * Set the insights property: Diagnostic insights.
     * 
     * @param insights the insights value to set.
     * @return the SolutionsDiagnostic object itself.
     */
    public SolutionsDiagnostic withInsights(List<Insight> insights) {
        this.insights = insights;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (insights() != null) {
            insights().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("statusDetails", this.statusDetails);
        jsonWriter.writeStringField("replacementKey", this.replacementKey);
        jsonWriter.writeStringField("estimatedCompletionTime", this.estimatedCompletionTime);
        jsonWriter.writeArrayField("requiredParameters", this.requiredParameters,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("insights", this.insights, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionsDiagnostic from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionsDiagnostic if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionsDiagnostic.
     */
    public static SolutionsDiagnostic fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionsDiagnostic deserializedSolutionsDiagnostic = new SolutionsDiagnostic();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedSolutionsDiagnostic.solutionId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSolutionsDiagnostic.status = Status.fromString(reader.getString());
                } else if ("statusDetails".equals(fieldName)) {
                    deserializedSolutionsDiagnostic.statusDetails = reader.getString();
                } else if ("replacementKey".equals(fieldName)) {
                    deserializedSolutionsDiagnostic.replacementKey = reader.getString();
                } else if ("estimatedCompletionTime".equals(fieldName)) {
                    deserializedSolutionsDiagnostic.estimatedCompletionTime = reader.getString();
                } else if ("requiredParameters".equals(fieldName)) {
                    List<String> requiredParameters = reader.readArray(reader1 -> reader1.getString());
                    deserializedSolutionsDiagnostic.requiredParameters = requiredParameters;
                } else if ("insights".equals(fieldName)) {
                    List<Insight> insights = reader.readArray(reader1 -> Insight.fromJson(reader1));
                    deserializedSolutionsDiagnostic.insights = insights;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionsDiagnostic;
        });
    }
}
