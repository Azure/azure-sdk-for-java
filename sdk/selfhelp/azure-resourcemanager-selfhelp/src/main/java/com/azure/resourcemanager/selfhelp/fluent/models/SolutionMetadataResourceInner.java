// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Solution Metadata resource. */
@Fluent
public final class SolutionMetadataResourceInner extends ProxyResource {
    /*
     * Solution metadata Resource properties.
     */
    @JsonProperty(value = "properties")
    private SolutionMetadataProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /** Creates an instance of SolutionMetadataResourceInner class. */
    public SolutionMetadataResourceInner() {
    }

    /**
     * Get the innerProperties property: Solution metadata Resource properties.
     *
     * @return the innerProperties value.
     */
    private SolutionMetadataProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the solutionId property: Solution Id.
     *
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.innerProperties() == null ? null : this.innerProperties().solutionId();
    }

    /**
     * Set the solutionId property: Solution Id.
     *
     * @param solutionId the solutionId value to set.
     * @return the SolutionMetadataResourceInner object itself.
     */
    public SolutionMetadataResourceInner withSolutionId(String solutionId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionMetadataProperties();
        }
        this.innerProperties().withSolutionId(solutionId);
        return this;
    }

    /**
     * Get the solutionType property: Solution Type.
     *
     * @return the solutionType value.
     */
    public String solutionType() {
        return this.innerProperties() == null ? null : this.innerProperties().solutionType();
    }

    /**
     * Set the solutionType property: Solution Type.
     *
     * @param solutionType the solutionType value to set.
     * @return the SolutionMetadataResourceInner object itself.
     */
    public SolutionMetadataResourceInner withSolutionType(String solutionType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionMetadataProperties();
        }
        this.innerProperties().withSolutionType(solutionType);
        return this;
    }

    /**
     * Get the description property: A detailed description of solution.
     *
     * @return the description value.
     */
    public String description() {
        return this.innerProperties() == null ? null : this.innerProperties().description();
    }

    /**
     * Set the description property: A detailed description of solution.
     *
     * @param description the description value to set.
     * @return the SolutionMetadataResourceInner object itself.
     */
    public SolutionMetadataResourceInner withDescription(String description) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionMetadataProperties();
        }
        this.innerProperties().withDescription(description);
        return this;
    }

    /**
     * Get the requiredParameterSets property: Required parameters for invoking this particular solution.
     *
     * @return the requiredParameterSets value.
     */
    public List<List<String>> requiredParameterSets() {
        return this.innerProperties() == null ? null : this.innerProperties().requiredParameterSets();
    }

    /**
     * Set the requiredParameterSets property: Required parameters for invoking this particular solution.
     *
     * @param requiredParameterSets the requiredParameterSets value to set.
     * @return the SolutionMetadataResourceInner object itself.
     */
    public SolutionMetadataResourceInner withRequiredParameterSets(List<List<String>> requiredParameterSets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new SolutionMetadataProperties();
        }
        this.innerProperties().withRequiredParameterSets(requiredParameterSets);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
