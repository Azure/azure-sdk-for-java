// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Solutions metrics based chart.
 */
@Fluent
public final class MetricsBasedChart implements JsonSerializable<MetricsBasedChart> {
    /*
     * Chart name
     */
    private String name;

    /*
     * Allowed values are Sum, Avg, Count, Min, Max. Default is Sum
     */
    private AggregationType aggregationType;

    /*
     * Time span duration
     */
    private String timeSpanDuration;

    /*
     * Chart title
     */
    private String title;

    /*
     * Filter group
     */
    private FilterGroup filterGroup;

    /*
     * Place holder used in HTML Content replace control with the content
     */
    private String replacementKey;

    /**
     * Creates an instance of MetricsBasedChart class.
     */
    public MetricsBasedChart() {
    }

    /**
     * Get the name property: Chart name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Chart name.
     * 
     * @param name the name value to set.
     * @return the MetricsBasedChart object itself.
     */
    public MetricsBasedChart withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the aggregationType property: Allowed values are Sum, Avg, Count, Min, Max. Default is Sum.
     * 
     * @return the aggregationType value.
     */
    public AggregationType aggregationType() {
        return this.aggregationType;
    }

    /**
     * Set the aggregationType property: Allowed values are Sum, Avg, Count, Min, Max. Default is Sum.
     * 
     * @param aggregationType the aggregationType value to set.
     * @return the MetricsBasedChart object itself.
     */
    public MetricsBasedChart withAggregationType(AggregationType aggregationType) {
        this.aggregationType = aggregationType;
        return this;
    }

    /**
     * Get the timeSpanDuration property: Time span duration.
     * 
     * @return the timeSpanDuration value.
     */
    public String timeSpanDuration() {
        return this.timeSpanDuration;
    }

    /**
     * Set the timeSpanDuration property: Time span duration.
     * 
     * @param timeSpanDuration the timeSpanDuration value to set.
     * @return the MetricsBasedChart object itself.
     */
    public MetricsBasedChart withTimeSpanDuration(String timeSpanDuration) {
        this.timeSpanDuration = timeSpanDuration;
        return this;
    }

    /**
     * Get the title property: Chart title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Set the title property: Chart title.
     * 
     * @param title the title value to set.
     * @return the MetricsBasedChart object itself.
     */
    public MetricsBasedChart withTitle(String title) {
        this.title = title;
        return this;
    }

    /**
     * Get the filterGroup property: Filter group.
     * 
     * @return the filterGroup value.
     */
    public FilterGroup filterGroup() {
        return this.filterGroup;
    }

    /**
     * Set the filterGroup property: Filter group.
     * 
     * @param filterGroup the filterGroup value to set.
     * @return the MetricsBasedChart object itself.
     */
    public MetricsBasedChart withFilterGroup(FilterGroup filterGroup) {
        this.filterGroup = filterGroup;
        return this;
    }

    /**
     * Get the replacementKey property: Place holder used in HTML Content replace control with the content.
     * 
     * @return the replacementKey value.
     */
    public String replacementKey() {
        return this.replacementKey;
    }

    /**
     * Set the replacementKey property: Place holder used in HTML Content replace control with the content.
     * 
     * @param replacementKey the replacementKey value to set.
     * @return the MetricsBasedChart object itself.
     */
    public MetricsBasedChart withReplacementKey(String replacementKey) {
        this.replacementKey = replacementKey;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filterGroup() != null) {
            filterGroup().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("aggregationType",
            this.aggregationType == null ? null : this.aggregationType.toString());
        jsonWriter.writeStringField("timeSpanDuration", this.timeSpanDuration);
        jsonWriter.writeStringField("title", this.title);
        jsonWriter.writeJsonField("filterGroup", this.filterGroup);
        jsonWriter.writeStringField("replacementKey", this.replacementKey);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricsBasedChart from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricsBasedChart if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricsBasedChart.
     */
    public static MetricsBasedChart fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricsBasedChart deserializedMetricsBasedChart = new MetricsBasedChart();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMetricsBasedChart.name = reader.getString();
                } else if ("aggregationType".equals(fieldName)) {
                    deserializedMetricsBasedChart.aggregationType = AggregationType.fromString(reader.getString());
                } else if ("timeSpanDuration".equals(fieldName)) {
                    deserializedMetricsBasedChart.timeSpanDuration = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedMetricsBasedChart.title = reader.getString();
                } else if ("filterGroup".equals(fieldName)) {
                    deserializedMetricsBasedChart.filterGroup = FilterGroup.fromJson(reader);
                } else if ("replacementKey".equals(fieldName)) {
                    deserializedMetricsBasedChart.replacementKey = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricsBasedChart;
        });
    }
}
