// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.selfhelp.models.Step;
import com.azure.resourcemanager.selfhelp.models.TroubleshooterProvisioningState;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Troubleshooter Instance properties.
 */
@Fluent
public final class TroubleshooterInstanceProperties {
    /*
     * Solution Id to identify single troubleshooter.
     */
    @JsonProperty(value = "solutionId")
    private String solutionId;

    /*
     * Client input parameters to run Troubleshooter Resource
     */
    @JsonProperty(value = "parameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> parameters;

    /*
     * Status of troubleshooter provisioning.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private TroubleshooterProvisioningState provisioningState;

    /*
     * List of step object.
     */
    @JsonProperty(value = "steps", access = JsonProperty.Access.WRITE_ONLY)
    private List<Step> steps;

    /**
     * Creates an instance of TroubleshooterInstanceProperties class.
     */
    public TroubleshooterInstanceProperties() {
    }

    /**
     * Get the solutionId property: Solution Id to identify single troubleshooter.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id to identify single troubleshooter.
     * 
     * @param solutionId the solutionId value to set.
     * @return the TroubleshooterInstanceProperties object itself.
     */
    public TroubleshooterInstanceProperties withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the parameters property: Client input parameters to run Troubleshooter Resource.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Client input parameters to run Troubleshooter Resource.
     * 
     * @param parameters the parameters value to set.
     * @return the TroubleshooterInstanceProperties object itself.
     */
    public TroubleshooterInstanceProperties withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the provisioningState property: Status of troubleshooter provisioning.
     * 
     * @return the provisioningState value.
     */
    public TroubleshooterProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the steps property: List of step object.
     * 
     * @return the steps value.
     */
    public List<Step> steps() {
        return this.steps;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (steps() != null) {
            steps().forEach(e -> e.validate());
        }
    }
}
