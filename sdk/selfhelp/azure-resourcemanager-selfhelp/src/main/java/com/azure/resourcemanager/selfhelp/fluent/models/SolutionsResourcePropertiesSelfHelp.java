// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.models.ReplacementMapsSelfHelp;
import com.azure.resourcemanager.selfhelp.models.SectionSelfHelp;
import java.io.IOException;
import java.util.List;

/**
 * Solution result.
 */
@Immutable
public final class SolutionsResourcePropertiesSelfHelp
    implements JsonSerializable<SolutionsResourcePropertiesSelfHelp> {
    /*
     * SolutionId is a unique id to identify a solution. You can retrieve the solution id using the Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&tabs=
     * HTTP
     */
    private String solutionId;

    /*
     * The title.
     */
    private String title;

    /*
     * The HTML content that needs to be rendered and shown to customer.
     */
    private String content;

    /*
     * Solution replacement maps.
     */
    private ReplacementMapsSelfHelp replacementMaps;

    /*
     * List of section object.
     */
    private List<SectionSelfHelp> sections;

    /**
     * Creates an instance of SolutionsResourcePropertiesSelfHelp class.
     */
    public SolutionsResourcePropertiesSelfHelp() {
    }

    /**
     * Get the solutionId property: SolutionId is a unique id to identify a solution. You can retrieve the solution id
     * using the Discovery api -
     * https://learn.microsoft.com/en-us/rest/api/help/discovery-solution/list?view=rest-help-2023-09-01-preview&amp;tabs=HTTP.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Get the title property: The title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the content property: The HTML content that needs to be rendered and shown to customer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Get the replacementMaps property: Solution replacement maps.
     * 
     * @return the replacementMaps value.
     */
    public ReplacementMapsSelfHelp replacementMaps() {
        return this.replacementMaps;
    }

    /**
     * Get the sections property: List of section object.
     * 
     * @return the sections value.
     */
    public List<SectionSelfHelp> sections() {
        return this.sections;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (replacementMaps() != null) {
            replacementMaps().validate();
        }
        if (sections() != null) {
            sections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SolutionsResourcePropertiesSelfHelp from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SolutionsResourcePropertiesSelfHelp if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SolutionsResourcePropertiesSelfHelp.
     */
    public static SolutionsResourcePropertiesSelfHelp fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SolutionsResourcePropertiesSelfHelp deserializedSolutionsResourcePropertiesSelfHelp
                = new SolutionsResourcePropertiesSelfHelp();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedSolutionsResourcePropertiesSelfHelp.solutionId = reader.getString();
                } else if ("title".equals(fieldName)) {
                    deserializedSolutionsResourcePropertiesSelfHelp.title = reader.getString();
                } else if ("content".equals(fieldName)) {
                    deserializedSolutionsResourcePropertiesSelfHelp.content = reader.getString();
                } else if ("replacementMaps".equals(fieldName)) {
                    deserializedSolutionsResourcePropertiesSelfHelp.replacementMaps
                        = ReplacementMapsSelfHelp.fromJson(reader);
                } else if ("sections".equals(fieldName)) {
                    List<SectionSelfHelp> sections = reader.readArray(reader1 -> SectionSelfHelp.fromJson(reader1));
                    deserializedSolutionsResourcePropertiesSelfHelp.sections = sections;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSolutionsResourcePropertiesSelfHelp;
        });
    }
}
