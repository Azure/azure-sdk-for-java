// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.selfhelp.models.SolutionProvisioningState;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Simplified Solutions result.
 */
@Fluent
public final class SimplifiedSolutionsResourceProperties {
    /*
     * Solution Id to identify single Simplified Solution.
     */
    @JsonProperty(value = "solutionId")
    private String solutionId;

    /*
     * Client input parameters to run Simplified Solutions
     */
    @JsonProperty(value = "parameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> parameters;

    /*
     * The title.
     */
    @JsonProperty(value = "title", access = JsonProperty.Access.WRITE_ONLY)
    private String title;

    /*
     * Additional parameter response for Simplified Solutions
     */
    @JsonProperty(value = "appendix", access = JsonProperty.Access.WRITE_ONLY)
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> appendix;

    /*
     * The HTML content that needs to be rendered and shown to customer.
     */
    @JsonProperty(value = "content", access = JsonProperty.Access.WRITE_ONLY)
    private String content;

    /*
     * Status of Simplified Solution provisioning.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private SolutionProvisioningState provisioningState;

    /**
     * Creates an instance of SimplifiedSolutionsResourceProperties class.
     */
    public SimplifiedSolutionsResourceProperties() {
    }

    /**
     * Get the solutionId property: Solution Id to identify single Simplified Solution.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id to identify single Simplified Solution.
     * 
     * @param solutionId the solutionId value to set.
     * @return the SimplifiedSolutionsResourceProperties object itself.
     */
    public SimplifiedSolutionsResourceProperties withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the parameters property: Client input parameters to run Simplified Solutions.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Client input parameters to run Simplified Solutions.
     * 
     * @param parameters the parameters value to set.
     * @return the SimplifiedSolutionsResourceProperties object itself.
     */
    public SimplifiedSolutionsResourceProperties withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the title property: The title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the appendix property: Additional parameter response for Simplified Solutions.
     * 
     * @return the appendix value.
     */
    public Map<String, String> appendix() {
        return this.appendix;
    }

    /**
     * Get the content property: The HTML content that needs to be rendered and shown to customer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Get the provisioningState property: Status of Simplified Solution provisioning.
     * 
     * @return the provisioningState value.
     */
    public SolutionProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
