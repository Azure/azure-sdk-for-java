// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.models.SolutionProvisioningState;
import java.io.IOException;
import java.util.Map;

/**
 * Simplified Solutions result.
 */
@Fluent
public final class SimplifiedSolutionsResourceProperties
    implements JsonSerializable<SimplifiedSolutionsResourceProperties> {
    /*
     * Solution Id to identify single Simplified Solution.
     */
    private String solutionId;

    /*
     * Client input parameters to run Simplified Solutions
     */
    private Map<String, String> parameters;

    /*
     * The title.
     */
    private String title;

    /*
     * Additional parameter response for Simplified Solutions
     */
    private Map<String, String> appendix;

    /*
     * The HTML content that needs to be rendered and shown to customer.
     */
    private String content;

    /*
     * Status of Simplified Solution provisioning.
     */
    private SolutionProvisioningState provisioningState;

    /**
     * Creates an instance of SimplifiedSolutionsResourceProperties class.
     */
    public SimplifiedSolutionsResourceProperties() {
    }

    /**
     * Get the solutionId property: Solution Id to identify single Simplified Solution.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id to identify single Simplified Solution.
     * 
     * @param solutionId the solutionId value to set.
     * @return the SimplifiedSolutionsResourceProperties object itself.
     */
    public SimplifiedSolutionsResourceProperties withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the parameters property: Client input parameters to run Simplified Solutions.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Client input parameters to run Simplified Solutions.
     * 
     * @param parameters the parameters value to set.
     * @return the SimplifiedSolutionsResourceProperties object itself.
     */
    public SimplifiedSolutionsResourceProperties withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the title property: The title.
     * 
     * @return the title value.
     */
    public String title() {
        return this.title;
    }

    /**
     * Get the appendix property: Additional parameter response for Simplified Solutions.
     * 
     * @return the appendix value.
     */
    public Map<String, String> appendix() {
        return this.appendix;
    }

    /**
     * Get the content property: The HTML content that needs to be rendered and shown to customer.
     * 
     * @return the content value.
     */
    public String content() {
        return this.content;
    }

    /**
     * Get the provisioningState property: Status of Simplified Solution provisioning.
     * 
     * @return the provisioningState value.
     */
    public SolutionProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeMapField("parameters", this.parameters, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SimplifiedSolutionsResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SimplifiedSolutionsResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SimplifiedSolutionsResourceProperties.
     */
    public static SimplifiedSolutionsResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SimplifiedSolutionsResourceProperties deserializedSimplifiedSolutionsResourceProperties
                = new SimplifiedSolutionsResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedSimplifiedSolutionsResourceProperties.solutionId = reader.getString();
                } else if ("parameters".equals(fieldName)) {
                    Map<String, String> parameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedSimplifiedSolutionsResourceProperties.parameters = parameters;
                } else if ("title".equals(fieldName)) {
                    deserializedSimplifiedSolutionsResourceProperties.title = reader.getString();
                } else if ("appendix".equals(fieldName)) {
                    Map<String, String> appendix = reader.readMap(reader1 -> reader1.getString());
                    deserializedSimplifiedSolutionsResourceProperties.appendix = appendix;
                } else if ("content".equals(fieldName)) {
                    deserializedSimplifiedSolutionsResourceProperties.content = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSimplifiedSolutionsResourceProperties.provisioningState
                        = SolutionProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSimplifiedSolutionsResourceProperties;
        });
    }
}
