// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.selfhelp.models.Diagnostic;
import com.azure.resourcemanager.selfhelp.models.DiagnosticInvocation;
import com.azure.resourcemanager.selfhelp.models.DiagnosticProvisioningState;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Diagnostic resource.
 */
@Fluent
public final class DiagnosticResourceInner extends ProxyResource {
    /*
     * Diagnostic Resource properties.
     */
    private DiagnosticResourceProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * The type of the resource.
     */
    private String type;

    /**
     * Creates an instance of DiagnosticResourceInner class.
     */
    public DiagnosticResourceInner() {
    }

    /**
     * Get the innerProperties property: Diagnostic Resource properties.
     * 
     * @return the innerProperties value.
     */
    private DiagnosticResourceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the globalParameters property: Global parameters is an optional map which can be used to add key and value to
     * request body to improve the diagnostics results.
     * 
     * @return the globalParameters value.
     */
    public Map<String, String> globalParameters() {
        return this.innerProperties() == null ? null : this.innerProperties().globalParameters();
    }

    /**
     * Set the globalParameters property: Global parameters is an optional map which can be used to add key and value to
     * request body to improve the diagnostics results.
     * 
     * @param globalParameters the globalParameters value to set.
     * @return the DiagnosticResourceInner object itself.
     */
    public DiagnosticResourceInner withGlobalParameters(Map<String, String> globalParameters) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DiagnosticResourceProperties();
        }
        this.innerProperties().withGlobalParameters(globalParameters);
        return this;
    }

    /**
     * Get the insights property: SolutionIds that are needed to be invoked.
     * 
     * @return the insights value.
     */
    public List<DiagnosticInvocation> insights() {
        return this.innerProperties() == null ? null : this.innerProperties().insights();
    }

    /**
     * Set the insights property: SolutionIds that are needed to be invoked.
     * 
     * @param insights the insights value to set.
     * @return the DiagnosticResourceInner object itself.
     */
    public DiagnosticResourceInner withInsights(List<DiagnosticInvocation> insights) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DiagnosticResourceProperties();
        }
        this.innerProperties().withInsights(insights);
        return this;
    }

    /**
     * Get the acceptedAt property: Diagnostic Request Accepted time.
     * 
     * @return the acceptedAt value.
     */
    public String acceptedAt() {
        return this.innerProperties() == null ? null : this.innerProperties().acceptedAt();
    }

    /**
     * Get the provisioningState property: Status of diagnostic provisioning.
     * 
     * @return the provisioningState value.
     */
    public DiagnosticProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the diagnostics property: Array of Diagnostics.
     * 
     * @return the diagnostics value.
     */
    public List<Diagnostic> diagnostics() {
        return this.innerProperties() == null ? null : this.innerProperties().diagnostics();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiagnosticResourceInner.
     */
    public static DiagnosticResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticResourceInner deserializedDiagnosticResourceInner = new DiagnosticResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDiagnosticResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDiagnosticResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDiagnosticResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDiagnosticResourceInner.innerProperties = DiagnosticResourceProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDiagnosticResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnosticResourceInner;
        });
    }
}
