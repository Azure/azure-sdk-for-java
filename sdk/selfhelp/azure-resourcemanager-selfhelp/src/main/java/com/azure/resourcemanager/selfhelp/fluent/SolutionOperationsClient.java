// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.selfhelp.fluent.models.SolutionResourceInner;
import com.azure.resourcemanager.selfhelp.models.SolutionPatchRequestBody;

/** An instance of this class provides access to all the operations defined in SolutionOperationsClient. */
public interface SolutionOperationsClient {
    /**
     * Creates a solution for the specific Azure resource or subscription using the triggering criteria ‘solutionId and
     * requiredInputs’ from discovery solutions.&lt;br/&gt; Solutions are a rich, insightful and a centralized self help
     * experience that brings all the relevant content to troubleshoot an Azure issue into a unified experience.
     * Solutions include the following components : Text, Diagnostics , Troubleshooters, Images , Video tutorials,
     * Tables , custom charts, images , AzureKB, etc, with capabilities to support new solutions types in the future.
     * Each solution type may require one or more ‘requiredParameters’ that are required to execute the individual
     * solution component. In the absence of the ‘requiredParameters’ it is likely that some of the solutions might fail
     * execution, and you might see an empty response. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt; &lt;br/&gt;1.
     * ‘requiredInputs’ from Discovery solutions response must be passed via ‘parameters’ in the request body of
     * Solutions API. &lt;br/&gt;2. ‘requiredParameters’ from the Solutions response is the same as ‘
     * additionalParameters’ in the request for diagnostics &lt;br/&gt;3. ‘requiredParameters’ from the Solutions
     * response is the same as ‘properties.parameters’ in the request for Troubleshooters.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreate(
        String scope, String solutionResourceName);

    /**
     * Creates a solution for the specific Azure resource or subscription using the triggering criteria ‘solutionId and
     * requiredInputs’ from discovery solutions.&lt;br/&gt; Solutions are a rich, insightful and a centralized self help
     * experience that brings all the relevant content to troubleshoot an Azure issue into a unified experience.
     * Solutions include the following components : Text, Diagnostics , Troubleshooters, Images , Video tutorials,
     * Tables , custom charts, images , AzureKB, etc, with capabilities to support new solutions types in the future.
     * Each solution type may require one or more ‘requiredParameters’ that are required to execute the individual
     * solution component. In the absence of the ‘requiredParameters’ it is likely that some of the solutions might fail
     * execution, and you might see an empty response. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt; &lt;br/&gt;1.
     * ‘requiredInputs’ from Discovery solutions response must be passed via ‘parameters’ in the request body of
     * Solutions API. &lt;br/&gt;2. ‘requiredParameters’ from the Solutions response is the same as ‘
     * additionalParameters’ in the request for diagnostics &lt;br/&gt;3. ‘requiredParameters’ from the Solutions
     * response is the same as ‘properties.parameters’ in the request for Troubleshooters.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginCreate(
        String scope, String solutionResourceName, SolutionResourceInner solutionRequestBody, Context context);

    /**
     * Creates a solution for the specific Azure resource or subscription using the triggering criteria ‘solutionId and
     * requiredInputs’ from discovery solutions.&lt;br/&gt; Solutions are a rich, insightful and a centralized self help
     * experience that brings all the relevant content to troubleshoot an Azure issue into a unified experience.
     * Solutions include the following components : Text, Diagnostics , Troubleshooters, Images , Video tutorials,
     * Tables , custom charts, images , AzureKB, etc, with capabilities to support new solutions types in the future.
     * Each solution type may require one or more ‘requiredParameters’ that are required to execute the individual
     * solution component. In the absence of the ‘requiredParameters’ it is likely that some of the solutions might fail
     * execution, and you might see an empty response. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt; &lt;br/&gt;1.
     * ‘requiredInputs’ from Discovery solutions response must be passed via ‘parameters’ in the request body of
     * Solutions API. &lt;br/&gt;2. ‘requiredParameters’ from the Solutions response is the same as ‘
     * additionalParameters’ in the request for diagnostics &lt;br/&gt;3. ‘requiredParameters’ from the Solutions
     * response is the same as ‘properties.parameters’ in the request for Troubleshooters.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionResourceInner create(String scope, String solutionResourceName);

    /**
     * Creates a solution for the specific Azure resource or subscription using the triggering criteria ‘solutionId and
     * requiredInputs’ from discovery solutions.&lt;br/&gt; Solutions are a rich, insightful and a centralized self help
     * experience that brings all the relevant content to troubleshoot an Azure issue into a unified experience.
     * Solutions include the following components : Text, Diagnostics , Troubleshooters, Images , Video tutorials,
     * Tables , custom charts, images , AzureKB, etc, with capabilities to support new solutions types in the future.
     * Each solution type may require one or more ‘requiredParameters’ that are required to execute the individual
     * solution component. In the absence of the ‘requiredParameters’ it is likely that some of the solutions might fail
     * execution, and you might see an empty response. &lt;br/&gt;&lt;br/&gt; &lt;b&gt;Note:&lt;/b&gt; &lt;br/&gt;1.
     * ‘requiredInputs’ from Discovery solutions response must be passed via ‘parameters’ in the request body of
     * Solutions API. &lt;br/&gt;2. ‘requiredParameters’ from the Solutions response is the same as ‘
     * additionalParameters’ in the request for diagnostics &lt;br/&gt;3. ‘requiredParameters’ from the Solutions
     * response is the same as ‘properties.parameters’ in the request for Troubleshooters.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @param solutionRequestBody The required request body for this solution resource creation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionResourceInner create(
        String scope, String solutionResourceName, SolutionResourceInner solutionRequestBody, Context context);

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution along with {@link
     *     Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<SolutionResourceInner> getWithResponse(String scope, String solutionResourceName, Context context);

    /**
     * Get the solution using the applicable solutionResourceName while creating the solution.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the solution using the applicable solutionResourceName while creating the solution.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionResourceInner get(String scope, String solutionResourceName);

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdate(
        String scope, String solutionResourceName);

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of solution response.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<SolutionResourceInner>, SolutionResourceInner> beginUpdate(
        String scope, String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody, Context context);

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionResourceInner update(String scope, String solutionResourceName);

    /**
     * Update the requiredInputs or additional information needed to execute the solution.
     *
     * @param scope This is an extension resource provider and only resource level extension is supported at the moment.
     * @param solutionResourceName Solution resource Name.
     * @param solutionPatchRequestBody The required request body for updating a solution resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return solution response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SolutionResourceInner update(
        String scope, String solutionResourceName, SolutionPatchRequestBody solutionPatchRequestBody, Context context);
}
