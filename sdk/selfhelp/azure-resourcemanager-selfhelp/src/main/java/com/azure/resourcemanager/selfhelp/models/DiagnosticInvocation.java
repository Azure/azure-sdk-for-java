// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Solution Invocation with additional params needed for invocation.
 */
@Fluent
public final class DiagnosticInvocation implements JsonSerializable<DiagnosticInvocation> {
    /*
     * Solution Id to invoke.
     */
    private String solutionId;

    /*
     * Additional parameters required to invoke the solutionId.
     */
    private Map<String, String> additionalParameters;

    /**
     * Creates an instance of DiagnosticInvocation class.
     */
    public DiagnosticInvocation() {
    }

    /**
     * Get the solutionId property: Solution Id to invoke.
     * 
     * @return the solutionId value.
     */
    public String solutionId() {
        return this.solutionId;
    }

    /**
     * Set the solutionId property: Solution Id to invoke.
     * 
     * @param solutionId the solutionId value to set.
     * @return the DiagnosticInvocation object itself.
     */
    public DiagnosticInvocation withSolutionId(String solutionId) {
        this.solutionId = solutionId;
        return this;
    }

    /**
     * Get the additionalParameters property: Additional parameters required to invoke the solutionId.
     * 
     * @return the additionalParameters value.
     */
    public Map<String, String> additionalParameters() {
        return this.additionalParameters;
    }

    /**
     * Set the additionalParameters property: Additional parameters required to invoke the solutionId.
     * 
     * @param additionalParameters the additionalParameters value to set.
     * @return the DiagnosticInvocation object itself.
     */
    public DiagnosticInvocation withAdditionalParameters(Map<String, String> additionalParameters) {
        this.additionalParameters = additionalParameters;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("solutionId", this.solutionId);
        jsonWriter.writeMapField("additionalParameters", this.additionalParameters,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiagnosticInvocation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiagnosticInvocation if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiagnosticInvocation.
     */
    public static DiagnosticInvocation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiagnosticInvocation deserializedDiagnosticInvocation = new DiagnosticInvocation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("solutionId".equals(fieldName)) {
                    deserializedDiagnosticInvocation.solutionId = reader.getString();
                } else if ("additionalParameters".equals(fieldName)) {
                    Map<String, String> additionalParameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedDiagnosticInvocation.additionalParameters = additionalParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiagnosticInvocation;
        });
    }
}
