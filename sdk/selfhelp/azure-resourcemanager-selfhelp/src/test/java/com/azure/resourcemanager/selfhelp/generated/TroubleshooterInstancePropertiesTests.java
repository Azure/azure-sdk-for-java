// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.selfhelp.fluent.models.TroubleshooterInstanceProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TroubleshooterInstancePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TroubleshooterInstanceProperties model = BinaryData.fromString(
            "{\"solutionId\":\"yvpycanuzbpzk\",\"parameters\":{\"nwbmeh\":\"uwbc\",\"srtslhspkdeem\":\"seyvj\",\"ahvljuaha\":\"ofmxagkvtmelmqkr\"},\"provisioningState\":\"Canceled\",\"steps\":[{\"id\":\"mdua\",\"title\":\"exq\",\"description\":\"fadmws\",\"guidance\":\"r\",\"executionStatus\":\"Running\",\"executionStatusDescription\":\"vgomz\",\"type\":\"Solution\",\"isLastStep\":true,\"inputs\":[{\"questionId\":\"nbbelda\",\"questionType\":\"RadioButton\",\"questionTitle\":\"ali\",\"questionContent\":\"rqhakauha\",\"questionContentType\":\"Markdown\",\"responseHint\":\"wxosowzxcug\",\"recommendedOption\":\"jooxdjebw\",\"selectedOptionValue\":\"cwwfvovbvme\",\"responseValidationProperties\":{\"regex\":\"ivyhzceuojgjrwju\",\"validationScope\":\"None\",\"isRequired\":true,\"validationErrorMessage\":\"cdytdxw\",\"maxLength\":3602555477170687906},\"responseOptions\":[{},{}]}],\"automatedCheckResults\":{\"version\":\"gqwgxhniskxfbkp\",\"status\":\"gklwn\",\"result\":\"hjdauwhvylwz\",\"type\":\"Error\"},\"insights\":[{\"id\":\"jznb\",\"title\":\"ow\",\"results\":\"przqlveu\",\"importanceLevel\":\"Warning\"},{\"id\":\"j\",\"title\":\"hfxobbcswsrtj\",\"results\":\"plrbpbewtghf\",\"importanceLevel\":\"Information\"},{\"id\":\"gw\",\"title\":\"vlvqhjkbegi\",\"results\":\"nmxiebwwaloayqc\",\"importanceLevel\":\"Critical\"}]},{\"id\":\"j\",\"title\":\"gwyzm\",\"description\":\"xongmtsavjcbpwxq\",\"guidance\":\"rknftguvriuhprwm\",\"executionStatus\":\"Warning\",\"executionStatusDescription\":\"qtayri\",\"type\":\"Insight\",\"isLastStep\":true,\"inputs\":[{\"questionId\":\"xrmcqibycnojvk\",\"questionType\":\"TextInput\",\"questionTitle\":\"qsgzvahapj\",\"questionContent\":\"hpvgqz\",\"questionContentType\":\"Html\",\"responseHint\":\"xdjzlmwlxk\",\"recommendedOption\":\"gfhzovawjvzunlut\",\"selectedOptionValue\":\"n\",\"responseValidationProperties\":{\"regex\":\"xipeilpjzuaejx\",\"validationScope\":\"URLFormat\",\"isRequired\":false,\"validationErrorMessage\":\"zbbtdzumveek\",\"maxLength\":7699661261462782532},\"responseOptions\":[{}]},{\"questionId\":\"kfpbs\",\"questionType\":\"RadioButton\",\"questionTitle\":\"dxluu\",\"questionContent\":\"ttouwaboekqvkel\",\"questionContentType\":\"Text\",\"responseHint\":\"bxwyjsflhhcaa\",\"recommendedOption\":\"jixisxyawjoyaqcs\",\"selectedOptionValue\":\"jpkiidzyexznelix\",\"responseValidationProperties\":{\"regex\":\"ztfolhbnxk\",\"validationScope\":\"None\",\"isRequired\":true,\"validationErrorMessage\":\"ppg\",\"maxLength\":8537474704908454871},\"responseOptions\":[{},{},{},{}]}],\"automatedCheckResults\":{\"version\":\"yiropu\",\"status\":\"igvpgylg\",\"result\":\"itxmedjvcslynqww\",\"type\":\"Success\"},\"insights\":[{\"id\":\"xgk\",\"title\":\"mgucna\",\"results\":\"t\",\"importanceLevel\":\"Warning\"},{\"id\":\"lwptfdy\",\"title\":\"fqbuaceopzf\",\"results\":\"hhuao\",\"importanceLevel\":\"Warning\"},{\"id\":\"qeqxo\",\"title\":\"dahzxctobg\",\"results\":\"dmoizpostmg\",\"importanceLevel\":\"Critical\"}]}]}")
            .toObject(TroubleshooterInstanceProperties.class);
        Assertions.assertEquals("yvpycanuzbpzk", model.solutionId());
        Assertions.assertEquals("uwbc", model.parameters().get("nwbmeh"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TroubleshooterInstanceProperties model = new TroubleshooterInstanceProperties().withSolutionId("yvpycanuzbpzk")
            .withParameters(mapOf("nwbmeh", "uwbc", "srtslhspkdeem", "seyvj", "ahvljuaha", "ofmxagkvtmelmqkr"));
        model = BinaryData.fromObject(model).toObject(TroubleshooterInstanceProperties.class);
        Assertions.assertEquals("yvpycanuzbpzk", model.solutionId());
        Assertions.assertEquals("uwbc", model.parameters().get("nwbmeh"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
