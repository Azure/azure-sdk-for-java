// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.selfhelp.SelfHelpManager;
import com.azure.resourcemanager.selfhelp.models.TroubleshooterResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TroubleshootersCreateWithResponseMockTests {
    @Test
    public void testCreateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"solutionId\":\"ygvjayvblmh\",\"parameters\":{\"gsopbyrqufegxu\":\"uhbxvvy\",\"bnhlmc\":\"wz\",\"dn\":\"l\",\"ijejvegrhbpn\":\"itvgbmhrixkwm\"},\"provisioningState\":\"Canceled\",\"steps\":[{\"id\":\"cbdreaxhcexd\",\"title\":\"vqahqkghtpwi\",\"description\":\"hyjsvfycx\",\"guidance\":\"fvoow\",\"executionStatus\":\"Failed\",\"executionStatusDescription\":\"t\",\"type\":\"Decision\",\"isLastStep\":true,\"inputs\":[{},{}],\"automatedCheckResults\":{\"result\":\"ronzmyhgfip\",\"type\":\"Information\"},\"insights\":[{},{},{}]},{\"id\":\"a\",\"title\":\"rrjreafxtsgu\",\"description\":\"jglikkxwslolb\",\"guidance\":\"vuzlm\",\"executionStatus\":\"Success\",\"executionStatusDescription\":\"fktgplc\",\"type\":\"Insight\",\"isLastStep\":false,\"inputs\":[{},{}],\"automatedCheckResults\":{\"result\":\"igbrnjw\",\"type\":\"Success\"},\"insights\":[{},{},{},{}]},{\"id\":\"azej\",\"title\":\"qkagfhsxt\",\"description\":\"ugzxnf\",\"guidance\":\"zpxdt\",\"executionStatus\":\"Success\",\"executionStatusDescription\":\"kqjjlwuenvrkp\",\"type\":\"AutomatedCheck\",\"isLastStep\":false,\"inputs\":[{},{},{}],\"automatedCheckResults\":{\"result\":\"qaaysjkixqt\",\"type\":\"Warning\"},\"insights\":[{}]},{\"id\":\"wfff\",\"title\":\"kpj\",\"description\":\"qmt\",\"guidance\":\"ltmm\",\"executionStatus\":\"Failed\",\"executionStatusDescription\":\"eozphv\",\"type\":\"AutomatedCheck\",\"isLastStep\":true,\"inputs\":[{}],\"automatedCheckResults\":{\"result\":\"upkvipmdsc\",\"type\":\"Warning\"},\"insights\":[{},{}]}]},\"id\":\"zhfstot\",\"name\":\"hojujbypelmcuv\",\"type\":\"ixbjx\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        SelfHelpManager manager = SelfHelpManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        TroubleshooterResource response
            = manager.troubleshooters().define("wws").withExistingScope("qhhahhxvrhmzkwpj")
                .withSolutionId("hftqsxhqxujxukn")
                .withParameters(
                    mapOf("yqtfihwh", "igrjguufzdm", "gamv", "otzi", "dphqamv", "phoszqz", "vtbvkayh", "kfwynw"))
                .create();

        Assertions.assertEquals("ygvjayvblmh", response.solutionId());
        Assertions.assertEquals("uhbxvvy", response.parameters().get("gsopbyrqufegxu"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
