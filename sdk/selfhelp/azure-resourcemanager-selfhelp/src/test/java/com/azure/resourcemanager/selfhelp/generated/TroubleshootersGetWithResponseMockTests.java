// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.selfhelp.SelfHelpManager;
import com.azure.resourcemanager.selfhelp.models.TroubleshooterResource;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TroubleshootersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"solutionId\":\"eqz\",\"parameters\":{\"lmncw\":\"riolxorjalt\",\"cqdpfuv\":\"obqwcsdbnwdcfh\"},\"provisioningState\":\"AutoContinue\",\"steps\":[{\"id\":\"ca\",\"title\":\"xbvtvudu\",\"description\":\"cormr\",\"guidance\":\"qtvcofudflvkgj\",\"executionStatus\":\"Running\",\"executionStatusDescription\":\"knnqvsaznq\",\"type\":\"Solution\",\"isLastStep\":false,\"inputs\":[{},{},{}],\"automatedCheckResults\":{\"result\":\"a\",\"type\":\"Error\"},\"insights\":[{}]},{\"id\":\"auwjuetaebu\",\"title\":\"vdmovsmzlxwabm\",\"description\":\"efkifr\",\"guidance\":\"puqujmqlgkfbtn\",\"executionStatus\":\"Running\",\"executionStatusDescription\":\"n\",\"type\":\"Solution\",\"isLastStep\":false,\"inputs\":[{},{},{}],\"automatedCheckResults\":{\"result\":\"tcje\",\"type\":\"Information\"},\"insights\":[{},{},{}]},{\"id\":\"zkoj\",\"title\":\"c\",\"description\":\"foqouicybx\",\"guidance\":\"zg\",\"executionStatus\":\"Running\",\"executionStatusDescription\":\"oxciqopidoamcio\",\"type\":\"AutomatedCheck\",\"isLastStep\":true,\"inputs\":[{},{},{},{}],\"automatedCheckResults\":{\"result\":\"nz\",\"type\":\"Warning\"},\"insights\":[{},{},{},{}]}]},\"id\":\"oegokdwbwh\",\"name\":\"szzcmrvexztv\",\"type\":\"t\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        SelfHelpManager manager =
            SelfHelpManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        TroubleshooterResource response =
            manager.troubleshooters().getWithResponse("yfzqwhxxbu", "qa", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("eqz", response.solutionId());
        Assertions.assertEquals("riolxorjalt", response.parameters().get("lmncw"));
    }
}
