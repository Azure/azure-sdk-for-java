// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.selfhelp.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.selfhelp.fluent.models.TroubleshooterResourceInner;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TroubleshooterResourceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TroubleshooterResourceInner model = BinaryData.fromString(
            "{\"properties\":{\"solutionId\":\"ymuctqhjfbebrj\",\"parameters\":{\"xfvjrbirp\":\"rfuwutt\",\"jky\":\"xepcyvahfn\",\"ljyoxgvcltb\":\"xjvuujqgidokg\"},\"provisioningState\":\"Failed\",\"steps\":[{\"id\":\"kjeszz\",\"title\":\"ijhtxf\",\"description\":\"xbf\",\"guidance\":\"xnehmpvec\",\"executionStatus\":\"Warning\",\"executionStatusDescription\":\"ebfqkkrbm\",\"type\":\"Insight\",\"isLastStep\":true,\"inputs\":[{\"questionId\":\"lzlfbxzpuz\",\"questionType\":\"MultiLineInfoBox\",\"questionContent\":\"pnq\",\"questionContentType\":\"Markdown\",\"responseHint\":\"gkbrpyyd\",\"recommendedOption\":\"bnuqqkpik\",\"selectedOptionValue\":\"rgvtqag\",\"responseValidationProperties\":{},\"responseOptions\":[{},{},{}]},{\"questionId\":\"hijggme\",\"questionType\":\"TextInput\",\"questionContent\":\"arbu\",\"questionContentType\":\"Text\",\"responseHint\":\"pnazzm\",\"recommendedOption\":\"runmp\",\"selectedOptionValue\":\"tdbhrbnla\",\"responseValidationProperties\":{},\"responseOptions\":[{},{},{},{}]},{\"questionId\":\"skpbhenbtkcxywn\",\"questionType\":\"RadioButton\",\"questionContent\":\"synlqidybyxczfc\",\"questionContentType\":\"Html\",\"responseHint\":\"xdbabphlwr\",\"recommendedOption\":\"fkts\",\"selectedOptionValue\":\"sucocmnyyazttbtw\",\"responseValidationProperties\":{},\"responseOptions\":[{},{},{},{}]},{\"questionId\":\"edckzywbiexzfey\",\"questionType\":\"Dropdown\",\"questionContent\":\"ibx\",\"questionContentType\":\"Html\",\"responseHint\":\"hqwa\",\"recommendedOption\":\"uzyoxaep\",\"selectedOptionValue\":\"zjancuxr\",\"responseValidationProperties\":{},\"responseOptions\":[{},{},{},{}]}],\"automatedCheckResults\":{\"result\":\"xbniwdjs\",\"type\":\"Warning\"},\"insights\":[{\"id\":\"pgn\",\"title\":\"txhp\",\"results\":\"bzpfzab\",\"importanceLevel\":\"Warning\"},{\"id\":\"hxw\",\"title\":\"tyq\",\"results\":\"lbbovplw\",\"importanceLevel\":\"Critical\"},{\"id\":\"gy\",\"title\":\"uosvmkfssxqukk\",\"results\":\"l\",\"importanceLevel\":\"Information\"}]},{\"id\":\"nkjzkdeslpvlop\",\"title\":\"yighxpk\",\"description\":\"zb\",\"guidance\":\"uebbaumnyqup\",\"executionStatus\":\"Running\",\"executionStatusDescription\":\"jn\",\"type\":\"Insight\",\"isLastStep\":true,\"inputs\":[{\"questionId\":\"xpsiebtfhvpes\",\"questionType\":\"TextInput\",\"questionContent\":\"rdqmhjjdhtldwkyz\",\"questionContentType\":\"Html\",\"responseHint\":\"kn\",\"recommendedOption\":\"scwsv\",\"selectedOptionValue\":\"otogtwrupqs\",\"responseValidationProperties\":{},\"responseOptions\":[{},{},{},{}]},{\"questionId\":\"cykvceo\",\"questionType\":\"Dropdown\",\"questionContent\":\"ovnotyfjfcnjbkcn\",\"questionContentType\":\"Markdown\",\"responseHint\":\"ttkphywpnvjtoqne\",\"recommendedOption\":\"clfp\",\"selectedOptionValue\":\"hoxus\",\"responseValidationProperties\":{},\"responseOptions\":[{}]},{\"questionId\":\"gyepsbjt\",\"questionType\":\"MultiLineInfoBox\",\"questionContent\":\"gxywpmue\",\"questionContentType\":\"Text\",\"responseHint\":\"wfqkquj\",\"recommendedOption\":\"suyonobglaocq\",\"selectedOptionValue\":\"ccm\",\"responseValidationProperties\":{},\"responseOptions\":[{}]}],\"automatedCheckResults\":{\"result\":\"tlmoyrx\",\"type\":\"Warning\"},\"insights\":[{\"id\":\"pz\",\"title\":\"xhdzhlrqjbhckf\",\"results\":\"hrxsbk\",\"importanceLevel\":\"Information\"}]},{\"id\":\"anuzbpzkafkuw\",\"title\":\"rnwb\",\"description\":\"hhseyv\",\"guidance\":\"srtslhspkdeem\",\"executionStatus\":\"Success\",\"executionStatusDescription\":\"xagkvtmelmqkrh\",\"type\":\"Solution\",\"isLastStep\":true,\"inputs\":[{\"questionId\":\"aquhcdhm\",\"questionType\":\"MultiLineInfoBox\",\"questionContent\":\"aex\",\"questionContentType\":\"Text\",\"responseHint\":\"adm\",\"recommendedOption\":\"rcrgvx\",\"selectedOptionValue\":\"gomz\",\"responseValidationProperties\":{},\"responseOptions\":[{},{},{},{}]},{\"questionId\":\"gwb\",\"questionType\":\"MultiLineInfoBox\",\"questionContent\":\"ldawkzbaliourqha\",\"questionContentType\":\"Html\",\"responseHint\":\"ashsfwxos\",\"recommendedOption\":\"z\",\"selectedOptionValue\":\"ugicjooxdjebw\",\"responseValidationProperties\":{},\"responseOptions\":[{},{}]}],\"automatedCheckResults\":{\"result\":\"vo\",\"type\":\"Warning\"},\"insights\":[{\"id\":\"ecivyh\",\"title\":\"euojgjrwju\",\"results\":\"otwmcdyt\",\"importanceLevel\":\"Critical\"},{\"id\":\"txnrjaw\",\"title\":\"wgxhn\",\"results\":\"kxfbkpycgklwndn\",\"importanceLevel\":\"Information\"},{\"id\":\"uwhvylwzbtdhxujz\",\"title\":\"mpowuwpr\",\"results\":\"lve\",\"importanceLevel\":\"Information\"},{\"id\":\"pjmkhfxobbc\",\"title\":\"s\",\"results\":\"jriplrbpbewtghf\",\"importanceLevel\":\"Information\"}]}]},\"id\":\"wxzvlvqhjkb\",\"name\":\"gibtnm\",\"type\":\"iebwwaloayqcgwrt\"}")
            .toObject(TroubleshooterResourceInner.class);
        Assertions.assertEquals("ymuctqhjfbebrj", model.solutionId());
        Assertions.assertEquals("rfuwutt", model.parameters().get("xfvjrbirp"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TroubleshooterResourceInner model = new TroubleshooterResourceInner().withSolutionId("ymuctqhjfbebrj")
            .withParameters(mapOf("xfvjrbirp", "rfuwutt", "jky", "xepcyvahfn", "ljyoxgvcltb", "xjvuujqgidokg"));
        model = BinaryData.fromObject(model).toObject(TroubleshooterResourceInner.class);
        Assertions.assertEquals("ymuctqhjfbebrj", model.solutionId());
        Assertions.assertEquals("rfuwutt", model.parameters().get("xfvjrbirp"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
