// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.generated;

import com.azure.resourcemanager.purestorageblock.models.Address;
import com.azure.resourcemanager.purestorageblock.models.CompanyDetails;
import com.azure.resourcemanager.purestorageblock.models.Reservation;
import com.azure.resourcemanager.purestorageblock.models.ReservationUpdateProperties;
import com.azure.resourcemanager.purestorageblock.models.UserDetails;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Reservations Update.
 */
public final class ReservationsUpdateSamples {
    /*
     * x-ms-original-file: 2024-11-01/Reservations_Update_MaximumSet_Gen.json
     */
    /**
     * Sample code: Reservations_Update.
     * 
     * @param manager Entry point to PureStorageBlockManager.
     */
    public static void reservationsUpdate(com.azure.resourcemanager.purestorageblock.PureStorageBlockManager manager) {
        Reservation resource = manager.reservations()
            .getByResourceGroupWithResponse("rgpurestorage", "storagePoolname", com.azure.core.util.Context.NONE)
            .getValue();
        resource.update()
            .withTags(mapOf("key8751", "fakeTokenPlaceholder"))
            .withProperties(
                new ReservationUpdateProperties().withUser(new UserDetails().withFirstName("sjzquetrvxcrajxdfwfeuro")
                    .withLastName("qimvqxnlbclfouwzfk")
                    .withEmailAddress("abc@example.com")
                    .withUpn("pvafwnbigmhuigxfu")
                    .withPhoneNumber("jfljnoxsfsplwczwgvmlurfnorimvl")
                    .withCompanyDetails(new CompanyDetails().withCompanyName("uleytbkckdhaiykwjjcjqmnlik")
                        .withAddress(new Address().withAddressLine1("ryaasdffnhwialrgmukpiwtcjgbb")
                            .withAddressLine2("cvyuuqnvuqfrpkoplfzmhnwrqsbsgn")
                            .withCity("kdpzfxfbgozxwunkkhjthqdsnmce")
                            .withState("fygrbnektar")
                            .withCountry("trmpjpxsfmxprlnv")
                            .withPostalCode("fakeTokenPlaceholder")))))
            .apply();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
