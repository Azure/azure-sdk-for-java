// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.generated;

import com.azure.resourcemanager.purestorageblock.models.Address;
import com.azure.resourcemanager.purestorageblock.models.CompanyDetails;
import com.azure.resourcemanager.purestorageblock.models.MarketplaceDetails;
import com.azure.resourcemanager.purestorageblock.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.purestorageblock.models.OfferDetails;
import com.azure.resourcemanager.purestorageblock.models.ReservationPropertiesBaseResourceProperties;
import com.azure.resourcemanager.purestorageblock.models.UserDetails;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for Reservations Create.
 */
public final class ReservationsCreateSamples {
    /*
     * x-ms-original-file: 2024-11-01/Reservations_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: Reservations_Create.
     * 
     * @param manager Entry point to PureStorageBlockManager.
     */
    public static void reservationsCreate(com.azure.resourcemanager.purestorageblock.PureStorageBlockManager manager) {
        manager.reservations()
            .define("storagePoolname")
            .withRegion("jynnbjysbc")
            .withExistingResourceGroup("rgpurestorage")
            .withTags(mapOf("key1110", "fakeTokenPlaceholder"))
            .withProperties(new ReservationPropertiesBaseResourceProperties()
                .withMarketplace(new MarketplaceDetails()
                    .withSubscriptionStatus(MarketplaceSubscriptionStatus.PENDING_FULFILLMENT_START)
                    .withOfferDetails(new OfferDetails().withPublisherId("vejockfhoavaqjvhtwvctdnaefvw")
                        .withOfferId("efojrbphbimq")
                        .withPlanId("caj")
                        .withPlanName("lvvzchm")
                        .withTermUnit("ose")
                        .withTermId("ucyvzkedohfjazifxweylhnbcmeza")))
                .withUser(new UserDetails().withFirstName("bucysqbbclhwxrzig")
                    .withLastName("fnsvxlop")
                    .withEmailAddress("abc@example.com")
                    .withUpn("ekqbqgpdylggddusuiifrnjcwiefay")
                    .withPhoneNumber("jglihtgsacdxocc")
                    .withCompanyDetails(new CompanyDetails().withCompanyName("nrndfzmrakk")
                        .withAddress(new Address().withAddressLine1("f")
                            .withAddressLine2("gycfosmknj")
                            .withCity("qxzhxjoatyuajoljfkd")
                            .withState("dnusygshfvmebpmcjsd")
                            .withCountry("nuexbknolfphlfguyzq")
                            .withPostalCode("fakeTokenPlaceholder")))))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
