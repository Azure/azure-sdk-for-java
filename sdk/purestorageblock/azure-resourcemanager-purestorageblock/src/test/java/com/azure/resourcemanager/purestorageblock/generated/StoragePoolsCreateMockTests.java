// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.purestorageblock.PureStorageBlockManager;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentity;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.purestorageblock.models.StoragePool;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolProperties;
import com.azure.resourcemanager.purestorageblock.models.UserAssignedIdentity;
import com.azure.resourcemanager.purestorageblock.models.VnetInjection;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class StoragePoolsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"storagePoolInternalId\":\"ethwwnpjhlfz\",\"availabilityZone\":\"wpchwahf\",\"vnetInjection\":{\"subnetId\":\"ousnfepgfewe\",\"vnetId\":\"wlyxgncxyk\"},\"dataRetentionPeriod\":7273208540565917930,\"provisionedBandwidthMbPerSec\":136880772984526370,\"provisionedIops\":1348597910469137076,\"avs\":{\"avsEnabled\":true,\"sddcResourceId\":\"f\"},\"provisioningState\":\"Succeeded\",\"reservationResourceId\":\"po\"},\"identity\":{\"principalId\":\"xcjzhqizxfpxt\",\"tenantId\":\"scjavftju\",\"type\":\"SystemAssigned,UserAssigned\",\"userAssignedIdentities\":{\"wpijrajci\":{\"principalId\":\"k\",\"clientId\":\"gg\"},\"oxgsgbpfgzdjtx\":{\"principalId\":\"mghfcfiwrxgkne\",\"clientId\":\"yinzqodfvpgs\"},\"rdve\":{\"principalId\":\"flbqvgaq\",\"clientId\":\"gafcqu\"}}},\"location\":\"wsdtutnwl\",\"tags\":{\"dxukuqgsjjxundxg\":\"cvuzhyrmewipmve\",\"hhzjhfj\":\"etw\",\"qsxvmhf\":\"hvvmuvgpmun\",\"yue\":\"uzjyihsasbhudypo\"},\"id\":\"slynsqyrpfoo\",\"name\":\"rlttymsjnygqdnfw\",\"type\":\"zdzgtilaxhnfhqly\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        PureStorageBlockManager manager = PureStorageBlockManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        StoragePool response = manager.storagePools()
            .define("lhzdsqtzb")
            .withRegion("b")
            .withExistingResourceGroup("cwkhihi")
            .withTags(mapOf("eitpkxztmo", "aehvvibrxjjstoq", "qxzhem", "bklftidgfcwqmpim", "lkb", "yhohujswtwkozzwc",
                "jwltlwtjjgu", "wpfaj"))
            .withProperties(new StoragePoolProperties().withAvailabilityZone("hfgmvecactxm")
                .withVnetInjection(new VnetInjection().withSubnetId("oteyowc").withVnetId("uqovekqvgqouwif"))
                .withProvisionedBandwidthMbPerSec(9183052747374666189L)
                .withReservationResourceId("agr"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("brta", new UserAssignedIdentity(), "qseypxiutcxa",
                    new UserAssignedIdentity(), "abrqnkkzj", new UserAssignedIdentity())))
            .create();

        Assertions.assertEquals("wsdtutnwl", response.location());
        Assertions.assertEquals("cvuzhyrmewipmve", response.tags().get("dxukuqgsjjxundxg"));
        Assertions.assertEquals("wpchwahf", response.properties().availabilityZone());
        Assertions.assertEquals("ousnfepgfewe", response.properties().vnetInjection().subnetId());
        Assertions.assertEquals("wlyxgncxyk", response.properties().vnetInjection().vnetId());
        Assertions.assertEquals(136880772984526370L, response.properties().provisionedBandwidthMbPerSec());
        Assertions.assertEquals("po", response.properties().reservationResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
