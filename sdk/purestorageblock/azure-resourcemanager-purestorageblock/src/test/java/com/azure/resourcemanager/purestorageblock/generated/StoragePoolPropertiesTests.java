// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolProperties;
import com.azure.resourcemanager.purestorageblock.models.VnetInjection;
import org.junit.jupiter.api.Assertions;

public final class StoragePoolPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StoragePoolProperties model = BinaryData.fromString(
            "{\"storagePoolInternalId\":\"iertgccymvaolp\",\"availabilityZone\":\"slqlfmmdn\",\"vnetInjection\":{\"subnetId\":\"bglzpswi\",\"vnetId\":\"d\"},\"dataRetentionPeriod\":6855898880348717340,\"provisionedBandwidthMbPerSec\":2986988161676305406,\"provisionedIops\":3868778507667885775,\"avs\":{\"avsEnabled\":true,\"sddcResourceId\":\"bzmnvdfznud\"},\"provisioningState\":\"Failed\",\"reservationResourceId\":\"vxzbncb\"}")
            .toObject(StoragePoolProperties.class);
        Assertions.assertEquals("slqlfmmdn", model.availabilityZone());
        Assertions.assertEquals("bglzpswi", model.vnetInjection().subnetId());
        Assertions.assertEquals("d", model.vnetInjection().vnetId());
        Assertions.assertEquals(2986988161676305406L, model.provisionedBandwidthMbPerSec());
        Assertions.assertEquals("vxzbncb", model.reservationResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StoragePoolProperties model = new StoragePoolProperties().withAvailabilityZone("slqlfmmdn")
            .withVnetInjection(new VnetInjection().withSubnetId("bglzpswi").withVnetId("d"))
            .withProvisionedBandwidthMbPerSec(2986988161676305406L)
            .withReservationResourceId("vxzbncb");
        model = BinaryData.fromObject(model).toObject(StoragePoolProperties.class);
        Assertions.assertEquals("slqlfmmdn", model.availabilityZone());
        Assertions.assertEquals("bglzpswi", model.vnetInjection().subnetId());
        Assertions.assertEquals("d", model.vnetInjection().vnetId());
        Assertions.assertEquals(2986988161676305406L, model.provisionedBandwidthMbPerSec());
        Assertions.assertEquals("vxzbncb", model.reservationResourceId());
    }
}
