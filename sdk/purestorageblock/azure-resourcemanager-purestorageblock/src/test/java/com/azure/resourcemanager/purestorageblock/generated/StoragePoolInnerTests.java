// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.purestorageblock.fluent.models.StoragePoolInner;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentity;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolProperties;
import com.azure.resourcemanager.purestorageblock.models.UserAssignedIdentity;
import com.azure.resourcemanager.purestorageblock.models.VnetInjection;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StoragePoolInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StoragePoolInner model = BinaryData.fromString(
            "{\"properties\":{\"storagePoolInternalId\":\"blmpewww\",\"availabilityZone\":\"bkrvrnsvshqj\",\"vnetInjection\":{\"subnetId\":\"hxcr\",\"vnetId\":\"bfovasrruvwbhsq\"},\"dataRetentionPeriod\":1327647524081799749,\"provisionedBandwidthMbPerSec\":915934839325229453,\"provisionedIops\":4263658870464562119,\"avs\":{\"avsEnabled\":false,\"sddcResourceId\":\"pybsrfbjfdtw\"},\"provisioningState\":\"Failed\",\"reservationResourceId\":\"t\"},\"identity\":{\"principalId\":\"vjz\",\"tenantId\":\"xilzznf\",\"type\":\"None\",\"userAssignedIdentities\":{\"ybn\":{\"principalId\":\"pmqtaru\",\"clientId\":\"jmkcjhwqytj\"}}},\"location\":\"ewgdrjervn\",\"tags\":{\"hin\":\"qp\",\"nzdndslgna\":\"oygmift\"},\"id\":\"qig\",\"name\":\"nduhavhqlkthum\",\"type\":\"qolbgyc\"}")
            .toObject(StoragePoolInner.class);
        Assertions.assertEquals("ewgdrjervn", model.location());
        Assertions.assertEquals("qp", model.tags().get("hin"));
        Assertions.assertEquals("bkrvrnsvshqj", model.properties().availabilityZone());
        Assertions.assertEquals("hxcr", model.properties().vnetInjection().subnetId());
        Assertions.assertEquals("bfovasrruvwbhsq", model.properties().vnetInjection().vnetId());
        Assertions.assertEquals(915934839325229453L, model.properties().provisionedBandwidthMbPerSec());
        Assertions.assertEquals("t", model.properties().reservationResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StoragePoolInner model = new StoragePoolInner().withLocation("ewgdrjervn")
            .withTags(mapOf("hin", "qp", "nzdndslgna", "oygmift"))
            .withProperties(new StoragePoolProperties().withAvailabilityZone("bkrvrnsvshqj")
                .withVnetInjection(new VnetInjection().withSubnetId("hxcr").withVnetId("bfovasrruvwbhsq"))
                .withProvisionedBandwidthMbPerSec(915934839325229453L)
                .withReservationResourceId("t"))
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("ybn", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(StoragePoolInner.class);
        Assertions.assertEquals("ewgdrjervn", model.location());
        Assertions.assertEquals("qp", model.tags().get("hin"));
        Assertions.assertEquals("bkrvrnsvshqj", model.properties().availabilityZone());
        Assertions.assertEquals("hxcr", model.properties().vnetInjection().subnetId());
        Assertions.assertEquals("bfovasrruvwbhsq", model.properties().vnetInjection().vnetId());
        Assertions.assertEquals(915934839325229453L, model.properties().provisionedBandwidthMbPerSec());
        Assertions.assertEquals("t", model.properties().reservationResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
