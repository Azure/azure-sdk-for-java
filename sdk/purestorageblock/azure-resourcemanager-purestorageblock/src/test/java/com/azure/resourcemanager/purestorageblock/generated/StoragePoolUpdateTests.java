// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentity;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolUpdate;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolUpdateProperties;
import com.azure.resourcemanager.purestorageblock.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class StoragePoolUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        StoragePoolUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"obdagxtibqdxb\",\"tenantId\":\"akbogqxndlkzgxh\",\"type\":\"None\",\"userAssignedIdentities\":{\"bqtkoievseotgqr\":{\"principalId\":\"bpodxunkbebxm\",\"clientId\":\"yyntwl\"},\"gcj\":{\"principalId\":\"tmuwlauwzi\",\"clientId\":\"bm\"},\"tdum\":{\"principalId\":\"u\",\"clientId\":\"uvpb\"}}},\"tags\":{\"hjpglkf\":\"pxebmnzbt\"},\"properties\":{\"provisionedBandwidthMbPerSec\":4451284906694141783}}")
            .toObject(StoragePoolUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("pxebmnzbt", model.tags().get("hjpglkf"));
        Assertions.assertEquals(4451284906694141783L, model.properties().provisionedBandwidthMbPerSec());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        StoragePoolUpdate model = new StoragePoolUpdate()
            .withIdentity(new ManagedServiceIdentity().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("bqtkoievseotgqr", new UserAssignedIdentity(), "gcj",
                    new UserAssignedIdentity(), "tdum", new UserAssignedIdentity())))
            .withTags(mapOf("hjpglkf", "pxebmnzbt"))
            .withProperties(new StoragePoolUpdateProperties().withProvisionedBandwidthMbPerSec(4451284906694141783L));
        model = BinaryData.fromObject(model).toObject(StoragePoolUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("pxebmnzbt", model.tags().get("hjpglkf"));
        Assertions.assertEquals(4451284906694141783L, model.properties().provisionedBandwidthMbPerSec());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
