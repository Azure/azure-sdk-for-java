// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AVS VM properties.
 */
@Immutable
public final class AvsVmProperties implements JsonSerializable<AvsVmProperties> {
    /*
     * Pure Storage's internal ID for the storage pool
     */
    private String storagePoolInternalId;

    /*
     * Azure resource ID of the storage pool
     */
    private String storagePoolResourceId;

    /*
     * Human-readable name of the AVS VM
     */
    private String displayName;

    /*
     * Date at which the AVS VM was created, as an RFC 3339 timestamp
     */
    private String createdTimestamp;

    /*
     * AVS VM's soft-deletion state
     */
    private SoftDeletion softDeletion;

    /*
     * Specify which control plane handles the lifecycle of the volume container
     */
    private VolumeContainerType volumeContainerType;

    /*
     * AVS VM details
     */
    private AvsVmDetails avs;

    /*
     * Contains properties related to used Flash space
     */
    private Space space;

    /*
     * Provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of AvsVmProperties class.
     */
    private AvsVmProperties() {
    }

    /**
     * Get the storagePoolInternalId property: Pure Storage's internal ID for the storage pool.
     * 
     * @return the storagePoolInternalId value.
     */
    public String storagePoolInternalId() {
        return this.storagePoolInternalId;
    }

    /**
     * Get the storagePoolResourceId property: Azure resource ID of the storage pool.
     * 
     * @return the storagePoolResourceId value.
     */
    public String storagePoolResourceId() {
        return this.storagePoolResourceId;
    }

    /**
     * Get the displayName property: Human-readable name of the AVS VM.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the createdTimestamp property: Date at which the AVS VM was created, as an RFC 3339 timestamp.
     * 
     * @return the createdTimestamp value.
     */
    public String createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the softDeletion property: AVS VM's soft-deletion state.
     * 
     * @return the softDeletion value.
     */
    public SoftDeletion softDeletion() {
        return this.softDeletion;
    }

    /**
     * Get the volumeContainerType property: Specify which control plane handles the lifecycle of the volume container.
     * 
     * @return the volumeContainerType value.
     */
    public VolumeContainerType volumeContainerType() {
        return this.volumeContainerType;
    }

    /**
     * Get the avs property: AVS VM details.
     * 
     * @return the avs value.
     */
    public AvsVmDetails avs() {
        return this.avs;
    }

    /**
     * Get the space property: Contains properties related to used Flash space.
     * 
     * @return the space value.
     */
    public Space space() {
        return this.space;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (softDeletion() != null) {
            softDeletion().validate();
        }
        if (avs() != null) {
            avs().validate();
        }
        if (space() != null) {
            space().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("softDeletion", this.softDeletion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsVmProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsVmProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsVmProperties.
     */
    public static AvsVmProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsVmProperties deserializedAvsVmProperties = new AvsVmProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storagePoolInternalId".equals(fieldName)) {
                    deserializedAvsVmProperties.storagePoolInternalId = reader.getString();
                } else if ("storagePoolResourceId".equals(fieldName)) {
                    deserializedAvsVmProperties.storagePoolResourceId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAvsVmProperties.displayName = reader.getString();
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAvsVmProperties.createdTimestamp = reader.getString();
                } else if ("softDeletion".equals(fieldName)) {
                    deserializedAvsVmProperties.softDeletion = SoftDeletion.fromJson(reader);
                } else if ("volumeContainerType".equals(fieldName)) {
                    deserializedAvsVmProperties.volumeContainerType
                        = VolumeContainerType.fromString(reader.getString());
                } else if ("avs".equals(fieldName)) {
                    deserializedAvsVmProperties.avs = AvsVmDetails.fromJson(reader);
                } else if ("space".equals(fieldName)) {
                    deserializedAvsVmProperties.space = Space.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAvsVmProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsVmProperties;
        });
    }
}
