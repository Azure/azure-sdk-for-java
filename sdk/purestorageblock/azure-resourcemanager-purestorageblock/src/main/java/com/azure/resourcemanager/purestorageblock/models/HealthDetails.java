// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Health metrics for a storage pool.
 */
@Immutable
public final class HealthDetails implements JsonSerializable<HealthDetails> {
    /*
     * How full the pool is right now, in %, compared to the maximum size it can grow to; estimated based on current
     * usage and data reduction ratio
     */
    private double usedCapacityPercentage;

    /*
     * Bandwidth usage metrics
     */
    private BandwidthUsage bandwidthUsage;

    /*
     * IOPS usage metrics
     */
    private IopsUsage iopsUsage;

    /*
     * Storage space usage
     */
    private Space space;

    /*
     * Data reduction ratio achieved on this pool
     */
    private double dataReductionRatio;

    /*
     * Estimated maximum capacity of the pool, in bytes, based on current usage and data reduction ratio
     */
    private long estimatedMaxCapacity;

    /**
     * Creates an instance of HealthDetails class.
     */
    private HealthDetails() {
    }

    /**
     * Get the usedCapacityPercentage property: How full the pool is right now, in %, compared to the maximum size it
     * can grow to; estimated based on current usage and data reduction ratio.
     * 
     * @return the usedCapacityPercentage value.
     */
    public double usedCapacityPercentage() {
        return this.usedCapacityPercentage;
    }

    /**
     * Get the bandwidthUsage property: Bandwidth usage metrics.
     * 
     * @return the bandwidthUsage value.
     */
    public BandwidthUsage bandwidthUsage() {
        return this.bandwidthUsage;
    }

    /**
     * Get the iopsUsage property: IOPS usage metrics.
     * 
     * @return the iopsUsage value.
     */
    public IopsUsage iopsUsage() {
        return this.iopsUsage;
    }

    /**
     * Get the space property: Storage space usage.
     * 
     * @return the space value.
     */
    public Space space() {
        return this.space;
    }

    /**
     * Get the dataReductionRatio property: Data reduction ratio achieved on this pool.
     * 
     * @return the dataReductionRatio value.
     */
    public double dataReductionRatio() {
        return this.dataReductionRatio;
    }

    /**
     * Get the estimatedMaxCapacity property: Estimated maximum capacity of the pool, in bytes, based on current usage
     * and data reduction ratio.
     * 
     * @return the estimatedMaxCapacity value.
     */
    public long estimatedMaxCapacity() {
        return this.estimatedMaxCapacity;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (bandwidthUsage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property bandwidthUsage in model HealthDetails"));
        } else {
            bandwidthUsage().validate();
        }
        if (iopsUsage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property iopsUsage in model HealthDetails"));
        } else {
            iopsUsage().validate();
        }
        if (space() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property space in model HealthDetails"));
        } else {
            space().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(HealthDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("usedCapacityPercentage", this.usedCapacityPercentage);
        jsonWriter.writeJsonField("bandwidthUsage", this.bandwidthUsage);
        jsonWriter.writeJsonField("iopsUsage", this.iopsUsage);
        jsonWriter.writeJsonField("space", this.space);
        jsonWriter.writeDoubleField("dataReductionRatio", this.dataReductionRatio);
        jsonWriter.writeLongField("estimatedMaxCapacity", this.estimatedMaxCapacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HealthDetails.
     */
    public static HealthDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthDetails deserializedHealthDetails = new HealthDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("usedCapacityPercentage".equals(fieldName)) {
                    deserializedHealthDetails.usedCapacityPercentage = reader.getDouble();
                } else if ("bandwidthUsage".equals(fieldName)) {
                    deserializedHealthDetails.bandwidthUsage = BandwidthUsage.fromJson(reader);
                } else if ("iopsUsage".equals(fieldName)) {
                    deserializedHealthDetails.iopsUsage = IopsUsage.fromJson(reader);
                } else if ("space".equals(fieldName)) {
                    deserializedHealthDetails.space = Space.fromJson(reader);
                } else if ("dataReductionRatio".equals(fieldName)) {
                    deserializedHealthDetails.dataReductionRatio = reader.getDouble();
                } else if ("estimatedMaxCapacity".equals(fieldName)) {
                    deserializedHealthDetails.estimatedMaxCapacity = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthDetails;
        });
    }
}
