// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.purestorageblock.fluent.models.StoragePoolInner;
import com.azure.resourcemanager.purestorageblock.models.AvsConnection;
import com.azure.resourcemanager.purestorageblock.models.AvsStatus;
import com.azure.resourcemanager.purestorageblock.models.ManagedServiceIdentity;
import com.azure.resourcemanager.purestorageblock.models.StoragePool;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolEnableAvsConnectionPost;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolFinalizeAvsConnectionPost;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolHealthInfo;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolProperties;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolUpdate;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolUpdateProperties;
import java.util.Collections;
import java.util.Map;

public final class StoragePoolImpl implements StoragePool, StoragePool.Definition, StoragePool.Update {
    private StoragePoolInner innerObject;

    private final com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public StoragePoolProperties properties() {
        return this.innerModel().properties();
    }

    public ManagedServiceIdentity identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public StoragePoolInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.purestorageblock.PureStorageBlockManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String storagePoolName;

    private StoragePoolUpdate updateProperties;

    public StoragePoolImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public StoragePool create() {
        this.innerObject = serviceManager.serviceClient()
            .getStoragePools()
            .create(resourceGroupName, storagePoolName, this.innerModel(), Context.NONE);
        return this;
    }

    public StoragePool create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getStoragePools()
            .create(resourceGroupName, storagePoolName, this.innerModel(), context);
        return this;
    }

    StoragePoolImpl(String name, com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager) {
        this.innerObject = new StoragePoolInner();
        this.serviceManager = serviceManager;
        this.storagePoolName = name;
    }

    public StoragePoolImpl update() {
        this.updateProperties = new StoragePoolUpdate();
        return this;
    }

    public StoragePool apply() {
        this.innerObject = serviceManager.serviceClient()
            .getStoragePools()
            .update(resourceGroupName, storagePoolName, updateProperties, Context.NONE);
        return this;
    }

    public StoragePool apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getStoragePools()
            .update(resourceGroupName, storagePoolName, updateProperties, context);
        return this;
    }

    StoragePoolImpl(StoragePoolInner innerObject,
        com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.storagePoolName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "storagePools");
    }

    public StoragePool refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getStoragePools()
            .getByResourceGroupWithResponse(resourceGroupName, storagePoolName, Context.NONE)
            .getValue();
        return this;
    }

    public StoragePool refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getStoragePools()
            .getByResourceGroupWithResponse(resourceGroupName, storagePoolName, context)
            .getValue();
        return this;
    }

    public Response<StoragePoolHealthInfo> getHealthStatusWithResponse(Context context) {
        return serviceManager.storagePools().getHealthStatusWithResponse(resourceGroupName, storagePoolName, context);
    }

    public StoragePoolHealthInfo getHealthStatus() {
        return serviceManager.storagePools().getHealthStatus(resourceGroupName, storagePoolName);
    }

    public Response<AvsConnection> getAvsConnectionWithResponse(Context context) {
        return serviceManager.storagePools().getAvsConnectionWithResponse(resourceGroupName, storagePoolName, context);
    }

    public AvsConnection getAvsConnection() {
        return serviceManager.storagePools().getAvsConnection(resourceGroupName, storagePoolName);
    }

    public Response<AvsStatus> getAvsStatusWithResponse(Context context) {
        return serviceManager.storagePools().getAvsStatusWithResponse(resourceGroupName, storagePoolName, context);
    }

    public AvsStatus getAvsStatus() {
        return serviceManager.storagePools().getAvsStatus(resourceGroupName, storagePoolName);
    }

    public void enableAvsConnection(StoragePoolEnableAvsConnectionPost properties) {
        serviceManager.storagePools().enableAvsConnection(resourceGroupName, storagePoolName, properties);
    }

    public void enableAvsConnection(StoragePoolEnableAvsConnectionPost properties, Context context) {
        serviceManager.storagePools().enableAvsConnection(resourceGroupName, storagePoolName, properties, context);
    }

    public void disableAvsConnection() {
        serviceManager.storagePools().disableAvsConnection(resourceGroupName, storagePoolName);
    }

    public void disableAvsConnection(Context context) {
        serviceManager.storagePools().disableAvsConnection(resourceGroupName, storagePoolName, context);
    }

    public void finalizeAvsConnection(StoragePoolFinalizeAvsConnectionPost properties) {
        serviceManager.storagePools().finalizeAvsConnection(resourceGroupName, storagePoolName, properties);
    }

    public void finalizeAvsConnection(StoragePoolFinalizeAvsConnectionPost properties, Context context) {
        serviceManager.storagePools().finalizeAvsConnection(resourceGroupName, storagePoolName, properties, context);
    }

    public void repairAvsConnection() {
        serviceManager.storagePools().repairAvsConnection(resourceGroupName, storagePoolName);
    }

    public void repairAvsConnection(Context context) {
        serviceManager.storagePools().repairAvsConnection(resourceGroupName, storagePoolName, context);
    }

    public StoragePoolImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public StoragePoolImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public StoragePoolImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public StoragePoolImpl withProperties(StoragePoolProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public StoragePoolImpl withIdentity(ManagedServiceIdentity identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateProperties.withIdentity(identity);
            return this;
        }
    }

    public StoragePoolImpl withProperties(StoragePoolUpdateProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
