// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Explicit service initialization data.
 */
@Fluent
public final class ServiceInitializationInfo implements JsonSerializable<ServiceInitializationInfo> {
    /*
     * Service account username
     */
    private String serviceAccountUsername;

    /*
     * Service account password
     */
    private String serviceAccountPassword;

    /*
     * AVS instance's vSphere IP address
     */
    private String vSphereIp;

    /*
     * AVS instance's vSphere certificate
     */
    private String vSphereCertificate;

    /**
     * Creates an instance of ServiceInitializationInfo class.
     */
    public ServiceInitializationInfo() {
    }

    /**
     * Get the serviceAccountUsername property: Service account username.
     * 
     * @return the serviceAccountUsername value.
     */
    public String serviceAccountUsername() {
        return this.serviceAccountUsername;
    }

    /**
     * Set the serviceAccountUsername property: Service account username.
     * 
     * @param serviceAccountUsername the serviceAccountUsername value to set.
     * @return the ServiceInitializationInfo object itself.
     */
    public ServiceInitializationInfo withServiceAccountUsername(String serviceAccountUsername) {
        this.serviceAccountUsername = serviceAccountUsername;
        return this;
    }

    /**
     * Get the serviceAccountPassword property: Service account password.
     * 
     * @return the serviceAccountPassword value.
     */
    public String serviceAccountPassword() {
        return this.serviceAccountPassword;
    }

    /**
     * Set the serviceAccountPassword property: Service account password.
     * 
     * @param serviceAccountPassword the serviceAccountPassword value to set.
     * @return the ServiceInitializationInfo object itself.
     */
    public ServiceInitializationInfo withServiceAccountPassword(String serviceAccountPassword) {
        this.serviceAccountPassword = serviceAccountPassword;
        return this;
    }

    /**
     * Get the vSphereIp property: AVS instance's vSphere IP address.
     * 
     * @return the vSphereIp value.
     */
    public String vSphereIp() {
        return this.vSphereIp;
    }

    /**
     * Set the vSphereIp property: AVS instance's vSphere IP address.
     * 
     * @param vSphereIp the vSphereIp value to set.
     * @return the ServiceInitializationInfo object itself.
     */
    public ServiceInitializationInfo withVSphereIp(String vSphereIp) {
        this.vSphereIp = vSphereIp;
        return this;
    }

    /**
     * Get the vSphereCertificate property: AVS instance's vSphere certificate.
     * 
     * @return the vSphereCertificate value.
     */
    public String vSphereCertificate() {
        return this.vSphereCertificate;
    }

    /**
     * Set the vSphereCertificate property: AVS instance's vSphere certificate.
     * 
     * @param vSphereCertificate the vSphereCertificate value to set.
     * @return the ServiceInitializationInfo object itself.
     */
    public ServiceInitializationInfo withVSphereCertificate(String vSphereCertificate) {
        this.vSphereCertificate = vSphereCertificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serviceAccountUsername", this.serviceAccountUsername);
        jsonWriter.writeStringField("serviceAccountPassword", this.serviceAccountPassword);
        jsonWriter.writeStringField("vSphereIp", this.vSphereIp);
        jsonWriter.writeStringField("vSphereCertificate", this.vSphereCertificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceInitializationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceInitializationInfo if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceInitializationInfo.
     */
    public static ServiceInitializationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceInitializationInfo deserializedServiceInitializationInfo = new ServiceInitializationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serviceAccountUsername".equals(fieldName)) {
                    deserializedServiceInitializationInfo.serviceAccountUsername = reader.getString();
                } else if ("serviceAccountPassword".equals(fieldName)) {
                    deserializedServiceInitializationInfo.serviceAccountPassword = reader.getString();
                } else if ("vSphereIp".equals(fieldName)) {
                    deserializedServiceInitializationInfo.vSphereIp = reader.getString();
                } else if ("vSphereCertificate".equals(fieldName)) {
                    deserializedServiceInitializationInfo.vSphereCertificate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceInitializationInfo;
        });
    }
}
