// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Network in which the storage pool will be made available.
 */
@Fluent
public final class VnetInjection implements JsonSerializable<VnetInjection> {
    /*
     * Azure resource ID of the Virtual Network subnet where the storage pool will be connected
     */
    private String subnetId;

    /*
     * Azure resource ID of the Virtual Network in which the subnet is located
     */
    private String vnetId;

    /**
     * Creates an instance of VnetInjection class.
     */
    public VnetInjection() {
    }

    /**
     * Get the subnetId property: Azure resource ID of the Virtual Network subnet where the storage pool will be
     * connected.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Azure resource ID of the Virtual Network subnet where the storage pool will be
     * connected.
     * 
     * @param subnetId the subnetId value to set.
     * @return the VnetInjection object itself.
     */
    public VnetInjection withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the vnetId property: Azure resource ID of the Virtual Network in which the subnet is located.
     * 
     * @return the vnetId value.
     */
    public String vnetId() {
        return this.vnetId;
    }

    /**
     * Set the vnetId property: Azure resource ID of the Virtual Network in which the subnet is located.
     * 
     * @param vnetId the vnetId value to set.
     * @return the VnetInjection object itself.
     */
    public VnetInjection withVnetId(String vnetId) {
        this.vnetId = vnetId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property subnetId in model VnetInjection"));
        }
        if (vnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property vnetId in model VnetInjection"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VnetInjection.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeStringField("vnetId", this.vnetId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VnetInjection from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VnetInjection if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VnetInjection.
     */
    public static VnetInjection fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VnetInjection deserializedVnetInjection = new VnetInjection();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedVnetInjection.subnetId = reader.getString();
                } else if ("vnetId".equals(fieldName)) {
                    deserializedVnetInjection.vnetId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVnetInjection;
        });
    }
}
