// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * internal.
 */
@Immutable
public final class ProtectionPolicyLimits implements JsonSerializable<ProtectionPolicyLimits> {
    /*
     * internal
     */
    private RangeLimits frequency;

    /*
     * internal
     */
    private RangeLimits retention;

    /**
     * Creates an instance of ProtectionPolicyLimits class.
     */
    private ProtectionPolicyLimits() {
    }

    /**
     * Get the frequency property: internal.
     * 
     * @return the frequency value.
     */
    public RangeLimits frequency() {
        return this.frequency;
    }

    /**
     * Get the retention property: internal.
     * 
     * @return the retention value.
     */
    public RangeLimits retention() {
        return this.retention;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("frequency", this.frequency);
        jsonWriter.writeJsonField("retention", this.retention);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProtectionPolicyLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProtectionPolicyLimits if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ProtectionPolicyLimits.
     */
    public static ProtectionPolicyLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProtectionPolicyLimits deserializedProtectionPolicyLimits = new ProtectionPolicyLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("frequency".equals(fieldName)) {
                    deserializedProtectionPolicyLimits.frequency = RangeLimits.fromJson(reader);
                } else if ("retention".equals(fieldName)) {
                    deserializedProtectionPolicyLimits.retention = RangeLimits.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProtectionPolicyLimits;
        });
    }
}
