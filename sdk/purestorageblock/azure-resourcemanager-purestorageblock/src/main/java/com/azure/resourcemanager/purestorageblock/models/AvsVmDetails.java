// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AVS VM details.
 */
@Immutable
public final class AvsVmDetails implements JsonSerializable<AvsVmDetails> {
    /*
     * ID of the AVS VM using this set of volumes
     */
    private String vmId;

    /*
     * Name of the VMware VM using this set of volumes
     */
    private String vmName;

    /*
     * Type of the VMware VM using this set of volumes
     */
    private VmType vmType;

    /*
     * Pure Storage's internal ID for this AVS VM
     */
    private String avsVmInternalId;

    /**
     * Creates an instance of AvsVmDetails class.
     */
    private AvsVmDetails() {
    }

    /**
     * Get the vmId property: ID of the AVS VM using this set of volumes.
     * 
     * @return the vmId value.
     */
    public String vmId() {
        return this.vmId;
    }

    /**
     * Get the vmName property: Name of the VMware VM using this set of volumes.
     * 
     * @return the vmName value.
     */
    public String vmName() {
        return this.vmName;
    }

    /**
     * Get the vmType property: Type of the VMware VM using this set of volumes.
     * 
     * @return the vmType value.
     */
    public VmType vmType() {
        return this.vmType;
    }

    /**
     * Get the avsVmInternalId property: Pure Storage's internal ID for this AVS VM.
     * 
     * @return the avsVmInternalId value.
     */
    public String avsVmInternalId() {
        return this.avsVmInternalId;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vmId", this.vmId);
        jsonWriter.writeStringField("vmName", this.vmName);
        jsonWriter.writeStringField("vmType", this.vmType == null ? null : this.vmType.toString());
        jsonWriter.writeStringField("avsVmInternalId", this.avsVmInternalId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsVmDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsVmDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvsVmDetails.
     */
    public static AvsVmDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsVmDetails deserializedAvsVmDetails = new AvsVmDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmId".equals(fieldName)) {
                    deserializedAvsVmDetails.vmId = reader.getString();
                } else if ("vmName".equals(fieldName)) {
                    deserializedAvsVmDetails.vmName = reader.getString();
                } else if ("vmType".equals(fieldName)) {
                    deserializedAvsVmDetails.vmType = VmType.fromString(reader.getString());
                } else if ("avsVmInternalId".equals(fieldName)) {
                    deserializedAvsVmDetails.avsVmInternalId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsVmDetails;
        });
    }
}
