// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the Reservation.
 */
@Fluent
public final class ReservationUpdateProperties implements JsonSerializable<ReservationUpdateProperties> {
    /*
     * User details
     */
    private UserDetails user;

    /**
     * Creates an instance of ReservationUpdateProperties class.
     */
    public ReservationUpdateProperties() {
    }

    /**
     * Get the user property: User details.
     * 
     * @return the user value.
     */
    public UserDetails user() {
        return this.user;
    }

    /**
     * Set the user property: User details.
     * 
     * @param user the user value to set.
     * @return the ReservationUpdateProperties object itself.
     */
    public ReservationUpdateProperties withUser(UserDetails user) {
        this.user = user;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ReservationUpdateProperties.
     */
    public static ReservationUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationUpdateProperties deserializedReservationUpdateProperties = new ReservationUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("user".equals(fieldName)) {
                    deserializedReservationUpdateProperties.user = UserDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationUpdateProperties;
        });
    }
}
