// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * EnableAvsConnection payload information.
 */
@Fluent
public final class StoragePoolEnableAvsConnectionPost implements JsonSerializable<StoragePoolEnableAvsConnectionPost> {
    /*
     * Azure resource ID of the AVS SDDC to connect to
     */
    private String clusterResourceId;

    /**
     * Creates an instance of StoragePoolEnableAvsConnectionPost class.
     */
    public StoragePoolEnableAvsConnectionPost() {
    }

    /**
     * Get the clusterResourceId property: Azure resource ID of the AVS SDDC to connect to.
     * 
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Set the clusterResourceId property: Azure resource ID of the AVS SDDC to connect to.
     * 
     * @param clusterResourceId the clusterResourceId value to set.
     * @return the StoragePoolEnableAvsConnectionPost object itself.
     */
    public StoragePoolEnableAvsConnectionPost withClusterResourceId(String clusterResourceId) {
        this.clusterResourceId = clusterResourceId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sddcResourceId", this.clusterResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StoragePoolEnableAvsConnectionPost from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StoragePoolEnableAvsConnectionPost if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StoragePoolEnableAvsConnectionPost.
     */
    public static StoragePoolEnableAvsConnectionPost fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StoragePoolEnableAvsConnectionPost deserializedStoragePoolEnableAvsConnectionPost
                = new StoragePoolEnableAvsConnectionPost();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sddcResourceId".equals(fieldName)) {
                    deserializedStoragePoolEnableAvsConnectionPost.clusterResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStoragePoolEnableAvsConnectionPost;
        });
    }
}
