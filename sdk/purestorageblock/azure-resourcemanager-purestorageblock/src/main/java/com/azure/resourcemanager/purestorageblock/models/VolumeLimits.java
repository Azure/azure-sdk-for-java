// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Limits used for volumes.
 */
@Immutable
public final class VolumeLimits implements JsonSerializable<VolumeLimits> {
    /*
     * Provisioned size limits for a volume, in bytes
     */
    private RangeLimits provisionedSize;

    /**
     * Creates an instance of VolumeLimits class.
     */
    private VolumeLimits() {
    }

    /**
     * Get the provisionedSize property: Provisioned size limits for a volume, in bytes.
     * 
     * @return the provisionedSize value.
     */
    public RangeLimits provisionedSize() {
        return this.provisionedSize;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (provisionedSize() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property provisionedSize in model VolumeLimits"));
        } else {
            provisionedSize().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VolumeLimits.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("provisionedSize", this.provisionedSize);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeLimits if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VolumeLimits.
     */
    public static VolumeLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeLimits deserializedVolumeLimits = new VolumeLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisionedSize".equals(fieldName)) {
                    deserializedVolumeLimits.provisionedSize = RangeLimits.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeLimits;
        });
    }
}
