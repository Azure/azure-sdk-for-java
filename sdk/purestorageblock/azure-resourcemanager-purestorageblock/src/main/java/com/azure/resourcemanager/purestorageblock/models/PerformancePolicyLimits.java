// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * internal.
 */
@Immutable
public final class PerformancePolicyLimits implements JsonSerializable<PerformancePolicyLimits> {
    /*
     * internal
     */
    private RangeLimits iopsLimit;

    /*
     * internal
     */
    private RangeLimits bandwidthLimit;

    /**
     * Creates an instance of PerformancePolicyLimits class.
     */
    private PerformancePolicyLimits() {
    }

    /**
     * Get the iopsLimit property: internal.
     * 
     * @return the iopsLimit value.
     */
    public RangeLimits iopsLimit() {
        return this.iopsLimit;
    }

    /**
     * Get the bandwidthLimit property: internal.
     * 
     * @return the bandwidthLimit value.
     */
    public RangeLimits bandwidthLimit() {
        return this.bandwidthLimit;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("iopsLimit", this.iopsLimit);
        jsonWriter.writeJsonField("bandwidthLimit", this.bandwidthLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PerformancePolicyLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PerformancePolicyLimits if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PerformancePolicyLimits.
     */
    public static PerformancePolicyLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PerformancePolicyLimits deserializedPerformancePolicyLimits = new PerformancePolicyLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("iopsLimit".equals(fieldName)) {
                    deserializedPerformancePolicyLimits.iopsLimit = RangeLimits.fromJson(reader);
                } else if ("bandwidthLimit".equals(fieldName)) {
                    deserializedPerformancePolicyLimits.bandwidthLimit = RangeLimits.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPerformancePolicyLimits;
        });
    }
}
