// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Storage space usage.
 */
@Immutable
public final class Space implements JsonSerializable<Space> {
    /*
     * Total space occupied by customer data (i.e., being billed for), in bytes
     */
    private long totalUsed;

    /*
     * Unique space occupied by customer data, in bytes; for a volume, this is the amount of storage that would be freed
     * by deleting the volume, since snapshot and shared data would be kept
     */
    private long unique;

    /*
     * Space occupied by data unique to one or more snapshots, in bytes
     */
    private long snapshots;

    /*
     * Space occupied by duplicated data, meaning data shared with other volumes and snapshots as a result of data
     * deduplication, in bytes
     */
    private long shared;

    /**
     * Creates an instance of Space class.
     */
    private Space() {
    }

    /**
     * Get the totalUsed property: Total space occupied by customer data (i.e., being billed for), in bytes.
     * 
     * @return the totalUsed value.
     */
    public long totalUsed() {
        return this.totalUsed;
    }

    /**
     * Get the unique property: Unique space occupied by customer data, in bytes; for a volume, this is the amount of
     * storage that would be freed by deleting the volume, since snapshot and shared data would be kept.
     * 
     * @return the unique value.
     */
    public long unique() {
        return this.unique;
    }

    /**
     * Get the snapshots property: Space occupied by data unique to one or more snapshots, in bytes.
     * 
     * @return the snapshots value.
     */
    public long snapshots() {
        return this.snapshots;
    }

    /**
     * Get the shared property: Space occupied by duplicated data, meaning data shared with other volumes and snapshots
     * as a result of data deduplication, in bytes.
     * 
     * @return the shared value.
     */
    public long shared() {
        return this.shared;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("totalUsed", this.totalUsed);
        jsonWriter.writeLongField("unique", this.unique);
        jsonWriter.writeLongField("snapshots", this.snapshots);
        jsonWriter.writeLongField("shared", this.shared);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Space from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Space if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Space.
     */
    public static Space fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Space deserializedSpace = new Space();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("totalUsed".equals(fieldName)) {
                    deserializedSpace.totalUsed = reader.getLong();
                } else if ("unique".equals(fieldName)) {
                    deserializedSpace.unique = reader.getLong();
                } else if ("snapshots".equals(fieldName)) {
                    deserializedSpace.snapshots = reader.getLong();
                } else if ("shared".equals(fieldName)) {
                    deserializedSpace.shared = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSpace;
        });
    }
}
