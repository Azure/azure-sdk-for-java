// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * IOPS usage metrics.
 */
@Immutable
public final class IopsUsage implements JsonSerializable<IopsUsage> {
    /*
     * Current number of IOPS (maximum value over the last 10 minutes)
     */
    private long current;

    /*
     * IOPS value currently provisioned for the storage pool
     */
    private long provisioned;

    /*
     * Maximum IOPS value that can be provisioned for the storage pool
     */
    private long max;

    /**
     * Creates an instance of IopsUsage class.
     */
    private IopsUsage() {
    }

    /**
     * Get the current property: Current number of IOPS (maximum value over the last 10 minutes).
     * 
     * @return the current value.
     */
    public long current() {
        return this.current;
    }

    /**
     * Get the provisioned property: IOPS value currently provisioned for the storage pool.
     * 
     * @return the provisioned value.
     */
    public long provisioned() {
        return this.provisioned;
    }

    /**
     * Get the max property: Maximum IOPS value that can be provisioned for the storage pool.
     * 
     * @return the max value.
     */
    public long max() {
        return this.max;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("current", this.current);
        jsonWriter.writeLongField("provisioned", this.provisioned);
        jsonWriter.writeLongField("max", this.max);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IopsUsage from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IopsUsage if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IopsUsage.
     */
    public static IopsUsage fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IopsUsage deserializedIopsUsage = new IopsUsage();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("current".equals(fieldName)) {
                    deserializedIopsUsage.current = reader.getLong();
                } else if ("provisioned".equals(fieldName)) {
                    deserializedIopsUsage.provisioned = reader.getLong();
                } else if ("max".equals(fieldName)) {
                    deserializedIopsUsage.max = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIopsUsage;
        });
    }
}
