// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Connected AVS status.
 */
@Immutable
public final class AzureVmwareService implements JsonSerializable<AzureVmwareService> {
    /*
     * If true, an AVS SDDC is successfully connected to the storage pool
     */
    private boolean avsEnabled;

    /*
     * Azure resource ID of the AVS SDDC the storage pool is connected to
     */
    private String clusterResourceId;

    /**
     * Creates an instance of AzureVmwareService class.
     */
    private AzureVmwareService() {
    }

    /**
     * Get the avsEnabled property: If true, an AVS SDDC is successfully connected to the storage pool.
     * 
     * @return the avsEnabled value.
     */
    public boolean avsEnabled() {
        return this.avsEnabled;
    }

    /**
     * Get the clusterResourceId property: Azure resource ID of the AVS SDDC the storage pool is connected to.
     * 
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("avsEnabled", this.avsEnabled);
        jsonWriter.writeStringField("sddcResourceId", this.clusterResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVmwareService from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVmwareService if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AzureVmwareService.
     */
    public static AzureVmwareService fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVmwareService deserializedAzureVmwareService = new AzureVmwareService();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("avsEnabled".equals(fieldName)) {
                    deserializedAzureVmwareService.avsEnabled = reader.getBoolean();
                } else if ("sddcResourceId".equals(fieldName)) {
                    deserializedAzureVmwareService.clusterResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVmwareService;
        });
    }
}
