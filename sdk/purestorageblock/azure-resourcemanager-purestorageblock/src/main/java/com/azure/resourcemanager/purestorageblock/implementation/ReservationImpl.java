// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.purestorageblock.fluent.models.ReservationInner;
import com.azure.resourcemanager.purestorageblock.models.LimitDetails;
import com.azure.resourcemanager.purestorageblock.models.Reservation;
import com.azure.resourcemanager.purestorageblock.models.ReservationBillingStatus;
import com.azure.resourcemanager.purestorageblock.models.ReservationBillingUsageReport;
import com.azure.resourcemanager.purestorageblock.models.ReservationPropertiesBaseResourceProperties;
import com.azure.resourcemanager.purestorageblock.models.ReservationUpdate;
import com.azure.resourcemanager.purestorageblock.models.ReservationUpdateProperties;
import java.util.Collections;
import java.util.Map;

public final class ReservationImpl implements Reservation, Reservation.Definition, Reservation.Update {
    private ReservationInner innerObject;

    private final com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ReservationPropertiesBaseResourceProperties properties() {
        return this.innerModel().properties();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ReservationInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.purestorageblock.PureStorageBlockManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String reservationName;

    private ReservationUpdate updateProperties;

    public ReservationImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Reservation create() {
        this.innerObject = serviceManager.serviceClient()
            .getReservations()
            .create(resourceGroupName, reservationName, this.innerModel(), Context.NONE);
        return this;
    }

    public Reservation create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getReservations()
            .create(resourceGroupName, reservationName, this.innerModel(), context);
        return this;
    }

    ReservationImpl(String name, com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager) {
        this.innerObject = new ReservationInner();
        this.serviceManager = serviceManager;
        this.reservationName = name;
    }

    public ReservationImpl update() {
        this.updateProperties = new ReservationUpdate();
        return this;
    }

    public Reservation apply() {
        this.innerObject = serviceManager.serviceClient()
            .getReservations()
            .update(resourceGroupName, reservationName, updateProperties, Context.NONE);
        return this;
    }

    public Reservation apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getReservations()
            .update(resourceGroupName, reservationName, updateProperties, context);
        return this;
    }

    ReservationImpl(ReservationInner innerObject,
        com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.reservationName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "reservations");
    }

    public Reservation refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getReservations()
            .getByResourceGroupWithResponse(resourceGroupName, reservationName, Context.NONE)
            .getValue();
        return this;
    }

    public Reservation refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getReservations()
            .getByResourceGroupWithResponse(resourceGroupName, reservationName, context)
            .getValue();
        return this;
    }

    public Response<LimitDetails> getResourceLimitsWithResponse(Context context) {
        return serviceManager.reservations().getResourceLimitsWithResponse(resourceGroupName, reservationName, context);
    }

    public LimitDetails getResourceLimits() {
        return serviceManager.reservations().getResourceLimits(resourceGroupName, reservationName);
    }

    public Response<ReservationBillingStatus> getBillingStatusWithResponse(Context context) {
        return serviceManager.reservations().getBillingStatusWithResponse(resourceGroupName, reservationName, context);
    }

    public ReservationBillingStatus getBillingStatus() {
        return serviceManager.reservations().getBillingStatus(resourceGroupName, reservationName);
    }

    public Response<ReservationBillingUsageReport> getBillingReportWithResponse(Context context) {
        return serviceManager.reservations().getBillingReportWithResponse(resourceGroupName, reservationName, context);
    }

    public ReservationBillingUsageReport getBillingReport() {
        return serviceManager.reservations().getBillingReport(resourceGroupName, reservationName);
    }

    public ReservationImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ReservationImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ReservationImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public ReservationImpl withProperties(ReservationPropertiesBaseResourceProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public ReservationImpl withProperties(ReservationUpdateProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel() == null || this.innerModel().id() == null;
    }
}
