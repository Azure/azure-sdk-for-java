// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Soft-deletion state.
 */
@Fluent
public final class SoftDeletion implements JsonSerializable<SoftDeletion> {
    /*
     * If false, the resource is active; if true, the resource has been destroyed; resources can be soft-deleted by
     * setting destroyed to true, and recovered by setting it to false
     */
    private boolean destroyed;

    /*
     * Date at which the resource will be eradicated and impossible to recover, as an RFC 3339 timestamp; invalid if
     * destroyed is false;
     */
    private String eradicationTimestamp;

    /**
     * Creates an instance of SoftDeletion class.
     */
    public SoftDeletion() {
    }

    /**
     * Get the destroyed property: If false, the resource is active; if true, the resource has been destroyed; resources
     * can be soft-deleted by setting destroyed to true, and recovered by setting it to false.
     * 
     * @return the destroyed value.
     */
    public boolean destroyed() {
        return this.destroyed;
    }

    /**
     * Set the destroyed property: If false, the resource is active; if true, the resource has been destroyed; resources
     * can be soft-deleted by setting destroyed to true, and recovered by setting it to false.
     * 
     * @param destroyed the destroyed value to set.
     * @return the SoftDeletion object itself.
     */
    public SoftDeletion withDestroyed(boolean destroyed) {
        this.destroyed = destroyed;
        return this;
    }

    /**
     * Get the eradicationTimestamp property: Date at which the resource will be eradicated and impossible to recover,
     * as an RFC 3339 timestamp; invalid if destroyed is false;.
     * 
     * @return the eradicationTimestamp value.
     */
    public String eradicationTimestamp() {
        return this.eradicationTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeBooleanField("destroyed", this.destroyed);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SoftDeletion from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SoftDeletion if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SoftDeletion.
     */
    public static SoftDeletion fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SoftDeletion deserializedSoftDeletion = new SoftDeletion();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destroyed".equals(fieldName)) {
                    deserializedSoftDeletion.destroyed = reader.getBoolean();
                } else if ("eradicationTimestamp".equals(fieldName)) {
                    deserializedSoftDeletion.eradicationTimestamp = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSoftDeletion;
        });
    }
}
