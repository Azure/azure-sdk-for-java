// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.purestorageblock.models.BillingUsageProperty;
import java.io.IOException;
import java.util.List;

/**
 * Represents a billing usage report, including overall status and detailed properties.
 */
@Immutable
public final class ReservationBillingUsageReportInner implements JsonSerializable<ReservationBillingUsageReportInner> {
    /*
     * Latest formatted billing report for this reservation
     */
    private String timestamp;

    /*
     * A list of detailed billing usage properties
     */
    private List<BillingUsageProperty> billingUsageProperties;

    /*
     * Overall status message of the billing usage report
     */
    private String overallStatusMessage;

    /**
     * Creates an instance of ReservationBillingUsageReportInner class.
     */
    private ReservationBillingUsageReportInner() {
    }

    /**
     * Get the timestamp property: Latest formatted billing report for this reservation.
     * 
     * @return the timestamp value.
     */
    public String timestamp() {
        return this.timestamp;
    }

    /**
     * Get the billingUsageProperties property: A list of detailed billing usage properties.
     * 
     * @return the billingUsageProperties value.
     */
    public List<BillingUsageProperty> billingUsageProperties() {
        return this.billingUsageProperties;
    }

    /**
     * Get the overallStatusMessage property: Overall status message of the billing usage report.
     * 
     * @return the overallStatusMessage value.
     */
    public String overallStatusMessage() {
        return this.overallStatusMessage;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (timestamp() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property timestamp in model ReservationBillingUsageReportInner"));
        }
        if (billingUsageProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property billingUsageProperties in model ReservationBillingUsageReportInner"));
        } else {
            billingUsageProperties().forEach(e -> e.validate());
        }
        if (overallStatusMessage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property overallStatusMessage in model ReservationBillingUsageReportInner"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ReservationBillingUsageReportInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp", this.timestamp);
        jsonWriter.writeArrayField("billingUsageProperties", this.billingUsageProperties,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("overallStatusMessage", this.overallStatusMessage);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationBillingUsageReportInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationBillingUsageReportInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReservationBillingUsageReportInner.
     */
    public static ReservationBillingUsageReportInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationBillingUsageReportInner deserializedReservationBillingUsageReportInner
                = new ReservationBillingUsageReportInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    deserializedReservationBillingUsageReportInner.timestamp = reader.getString();
                } else if ("billingUsageProperties".equals(fieldName)) {
                    List<BillingUsageProperty> billingUsageProperties
                        = reader.readArray(reader1 -> BillingUsageProperty.fromJson(reader1));
                    deserializedReservationBillingUsageReportInner.billingUsageProperties = billingUsageProperties;
                } else if ("overallStatusMessage".equals(fieldName)) {
                    deserializedReservationBillingUsageReportInner.overallStatusMessage = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationBillingUsageReportInner;
        });
    }
}
