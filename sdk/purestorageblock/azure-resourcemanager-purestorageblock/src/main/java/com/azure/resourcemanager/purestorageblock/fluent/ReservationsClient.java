// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.purestorageblock.fluent.models.LimitDetailsInner;
import com.azure.resourcemanager.purestorageblock.fluent.models.ReservationBillingStatusInner;
import com.azure.resourcemanager.purestorageblock.fluent.models.ReservationBillingUsageReportInner;
import com.azure.resourcemanager.purestorageblock.fluent.models.ReservationInner;
import com.azure.resourcemanager.purestorageblock.models.ReservationUpdate;

/**
 * An instance of this class provides access to all the operations defined in ReservationsClient.
 */
public interface ReservationsClient {
    /**
     * Get a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a reservation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ReservationInner> getByResourceGroupWithResponse(String resourceGroupName, String reservationName,
        Context context);

    /**
     * Get a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a reservation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationInner getByResourceGroup(String resourceGroupName, String reservationName);

    /**
     * Create a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReservationInner>, ReservationInner> beginCreate(String resourceGroupName,
        String reservationName, ReservationInner resource);

    /**
     * Create a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReservationInner>, ReservationInner> beginCreate(String resourceGroupName,
        String reservationName, ReservationInner resource, Context context);

    /**
     * Create a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param resource Resource create parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationInner create(String resourceGroupName, String reservationName, ReservationInner resource);

    /**
     * Create a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param resource Resource create parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationInner create(String resourceGroupName, String reservationName, ReservationInner resource,
        Context context);

    /**
     * Update a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReservationInner>, ReservationInner> beginUpdate(String resourceGroupName,
        String reservationName, ReservationUpdate properties);

    /**
     * Update a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ReservationInner>, ReservationInner> beginUpdate(String resourceGroupName,
        String reservationName, ReservationUpdate properties, Context context);

    /**
     * Update a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param properties The resource properties to be updated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationInner update(String resourceGroupName, String reservationName, ReservationUpdate properties);

    /**
     * Update a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param properties The resource properties to be updated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return pure Storage cloud service resource type, also called reservation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationInner update(String resourceGroupName, String reservationName, ReservationUpdate properties,
        Context context);

    /**
     * Delete a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String reservationName);

    /**
     * Delete a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String reservationName, Context context);

    /**
     * Delete a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String reservationName);

    /**
     * Delete a reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String reservationName, Context context);

    /**
     * List reservations by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Reservation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ReservationInner> listByResourceGroup(String resourceGroupName);

    /**
     * List reservations by resource group.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Reservation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ReservationInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List reservations by Azure subscription ID.
     * 
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Reservation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ReservationInner> list();

    /**
     * List reservations by Azure subscription ID.
     * 
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Reservation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ReservationInner> list(Context context);

    /**
     * Limits constraining certain resource properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return limits constraining certain resource properties along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<LimitDetailsInner> getResourceLimitsWithResponse(String resourceGroupName, String reservationName,
        Context context);

    /**
     * Limits constraining certain resource properties.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return limits constraining certain resource properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    LimitDetailsInner getResourceLimits(String resourceGroupName, String reservationName);

    /**
     * Provides various statistics about resources billed via given reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return latest billing status for this reservation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ReservationBillingStatusInner> getBillingStatusWithResponse(String resourceGroupName,
        String reservationName, Context context);

    /**
     * Provides various statistics about resources billed via given reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return latest billing status for this reservation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationBillingStatusInner getBillingStatus(String resourceGroupName, String reservationName);

    /**
     * Provides a summarized report along with actions for resources billed via given reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a billing usage report, including overall status and detailed properties along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ReservationBillingUsageReportInner> getBillingReportWithResponse(String resourceGroupName,
        String reservationName, Context context);

    /**
     * Provides a summarized report along with actions for resources billed via given reservation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param reservationName Name of the reservation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a billing usage report, including overall status and detailed properties.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ReservationBillingUsageReportInner getBillingReport(String resourceGroupName, String reservationName);
}
