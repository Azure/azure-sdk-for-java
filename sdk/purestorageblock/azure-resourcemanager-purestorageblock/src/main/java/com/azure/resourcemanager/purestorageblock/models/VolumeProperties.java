// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Volume properties.
 */
@Immutable
public final class VolumeProperties implements JsonSerializable<VolumeProperties> {
    /*
     * Pure Storage's internal ID for the storage pool containing the volume
     */
    private String storagePoolInternalId;

    /*
     * Azure Resource ID of the storage pool containing this volume
     */
    private String storagePoolResourceId;

    /*
     * Pure Storage's internal ID for the volume
     */
    private String volumeInternalId;

    /*
     * Human-readable name of the volume
     */
    private String displayName;

    /*
     * Storage space usage
     */
    private Space space;

    /*
     * Volume's soft-deletion state
     */
    private SoftDeletion softDeletion;

    /*
     * Volume creation date, as an RFC 3339 timestamp
     */
    private String createdTimestamp;

    /*
     * Currently provisioned size of the volume, in bytes
     */
    private Long provisionedSize;

    /*
     * Specify which control plane handles the lifecycle of the volume
     */
    private VolumeType volumeType;

    /*
     * AVS-specific volume information
     */
    private AvsDiskDetails avs;

    /*
     * Provisioning state of the resource
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of VolumeProperties class.
     */
    private VolumeProperties() {
    }

    /**
     * Get the storagePoolInternalId property: Pure Storage's internal ID for the storage pool containing the volume.
     * 
     * @return the storagePoolInternalId value.
     */
    public String storagePoolInternalId() {
        return this.storagePoolInternalId;
    }

    /**
     * Get the storagePoolResourceId property: Azure Resource ID of the storage pool containing this volume.
     * 
     * @return the storagePoolResourceId value.
     */
    public String storagePoolResourceId() {
        return this.storagePoolResourceId;
    }

    /**
     * Get the volumeInternalId property: Pure Storage's internal ID for the volume.
     * 
     * @return the volumeInternalId value.
     */
    public String volumeInternalId() {
        return this.volumeInternalId;
    }

    /**
     * Get the displayName property: Human-readable name of the volume.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the space property: Storage space usage.
     * 
     * @return the space value.
     */
    public Space space() {
        return this.space;
    }

    /**
     * Get the softDeletion property: Volume's soft-deletion state.
     * 
     * @return the softDeletion value.
     */
    public SoftDeletion softDeletion() {
        return this.softDeletion;
    }

    /**
     * Get the createdTimestamp property: Volume creation date, as an RFC 3339 timestamp.
     * 
     * @return the createdTimestamp value.
     */
    public String createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the provisionedSize property: Currently provisioned size of the volume, in bytes.
     * 
     * @return the provisionedSize value.
     */
    public Long provisionedSize() {
        return this.provisionedSize;
    }

    /**
     * Get the volumeType property: Specify which control plane handles the lifecycle of the volume.
     * 
     * @return the volumeType value.
     */
    public VolumeType volumeType() {
        return this.volumeType;
    }

    /**
     * Get the avs property: AVS-specific volume information.
     * 
     * @return the avs value.
     */
    public AvsDiskDetails avs() {
        return this.avs;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("softDeletion", this.softDeletion);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VolumeProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VolumeProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VolumeProperties.
     */
    public static VolumeProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VolumeProperties deserializedVolumeProperties = new VolumeProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("softDeletion".equals(fieldName)) {
                    deserializedVolumeProperties.softDeletion = SoftDeletion.fromJson(reader);
                } else if ("storagePoolInternalId".equals(fieldName)) {
                    deserializedVolumeProperties.storagePoolInternalId = reader.getString();
                } else if ("storagePoolResourceId".equals(fieldName)) {
                    deserializedVolumeProperties.storagePoolResourceId = reader.getString();
                } else if ("volumeInternalId".equals(fieldName)) {
                    deserializedVolumeProperties.volumeInternalId = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedVolumeProperties.displayName = reader.getString();
                } else if ("space".equals(fieldName)) {
                    deserializedVolumeProperties.space = Space.fromJson(reader);
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedVolumeProperties.createdTimestamp = reader.getString();
                } else if ("provisionedSize".equals(fieldName)) {
                    deserializedVolumeProperties.provisionedSize = reader.getNullable(JsonReader::getLong);
                } else if ("volumeType".equals(fieldName)) {
                    deserializedVolumeProperties.volumeType = VolumeType.fromString(reader.getString());
                } else if ("avs".equals(fieldName)) {
                    deserializedVolumeProperties.avs = AvsDiskDetails.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVolumeProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVolumeProperties;
        });
    }
}
