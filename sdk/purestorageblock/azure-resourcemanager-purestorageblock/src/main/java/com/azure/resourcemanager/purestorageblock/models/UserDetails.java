// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * User details.
 */
@Fluent
public final class UserDetails implements JsonSerializable<UserDetails> {
    /*
     * First name
     */
    private String firstName;

    /*
     * Last name
     */
    private String lastName;

    /*
     * Email address
     */
    private String emailAddress;

    /*
     * Principal name
     */
    private String upn;

    /*
     * Phone number
     */
    private String phoneNumber;

    /*
     * Company details
     */
    private CompanyDetails companyDetails;

    /**
     * Creates an instance of UserDetails class.
     */
    public UserDetails() {
    }

    /**
     * Get the firstName property: First name.
     * 
     * @return the firstName value.
     */
    public String firstName() {
        return this.firstName;
    }

    /**
     * Set the firstName property: First name.
     * 
     * @param firstName the firstName value to set.
     * @return the UserDetails object itself.
     */
    public UserDetails withFirstName(String firstName) {
        this.firstName = firstName;
        return this;
    }

    /**
     * Get the lastName property: Last name.
     * 
     * @return the lastName value.
     */
    public String lastName() {
        return this.lastName;
    }

    /**
     * Set the lastName property: Last name.
     * 
     * @param lastName the lastName value to set.
     * @return the UserDetails object itself.
     */
    public UserDetails withLastName(String lastName) {
        this.lastName = lastName;
        return this;
    }

    /**
     * Get the emailAddress property: Email address.
     * 
     * @return the emailAddress value.
     */
    public String emailAddress() {
        return this.emailAddress;
    }

    /**
     * Set the emailAddress property: Email address.
     * 
     * @param emailAddress the emailAddress value to set.
     * @return the UserDetails object itself.
     */
    public UserDetails withEmailAddress(String emailAddress) {
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Get the upn property: Principal name.
     * 
     * @return the upn value.
     */
    public String upn() {
        return this.upn;
    }

    /**
     * Set the upn property: Principal name.
     * 
     * @param upn the upn value to set.
     * @return the UserDetails object itself.
     */
    public UserDetails withUpn(String upn) {
        this.upn = upn;
        return this;
    }

    /**
     * Get the phoneNumber property: Phone number.
     * 
     * @return the phoneNumber value.
     */
    public String phoneNumber() {
        return this.phoneNumber;
    }

    /**
     * Set the phoneNumber property: Phone number.
     * 
     * @param phoneNumber the phoneNumber value to set.
     * @return the UserDetails object itself.
     */
    public UserDetails withPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Get the companyDetails property: Company details.
     * 
     * @return the companyDetails value.
     */
    public CompanyDetails companyDetails() {
        return this.companyDetails;
    }

    /**
     * Set the companyDetails property: Company details.
     * 
     * @param companyDetails the companyDetails value to set.
     * @return the UserDetails object itself.
     */
    public UserDetails withCompanyDetails(CompanyDetails companyDetails) {
        this.companyDetails = companyDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (firstName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property firstName in model UserDetails"));
        }
        if (lastName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property lastName in model UserDetails"));
        }
        if (emailAddress() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property emailAddress in model UserDetails"));
        }
        if (companyDetails() != null) {
            companyDetails().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(UserDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("firstName", this.firstName);
        jsonWriter.writeStringField("lastName", this.lastName);
        jsonWriter.writeStringField("emailAddress", this.emailAddress);
        jsonWriter.writeStringField("upn", this.upn);
        jsonWriter.writeStringField("phoneNumber", this.phoneNumber);
        jsonWriter.writeJsonField("companyDetails", this.companyDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UserDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UserDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the UserDetails.
     */
    public static UserDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UserDetails deserializedUserDetails = new UserDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("firstName".equals(fieldName)) {
                    deserializedUserDetails.firstName = reader.getString();
                } else if ("lastName".equals(fieldName)) {
                    deserializedUserDetails.lastName = reader.getString();
                } else if ("emailAddress".equals(fieldName)) {
                    deserializedUserDetails.emailAddress = reader.getString();
                } else if ("upn".equals(fieldName)) {
                    deserializedUserDetails.upn = reader.getString();
                } else if ("phoneNumber".equals(fieldName)) {
                    deserializedUserDetails.phoneNumber = reader.getString();
                } else if ("companyDetails".equals(fieldName)) {
                    deserializedUserDetails.companyDetails = CompanyDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUserDetails;
        });
    }
}
