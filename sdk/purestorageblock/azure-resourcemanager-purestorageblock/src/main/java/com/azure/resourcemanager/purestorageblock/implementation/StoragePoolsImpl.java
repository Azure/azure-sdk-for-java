// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.purestorageblock.fluent.StoragePoolsClient;
import com.azure.resourcemanager.purestorageblock.fluent.models.AvsConnectionInner;
import com.azure.resourcemanager.purestorageblock.fluent.models.AvsStatusInner;
import com.azure.resourcemanager.purestorageblock.fluent.models.StoragePoolHealthInfoInner;
import com.azure.resourcemanager.purestorageblock.fluent.models.StoragePoolInner;
import com.azure.resourcemanager.purestorageblock.models.AvsConnection;
import com.azure.resourcemanager.purestorageblock.models.AvsStatus;
import com.azure.resourcemanager.purestorageblock.models.StoragePool;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolEnableAvsConnectionPost;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolFinalizeAvsConnectionPost;
import com.azure.resourcemanager.purestorageblock.models.StoragePoolHealthInfo;
import com.azure.resourcemanager.purestorageblock.models.StoragePools;

public final class StoragePoolsImpl implements StoragePools {
    private static final ClientLogger LOGGER = new ClientLogger(StoragePoolsImpl.class);

    private final StoragePoolsClient innerClient;

    private final com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager;

    public StoragePoolsImpl(StoragePoolsClient innerClient,
        com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<StoragePool> getByResourceGroupWithResponse(String resourceGroupName, String storagePoolName,
        Context context) {
        Response<StoragePoolInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, storagePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StoragePoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StoragePool getByResourceGroup(String resourceGroupName, String storagePoolName) {
        StoragePoolInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, storagePoolName);
        if (inner != null) {
            return new StoragePoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String storagePoolName) {
        this.serviceClient().delete(resourceGroupName, storagePoolName);
    }

    public void delete(String resourceGroupName, String storagePoolName, Context context) {
        this.serviceClient().delete(resourceGroupName, storagePoolName, context);
    }

    public PagedIterable<StoragePool> listByResourceGroup(String resourceGroupName) {
        PagedIterable<StoragePoolInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StoragePoolImpl(inner1, this.manager()));
    }

    public PagedIterable<StoragePool> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<StoragePoolInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StoragePoolImpl(inner1, this.manager()));
    }

    public PagedIterable<StoragePool> list() {
        PagedIterable<StoragePoolInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StoragePoolImpl(inner1, this.manager()));
    }

    public PagedIterable<StoragePool> list(Context context) {
        PagedIterable<StoragePoolInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new StoragePoolImpl(inner1, this.manager()));
    }

    public Response<StoragePoolHealthInfo> getHealthStatusWithResponse(String resourceGroupName, String storagePoolName,
        Context context) {
        Response<StoragePoolHealthInfoInner> inner
            = this.serviceClient().getHealthStatusWithResponse(resourceGroupName, storagePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StoragePoolHealthInfoImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StoragePoolHealthInfo getHealthStatus(String resourceGroupName, String storagePoolName) {
        StoragePoolHealthInfoInner inner = this.serviceClient().getHealthStatus(resourceGroupName, storagePoolName);
        if (inner != null) {
            return new StoragePoolHealthInfoImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AvsConnection> getAvsConnectionWithResponse(String resourceGroupName, String storagePoolName,
        Context context) {
        Response<AvsConnectionInner> inner
            = this.serviceClient().getAvsConnectionWithResponse(resourceGroupName, storagePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AvsConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AvsConnection getAvsConnection(String resourceGroupName, String storagePoolName) {
        AvsConnectionInner inner = this.serviceClient().getAvsConnection(resourceGroupName, storagePoolName);
        if (inner != null) {
            return new AvsConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<AvsStatus> getAvsStatusWithResponse(String resourceGroupName, String storagePoolName,
        Context context) {
        Response<AvsStatusInner> inner
            = this.serviceClient().getAvsStatusWithResponse(resourceGroupName, storagePoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AvsStatusImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AvsStatus getAvsStatus(String resourceGroupName, String storagePoolName) {
        AvsStatusInner inner = this.serviceClient().getAvsStatus(resourceGroupName, storagePoolName);
        if (inner != null) {
            return new AvsStatusImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void enableAvsConnection(String resourceGroupName, String storagePoolName,
        StoragePoolEnableAvsConnectionPost properties) {
        this.serviceClient().enableAvsConnection(resourceGroupName, storagePoolName, properties);
    }

    public void enableAvsConnection(String resourceGroupName, String storagePoolName,
        StoragePoolEnableAvsConnectionPost properties, Context context) {
        this.serviceClient().enableAvsConnection(resourceGroupName, storagePoolName, properties, context);
    }

    public void disableAvsConnection(String resourceGroupName, String storagePoolName) {
        this.serviceClient().disableAvsConnection(resourceGroupName, storagePoolName);
    }

    public void disableAvsConnection(String resourceGroupName, String storagePoolName, Context context) {
        this.serviceClient().disableAvsConnection(resourceGroupName, storagePoolName, context);
    }

    public void finalizeAvsConnection(String resourceGroupName, String storagePoolName,
        StoragePoolFinalizeAvsConnectionPost properties) {
        this.serviceClient().finalizeAvsConnection(resourceGroupName, storagePoolName, properties);
    }

    public void finalizeAvsConnection(String resourceGroupName, String storagePoolName,
        StoragePoolFinalizeAvsConnectionPost properties, Context context) {
        this.serviceClient().finalizeAvsConnection(resourceGroupName, storagePoolName, properties, context);
    }

    public void repairAvsConnection(String resourceGroupName, String storagePoolName) {
        this.serviceClient().repairAvsConnection(resourceGroupName, storagePoolName);
    }

    public void repairAvsConnection(String resourceGroupName, String storagePoolName, Context context) {
        this.serviceClient().repairAvsConnection(resourceGroupName, storagePoolName, context);
    }

    public StoragePool getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storagePoolName = ResourceManagerUtils.getValueFromIdByName(id, "storagePools");
        if (storagePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storagePools'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, storagePoolName, Context.NONE).getValue();
    }

    public Response<StoragePool> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storagePoolName = ResourceManagerUtils.getValueFromIdByName(id, "storagePools");
        if (storagePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storagePools'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, storagePoolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storagePoolName = ResourceManagerUtils.getValueFromIdByName(id, "storagePools");
        if (storagePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storagePools'.", id)));
        }
        this.delete(resourceGroupName, storagePoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storagePoolName = ResourceManagerUtils.getValueFromIdByName(id, "storagePools");
        if (storagePoolName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'storagePools'.", id)));
        }
        this.delete(resourceGroupName, storagePoolName, context);
    }

    private StoragePoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.purestorageblock.PureStorageBlockManager manager() {
        return this.serviceManager;
    }

    public StoragePoolImpl define(String name) {
        return new StoragePoolImpl(name, this.manager());
    }
}
