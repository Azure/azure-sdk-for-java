// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Minimum and maximum values for a property.
 */
@Immutable
public final class RangeLimits implements JsonSerializable<RangeLimits> {
    /*
     * Minimum value of the property
     */
    private long min;

    /*
     * Maximum value of the property
     */
    private long max;

    /**
     * Creates an instance of RangeLimits class.
     */
    private RangeLimits() {
    }

    /**
     * Get the min property: Minimum value of the property.
     * 
     * @return the min value.
     */
    public long min() {
        return this.min;
    }

    /**
     * Get the max property: Maximum value of the property.
     * 
     * @return the max value.
     */
    public long max() {
        return this.max;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("min", this.min);
        jsonWriter.writeLongField("max", this.max);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RangeLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RangeLimits if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the RangeLimits.
     */
    public static RangeLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RangeLimits deserializedRangeLimits = new RangeLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("min".equals(fieldName)) {
                    deserializedRangeLimits.min = reader.getLong();
                } else if ("max".equals(fieldName)) {
                    deserializedRangeLimits.max = reader.getLong();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRangeLimits;
        });
    }
}
