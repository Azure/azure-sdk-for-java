// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Company details.
 */
@Fluent
public final class CompanyDetails implements JsonSerializable<CompanyDetails> {
    /*
     * Company name
     */
    private String companyName;

    /*
     * Company address
     */
    private Address address;

    /**
     * Creates an instance of CompanyDetails class.
     */
    public CompanyDetails() {
    }

    /**
     * Get the companyName property: Company name.
     * 
     * @return the companyName value.
     */
    public String companyName() {
        return this.companyName;
    }

    /**
     * Set the companyName property: Company name.
     * 
     * @param companyName the companyName value to set.
     * @return the CompanyDetails object itself.
     */
    public CompanyDetails withCompanyName(String companyName) {
        this.companyName = companyName;
        return this;
    }

    /**
     * Get the address property: Company address.
     * 
     * @return the address value.
     */
    public Address address() {
        return this.address;
    }

    /**
     * Set the address property: Company address.
     * 
     * @param address the address value to set.
     * @return the CompanyDetails object itself.
     */
    public CompanyDetails withAddress(Address address) {
        this.address = address;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (companyName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property companyName in model CompanyDetails"));
        }
        if (address() != null) {
            address().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(CompanyDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("companyName", this.companyName);
        jsonWriter.writeJsonField("address", this.address);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CompanyDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CompanyDetails if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CompanyDetails.
     */
    public static CompanyDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CompanyDetails deserializedCompanyDetails = new CompanyDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("companyName".equals(fieldName)) {
                    deserializedCompanyDetails.companyName = reader.getString();
                } else if ("address".equals(fieldName)) {
                    deserializedCompanyDetails.address = Address.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCompanyDetails;
        });
    }
}
