// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Limits used for storage pool creation.
 */
@Immutable
public final class StoragePoolLimits implements JsonSerializable<StoragePoolLimits> {
    /*
     * Allowed provisioned bandwidth range for a storage pool, in MB/s
     */
    private RangeLimits provisionedBandwidthMbPerSec;

    /*
     * Allowed provisioned IOPS range for a storage pool, as a number of operations
     */
    private RangeLimits provisionedIops;

    /*
     * List of physical availability zones in the region in which storage pools can be deployed; some Azure regions do
     * not support the necessary resources in all availability zones
     */
    private List<String> physicalAvailabilityZones;

    /**
     * Creates an instance of StoragePoolLimits class.
     */
    private StoragePoolLimits() {
    }

    /**
     * Get the provisionedBandwidthMbPerSec property: Allowed provisioned bandwidth range for a storage pool, in MB/s.
     * 
     * @return the provisionedBandwidthMbPerSec value.
     */
    public RangeLimits provisionedBandwidthMbPerSec() {
        return this.provisionedBandwidthMbPerSec;
    }

    /**
     * Get the provisionedIops property: Allowed provisioned IOPS range for a storage pool, as a number of operations.
     * 
     * @return the provisionedIops value.
     */
    public RangeLimits provisionedIops() {
        return this.provisionedIops;
    }

    /**
     * Get the physicalAvailabilityZones property: List of physical availability zones in the region in which storage
     * pools can be deployed; some Azure regions do not support the necessary resources in all availability zones.
     * 
     * @return the physicalAvailabilityZones value.
     */
    public List<String> physicalAvailabilityZones() {
        return this.physicalAvailabilityZones;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("provisionedBandwidthMbPerSec", this.provisionedBandwidthMbPerSec);
        jsonWriter.writeJsonField("provisionedIops", this.provisionedIops);
        jsonWriter.writeArrayField("physicalAvailabilityZones", this.physicalAvailabilityZones,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StoragePoolLimits from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StoragePoolLimits if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StoragePoolLimits.
     */
    public static StoragePoolLimits fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StoragePoolLimits deserializedStoragePoolLimits = new StoragePoolLimits();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisionedBandwidthMbPerSec".equals(fieldName)) {
                    deserializedStoragePoolLimits.provisionedBandwidthMbPerSec = RangeLimits.fromJson(reader);
                } else if ("provisionedIops".equals(fieldName)) {
                    deserializedStoragePoolLimits.provisionedIops = RangeLimits.fromJson(reader);
                } else if ("physicalAvailabilityZones".equals(fieldName)) {
                    List<String> physicalAvailabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedStoragePoolLimits.physicalAvailabilityZones = physicalAvailabilityZones;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStoragePoolLimits;
        });
    }
}
