// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the StoragePool.
 */
@Fluent
public final class StoragePoolUpdateProperties implements JsonSerializable<StoragePoolUpdateProperties> {
    /*
     * Total bandwidth provisioned for the pool, in MB/s
     */
    private Long provisionedBandwidthMbPerSec;

    /**
     * Creates an instance of StoragePoolUpdateProperties class.
     */
    public StoragePoolUpdateProperties() {
    }

    /**
     * Get the provisionedBandwidthMbPerSec property: Total bandwidth provisioned for the pool, in MB/s.
     * 
     * @return the provisionedBandwidthMbPerSec value.
     */
    public Long provisionedBandwidthMbPerSec() {
        return this.provisionedBandwidthMbPerSec;
    }

    /**
     * Set the provisionedBandwidthMbPerSec property: Total bandwidth provisioned for the pool, in MB/s.
     * 
     * @param provisionedBandwidthMbPerSec the provisionedBandwidthMbPerSec value to set.
     * @return the StoragePoolUpdateProperties object itself.
     */
    public StoragePoolUpdateProperties withProvisionedBandwidthMbPerSec(Long provisionedBandwidthMbPerSec) {
        this.provisionedBandwidthMbPerSec = provisionedBandwidthMbPerSec;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("provisionedBandwidthMbPerSec", this.provisionedBandwidthMbPerSec);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StoragePoolUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StoragePoolUpdateProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StoragePoolUpdateProperties.
     */
    public static StoragePoolUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StoragePoolUpdateProperties deserializedStoragePoolUpdateProperties = new StoragePoolUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisionedBandwidthMbPerSec".equals(fieldName)) {
                    deserializedStoragePoolUpdateProperties.provisionedBandwidthMbPerSec
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStoragePoolUpdateProperties;
        });
    }
}
