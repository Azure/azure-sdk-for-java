// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.purestorageblock.models.Alert;
import com.azure.resourcemanager.purestorageblock.models.HealthDetails;
import java.io.IOException;
import java.util.List;

/**
 * Health information for a storage pool.
 */
@Immutable
public final class StoragePoolHealthInfoInner implements JsonSerializable<StoragePoolHealthInfoInner> {
    /*
     * Health metrics
     */
    private HealthDetails health;

    /*
     * List of health alerts
     */
    private List<Alert> alerts;

    /**
     * Creates an instance of StoragePoolHealthInfoInner class.
     */
    private StoragePoolHealthInfoInner() {
    }

    /**
     * Get the health property: Health metrics.
     * 
     * @return the health value.
     */
    public HealthDetails health() {
        return this.health;
    }

    /**
     * Get the alerts property: List of health alerts.
     * 
     * @return the alerts value.
     */
    public List<Alert> alerts() {
        return this.alerts;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (health() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property health in model StoragePoolHealthInfoInner"));
        } else {
            health().validate();
        }
        if (alerts() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property alerts in model StoragePoolHealthInfoInner"));
        } else {
            alerts().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StoragePoolHealthInfoInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("health", this.health);
        jsonWriter.writeArrayField("alerts", this.alerts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StoragePoolHealthInfoInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StoragePoolHealthInfoInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StoragePoolHealthInfoInner.
     */
    public static StoragePoolHealthInfoInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StoragePoolHealthInfoInner deserializedStoragePoolHealthInfoInner = new StoragePoolHealthInfoInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("health".equals(fieldName)) {
                    deserializedStoragePoolHealthInfoInner.health = HealthDetails.fromJson(reader);
                } else if ("alerts".equals(fieldName)) {
                    List<Alert> alerts = reader.readArray(reader1 -> Alert.fromJson(reader1));
                    deserializedStoragePoolHealthInfoInner.alerts = alerts;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStoragePoolHealthInfoInner;
        });
    }
}
