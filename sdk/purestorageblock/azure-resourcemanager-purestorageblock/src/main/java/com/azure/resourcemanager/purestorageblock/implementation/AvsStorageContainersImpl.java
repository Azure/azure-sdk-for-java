// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.purestorageblock.fluent.AvsStorageContainersClient;
import com.azure.resourcemanager.purestorageblock.fluent.models.AvsStorageContainerInner;
import com.azure.resourcemanager.purestorageblock.models.AvsStorageContainer;
import com.azure.resourcemanager.purestorageblock.models.AvsStorageContainers;

public final class AvsStorageContainersImpl implements AvsStorageContainers {
    private static final ClientLogger LOGGER = new ClientLogger(AvsStorageContainersImpl.class);

    private final AvsStorageContainersClient innerClient;

    private final com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager;

    public AvsStorageContainersImpl(AvsStorageContainersClient innerClient,
        com.azure.resourcemanager.purestorageblock.PureStorageBlockManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AvsStorageContainer> getWithResponse(String resourceGroupName, String storagePoolName,
        String storageContainerName, Context context) {
        Response<AvsStorageContainerInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, storagePoolName, storageContainerName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AvsStorageContainerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AvsStorageContainer get(String resourceGroupName, String storagePoolName, String storageContainerName) {
        AvsStorageContainerInner inner
            = this.serviceClient().get(resourceGroupName, storagePoolName, storageContainerName);
        if (inner != null) {
            return new AvsStorageContainerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String storagePoolName, String storageContainerName) {
        this.serviceClient().delete(resourceGroupName, storagePoolName, storageContainerName);
    }

    public void delete(String resourceGroupName, String storagePoolName, String storageContainerName, Context context) {
        this.serviceClient().delete(resourceGroupName, storagePoolName, storageContainerName, context);
    }

    public PagedIterable<AvsStorageContainer> listByStoragePool(String resourceGroupName, String storagePoolName) {
        PagedIterable<AvsStorageContainerInner> inner
            = this.serviceClient().listByStoragePool(resourceGroupName, storagePoolName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AvsStorageContainerImpl(inner1, this.manager()));
    }

    public PagedIterable<AvsStorageContainer> listByStoragePool(String resourceGroupName, String storagePoolName,
        Context context) {
        PagedIterable<AvsStorageContainerInner> inner
            = this.serviceClient().listByStoragePool(resourceGroupName, storagePoolName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AvsStorageContainerImpl(inner1, this.manager()));
    }

    private AvsStorageContainersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.purestorageblock.PureStorageBlockManager manager() {
        return this.serviceManager;
    }
}
