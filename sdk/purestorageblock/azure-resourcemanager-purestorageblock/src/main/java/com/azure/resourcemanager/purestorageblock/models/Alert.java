// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Health alerts.
 */
@Immutable
public final class Alert implements JsonSerializable<Alert> {
    /*
     * Severity level
     */
    private AlertLevel level;

    /*
     * A short description of the alert
     */
    private String message;

    /**
     * Creates an instance of Alert class.
     */
    private Alert() {
    }

    /**
     * Get the level property: Severity level.
     * 
     * @return the level value.
     */
    public AlertLevel level() {
        return this.level;
    }

    /**
     * Get the message property: A short description of the alert.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("level", this.level == null ? null : this.level.toString());
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Alert from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Alert if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Alert.
     */
    public static Alert fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Alert deserializedAlert = new Alert();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("level".equals(fieldName)) {
                    deserializedAlert.level = AlertLevel.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedAlert.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAlert;
        });
    }
}
