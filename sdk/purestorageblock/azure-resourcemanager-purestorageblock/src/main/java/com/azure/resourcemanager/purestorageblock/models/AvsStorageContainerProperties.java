// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * AVS storage container properties.
 */
@Immutable
public final class AvsStorageContainerProperties implements JsonSerializable<AvsStorageContainerProperties> {
    /*
     * Storage space usage
     */
    private Space space;

    /*
     * Name of the storage container
     */
    private String resourceName;

    /*
     * Maximum amount of bytes that can be provisioned in this storage container; it must be a multiple of 512; each
     * time a volume is provisioned in this container, its provisionedSize will be counted against the provisionLimit
     * and the provisioning will fail if it goes over (minimum: 1048576 (1MiB), maximum: 4503599627370496 (4PiB)); by
     * default it is unrestricted
     */
    private Long provisionedLimit;

    /*
     * VMware datastore associated with this storage container (if any)
     */
    private String datastore;

    /*
     * Whether the datastore is mounted in VMware or not
     */
    private Boolean mounted;

    /**
     * Creates an instance of AvsStorageContainerProperties class.
     */
    private AvsStorageContainerProperties() {
    }

    /**
     * Get the space property: Storage space usage.
     * 
     * @return the space value.
     */
    public Space space() {
        return this.space;
    }

    /**
     * Get the resourceName property: Name of the storage container.
     * 
     * @return the resourceName value.
     */
    public String resourceName() {
        return this.resourceName;
    }

    /**
     * Get the provisionedLimit property: Maximum amount of bytes that can be provisioned in this storage container; it
     * must be a multiple of 512; each time a volume is provisioned in this container, its provisionedSize will be
     * counted against the provisionLimit and the provisioning will fail if it goes over (minimum: 1048576 (1MiB),
     * maximum: 4503599627370496 (4PiB)); by default it is unrestricted.
     * 
     * @return the provisionedLimit value.
     */
    public Long provisionedLimit() {
        return this.provisionedLimit;
    }

    /**
     * Get the datastore property: VMware datastore associated with this storage container (if any).
     * 
     * @return the datastore value.
     */
    public String datastore() {
        return this.datastore;
    }

    /**
     * Get the mounted property: Whether the datastore is mounted in VMware or not.
     * 
     * @return the mounted value.
     */
    public Boolean mounted() {
        return this.mounted;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (space() != null) {
            space().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("provisionedLimit", this.provisionedLimit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsStorageContainerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsStorageContainerProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvsStorageContainerProperties.
     */
    public static AvsStorageContainerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsStorageContainerProperties deserializedAvsStorageContainerProperties
                = new AvsStorageContainerProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceName".equals(fieldName)) {
                    deserializedAvsStorageContainerProperties.resourceName = reader.getString();
                } else if ("space".equals(fieldName)) {
                    deserializedAvsStorageContainerProperties.space = Space.fromJson(reader);
                } else if ("provisionedLimit".equals(fieldName)) {
                    deserializedAvsStorageContainerProperties.provisionedLimit
                        = reader.getNullable(JsonReader::getLong);
                } else if ("datastore".equals(fieldName)) {
                    deserializedAvsStorageContainerProperties.datastore = reader.getString();
                } else if ("mounted".equals(fieldName)) {
                    deserializedAvsStorageContainerProperties.mounted = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsStorageContainerProperties;
        });
    }
}
