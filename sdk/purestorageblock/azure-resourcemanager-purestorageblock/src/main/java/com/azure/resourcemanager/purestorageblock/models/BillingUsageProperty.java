// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Represents an individual billing usage property.
 */
@Immutable
public final class BillingUsageProperty implements JsonSerializable<BillingUsageProperty> {
    /*
     * Unique identifier for the billing usage property
     */
    private String propertyId;

    /*
     * Name of the billing usage property
     */
    private String propertyName;

    /*
     * Current value of the billing usage property
     */
    private String currentValue;

    /*
     * Previous value of the billing usage property
     */
    private String previousValue;

    /*
     * Severity level of the usage
     */
    private UsageSeverity severity;

    /*
     * Status message for the billing usage against a property
     */
    private String statusMessage;

    /*
     * Optional list of sub-properties providing additional details
     */
    private List<BillingUsageProperty> subProperties;

    /**
     * Creates an instance of BillingUsageProperty class.
     */
    private BillingUsageProperty() {
    }

    /**
     * Get the propertyId property: Unique identifier for the billing usage property.
     * 
     * @return the propertyId value.
     */
    public String propertyId() {
        return this.propertyId;
    }

    /**
     * Get the propertyName property: Name of the billing usage property.
     * 
     * @return the propertyName value.
     */
    public String propertyName() {
        return this.propertyName;
    }

    /**
     * Get the currentValue property: Current value of the billing usage property.
     * 
     * @return the currentValue value.
     */
    public String currentValue() {
        return this.currentValue;
    }

    /**
     * Get the previousValue property: Previous value of the billing usage property.
     * 
     * @return the previousValue value.
     */
    public String previousValue() {
        return this.previousValue;
    }

    /**
     * Get the severity property: Severity level of the usage.
     * 
     * @return the severity value.
     */
    public UsageSeverity severity() {
        return this.severity;
    }

    /**
     * Get the statusMessage property: Status message for the billing usage against a property.
     * 
     * @return the statusMessage value.
     */
    public String statusMessage() {
        return this.statusMessage;
    }

    /**
     * Get the subProperties property: Optional list of sub-properties providing additional details.
     * 
     * @return the subProperties value.
     */
    public List<BillingUsageProperty> subProperties() {
        return this.subProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("propertyId", this.propertyId);
        jsonWriter.writeStringField("propertyName", this.propertyName);
        jsonWriter.writeStringField("currentValue", this.currentValue);
        jsonWriter.writeStringField("severity", this.severity == null ? null : this.severity.toString());
        jsonWriter.writeStringField("previousValue", this.previousValue);
        jsonWriter.writeStringField("statusMessage", this.statusMessage);
        jsonWriter.writeArrayField("subProperties", this.subProperties, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BillingUsageProperty from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BillingUsageProperty if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BillingUsageProperty.
     */
    public static BillingUsageProperty fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BillingUsageProperty deserializedBillingUsageProperty = new BillingUsageProperty();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("propertyId".equals(fieldName)) {
                    deserializedBillingUsageProperty.propertyId = reader.getString();
                } else if ("propertyName".equals(fieldName)) {
                    deserializedBillingUsageProperty.propertyName = reader.getString();
                } else if ("currentValue".equals(fieldName)) {
                    deserializedBillingUsageProperty.currentValue = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedBillingUsageProperty.severity = UsageSeverity.fromString(reader.getString());
                } else if ("previousValue".equals(fieldName)) {
                    deserializedBillingUsageProperty.previousValue = reader.getString();
                } else if ("statusMessage".equals(fieldName)) {
                    deserializedBillingUsageProperty.statusMessage = reader.getString();
                } else if ("subProperties".equals(fieldName)) {
                    List<BillingUsageProperty> subProperties
                        = reader.readArray(reader1 -> BillingUsageProperty.fromJson(reader1));
                    deserializedBillingUsageProperty.subProperties = subProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBillingUsageProperty;
        });
    }
}
