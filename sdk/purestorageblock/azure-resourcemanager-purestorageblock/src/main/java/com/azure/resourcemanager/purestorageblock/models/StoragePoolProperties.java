// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a storage pool.
 */
@Fluent
public final class StoragePoolProperties implements JsonSerializable<StoragePoolProperties> {
    /*
     * Pure Storage's internal ID of the storage pool
     */
    private String storagePoolInternalId;

    /*
     * Azure Availability Zone the Pool is located in
     */
    private String availabilityZone;

    /*
     * Network properties of the storage pool
     */
    private VnetInjection vnetInjection;

    /*
     * How long a destroyed object is kept before being eradicated, in seconds
     */
    private Long dataRetentionPeriod;

    /*
     * Total bandwidth provisioned for the pool, in MB/s
     */
    private long provisionedBandwidthMbPerSec;

    /*
     * Total I/O operations per second (IOPS) provisioned for the pool
     */
    private Long provisionedIops;

    /*
     * AVS connection state summary
     */
    private AzureVmwareService avs;

    /*
     * Provisioning state of the resource
     */
    private ProvisioningState provisioningState;

    /*
     * Azure resource ID of the Pure Storage Cloud service (reservation resource) this storage pool belongs to
     */
    private String reservationResourceId;

    /**
     * Creates an instance of StoragePoolProperties class.
     */
    public StoragePoolProperties() {
    }

    /**
     * Get the storagePoolInternalId property: Pure Storage's internal ID of the storage pool.
     * 
     * @return the storagePoolInternalId value.
     */
    public String storagePoolInternalId() {
        return this.storagePoolInternalId;
    }

    /**
     * Get the availabilityZone property: Azure Availability Zone the Pool is located in.
     * 
     * @return the availabilityZone value.
     */
    public String availabilityZone() {
        return this.availabilityZone;
    }

    /**
     * Set the availabilityZone property: Azure Availability Zone the Pool is located in.
     * 
     * @param availabilityZone the availabilityZone value to set.
     * @return the StoragePoolProperties object itself.
     */
    public StoragePoolProperties withAvailabilityZone(String availabilityZone) {
        this.availabilityZone = availabilityZone;
        return this;
    }

    /**
     * Get the vnetInjection property: Network properties of the storage pool.
     * 
     * @return the vnetInjection value.
     */
    public VnetInjection vnetInjection() {
        return this.vnetInjection;
    }

    /**
     * Set the vnetInjection property: Network properties of the storage pool.
     * 
     * @param vnetInjection the vnetInjection value to set.
     * @return the StoragePoolProperties object itself.
     */
    public StoragePoolProperties withVnetInjection(VnetInjection vnetInjection) {
        this.vnetInjection = vnetInjection;
        return this;
    }

    /**
     * Get the dataRetentionPeriod property: How long a destroyed object is kept before being eradicated, in seconds.
     * 
     * @return the dataRetentionPeriod value.
     */
    public Long dataRetentionPeriod() {
        return this.dataRetentionPeriod;
    }

    /**
     * Get the provisionedBandwidthMbPerSec property: Total bandwidth provisioned for the pool, in MB/s.
     * 
     * @return the provisionedBandwidthMbPerSec value.
     */
    public long provisionedBandwidthMbPerSec() {
        return this.provisionedBandwidthMbPerSec;
    }

    /**
     * Set the provisionedBandwidthMbPerSec property: Total bandwidth provisioned for the pool, in MB/s.
     * 
     * @param provisionedBandwidthMbPerSec the provisionedBandwidthMbPerSec value to set.
     * @return the StoragePoolProperties object itself.
     */
    public StoragePoolProperties withProvisionedBandwidthMbPerSec(long provisionedBandwidthMbPerSec) {
        this.provisionedBandwidthMbPerSec = provisionedBandwidthMbPerSec;
        return this;
    }

    /**
     * Get the provisionedIops property: Total I/O operations per second (IOPS) provisioned for the pool.
     * 
     * @return the provisionedIops value.
     */
    public Long provisionedIops() {
        return this.provisionedIops;
    }

    /**
     * Get the avs property: AVS connection state summary.
     * 
     * @return the avs value.
     */
    public AzureVmwareService avs() {
        return this.avs;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the reservationResourceId property: Azure resource ID of the Pure Storage Cloud service (reservation
     * resource) this storage pool belongs to.
     * 
     * @return the reservationResourceId value.
     */
    public String reservationResourceId() {
        return this.reservationResourceId;
    }

    /**
     * Set the reservationResourceId property: Azure resource ID of the Pure Storage Cloud service (reservation
     * resource) this storage pool belongs to.
     * 
     * @param reservationResourceId the reservationResourceId value to set.
     * @return the StoragePoolProperties object itself.
     */
    public StoragePoolProperties withReservationResourceId(String reservationResourceId) {
        this.reservationResourceId = reservationResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (availabilityZone() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property availabilityZone in model StoragePoolProperties"));
        }
        if (vnetInjection() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property vnetInjection in model StoragePoolProperties"));
        } else {
            vnetInjection().validate();
        }
        if (avs() != null) {
            avs().validate();
        }
        if (reservationResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property reservationResourceId in model StoragePoolProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(StoragePoolProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("availabilityZone", this.availabilityZone);
        jsonWriter.writeJsonField("vnetInjection", this.vnetInjection);
        jsonWriter.writeLongField("provisionedBandwidthMbPerSec", this.provisionedBandwidthMbPerSec);
        jsonWriter.writeStringField("reservationResourceId", this.reservationResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StoragePoolProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StoragePoolProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StoragePoolProperties.
     */
    public static StoragePoolProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StoragePoolProperties deserializedStoragePoolProperties = new StoragePoolProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZone".equals(fieldName)) {
                    deserializedStoragePoolProperties.availabilityZone = reader.getString();
                } else if ("vnetInjection".equals(fieldName)) {
                    deserializedStoragePoolProperties.vnetInjection = VnetInjection.fromJson(reader);
                } else if ("provisionedBandwidthMbPerSec".equals(fieldName)) {
                    deserializedStoragePoolProperties.provisionedBandwidthMbPerSec = reader.getLong();
                } else if ("reservationResourceId".equals(fieldName)) {
                    deserializedStoragePoolProperties.reservationResourceId = reader.getString();
                } else if ("storagePoolInternalId".equals(fieldName)) {
                    deserializedStoragePoolProperties.storagePoolInternalId = reader.getString();
                } else if ("dataRetentionPeriod".equals(fieldName)) {
                    deserializedStoragePoolProperties.dataRetentionPeriod = reader.getNullable(JsonReader::getLong);
                } else if ("provisionedIops".equals(fieldName)) {
                    deserializedStoragePoolProperties.provisionedIops = reader.getNullable(JsonReader::getLong);
                } else if ("avs".equals(fieldName)) {
                    deserializedStoragePoolProperties.avs = AzureVmwareService.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedStoragePoolProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStoragePoolProperties;
        });
    }
}
