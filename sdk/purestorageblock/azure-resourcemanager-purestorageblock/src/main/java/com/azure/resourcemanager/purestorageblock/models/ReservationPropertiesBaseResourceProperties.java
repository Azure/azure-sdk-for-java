// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of a Reservation resource.
 */
@Fluent
public final class ReservationPropertiesBaseResourceProperties
    implements JsonSerializable<ReservationPropertiesBaseResourceProperties> {
    /*
     * Pure Storage's internal ID for the reservation
     */
    private String reservationInternalId;

    /*
     * Marketplace details
     */
    private MarketplaceDetails marketplace;

    /*
     * User details
     */
    private UserDetails user;

    /*
     * Provisioning state of the resource
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ReservationPropertiesBaseResourceProperties class.
     */
    public ReservationPropertiesBaseResourceProperties() {
    }

    /**
     * Get the reservationInternalId property: Pure Storage's internal ID for the reservation.
     * 
     * @return the reservationInternalId value.
     */
    public String reservationInternalId() {
        return this.reservationInternalId;
    }

    /**
     * Get the marketplace property: Marketplace details.
     * 
     * @return the marketplace value.
     */
    public MarketplaceDetails marketplace() {
        return this.marketplace;
    }

    /**
     * Set the marketplace property: Marketplace details.
     * 
     * @param marketplace the marketplace value to set.
     * @return the ReservationPropertiesBaseResourceProperties object itself.
     */
    public ReservationPropertiesBaseResourceProperties withMarketplace(MarketplaceDetails marketplace) {
        this.marketplace = marketplace;
        return this;
    }

    /**
     * Get the user property: User details.
     * 
     * @return the user value.
     */
    public UserDetails user() {
        return this.user;
    }

    /**
     * Set the user property: User details.
     * 
     * @param user the user value to set.
     * @return the ReservationPropertiesBaseResourceProperties object itself.
     */
    public ReservationPropertiesBaseResourceProperties withUser(UserDetails user) {
        this.user = user;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (marketplace() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property marketplace in model ReservationPropertiesBaseResourceProperties"));
        } else {
            marketplace().validate();
        }
        if (user() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property user in model ReservationPropertiesBaseResourceProperties"));
        } else {
            user().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ReservationPropertiesBaseResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("marketplace", this.marketplace);
        jsonWriter.writeJsonField("user", this.user);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ReservationPropertiesBaseResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ReservationPropertiesBaseResourceProperties if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ReservationPropertiesBaseResourceProperties.
     */
    public static ReservationPropertiesBaseResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ReservationPropertiesBaseResourceProperties deserializedReservationPropertiesBaseResourceProperties
                = new ReservationPropertiesBaseResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("marketplace".equals(fieldName)) {
                    deserializedReservationPropertiesBaseResourceProperties.marketplace
                        = MarketplaceDetails.fromJson(reader);
                } else if ("user".equals(fieldName)) {
                    deserializedReservationPropertiesBaseResourceProperties.user = UserDetails.fromJson(reader);
                } else if ("reservationInternalId".equals(fieldName)) {
                    deserializedReservationPropertiesBaseResourceProperties.reservationInternalId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedReservationPropertiesBaseResourceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedReservationPropertiesBaseResourceProperties;
        });
    }
}
