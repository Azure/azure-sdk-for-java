// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.purestorageblock.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Initialization handle used to configure the AVS SDDC to communicate with the storage pool.
 */
@Immutable
public final class ServiceInitializationHandle implements JsonSerializable<ServiceInitializationHandle> {
    /*
     * Azure resource ID of the AVS SDDC the pool is connecting to
     */
    private String clusterResourceId;

    /*
     * Requested service account username
     */
    private String serviceAccountUsername;

    /**
     * Creates an instance of ServiceInitializationHandle class.
     */
    private ServiceInitializationHandle() {
    }

    /**
     * Get the clusterResourceId property: Azure resource ID of the AVS SDDC the pool is connecting to.
     * 
     * @return the clusterResourceId value.
     */
    public String clusterResourceId() {
        return this.clusterResourceId;
    }

    /**
     * Get the serviceAccountUsername property: Requested service account username.
     * 
     * @return the serviceAccountUsername value.
     */
    public String serviceAccountUsername() {
        return this.serviceAccountUsername;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sddcResourceId", this.clusterResourceId);
        jsonWriter.writeStringField("serviceAccountUsername", this.serviceAccountUsername);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceInitializationHandle from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceInitializationHandle if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServiceInitializationHandle.
     */
    public static ServiceInitializationHandle fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServiceInitializationHandle deserializedServiceInitializationHandle = new ServiceInitializationHandle();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sddcResourceId".equals(fieldName)) {
                    deserializedServiceInitializationHandle.clusterResourceId = reader.getString();
                } else if ("serviceAccountUsername".equals(fieldName)) {
                    deserializedServiceInitializationHandle.serviceAccountUsername = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServiceInitializationHandle;
        });
    }
}
