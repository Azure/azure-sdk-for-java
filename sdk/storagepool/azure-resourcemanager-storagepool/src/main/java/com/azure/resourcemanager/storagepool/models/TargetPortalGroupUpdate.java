// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Target portal group properties for update iSCSI target request. */
@Fluent
public final class TargetPortalGroupUpdate {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(TargetPortalGroupUpdate.class);

    /*
     * List of LUNs to be exposed through the iSCSI target portal group.
     */
    @JsonProperty(value = "luns")
    private List<IscsiLun> luns;

    /*
     * Access Control List (ACL) for an iSCSI target portal group.
     */
    @JsonProperty(value = "acls")
    private List<Acl> acls;

    /**
     * Get the luns property: List of LUNs to be exposed through the iSCSI target portal group.
     *
     * @return the luns value.
     */
    public List<IscsiLun> luns() {
        return this.luns;
    }

    /**
     * Set the luns property: List of LUNs to be exposed through the iSCSI target portal group.
     *
     * @param luns the luns value to set.
     * @return the TargetPortalGroupUpdate object itself.
     */
    public TargetPortalGroupUpdate withLuns(List<IscsiLun> luns) {
        this.luns = luns;
        return this;
    }

    /**
     * Get the acls property: Access Control List (ACL) for an iSCSI target portal group.
     *
     * @return the acls value.
     */
    public List<Acl> acls() {
        return this.acls;
    }

    /**
     * Set the acls property: Access Control List (ACL) for an iSCSI target portal group.
     *
     * @param acls the acls value to set.
     * @return the TargetPortalGroupUpdate object itself.
     */
    public TargetPortalGroupUpdate withAcls(List<Acl> acls) {
        this.acls = acls;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (luns() != null) {
            luns().forEach(e -> e.validate());
        }
        if (acls() != null) {
            acls().forEach(e -> e.validate());
        }
    }
}
