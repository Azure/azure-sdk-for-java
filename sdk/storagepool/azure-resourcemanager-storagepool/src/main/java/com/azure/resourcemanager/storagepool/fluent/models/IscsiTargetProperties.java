// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagepool.models.Acl;
import com.azure.resourcemanager.storagepool.models.IscsiLun;
import com.azure.resourcemanager.storagepool.models.IscsiTargetAclMode;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import com.azure.resourcemanager.storagepool.models.ProvisioningStates;
import java.io.IOException;
import java.util.List;

/**
 * Response properties for iSCSI Target operations.
 */
@Fluent
public final class IscsiTargetProperties implements JsonSerializable<IscsiTargetProperties> {
    /*
     * Mode for Target connectivity.
     */
    private IscsiTargetAclMode aclMode;

    /*
     * Access Control List (ACL) for an iSCSI Target; defines LUN masking policy
     */
    private List<Acl> staticAcls;

    /*
     * List of LUNs to be exposed through iSCSI Target.
     */
    private List<IscsiLun> luns;

    /*
     * iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
     */
    private String targetIqn;

    /*
     * State of the operation on the resource.
     */
    private ProvisioningStates provisioningState;

    /*
     * Operational status of the iSCSI Target.
     */
    private OperationalStatus status;

    /*
     * List of private IPv4 addresses to connect to the iSCSI Target.
     */
    private List<String> endpoints;

    /*
     * The port used by iSCSI Target portal group.
     */
    private Integer port;

    /*
     * List of identifiers for active sessions on the iSCSI target
     */
    private List<String> sessions;

    /**
     * Creates an instance of IscsiTargetProperties class.
     */
    public IscsiTargetProperties() {
    }

    /**
     * Get the aclMode property: Mode for Target connectivity.
     * 
     * @return the aclMode value.
     */
    public IscsiTargetAclMode aclMode() {
        return this.aclMode;
    }

    /**
     * Set the aclMode property: Mode for Target connectivity.
     * 
     * @param aclMode the aclMode value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withAclMode(IscsiTargetAclMode aclMode) {
        this.aclMode = aclMode;
        return this;
    }

    /**
     * Get the staticAcls property: Access Control List (ACL) for an iSCSI Target; defines LUN masking policy.
     * 
     * @return the staticAcls value.
     */
    public List<Acl> staticAcls() {
        return this.staticAcls;
    }

    /**
     * Set the staticAcls property: Access Control List (ACL) for an iSCSI Target; defines LUN masking policy.
     * 
     * @param staticAcls the staticAcls value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withStaticAcls(List<Acl> staticAcls) {
        this.staticAcls = staticAcls;
        return this;
    }

    /**
     * Get the luns property: List of LUNs to be exposed through iSCSI Target.
     * 
     * @return the luns value.
     */
    public List<IscsiLun> luns() {
        return this.luns;
    }

    /**
     * Set the luns property: List of LUNs to be exposed through iSCSI Target.
     * 
     * @param luns the luns value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withLuns(List<IscsiLun> luns) {
        this.luns = luns;
        return this;
    }

    /**
     * Get the targetIqn property: iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
     * 
     * @return the targetIqn value.
     */
    public String targetIqn() {
        return this.targetIqn;
    }

    /**
     * Set the targetIqn property: iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
     * 
     * @param targetIqn the targetIqn value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withTargetIqn(String targetIqn) {
        this.targetIqn = targetIqn;
        return this;
    }

    /**
     * Get the provisioningState property: State of the operation on the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Operational status of the iSCSI Target.
     * 
     * @return the status value.
     */
    public OperationalStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Operational status of the iSCSI Target.
     * 
     * @param status the status value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withStatus(OperationalStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the endpoints property: List of private IPv4 addresses to connect to the iSCSI Target.
     * 
     * @return the endpoints value.
     */
    public List<String> endpoints() {
        return this.endpoints;
    }

    /**
     * Set the endpoints property: List of private IPv4 addresses to connect to the iSCSI Target.
     * 
     * @param endpoints the endpoints value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withEndpoints(List<String> endpoints) {
        this.endpoints = endpoints;
        return this;
    }

    /**
     * Get the port property: The port used by iSCSI Target portal group.
     * 
     * @return the port value.
     */
    public Integer port() {
        return this.port;
    }

    /**
     * Set the port property: The port used by iSCSI Target portal group.
     * 
     * @param port the port value to set.
     * @return the IscsiTargetProperties object itself.
     */
    public IscsiTargetProperties withPort(Integer port) {
        this.port = port;
        return this;
    }

    /**
     * Get the sessions property: List of identifiers for active sessions on the iSCSI target.
     * 
     * @return the sessions value.
     */
    public List<String> sessions() {
        return this.sessions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (aclMode() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property aclMode in model IscsiTargetProperties"));
        }
        if (staticAcls() != null) {
            staticAcls().forEach(e -> e.validate());
        }
        if (luns() != null) {
            luns().forEach(e -> e.validate());
        }
        if (targetIqn() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property targetIqn in model IscsiTargetProperties"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model IscsiTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(IscsiTargetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("aclMode", this.aclMode == null ? null : this.aclMode.toString());
        jsonWriter.writeStringField("targetIqn", this.targetIqn);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeArrayField("staticAcls", this.staticAcls, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("luns", this.luns, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("endpoints", this.endpoints, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("port", this.port);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IscsiTargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IscsiTargetProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IscsiTargetProperties.
     */
    public static IscsiTargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IscsiTargetProperties deserializedIscsiTargetProperties = new IscsiTargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("aclMode".equals(fieldName)) {
                    deserializedIscsiTargetProperties.aclMode = IscsiTargetAclMode.fromString(reader.getString());
                } else if ("targetIqn".equals(fieldName)) {
                    deserializedIscsiTargetProperties.targetIqn = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedIscsiTargetProperties.provisioningState
                        = ProvisioningStates.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedIscsiTargetProperties.status = OperationalStatus.fromString(reader.getString());
                } else if ("staticAcls".equals(fieldName)) {
                    List<Acl> staticAcls = reader.readArray(reader1 -> Acl.fromJson(reader1));
                    deserializedIscsiTargetProperties.staticAcls = staticAcls;
                } else if ("luns".equals(fieldName)) {
                    List<IscsiLun> luns = reader.readArray(reader1 -> IscsiLun.fromJson(reader1));
                    deserializedIscsiTargetProperties.luns = luns;
                } else if ("endpoints".equals(fieldName)) {
                    List<String> endpoints = reader.readArray(reader1 -> reader1.getString());
                    deserializedIscsiTargetProperties.endpoints = endpoints;
                } else if ("port".equals(fieldName)) {
                    deserializedIscsiTargetProperties.port = reader.getNullable(JsonReader::getInt);
                } else if ("sessions".equals(fieldName)) {
                    List<String> sessions = reader.readArray(reader1 -> reader1.getString());
                    deserializedIscsiTargetProperties.sessions = sessions;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIscsiTargetProperties;
        });
    }
}
