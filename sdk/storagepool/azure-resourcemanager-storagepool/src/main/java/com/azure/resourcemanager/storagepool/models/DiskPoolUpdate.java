// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Request payload for Update Disk pool request. */
@JsonFlatten
@Fluent
public class DiskPoolUpdate {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DiskPoolUpdate.class);

    /*
     * Resource tags.
     */
    @JsonProperty(value = "tags")
    private Map<String, String> tags;

    /*
     * List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks
     * at most.
     */
    @JsonProperty(value = "properties.disks")
    private List<Disk> disks;

    /**
     * Get the tags property: Resource tags.
     *
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     *
     * @param tags the tags value to set.
     * @return the DiskPoolUpdate object itself.
     */
    public DiskPoolUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the disks property: List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
     *
     * @return the disks value.
     */
    public List<Disk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: List of Azure Managed Disks to attach to a Disk pool. Can attach 8 disks at most.
     *
     * @param disks the disks value to set.
     * @return the DiskPoolUpdate object itself.
     */
    public DiskPoolUpdate withDisks(List<Disk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
    }
}
