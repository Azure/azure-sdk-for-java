// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.storagepool.fluent.models.IscsiTargetInner;
import java.util.List;

/** An immutable client-side representation of IscsiTarget. */
public interface IscsiTarget {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the provisioningState property: State of the operation on the resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningStates provisioningState();

    /**
     * Gets the status property: Operational status of the iSCSI target.
     *
     * @return the status value.
     */
    OperationalStatus status();

    /**
     * Gets the tpgs property: List of iSCSI target portal groups. Can have 1 portal group at most.
     *
     * @return the tpgs value.
     */
    List<TargetPortalGroup> tpgs();

    /**
     * Gets the targetIqn property: iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
     *
     * @return the targetIqn value.
     */
    String targetIqn();

    /**
     * Gets the inner com.azure.resourcemanager.storagepool.fluent.models.IscsiTargetInner object.
     *
     * @return the inner object.
     */
    IscsiTargetInner innerModel();

    /** The entirety of the IscsiTarget definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithParentResource,
            DefinitionStages.WithTpgs,
            DefinitionStages.WithCreate {
    }
    /** The IscsiTarget definition stages. */
    interface DefinitionStages {
        /** The first stage of the IscsiTarget definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the IscsiTarget definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, diskPoolName.
             *
             * @param resourceGroupName The name of the resource group. The name is case insensitive.
             * @param diskPoolName The name of the Disk pool.
             * @return the next definition stage.
             */
            WithTpgs withExistingDiskPool(String resourceGroupName, String diskPoolName);
        }
        /** The stage of the IscsiTarget definition allowing to specify tpgs. */
        interface WithTpgs {
            /**
             * Specifies the tpgs property: List of iSCSI target portal groups. Can have 1 portal group at most..
             *
             * @param tpgs List of iSCSI target portal groups. Can have 1 portal group at most.
             * @return the next definition stage.
             */
            WithCreate withTpgs(List<TargetPortalGroupCreate> tpgs);
        }
        /**
         * The stage of the IscsiTarget definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithTargetIqn {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            IscsiTarget create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            IscsiTarget create(Context context);
        }
        /** The stage of the IscsiTarget definition allowing to specify targetIqn. */
        interface WithTargetIqn {
            /**
             * Specifies the targetIqn property: iSCSI target IQN (iSCSI Qualified Name); example:
             * "iqn.2005-03.org.iscsi:server"..
             *
             * @param targetIqn iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
             * @return the next definition stage.
             */
            WithCreate withTargetIqn(String targetIqn);
        }
    }
    /**
     * Begins update for the IscsiTarget resource.
     *
     * @return the stage of resource update.
     */
    IscsiTarget.Update update();

    /** The template for IscsiTarget update. */
    interface Update extends UpdateStages.WithTpgs {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        IscsiTarget apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        IscsiTarget apply(Context context);
    }
    /** The IscsiTarget update stages. */
    interface UpdateStages {
        /** The stage of the IscsiTarget update allowing to specify tpgs. */
        interface WithTpgs {
            /**
             * Specifies the tpgs property: List of iSCSI target portal groups. Can have 1 portal group at most..
             *
             * @param tpgs List of iSCSI target portal groups. Can have 1 portal group at most.
             * @return the next definition stage.
             */
            Update withTpgsForUpdate(List<TargetPortalGroupUpdate> tpgs);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    IscsiTarget refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    IscsiTarget refresh(Context context);
}
