// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Request payload for create or update Disk Pool request. */
@JsonFlatten
@Fluent
public class DiskPoolCreate extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DiskPoolCreate.class);

    /*
     * Determines the SKU of the Disk Pool
     */
    @JsonProperty(value = "sku", required = true)
    private Sku sku;

    /*
     * Logical zone for Disk Pool resource; example: ["1"].
     */
    @JsonProperty(value = "properties.availabilityZones")
    private List<String> availabilityZones;

    /*
     * List of Azure Managed Disks to attach to a Disk Pool.
     */
    @JsonProperty(value = "properties.disks")
    private List<Disk> disks;

    /*
     * Azure Resource ID of a Subnet for the Disk Pool.
     */
    @JsonProperty(value = "properties.subnetId", required = true)
    private String subnetId;

    /*
     * List of additional capabilities for a Disk Pool.
     */
    @JsonProperty(value = "properties.additionalCapabilities")
    private List<String> additionalCapabilities;

    /**
     * Get the sku property: Determines the SKU of the Disk Pool.
     *
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: Determines the SKU of the Disk Pool.
     *
     * @param sku the sku value to set.
     * @return the DiskPoolCreate object itself.
     */
    public DiskPoolCreate withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     *
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     *
     * @param availabilityZones the availabilityZones value to set.
     * @return the DiskPoolCreate object itself.
     */
    public DiskPoolCreate withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the disks property: List of Azure Managed Disks to attach to a Disk Pool.
     *
     * @return the disks value.
     */
    public List<Disk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: List of Azure Managed Disks to attach to a Disk Pool.
     *
     * @param disks the disks value to set.
     * @return the DiskPoolCreate object itself.
     */
    public DiskPoolCreate withDisks(List<Disk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the subnetId property: Azure Resource ID of a Subnet for the Disk Pool.
     *
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Azure Resource ID of a Subnet for the Disk Pool.
     *
     * @param subnetId the subnetId value to set.
     * @return the DiskPoolCreate object itself.
     */
    public DiskPoolCreate withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the additionalCapabilities property: List of additional capabilities for a Disk Pool.
     *
     * @return the additionalCapabilities value.
     */
    public List<String> additionalCapabilities() {
        return this.additionalCapabilities;
    }

    /**
     * Set the additionalCapabilities property: List of additional capabilities for a Disk Pool.
     *
     * @param additionalCapabilities the additionalCapabilities value to set.
     * @return the DiskPoolCreate object itself.
     */
    public DiskPoolCreate withAdditionalCapabilities(List<String> additionalCapabilities) {
        this.additionalCapabilities = additionalCapabilities;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DiskPoolCreate withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DiskPoolCreate withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property sku in model DiskPoolCreate"));
        } else {
            sku().validate();
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (subnetId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property subnetId in model DiskPoolCreate"));
        }
    }
}
