// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import com.azure.resourcemanager.storagepool.models.ProvisioningStates;
import com.azure.resourcemanager.storagepool.models.TargetPortalGroup;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Response for iSCSI target requests. */
@JsonFlatten
@Fluent
public class IscsiTargetInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(IscsiTargetInner.class);

    /*
     * State of the operation on the resource.
     */
    @JsonProperty(value = "properties.provisioningState", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStates provisioningState;

    /*
     * Operational status of the iSCSI target.
     */
    @JsonProperty(value = "properties.status", required = true)
    private OperationalStatus status;

    /*
     * List of iSCSI target portal groups. Can have 1 portal group at most.
     */
    @JsonProperty(value = "properties.tpgs", required = true)
    private List<TargetPortalGroup> tpgs;

    /*
     * iSCSI target IQN (iSCSI Qualified Name); example:
     * "iqn.2005-03.org.iscsi:server".
     */
    @JsonProperty(value = "properties.targetIqn", required = true)
    private String targetIqn;

    /**
     * Get the provisioningState property: State of the operation on the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the status property: Operational status of the iSCSI target.
     *
     * @return the status value.
     */
    public OperationalStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Operational status of the iSCSI target.
     *
     * @param status the status value to set.
     * @return the IscsiTargetInner object itself.
     */
    public IscsiTargetInner withStatus(OperationalStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tpgs property: List of iSCSI target portal groups. Can have 1 portal group at most.
     *
     * @return the tpgs value.
     */
    public List<TargetPortalGroup> tpgs() {
        return this.tpgs;
    }

    /**
     * Set the tpgs property: List of iSCSI target portal groups. Can have 1 portal group at most.
     *
     * @param tpgs the tpgs value to set.
     * @return the IscsiTargetInner object itself.
     */
    public IscsiTargetInner withTpgs(List<TargetPortalGroup> tpgs) {
        this.tpgs = tpgs;
        return this;
    }

    /**
     * Get the targetIqn property: iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
     *
     * @return the targetIqn value.
     */
    public String targetIqn() {
        return this.targetIqn;
    }

    /**
     * Set the targetIqn property: iSCSI target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
     *
     * @param targetIqn the targetIqn value to set.
     * @return the IscsiTargetInner object itself.
     */
    public IscsiTargetInner withTargetIqn(String targetIqn) {
        this.targetIqn = targetIqn;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (status() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property status in model IscsiTargetInner"));
        }
        if (tpgs() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property tpgs in model IscsiTargetInner"));
        } else {
            tpgs().forEach(e -> e.validate());
        }
        if (targetIqn() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property targetIqn in model IscsiTargetInner"));
        }
    }
}
