// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.storagepool.models.Disk;
import java.io.IOException;
import java.util.List;

/**
 * Properties for Disk Pool create or update request.
 */
@Fluent
public final class DiskPoolCreateProperties implements JsonSerializable<DiskPoolCreateProperties> {
    /*
     * Logical zone for Disk Pool resource; example: ["1"].
     */
    private List<String> availabilityZones;

    /*
     * List of Azure Managed Disks to attach to a Disk Pool.
     */
    private List<Disk> disks;

    /*
     * Azure Resource ID of a Subnet for the Disk Pool.
     */
    private String subnetId;

    /*
     * List of additional capabilities for a Disk Pool.
     */
    private List<String> additionalCapabilities;

    /**
     * Creates an instance of DiskPoolCreateProperties class.
     */
    public DiskPoolCreateProperties() {
    }

    /**
     * Get the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     * 
     * @param availabilityZones the availabilityZones value to set.
     * @return the DiskPoolCreateProperties object itself.
     */
    public DiskPoolCreateProperties withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the disks property: List of Azure Managed Disks to attach to a Disk Pool.
     * 
     * @return the disks value.
     */
    public List<Disk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: List of Azure Managed Disks to attach to a Disk Pool.
     * 
     * @param disks the disks value to set.
     * @return the DiskPoolCreateProperties object itself.
     */
    public DiskPoolCreateProperties withDisks(List<Disk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the subnetId property: Azure Resource ID of a Subnet for the Disk Pool.
     * 
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Azure Resource ID of a Subnet for the Disk Pool.
     * 
     * @param subnetId the subnetId value to set.
     * @return the DiskPoolCreateProperties object itself.
     */
    public DiskPoolCreateProperties withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the additionalCapabilities property: List of additional capabilities for a Disk Pool.
     * 
     * @return the additionalCapabilities value.
     */
    public List<String> additionalCapabilities() {
        return this.additionalCapabilities;
    }

    /**
     * Set the additionalCapabilities property: List of additional capabilities for a Disk Pool.
     * 
     * @param additionalCapabilities the additionalCapabilities value to set.
     * @return the DiskPoolCreateProperties object itself.
     */
    public DiskPoolCreateProperties withAdditionalCapabilities(List<String> additionalCapabilities) {
        this.additionalCapabilities = additionalCapabilities;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (subnetId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subnetId in model DiskPoolCreateProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DiskPoolCreateProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("subnetId", this.subnetId);
        jsonWriter.writeArrayField("availabilityZones", this.availabilityZones,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("disks", this.disks, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("additionalCapabilities", this.additionalCapabilities,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskPoolCreateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskPoolCreateProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DiskPoolCreateProperties.
     */
    public static DiskPoolCreateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskPoolCreateProperties deserializedDiskPoolCreateProperties = new DiskPoolCreateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subnetId".equals(fieldName)) {
                    deserializedDiskPoolCreateProperties.subnetId = reader.getString();
                } else if ("availabilityZones".equals(fieldName)) {
                    List<String> availabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiskPoolCreateProperties.availabilityZones = availabilityZones;
                } else if ("disks".equals(fieldName)) {
                    List<Disk> disks = reader.readArray(reader1 -> Disk.fromJson(reader1));
                    deserializedDiskPoolCreateProperties.disks = disks;
                } else if ("additionalCapabilities".equals(fieldName)) {
                    List<String> additionalCapabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiskPoolCreateProperties.additionalCapabilities = additionalCapabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskPoolCreateProperties;
        });
    }
}
