// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagepool.models.Disk;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import com.azure.resourcemanager.storagepool.models.ProvisioningStates;
import com.azure.resourcemanager.storagepool.models.SystemMetadata;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Response for Disk Pool request. */
@JsonFlatten
@Fluent
public class DiskPoolInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DiskPoolInner.class);

    /*
     * Resource metadata required by ARM RPC
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemMetadata systemData;

    /*
     * State of the operation on the resource.
     */
    @JsonProperty(value = "properties.provisioningState", required = true, access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningStates provisioningState;

    /*
     * Logical zone for Disk Pool resource; example: ["1"].
     */
    @JsonProperty(value = "properties.availabilityZones", required = true)
    private List<String> availabilityZones;

    /*
     * Operational status of the Disk Pool.
     */
    @JsonProperty(value = "properties.status", required = true)
    private OperationalStatus status;

    /*
     * List of Azure Managed Disks to attach to a Disk Pool.
     */
    @JsonProperty(value = "properties.disks")
    private List<Disk> disks;

    /*
     * Azure Resource ID of a Subnet for the Disk Pool.
     */
    @JsonProperty(value = "properties.subnetId", required = true)
    private String subnetId;

    /*
     * List of additional capabilities for Disk Pool.
     */
    @JsonProperty(value = "properties.additionalCapabilities")
    private List<String> additionalCapabilities;

    /*
     * Sku name
     */
    @JsonProperty(value = "sku.name")
    private String nameSkuName;

    /*
     * Sku tier
     */
    @JsonProperty(value = "sku.tier")
    private String tier;

    /**
     * Get the systemData property: Resource metadata required by ARM RPC.
     *
     * @return the systemData value.
     */
    public SystemMetadata systemData() {
        return this.systemData;
    }

    /**
     * Get the provisioningState property: State of the operation on the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningStates provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     *
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Set the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     *
     * @param availabilityZones the availabilityZones value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withAvailabilityZones(List<String> availabilityZones) {
        this.availabilityZones = availabilityZones;
        return this;
    }

    /**
     * Get the status property: Operational status of the Disk Pool.
     *
     * @return the status value.
     */
    public OperationalStatus status() {
        return this.status;
    }

    /**
     * Set the status property: Operational status of the Disk Pool.
     *
     * @param status the status value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withStatus(OperationalStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the disks property: List of Azure Managed Disks to attach to a Disk Pool.
     *
     * @return the disks value.
     */
    public List<Disk> disks() {
        return this.disks;
    }

    /**
     * Set the disks property: List of Azure Managed Disks to attach to a Disk Pool.
     *
     * @param disks the disks value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withDisks(List<Disk> disks) {
        this.disks = disks;
        return this;
    }

    /**
     * Get the subnetId property: Azure Resource ID of a Subnet for the Disk Pool.
     *
     * @return the subnetId value.
     */
    public String subnetId() {
        return this.subnetId;
    }

    /**
     * Set the subnetId property: Azure Resource ID of a Subnet for the Disk Pool.
     *
     * @param subnetId the subnetId value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withSubnetId(String subnetId) {
        this.subnetId = subnetId;
        return this;
    }

    /**
     * Get the additionalCapabilities property: List of additional capabilities for Disk Pool.
     *
     * @return the additionalCapabilities value.
     */
    public List<String> additionalCapabilities() {
        return this.additionalCapabilities;
    }

    /**
     * Set the additionalCapabilities property: List of additional capabilities for Disk Pool.
     *
     * @param additionalCapabilities the additionalCapabilities value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withAdditionalCapabilities(List<String> additionalCapabilities) {
        this.additionalCapabilities = additionalCapabilities;
        return this;
    }

    /**
     * Get the nameSkuName property: Sku name.
     *
     * @return the nameSkuName value.
     */
    public String nameSkuName() {
        return this.nameSkuName;
    }

    /**
     * Set the nameSkuName property: Sku name.
     *
     * @param nameSkuName the nameSkuName value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withNameSkuName(String nameSkuName) {
        this.nameSkuName = nameSkuName;
        return this;
    }

    /**
     * Get the tier property: Sku tier.
     *
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Set the tier property: Sku tier.
     *
     * @param tier the tier value to set.
     * @return the DiskPoolInner object itself.
     */
    public DiskPoolInner withTier(String tier) {
        this.tier = tier;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DiskPoolInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DiskPoolInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (systemData() != null) {
            systemData().validate();
        }
        if (availabilityZones() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property availabilityZones in model DiskPoolInner"));
        }
        if (status() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property status in model DiskPoolInner"));
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (subnetId() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property subnetId in model DiskPoolInner"));
        }
    }
}
