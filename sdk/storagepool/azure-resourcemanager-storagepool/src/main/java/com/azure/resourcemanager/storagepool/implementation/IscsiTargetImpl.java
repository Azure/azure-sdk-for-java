// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.fluent.models.IscsiTargetInner;
import com.azure.resourcemanager.storagepool.models.IscsiTarget;
import com.azure.resourcemanager.storagepool.models.IscsiTargetCreate;
import com.azure.resourcemanager.storagepool.models.IscsiTargetUpdate;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import com.azure.resourcemanager.storagepool.models.ProvisioningStates;
import com.azure.resourcemanager.storagepool.models.TargetPortalGroup;
import com.azure.resourcemanager.storagepool.models.TargetPortalGroupCreate;
import com.azure.resourcemanager.storagepool.models.TargetPortalGroupUpdate;
import java.util.Collections;
import java.util.List;

public final class IscsiTargetImpl implements IscsiTarget, IscsiTarget.Definition, IscsiTarget.Update {
    private IscsiTargetInner innerObject;

    private final StoragePoolManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ProvisioningStates provisioningState() {
        return this.innerModel().provisioningState();
    }

    public OperationalStatus status() {
        return this.innerModel().status();
    }

    public List<TargetPortalGroup> tpgs() {
        List<TargetPortalGroup> inner = this.innerModel().tpgs();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public String targetIqn() {
        return this.innerModel().targetIqn();
    }

    public IscsiTargetInner innerModel() {
        return this.innerObject;
    }

    private StoragePoolManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String diskPoolName;

    private String iscsiTargetName;

    private IscsiTargetCreate createIscsiTargetCreatePayload;

    private IscsiTargetUpdate updateIscsiTargetUpdatePayload;

    public IscsiTargetImpl withExistingDiskPool(String resourceGroupName, String diskPoolName) {
        this.resourceGroupName = resourceGroupName;
        this.diskPoolName = diskPoolName;
        return this;
    }

    public IscsiTarget create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIscsiTargets()
                .createOrUpdate(
                    resourceGroupName, diskPoolName, iscsiTargetName, createIscsiTargetCreatePayload, Context.NONE);
        return this;
    }

    public IscsiTarget create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIscsiTargets()
                .createOrUpdate(
                    resourceGroupName, diskPoolName, iscsiTargetName, createIscsiTargetCreatePayload, context);
        return this;
    }

    IscsiTargetImpl(String name, StoragePoolManager serviceManager) {
        this.innerObject = new IscsiTargetInner();
        this.serviceManager = serviceManager;
        this.iscsiTargetName = name;
        this.createIscsiTargetCreatePayload = new IscsiTargetCreate();
    }

    public IscsiTargetImpl update() {
        this.updateIscsiTargetUpdatePayload = new IscsiTargetUpdate();
        return this;
    }

    public IscsiTarget apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIscsiTargets()
                .update(resourceGroupName, diskPoolName, iscsiTargetName, updateIscsiTargetUpdatePayload, Context.NONE);
        return this;
    }

    public IscsiTarget apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIscsiTargets()
                .update(resourceGroupName, diskPoolName, iscsiTargetName, updateIscsiTargetUpdatePayload, context);
        return this;
    }

    IscsiTargetImpl(IscsiTargetInner innerObject, StoragePoolManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.diskPoolName = Utils.getValueFromIdByName(innerObject.id(), "diskPools");
        this.iscsiTargetName = Utils.getValueFromIdByName(innerObject.id(), "iscsiTargets");
    }

    public IscsiTarget refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIscsiTargets()
                .getWithResponse(resourceGroupName, diskPoolName, iscsiTargetName, Context.NONE)
                .getValue();
        return this;
    }

    public IscsiTarget refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getIscsiTargets()
                .getWithResponse(resourceGroupName, diskPoolName, iscsiTargetName, context)
                .getValue();
        return this;
    }

    public IscsiTargetImpl withTpgs(List<TargetPortalGroupCreate> tpgs) {
        this.createIscsiTargetCreatePayload.withTpgs(tpgs);
        return this;
    }

    public IscsiTargetImpl withTargetIqn(String targetIqn) {
        this.createIscsiTargetCreatePayload.withTargetIqn(targetIqn);
        return this;
    }

    public IscsiTargetImpl withTpgsForUpdate(List<TargetPortalGroupUpdate> tpgs) {
        this.updateIscsiTargetUpdatePayload.withTpgs(tpgs);
        return this;
    }
}
