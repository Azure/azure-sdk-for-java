// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Disk Pool SKU Details.
 */
@Immutable
public final class DiskPoolZoneInfoInner implements JsonSerializable<DiskPoolZoneInfoInner> {
    /*
     * Logical zone for Disk Pool resource; example: ["1"].
     */
    private List<String> availabilityZones;

    /*
     * List of additional capabilities for Disk Pool.
     */
    private List<String> additionalCapabilities;

    /*
     * Determines the SKU of VM deployed for Disk Pool
     */
    private Sku sku;

    /**
     * Creates an instance of DiskPoolZoneInfoInner class.
     */
    public DiskPoolZoneInfoInner() {
    }

    /**
     * Get the availabilityZones property: Logical zone for Disk Pool resource; example: ["1"].
     * 
     * @return the availabilityZones value.
     */
    public List<String> availabilityZones() {
        return this.availabilityZones;
    }

    /**
     * Get the additionalCapabilities property: List of additional capabilities for Disk Pool.
     * 
     * @return the additionalCapabilities value.
     */
    public List<String> additionalCapabilities() {
        return this.additionalCapabilities;
    }

    /**
     * Get the sku property: Determines the SKU of VM deployed for Disk Pool.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DiskPoolZoneInfoInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DiskPoolZoneInfoInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DiskPoolZoneInfoInner.
     */
    public static DiskPoolZoneInfoInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DiskPoolZoneInfoInner deserializedDiskPoolZoneInfoInner = new DiskPoolZoneInfoInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("availabilityZones".equals(fieldName)) {
                    List<String> availabilityZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiskPoolZoneInfoInner.availabilityZones = availabilityZones;
                } else if ("additionalCapabilities".equals(fieldName)) {
                    List<String> additionalCapabilities = reader.readArray(reader1 -> reader1.getString());
                    deserializedDiskPoolZoneInfoInner.additionalCapabilities = additionalCapabilities;
                } else if ("sku".equals(fieldName)) {
                    deserializedDiskPoolZoneInfoInner.sku = Sku.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDiskPoolZoneInfoInner;
        });
    }
}
