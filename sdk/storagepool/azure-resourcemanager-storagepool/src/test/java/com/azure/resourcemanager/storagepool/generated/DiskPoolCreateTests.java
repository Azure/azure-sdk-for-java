// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagepool.fluent.models.Sku;
import com.azure.resourcemanager.storagepool.models.Disk;
import com.azure.resourcemanager.storagepool.models.DiskPoolCreate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskPoolCreateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskPoolCreate model = BinaryData.fromString(
            "{\"sku\":{\"name\":\"j\",\"tier\":\"vpmouexhdzxib\"},\"properties\":{\"availabilityZones\":[\"jnxqbzvddntwn\",\"eic\",\"twnpzaoqvuhrhcf\"],\"disks\":[{\"id\":\"ddglm\"}],\"subnetId\":\"t\",\"additionalCapabilities\":[\"kw\",\"yeicxmqciwqvhk\",\"ixuigdtopbobj\"]},\"managedBy\":\"hm\",\"managedByExtended\":[\"a\"],\"location\":\"a\",\"tags\":{\"yvvtpgvdfgio\":\"z\",\"gnxkrxdqmidtth\":\"kftutqxlngxlefg\"},\"id\":\"rvqdra\",\"name\":\"hjybigehoqfbo\",\"type\":\"skanyk\"}")
            .toObject(DiskPoolCreate.class);
        Assertions.assertEquals("a", model.location());
        Assertions.assertEquals("z", model.tags().get("yvvtpgvdfgio"));
        Assertions.assertEquals("j", model.sku().name());
        Assertions.assertEquals("vpmouexhdzxib", model.sku().tier());
        Assertions.assertEquals("hm", model.managedBy());
        Assertions.assertEquals("a", model.managedByExtended().get(0));
        Assertions.assertEquals("jnxqbzvddntwn", model.availabilityZones().get(0));
        Assertions.assertEquals("ddglm", model.disks().get(0).id());
        Assertions.assertEquals("t", model.subnetId());
        Assertions.assertEquals("kw", model.additionalCapabilities().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskPoolCreate model = new DiskPoolCreate().withLocation("a")
            .withTags(mapOf("yvvtpgvdfgio", "z", "gnxkrxdqmidtth", "kftutqxlngxlefg"))
            .withSku(new Sku().withName("j").withTier("vpmouexhdzxib"))
            .withManagedBy("hm")
            .withManagedByExtended(Arrays.asList("a"))
            .withAvailabilityZones(Arrays.asList("jnxqbzvddntwn", "eic", "twnpzaoqvuhrhcf"))
            .withDisks(Arrays.asList(new Disk().withId("ddglm")))
            .withSubnetId("t")
            .withAdditionalCapabilities(Arrays.asList("kw", "yeicxmqciwqvhk", "ixuigdtopbobj"));
        model = BinaryData.fromObject(model).toObject(DiskPoolCreate.class);
        Assertions.assertEquals("a", model.location());
        Assertions.assertEquals("z", model.tags().get("yvvtpgvdfgio"));
        Assertions.assertEquals("j", model.sku().name());
        Assertions.assertEquals("vpmouexhdzxib", model.sku().tier());
        Assertions.assertEquals("hm", model.managedBy());
        Assertions.assertEquals("a", model.managedByExtended().get(0));
        Assertions.assertEquals("jnxqbzvddntwn", model.availabilityZones().get(0));
        Assertions.assertEquals("ddglm", model.disks().get(0).id());
        Assertions.assertEquals("t", model.subnetId());
        Assertions.assertEquals("kw", model.additionalCapabilities().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
