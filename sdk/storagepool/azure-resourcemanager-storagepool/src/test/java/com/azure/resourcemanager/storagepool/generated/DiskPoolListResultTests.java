// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagepool.fluent.models.DiskPoolInner;
import com.azure.resourcemanager.storagepool.models.Disk;
import com.azure.resourcemanager.storagepool.models.DiskPoolListResult;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskPoolListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskPoolListResult model = BinaryData.fromString(
            "{\"value\":[{\"sku\":{\"name\":\"kohdbiha\",\"tier\":\"fhfcb\"},\"properties\":{\"provisioningState\":\"Invalid\",\"availabilityZones\":[\"a\"],\"status\":\"Running\",\"disks\":[{\"id\":\"xqhabi\"}],\"subnetId\":\"pikxwczbyscnpqxu\",\"additionalCapabilities\":[\"y\"]},\"managedBy\":\"iwbybrkxvdumjg\",\"managedByExtended\":[\"wvukx\",\"audccsnhs\"],\"systemData\":{\"createdBy\":\"yejhk\",\"createdByType\":\"Key\",\"createdAt\":\"2021-03-30T08:32:11Z\",\"lastModifiedBy\":\"pczwlo\",\"lastModifiedByType\":\"ManagedIdentity\",\"lastModifiedAt\":\"2021-02-13T10:58:08Z\"},\"location\":\"kkvnipjox\",\"tags\":{\"ilzyd\":\"chgejspodm\",\"jwyahuxinpmqnja\":\"h\"},\"id\":\"wixjsprozvcp\",\"name\":\"tegjvwmf\",\"type\":\"atscmd\"},{\"sku\":{\"name\":\"jhulsuuvmkjo\",\"tier\":\"rwfndiod\"},\"properties\":{\"provisioningState\":\"Pending\",\"availabilityZones\":[\"lwejdpv\",\"ryo\",\"psoacctazakljl\"],\"status\":\"Stopped (deallocated)\",\"disks\":[{\"id\":\"ryffdfdosy\"}],\"subnetId\":\"expa\",\"additionalCapabilities\":[\"khmsbz\",\"hcrzevd\",\"hlxaolthqtr\"]},\"managedBy\":\"jbp\",\"managedByExtended\":[\"s\",\"n\",\"gvfcj\",\"wzo\"],\"systemData\":{\"createdBy\":\"tfell\",\"createdByType\":\"Application\",\"createdAt\":\"2021-08-13T19:56:23Z\",\"lastModifiedBy\":\"onpeqfpjkjlxofp\",\"lastModifiedByType\":\"User\",\"lastModifiedAt\":\"2021-01-04T15:14:41Z\"},\"location\":\"xxypininmay\",\"tags\":{\"oginuvamiheognar\":\"bbkpodep\"},\"id\":\"zxtheotusivyevcc\",\"name\":\"qi\",\"type\":\"nhungbw\"},{\"sku\":{\"name\":\"rnfygxgispem\",\"tier\":\"zfkufubljofx\"},\"properties\":{\"provisioningState\":\"Pending\",\"availabilityZones\":[\"fjaeq\",\"hqjbasvmsmj\",\"ulngsntn\"],\"status\":\"Unhealthy\",\"disks\":[{\"id\":\"zgcwrw\"},{\"id\":\"lxxwrljdouskc\"},{\"id\":\"vkocrcjdkwtn\"}],\"subnetId\":\"xbnjbiksq\",\"additionalCapabilities\":[\"ssainqpjwnzll\",\"fmppe\"]},\"managedBy\":\"vmgxsab\",\"managedByExtended\":[\"duuji\",\"c\",\"czdzev\",\"dhkrwpdappdsbdk\"],\"systemData\":{\"createdBy\":\"wjfeusnhutjel\",\"createdByType\":\"User\",\"createdAt\":\"2021-11-14T20:48:19Z\",\"lastModifiedBy\":\"ugjzzdatqxhocdge\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-05-27T22:50:20Z\"},\"location\":\"huticndvkao\",\"tags\":{\"tyhxhurokft\":\"i\",\"iawxklry\":\"xolniwpwcukjfk\",\"cbacphejkotynqg\":\"lwckbasyypnddhs\"},\"id\":\"ulzndlikwyqk\",\"name\":\"fgibmadgakeq\",\"type\":\"rxybz\"},{\"sku\":{\"name\":\"e\",\"tier\":\"ytb\"},\"properties\":{\"provisioningState\":\"Creating\",\"availabilityZones\":[\"fouflmmnkzsmo\"],\"status\":\"Updating\",\"disks\":[{\"id\":\"ougpbkwt\"},{\"id\":\"utduqktapspwgcu\"}],\"subnetId\":\"rtumkdosvq\",\"additionalCapabilities\":[\"mdgbbjfdd\"]},\"managedBy\":\"bmbexppbhtqqro\",\"managedByExtended\":[\"fpsalgbqu\"],\"systemData\":{\"createdBy\":\"jyj\",\"createdByType\":\"ManagedIdentity\",\"createdAt\":\"2021-11-28T08:08:08Z\",\"lastModifiedBy\":\"fhrtxilnerkujysv\",\"lastModifiedByType\":\"User\",\"lastModifiedAt\":\"2021-08-05T18:12:20Z\"},\"location\":\"fqawrlyxw\",\"tags\":{\"ysszdnrujqguh\":\"prbnwbxgjvtbv\"},\"id\":\"uouq\",\"name\":\"prwzwbnguitnwui\",\"type\":\"gazxuf\"}],\"nextLink\":\"uckyf\"}")
            .toObject(DiskPoolListResult.class);
        Assertions.assertEquals("kkvnipjox", model.value().get(0).location());
        Assertions.assertEquals("chgejspodm", model.value().get(0).tags().get("ilzyd"));
        Assertions.assertEquals("kohdbiha", model.value().get(0).nameSkuName());
        Assertions.assertEquals("fhfcb", model.value().get(0).tier());
        Assertions.assertEquals("a", model.value().get(0).availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.RUNNING, model.value().get(0).status());
        Assertions.assertEquals("xqhabi", model.value().get(0).disks().get(0).id());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.value().get(0).subnetId());
        Assertions.assertEquals("y", model.value().get(0).additionalCapabilities().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskPoolListResult model = new DiskPoolListResult().withValue(Arrays.asList(
            new DiskPoolInner().withLocation("kkvnipjox")
                .withTags(mapOf("ilzyd", "chgejspodm", "jwyahuxinpmqnja", "h"))
                .withNameSkuName("kohdbiha")
                .withTier("fhfcb")
                .withAvailabilityZones(Arrays.asList("a"))
                .withStatus(OperationalStatus.RUNNING)
                .withDisks(Arrays.asList(new Disk().withId("xqhabi")))
                .withSubnetId("pikxwczbyscnpqxu")
                .withAdditionalCapabilities(Arrays.asList("y")),
            new DiskPoolInner().withLocation("xxypininmay")
                .withTags(mapOf("oginuvamiheognar", "bbkpodep"))
                .withNameSkuName("jhulsuuvmkjo")
                .withTier("rwfndiod")
                .withAvailabilityZones(Arrays.asList("lwejdpv", "ryo", "psoacctazakljl"))
                .withStatus(OperationalStatus.STOPPED_DEALLOCATED)
                .withDisks(Arrays.asList(new Disk().withId("ryffdfdosy")))
                .withSubnetId("expa")
                .withAdditionalCapabilities(Arrays.asList("khmsbz", "hcrzevd", "hlxaolthqtr")),
            new DiskPoolInner().withLocation("huticndvkao")
                .withTags(mapOf("tyhxhurokft", "i", "iawxklry", "xolniwpwcukjfk", "cbacphejkotynqg", "lwckbasyypnddhs"))
                .withNameSkuName("rnfygxgispem")
                .withTier("zfkufubljofx")
                .withAvailabilityZones(Arrays.asList("fjaeq", "hqjbasvmsmj", "ulngsntn"))
                .withStatus(OperationalStatus.UNHEALTHY)
                .withDisks(Arrays.asList(new Disk().withId("zgcwrw"), new Disk().withId("lxxwrljdouskc"),
                    new Disk().withId("vkocrcjdkwtn")))
                .withSubnetId("xbnjbiksq")
                .withAdditionalCapabilities(Arrays.asList("ssainqpjwnzll", "fmppe")),
            new DiskPoolInner().withLocation("fqawrlyxw")
                .withTags(mapOf("ysszdnrujqguh", "prbnwbxgjvtbv"))
                .withNameSkuName("e")
                .withTier("ytb")
                .withAvailabilityZones(Arrays.asList("fouflmmnkzsmo"))
                .withStatus(OperationalStatus.UPDATING)
                .withDisks(Arrays.asList(new Disk().withId("ougpbkwt"), new Disk().withId("utduqktapspwgcu")))
                .withSubnetId("rtumkdosvq")
                .withAdditionalCapabilities(Arrays.asList("mdgbbjfdd"))));
        model = BinaryData.fromObject(model).toObject(DiskPoolListResult.class);
        Assertions.assertEquals("kkvnipjox", model.value().get(0).location());
        Assertions.assertEquals("chgejspodm", model.value().get(0).tags().get("ilzyd"));
        Assertions.assertEquals("kohdbiha", model.value().get(0).nameSkuName());
        Assertions.assertEquals("fhfcb", model.value().get(0).tier());
        Assertions.assertEquals("a", model.value().get(0).availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.RUNNING, model.value().get(0).status());
        Assertions.assertEquals("xqhabi", model.value().get(0).disks().get(0).id());
        Assertions.assertEquals("pikxwczbyscnpqxu", model.value().get(0).subnetId());
        Assertions.assertEquals("y", model.value().get(0).additionalCapabilities().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
