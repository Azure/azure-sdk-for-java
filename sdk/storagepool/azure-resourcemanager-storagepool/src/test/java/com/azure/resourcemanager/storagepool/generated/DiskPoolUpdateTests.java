// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagepool.fluent.models.Sku;
import com.azure.resourcemanager.storagepool.models.Disk;
import com.azure.resourcemanager.storagepool.models.DiskPoolUpdate;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DiskPoolUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskPoolUpdate model = BinaryData.fromString(
            "{\"managedBy\":\"qqwx\",\"managedByExtended\":[\"eallnwsubisnj\",\"mpmngnzscxaqwoo\",\"hcbonqvpkvlr\"],\"properties\":{\"disks\":[{\"id\":\"ea\"},{\"id\":\"eipheoflokeyy\"}]},\"sku\":{\"name\":\"nj\",\"tier\":\"lwtgrhpdj\"},\"tags\":{\"lhbxxhejjzzvdud\":\"masxazjpqyegu\",\"pwlbjnpg\":\"wdslfhotwmcy\",\"nltyfsoppusuesnz\":\"cftadeh\"}}")
            .toObject(DiskPoolUpdate.class);
        Assertions.assertEquals("qqwx", model.managedBy());
        Assertions.assertEquals("eallnwsubisnj", model.managedByExtended().get(0));
        Assertions.assertEquals("nj", model.sku().name());
        Assertions.assertEquals("lwtgrhpdj", model.sku().tier());
        Assertions.assertEquals("masxazjpqyegu", model.tags().get("lhbxxhejjzzvdud"));
        Assertions.assertEquals("ea", model.disks().get(0).id());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskPoolUpdate model = new DiskPoolUpdate().withManagedBy("qqwx")
            .withManagedByExtended(Arrays.asList("eallnwsubisnj", "mpmngnzscxaqwoo", "hcbonqvpkvlr"))
            .withSku(new Sku().withName("nj").withTier("lwtgrhpdj"))
            .withTags(
                mapOf("lhbxxhejjzzvdud", "masxazjpqyegu", "pwlbjnpg", "wdslfhotwmcy", "nltyfsoppusuesnz", "cftadeh"))
            .withDisks(Arrays.asList(new Disk().withId("ea"), new Disk().withId("eipheoflokeyy")));
        model = BinaryData.fromObject(model).toObject(DiskPoolUpdate.class);
        Assertions.assertEquals("qqwx", model.managedBy());
        Assertions.assertEquals("eallnwsubisnj", model.managedByExtended().get(0));
        Assertions.assertEquals("nj", model.sku().name());
        Assertions.assertEquals("lwtgrhpdj", model.sku().tier());
        Assertions.assertEquals("masxazjpqyegu", model.tags().get("lhbxxhejjzzvdud"));
        Assertions.assertEquals("ea", model.disks().get(0).id());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
