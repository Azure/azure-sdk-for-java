// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.models.Acl;
import com.azure.resourcemanager.storagepool.models.IscsiLun;
import com.azure.resourcemanager.storagepool.models.IscsiTarget;
import com.azure.resourcemanager.storagepool.models.IscsiTargetAclMode;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class IscsiTargetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"aclMode\":\"Dynamic\",\"staticAcls\":[{\"initiatorIqn\":\"m\",\"mappedLuns\":[\"wcw\"]}],\"luns\":[{\"name\":\"oknssxmojmsvpkjp\",\"managedDiskAzureResourceId\":\"vk\",\"lun\":524680213},{\"name\":\"zqljyxgtczh\",\"managedDiskAzureResourceId\":\"ydbsd\",\"lun\":36372091},{\"name\":\"kx\",\"managedDiskAzureResourceId\":\"aehvbbxuri\",\"lun\":1576541562}],\"targetIqn\":\"fnhtbaxkgxyw\",\"provisioningState\":\"Succeeded\",\"status\":\"Unhealthy\",\"endpoints\":[\"kl\",\"hpluodpvruudlg\",\"ibthostgktstvd\",\"eclze\"],\"port\":83422204,\"sessions\":[\"hzlhplodqkdlww\"]},\"systemData\":{\"createdBy\":\"u\",\"createdByType\":\"Application\",\"createdAt\":\"2021-10-08T02:57:03Z\",\"lastModifiedBy\":\"qjfsmlmbtxhw\",\"lastModifiedByType\":\"User\",\"lastModifiedAt\":\"2021-01-13T02:45:54Z\"},\"managedBy\":\"a\",\"managedByExtended\":[\"ezbrhubskh\",\"dyg\",\"ookk\"],\"id\":\"fqjbvleo\",\"name\":\"fmluiqtqzfavyvn\",\"type\":\"qybaryeua\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StoragePoolManager manager = StoragePoolManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        IscsiTarget response = manager.iscsiTargets()
            .define("fqntcyp")
            .withExistingDiskPool("qhih", "jqgwzp")
            .withAclMode(IscsiTargetAclMode.STATIC)
            .withManagedBy("dznx")
            .withManagedByExtended(Arrays.asList("srhnjivo", "v"))
            .withTargetIqn("vfoimwksli")
            .withStaticAcls(
                Arrays.asList(new Acl().withInitiatorIqn("zjxvydfcea").withMappedLuns(Arrays.asList("lhvygdyftu"))))
            .withLuns(Arrays.asList(new IscsiLun().withName("wnawjslbiw").withManagedDiskAzureResourceId("ojgcyzt"),
                new IscsiLun().withName("z").withManagedDiskAzureResourceId("baeqphc"),
                new IscsiLun().withName("rn").withManagedDiskAzureResourceId("pxehuwrykqga"),
                new IscsiLun().withName("viklb").withManagedDiskAzureResourceId("dvk")))
            .create();

        Assertions.assertEquals(IscsiTargetAclMode.DYNAMIC, response.aclMode());
        Assertions.assertEquals("m", response.staticAcls().get(0).initiatorIqn());
        Assertions.assertEquals("wcw", response.staticAcls().get(0).mappedLuns().get(0));
        Assertions.assertEquals("oknssxmojmsvpkjp", response.luns().get(0).name());
        Assertions.assertEquals("vk", response.luns().get(0).managedDiskAzureResourceId());
        Assertions.assertEquals("fnhtbaxkgxyw", response.targetIqn());
        Assertions.assertEquals(OperationalStatus.UNHEALTHY, response.status());
        Assertions.assertEquals("kl", response.endpoints().get(0));
        Assertions.assertEquals(83422204, response.port());
    }
}
