// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.models.IscsiTarget;
import com.azure.resourcemanager.storagepool.models.IscsiTargetAclMode;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class IscsiTargetsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"aclMode\":\"Dynamic\",\"staticAcls\":[],\"luns\":[],\"targetIqn\":\"xawqaldsyuuxim\",\"provisioningState\":\"Succeeded\",\"status\":\"Unhealthy\",\"endpoints\":[\"bw\",\"znkbykutwpfhpagm\"],\"port\":1165571898,\"sessions\":[\"snfdsdoakgtdl\",\"kkze\",\"dlhewp\",\"sdsttwvog\"]},\"systemData\":{\"createdBy\":\"ejdcngqqmoakuf\",\"createdByType\":\"ManagedIdentity\",\"createdAt\":\"2021-04-17T04:14:33Z\",\"lastModifiedBy\":\"rdgrtw\",\"lastModifiedByType\":\"ManagedIdentity\",\"lastModifiedAt\":\"2021-01-12T08:45:26Z\"},\"managedBy\":\"kopbminrf\",\"managedByExtended\":[\"yuhhziu\",\"efozbhdms\",\"l\"],\"id\":\"zqhof\",\"name\":\"rmaequ\",\"type\":\"ah\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        StoragePoolManager manager =
            StoragePoolManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        IscsiTarget response =
            manager
                .iscsiTargets()
                .define("jitcjedftwwaez")
                .withExistingDiskPool("btndo", "ongbjcnt")
                .withAclMode(IscsiTargetAclMode.STATIC)
                .withManagedBy("qouicybxarzgsz")
                .withManagedByExtended(Arrays.asList("x", "iqopidoamciod", "khazxkhnzbonlwn", "oegokdwbwh"))
                .withTargetIqn("v")
                .withStaticAcls(Arrays.asList())
                .withLuns(Arrays.asList())
                .create();

        Assertions.assertEquals(IscsiTargetAclMode.DYNAMIC, response.aclMode());
        Assertions.assertEquals("xawqaldsyuuxim", response.targetIqn());
        Assertions.assertEquals(OperationalStatus.UNHEALTHY, response.status());
        Assertions.assertEquals("bw", response.endpoints().get(0));
        Assertions.assertEquals(1165571898, response.port());
    }
}
