// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.storagepool.fluent.models.DiskPoolProperties;
import com.azure.resourcemanager.storagepool.models.Disk;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DiskPoolPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DiskPoolProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"availabilityZones\":[\"l\"],\"status\":\"Updating\",\"disks\":[{\"id\":\"jtjaodxobnbdxkq\"}],\"subnetId\":\"xo\",\"additionalCapabilities\":[\"ionpimexg\",\"txgcpodgmaajr\",\"vdjwzrlovm\",\"lwhijcoejctbzaq\"]}")
            .toObject(DiskPoolProperties.class);
        Assertions.assertEquals("l", model.availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.UPDATING, model.status());
        Assertions.assertEquals("jtjaodxobnbdxkq", model.disks().get(0).id());
        Assertions.assertEquals("xo", model.subnetId());
        Assertions.assertEquals("ionpimexg", model.additionalCapabilities().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DiskPoolProperties model = new DiskPoolProperties().withAvailabilityZones(Arrays.asList("l"))
            .withStatus(OperationalStatus.UPDATING)
            .withDisks(Arrays.asList(new Disk().withId("jtjaodxobnbdxkq")))
            .withSubnetId("xo")
            .withAdditionalCapabilities(Arrays.asList("ionpimexg", "txgcpodgmaajr", "vdjwzrlovm", "lwhijcoejctbzaq"));
        model = BinaryData.fromObject(model).toObject(DiskPoolProperties.class);
        Assertions.assertEquals("l", model.availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.UPDATING, model.status());
        Assertions.assertEquals("jtjaodxobnbdxkq", model.disks().get(0).id());
        Assertions.assertEquals("xo", model.subnetId());
        Assertions.assertEquals("ionpimexg", model.additionalCapabilities().get(0));
    }
}
