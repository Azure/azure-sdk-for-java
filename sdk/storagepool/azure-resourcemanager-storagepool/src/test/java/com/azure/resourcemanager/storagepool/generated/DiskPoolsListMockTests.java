// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.models.DiskPool;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiskPoolsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"aabjyvayffimrz\",\"tier\":\"uzqogsexnevf\"},\"properties\":{\"provisioningState\":\"Failed\",\"availabilityZones\":[\"nw\",\"ewzsyyceuzsoib\"],\"status\":\"Invalid\",\"disks\":[{\"id\":\"frxtrthzvaytdwk\"},{\"id\":\"brqubp\"},{\"id\":\"xhexiilivpdti\"}],\"subnetId\":\"r\",\"additionalCapabilities\":[\"qoaxoruzfgs\"]},\"managedBy\":\"yfxrx\",\"managedByExtended\":[\"ptramxj\",\"zwl\"],\"systemData\":{\"createdBy\":\"xuqlcvydypat\",\"createdByType\":\"User\",\"createdAt\":\"2021-02-04T04:21:30Z\",\"lastModifiedBy\":\"kniod\",\"lastModifiedByType\":\"ManagedIdentity\",\"lastModifiedAt\":\"2021-09-16T01:10:50Z\"},\"location\":\"wnujhemmsbvdk\",\"tags\":{\"lfltka\":\"dtjinfw\",\"gaowpulpqblylsyx\":\"jvefkdlfoakggkfp\"},\"id\":\"qjnsjervtia\",\"name\":\"xsdszuempsb\",\"type\":\"kfzbeyvpnqicvi\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StoragePoolManager manager = StoragePoolManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DiskPool> response = manager.diskPools().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("wnujhemmsbvdk", response.iterator().next().location());
        Assertions.assertEquals("dtjinfw", response.iterator().next().tags().get("lfltka"));
        Assertions.assertEquals("aabjyvayffimrz", response.iterator().next().nameSkuName());
        Assertions.assertEquals("uzqogsexnevf", response.iterator().next().tier());
        Assertions.assertEquals("nw", response.iterator().next().availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.INVALID, response.iterator().next().status());
        Assertions.assertEquals("frxtrthzvaytdwk", response.iterator().next().disks().get(0).id());
        Assertions.assertEquals("r", response.iterator().next().subnetId());
        Assertions.assertEquals("qoaxoruzfgs", response.iterator().next().additionalCapabilities().get(0));
    }
}
