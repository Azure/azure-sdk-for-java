// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.models.DiskPool;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DiskPoolsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"ndlkzgxhurip\",\"tier\":\"podxunkb\"},\"properties\":{\"provisioningState\":\"Pending\",\"availabilityZones\":[\"mubyynt\",\"lrb\",\"tkoievseotgq\",\"l\"],\"status\":\"Updating\",\"disks\":[],\"subnetId\":\"wlauwzizxbmpg\",\"additionalCapabilities\":[\"fuzmuvpbtt\",\"um\",\"rp\"]},\"managedBy\":\"ebmnzbtbhjpglk\",\"managedByExtended\":[\"hdneuelfph\",\"dyhtozfikdowwquu\"],\"systemData\":{\"createdBy\":\"xclvit\",\"createdByType\":\"Key\",\"createdAt\":\"2021-10-25T20:46:01Z\",\"lastModifiedBy\":\"osggbhc\",\"lastModifiedByType\":\"Application\",\"lastModifiedAt\":\"2021-03-24T14:38:58Z\"},\"location\":\"sjnkal\",\"tags\":{\"kfvhqcrailvpn\":\"iiswacffgdkzze\",\"mh\":\"pfuflrw\",\"sag\":\"lxyjr\"},\"id\":\"fcnihgwq\",\"name\":\"pnedgf\",\"type\":\"cvkcvqvpkeqdcv\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        StoragePoolManager manager =
            StoragePoolManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DiskPool> response =
            manager.diskPools().listByResourceGroup("xtibqdxbxwakbog", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sjnkal", response.iterator().next().location());
        Assertions.assertEquals("iiswacffgdkzze", response.iterator().next().tags().get("kfvhqcrailvpn"));
        Assertions.assertEquals("ndlkzgxhurip", response.iterator().next().nameSkuName());
        Assertions.assertEquals("podxunkb", response.iterator().next().tier());
        Assertions.assertEquals("mubyynt", response.iterator().next().availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.UPDATING, response.iterator().next().status());
        Assertions.assertEquals("wlauwzizxbmpg", response.iterator().next().subnetId());
        Assertions.assertEquals("fuzmuvpbtt", response.iterator().next().additionalCapabilities().get(0));
    }
}
