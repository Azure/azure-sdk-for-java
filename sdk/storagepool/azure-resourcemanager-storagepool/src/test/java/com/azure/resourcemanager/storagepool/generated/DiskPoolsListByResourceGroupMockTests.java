// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.models.DiskPool;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiskPoolsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"jxdxrbuukz\",\"tier\":\"ewyhml\"},\"properties\":{\"provisioningState\":\"Creating\",\"availabilityZones\":[\"ztzp\"],\"status\":\"Invalid\",\"disks\":[{\"id\":\"ckw\"},{\"id\":\"fz\"},{\"id\":\"whxxbuyqax\"},{\"id\":\"feqztppriol\"}],\"subnetId\":\"or\",\"additionalCapabilities\":[\"tolmncwsobqw\"]},\"managedBy\":\"dbnw\",\"managedByExtended\":[\"hucqdpfuvg\",\"sbjjc\",\"nvxbvt\"],\"systemData\":{\"createdBy\":\"utncorm\",\"createdByType\":\"Application\",\"createdAt\":\"2021-10-06T09:07:18Z\",\"lastModifiedBy\":\"cofudflvkgjub\",\"lastModifiedByType\":\"ManagedIdentity\",\"lastModifiedAt\":\"2021-10-26T17:09:29Z\"},\"location\":\"qvsaznqntorud\",\"tags\":{\"mkycgra\":\"a\",\"aeburuvdmo\":\"wjue\"},\"id\":\"s\",\"name\":\"zlxwabmqoefkifr\",\"type\":\"tpuqujmq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StoragePoolManager manager = StoragePoolManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<DiskPool> response
            = manager.diskPools().listByResourceGroup("v", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qvsaznqntorud", response.iterator().next().location());
        Assertions.assertEquals("a", response.iterator().next().tags().get("mkycgra"));
        Assertions.assertEquals("jxdxrbuukz", response.iterator().next().nameSkuName());
        Assertions.assertEquals("ewyhml", response.iterator().next().tier());
        Assertions.assertEquals("ztzp", response.iterator().next().availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.INVALID, response.iterator().next().status());
        Assertions.assertEquals("ckw", response.iterator().next().disks().get(0).id());
        Assertions.assertEquals("or", response.iterator().next().subnetId());
        Assertions.assertEquals("tolmncwsobqw", response.iterator().next().additionalCapabilities().get(0));
    }
}
