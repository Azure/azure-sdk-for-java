// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.fluent.models.Sku;
import com.azure.resourcemanager.storagepool.models.Disk;
import com.azure.resourcemanager.storagepool.models.DiskPool;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DiskPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"wqkdwytisibi\",\"tier\":\"gpikpzimejza\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"availabilityZones\":[\"zxiavrm\",\"zonokixrjqci\",\"gzpfrla\"],\"status\":\"Healthy\",\"disks\":[{\"id\":\"nwoiind\"},{\"id\":\"pwp\"},{\"id\":\"ylwbtlhflsjcdhsz\"}],\"subnetId\":\"jvfbgofelja\",\"additionalCapabilities\":[\"mqhldvrii\",\"ojnal\",\"hfkvtvsexsowuel\"]},\"managedBy\":\"hhahhxvrhmzkwpjg\",\"managedByExtended\":[\"pughftqsxh\",\"xujxuknd\",\"digrjguufzdmsyqt\"],\"systemData\":{\"createdBy\":\"whbotzingamv\",\"createdByType\":\"User\",\"createdAt\":\"2021-06-13T23:33:12Z\",\"lastModifiedBy\":\"qzudphq\",\"lastModifiedByType\":\"Key\",\"lastModifiedAt\":\"2021-09-10T05:23:41Z\"},\"location\":\"fwynwcvtbvkay\",\"tags\":{\"atkzwpcnpw\":\"nvyq\",\"cyajguqf\":\"cjaesgvvs\",\"wzrmuh\":\"wygzlvdnkfxusem\"},\"id\":\"pfcqdp\",\"name\":\"qxqvpsvuoymgc\",\"type\":\"elvezrypq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        StoragePoolManager manager = StoragePoolManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        DiskPool response = manager.diskPools()
            .define("odacizs")
            .withRegion("bizikayuhq")
            .withExistingResourceGroup("djrkvfgbvfvpd")
            .withSku(new Sku().withName("q").withTier("krribdeibqi"))
            .withSubnetId("ystawfsdjpvkvp")
            .withTags(mapOf("bbqwrvtldg", "bs", "vm", "fp"))
            .withManagedBy("hjjklff")
            .withManagedByExtended(Arrays.asList("uwqlgzrfzeey"))
            .withAvailabilityZones(Arrays.asList("ghvxndzwmkrefa"))
            .withDisks(Arrays.asList(new Disk().withId("orwkqnyh"), new Disk().withId("b"), new Disk().withId("j"),
                new Disk().withId("jivfxzsjabib")))
            .withAdditionalCapabilities(Arrays.asList("bkzbzkd", "ncj", "budurgkakmo"))
            .create();

        Assertions.assertEquals("fwynwcvtbvkay", response.location());
        Assertions.assertEquals("nvyq", response.tags().get("atkzwpcnpw"));
        Assertions.assertEquals("wqkdwytisibi", response.nameSkuName());
        Assertions.assertEquals("gpikpzimejza", response.tier());
        Assertions.assertEquals("zxiavrm", response.availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.HEALTHY, response.status());
        Assertions.assertEquals("nwoiind", response.disks().get(0).id());
        Assertions.assertEquals("jvfbgofelja", response.subnetId());
        Assertions.assertEquals("mqhldvrii", response.additionalCapabilities().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
