// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagepool.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.storagepool.StoragePoolManager;
import com.azure.resourcemanager.storagepool.fluent.models.Sku;
import com.azure.resourcemanager.storagepool.models.DiskPool;
import com.azure.resourcemanager.storagepool.models.OperationalStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DiskPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"sku\":{\"name\":\"wznm\",\"tier\":\"iknsorgjh\"},\"properties\":{\"provisioningState\":\"Succeeded\",\"availabilityZones\":[\"dtlwwrlkd\",\"tncvokot\"],\"status\":\"Unknown\",\"disks\":[],\"subnetId\":\"yhgsy\",\"additionalCapabilities\":[\"gjltdtbnnhado\",\"crkvcikhnv\",\"amqgxqquezikyw\",\"gxk\"]},\"managedBy\":\"la\",\"managedByExtended\":[\"lwuip\",\"ccjzkzivgvv\"],\"systemData\":{\"createdBy\":\"y\",\"createdByType\":\"ManagedIdentity\",\"createdAt\":\"2021-11-02T04:27:35Z\",\"lastModifiedBy\":\"xmueed\",\"lastModifiedByType\":\"ManagedIdentity\",\"lastModifiedAt\":\"2021-09-15T00:41:47Z\"},\"location\":\"stkwqqtch\",\"tags\":{\"gpiohgwxrtfudxe\":\"mfmtdaaygdvw\",\"qagvrvm\":\"xg\",\"dblx\":\"pkukghi\"},\"id\":\"wi\",\"name\":\"fnjhfjxwmszkkfo\",\"type\":\"rey\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        StoragePoolManager manager =
            StoragePoolManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        DiskPool response =
            manager
                .diskPools()
                .define("jxywsuws")
                .withRegion("yzrpzbchckqqzq")
                .withExistingResourceGroup("reqnovvqfov")
                .withSku(new Sku().withName("rsndsytgadgvra").withTier("en"))
                .withSubnetId("q")
                .withTags(mapOf("zynkedya", "iysui"))
                .withManagedBy("qkvpuvksgplsakn")
                .withManagedByExtended(Arrays.asList("synljphuopxodl", "iyntorzihle", "sjswsrms"))
                .withAvailabilityZones(Arrays.asList("zar"))
                .withDisks(Arrays.asList())
                .withAdditionalCapabilities(Arrays.asList("jfqka", "e", "iipfpubj", "bwwift"))
                .create();

        Assertions.assertEquals("stkwqqtch", response.location());
        Assertions.assertEquals("mfmtdaaygdvw", response.tags().get("gpiohgwxrtfudxe"));
        Assertions.assertEquals("wznm", response.nameSkuName());
        Assertions.assertEquals("iknsorgjh", response.tier());
        Assertions.assertEquals("dtlwwrlkd", response.availabilityZones().get(0));
        Assertions.assertEquals(OperationalStatus.UNKNOWN, response.status());
        Assertions.assertEquals("yhgsy", response.subnetId());
        Assertions.assertEquals("gjltdtbnnhado", response.additionalCapabilities().get(0));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
