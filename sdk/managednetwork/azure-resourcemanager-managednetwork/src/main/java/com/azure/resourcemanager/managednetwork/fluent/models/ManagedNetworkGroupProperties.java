// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetwork.models.ResourceId;
import com.azure.resourcemanager.managednetwork.models.ResourceProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Properties of a Managed Network Group. */
@Fluent
public final class ManagedNetworkGroupProperties extends ResourceProperties {
    /*
     * The collection of management groups covered by the Managed Network
     */
    @JsonProperty(value = "managementGroups")
    private List<ResourceId> managementGroups;

    /*
     * The collection of subscriptions covered by the Managed Network
     */
    @JsonProperty(value = "subscriptions")
    private List<ResourceId> subscriptions;

    /*
     * The collection of virtual nets covered by the Managed Network
     */
    @JsonProperty(value = "virtualNetworks")
    private List<ResourceId> virtualNetworks;

    /*
     * The collection of  subnets covered by the Managed Network
     */
    @JsonProperty(value = "subnets")
    private List<ResourceId> subnets;

    /**
     * Get the managementGroups property: The collection of management groups covered by the Managed Network.
     *
     * @return the managementGroups value.
     */
    public List<ResourceId> managementGroups() {
        return this.managementGroups;
    }

    /**
     * Set the managementGroups property: The collection of management groups covered by the Managed Network.
     *
     * @param managementGroups the managementGroups value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withManagementGroups(List<ResourceId> managementGroups) {
        this.managementGroups = managementGroups;
        return this;
    }

    /**
     * Get the subscriptions property: The collection of subscriptions covered by the Managed Network.
     *
     * @return the subscriptions value.
     */
    public List<ResourceId> subscriptions() {
        return this.subscriptions;
    }

    /**
     * Set the subscriptions property: The collection of subscriptions covered by the Managed Network.
     *
     * @param subscriptions the subscriptions value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withSubscriptions(List<ResourceId> subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }

    /**
     * Get the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     *
     * @return the virtualNetworks value.
     */
    public List<ResourceId> virtualNetworks() {
        return this.virtualNetworks;
    }

    /**
     * Set the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     *
     * @param virtualNetworks the virtualNetworks value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withVirtualNetworks(List<ResourceId> virtualNetworks) {
        this.virtualNetworks = virtualNetworks;
        return this;
    }

    /**
     * Get the subnets property: The collection of subnets covered by the Managed Network.
     *
     * @return the subnets value.
     */
    public List<ResourceId> subnets() {
        return this.subnets;
    }

    /**
     * Set the subnets property: The collection of subnets covered by the Managed Network.
     *
     * @param subnets the subnets value to set.
     * @return the ManagedNetworkGroupProperties object itself.
     */
    public ManagedNetworkGroupProperties withSubnets(List<ResourceId> subnets) {
        this.subnets = subnets;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (managementGroups() != null) {
            managementGroups().forEach(e -> e.validate());
        }
        if (subscriptions() != null) {
            subscriptions().forEach(e -> e.validate());
        }
        if (virtualNetworks() != null) {
            virtualNetworks().forEach(e -> e.validate());
        }
        if (subnets() != null) {
            subnets().forEach(e -> e.validate());
        }
    }
}
