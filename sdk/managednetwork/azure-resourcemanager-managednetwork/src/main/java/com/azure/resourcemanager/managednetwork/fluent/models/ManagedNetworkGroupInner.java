// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.resourcemanager.managednetwork.models.Kind;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import com.azure.resourcemanager.managednetwork.models.ResourceId;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The Managed Network Group resource. */
@Fluent
public final class ManagedNetworkGroupInner extends ProxyResource {
    /*
     * Gets or sets the properties of a network group
     */
    @JsonProperty(value = "properties")
    private ManagedNetworkGroupProperties innerProperties;

    /*
     * Responsibility role under which this Managed Network Group will be
     * created
     */
    @JsonProperty(value = "kind")
    private Kind kind;

    /**
     * Get the innerProperties property: Gets or sets the properties of a network group.
     *
     * @return the innerProperties value.
     */
    private ManagedNetworkGroupProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the kind property: Responsibility role under which this Managed Network Group will be created.
     *
     * @return the kind value.
     */
    public Kind kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Responsibility role under which this Managed Network Group will be created.
     *
     * @param kind the kind value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withKind(Kind kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the managementGroups property: The collection of management groups covered by the Managed Network.
     *
     * @return the managementGroups value.
     */
    public List<ResourceId> managementGroups() {
        return this.innerProperties() == null ? null : this.innerProperties().managementGroups();
    }

    /**
     * Set the managementGroups property: The collection of management groups covered by the Managed Network.
     *
     * @param managementGroups the managementGroups value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withManagementGroups(List<ResourceId> managementGroups) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withManagementGroups(managementGroups);
        return this;
    }

    /**
     * Get the subscriptions property: The collection of subscriptions covered by the Managed Network.
     *
     * @return the subscriptions value.
     */
    public List<ResourceId> subscriptions() {
        return this.innerProperties() == null ? null : this.innerProperties().subscriptions();
    }

    /**
     * Set the subscriptions property: The collection of subscriptions covered by the Managed Network.
     *
     * @param subscriptions the subscriptions value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withSubscriptions(List<ResourceId> subscriptions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withSubscriptions(subscriptions);
        return this;
    }

    /**
     * Get the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     *
     * @return the virtualNetworks value.
     */
    public List<ResourceId> virtualNetworks() {
        return this.innerProperties() == null ? null : this.innerProperties().virtualNetworks();
    }

    /**
     * Set the virtualNetworks property: The collection of virtual nets covered by the Managed Network.
     *
     * @param virtualNetworks the virtualNetworks value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withVirtualNetworks(List<ResourceId> virtualNetworks) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withVirtualNetworks(virtualNetworks);
        return this;
    }

    /**
     * Get the subnets property: The collection of subnets covered by the Managed Network.
     *
     * @return the subnets value.
     */
    public List<ResourceId> subnets() {
        return this.innerProperties() == null ? null : this.innerProperties().subnets();
    }

    /**
     * Set the subnets property: The collection of subnets covered by the Managed Network.
     *
     * @param subnets the subnets value to set.
     * @return the ManagedNetworkGroupInner object itself.
     */
    public ManagedNetworkGroupInner withSubnets(List<ResourceId> subnets) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ManagedNetworkGroupProperties();
        }
        this.innerProperties().withSubnets(subnets);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the ManagedNetwork resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    public String etag() {
        return this.innerProperties() == null ? null : this.innerProperties().etag();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
