// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetwork.fluent.ScopeAssignmentsClient;
import com.azure.resourcemanager.managednetwork.fluent.models.ScopeAssignmentInner;
import com.azure.resourcemanager.managednetwork.models.ScopeAssignment;
import com.azure.resourcemanager.managednetwork.models.ScopeAssignments;

public final class ScopeAssignmentsImpl implements ScopeAssignments {
    private static final ClientLogger LOGGER = new ClientLogger(ScopeAssignmentsImpl.class);

    private final ScopeAssignmentsClient innerClient;

    private final com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager;

    public ScopeAssignmentsImpl(
        ScopeAssignmentsClient innerClient,
        com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ScopeAssignment get(String scope, String scopeAssignmentName) {
        ScopeAssignmentInner inner = this.serviceClient().get(scope, scopeAssignmentName);
        if (inner != null) {
            return new ScopeAssignmentImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ScopeAssignment> getWithResponse(String scope, String scopeAssignmentName, Context context) {
        Response<ScopeAssignmentInner> inner =
            this.serviceClient().getWithResponse(scope, scopeAssignmentName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ScopeAssignmentImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String scope, String scopeAssignmentName) {
        this.serviceClient().delete(scope, scopeAssignmentName);
    }

    public Response<Void> deleteWithResponse(String scope, String scopeAssignmentName, Context context) {
        return this.serviceClient().deleteWithResponse(scope, scopeAssignmentName, context);
    }

    public PagedIterable<ScopeAssignment> list(String scope) {
        PagedIterable<ScopeAssignmentInner> inner = this.serviceClient().list(scope);
        return Utils.mapPage(inner, inner1 -> new ScopeAssignmentImpl(inner1, this.manager()));
    }

    public PagedIterable<ScopeAssignment> list(String scope, Context context) {
        PagedIterable<ScopeAssignmentInner> inner = this.serviceClient().list(scope, context);
        return Utils.mapPage(inner, inner1 -> new ScopeAssignmentImpl(inner1, this.manager()));
    }

    public ScopeAssignment getById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String scopeAssignmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
                    "scopeAssignmentName");
        if (scopeAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scopeAssignments'.", id)));
        }
        return this.getWithResponse(scope, scopeAssignmentName, Context.NONE).getValue();
    }

    public Response<ScopeAssignment> getByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String scopeAssignmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
                    "scopeAssignmentName");
        if (scopeAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scopeAssignments'.", id)));
        }
        return this.getWithResponse(scope, scopeAssignmentName, context);
    }

    public void deleteById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String scopeAssignmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
                    "scopeAssignmentName");
        if (scopeAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scopeAssignments'.", id)));
        }
        this.deleteWithResponse(scope, scopeAssignmentName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}", "scope");
        if (scope == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String scopeAssignmentName =
            Utils
                .getValueFromIdByParameterName(
                    id,
                    "/{scope}/providers/Microsoft.ManagedNetwork/scopeAssignments/{scopeAssignmentName}",
                    "scopeAssignmentName");
        if (scopeAssignmentName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'scopeAssignments'.", id)));
        }
        return this.deleteWithResponse(scope, scopeAssignmentName, context);
    }

    private ScopeAssignmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetwork.ManagedNetworkManager manager() {
        return this.serviceManager;
    }

    public ScopeAssignmentImpl define(String name) {
        return new ScopeAssignmentImpl(name, this.manager());
    }
}
