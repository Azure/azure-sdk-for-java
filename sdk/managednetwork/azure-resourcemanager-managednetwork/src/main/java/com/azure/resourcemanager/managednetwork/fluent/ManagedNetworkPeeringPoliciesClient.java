// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkPeeringPolicyInner;

/** An instance of this class provides access to all the operations defined in ManagedNetworkPeeringPoliciesClient. */
public interface ManagedNetworkPeeringPoliciesClient {
    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedNetworkPeeringPolicyInner get(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName);

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ManagedNetworkPeeringPolicyInner> getWithResponse(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context);

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagedNetworkPeeringPolicyInner>, ManagedNetworkPeeringPolicyInner> beginCreateOrUpdate(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy);

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<ManagedNetworkPeeringPolicyInner>, ManagedNetworkPeeringPolicyInner> beginCreateOrUpdate(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
        Context context);

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedNetworkPeeringPolicyInner createOrUpdate(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy);

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ManagedNetworkPeeringPolicyInner createOrUpdate(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
        Context context);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context);

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ManagedNetworkPeeringPolicyInner> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName);

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ManagedNetworkPeeringPolicyInner> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken, Context context);
}
