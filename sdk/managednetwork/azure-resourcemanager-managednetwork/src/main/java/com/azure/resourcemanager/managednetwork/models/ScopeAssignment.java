// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetwork.fluent.models.ScopeAssignmentInner;

/** An immutable client-side representation of ScopeAssignment. */
public interface ScopeAssignment {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the assignedManagedNetwork property: The managed network ID with scope will be assigned to.
     *
     * @return the assignedManagedNetwork value.
     */
    String assignedManagedNetwork();

    /**
     * Gets the provisioningState property: Provisioning state of the ManagedNetwork resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.managednetwork.fluent.models.ScopeAssignmentInner object.
     *
     * @return the inner object.
     */
    ScopeAssignmentInner innerModel();

    /** The entirety of the ScopeAssignment definition. */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithScope, DefinitionStages.WithCreate {
    }
    /** The ScopeAssignment definition stages. */
    interface DefinitionStages {
        /** The first stage of the ScopeAssignment definition. */
        interface Blank extends WithScope {
        }
        /** The stage of the ScopeAssignment definition allowing to specify parent resource. */
        interface WithScope {
            /**
             * Specifies scope.
             *
             * @param scope The base resource of the scope assignment to create. The scope can be any REST resource
             *     instance. For example, use 'subscriptions/{subscription-id}' for a subscription,
             *     'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
             *     'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
             *     for a resource.
             * @return the next definition stage.
             */
            WithCreate withExistingScope(String scope);
        }
        /**
         * The stage of the ScopeAssignment definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate extends DefinitionStages.WithLocation, DefinitionStages.WithAssignedManagedNetwork {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            ScopeAssignment create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            ScopeAssignment create(Context context);
        }
        /** The stage of the ScopeAssignment definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithCreate withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithCreate withRegion(String location);
        }
        /** The stage of the ScopeAssignment definition allowing to specify assignedManagedNetwork. */
        interface WithAssignedManagedNetwork {
            /**
             * Specifies the assignedManagedNetwork property: The managed network ID with scope will be assigned to..
             *
             * @param assignedManagedNetwork The managed network ID with scope will be assigned to.
             * @return the next definition stage.
             */
            WithCreate withAssignedManagedNetwork(String assignedManagedNetwork);
        }
    }
    /**
     * Begins update for the ScopeAssignment resource.
     *
     * @return the stage of resource update.
     */
    ScopeAssignment.Update update();

    /** The template for ScopeAssignment update. */
    interface Update extends UpdateStages.WithAssignedManagedNetwork {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        ScopeAssignment apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        ScopeAssignment apply(Context context);
    }
    /** The ScopeAssignment update stages. */
    interface UpdateStages {
        /** The stage of the ScopeAssignment update allowing to specify assignedManagedNetwork. */
        interface WithAssignedManagedNetwork {
            /**
             * Specifies the assignedManagedNetwork property: The managed network ID with scope will be assigned to..
             *
             * @param assignedManagedNetwork The managed network ID with scope will be assigned to.
             * @return the next definition stage.
             */
            Update withAssignedManagedNetwork(String assignedManagedNetwork);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    ScopeAssignment refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    ScopeAssignment refresh(Context context);
}
