// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetwork.fluent.ManagedNetworksClient;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkInner;
import com.azure.resourcemanager.managednetwork.models.ManagedNetwork;
import com.azure.resourcemanager.managednetwork.models.ManagedNetworks;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ManagedNetworksImpl implements ManagedNetworks {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ManagedNetworksImpl.class);

    private final ManagedNetworksClient innerClient;

    private final com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager;

    public ManagedNetworksImpl(
        ManagedNetworksClient innerClient,
        com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedNetwork getByResourceGroup(String resourceGroupName, String managedNetworkName) {
        ManagedNetworkInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, managedNetworkName);
        if (inner != null) {
            return new ManagedNetworkImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedNetwork> getByResourceGroupWithResponse(
        String resourceGroupName, String managedNetworkName, Context context) {
        Response<ManagedNetworkInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, managedNetworkName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedNetworkImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String managedNetworkName) {
        this.serviceClient().delete(resourceGroupName, managedNetworkName);
    }

    public void delete(String resourceGroupName, String managedNetworkName, Context context) {
        this.serviceClient().delete(resourceGroupName, managedNetworkName, context);
    }

    public PagedIterable<ManagedNetwork> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ManagedNetworkInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new ManagedNetworkImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedNetwork> listByResourceGroup(
        String resourceGroupName, Integer top, String skiptoken, Context context) {
        PagedIterable<ManagedNetworkInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, top, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new ManagedNetworkImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedNetwork> list() {
        PagedIterable<ManagedNetworkInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new ManagedNetworkImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedNetwork> list(Integer top, String skiptoken, Context context) {
        PagedIterable<ManagedNetworkInner> inner = this.serviceClient().list(top, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new ManagedNetworkImpl(inner1, this.manager()));
    }

    public ManagedNetwork getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, managedNetworkName, Context.NONE).getValue();
    }

    public Response<ManagedNetwork> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, managedNetworkName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        this.delete(resourceGroupName, managedNetworkName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        this.delete(resourceGroupName, managedNetworkName, context);
    }

    private ManagedNetworksClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetwork.ManagedNetworkManager manager() {
        return this.serviceManager;
    }

    public ManagedNetworkImpl define(String name) {
        return new ManagedNetworkImpl(name, this.manager());
    }
}
