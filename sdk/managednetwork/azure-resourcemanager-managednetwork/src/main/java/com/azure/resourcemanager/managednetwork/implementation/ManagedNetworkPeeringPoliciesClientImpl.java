// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.managednetwork.fluent.ManagedNetworkPeeringPoliciesClient;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkPeeringPolicyInner;
import com.azure.resourcemanager.managednetwork.models.ManagedNetworkPeeringPolicyListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ManagedNetworkPeeringPoliciesClient. */
public final class ManagedNetworkPeeringPoliciesClientImpl implements ManagedNetworkPeeringPoliciesClient {
    /** The proxy service used to perform REST calls. */
    private final ManagedNetworkPeeringPoliciesService service;

    /** The service client containing this operation class. */
    private final ManagedNetworkManagementClientImpl client;

    /**
     * Initializes an instance of ManagedNetworkPeeringPoliciesClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ManagedNetworkPeeringPoliciesClientImpl(ManagedNetworkManagementClientImpl client) {
        this.service =
            RestProxy
                .create(
                    ManagedNetworkPeeringPoliciesService.class,
                    client.getHttpPipeline(),
                    client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ManagedNetworkManagementClientManagedNetworkPeeringPolicies to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ManagedNetworkManage")
    private interface ManagedNetworkPeeringPoliciesService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork"
                + "/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies"
                + "/{managedNetworkPeeringPolicyName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedNetworkPeeringPolicyInner>> get(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("managedNetworkName") String managedNetworkName,
            @PathParam("managedNetworkPeeringPolicyName") String managedNetworkPeeringPolicyName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork"
                + "/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies"
                + "/{managedNetworkPeeringPolicyName}")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> createOrUpdate(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("managedNetworkName") String managedNetworkName,
            @PathParam("managedNetworkPeeringPolicyName") String managedNetworkPeeringPolicyName,
            @BodyParam("application/json") ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork"
                + "/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies"
                + "/{managedNetworkPeeringPolicyName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("managedNetworkName") String managedNetworkName,
            @PathParam("managedNetworkPeeringPolicyName") String managedNetworkPeeringPolicyName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedNetwork"
                + "/managedNetworks/{managedNetworkName}/managedNetworkPeeringPolicies")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedNetworkPeeringPolicyListResult>> listByManagedNetwork(
            @HostParam("$host") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("managedNetworkName") String managedNetworkName,
            @QueryParam("$top") Integer top,
            @QueryParam("$skiptoken") String skiptoken,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ManagedNetworkPeeringPolicyListResult>> listByManagedNetworkNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedNetworkPeeringPolicyInner>> getWithResponseAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (managedNetworkPeeringPolicyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedNetworkPeeringPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            managedNetworkName,
                            managedNetworkPeeringPolicyName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ManagedNetworkPeeringPolicyInner>> getWithResponseAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (managedNetworkPeeringPolicyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedNetworkPeeringPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                managedNetworkName,
                managedNetworkPeeringPolicyName,
                accept,
                context);
    }

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkPeeringPolicyInner> getAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        return getWithResponseAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkPeeringPolicyInner get(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        return getAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).block();
    }

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ManagedNetworkPeeringPolicyInner> getWithResponse(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        return getWithResponseAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, context)
            .block();
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (managedNetworkPeeringPolicyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedNetworkPeeringPolicyName is required and cannot be null."));
        }
        if (managedNetworkPolicy == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkPolicy is required and cannot be null."));
        } else {
            managedNetworkPolicy.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .createOrUpdate(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            managedNetworkName,
                            managedNetworkPeeringPolicyName,
                            managedNetworkPolicy,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createOrUpdateWithResponseAsync(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (managedNetworkPeeringPolicyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedNetworkPeeringPolicyName is required and cannot be null."));
        }
        if (managedNetworkPolicy == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkPolicy is required and cannot be null."));
        } else {
            managedNetworkPolicy.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .createOrUpdate(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                managedNetworkName,
                managedNetworkPeeringPolicyName,
                managedNetworkPolicy,
                accept,
                context);
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedNetworkPeeringPolicyInner>, ManagedNetworkPeeringPolicyInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName,
            String managedNetworkName,
            String managedNetworkPeeringPolicyName,
            ManagedNetworkPeeringPolicyInner managedNetworkPolicy) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy);
        return this
            .client
            .<ManagedNetworkPeeringPolicyInner, ManagedNetworkPeeringPolicyInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ManagedNetworkPeeringPolicyInner.class,
                ManagedNetworkPeeringPolicyInner.class,
                this.client.getContext());
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<ManagedNetworkPeeringPolicyInner>, ManagedNetworkPeeringPolicyInner>
        beginCreateOrUpdateAsync(
            String resourceGroupName,
            String managedNetworkName,
            String managedNetworkPeeringPolicyName,
            ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
            Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createOrUpdateWithResponseAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy, context);
        return this
            .client
            .<ManagedNetworkPeeringPolicyInner, ManagedNetworkPeeringPolicyInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ManagedNetworkPeeringPolicyInner.class,
                ManagedNetworkPeeringPolicyInner.class,
                context);
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedNetworkPeeringPolicyInner>, ManagedNetworkPeeringPolicyInner>
        beginCreateOrUpdate(
            String resourceGroupName,
            String managedNetworkName,
            String managedNetworkPeeringPolicyName,
            ManagedNetworkPeeringPolicyInner managedNetworkPolicy) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy)
            .getSyncPoller();
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<ManagedNetworkPeeringPolicyInner>, ManagedNetworkPeeringPolicyInner>
        beginCreateOrUpdate(
            String resourceGroupName,
            String managedNetworkName,
            String managedNetworkPeeringPolicyName,
            ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
            Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy, context)
            .getSyncPoller();
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkPeeringPolicyInner> createOrUpdateAsync(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ManagedNetworkPeeringPolicyInner> createOrUpdateAsync(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
        Context context) {
        return beginCreateOrUpdateAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkPeeringPolicyInner createOrUpdate(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy) {
        return createOrUpdateAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy)
            .block();
    }

    /**
     * The Put ManagedNetworkPeeringPolicies operation creates/updates a new Managed Network Peering Policy.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param managedNetworkPolicy Parameters supplied to create/update a Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ManagedNetworkPeeringPolicyInner createOrUpdate(
        String resourceGroupName,
        String managedNetworkName,
        String managedNetworkPeeringPolicyName,
        ManagedNetworkPeeringPolicyInner managedNetworkPolicy,
        Context context) {
        return createOrUpdateAsync(
                resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, managedNetworkPolicy, context)
            .block();
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (managedNetworkPeeringPolicyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedNetworkPeeringPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            managedNetworkName,
                            managedNetworkPeeringPolicyName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        if (managedNetworkPeeringPolicyName == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter managedNetworkPeeringPolicyName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                managedNetworkName,
                managedNetworkPeeringPolicyName,
                accept,
                context);
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        return beginDeleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).getSyncPoller();
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        return beginDeleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, context)
            .getSyncPoller();
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        return beginDeleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        return beginDeleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName) {
        deleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName).block();
    }

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context) {
        deleteAsync(resourceGroupName, managedNetworkName, managedNetworkPeeringPolicyName, context).block();
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedNetworkPeeringPolicyInner>> listByManagedNetworkSinglePageAsync(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByManagedNetwork(
                            this.client.getEndpoint(),
                            this.client.getApiVersion(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            managedNetworkName,
                            top,
                            skiptoken,
                            accept,
                            context))
            .<PagedResponse<ManagedNetworkPeeringPolicyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedNetworkPeeringPolicyInner>> listByManagedNetworkSinglePageAsync(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (managedNetworkName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter managedNetworkName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByManagedNetwork(
                this.client.getEndpoint(),
                this.client.getApiVersion(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                managedNetworkName,
                top,
                skiptoken,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedNetworkPeeringPolicyInner> listByManagedNetworkAsync(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken) {
        return new PagedFlux<>(
            () -> listByManagedNetworkSinglePageAsync(resourceGroupName, managedNetworkName, top, skiptoken),
            nextLink -> listByManagedNetworkNextSinglePageAsync(nextLink));
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedNetworkPeeringPolicyInner> listByManagedNetworkAsync(
        String resourceGroupName, String managedNetworkName) {
        final Integer top = null;
        final String skiptoken = null;
        return new PagedFlux<>(
            () -> listByManagedNetworkSinglePageAsync(resourceGroupName, managedNetworkName, top, skiptoken),
            nextLink -> listByManagedNetworkNextSinglePageAsync(nextLink));
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ManagedNetworkPeeringPolicyInner> listByManagedNetworkAsync(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken, Context context) {
        return new PagedFlux<>(
            () -> listByManagedNetworkSinglePageAsync(resourceGroupName, managedNetworkName, top, skiptoken, context),
            nextLink -> listByManagedNetworkNextSinglePageAsync(nextLink, context));
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedNetworkPeeringPolicyInner> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName) {
        final Integer top = null;
        final String skiptoken = null;
        return new PagedIterable<>(listByManagedNetworkAsync(resourceGroupName, managedNetworkName, top, skiptoken));
    }

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ManagedNetworkPeeringPolicyInner> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken, Context context) {
        return new PagedIterable<>(
            listByManagedNetworkAsync(resourceGroupName, managedNetworkName, top, skiptoken, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedNetworkPeeringPolicyInner>> listByManagedNetworkNextSinglePageAsync(
        String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByManagedNetworkNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<ManagedNetworkPeeringPolicyInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies along with {@link PagedResponse} on
     *     successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ManagedNetworkPeeringPolicyInner>> listByManagedNetworkNextSinglePageAsync(
        String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByManagedNetworkNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
