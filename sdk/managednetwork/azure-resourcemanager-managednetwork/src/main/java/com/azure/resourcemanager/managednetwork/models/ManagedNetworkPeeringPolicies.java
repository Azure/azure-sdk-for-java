// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ManagedNetworkPeeringPolicies. */
public interface ManagedNetworkPeeringPolicies {
    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource.
     */
    ManagedNetworkPeeringPolicy get(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName);

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response}.
     */
    Response<ManagedNetworkPeeringPolicy> getWithResponse(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param managedNetworkPeeringPolicyName The name of the Managed Network Peering Policy.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(
        String resourceGroupName, String managedNetworkName, String managedNetworkPeeringPolicyName, Context context);

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<ManagedNetworkPeeringPolicy> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName);

    /**
     * The ListByManagedNetwork PeeringPolicies operation retrieves all the Managed Network Peering Policies in a
     * specified Managed Network, in a paginated format.
     *
     * @param resourceGroupName The name of the resource group.
     * @param managedNetworkName The name of the Managed Network.
     * @param top May be used to limit the number of results in a page for list queries.
     * @param skiptoken Skiptoken is only used if a previous operation returned a partial result. If a previous response
     *     contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that
     *     specifies a starting point to use for subsequent calls.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the request to list Managed Network Peering Policies as paginated response with {@link
     *     PagedIterable}.
     */
    PagedIterable<ManagedNetworkPeeringPolicy> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken, Context context);

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response}.
     */
    ManagedNetworkPeeringPolicy getById(String id);

    /**
     * The Get ManagedNetworkPeeringPolicies operation gets a Managed Network Peering Policy resource, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network Peering Policy resource along with {@link Response}.
     */
    Response<ManagedNetworkPeeringPolicy> getByIdWithResponse(String id, Context context);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * The Delete ManagedNetworkPeeringPolicies operation deletes a Managed Network Peering Policy, specified by the
     * resource group, Managed Network name, and peering policy name.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Context context);

    /**
     * Begins definition for a new ManagedNetworkPeeringPolicy resource.
     *
     * @param name resource name.
     * @return the first stage of the new ManagedNetworkPeeringPolicy definition.
     */
    ManagedNetworkPeeringPolicy.DefinitionStages.Blank define(String name);
}
