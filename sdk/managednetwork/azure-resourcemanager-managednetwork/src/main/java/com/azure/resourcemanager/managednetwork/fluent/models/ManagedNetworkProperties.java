// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.managednetwork.models.ConnectivityCollection;
import com.azure.resourcemanager.managednetwork.models.ResourceProperties;
import com.azure.resourcemanager.managednetwork.models.Scope;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Properties of Managed Network. */
@Fluent
public final class ManagedNetworkProperties extends ResourceProperties {
    /*
     * The collection of management groups, subscriptions, virtual networks,
     * and subnets by the Managed Network. This is a read-only property that is
     * reflective of all ScopeAssignments for this Managed Network
     */
    @JsonProperty(value = "scope")
    private Scope scope;

    /*
     * The collection of groups and policies concerned with connectivity
     */
    @JsonProperty(value = "connectivity", access = JsonProperty.Access.WRITE_ONLY)
    private ConnectivityCollection connectivity;

    /**
     * Get the scope property: The collection of management groups, subscriptions, virtual networks, and subnets by the
     * Managed Network. This is a read-only property that is reflective of all ScopeAssignments for this Managed
     * Network.
     *
     * @return the scope value.
     */
    public Scope scope() {
        return this.scope;
    }

    /**
     * Set the scope property: The collection of management groups, subscriptions, virtual networks, and subnets by the
     * Managed Network. This is a read-only property that is reflective of all ScopeAssignments for this Managed
     * Network.
     *
     * @param scope the scope value to set.
     * @return the ManagedNetworkProperties object itself.
     */
    public ManagedNetworkProperties withScope(Scope scope) {
        this.scope = scope;
        return this;
    }

    /**
     * Get the connectivity property: The collection of groups and policies concerned with connectivity.
     *
     * @return the connectivity value.
     */
    public ConnectivityCollection connectivity() {
        return this.connectivity;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (scope() != null) {
            scope().validate();
        }
        if (connectivity() != null) {
            connectivity().validate();
        }
    }
}
