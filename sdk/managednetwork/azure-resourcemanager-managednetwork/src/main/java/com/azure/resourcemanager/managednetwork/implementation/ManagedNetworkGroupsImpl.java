// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetwork.fluent.ManagedNetworkGroupsClient;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkGroupInner;
import com.azure.resourcemanager.managednetwork.models.ManagedNetworkGroup;
import com.azure.resourcemanager.managednetwork.models.ManagedNetworkGroups;

public final class ManagedNetworkGroupsImpl implements ManagedNetworkGroups {
    private static final ClientLogger LOGGER = new ClientLogger(ManagedNetworkGroupsImpl.class);

    private final ManagedNetworkGroupsClient innerClient;

    private final com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager;

    public ManagedNetworkGroupsImpl(
        ManagedNetworkGroupsClient innerClient,
        com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ManagedNetworkGroup get(
        String resourceGroupName, String managedNetworkName, String managedNetworkGroupName) {
        ManagedNetworkGroupInner inner =
            this.serviceClient().get(resourceGroupName, managedNetworkName, managedNetworkGroupName);
        if (inner != null) {
            return new ManagedNetworkGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ManagedNetworkGroup> getWithResponse(
        String resourceGroupName, String managedNetworkName, String managedNetworkGroupName, Context context) {
        Response<ManagedNetworkGroupInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, managedNetworkName, managedNetworkGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ManagedNetworkGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String managedNetworkName, String managedNetworkGroupName) {
        this.serviceClient().delete(resourceGroupName, managedNetworkName, managedNetworkGroupName);
    }

    public void delete(
        String resourceGroupName, String managedNetworkName, String managedNetworkGroupName, Context context) {
        this.serviceClient().delete(resourceGroupName, managedNetworkName, managedNetworkGroupName, context);
    }

    public PagedIterable<ManagedNetworkGroup> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName) {
        PagedIterable<ManagedNetworkGroupInner> inner =
            this.serviceClient().listByManagedNetwork(resourceGroupName, managedNetworkName);
        return Utils.mapPage(inner, inner1 -> new ManagedNetworkGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ManagedNetworkGroup> listByManagedNetwork(
        String resourceGroupName, String managedNetworkName, Integer top, String skiptoken, Context context) {
        PagedIterable<ManagedNetworkGroupInner> inner =
            this.serviceClient().listByManagedNetwork(resourceGroupName, managedNetworkName, top, skiptoken, context);
        return Utils.mapPage(inner, inner1 -> new ManagedNetworkGroupImpl(inner1, this.manager()));
    }

    public ManagedNetworkGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        String managedNetworkGroupName = Utils.getValueFromIdByName(id, "managedNetworkGroups");
        if (managedNetworkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedNetworkGroups'.",
                                id)));
        }
        return this
            .getWithResponse(resourceGroupName, managedNetworkName, managedNetworkGroupName, Context.NONE)
            .getValue();
    }

    public Response<ManagedNetworkGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        String managedNetworkGroupName = Utils.getValueFromIdByName(id, "managedNetworkGroups");
        if (managedNetworkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedNetworkGroups'.",
                                id)));
        }
        return this.getWithResponse(resourceGroupName, managedNetworkName, managedNetworkGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        String managedNetworkGroupName = Utils.getValueFromIdByName(id, "managedNetworkGroups");
        if (managedNetworkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedNetworkGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, managedNetworkName, managedNetworkGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String managedNetworkName = Utils.getValueFromIdByName(id, "managedNetworks");
        if (managedNetworkName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'managedNetworks'.", id)));
        }
        String managedNetworkGroupName = Utils.getValueFromIdByName(id, "managedNetworkGroups");
        if (managedNetworkGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'managedNetworkGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, managedNetworkName, managedNetworkGroupName, context);
    }

    private ManagedNetworkGroupsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.managednetwork.ManagedNetworkManager manager() {
        return this.serviceManager;
    }

    public ManagedNetworkGroupImpl define(String name) {
        return new ManagedNetworkGroupImpl(name, this.manager());
    }
}
