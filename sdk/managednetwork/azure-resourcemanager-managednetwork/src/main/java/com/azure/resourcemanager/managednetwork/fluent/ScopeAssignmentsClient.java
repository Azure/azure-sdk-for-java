// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetwork.fluent.models.ScopeAssignmentInner;

/** An instance of this class provides access to all the operations defined in ScopeAssignmentsClient. */
public interface ScopeAssignmentsClient {
    /**
     * Get the specified scope assignment.
     *
     * @param scope The base resource of the scope assignment.
     * @param scopeAssignmentName The name of the scope assignment to get.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified scope assignment.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScopeAssignmentInner get(String scope, String scopeAssignmentName);

    /**
     * Get the specified scope assignment.
     *
     * @param scope The base resource of the scope assignment.
     * @param scopeAssignmentName The name of the scope assignment to get.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified scope assignment along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ScopeAssignmentInner> getWithResponse(String scope, String scopeAssignmentName, Context context);

    /**
     * Creates a scope assignment.
     *
     * @param scope The base resource of the scope assignment to create. The scope can be any REST resource instance.
     *     For example, use 'subscriptions/{subscription-id}' for a subscription,
     *     'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
     *     'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param scopeAssignmentName The name of the scope assignment to create.
     * @param parameters Parameters supplied to the specify which Managed Network this scope is being assigned.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ScopeAssignmentInner createOrUpdate(String scope, String scopeAssignmentName, ScopeAssignmentInner parameters);

    /**
     * Creates a scope assignment.
     *
     * @param scope The base resource of the scope assignment to create. The scope can be any REST resource instance.
     *     For example, use 'subscriptions/{subscription-id}' for a subscription,
     *     'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for a resource group, and
     *     'subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider}/{resource-type}/{resource-name}'
     *     for a resource.
     * @param scopeAssignmentName The name of the scope assignment to create.
     * @param parameters Parameters supplied to the specify which Managed Network this scope is being assigned.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the Managed Network resource along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ScopeAssignmentInner> createOrUpdateWithResponse(
        String scope, String scopeAssignmentName, ScopeAssignmentInner parameters, Context context);

    /**
     * Deletes a scope assignment.
     *
     * @param scope The scope of the scope assignment to delete.
     * @param scopeAssignmentName The name of the scope assignment to delete.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String scope, String scopeAssignmentName);

    /**
     * Deletes a scope assignment.
     *
     * @param scope The scope of the scope assignment to delete.
     * @param scopeAssignmentName The name of the scope assignment to delete.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String scope, String scopeAssignmentName, Context context);

    /**
     * Get the specified scope assignment.
     *
     * @param scope The base resource of the scope assignment.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified scope assignment as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ScopeAssignmentInner> list(String scope);

    /**
     * Get the specified scope assignment.
     *
     * @param scope The base resource of the scope assignment.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the specified scope assignment as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<ScopeAssignmentInner> list(String scope, Context context);
}
