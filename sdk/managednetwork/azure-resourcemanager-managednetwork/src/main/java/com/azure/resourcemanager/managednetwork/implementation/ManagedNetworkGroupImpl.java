// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkGroupInner;
import com.azure.resourcemanager.managednetwork.models.Kind;
import com.azure.resourcemanager.managednetwork.models.ManagedNetworkGroup;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import com.azure.resourcemanager.managednetwork.models.ResourceId;
import java.util.Collections;
import java.util.List;

public final class ManagedNetworkGroupImpl
    implements ManagedNetworkGroup, ManagedNetworkGroup.Definition, ManagedNetworkGroup.Update {
    private ManagedNetworkGroupInner innerObject;

    private final com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Kind kind() {
        return this.innerModel().kind();
    }

    public List<ResourceId> managementGroups() {
        List<ResourceId> inner = this.innerModel().managementGroups();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<ResourceId> subscriptions() {
        List<ResourceId> inner = this.innerModel().subscriptions();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<ResourceId> virtualNetworks() {
        List<ResourceId> inner = this.innerModel().virtualNetworks();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<ResourceId> subnets() {
        List<ResourceId> inner = this.innerModel().subnets();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public ManagedNetworkGroupInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetwork.ManagedNetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String managedNetworkName;

    private String managedNetworkGroupName;

    public ManagedNetworkGroupImpl withExistingManagedNetwork(String resourceGroupName, String managedNetworkName) {
        this.resourceGroupName = resourceGroupName;
        this.managedNetworkName = managedNetworkName;
        return this;
    }

    public ManagedNetworkGroup create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworkGroups()
                .createOrUpdate(
                    resourceGroupName, managedNetworkName, managedNetworkGroupName, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedNetworkGroup create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworkGroups()
                .createOrUpdate(
                    resourceGroupName, managedNetworkName, managedNetworkGroupName, this.innerModel(), context);
        return this;
    }

    ManagedNetworkGroupImpl(
        String name, com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerObject = new ManagedNetworkGroupInner();
        this.serviceManager = serviceManager;
        this.managedNetworkGroupName = name;
    }

    public ManagedNetworkGroupImpl update() {
        return this;
    }

    public ManagedNetworkGroup apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworkGroups()
                .createOrUpdate(
                    resourceGroupName, managedNetworkName, managedNetworkGroupName, this.innerModel(), Context.NONE);
        return this;
    }

    public ManagedNetworkGroup apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworkGroups()
                .createOrUpdate(
                    resourceGroupName, managedNetworkName, managedNetworkGroupName, this.innerModel(), context);
        return this;
    }

    ManagedNetworkGroupImpl(
        ManagedNetworkGroupInner innerObject,
        com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.managedNetworkName = Utils.getValueFromIdByName(innerObject.id(), "managedNetworks");
        this.managedNetworkGroupName = Utils.getValueFromIdByName(innerObject.id(), "managedNetworkGroups");
    }

    public ManagedNetworkGroup refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworkGroups()
                .getWithResponse(resourceGroupName, managedNetworkName, managedNetworkGroupName, Context.NONE)
                .getValue();
        return this;
    }

    public ManagedNetworkGroup refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworkGroups()
                .getWithResponse(resourceGroupName, managedNetworkName, managedNetworkGroupName, context)
                .getValue();
        return this;
    }

    public ManagedNetworkGroupImpl withKind(Kind kind) {
        this.innerModel().withKind(kind);
        return this;
    }

    public ManagedNetworkGroupImpl withManagementGroups(List<ResourceId> managementGroups) {
        this.innerModel().withManagementGroups(managementGroups);
        return this;
    }

    public ManagedNetworkGroupImpl withSubscriptions(List<ResourceId> subscriptions) {
        this.innerModel().withSubscriptions(subscriptions);
        return this;
    }

    public ManagedNetworkGroupImpl withVirtualNetworks(List<ResourceId> virtualNetworks) {
        this.innerModel().withVirtualNetworks(virtualNetworks);
        return this;
    }

    public ManagedNetworkGroupImpl withSubnets(List<ResourceId> subnets) {
        this.innerModel().withSubnets(subnets);
        return this;
    }
}
