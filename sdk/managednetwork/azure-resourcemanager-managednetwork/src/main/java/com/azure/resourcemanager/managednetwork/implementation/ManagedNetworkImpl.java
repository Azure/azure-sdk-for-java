// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkInner;
import com.azure.resourcemanager.managednetwork.models.ConnectivityCollection;
import com.azure.resourcemanager.managednetwork.models.ManagedNetwork;
import com.azure.resourcemanager.managednetwork.models.ManagedNetworkUpdate;
import com.azure.resourcemanager.managednetwork.models.ProvisioningState;
import com.azure.resourcemanager.managednetwork.models.Scope;
import java.util.Collections;
import java.util.Map;

public final class ManagedNetworkImpl implements ManagedNetwork, ManagedNetwork.Definition, ManagedNetwork.Update {
    private ManagedNetworkInner innerObject;

    private final com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Scope scope() {
        return this.innerModel().scope();
    }

    public ConnectivityCollection connectivity() {
        return this.innerModel().connectivity();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public ManagedNetworkInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.managednetwork.ManagedNetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String managedNetworkName;

    private ManagedNetworkUpdate updateParameters;

    public ManagedNetworkImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public ManagedNetwork create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworks()
                .createOrUpdateWithResponse(resourceGroupName, managedNetworkName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public ManagedNetwork create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworks()
                .createOrUpdateWithResponse(resourceGroupName, managedNetworkName, this.innerModel(), context)
                .getValue();
        return this;
    }

    ManagedNetworkImpl(String name, com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerObject = new ManagedNetworkInner();
        this.serviceManager = serviceManager;
        this.managedNetworkName = name;
    }

    public ManagedNetworkImpl update() {
        this.updateParameters = new ManagedNetworkUpdate();
        return this;
    }

    public ManagedNetwork apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworks()
                .update(resourceGroupName, managedNetworkName, updateParameters, Context.NONE);
        return this;
    }

    public ManagedNetwork apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworks()
                .update(resourceGroupName, managedNetworkName, updateParameters, context);
        return this;
    }

    ManagedNetworkImpl(
        ManagedNetworkInner innerObject,
        com.azure.resourcemanager.managednetwork.ManagedNetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.managedNetworkName = Utils.getValueFromIdByName(innerObject.id(), "managedNetworks");
    }

    public ManagedNetwork refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworks()
                .getByResourceGroupWithResponse(resourceGroupName, managedNetworkName, Context.NONE)
                .getValue();
        return this;
    }

    public ManagedNetwork refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getManagedNetworks()
                .getByResourceGroupWithResponse(resourceGroupName, managedNetworkName, context)
                .getValue();
        return this;
    }

    public ManagedNetworkImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public ManagedNetworkImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public ManagedNetworkImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public ManagedNetworkImpl withScope(Scope scope) {
        this.innerModel().withScope(scope);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
