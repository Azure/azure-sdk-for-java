// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.managednetwork.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkGroupInner;
import com.azure.resourcemanager.managednetwork.fluent.models.ManagedNetworkPeeringPolicyInner;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The collection of Connectivity related groups and policies within the Managed Network. */
@Immutable
public final class ConnectivityCollection {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConnectivityCollection.class);

    /*
     * The collection of connectivity related Managed Network Groups within the
     * Managed Network
     */
    @JsonProperty(value = "groups", access = JsonProperty.Access.WRITE_ONLY)
    private List<ManagedNetworkGroupInner> groups;

    /*
     * The collection of Managed Network Peering Policies within the Managed
     * Network
     */
    @JsonProperty(value = "peerings", access = JsonProperty.Access.WRITE_ONLY)
    private List<ManagedNetworkPeeringPolicyInner> peerings;

    /**
     * Get the groups property: The collection of connectivity related Managed Network Groups within the Managed
     * Network.
     *
     * @return the groups value.
     */
    public List<ManagedNetworkGroupInner> groups() {
        return this.groups;
    }

    /**
     * Get the peerings property: The collection of Managed Network Peering Policies within the Managed Network.
     *
     * @return the peerings value.
     */
    public List<ManagedNetworkPeeringPolicyInner> peerings() {
        return this.peerings;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (groups() != null) {
            groups().forEach(e -> e.validate());
        }
        if (peerings() != null) {
            peerings().forEach(e -> e.validate());
        }
    }
}
