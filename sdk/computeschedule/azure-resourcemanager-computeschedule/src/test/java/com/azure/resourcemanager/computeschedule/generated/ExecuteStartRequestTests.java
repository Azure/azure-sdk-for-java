// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ExecuteStartRequest;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.Resources;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ExecuteStartRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteStartRequest model = BinaryData.fromString(
            "{\"executionParameters\":{\"optimizationPreference\":\"Cost\",\"retryPolicy\":{\"retryCount\":2117023774,\"retryWindowInMinutes\":1003107077}},\"resources\":{\"ids\":[\"dhkrwpdappdsbdk\",\"wrwjfeu\"]},\"correlationid\":\"nhutjeltmrldhugj\"}")
            .toObject(ExecuteStartRequest.class);
        Assertions.assertEquals(OptimizationPreference.COST, model.executionParameters().optimizationPreference());
        Assertions.assertEquals(2117023774, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1003107077, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("dhkrwpdappdsbdk", model.resources().ids().get(0));
        Assertions.assertEquals("nhutjeltmrldhugj", model.correlationid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteStartRequest model = new ExecuteStartRequest()
            .withExecutionParameters(new ExecutionParameters().withOptimizationPreference(OptimizationPreference.COST)
                .withRetryPolicy(new RetryPolicy().withRetryCount(2117023774).withRetryWindowInMinutes(1003107077)))
            .withResources(new Resources().withIds(Arrays.asList("dhkrwpdappdsbdk", "wrwjfeu")))
            .withCorrelationid("nhutjeltmrldhugj");
        model = BinaryData.fromObject(model).toObject(ExecuteStartRequest.class);
        Assertions.assertEquals(OptimizationPreference.COST, model.executionParameters().optimizationPreference());
        Assertions.assertEquals(2117023774, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1003107077, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("dhkrwpdappdsbdk", model.resources().ids().get(0));
        Assertions.assertEquals("nhutjeltmrldhugj", model.correlationid());
    }
}
