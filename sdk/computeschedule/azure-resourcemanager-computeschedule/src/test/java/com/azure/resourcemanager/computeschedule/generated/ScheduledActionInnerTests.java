// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.fluent.models.ScheduledActionInner;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationProperties;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionProperties;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionsSchedule;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledActionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledActionInner model = BinaryData.fromString(
            "{\"properties\":{\"resourceType\":\"VirtualMachineScaleSet\",\"actionType\":\"Hibernate\",\"startTime\":\"2021-07-24T04:16:49Z\",\"endTime\":\"2021-06-01T17:59:42Z\",\"schedule\":{\"scheduledTime\":\"fycc\",\"timeZone\":\"newmdwzjeiachbo\",\"requestedWeekDays\":[\"All\",\"Thursday\",\"Friday\"],\"requestedMonths\":[\"May\"],\"requestedDaysOfTheMonth\":[1314309812,1593237527,1917660193],\"executionParameters\":{\"optimizationPreference\":\"CostAvailabilityBalanced\",\"retryPolicy\":{\"retryCount\":1181471279,\"retryWindowInMinutes\":732529011}},\"deadlineType\":\"Unknown\"},\"notificationSettings\":[{\"destination\":\"rimz\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"wjdk\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false},{\"destination\":\"dqxhcrmnohjtckwh\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true}],\"disabled\":false,\"provisioningState\":\"Deleting\"},\"location\":\"xsqwpgrjbznorc\",\"tags\":{\"xqabnmocpcysh\":\"snb\"},\"id\":\"rzafbljjgpbtoqcj\",\"name\":\"klj\",\"type\":\"vbqid\"}")
            .toObject(ScheduledActionInner.class);
        Assertions.assertEquals("xsqwpgrjbznorc", model.location());
        Assertions.assertEquals("snb", model.tags().get("xqabnmocpcysh"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET, model.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.HIBERNATE, model.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T04:16:49Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-01T17:59:42Z"), model.properties().endTime());
        Assertions.assertEquals("fycc", model.properties().schedule().scheduledTime());
        Assertions.assertEquals("newmdwzjeiachbo", model.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.ALL, model.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.MAY, model.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(1314309812, model.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            model.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(1181471279,
            model.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(732529011,
            model.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.UNKNOWN, model.properties().schedule().deadlineType());
        Assertions.assertEquals("rimz", model.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, model.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, model.properties().notificationSettings().get(0).language());
        Assertions.assertTrue(model.properties().notificationSettings().get(0).disabled());
        Assertions.assertFalse(model.properties().disabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledActionInner model
            = new ScheduledActionInner().withLocation("xsqwpgrjbznorc")
                .withTags(mapOf("xqabnmocpcysh", "snb"))
                .withProperties(
                    new ScheduledActionProperties().withResourceType(ResourceType.VIRTUAL_MACHINE_SCALE_SET)
                        .withActionType(ScheduledActionType.HIBERNATE)
                        .withStartTime(OffsetDateTime.parse("2021-07-24T04:16:49Z"))
                        .withEndTime(OffsetDateTime.parse("2021-06-01T17:59:42Z"))
                        .withSchedule(
                            new ScheduledActionsSchedule().withScheduledTime("fycc")
                                .withTimeZone("newmdwzjeiachbo")
                                .withRequestedWeekDays(Arrays.asList(WeekDay.ALL, WeekDay.THURSDAY, WeekDay.FRIDAY))
                                .withRequestedMonths(Arrays.asList(Month.MAY))
                                .withRequestedDaysOfTheMonth(Arrays.asList(1314309812, 1593237527, 1917660193))
                                .withExecutionParameters(new ExecutionParameters()
                                    .withOptimizationPreference(OptimizationPreference.COST_AVAILABILITY_BALANCED)
                                    .withRetryPolicy(new RetryPolicy().withRetryCount(1181471279)
                                        .withRetryWindowInMinutes(732529011)))
                                .withDeadlineType(DeadlineType.UNKNOWN))
                        .withNotificationSettings(Arrays.asList(
                            new NotificationProperties().withDestination("rimz")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true),
                            new NotificationProperties().withDestination("wjdk")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(false),
                            new NotificationProperties().withDestination("dqxhcrmnohjtckwh")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true)))
                        .withDisabled(false));
        model = BinaryData.fromObject(model).toObject(ScheduledActionInner.class);
        Assertions.assertEquals("xsqwpgrjbznorc", model.location());
        Assertions.assertEquals("snb", model.tags().get("xqabnmocpcysh"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET, model.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.HIBERNATE, model.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-24T04:16:49Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-01T17:59:42Z"), model.properties().endTime());
        Assertions.assertEquals("fycc", model.properties().schedule().scheduledTime());
        Assertions.assertEquals("newmdwzjeiachbo", model.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.ALL, model.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.MAY, model.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(1314309812, model.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            model.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(1181471279,
            model.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(732529011,
            model.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.UNKNOWN, model.properties().schedule().deadlineType());
        Assertions.assertEquals("rimz", model.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, model.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, model.properties().notificationSettings().get(0).language());
        Assertions.assertTrue(model.properties().notificationSettings().get(0).disabled());
        Assertions.assertFalse(model.properties().disabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
