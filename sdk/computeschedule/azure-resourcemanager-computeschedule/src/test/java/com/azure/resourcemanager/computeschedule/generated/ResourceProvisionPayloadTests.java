// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisionPayload;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ResourceProvisionPayloadTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ResourceProvisionPayload model = BinaryData.fromString(
            "{\"baseProfile\":{},\"resourceOverrides\":[{},{}],\"resourceCount\":1946901948,\"resourcePrefix\":\"iwpwcuk\"}")
            .toObject(ResourceProvisionPayload.class);
        Assertions.assertEquals(1946901948, model.resourceCount());
        Assertions.assertEquals("iwpwcuk", model.resourcePrefix());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ResourceProvisionPayload model = new ResourceProvisionPayload().withBaseProfile(mapOf())
            .withResourceOverrides(Arrays.asList(mapOf(), mapOf()))
            .withResourceCount(1946901948)
            .withResourcePrefix("iwpwcuk");
        model = BinaryData.fromObject(model).toObject(ResourceProvisionPayload.class);
        Assertions.assertEquals(1946901948, model.resourceCount());
        Assertions.assertEquals("iwpwcuk", model.resourcePrefix());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
