// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationProperties;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.ScheduledAction;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionProperties;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionsSchedule;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceType\":\"VirtualMachine\",\"actionType\":\"Deallocate\",\"startTime\":\"2021-09-23T16:40:17Z\",\"endTime\":\"2021-05-16T03:51:54Z\",\"schedule\":{\"scheduledTime\":\"usdsttwv\",\"timeZone\":\"gvbbejdcng\",\"requestedWeekDays\":[\"Monday\"],\"requestedMonths\":[\"February\",\"January\"],\"requestedDaysOfTheMonth\":[840228808,386350287,127978460],\"executionParameters\":{\"optimizationPreference\":\"Cost\",\"retryPolicy\":{\"retryCount\":1964426059,\"retryWindowInMinutes\":632499232}},\"deadlineType\":\"InitiateAt\"},\"notificationSettings\":[{\"destination\":\"enuuzkopbm\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"woyuhhziuief\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false}],\"disabled\":true,\"provisioningState\":\"Succeeded\"},\"location\":\"zqhof\",\"tags\":{\"u\":\"ae\",\"icslfaoq\":\"ah\",\"kaivwit\":\"piyylhalnswhccsp\",\"bwemhairs\":\"scywuggwoluhc\"},\"id\":\"rgzdwmsweyp\",\"name\":\"w\",\"type\":\"xggicccnxqhuexmk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScheduledAction response
            = manager.scheduledActions()
                .define("dmovsm")
                .withRegion("oamciodh")
                .withExistingResourceGroup("u")
                .withTags(mapOf("gokdwbwhks", "zxkhnzbonlwnto", "qgsfraoyzkoow", "zcmrvexztvb", "aldsy", "lmnguxaw",
                    "znkbykutwpfhpagm", "uximerqfobw"))
                .withProperties(
                    new ScheduledActionProperties().withResourceType(ResourceType.VIRTUAL_MACHINE)
                        .withActionType(ScheduledActionType.HIBERNATE)
                        .withStartTime(OffsetDateTime.parse("2021-04-25T07:43:26Z"))
                        .withEndTime(OffsetDateTime.parse("2021-07-14T09:12:45Z"))
                        .withSchedule(new ScheduledActionsSchedule().withScheduledTime("q")
                            .withTimeZone("efkifr")
                            .withRequestedWeekDays(Arrays.asList(WeekDay.SUNDAY, WeekDay.MONDAY))
                            .withRequestedMonths(Arrays.asList(Month.APRIL, Month.AUGUST, Month.OCTOBER))
                            .withRequestedDaysOfTheMonth(Arrays.asList(1383309544, 829159187))
                            .withExecutionParameters(
                                new ExecutionParameters().withOptimizationPreference(OptimizationPreference.COST)
                                    .withRetryPolicy(new RetryPolicy().withRetryCount(1252448159)
                                        .withRetryWindowInMinutes(1601819937)))
                            .withDeadlineType(DeadlineType.INITIATE_AT))
                        .withNotificationSettings(Arrays.asList(
                            new NotificationProperties().withDestination("bjcntujitc")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true),
                            new NotificationProperties().withDestination("wwa")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true),
                            new NotificationProperties().withDestination("v")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true),
                            new NotificationProperties().withDestination("oqouicybxarzgszu")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true)))
                        .withDisabled(true))
                .create();

        Assertions.assertEquals("zqhof", response.location());
        Assertions.assertEquals("ae", response.tags().get("u"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE, response.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.DEALLOCATE, response.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-23T16:40:17Z"), response.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-16T03:51:54Z"), response.properties().endTime());
        Assertions.assertEquals("usdsttwv", response.properties().schedule().scheduledTime());
        Assertions.assertEquals("gvbbejdcng", response.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.MONDAY, response.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.FEBRUARY, response.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(840228808, response.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST,
            response.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(1964426059,
            response.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(632499232,
            response.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.INITIATE_AT, response.properties().schedule().deadlineType());
        Assertions.assertEquals("enuuzkopbm", response.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, response.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, response.properties().notificationSettings().get(0).language());
        Assertions.assertTrue(response.properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(response.properties().disabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
