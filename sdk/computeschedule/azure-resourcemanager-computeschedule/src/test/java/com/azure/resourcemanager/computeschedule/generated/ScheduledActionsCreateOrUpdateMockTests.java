// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationProperties;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.ScheduledAction;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionProperties;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionsSchedule;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceType\":\"VirtualMachineScaleSet\",\"actionType\":\"Deallocate\",\"startTime\":\"2021-11-20T10:54Z\",\"endTime\":\"2021-06-19T23:54:32Z\",\"schedule\":{\"scheduledTime\":\"zkoj\",\"timeZone\":\"dcpzfoqo\",\"requestedWeekDays\":[\"Wednesday\"],\"requestedMonths\":[\"December\",\"February\",\"November\"],\"requestedDaysOfTheMonth\":[490438503,1450745635,1685402148],\"executionParameters\":{\"optimizationPreference\":\"CostAvailabilityBalanced\",\"retryPolicy\":{\"retryCount\":122630062,\"retryWindowInMinutes\":95404001}},\"deadlineType\":\"CompleteBy\"},\"notificationSettings\":[{\"destination\":\"doamciodhkha\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false},{\"destination\":\"zbonlwnt\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"dwbwhkszzcmrvexz\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"gsfraoyzkoow\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true}],\"disabled\":true,\"provisioningState\":\"Succeeded\"},\"location\":\"aldsy\",\"tags\":{\"ykutwpf\":\"imerqfobwyznk\",\"sd\":\"pagmhrskdsnf\",\"wpusdsttwvogv\":\"akgtdlmkkzevdlh\",\"qqmoaku\":\"bejdcn\"},\"id\":\"gm\",\"name\":\"zr\",\"type\":\"rdgrtw\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScheduledAction response
            = manager.scheduledActions()
                .define("bqwcsdbnwdcf")
                .withRegion("aeburuvdmo")
                .withExistingResourceGroup("lxorjaltolmncws")
                .withTags(mapOf("tpuqujmq", "zlxwabmqoefkifr"))
                .withProperties(
                    new ScheduledActionProperties().withResourceType(ResourceType.VIRTUAL_MACHINE)
                        .withActionType(ScheduledActionType.DEALLOCATE)
                        .withStartTime(OffsetDateTime.parse("2021-03-16T18:39:38Z"))
                        .withEndTime(OffsetDateTime.parse("2021-05-09T06:54:09Z"))
                        .withSchedule(
                            new ScheduledActionsSchedule().withScheduledTime("uvglsbjjcanvx")
                                .withTimeZone("vtvudutncormr")
                                .withRequestedWeekDays(Arrays.asList(WeekDay.SUNDAY, WeekDay.WEDNESDAY))
                                .withRequestedMonths(Arrays.asList(Month.SEPTEMBER, Month.MARCH))
                                .withRequestedDaysOfTheMonth(Arrays.asList(1697622666, 1395198209, 266812422))
                                .withExecutionParameters(new ExecutionParameters()
                                    .withOptimizationPreference(OptimizationPreference.COST_AVAILABILITY_BALANCED)
                                    .withRetryPolicy(new RetryPolicy().withRetryCount(264333959)
                                        .withRetryWindowInMinutes(1622767746)))
                                .withDeadlineType(DeadlineType.COMPLETE_BY))
                        .withNotificationSettings(Arrays.asList(
                            new NotificationProperties().withDestination("nqvsaznqnto")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true),
                            new NotificationProperties().withDestination("sahmky")
                                .withType(NotificationType.EMAIL)
                                .withLanguage(Language.EN_US)
                                .withDisabled(true)))
                        .withDisabled(true))
                .create();

        Assertions.assertEquals("aldsy", response.location());
        Assertions.assertEquals("imerqfobwyznk", response.tags().get("ykutwpf"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET, response.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.DEALLOCATE, response.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-20T10:54Z"), response.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-19T23:54:32Z"), response.properties().endTime());
        Assertions.assertEquals("zkoj", response.properties().schedule().scheduledTime());
        Assertions.assertEquals("dcpzfoqo", response.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.WEDNESDAY, response.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.DECEMBER, response.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(490438503, response.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            response.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(122630062,
            response.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(95404001,
            response.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.COMPLETE_BY, response.properties().schedule().deadlineType());
        Assertions.assertEquals("doamciodhkha", response.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, response.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, response.properties().notificationSettings().get(0).language());
        Assertions.assertFalse(response.properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(response.properties().disabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
