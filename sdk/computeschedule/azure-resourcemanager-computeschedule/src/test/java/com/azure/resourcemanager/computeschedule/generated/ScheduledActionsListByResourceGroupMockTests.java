// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.ActionType;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.ScheduledAction;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceType\":\"VirtualMachineScaleSet\",\"actionType\":\"Hibernate\",\"startTime\":\"2021-04-04T17:01:54Z\",\"endTime\":\"2021-09-24T10:53:38Z\",\"schedule\":{\"scheduledTime\":\"qfqvmkc\",\"timeZone\":\"oz\",\"requestedWeekDays\":[\"Sunday\",\"Friday\",\"Sunday\"],\"requestedMonths\":[\"December\",\"November\",\"March\",\"May\"],\"requestedDaysOfTheMonth\":[748824826],\"executionParameters\":{\"optimizationPreference\":\"Availability\",\"retryPolicy\":{\"retryCount\":1586709440,\"retryWindowInMinutes\":543994808}},\"deadlineType\":\"Unknown\"},\"notificationSettings\":[{\"destination\":\"jrjxgciqibrhosx\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"zoymibmrqyibahw\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"dtmhrkwofyyvoqa\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"pbtg\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false}],\"disabled\":false,\"provisioningState\":\"Failed\"},\"location\":\"hrtdtk\",\"tags\":{\"aasipqi\":\"xwbpokulpiuj\",\"erpqlpqwcciuqg\":\"obyu\",\"hykojoxafnndlpic\":\"dbutauvfbtkuwhh\"},\"id\":\"koymkcd\",\"name\":\"h\",\"type\":\"pkkpw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ScheduledAction> response
            = manager.scheduledActions().listByResourceGroup("gkopkwhojvpajqgx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hrtdtk", response.iterator().next().location());
        Assertions.assertEquals("xwbpokulpiuj", response.iterator().next().tags().get("aasipqi"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET,
            response.iterator().next().properties().resourceType());
        Assertions.assertEquals(ActionType.HIBERNATE, response.iterator().next().properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-04T17:01:54Z"),
            response.iterator().next().properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-24T10:53:38Z"),
            response.iterator().next().properties().endTime());
        Assertions.assertEquals("qfqvmkc", response.iterator().next().properties().schedule().scheduledTime());
        Assertions.assertEquals("oz", response.iterator().next().properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.SUNDAY,
            response.iterator().next().properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.DECEMBER,
            response.iterator().next().properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(748824826,
            response.iterator().next().properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            response.iterator().next().properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(1586709440,
            response.iterator().next().properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(543994808,
            response.iterator()
                .next()
                .properties()
                .schedule()
                .executionParameters()
                .retryPolicy()
                .retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.UNKNOWN,
            response.iterator().next().properties().schedule().deadlineType());
        Assertions.assertEquals("jrjxgciqibrhosx",
            response.iterator().next().properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL,
            response.iterator().next().properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US,
            response.iterator().next().properties().notificationSettings().get(0).language());
        Assertions.assertTrue(response.iterator().next().properties().notificationSettings().get(0).disabled());
        Assertions.assertFalse(response.iterator().next().properties().disabled());
    }
}
