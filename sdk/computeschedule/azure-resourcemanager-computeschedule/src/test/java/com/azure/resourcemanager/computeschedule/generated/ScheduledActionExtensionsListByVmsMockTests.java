// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.ActionType;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionResources;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionExtensionsListByVmsMockTests {
    @Test
    public void testListByVms() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceType\":\"VirtualMachine\",\"actionType\":\"Hibernate\",\"startTime\":\"2021-08-21T07:56:19Z\",\"endTime\":\"2021-11-09T10:18:50Z\",\"schedule\":{\"scheduledTime\":\"yuhhziu\",\"timeZone\":\"efozbhdms\",\"requestedWeekDays\":[\"Sunday\"],\"requestedMonths\":[\"All\",\"April\"],\"requestedDaysOfTheMonth\":[280296096,1916559931,1411362875],\"executionParameters\":{\"optimizationPreference\":\"Availability\",\"retryPolicy\":{\"retryCount\":2084931512,\"retryWindowInMinutes\":674060065}},\"deadlineType\":\"Unknown\"},\"notificationSettings\":[{\"destination\":\"slfaoqzpiyyl\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"whccs\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"vwitqscyw\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"luhczbw\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false}],\"disabled\":false,\"provisioningState\":\"Canceled\"},\"id\":\"z\",\"name\":\"wmsweypqwd\",\"type\":\"ggicccnxqhue\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ScheduledActionResources> response
            = manager.scheduledActionExtensions().listByVms("enuuzkopbm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE, response.iterator().next().properties().resourceType());
        Assertions.assertEquals(ActionType.HIBERNATE, response.iterator().next().properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-21T07:56:19Z"),
            response.iterator().next().properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-09T10:18:50Z"),
            response.iterator().next().properties().endTime());
        Assertions.assertEquals("yuhhziu", response.iterator().next().properties().schedule().scheduledTime());
        Assertions.assertEquals("efozbhdms", response.iterator().next().properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.SUNDAY,
            response.iterator().next().properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.ALL, response.iterator().next().properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(280296096,
            response.iterator().next().properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            response.iterator().next().properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(2084931512,
            response.iterator().next().properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(674060065,
            response.iterator()
                .next()
                .properties()
                .schedule()
                .executionParameters()
                .retryPolicy()
                .retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.UNKNOWN,
            response.iterator().next().properties().schedule().deadlineType());
        Assertions.assertEquals("slfaoqzpiyyl",
            response.iterator().next().properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL,
            response.iterator().next().properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US,
            response.iterator().next().properties().notificationSettings().get(0).language());
        Assertions.assertTrue(response.iterator().next().properties().notificationSettings().get(0).disabled());
        Assertions.assertFalse(response.iterator().next().properties().disabled());
    }
}
