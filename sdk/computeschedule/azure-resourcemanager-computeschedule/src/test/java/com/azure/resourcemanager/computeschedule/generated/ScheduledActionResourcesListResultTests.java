// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.implementation.models.ScheduledActionResourcesListResult;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ScheduledActionResourcesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledActionResourcesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"resourceType\":\"VirtualMachine\",\"actionType\":\"Hibernate\",\"startTime\":\"2020-12-28T00:18:51Z\",\"endTime\":\"2021-09-16T11:30:17Z\",\"schedule\":{\"scheduledTime\":\"ytxhp\",\"timeZone\":\"xbzpfzab\",\"requestedWeekDays\":[\"Tuesday\",\"All\",\"Tuesday\",\"All\"],\"requestedMonths\":[\"October\",\"July\"],\"requestedDaysOfTheMonth\":[1557005906],\"executionParameters\":{\"optimizationPreference\":\"Cost\",\"retryPolicy\":{}},\"deadlineType\":\"Unknown\"},\"notificationSettings\":[{\"destination\":\"vplwzbhv\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"osvmk\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false}],\"disabled\":false,\"provisioningState\":\"Succeeded\",\"resourceNotificationSettings\":[{\"destination\":\"gmgsxnkjzkde\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false}]},\"id\":\"pwiyig\",\"name\":\"xpkd\",\"type\":\"zb\"}],\"nextLink\":\"uebbaumnyqup\"}")
            .toObject(ScheduledActionResourcesListResult.class);
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE, model.value().get(0).properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.HIBERNATE, model.value().get(0).properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-28T00:18:51Z"),
            model.value().get(0).properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-16T11:30:17Z"),
            model.value().get(0).properties().endTime());
        Assertions.assertEquals("ytxhp", model.value().get(0).properties().schedule().scheduledTime());
        Assertions.assertEquals("xbzpfzab", model.value().get(0).properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.TUESDAY,
            model.value().get(0).properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.OCTOBER, model.value().get(0).properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(1557005906,
            model.value().get(0).properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST,
            model.value().get(0).properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(DeadlineType.UNKNOWN, model.value().get(0).properties().schedule().deadlineType());
        Assertions.assertEquals("vplwzbhv",
            model.value().get(0).properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL,
            model.value().get(0).properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US,
            model.value().get(0).properties().notificationSettings().get(0).language());
        Assertions.assertTrue(model.value().get(0).properties().notificationSettings().get(0).disabled());
        Assertions.assertFalse(model.value().get(0).properties().disabled());
        Assertions.assertEquals("uebbaumnyqup", model.nextLink());
    }
}
