// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationProperties;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionUpdate;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionUpdateProperties;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionsSchedule;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScheduledActionUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScheduledActionUpdate model = BinaryData.fromString(
            "{\"tags\":{\"ctbzaq\":\"lovmclwhijcoe\",\"dkexxppofm\":\"qsycbkbfkgu\",\"vpmouexhdzxib\":\"axcfjpgddtocjjx\",\"wndeicbtwnp\":\"eojnxqbzvddn\"},\"properties\":{\"resourceType\":\"VirtualMachineScaleSet\",\"actionType\":\"Start\",\"startTime\":\"2021-09-17T10:09:05Z\",\"endTime\":\"2021-02-17T19:22:59Z\",\"schedule\":{\"scheduledTime\":\"fcyddg\",\"timeZone\":\"mjthjqkwp\",\"requestedWeekDays\":[\"Tuesday\",\"Sunday\",\"Wednesday\",\"Tuesday\"],\"requestedMonths\":[\"April\",\"March\",\"September\",\"October\"],\"requestedDaysOfTheMonth\":[804437183,1200172783],\"executionParameters\":{\"optimizationPreference\":\"Availability\",\"retryPolicy\":{\"retryCount\":950690565,\"retryWindowInMinutes\":374026778}},\"deadlineType\":\"CompleteBy\"},\"notificationSettings\":[{\"destination\":\"bjoghmewuamau\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"vvtpgvdfgio\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false},{\"destination\":\"tqxln\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true}],\"disabled\":true}}")
            .toObject(ScheduledActionUpdate.class);
        Assertions.assertEquals("lovmclwhijcoe", model.tags().get("ctbzaq"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET, model.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.START, model.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-17T10:09:05Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-17T19:22:59Z"), model.properties().endTime());
        Assertions.assertEquals("fcyddg", model.properties().schedule().scheduledTime());
        Assertions.assertEquals("mjthjqkwp", model.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.TUESDAY, model.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.APRIL, model.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(804437183, model.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(950690565,
            model.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(374026778,
            model.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.COMPLETE_BY, model.properties().schedule().deadlineType());
        Assertions.assertEquals("bjoghmewuamau", model.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, model.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, model.properties().notificationSettings().get(0).language());
        Assertions.assertTrue(model.properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(model.properties().disabled());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScheduledActionUpdate model = new ScheduledActionUpdate()
            .withTags(mapOf("ctbzaq", "lovmclwhijcoe", "dkexxppofm", "qsycbkbfkgu", "vpmouexhdzxib", "axcfjpgddtocjjx",
                "wndeicbtwnp", "eojnxqbzvddn"))
            .withProperties(
                new ScheduledActionUpdateProperties().withResourceType(ResourceType.VIRTUAL_MACHINE_SCALE_SET)
                    .withActionType(ScheduledActionType.START)
                    .withStartTime(OffsetDateTime.parse("2021-09-17T10:09:05Z"))
                    .withEndTime(OffsetDateTime.parse("2021-02-17T19:22:59Z"))
                    .withSchedule(new ScheduledActionsSchedule().withScheduledTime("fcyddg")
                        .withTimeZone("mjthjqkwp")
                        .withRequestedWeekDays(
                            Arrays.asList(WeekDay.TUESDAY, WeekDay.SUNDAY, WeekDay.WEDNESDAY, WeekDay.TUESDAY))
                        .withRequestedMonths(Arrays.asList(Month.APRIL, Month.MARCH, Month.SEPTEMBER, Month.OCTOBER))
                        .withRequestedDaysOfTheMonth(Arrays.asList(804437183, 1200172783))
                        .withExecutionParameters(
                            new ExecutionParameters().withOptimizationPreference(OptimizationPreference.AVAILABILITY)
                                .withRetryPolicy(
                                    new RetryPolicy().withRetryCount(950690565).withRetryWindowInMinutes(374026778)))
                        .withDeadlineType(DeadlineType.COMPLETE_BY))
                    .withNotificationSettings(Arrays.asList(
                        new NotificationProperties().withDestination("bjoghmewuamau")
                            .withType(NotificationType.EMAIL)
                            .withLanguage(Language.EN_US)
                            .withDisabled(true),
                        new NotificationProperties().withDestination("vvtpgvdfgio")
                            .withType(NotificationType.EMAIL)
                            .withLanguage(Language.EN_US)
                            .withDisabled(false),
                        new NotificationProperties().withDestination("tqxln")
                            .withType(NotificationType.EMAIL)
                            .withLanguage(Language.EN_US)
                            .withDisabled(true)))
                    .withDisabled(true));
        model = BinaryData.fromObject(model).toObject(ScheduledActionUpdate.class);
        Assertions.assertEquals("lovmclwhijcoe", model.tags().get("ctbzaq"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET, model.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.START, model.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-17T10:09:05Z"), model.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-17T19:22:59Z"), model.properties().endTime());
        Assertions.assertEquals("fcyddg", model.properties().schedule().scheduledTime());
        Assertions.assertEquals("mjthjqkwp", model.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.TUESDAY, model.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.APRIL, model.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(804437183, model.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.AVAILABILITY,
            model.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(950690565,
            model.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(374026778,
            model.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.COMPLETE_BY, model.properties().schedule().deadlineType());
        Assertions.assertEquals("bjoghmewuamau", model.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, model.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, model.properties().notificationSettings().get(0).language());
        Assertions.assertTrue(model.properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(model.properties().disabled());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
