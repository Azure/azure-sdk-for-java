// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.ScheduledAction;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"resourceType\":\"VirtualMachine\",\"actionType\":\"Deallocate\",\"startTime\":\"2021-05-15T23:08:57Z\",\"endTime\":\"2021-05-22T14:25:48Z\",\"schedule\":{\"scheduledTime\":\"vithh\",\"timeZone\":\"zonosgg\",\"requestedWeekDays\":[\"Monday\",\"Wednesday\",\"All\"],\"requestedMonths\":[\"June\",\"October\"],\"requestedDaysOfTheMonth\":[1946798268,201409851],\"executionParameters\":{\"optimizationPreference\":\"Cost\",\"retryPolicy\":{\"retryCount\":391766197,\"retryWindowInMinutes\":1151274297}},\"deadlineType\":\"InitiateAt\"},\"notificationSettings\":[{\"destination\":\"cffgdkzzewk\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false},{\"destination\":\"railvpnppfuf\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false},{\"destination\":\"hdlxyjrxsagafcn\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"apnedgfbcvkc\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true}],\"disabled\":true,\"provisioningState\":\"Canceled\"},\"location\":\"drhvoodsotbo\",\"tags\":{\"d\":\"opcjwvnhd\",\"twuoegrpkhjwni\":\"mgxcxrslpm\",\"ggkzzlvmbmpa\":\"qsluicp\"},\"id\":\"modfvuefywsbpfvm\",\"name\":\"yhrfouyftaakcpw\",\"type\":\"yzvqt\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScheduledAction response = manager.scheduledActions()
            .getByResourceGroupWithResponse("fgohdneuelfphs", "yhtozfikdowwqu", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("drhvoodsotbo", response.location());
        Assertions.assertEquals("opcjwvnhd", response.tags().get("d"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE, response.properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.DEALLOCATE, response.properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-15T23:08:57Z"), response.properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-22T14:25:48Z"), response.properties().endTime());
        Assertions.assertEquals("vithh", response.properties().schedule().scheduledTime());
        Assertions.assertEquals("zonosgg", response.properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.MONDAY, response.properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.JUNE, response.properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(1946798268, response.properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST,
            response.properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(391766197,
            response.properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1151274297,
            response.properties().schedule().executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.INITIATE_AT, response.properties().schedule().deadlineType());
        Assertions.assertEquals("cffgdkzzewk", response.properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL, response.properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US, response.properties().notificationSettings().get(0).language());
        Assertions.assertFalse(response.properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(response.properties().disabled());
    }
}
