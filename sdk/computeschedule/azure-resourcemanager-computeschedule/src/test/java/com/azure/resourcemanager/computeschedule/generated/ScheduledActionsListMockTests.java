// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.ScheduledAction;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceType\":\"VirtualMachineScaleSet\",\"actionType\":\"Start\",\"startTime\":\"2021-06-20T16:01:18Z\",\"endTime\":\"2021-06-13T11:03:38Z\",\"schedule\":{\"scheduledTime\":\"vq\",\"timeZone\":\"ovljxywsu\",\"requestedWeekDays\":[\"Tuesday\",\"Sunday\",\"Monday\",\"Friday\"],\"requestedMonths\":[\"April\",\"June\",\"December\"],\"requestedDaysOfTheMonth\":[703854152],\"executionParameters\":{\"optimizationPreference\":\"CostAvailabilityBalanced\",\"retryPolicy\":{\"retryCount\":409743205,\"retryWindowInMinutes\":350666785}},\"deadlineType\":\"Unknown\"},\"notificationSettings\":[{\"destination\":\"nzar\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false},{\"destination\":\"uijfqk\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":false}],\"disabled\":true,\"provisioningState\":\"Failed\"},\"location\":\"bjibwwiftohq\",\"tags\":{\"ljphuopxodl\":\"uvksgplsaknynfsy\",\"sjswsrms\":\"iyntorzihle\"},\"id\":\"yzrpzbchckqqzq\",\"name\":\"ox\",\"type\":\"ysuiizynkedya\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ScheduledAction> response = manager.scheduledActions().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bjibwwiftohq", response.iterator().next().location());
        Assertions.assertEquals("uvksgplsaknynfsy", response.iterator().next().tags().get("ljphuopxodl"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE_SCALE_SET,
            response.iterator().next().properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.START, response.iterator().next().properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-20T16:01:18Z"),
            response.iterator().next().properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-13T11:03:38Z"),
            response.iterator().next().properties().endTime());
        Assertions.assertEquals("vq", response.iterator().next().properties().schedule().scheduledTime());
        Assertions.assertEquals("ovljxywsu", response.iterator().next().properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.TUESDAY,
            response.iterator().next().properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.APRIL,
            response.iterator().next().properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(703854152,
            response.iterator().next().properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            response.iterator().next().properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(409743205,
            response.iterator().next().properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(350666785,
            response.iterator()
                .next()
                .properties()
                .schedule()
                .executionParameters()
                .retryPolicy()
                .retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.UNKNOWN,
            response.iterator().next().properties().schedule().deadlineType());
        Assertions.assertEquals("nzar",
            response.iterator().next().properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL,
            response.iterator().next().properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US,
            response.iterator().next().properties().notificationSettings().get(0).language());
        Assertions.assertFalse(response.iterator().next().properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(response.iterator().next().properties().disabled());
    }
}
