// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.computeschedule.ComputeScheduleManager;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.Language;
import com.azure.resourcemanager.computeschedule.models.Month;
import com.azure.resourcemanager.computeschedule.models.NotificationType;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceType;
import com.azure.resourcemanager.computeschedule.models.ScheduledAction;
import com.azure.resourcemanager.computeschedule.models.ScheduledActionType;
import com.azure.resourcemanager.computeschedule.models.WeekDay;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScheduledActionsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"resourceType\":\"VirtualMachine\",\"actionType\":\"Hibernate\",\"startTime\":\"2021-01-14T10:56:19Z\",\"endTime\":\"2021-02-18T00:02:44Z\",\"schedule\":{\"scheduledTime\":\"ljphuopxodl\",\"timeZone\":\"iyntorzihle\",\"requestedWeekDays\":[\"Friday\",\"Wednesday\"],\"requestedMonths\":[\"October\"],\"requestedDaysOfTheMonth\":[1899163147,1407927145,2109654936,1609130326],\"executionParameters\":{\"optimizationPreference\":\"Cost\",\"retryPolicy\":{\"retryCount\":215958915,\"retryWindowInMinutes\":1371610491}},\"deadlineType\":\"Unknown\"},\"notificationSettings\":[{\"destination\":\"zqioxiysuii\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"dy\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"hqmibzyhwit\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true},{\"destination\":\"ynpcdpumnzgmwznm\",\"type\":\"Email\",\"language\":\"en-us\",\"disabled\":true}],\"disabled\":true,\"provisioningState\":\"Succeeded\"},\"location\":\"hxbld\",\"tags\":{\"vokotllxdyh\":\"wrlkdmtn\",\"oocrkvcikhnv\":\"syocogjltdtbnnha\",\"gxk\":\"amqgxqquezikyw\"},\"id\":\"lla\",\"name\":\"melwuipiccjz\",\"type\":\"z\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ComputeScheduleManager manager = ComputeScheduleManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<ScheduledAction> response = manager.scheduledActions().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hxbld", response.iterator().next().location());
        Assertions.assertEquals("wrlkdmtn", response.iterator().next().tags().get("vokotllxdyh"));
        Assertions.assertEquals(ResourceType.VIRTUAL_MACHINE, response.iterator().next().properties().resourceType());
        Assertions.assertEquals(ScheduledActionType.HIBERNATE, response.iterator().next().properties().actionType());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-14T10:56:19Z"),
            response.iterator().next().properties().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-18T00:02:44Z"),
            response.iterator().next().properties().endTime());
        Assertions.assertEquals("ljphuopxodl", response.iterator().next().properties().schedule().scheduledTime());
        Assertions.assertEquals("iyntorzihle", response.iterator().next().properties().schedule().timeZone());
        Assertions.assertEquals(WeekDay.FRIDAY,
            response.iterator().next().properties().schedule().requestedWeekDays().get(0));
        Assertions.assertEquals(Month.OCTOBER,
            response.iterator().next().properties().schedule().requestedMonths().get(0));
        Assertions.assertEquals(1899163147,
            response.iterator().next().properties().schedule().requestedDaysOfTheMonth().get(0));
        Assertions.assertEquals(OptimizationPreference.COST,
            response.iterator().next().properties().schedule().executionParameters().optimizationPreference());
        Assertions.assertEquals(215958915,
            response.iterator().next().properties().schedule().executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1371610491,
            response.iterator()
                .next()
                .properties()
                .schedule()
                .executionParameters()
                .retryPolicy()
                .retryWindowInMinutes());
        Assertions.assertEquals(DeadlineType.UNKNOWN,
            response.iterator().next().properties().schedule().deadlineType());
        Assertions.assertEquals("zqioxiysuii",
            response.iterator().next().properties().notificationSettings().get(0).destination());
        Assertions.assertEquals(NotificationType.EMAIL,
            response.iterator().next().properties().notificationSettings().get(0).type());
        Assertions.assertEquals(Language.EN_US,
            response.iterator().next().properties().notificationSettings().get(0).language());
        Assertions.assertTrue(response.iterator().next().properties().notificationSettings().get(0).disabled());
        Assertions.assertTrue(response.iterator().next().properties().disabled());
    }
}
