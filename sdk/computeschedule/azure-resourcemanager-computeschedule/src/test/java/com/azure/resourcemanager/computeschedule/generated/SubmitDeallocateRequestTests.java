// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.DeadlineType;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.Resources;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import com.azure.resourcemanager.computeschedule.models.Schedule;
import com.azure.resourcemanager.computeschedule.models.SubmitDeallocateRequest;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubmitDeallocateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubmitDeallocateRequest model = BinaryData.fromString(
            "{\"schedule\":{\"deadline\":\"2021-09-06T02:12:49Z\",\"deadLine\":\"2021-12-03T06:58:55Z\",\"timezone\":\"zvgnwzs\",\"timeZone\":\"glzufc\",\"deadlineType\":\"CompleteBy\"},\"executionParameters\":{\"optimizationPreference\":\"CostAvailabilityBalanced\",\"retryPolicy\":{\"retryCount\":1757371466,\"retryWindowInMinutes\":1730607260}},\"resources\":{\"ids\":[\"nufhf\",\"bj\",\"s\",\"git\"]},\"correlationid\":\"xqhabi\"}")
            .toObject(SubmitDeallocateRequest.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-06T02:12:49Z"), model.schedule().deadline());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T06:58:55Z"), model.schedule().deadLine());
        Assertions.assertEquals("zvgnwzs", model.schedule().timezone());
        Assertions.assertEquals("glzufc", model.schedule().timeZone());
        Assertions.assertEquals(DeadlineType.COMPLETE_BY, model.schedule().deadlineType());
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(1757371466, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1730607260, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("nufhf", model.resources().ids().get(0));
        Assertions.assertEquals("xqhabi", model.correlationid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubmitDeallocateRequest model = new SubmitDeallocateRequest()
            .withSchedule(new Schedule().withDeadline(OffsetDateTime.parse("2021-09-06T02:12:49Z"))
                .withDeadLine(OffsetDateTime.parse("2021-12-03T06:58:55Z"))
                .withTimezone("zvgnwzs")
                .withTimeZone("glzufc")
                .withDeadlineType(DeadlineType.COMPLETE_BY))
            .withExecutionParameters(
                new ExecutionParameters().withOptimizationPreference(OptimizationPreference.COST_AVAILABILITY_BALANCED)
                    .withRetryPolicy(new RetryPolicy().withRetryCount(1757371466).withRetryWindowInMinutes(1730607260)))
            .withResources(new Resources().withIds(Arrays.asList("nufhf", "bj", "s", "git")))
            .withCorrelationid("xqhabi");
        model = BinaryData.fromObject(model).toObject(SubmitDeallocateRequest.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-06T02:12:49Z"), model.schedule().deadline());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-03T06:58:55Z"), model.schedule().deadLine());
        Assertions.assertEquals("zvgnwzs", model.schedule().timezone());
        Assertions.assertEquals("glzufc", model.schedule().timeZone());
        Assertions.assertEquals(DeadlineType.COMPLETE_BY, model.schedule().deadlineType());
        Assertions.assertEquals(OptimizationPreference.COST_AVAILABILITY_BALANCED,
            model.executionParameters().optimizationPreference());
        Assertions.assertEquals(1757371466, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1730607260, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("nufhf", model.resources().ids().get(0));
        Assertions.assertEquals("xqhabi", model.correlationid());
    }
}
