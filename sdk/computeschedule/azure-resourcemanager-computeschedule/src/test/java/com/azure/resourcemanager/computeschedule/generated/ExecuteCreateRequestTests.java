// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ExecuteCreateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.OptimizationPreference;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisionPayload;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ExecuteCreateRequestTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ExecuteCreateRequest model = BinaryData.fromString(
            "{\"resourceConfigParameters\":{\"baseProfile\":{},\"resourceOverrides\":[{},{},{}],\"resourceCount\":488407258,\"resourcePrefix\":\"dgeablgphu\"},\"executionParameters\":{\"optimizationPreference\":\"Cost\",\"retryPolicy\":{\"retryCount\":1906017395,\"retryWindowInMinutes\":1237091800}},\"correlationid\":\"zwyiftyhxhur\"}")
            .toObject(ExecuteCreateRequest.class);
        Assertions.assertEquals(488407258, model.resourceConfigParameters().resourceCount());
        Assertions.assertEquals("dgeablgphu", model.resourceConfigParameters().resourcePrefix());
        Assertions.assertEquals(OptimizationPreference.COST, model.executionParameters().optimizationPreference());
        Assertions.assertEquals(1906017395, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1237091800, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("zwyiftyhxhur", model.correlationid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ExecuteCreateRequest model = new ExecuteCreateRequest()
            .withResourceConfigParameters(new ResourceProvisionPayload().withBaseProfile(mapOf())
                .withResourceOverrides(Arrays.asList(mapOf(), mapOf(), mapOf()))
                .withResourceCount(488407258)
                .withResourcePrefix("dgeablgphu"))
            .withExecutionParameters(new ExecutionParameters().withOptimizationPreference(OptimizationPreference.COST)
                .withRetryPolicy(new RetryPolicy().withRetryCount(1906017395).withRetryWindowInMinutes(1237091800)))
            .withCorrelationid("zwyiftyhxhur");
        model = BinaryData.fromObject(model).toObject(ExecuteCreateRequest.class);
        Assertions.assertEquals(488407258, model.resourceConfigParameters().resourceCount());
        Assertions.assertEquals("dgeablgphu", model.resourceConfigParameters().resourcePrefix());
        Assertions.assertEquals(OptimizationPreference.COST, model.executionParameters().optimizationPreference());
        Assertions.assertEquals(1906017395, model.executionParameters().retryPolicy().retryCount());
        Assertions.assertEquals(1237091800, model.executionParameters().retryPolicy().retryWindowInMinutes());
        Assertions.assertEquals("zwyiftyhxhur", model.correlationid());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
