// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.computeschedule.models.ExecuteCreateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecutionParameters;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisionPayload;
import com.azure.resourcemanager.computeschedule.models.RetryPolicy;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for ScheduledActions VirtualMachinesExecuteCreate.
 */
public final class ScheduledActionsVirtualMachinesExecuteCreateSamples {
    /*
     * x-ms-original-file: 2025-05-01/ScheduledActions_VirtualMachinesExecuteCreate_MaximumSet_Gen.json
     */
    /**
     * Sample code: ScheduledActions_VirtualMachinesExecuteCreate_MaximumSet_Gen - generated by [MaximumSet] rule.
     * 
     * @param manager Entry point to ComputeScheduleManager.
     */
    public static void scheduledActionsVirtualMachinesExecuteCreateMaximumSetGenGeneratedByMaximumSetRule(
        com.azure.resourcemanager.computeschedule.ComputeScheduleManager manager) {
        manager.scheduledActions()
            .virtualMachinesExecuteCreateWithResponse("oslhbouzgevzpeydssyelhw", new ExecuteCreateRequest()
                .withResourceConfigParameters(new ResourceProvisionPayload().withBaseProfile(mapOf("hardwareProfile",
                    BinaryData.fromBytes("{name=F1}".getBytes(StandardCharsets.UTF_8)), "provisioningState",
                    BinaryData.fromBytes("0".getBytes(StandardCharsets.UTF_8)), "storageProfile",
                    BinaryData.fromBytes("{osDisk={osType=0}}".getBytes(StandardCharsets.UTF_8)), "vmExtensions",
                    BinaryData.fromBytes(
                        "[{autoUpgradeMinorVersion=true, protectedSettings=SomeDecryptedSecretValue, provisioningState=0, enableAutomaticUpgrade=true, publisher=Microsoft.Azure.Monitor, type=AzureMonitorLinuxAgent, typeHandlerVersion=1.0}, {name=myExtensionName}]"
                            .getBytes(StandardCharsets.UTF_8)),
                    "resourcegroupName",
                    BinaryData.fromBytes("RG5ABF491C-3164-42A6-8CB5-BF3CB53B018B".getBytes(StandardCharsets.UTF_8)),
                    "computeApiVersion", BinaryData.fromBytes("2024-07-01".getBytes(StandardCharsets.UTF_8))))
                    .withResourceOverrides(Arrays.asList(mapOf("name",
                        BinaryData.fromBytes("myFleet_523".getBytes(StandardCharsets.UTF_8)), "location",
                        BinaryData.fromBytes("LocalDev".getBytes(StandardCharsets.UTF_8)), "properties",
                        BinaryData.fromBytes(
                            "{hardwareProfile={vmSize=Standard_F1s}, provisioningState=0, osProfile={computerName=myFleet000000, adminUsername=adminUser, windowsConfiguration={additionalUnattendContent=[{passName=someValue, content=}, {passName=someOtherValue, content=SomeDecryptedSecretValue}]}, adminPassword=SomeDecryptedSecretValue}, priority=0}"
                                .getBytes(StandardCharsets.UTF_8)),
                        "zones", BinaryData.fromBytes("[1]".getBytes(StandardCharsets.UTF_8))),
                        mapOf("name", BinaryData.fromBytes("myFleet_524".getBytes(StandardCharsets.UTF_8)), "location",
                            BinaryData.fromBytes("LocalDev".getBytes(StandardCharsets.UTF_8)), "properties",
                            BinaryData.fromBytes(
                                "{hardwareProfile={vmSize=Standard_G1s}, provisioningState=0, osProfile={computerName=myFleet000000, adminUsername=adminUser, windowsConfiguration={additionalUnattendContent=[{passName=someValue, content=}, {passName=someOtherValue, content=SomeDecryptedSecretValue}]}, adminPassword=SomeDecryptedSecretValue}, priority=0}"
                                    .getBytes(StandardCharsets.UTF_8)),
                            "zones", BinaryData.fromBytes("[2]".getBytes(StandardCharsets.UTF_8)))))
                    .withResourceCount(2)
                    .withResourcePrefix("TL1"))
                .withExecutionParameters(new ExecutionParameters()
                    .withRetryPolicy(new RetryPolicy().withRetryCount(5).withRetryWindowInMinutes(40)))
                .withCorrelationid("dfe927c5-16a6-40b7-a0f7-8524975ed642"), com.azure.core.util.Context.NONE);
    }

    /*
     * x-ms-original-file: 2025-05-01/ScheduledActions_VirtualMachinesExecuteCreate_MinimumSet_Gen.json
     */
    /**
     * Sample code: ScheduledActions_VirtualMachinesExecuteCreate_MinimumSet_Gen - generated by [MinimumSet] rule.
     * 
     * @param manager Entry point to ComputeScheduleManager.
     */
    public static void scheduledActionsVirtualMachinesExecuteCreateMinimumSetGenGeneratedByMinimumSetRule(
        com.azure.resourcemanager.computeschedule.ComputeScheduleManager manager) {
        manager.scheduledActions()
            .virtualMachinesExecuteCreateWithResponse("useast", new ExecuteCreateRequest()
                .withResourceConfigParameters(new ResourceProvisionPayload().withBaseProfile(mapOf("hardwareProfile",
                    BinaryData.fromBytes("{name=F1}".getBytes(StandardCharsets.UTF_8)), "provisioningState",
                    BinaryData.fromBytes("0".getBytes(StandardCharsets.UTF_8)), "storageProfile",
                    BinaryData.fromBytes("{osDisk={osType=0}}".getBytes(StandardCharsets.UTF_8)), "vmExtensions",
                    BinaryData.fromBytes(
                        "[{autoUpgradeMinorVersion=true, protectedSettings=SomeDecryptedSecretValue, provisioningState=0, enableAutomaticUpgrade=true, publisher=Microsoft.Azure.Monitor, type=AzureMonitorLinuxAgent, typeHandlerVersion=1.0}, {name=myExtensionName}]"
                            .getBytes(StandardCharsets.UTF_8)),
                    "resourcegroupName",
                    BinaryData.fromBytes("RG5ABF491C-3164-42A6-8CB5-BF3CB53B018B".getBytes(StandardCharsets.UTF_8)),
                    "computeApiVersion", BinaryData.fromBytes("2024-07-01".getBytes(StandardCharsets.UTF_8))))
                    .withResourceOverrides(Arrays.asList(mapOf("name",
                        BinaryData.fromBytes("myFleet_523".getBytes(StandardCharsets.UTF_8)), "location",
                        BinaryData.fromBytes("LocalDev".getBytes(StandardCharsets.UTF_8)), "properties",
                        BinaryData.fromBytes(
                            "{hardwareProfile={vmSize=Standard_F1s}, provisioningState=0, osProfile={computerName=myFleet000000, adminUsername=adminUser, windowsConfiguration={additionalUnattendContent=[{passName=someValue, content=}, {passName=someOtherValue, content=SomeDecryptedSecretValue}]}, adminPassword=SomeDecryptedSecretValue}, priority=0}"
                                .getBytes(StandardCharsets.UTF_8)),
                        "zones", BinaryData.fromBytes("[1]".getBytes(StandardCharsets.UTF_8))),
                        mapOf("name", BinaryData.fromBytes("myFleet_524".getBytes(StandardCharsets.UTF_8)), "location",
                            BinaryData.fromBytes("LocalDev".getBytes(StandardCharsets.UTF_8)), "properties",
                            BinaryData.fromBytes(
                                "{hardwareProfile={vmSize=Standard_G1s}, provisioningState=0, osProfile={computerName=myFleet000000, adminUsername=adminUser, windowsConfiguration={additionalUnattendContent=[{passName=someValue, content=}, {passName=someOtherValue, content=SomeDecryptedSecretValue}]}, adminPassword=SomeDecryptedSecretValue}, priority=0}"
                                    .getBytes(StandardCharsets.UTF_8)),
                            "zones", BinaryData.fromBytes("[2]".getBytes(StandardCharsets.UTF_8)))))
                    .withResourceCount(2))
                .withExecutionParameters(new ExecutionParameters()), com.azure.core.util.Context.NONE);
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
