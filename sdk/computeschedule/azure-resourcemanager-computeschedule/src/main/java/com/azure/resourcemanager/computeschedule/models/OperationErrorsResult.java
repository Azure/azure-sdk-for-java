// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * This is the first level of operation errors from the request when clients get errors per vm operation.
 */
@Immutable
public final class OperationErrorsResult implements JsonSerializable<OperationErrorsResult> {
    /*
     * The operationId identifying a vm operation
     */
    private String operationId;

    /*
     * The creation time of the error result
     */
    private OffsetDateTime creationTime;

    /*
     * The activation time of a vm operation
     */
    private OffsetDateTime activationTime;

    /*
     * The completion time of the operation if the operation was completed
     */
    private OffsetDateTime completedAt;

    /*
     * A list of errors associated with the operationid
     */
    private List<OperationErrorDetails> operationErrors;

    /*
     * Request level error code
     */
    private String requestErrorCode;

    /*
     * Request level error details
     */
    private String requestErrorDetails;

    /**
     * Creates an instance of OperationErrorsResult class.
     */
    private OperationErrorsResult() {
    }

    /**
     * Get the operationId property: The operationId identifying a vm operation.
     * 
     * @return the operationId value.
     */
    public String operationId() {
        return this.operationId;
    }

    /**
     * Get the creationTime property: The creation time of the error result.
     * 
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the activationTime property: The activation time of a vm operation.
     * 
     * @return the activationTime value.
     */
    public OffsetDateTime activationTime() {
        return this.activationTime;
    }

    /**
     * Get the completedAt property: The completion time of the operation if the operation was completed.
     * 
     * @return the completedAt value.
     */
    public OffsetDateTime completedAt() {
        return this.completedAt;
    }

    /**
     * Get the operationErrors property: A list of errors associated with the operationid.
     * 
     * @return the operationErrors value.
     */
    public List<OperationErrorDetails> operationErrors() {
        return this.operationErrors;
    }

    /**
     * Get the requestErrorCode property: Request level error code.
     * 
     * @return the requestErrorCode value.
     */
    public String requestErrorCode() {
        return this.requestErrorCode;
    }

    /**
     * Get the requestErrorDetails property: Request level error details.
     * 
     * @return the requestErrorDetails value.
     */
    public String requestErrorDetails() {
        return this.requestErrorDetails;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationErrors() != null) {
            operationErrors().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("creationTime",
            this.creationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.creationTime));
        jsonWriter.writeStringField("activationTime",
            this.activationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.activationTime));
        jsonWriter.writeStringField("completedAt",
            this.completedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.completedAt));
        jsonWriter.writeArrayField("operationErrors", this.operationErrors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("requestErrorCode", this.requestErrorCode);
        jsonWriter.writeStringField("requestErrorDetails", this.requestErrorDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OperationErrorsResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OperationErrorsResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OperationErrorsResult.
     */
    public static OperationErrorsResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OperationErrorsResult deserializedOperationErrorsResult = new OperationErrorsResult();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    deserializedOperationErrorsResult.operationId = reader.getString();
                } else if ("creationTime".equals(fieldName)) {
                    deserializedOperationErrorsResult.creationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("activationTime".equals(fieldName)) {
                    deserializedOperationErrorsResult.activationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("completedAt".equals(fieldName)) {
                    deserializedOperationErrorsResult.completedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("operationErrors".equals(fieldName)) {
                    List<OperationErrorDetails> operationErrors
                        = reader.readArray(reader1 -> OperationErrorDetails.fromJson(reader1));
                    deserializedOperationErrorsResult.operationErrors = operationErrors;
                } else if ("requestErrorCode".equals(fieldName)) {
                    deserializedOperationErrorsResult.requestErrorCode = reader.getString();
                } else if ("requestErrorDetails".equals(fieldName)) {
                    deserializedOperationErrorsResult.requestErrorDetails = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOperationErrorsResult;
        });
    }
}
