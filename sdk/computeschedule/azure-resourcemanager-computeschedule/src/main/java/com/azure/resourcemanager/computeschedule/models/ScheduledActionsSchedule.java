// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Specify the schedule in which the scheduled action is supposed to follow.
 */
@Fluent
public final class ScheduledActionsSchedule implements JsonSerializable<ScheduledActionsSchedule> {
    /*
     * The time the scheduled action is supposed to run on
     */
    private String scheduledTime;

    /*
     * The timezone the scheduled time is specified on
     */
    private String timeZone;

    /*
     * The week days the scheduled action is supposed to run on
     */
    private List<WeekDay> requestedWeekDays;

    /*
     * The months the scheduled action is supposed to run on
     */
    private List<Month> requestedMonths;

    /*
     * The days of the month the scheduled action is supposed to run on. If empty, it means it will run on every day of
     * the month.
     */
    private List<Integer> requestedDaysOfTheMonth;

    /*
     * The execution parameters the scheduled action is supposed to follow
     */
    private ExecutionParameters executionParameters;

    /*
     * The type of deadline the scheduled action is supposed to follow for the schedule. If no value is passed, it will
     * default to InitiateAt.
     */
    private DeadlineType deadlineType;

    /**
     * Creates an instance of ScheduledActionsSchedule class.
     */
    public ScheduledActionsSchedule() {
    }

    /**
     * Get the scheduledTime property: The time the scheduled action is supposed to run on.
     * 
     * @return the scheduledTime value.
     */
    public String scheduledTime() {
        return this.scheduledTime;
    }

    /**
     * Set the scheduledTime property: The time the scheduled action is supposed to run on.
     * 
     * @param scheduledTime the scheduledTime value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withScheduledTime(String scheduledTime) {
        this.scheduledTime = scheduledTime;
        return this;
    }

    /**
     * Get the timeZone property: The timezone the scheduled time is specified on.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Set the timeZone property: The timezone the scheduled time is specified on.
     * 
     * @param timeZone the timeZone value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withTimeZone(String timeZone) {
        this.timeZone = timeZone;
        return this;
    }

    /**
     * Get the requestedWeekDays property: The week days the scheduled action is supposed to run on.
     * 
     * @return the requestedWeekDays value.
     */
    public List<WeekDay> requestedWeekDays() {
        return this.requestedWeekDays;
    }

    /**
     * Set the requestedWeekDays property: The week days the scheduled action is supposed to run on.
     * 
     * @param requestedWeekDays the requestedWeekDays value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withRequestedWeekDays(List<WeekDay> requestedWeekDays) {
        this.requestedWeekDays = requestedWeekDays;
        return this;
    }

    /**
     * Get the requestedMonths property: The months the scheduled action is supposed to run on.
     * 
     * @return the requestedMonths value.
     */
    public List<Month> requestedMonths() {
        return this.requestedMonths;
    }

    /**
     * Set the requestedMonths property: The months the scheduled action is supposed to run on.
     * 
     * @param requestedMonths the requestedMonths value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withRequestedMonths(List<Month> requestedMonths) {
        this.requestedMonths = requestedMonths;
        return this;
    }

    /**
     * Get the requestedDaysOfTheMonth property: The days of the month the scheduled action is supposed to run on. If
     * empty, it means it will run on every day of the month.
     * 
     * @return the requestedDaysOfTheMonth value.
     */
    public List<Integer> requestedDaysOfTheMonth() {
        return this.requestedDaysOfTheMonth;
    }

    /**
     * Set the requestedDaysOfTheMonth property: The days of the month the scheduled action is supposed to run on. If
     * empty, it means it will run on every day of the month.
     * 
     * @param requestedDaysOfTheMonth the requestedDaysOfTheMonth value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withRequestedDaysOfTheMonth(List<Integer> requestedDaysOfTheMonth) {
        this.requestedDaysOfTheMonth = requestedDaysOfTheMonth;
        return this;
    }

    /**
     * Get the executionParameters property: The execution parameters the scheduled action is supposed to follow.
     * 
     * @return the executionParameters value.
     */
    public ExecutionParameters executionParameters() {
        return this.executionParameters;
    }

    /**
     * Set the executionParameters property: The execution parameters the scheduled action is supposed to follow.
     * 
     * @param executionParameters the executionParameters value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withExecutionParameters(ExecutionParameters executionParameters) {
        this.executionParameters = executionParameters;
        return this;
    }

    /**
     * Get the deadlineType property: The type of deadline the scheduled action is supposed to follow for the schedule.
     * If no value is passed, it will default to InitiateAt.
     * 
     * @return the deadlineType value.
     */
    public DeadlineType deadlineType() {
        return this.deadlineType;
    }

    /**
     * Set the deadlineType property: The type of deadline the scheduled action is supposed to follow for the schedule.
     * If no value is passed, it will default to InitiateAt.
     * 
     * @param deadlineType the deadlineType value to set.
     * @return the ScheduledActionsSchedule object itself.
     */
    public ScheduledActionsSchedule withDeadlineType(DeadlineType deadlineType) {
        this.deadlineType = deadlineType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduledTime", this.scheduledTime);
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeArrayField("requestedWeekDays", this.requestedWeekDays,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("requestedMonths", this.requestedMonths,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeArrayField("requestedDaysOfTheMonth", this.requestedDaysOfTheMonth,
            (writer, element) -> writer.writeInt(element));
        jsonWriter.writeJsonField("executionParameters", this.executionParameters);
        jsonWriter.writeStringField("deadlineType", this.deadlineType == null ? null : this.deadlineType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduledActionsSchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduledActionsSchedule if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduledActionsSchedule.
     */
    public static ScheduledActionsSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduledActionsSchedule deserializedScheduledActionsSchedule = new ScheduledActionsSchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduledTime".equals(fieldName)) {
                    deserializedScheduledActionsSchedule.scheduledTime = reader.getString();
                } else if ("timeZone".equals(fieldName)) {
                    deserializedScheduledActionsSchedule.timeZone = reader.getString();
                } else if ("requestedWeekDays".equals(fieldName)) {
                    List<WeekDay> requestedWeekDays
                        = reader.readArray(reader1 -> WeekDay.fromString(reader1.getString()));
                    deserializedScheduledActionsSchedule.requestedWeekDays = requestedWeekDays;
                } else if ("requestedMonths".equals(fieldName)) {
                    List<Month> requestedMonths = reader.readArray(reader1 -> Month.fromString(reader1.getString()));
                    deserializedScheduledActionsSchedule.requestedMonths = requestedMonths;
                } else if ("requestedDaysOfTheMonth".equals(fieldName)) {
                    List<Integer> requestedDaysOfTheMonth = reader.readArray(reader1 -> reader1.getInt());
                    deserializedScheduledActionsSchedule.requestedDaysOfTheMonth = requestedDaysOfTheMonth;
                } else if ("executionParameters".equals(fieldName)) {
                    deserializedScheduledActionsSchedule.executionParameters = ExecutionParameters.fromJson(reader);
                } else if ("deadlineType".equals(fieldName)) {
                    deserializedScheduledActionsSchedule.deadlineType = DeadlineType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduledActionsSchedule;
        });
    }
}
