// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The information about notifications to be send to about upcoming operations.
 */
@Fluent
public final class NotificationProperties implements JsonSerializable<NotificationProperties> {
    /*
     * Where the notification should be sent. For email, it should follow email format.
     */
    private String destination;

    /*
     * Type of notification to be sent.
     */
    private NotificationType type;

    /*
     * The language the notification should be sent on.
     */
    private Language language;

    /*
     * Tells if the notification is enabled or not.
     */
    private Boolean disabled;

    /**
     * Creates an instance of NotificationProperties class.
     */
    public NotificationProperties() {
    }

    /**
     * Get the destination property: Where the notification should be sent. For email, it should follow email format.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Where the notification should be sent. For email, it should follow email format.
     * 
     * @param destination the destination value to set.
     * @return the NotificationProperties object itself.
     */
    public NotificationProperties withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the type property: Type of notification to be sent.
     * 
     * @return the type value.
     */
    public NotificationType type() {
        return this.type;
    }

    /**
     * Set the type property: Type of notification to be sent.
     * 
     * @param type the type value to set.
     * @return the NotificationProperties object itself.
     */
    public NotificationProperties withType(NotificationType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the language property: The language the notification should be sent on.
     * 
     * @return the language value.
     */
    public Language language() {
        return this.language;
    }

    /**
     * Set the language property: The language the notification should be sent on.
     * 
     * @param language the language value to set.
     * @return the NotificationProperties object itself.
     */
    public NotificationProperties withLanguage(Language language) {
        this.language = language;
        return this;
    }

    /**
     * Get the disabled property: Tells if the notification is enabled or not.
     * 
     * @return the disabled value.
     */
    public Boolean disabled() {
        return this.disabled;
    }

    /**
     * Set the disabled property: Tells if the notification is enabled or not.
     * 
     * @param disabled the disabled value to set.
     * @return the NotificationProperties object itself.
     */
    public NotificationProperties withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("language", this.language == null ? null : this.language.toString());
        jsonWriter.writeBooleanField("disabled", this.disabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NotificationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NotificationProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the NotificationProperties.
     */
    public static NotificationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NotificationProperties deserializedNotificationProperties = new NotificationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("destination".equals(fieldName)) {
                    deserializedNotificationProperties.destination = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedNotificationProperties.type = NotificationType.fromString(reader.getString());
                } else if ("language".equals(fieldName)) {
                    deserializedNotificationProperties.language = Language.fromString(reader.getString());
                } else if ("disabled".equals(fieldName)) {
                    deserializedNotificationProperties.disabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNotificationProperties;
        });
    }
}
