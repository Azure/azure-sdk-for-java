// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Request to ask for a delay in an occurrence, delay should be set to client local time eg (ACST)
 * 2025-05-30T22:03:00+09:30, (PST) 2025-05-30T06:35:00-07:00.
 */
@Fluent
public final class DelayRequest implements JsonSerializable<DelayRequest> {
    /*
     * The exact time to delay the operations to
     */
    private OffsetDateTime delay;

    /*
     * The resources that should be delayed. If empty, the delay will apply to the all resources in the occurrence.
     */
    private List<String> resourceIds;

    /**
     * Creates an instance of DelayRequest class.
     */
    public DelayRequest() {
    }

    /**
     * Get the delay property: The exact time to delay the operations to.
     * 
     * @return the delay value.
     */
    public OffsetDateTime delay() {
        return this.delay;
    }

    /**
     * Set the delay property: The exact time to delay the operations to.
     * 
     * @param delay the delay value to set.
     * @return the DelayRequest object itself.
     */
    public DelayRequest withDelay(OffsetDateTime delay) {
        this.delay = delay;
        return this;
    }

    /**
     * Get the resourceIds property: The resources that should be delayed. If empty, the delay will apply to the all
     * resources in the occurrence.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: The resources that should be delayed. If empty, the delay will apply to the all
     * resources in the occurrence.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the DelayRequest object itself.
     */
    public DelayRequest withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (delay() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property delay in model DelayRequest"));
        }
        if (resourceIds() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceIds in model DelayRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DelayRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("delay",
            this.delay == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.delay));
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DelayRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DelayRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DelayRequest.
     */
    public static DelayRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DelayRequest deserializedDelayRequest = new DelayRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("delay".equals(fieldName)) {
                    deserializedDelayRequest.delay = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedDelayRequest.resourceIds = resourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDelayRequest;
        });
    }
}
