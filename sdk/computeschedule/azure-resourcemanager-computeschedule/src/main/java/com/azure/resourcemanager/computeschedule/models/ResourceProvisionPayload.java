// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Resource creation data model.
 */
@Fluent
public final class ResourceProvisionPayload implements JsonSerializable<ResourceProvisionPayload> {
    /*
     * JSON object that contains VM properties that are common across all VMs in this batch (if you want to create 100
     * VMs in this request, and they all have same vmSize, then include vmSize in baseProfile)
     */
    private Map<String, BinaryData> baseProfile;

    /*
     * JSON array, that contains VM properties that should to be overridden for each VM in the batch (if you want to
     * create 100 VMs, they all need a distinct computerName property, you pass computerNames for each VM in batch in
     * this array), service will merge baseProfile with VM specific overrides and create a merged VMProfile.
     */
    private List<Map<String, BinaryData>> resourceOverrides;

    /*
     * Number of VMs to be created
     */
    private int resourceCount;

    /*
     * if resourceOverrides doesn't contain "name", service will create name based of prefix and ResourceCount e.g.
     * resourceprefix-0,resourceprefix-1..
     */
    private String resourcePrefix;

    /**
     * Creates an instance of ResourceProvisionPayload class.
     */
    public ResourceProvisionPayload() {
    }

    /**
     * Get the baseProfile property: JSON object that contains VM properties that are common across all VMs in this
     * batch (if you want to create 100 VMs in this request, and they all have same vmSize, then include vmSize in
     * baseProfile).
     * 
     * @return the baseProfile value.
     */
    public Map<String, BinaryData> baseProfile() {
        return this.baseProfile;
    }

    /**
     * Set the baseProfile property: JSON object that contains VM properties that are common across all VMs in this
     * batch (if you want to create 100 VMs in this request, and they all have same vmSize, then include vmSize in
     * baseProfile).
     * 
     * @param baseProfile the baseProfile value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withBaseProfile(Map<String, BinaryData> baseProfile) {
        this.baseProfile = baseProfile;
        return this;
    }

    /**
     * Get the resourceOverrides property: JSON array, that contains VM properties that should to be overridden for each
     * VM in the batch (if you want to create 100 VMs, they all need a distinct computerName property, you pass
     * computerNames for each VM in batch in this array), service will merge baseProfile with VM specific overrides and
     * create a merged VMProfile.
     * 
     * @return the resourceOverrides value.
     */
    public List<Map<String, BinaryData>> resourceOverrides() {
        return this.resourceOverrides;
    }

    /**
     * Set the resourceOverrides property: JSON array, that contains VM properties that should to be overridden for each
     * VM in the batch (if you want to create 100 VMs, they all need a distinct computerName property, you pass
     * computerNames for each VM in batch in this array), service will merge baseProfile with VM specific overrides and
     * create a merged VMProfile.
     * 
     * @param resourceOverrides the resourceOverrides value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withResourceOverrides(List<Map<String, BinaryData>> resourceOverrides) {
        this.resourceOverrides = resourceOverrides;
        return this;
    }

    /**
     * Get the resourceCount property: Number of VMs to be created.
     * 
     * @return the resourceCount value.
     */
    public int resourceCount() {
        return this.resourceCount;
    }

    /**
     * Set the resourceCount property: Number of VMs to be created.
     * 
     * @param resourceCount the resourceCount value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withResourceCount(int resourceCount) {
        this.resourceCount = resourceCount;
        return this;
    }

    /**
     * Get the resourcePrefix property: if resourceOverrides doesn't contain "name", service will create name based of
     * prefix and ResourceCount e.g. resourceprefix-0,resourceprefix-1..
     * 
     * @return the resourcePrefix value.
     */
    public String resourcePrefix() {
        return this.resourcePrefix;
    }

    /**
     * Set the resourcePrefix property: if resourceOverrides doesn't contain "name", service will create name based of
     * prefix and ResourceCount e.g. resourceprefix-0,resourceprefix-1..
     * 
     * @param resourcePrefix the resourcePrefix value to set.
     * @return the ResourceProvisionPayload object itself.
     */
    public ResourceProvisionPayload withResourcePrefix(String resourcePrefix) {
        this.resourcePrefix = resourcePrefix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("resourceCount", this.resourceCount);
        jsonWriter.writeMapField("baseProfile", this.baseProfile,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeArrayField("resourceOverrides", this.resourceOverrides, (writer, element) -> writer.writeMap(
            element,
            (writer1, element1) -> writer1.writeUntyped(element1 == null ? null : element1.toObject(Object.class))));
        jsonWriter.writeStringField("resourcePrefix", this.resourcePrefix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceProvisionPayload from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceProvisionPayload if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceProvisionPayload.
     */
    public static ResourceProvisionPayload fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceProvisionPayload deserializedResourceProvisionPayload = new ResourceProvisionPayload();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceCount".equals(fieldName)) {
                    deserializedResourceProvisionPayload.resourceCount = reader.getInt();
                } else if ("baseProfile".equals(fieldName)) {
                    Map<String, BinaryData> baseProfile = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                    deserializedResourceProvisionPayload.baseProfile = baseProfile;
                } else if ("resourceOverrides".equals(fieldName)) {
                    List<Map<String, BinaryData>> resourceOverrides
                        = reader.readArray(reader1 -> reader1.readMap(reader2 -> reader2
                            .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()))));
                    deserializedResourceProvisionPayload.resourceOverrides = resourceOverrides;
                } else if ("resourcePrefix".equals(fieldName)) {
                    deserializedResourceProvisionPayload.resourcePrefix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceProvisionPayload;
        });
    }
}
