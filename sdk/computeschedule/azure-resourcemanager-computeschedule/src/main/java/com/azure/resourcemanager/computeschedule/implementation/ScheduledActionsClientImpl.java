// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.computeschedule.fluent.ScheduledActionsClient;
import com.azure.resourcemanager.computeschedule.fluent.models.CancelOperationsResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.DeallocateResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.GetOperationErrorsResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.GetOperationStatusResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.HibernateResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.StartResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.models.CancelOperationsRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteHibernateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteStartRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationErrorsRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationStatusRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitHibernateRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitStartRequest;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ScheduledActionsClient.
 */
public final class ScheduledActionsClientImpl implements ScheduledActionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ScheduledActionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeScheduleMgmtClientImpl client;

    /**
     * Initializes an instance of ScheduledActionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ScheduledActionsClientImpl(ComputeScheduleMgmtClientImpl client) {
        this.service
            = RestProxy.create(ScheduledActionsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeScheduleMgmtClientScheduledActions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ComputeScheduleMgmtC")
    public interface ScheduledActionsService {
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitDeallocate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeallocateResourceOperationResponseInner>> virtualMachinesSubmitDeallocate(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") SubmitDeallocateRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitHibernate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HibernateResourceOperationResponseInner>> virtualMachinesSubmitHibernate(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") SubmitHibernateRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesSubmitStart")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StartResourceOperationResponseInner>> virtualMachinesSubmitStart(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") SubmitStartRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteDeallocate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<DeallocateResourceOperationResponseInner>> virtualMachinesExecuteDeallocate(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ExecuteDeallocateRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteHibernate")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HibernateResourceOperationResponseInner>> virtualMachinesExecuteHibernate(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ExecuteHibernateRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesExecuteStart")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<StartResourceOperationResponseInner>> virtualMachinesExecuteStart(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") ExecuteStartRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesGetOperationStatus")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetOperationStatusResponseInner>> virtualMachinesGetOperationStatus(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") GetOperationStatusRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesCancelOperations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<CancelOperationsResponseInner>> virtualMachinesCancelOperations(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") CancelOperationsRequest requestBody,
            Context context);

        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.ComputeSchedule/locations/{locationparameter}/virtualMachinesGetOperationErrors")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GetOperationErrorsResponseInner>> virtualMachinesGetOperationErrors(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("locationparameter") String locationparameter, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") GetOperationErrorsRequest requestBody,
            Context context);
    }

    /**
     * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeallocateResourceOperationResponseInner>> virtualMachinesSubmitDeallocateWithResponseAsync(
        String locationparameter, SubmitDeallocateRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesSubmitDeallocate(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeallocateResourceOperationResponseInner>> virtualMachinesSubmitDeallocateWithResponseAsync(
        String locationparameter, SubmitDeallocateRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesSubmitDeallocate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeallocateResourceOperationResponseInner>
        virtualMachinesSubmitDeallocateAsync(String locationparameter, SubmitDeallocateRequest requestBody) {
        return virtualMachinesSubmitDeallocateWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeallocateResourceOperationResponseInner> virtualMachinesSubmitDeallocateWithResponse(
        String locationparameter, SubmitDeallocateRequest requestBody, Context context) {
        return virtualMachinesSubmitDeallocateWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesSubmitDeallocate: Schedule deallocate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeallocateResourceOperationResponseInner virtualMachinesSubmitDeallocate(String locationparameter,
        SubmitDeallocateRequest requestBody) {
        return virtualMachinesSubmitDeallocateWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HibernateResourceOperationResponseInner>>
        virtualMachinesSubmitHibernateWithResponseAsync(String locationparameter, SubmitHibernateRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesSubmitHibernate(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HibernateResourceOperationResponseInner>> virtualMachinesSubmitHibernateWithResponseAsync(
        String locationparameter, SubmitHibernateRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesSubmitHibernate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HibernateResourceOperationResponseInner> virtualMachinesSubmitHibernateAsync(String locationparameter,
        SubmitHibernateRequest requestBody) {
        return virtualMachinesSubmitHibernateWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HibernateResourceOperationResponseInner> virtualMachinesSubmitHibernateWithResponse(
        String locationparameter, SubmitHibernateRequest requestBody, Context context) {
        return virtualMachinesSubmitHibernateWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesSubmitHibernate: Schedule hibernate operation for a batch of virtual machines at datetime in
     * future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HibernateResourceOperationResponseInner virtualMachinesSubmitHibernate(String locationparameter,
        SubmitHibernateRequest requestBody) {
        return virtualMachinesSubmitHibernateWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StartResourceOperationResponseInner>>
        virtualMachinesSubmitStartWithResponseAsync(String locationparameter, SubmitStartRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.virtualMachinesSubmitStart(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StartResourceOperationResponseInner>> virtualMachinesSubmitStartWithResponseAsync(
        String locationparameter, SubmitStartRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesSubmitStart(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StartResourceOperationResponseInner> virtualMachinesSubmitStartAsync(String locationparameter,
        SubmitStartRequest requestBody) {
        return virtualMachinesSubmitStartWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StartResourceOperationResponseInner> virtualMachinesSubmitStartWithResponse(
        String locationparameter, SubmitStartRequest requestBody, Context context) {
        return virtualMachinesSubmitStartWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesSubmitStart: Schedule start operation for a batch of virtual machines at datetime in future.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StartResourceOperationResponseInner virtualMachinesSubmitStart(String locationparameter,
        SubmitStartRequest requestBody) {
        return virtualMachinesSubmitStartWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeallocateResourceOperationResponseInner>> virtualMachinesExecuteDeallocateWithResponseAsync(
        String locationparameter, ExecuteDeallocateRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesExecuteDeallocate(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<DeallocateResourceOperationResponseInner>> virtualMachinesExecuteDeallocateWithResponseAsync(
        String locationparameter, ExecuteDeallocateRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesExecuteDeallocate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<DeallocateResourceOperationResponseInner>
        virtualMachinesExecuteDeallocateAsync(String locationparameter, ExecuteDeallocateRequest requestBody) {
        return virtualMachinesExecuteDeallocateWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<DeallocateResourceOperationResponseInner> virtualMachinesExecuteDeallocateWithResponse(
        String locationparameter, ExecuteDeallocateRequest requestBody, Context context) {
        return virtualMachinesExecuteDeallocateWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesExecuteDeallocate: Execute deallocate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public DeallocateResourceOperationResponseInner virtualMachinesExecuteDeallocate(String locationparameter,
        ExecuteDeallocateRequest requestBody) {
        return virtualMachinesExecuteDeallocateWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HibernateResourceOperationResponseInner>> virtualMachinesExecuteHibernateWithResponseAsync(
        String locationparameter, ExecuteHibernateRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesExecuteHibernate(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HibernateResourceOperationResponseInner>> virtualMachinesExecuteHibernateWithResponseAsync(
        String locationparameter, ExecuteHibernateRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesExecuteHibernate(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HibernateResourceOperationResponseInner> virtualMachinesExecuteHibernateAsync(String locationparameter,
        ExecuteHibernateRequest requestBody) {
        return virtualMachinesExecuteHibernateWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HibernateResourceOperationResponseInner> virtualMachinesExecuteHibernateWithResponse(
        String locationparameter, ExecuteHibernateRequest requestBody, Context context) {
        return virtualMachinesExecuteHibernateWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesExecuteHibernate: Execute hibernate operation for a batch of virtual machines, this operation is
     * triggered as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HibernateResourceOperationResponseInner virtualMachinesExecuteHibernate(String locationparameter,
        ExecuteHibernateRequest requestBody) {
        return virtualMachinesExecuteHibernateWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation is triggered
     * as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StartResourceOperationResponseInner>>
        virtualMachinesExecuteStartWithResponseAsync(String locationparameter, ExecuteStartRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.virtualMachinesExecuteStart(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation is triggered
     * as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<StartResourceOperationResponseInner>> virtualMachinesExecuteStartWithResponseAsync(
        String locationparameter, ExecuteStartRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesExecuteStart(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation is triggered
     * as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<StartResourceOperationResponseInner> virtualMachinesExecuteStartAsync(String locationparameter,
        ExecuteStartRequest requestBody) {
        return virtualMachinesExecuteStartWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation is triggered
     * as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<StartResourceOperationResponseInner> virtualMachinesExecuteStartWithResponse(
        String locationparameter, ExecuteStartRequest requestBody, Context context) {
        return virtualMachinesExecuteStartWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesExecuteStart: Execute start operation for a batch of virtual machines, this operation is triggered
     * as soon as Computeschedule receives it.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public StartResourceOperationResponseInner virtualMachinesExecuteStart(String locationparameter,
        ExecuteStartRequest requestBody) {
        return virtualMachinesExecuteStartWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on virtual machines.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetOperationStatusResponseInner>> virtualMachinesGetOperationStatusWithResponseAsync(
        String locationparameter, GetOperationStatusRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesGetOperationStatus(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on virtual machines.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetOperationStatusResponseInner>> virtualMachinesGetOperationStatusWithResponseAsync(
        String locationparameter, GetOperationStatusRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesGetOperationStatus(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on virtual machines.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetOperationStatusResponseInner> virtualMachinesGetOperationStatusAsync(String locationparameter,
        GetOperationStatusRequest requestBody) {
        return virtualMachinesGetOperationStatusWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on virtual machines.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetOperationStatusResponseInner> virtualMachinesGetOperationStatusWithResponse(
        String locationparameter, GetOperationStatusRequest requestBody, Context context) {
        return virtualMachinesGetOperationStatusWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesGetOperationStatus: Polling endpoint to read status of operations performed on virtual machines.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetOperationStatusResponseInner virtualMachinesGetOperationStatus(String locationparameter,
        GetOperationStatusRequest requestBody) {
        return virtualMachinesGetOperationStatusWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CancelOperationsResponseInner>> virtualMachinesCancelOperationsWithResponseAsync(
        String locationparameter, CancelOperationsRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesCancelOperations(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<CancelOperationsResponseInner>> virtualMachinesCancelOperationsWithResponseAsync(
        String locationparameter, CancelOperationsRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesCancelOperations(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CancelOperationsResponseInner> virtualMachinesCancelOperationsAsync(String locationparameter,
        CancelOperationsRequest requestBody) {
        return virtualMachinesCancelOperationsWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<CancelOperationsResponseInner> virtualMachinesCancelOperationsWithResponse(String locationparameter,
        CancelOperationsRequest requestBody, Context context) {
        return virtualMachinesCancelOperationsWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesCancelOperations: Cancel a previously submitted (start/deallocate/hibernate) request.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CancelOperationsResponseInner virtualMachinesCancelOperations(String locationparameter,
        CancelOperationsRequest requestBody) {
        return virtualMachinesCancelOperationsWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }

    /**
     * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors encountered,
     * additional logs) if they exist.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetOperationErrorsResponseInner>> virtualMachinesGetOperationErrorsWithResponseAsync(
        String locationparameter, GetOperationErrorsRequest requestBody) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.virtualMachinesGetOperationErrors(this.client.getEndpoint(),
                this.client.getApiVersion(), this.client.getSubscriptionId(), locationparameter, contentType, accept,
                requestBody, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors encountered,
     * additional logs) if they exist.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GetOperationErrorsResponseInner>> virtualMachinesGetOperationErrorsWithResponseAsync(
        String locationparameter, GetOperationErrorsRequest requestBody, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (locationparameter == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter locationparameter is required and cannot be null."));
        }
        if (requestBody == null) {
            return Mono.error(new IllegalArgumentException("Parameter requestBody is required and cannot be null."));
        } else {
            requestBody.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.virtualMachinesGetOperationErrors(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), locationparameter, contentType, accept, requestBody, context);
    }

    /**
     * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors encountered,
     * additional logs) if they exist.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GetOperationErrorsResponseInner> virtualMachinesGetOperationErrorsAsync(String locationparameter,
        GetOperationErrorsRequest requestBody) {
        return virtualMachinesGetOperationErrorsWithResponseAsync(locationparameter, requestBody)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors encountered,
     * additional logs) if they exist.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GetOperationErrorsResponseInner> virtualMachinesGetOperationErrorsWithResponse(
        String locationparameter, GetOperationErrorsRequest requestBody, Context context) {
        return virtualMachinesGetOperationErrorsWithResponseAsync(locationparameter, requestBody, context).block();
    }

    /**
     * VirtualMachinesGetOperationErrors: Get error details on operation errors (like transient errors encountered,
     * additional logs) if they exist.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GetOperationErrorsResponseInner virtualMachinesGetOperationErrors(String locationparameter,
        GetOperationErrorsRequest requestBody) {
        return virtualMachinesGetOperationErrorsWithResponse(locationparameter, requestBody, Context.NONE).getValue();
    }
}
