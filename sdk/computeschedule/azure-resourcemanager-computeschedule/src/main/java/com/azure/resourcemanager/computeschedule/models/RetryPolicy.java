// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The retry policy for the user request.
 */
@Fluent
public final class RetryPolicy implements JsonSerializable<RetryPolicy> {
    /*
     * Retry count for user request
     */
    private Integer retryCount;

    /*
     * Retry window in minutes for user request
     */
    private Integer retryWindowInMinutes;

    /**
     * Creates an instance of RetryPolicy class.
     */
    public RetryPolicy() {
    }

    /**
     * Get the retryCount property: Retry count for user request.
     * 
     * @return the retryCount value.
     */
    public Integer retryCount() {
        return this.retryCount;
    }

    /**
     * Set the retryCount property: Retry count for user request.
     * 
     * @param retryCount the retryCount value to set.
     * @return the RetryPolicy object itself.
     */
    public RetryPolicy withRetryCount(Integer retryCount) {
        this.retryCount = retryCount;
        return this;
    }

    /**
     * Get the retryWindowInMinutes property: Retry window in minutes for user request.
     * 
     * @return the retryWindowInMinutes value.
     */
    public Integer retryWindowInMinutes() {
        return this.retryWindowInMinutes;
    }

    /**
     * Set the retryWindowInMinutes property: Retry window in minutes for user request.
     * 
     * @param retryWindowInMinutes the retryWindowInMinutes value to set.
     * @return the RetryPolicy object itself.
     */
    public RetryPolicy withRetryWindowInMinutes(Integer retryWindowInMinutes) {
        this.retryWindowInMinutes = retryWindowInMinutes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("retryCount", this.retryCount);
        jsonWriter.writeNumberField("retryWindowInMinutes", this.retryWindowInMinutes);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RetryPolicy from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RetryPolicy if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the RetryPolicy.
     */
    public static RetryPolicy fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RetryPolicy deserializedRetryPolicy = new RetryPolicy();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("retryCount".equals(fieldName)) {
                    deserializedRetryPolicy.retryCount = reader.getNullable(JsonReader::getInt);
                } else if ("retryWindowInMinutes".equals(fieldName)) {
                    deserializedRetryPolicy.retryWindowInMinutes = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRetryPolicy;
        });
    }
}
