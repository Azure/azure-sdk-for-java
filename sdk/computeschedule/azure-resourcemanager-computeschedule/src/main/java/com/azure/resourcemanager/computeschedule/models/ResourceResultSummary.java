// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The status of the resources.
 */
@Immutable
public final class ResourceResultSummary implements JsonSerializable<ResourceResultSummary> {
    /*
     * The error code for those resources. In case of success, code is populated with Success.
     */
    private String code;

    /*
     * The number of resources that the code applies to.
     */
    private int count;

    /*
     * The error details for the resources. Not populated on success cases.
     */
    private Error errorDetails;

    /**
     * Creates an instance of ResourceResultSummary class.
     */
    private ResourceResultSummary() {
    }

    /**
     * Get the code property: The error code for those resources. In case of success, code is populated with Success.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the count property: The number of resources that the code applies to.
     * 
     * @return the count value.
     */
    public int count() {
        return this.count;
    }

    /**
     * Get the errorDetails property: The error details for the resources. Not populated on success cases.
     * 
     * @return the errorDetails value.
     */
    public Error errorDetails() {
        return this.errorDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("code", this.code);
        jsonWriter.writeIntField("count", this.count);
        jsonWriter.writeJsonField("errorDetails", this.errorDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceResultSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceResultSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceResultSummary.
     */
    public static ResourceResultSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceResultSummary deserializedResourceResultSummary = new ResourceResultSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("code".equals(fieldName)) {
                    deserializedResourceResultSummary.code = reader.getString();
                } else if ("count".equals(fieldName)) {
                    deserializedResourceResultSummary.count = reader.getInt();
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedResourceResultSummary.errorDetails = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceResultSummary;
        });
    }
}
