// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The request to cancel an occurrence.
 */
@Fluent
public final class CancelOccurrenceRequest implements JsonSerializable<CancelOccurrenceRequest> {
    /*
     * The resources the cancellation should act on. If no resource is passed in the list, Scheduled Action will cancel
     * the occurrence for all resources.
     */
    private List<String> resourceIds;

    /**
     * Creates an instance of CancelOccurrenceRequest class.
     */
    public CancelOccurrenceRequest() {
    }

    /**
     * Get the resourceIds property: The resources the cancellation should act on. If no resource is passed in the list,
     * Scheduled Action will cancel the occurrence for all resources.
     * 
     * @return the resourceIds value.
     */
    public List<String> resourceIds() {
        return this.resourceIds;
    }

    /**
     * Set the resourceIds property: The resources the cancellation should act on. If no resource is passed in the list,
     * Scheduled Action will cancel the occurrence for all resources.
     * 
     * @param resourceIds the resourceIds value to set.
     * @return the CancelOccurrenceRequest object itself.
     */
    public CancelOccurrenceRequest withResourceIds(List<String> resourceIds) {
        this.resourceIds = resourceIds;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resourceIds", this.resourceIds, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CancelOccurrenceRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CancelOccurrenceRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CancelOccurrenceRequest.
     */
    public static CancelOccurrenceRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CancelOccurrenceRequest deserializedCancelOccurrenceRequest = new CancelOccurrenceRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceIds".equals(fieldName)) {
                    List<String> resourceIds = reader.readArray(reader1 -> reader1.getString());
                    deserializedCancelOccurrenceRequest.resourceIds = resourceIds;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCancelOccurrenceRequest;
        });
    }
}
