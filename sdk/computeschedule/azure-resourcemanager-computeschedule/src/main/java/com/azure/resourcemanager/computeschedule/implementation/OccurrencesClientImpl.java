// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.computeschedule.fluent.OccurrencesClient;
import com.azure.resourcemanager.computeschedule.fluent.models.OccurrenceInner;
import com.azure.resourcemanager.computeschedule.fluent.models.OccurrenceResourceInner;
import com.azure.resourcemanager.computeschedule.fluent.models.RecurringActionsResourceOperationResultInner;
import com.azure.resourcemanager.computeschedule.implementation.models.OccurrenceListResult;
import com.azure.resourcemanager.computeschedule.implementation.models.OccurrenceResourceListResponse;
import com.azure.resourcemanager.computeschedule.models.CancelOccurrenceRequest;
import com.azure.resourcemanager.computeschedule.models.DelayRequest;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OccurrencesClient.
 */
public final class OccurrencesClientImpl implements OccurrencesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OccurrencesService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeScheduleMgmtClientImpl client;

    /**
     * Initializes an instance of OccurrencesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OccurrencesClientImpl(ComputeScheduleMgmtClientImpl client) {
        this.service
            = RestProxy.create(OccurrencesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeScheduleMgmtClientOccurrences to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ComputeScheduleMgmtClientOccurrences")
    public interface OccurrencesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceListResult>> listByScheduledAction(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceListResult> listByScheduledActionSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}/resources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceResourceListResponse>> listResources(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}/resources")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceResourceListResponse> listResourcesSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Accept") String accept, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RecurringActionsResourceOperationResultInner>> cancel(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") CancelOccurrenceRequest body,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}/cancel")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<RecurringActionsResourceOperationResultInner> cancelSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") CancelOccurrenceRequest body,
            Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}/delay")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delay(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DelayRequest body, Context context);

        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ComputeSchedule/scheduledActions/{scheduledActionName}/occurrences/{occurrenceId}/delay")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> delaySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("scheduledActionName") String scheduledActionName,
            @PathParam("occurrenceId") String occurrenceId, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") DelayRequest body, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceListResult>> listByScheduledActionNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceListResult> listByScheduledActionNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceResourceListResponse>> listResourcesNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceResourceListResponse> listResourcesNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a Occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Occurrence along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<OccurrenceInner>> getWithResponseAsync(String resourceGroupName, String scheduledActionName,
        String occurrenceId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a Occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Occurrence on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<OccurrenceInner> getAsync(String resourceGroupName, String scheduledActionName, String occurrenceId) {
        return getWithResponseAsync(resourceGroupName, scheduledActionName, occurrenceId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a Occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Occurrence along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<OccurrenceInner> getWithResponse(String resourceGroupName, String scheduledActionName,
        String occurrenceId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, scheduledActionName, occurrenceId, accept, context);
    }

    /**
     * Get a Occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Occurrence.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public OccurrenceInner get(String resourceGroupName, String scheduledActionName, String occurrenceId) {
        return getWithResponse(resourceGroupName, scheduledActionName, occurrenceId, Context.NONE).getValue();
    }

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OccurrenceInner>> listByScheduledActionSinglePageAsync(String resourceGroupName,
        String scheduledActionName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByScheduledAction(this.client.getEndpoint(), this.client.getApiVersion(),
                    this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, accept, context))
            .<PagedResponse<OccurrenceInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OccurrenceInner> listByScheduledActionAsync(String resourceGroupName,
        String scheduledActionName) {
        return new PagedFlux<>(() -> listByScheduledActionSinglePageAsync(resourceGroupName, scheduledActionName),
            nextLink -> listByScheduledActionNextSinglePageAsync(nextLink));
    }

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceInner> listByScheduledActionSinglePage(String resourceGroupName,
        String scheduledActionName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceListResult> res
            = service.listByScheduledActionSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceInner> listByScheduledActionSinglePage(String resourceGroupName,
        String scheduledActionName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceListResult> res
            = service.listByScheduledActionSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OccurrenceInner> listByScheduledAction(String resourceGroupName, String scheduledActionName) {
        return new PagedIterable<>(() -> listByScheduledActionSinglePage(resourceGroupName, scheduledActionName),
            nextLink -> listByScheduledActionNextSinglePage(nextLink));
    }

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OccurrenceInner> listByScheduledAction(String resourceGroupName, String scheduledActionName,
        Context context) {
        return new PagedIterable<>(
            () -> listByScheduledActionSinglePage(resourceGroupName, scheduledActionName, context),
            nextLink -> listByScheduledActionNextSinglePage(nextLink, context));
    }

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OccurrenceResourceInner>> listResourcesSinglePageAsync(String resourceGroupName,
        String scheduledActionName, String occurrenceId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listResources(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, accept, context))
            .<PagedResponse<OccurrenceResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OccurrenceResourceInner> listResourcesAsync(String resourceGroupName, String scheduledActionName,
        String occurrenceId) {
        return new PagedFlux<>(() -> listResourcesSinglePageAsync(resourceGroupName, scheduledActionName, occurrenceId),
            nextLink -> listResourcesNextSinglePageAsync(nextLink));
    }

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceResourceInner> listResourcesSinglePage(String resourceGroupName,
        String scheduledActionName, String occurrenceId) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceResourceListResponse> res = service.listResourcesSync(this.client.getEndpoint(),
            this.client.getApiVersion(), this.client.getSubscriptionId(), resourceGroupName, scheduledActionName,
            occurrenceId, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceResourceInner> listResourcesSinglePage(String resourceGroupName,
        String scheduledActionName, String occurrenceId, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceResourceListResponse> res
            = service.listResourcesSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OccurrenceResourceInner> listResources(String resourceGroupName, String scheduledActionName,
        String occurrenceId) {
        return new PagedIterable<>(() -> listResourcesSinglePage(resourceGroupName, scheduledActionName, occurrenceId),
            nextLink -> listResourcesNextSinglePage(nextLink));
    }

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OccurrenceResourceInner> listResources(String resourceGroupName, String scheduledActionName,
        String occurrenceId, Context context) {
        return new PagedIterable<>(
            () -> listResourcesSinglePage(resourceGroupName, scheduledActionName, occurrenceId, context),
            nextLink -> listResourcesNextSinglePage(nextLink, context));
    }

    /**
     * A synchronous resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from scheduled action resource requests, which contains the status of each resource along
     * with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RecurringActionsResourceOperationResultInner>> cancelWithResponseAsync(
        String resourceGroupName, String scheduledActionName, String occurrenceId, CancelOccurrenceRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.cancel(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, contentType,
                accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * A synchronous resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from scheduled action resource requests, which contains the status of each resource on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecurringActionsResourceOperationResultInner> cancelAsync(String resourceGroupName,
        String scheduledActionName, String occurrenceId, CancelOccurrenceRequest body) {
        return cancelWithResponseAsync(resourceGroupName, scheduledActionName, occurrenceId, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * A synchronous resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from scheduled action resource requests, which contains the status of each resource along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RecurringActionsResourceOperationResultInner> cancelWithResponse(String resourceGroupName,
        String scheduledActionName, String occurrenceId, CancelOccurrenceRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.cancelSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, contentType, accept,
            body, context);
    }

    /**
     * A synchronous resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from scheduled action resource requests, which contains the status of each resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecurringActionsResourceOperationResultInner cancel(String resourceGroupName, String scheduledActionName,
        String occurrenceId, CancelOccurrenceRequest body) {
        return cancelWithResponse(resourceGroupName, scheduledActionName, occurrenceId, body, Context.NONE).getValue();
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> delayWithResponseAsync(String resourceGroupName,
        String scheduledActionName, String occurrenceId, DelayRequest body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            return Mono.error(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.delay(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, contentType,
                accept, body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> delayWithResponse(String resourceGroupName, String scheduledActionName,
        String occurrenceId, DelayRequest body) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.delaySync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, contentType, accept,
            body, Context.NONE);
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> delayWithResponse(String resourceGroupName, String scheduledActionName,
        String occurrenceId, DelayRequest body, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (scheduledActionName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter scheduledActionName is required and cannot be null."));
        }
        if (occurrenceId == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter occurrenceId is required and cannot be null."));
        }
        if (body == null) {
            throw LOGGER.atError().log(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.delaySync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, scheduledActionName, occurrenceId, contentType, accept,
            body, context);
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<RecurringActionsResourceOperationResultInner>, RecurringActionsResourceOperationResultInner>
        beginDelayAsync(String resourceGroupName, String scheduledActionName, String occurrenceId, DelayRequest body) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = delayWithResponseAsync(resourceGroupName, scheduledActionName, occurrenceId, body);
        return this.client
            .<RecurringActionsResourceOperationResultInner, RecurringActionsResourceOperationResultInner>getLroResult(
                mono, this.client.getHttpPipeline(), RecurringActionsResourceOperationResultInner.class,
                RecurringActionsResourceOperationResultInner.class, this.client.getContext());
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<RecurringActionsResourceOperationResultInner>, RecurringActionsResourceOperationResultInner>
        beginDelay(String resourceGroupName, String scheduledActionName, String occurrenceId, DelayRequest body) {
        Response<BinaryData> response = delayWithResponse(resourceGroupName, scheduledActionName, occurrenceId, body);
        return this.client
            .<RecurringActionsResourceOperationResultInner, RecurringActionsResourceOperationResultInner>getLroResult(
                response, RecurringActionsResourceOperationResultInner.class,
                RecurringActionsResourceOperationResultInner.class, Context.NONE);
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<RecurringActionsResourceOperationResultInner>, RecurringActionsResourceOperationResultInner>
        beginDelay(String resourceGroupName, String scheduledActionName, String occurrenceId, DelayRequest body,
            Context context) {
        Response<BinaryData> response
            = delayWithResponse(resourceGroupName, scheduledActionName, occurrenceId, body, context);
        return this.client
            .<RecurringActionsResourceOperationResultInner, RecurringActionsResourceOperationResultInner>getLroResult(
                response, RecurringActionsResourceOperationResultInner.class,
                RecurringActionsResourceOperationResultInner.class, context);
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RecurringActionsResourceOperationResultInner> delayAsync(String resourceGroupName,
        String scheduledActionName, String occurrenceId, DelayRequest body) {
        return beginDelayAsync(resourceGroupName, scheduledActionName, occurrenceId, body).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecurringActionsResourceOperationResultInner delay(String resourceGroupName, String scheduledActionName,
        String occurrenceId, DelayRequest body) {
        return beginDelay(resourceGroupName, scheduledActionName, occurrenceId, body).getFinalResult();
    }

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RecurringActionsResourceOperationResultInner delay(String resourceGroupName, String scheduledActionName,
        String occurrenceId, DelayRequest body, Context context) {
        return beginDelay(resourceGroupName, scheduledActionName, occurrenceId, body, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OccurrenceInner>> listByScheduledActionNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listByScheduledActionNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OccurrenceInner>>map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(),
                res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceInner> listByScheduledActionNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceListResult> res
            = service.listByScheduledActionNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceInner> listByScheduledActionNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceListResult> res
            = service.listByScheduledActionNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link PagedResponse} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OccurrenceResourceInner>> listResourcesNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listResourcesNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OccurrenceResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceResourceInner> listResourcesNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceResourceListResponse> res
            = service.listResourcesNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceResourceInner> listResourcesNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<OccurrenceResourceListResponse> res
            = service.listResourcesNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(OccurrencesClientImpl.class);
}
