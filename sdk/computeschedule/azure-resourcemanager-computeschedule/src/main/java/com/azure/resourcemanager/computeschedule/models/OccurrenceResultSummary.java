// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The summarized provisioning result of an occurrence.
 */
@Immutable
public final class OccurrenceResultSummary implements JsonSerializable<OccurrenceResultSummary> {
    /*
     * The total number of resources that the occurrence was supposed to act on.
     */
    private int total;

    /*
     * The summarized status of the resources.
     */
    private List<ResourceResultSummary> statuses;

    /**
     * Creates an instance of OccurrenceResultSummary class.
     */
    private OccurrenceResultSummary() {
    }

    /**
     * Get the total property: The total number of resources that the occurrence was supposed to act on.
     * 
     * @return the total value.
     */
    public int total() {
        return this.total;
    }

    /**
     * Get the statuses property: The summarized status of the resources.
     * 
     * @return the statuses value.
     */
    public List<ResourceResultSummary> statuses() {
        return this.statuses;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (statuses() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property statuses in model OccurrenceResultSummary"));
        } else {
            statuses().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OccurrenceResultSummary.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("total", this.total);
        jsonWriter.writeArrayField("statuses", this.statuses, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OccurrenceResultSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OccurrenceResultSummary if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OccurrenceResultSummary.
     */
    public static OccurrenceResultSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OccurrenceResultSummary deserializedOccurrenceResultSummary = new OccurrenceResultSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("total".equals(fieldName)) {
                    deserializedOccurrenceResultSummary.total = reader.getInt();
                } else if ("statuses".equals(fieldName)) {
                    List<ResourceResultSummary> statuses
                        = reader.readArray(reader1 -> ResourceResultSummary.fromJson(reader1));
                    deserializedOccurrenceResultSummary.statuses = statuses;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOccurrenceResultSummary;
        });
    }
}
