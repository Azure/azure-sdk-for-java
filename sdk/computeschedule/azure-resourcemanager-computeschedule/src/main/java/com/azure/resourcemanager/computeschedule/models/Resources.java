// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The resources needed for the user request.
 */
@Fluent
public final class Resources implements JsonSerializable<Resources> {
    /*
     * The resource ids used for the request
     */
    private List<String> ids;

    /**
     * Creates an instance of Resources class.
     */
    public Resources() {
    }

    /**
     * Get the ids property: The resource ids used for the request.
     * 
     * @return the ids value.
     */
    public List<String> ids() {
        return this.ids;
    }

    /**
     * Set the ids property: The resource ids used for the request.
     * 
     * @param ids the ids value to set.
     * @return the Resources object itself.
     */
    public Resources withIds(List<String> ids) {
        this.ids = ids;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ids() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property ids in model Resources"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Resources.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("ids", this.ids, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Resources from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Resources if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Resources.
     */
    public static Resources fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Resources deserializedResources = new Resources();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("ids".equals(fieldName)) {
                    List<String> ids = reader.readArray(reader1 -> reader1.getString());
                    deserializedResources.ids = ids;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResources;
        });
    }
}
