// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * Scheduled action properties.
 */
@Fluent
public final class ScheduledActionProperties implements JsonSerializable<ScheduledActionProperties> {
    /*
     * The type of resource the scheduled action is targeting
     */
    private ResourceType resourceType;

    /*
     * The action the scheduled action should perform in the resources
     */
    private ScheduledActionType actionType;

    /*
     * The time which the scheduled action is supposed to start running
     */
    private OffsetDateTime startTime;

    /*
     * The time when the scheduled action is supposed to stop scheduling
     */
    private OffsetDateTime endTime;

    /*
     * The schedule the scheduled action is supposed to follow
     */
    private ScheduledActionsSchedule schedule;

    /*
     * The notification settings for the scheduled action
     */
    private List<NotificationProperties> notificationSettings;

    /*
     * Tell if the scheduled action is disabled or not
     */
    private Boolean disabled;

    /*
     * The status of the last provisioning operation performed on the resource.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of ScheduledActionProperties class.
     */
    public ScheduledActionProperties() {
    }

    /**
     * Get the resourceType property: The type of resource the scheduled action is targeting.
     * 
     * @return the resourceType value.
     */
    public ResourceType resourceType() {
        return this.resourceType;
    }

    /**
     * Set the resourceType property: The type of resource the scheduled action is targeting.
     * 
     * @param resourceType the resourceType value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withResourceType(ResourceType resourceType) {
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Get the actionType property: The action the scheduled action should perform in the resources.
     * 
     * @return the actionType value.
     */
    public ScheduledActionType actionType() {
        return this.actionType;
    }

    /**
     * Set the actionType property: The action the scheduled action should perform in the resources.
     * 
     * @param actionType the actionType value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withActionType(ScheduledActionType actionType) {
        this.actionType = actionType;
        return this;
    }

    /**
     * Get the startTime property: The time which the scheduled action is supposed to start running.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The time which the scheduled action is supposed to start running.
     * 
     * @param startTime the startTime value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: The time when the scheduled action is supposed to stop scheduling.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: The time when the scheduled action is supposed to stop scheduling.
     * 
     * @param endTime the endTime value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the schedule property: The schedule the scheduled action is supposed to follow.
     * 
     * @return the schedule value.
     */
    public ScheduledActionsSchedule schedule() {
        return this.schedule;
    }

    /**
     * Set the schedule property: The schedule the scheduled action is supposed to follow.
     * 
     * @param schedule the schedule value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withSchedule(ScheduledActionsSchedule schedule) {
        this.schedule = schedule;
        return this;
    }

    /**
     * Get the notificationSettings property: The notification settings for the scheduled action.
     * 
     * @return the notificationSettings value.
     */
    public List<NotificationProperties> notificationSettings() {
        return this.notificationSettings;
    }

    /**
     * Set the notificationSettings property: The notification settings for the scheduled action.
     * 
     * @param notificationSettings the notificationSettings value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withNotificationSettings(List<NotificationProperties> notificationSettings) {
        this.notificationSettings = notificationSettings;
        return this;
    }

    /**
     * Get the disabled property: Tell if the scheduled action is disabled or not.
     * 
     * @return the disabled value.
     */
    public Boolean disabled() {
        return this.disabled;
    }

    /**
     * Set the disabled property: Tell if the scheduled action is disabled or not.
     * 
     * @param disabled the disabled value to set.
     * @return the ScheduledActionProperties object itself.
     */
    public ScheduledActionProperties withDisabled(Boolean disabled) {
        this.disabled = disabled;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last provisioning operation performed on the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType == null ? null : this.resourceType.toString());
        jsonWriter.writeStringField("actionType", this.actionType == null ? null : this.actionType.toString());
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeJsonField("schedule", this.schedule);
        jsonWriter.writeArrayField("notificationSettings", this.notificationSettings,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeBooleanField("disabled", this.disabled);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduledActionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduledActionProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduledActionProperties.
     */
    public static ScheduledActionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduledActionProperties deserializedScheduledActionProperties = new ScheduledActionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedScheduledActionProperties.resourceType = ResourceType.fromString(reader.getString());
                } else if ("actionType".equals(fieldName)) {
                    deserializedScheduledActionProperties.actionType
                        = ScheduledActionType.fromString(reader.getString());
                } else if ("startTime".equals(fieldName)) {
                    deserializedScheduledActionProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("schedule".equals(fieldName)) {
                    deserializedScheduledActionProperties.schedule = ScheduledActionsSchedule.fromJson(reader);
                } else if ("notificationSettings".equals(fieldName)) {
                    List<NotificationProperties> notificationSettings
                        = reader.readArray(reader1 -> NotificationProperties.fromJson(reader1));
                    deserializedScheduledActionProperties.notificationSettings = notificationSettings;
                } else if ("endTime".equals(fieldName)) {
                    deserializedScheduledActionProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("disabled".equals(fieldName)) {
                    deserializedScheduledActionProperties.disabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedScheduledActionProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduledActionProperties;
        });
    }
}
