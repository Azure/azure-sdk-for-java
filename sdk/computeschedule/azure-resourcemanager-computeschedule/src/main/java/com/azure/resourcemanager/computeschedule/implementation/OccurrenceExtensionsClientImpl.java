// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.resourcemanager.computeschedule.fluent.OccurrenceExtensionsClient;
import com.azure.resourcemanager.computeschedule.fluent.models.OccurrenceExtensionResourceInner;
import com.azure.resourcemanager.computeschedule.implementation.models.OccurrenceExtensionResourceListResult;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in OccurrenceExtensionsClient.
 */
public final class OccurrenceExtensionsClientImpl implements OccurrenceExtensionsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final OccurrenceExtensionsService service;

    /**
     * The service client containing this operation class.
     */
    private final ComputeScheduleMgmtClientImpl client;

    /**
     * Initializes an instance of OccurrenceExtensionsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    OccurrenceExtensionsClientImpl(ComputeScheduleMgmtClientImpl client) {
        this.service = RestProxy.create(OccurrenceExtensionsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ComputeScheduleMgmtClientOccurrenceExtensions to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "ComputeScheduleMgmtClientOccurrenceExtensions")
    public interface OccurrenceExtensionsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.ComputeSchedule/associatedOccurrences")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceExtensionResourceListResult>> listOccurrenceByVms(
            @HostParam("endpoint") String endpoint, @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{resourceUri}/providers/Microsoft.ComputeSchedule/associatedOccurrences")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceExtensionResourceListResult> listOccurrenceByVmsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<OccurrenceExtensionResourceListResult>> listOccurrenceByVmsNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<OccurrenceExtensionResourceListResult> listOccurrenceByVmsNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * List OccurrenceExtensionResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OccurrenceExtensionResourceInner>>
        listOccurrenceByVmsSinglePageAsync(String resourceUri) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listOccurrenceByVms(this.client.getEndpoint(), this.client.getApiVersion(),
                resourceUri, accept, context))
            .<PagedResponse<OccurrenceExtensionResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List OccurrenceExtensionResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation as paginated response with
     * {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<OccurrenceExtensionResourceInner> listOccurrenceByVmsAsync(String resourceUri) {
        return new PagedFlux<>(() -> listOccurrenceByVmsSinglePageAsync(resourceUri),
            nextLink -> listOccurrenceByVmsNextSinglePageAsync(nextLink));
    }

    /**
     * List OccurrenceExtensionResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceExtensionResourceInner> listOccurrenceByVmsSinglePage(String resourceUri) {
        final String accept = "application/json";
        Response<OccurrenceExtensionResourceListResult> res = service.listOccurrenceByVmsSync(this.client.getEndpoint(),
            this.client.getApiVersion(), resourceUri, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List OccurrenceExtensionResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceExtensionResourceInner> listOccurrenceByVmsSinglePage(String resourceUri,
        Context context) {
        final String accept = "application/json";
        Response<OccurrenceExtensionResourceListResult> res = service.listOccurrenceByVmsSync(this.client.getEndpoint(),
            this.client.getApiVersion(), resourceUri, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List OccurrenceExtensionResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OccurrenceExtensionResourceInner> listOccurrenceByVms(String resourceUri) {
        return new PagedIterable<>(() -> listOccurrenceByVmsSinglePage(resourceUri),
            nextLink -> listOccurrenceByVmsNextSinglePage(nextLink));
    }

    /**
     * List OccurrenceExtensionResource resources by parent.
     * 
     * @param resourceUri The fully qualified Azure Resource manager identifier of the resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation as paginated response with
     * {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<OccurrenceExtensionResourceInner> listOccurrenceByVms(String resourceUri, Context context) {
        return new PagedIterable<>(() -> listOccurrenceByVmsSinglePage(resourceUri, context),
            nextLink -> listOccurrenceByVmsNextSinglePage(nextLink, context));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation along with {@link PagedResponse} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<OccurrenceExtensionResourceInner>>
        listOccurrenceByVmsNextSinglePageAsync(String nextLink) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.listOccurrenceByVmsNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<OccurrenceExtensionResourceInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceExtensionResourceInner> listOccurrenceByVmsNextSinglePage(String nextLink) {
        final String accept = "application/json";
        Response<OccurrenceExtensionResourceListResult> res
            = service.listOccurrenceByVmsNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a OccurrenceExtensionResource list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<OccurrenceExtensionResourceInner> listOccurrenceByVmsNextSinglePage(String nextLink,
        Context context) {
        final String accept = "application/json";
        Response<OccurrenceExtensionResourceListResult> res
            = service.listOccurrenceByVmsNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }
}
