// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The status of a resource after a resource level operation was performed.
 */
@Immutable
public final class ResourceStatus implements JsonSerializable<ResourceStatus> {
    /*
     * The arm identifier of the resource
     */
    private String resourceId;

    /*
     * The state the resource is currently on
     */
    private ResourceOperationStatus status;

    /*
     * Errors encountered while trying to perform
     */
    private Error error;

    /**
     * Creates an instance of ResourceStatus class.
     */
    private ResourceStatus() {
    }

    /**
     * Get the resourceId property: The arm identifier of the resource.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the status property: The state the resource is currently on.
     * 
     * @return the status value.
     */
    public ResourceOperationStatus status() {
        return this.status;
    }

    /**
     * Get the error property: Errors encountered while trying to perform.
     * 
     * @return the error value.
     */
    public Error error() {
        return this.error;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceId in model ResourceStatus"));
        }
        if (status() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property status in model ResourceStatus"));
        }
        if (error() != null) {
            error().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceStatus.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceStatus.
     */
    public static ResourceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceStatus deserializedResourceStatus = new ResourceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedResourceStatus.resourceId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedResourceStatus.status = ResourceOperationStatus.fromString(reader.getString());
                } else if ("error".equals(fieldName)) {
                    deserializedResourceStatus.error = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceStatus;
        });
    }
}
