// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The properties of the occurrence extension.
 */
@Immutable
public final class OccurrenceExtensionProperties implements JsonSerializable<OccurrenceExtensionProperties> {
    /*
     * The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}"
     */
    private String resourceId;

    /*
     * The desired notification settings for the specified resource.
     */
    private List<NotificationProperties> notificationSettings;

    /*
     * The time the occurrence is scheduled for the resource. Specified in UTC.
     */
    private OffsetDateTime scheduledTime;

    /*
     * The current state of the resource
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Error details for the resource. Only populated if resource is in failed state.
     */
    private Error errorDetails;

    /*
     * The arm identifier of the scheduled action the occurrence belongs to
     */
    private String scheduledActionId;

    /**
     * Creates an instance of OccurrenceExtensionProperties class.
     */
    private OccurrenceExtensionProperties() {
    }

    /**
     * Get the resourceId property: The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}".
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the notificationSettings property: The desired notification settings for the specified resource.
     * 
     * @return the notificationSettings value.
     */
    public List<NotificationProperties> notificationSettings() {
        return this.notificationSettings;
    }

    /**
     * Get the scheduledTime property: The time the occurrence is scheduled for the resource. Specified in UTC.
     * 
     * @return the scheduledTime value.
     */
    public OffsetDateTime scheduledTime() {
        return this.scheduledTime;
    }

    /**
     * Get the provisioningState property: The current state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errorDetails property: Error details for the resource. Only populated if resource is in failed state.
     * 
     * @return the errorDetails value.
     */
    public Error errorDetails() {
        return this.errorDetails;
    }

    /**
     * Get the scheduledActionId property: The arm identifier of the scheduled action the occurrence belongs to.
     * 
     * @return the scheduledActionId value.
     */
    public String scheduledActionId() {
        return this.scheduledActionId;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model OccurrenceExtensionProperties"));
        }
        if (notificationSettings() != null) {
            notificationSettings().forEach(e -> e.validate());
        }
        if (errorDetails() != null) {
            errorDetails().validate();
        }
        if (scheduledActionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property scheduledActionId in model OccurrenceExtensionProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(OccurrenceExtensionProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("scheduledActionId", this.scheduledActionId);
        jsonWriter.writeArrayField("notificationSettings", this.notificationSettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OccurrenceExtensionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OccurrenceExtensionProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OccurrenceExtensionProperties.
     */
    public static OccurrenceExtensionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OccurrenceExtensionProperties deserializedOccurrenceExtensionProperties
                = new OccurrenceExtensionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceId".equals(fieldName)) {
                    deserializedOccurrenceExtensionProperties.resourceId = reader.getString();
                } else if ("scheduledTime".equals(fieldName)) {
                    deserializedOccurrenceExtensionProperties.scheduledTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("scheduledActionId".equals(fieldName)) {
                    deserializedOccurrenceExtensionProperties.scheduledActionId = reader.getString();
                } else if ("notificationSettings".equals(fieldName)) {
                    List<NotificationProperties> notificationSettings
                        = reader.readArray(reader1 -> NotificationProperties.fromJson(reader1));
                    deserializedOccurrenceExtensionProperties.notificationSettings = notificationSettings;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOccurrenceExtensionProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedOccurrenceExtensionProperties.errorDetails = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOccurrenceExtensionProperties;
        });
    }
}
