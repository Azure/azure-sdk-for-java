// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Properties for an occurrence.
 */
@Immutable
public final class OccurrenceProperties implements JsonSerializable<OccurrenceProperties> {
    /*
     * The time the occurrence is scheduled for. This value can be changed by calling the delay API
     */
    private OffsetDateTime scheduledTime;

    /*
     * The result for occurrences that achieved a terminal state
     */
    private OccurrenceResultSummary resultSummary;

    /*
     * The aggregated provisioning state of the occurrence
     */
    private OccurrenceState provisioningState;

    /**
     * Creates an instance of OccurrenceProperties class.
     */
    private OccurrenceProperties() {
    }

    /**
     * Get the scheduledTime property: The time the occurrence is scheduled for. This value can be changed by calling
     * the delay API.
     * 
     * @return the scheduledTime value.
     */
    public OffsetDateTime scheduledTime() {
        return this.scheduledTime;
    }

    /**
     * Get the resultSummary property: The result for occurrences that achieved a terminal state.
     * 
     * @return the resultSummary value.
     */
    public OccurrenceResultSummary resultSummary() {
        return this.resultSummary;
    }

    /**
     * Get the provisioningState property: The aggregated provisioning state of the occurrence.
     * 
     * @return the provisioningState value.
     */
    public OccurrenceState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resultSummary() != null) {
            resultSummary().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OccurrenceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OccurrenceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OccurrenceProperties.
     */
    public static OccurrenceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OccurrenceProperties deserializedOccurrenceProperties = new OccurrenceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduledTime".equals(fieldName)) {
                    deserializedOccurrenceProperties.scheduledTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("resultSummary".equals(fieldName)) {
                    deserializedOccurrenceProperties.resultSummary = OccurrenceResultSummary.fromJson(reader);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOccurrenceProperties.provisioningState = OccurrenceState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOccurrenceProperties;
        });
    }
}
