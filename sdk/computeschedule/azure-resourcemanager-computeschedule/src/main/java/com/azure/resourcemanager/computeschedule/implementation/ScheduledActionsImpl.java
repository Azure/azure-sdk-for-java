// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.computeschedule.fluent.ScheduledActionsClient;
import com.azure.resourcemanager.computeschedule.fluent.models.CancelOperationsResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.DeallocateResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.GetOperationErrorsResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.GetOperationStatusResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.HibernateResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.StartResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.models.CancelOperationsRequest;
import com.azure.resourcemanager.computeschedule.models.CancelOperationsResponse;
import com.azure.resourcemanager.computeschedule.models.DeallocateResourceOperationResponse;
import com.azure.resourcemanager.computeschedule.models.ExecuteDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteHibernateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteStartRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationErrorsRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationErrorsResponse;
import com.azure.resourcemanager.computeschedule.models.GetOperationStatusRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationStatusResponse;
import com.azure.resourcemanager.computeschedule.models.HibernateResourceOperationResponse;
import com.azure.resourcemanager.computeschedule.models.ScheduledActions;
import com.azure.resourcemanager.computeschedule.models.StartResourceOperationResponse;
import com.azure.resourcemanager.computeschedule.models.SubmitDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitHibernateRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitStartRequest;

public final class ScheduledActionsImpl implements ScheduledActions {
    private static final ClientLogger LOGGER = new ClientLogger(ScheduledActionsImpl.class);

    private final ScheduledActionsClient innerClient;

    private final com.azure.resourcemanager.computeschedule.ComputeScheduleManager serviceManager;

    public ScheduledActionsImpl(ScheduledActionsClient innerClient,
        com.azure.resourcemanager.computeschedule.ComputeScheduleManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<DeallocateResourceOperationResponse> virtualMachinesSubmitDeallocateWithResponse(
        String locationparameter, SubmitDeallocateRequest requestBody, Context context) {
        Response<DeallocateResourceOperationResponseInner> inner
            = this.serviceClient().virtualMachinesSubmitDeallocateWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeallocateResourceOperationResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeallocateResourceOperationResponse virtualMachinesSubmitDeallocate(String locationparameter,
        SubmitDeallocateRequest requestBody) {
        DeallocateResourceOperationResponseInner inner
            = this.serviceClient().virtualMachinesSubmitDeallocate(locationparameter, requestBody);
        if (inner != null) {
            return new DeallocateResourceOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HibernateResourceOperationResponse> virtualMachinesSubmitHibernateWithResponse(
        String locationparameter, SubmitHibernateRequest requestBody, Context context) {
        Response<HibernateResourceOperationResponseInner> inner
            = this.serviceClient().virtualMachinesSubmitHibernateWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HibernateResourceOperationResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HibernateResourceOperationResponse virtualMachinesSubmitHibernate(String locationparameter,
        SubmitHibernateRequest requestBody) {
        HibernateResourceOperationResponseInner inner
            = this.serviceClient().virtualMachinesSubmitHibernate(locationparameter, requestBody);
        if (inner != null) {
            return new HibernateResourceOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StartResourceOperationResponse> virtualMachinesSubmitStartWithResponse(String locationparameter,
        SubmitStartRequest requestBody, Context context) {
        Response<StartResourceOperationResponseInner> inner
            = this.serviceClient().virtualMachinesSubmitStartWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StartResourceOperationResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StartResourceOperationResponse virtualMachinesSubmitStart(String locationparameter,
        SubmitStartRequest requestBody) {
        StartResourceOperationResponseInner inner
            = this.serviceClient().virtualMachinesSubmitStart(locationparameter, requestBody);
        if (inner != null) {
            return new StartResourceOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<DeallocateResourceOperationResponse> virtualMachinesExecuteDeallocateWithResponse(
        String locationparameter, ExecuteDeallocateRequest requestBody, Context context) {
        Response<DeallocateResourceOperationResponseInner> inner = this.serviceClient()
            .virtualMachinesExecuteDeallocateWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new DeallocateResourceOperationResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public DeallocateResourceOperationResponse virtualMachinesExecuteDeallocate(String locationparameter,
        ExecuteDeallocateRequest requestBody) {
        DeallocateResourceOperationResponseInner inner
            = this.serviceClient().virtualMachinesExecuteDeallocate(locationparameter, requestBody);
        if (inner != null) {
            return new DeallocateResourceOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HibernateResourceOperationResponse> virtualMachinesExecuteHibernateWithResponse(
        String locationparameter, ExecuteHibernateRequest requestBody, Context context) {
        Response<HibernateResourceOperationResponseInner> inner
            = this.serviceClient().virtualMachinesExecuteHibernateWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new HibernateResourceOperationResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public HibernateResourceOperationResponse virtualMachinesExecuteHibernate(String locationparameter,
        ExecuteHibernateRequest requestBody) {
        HibernateResourceOperationResponseInner inner
            = this.serviceClient().virtualMachinesExecuteHibernate(locationparameter, requestBody);
        if (inner != null) {
            return new HibernateResourceOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StartResourceOperationResponse> virtualMachinesExecuteStartWithResponse(String locationparameter,
        ExecuteStartRequest requestBody, Context context) {
        Response<StartResourceOperationResponseInner> inner
            = this.serviceClient().virtualMachinesExecuteStartWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new StartResourceOperationResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StartResourceOperationResponse virtualMachinesExecuteStart(String locationparameter,
        ExecuteStartRequest requestBody) {
        StartResourceOperationResponseInner inner
            = this.serviceClient().virtualMachinesExecuteStart(locationparameter, requestBody);
        if (inner != null) {
            return new StartResourceOperationResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetOperationStatusResponse> virtualMachinesGetOperationStatusWithResponse(String locationparameter,
        GetOperationStatusRequest requestBody, Context context) {
        Response<GetOperationStatusResponseInner> inner = this.serviceClient()
            .virtualMachinesGetOperationStatusWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetOperationStatusResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetOperationStatusResponse virtualMachinesGetOperationStatus(String locationparameter,
        GetOperationStatusRequest requestBody) {
        GetOperationStatusResponseInner inner
            = this.serviceClient().virtualMachinesGetOperationStatus(locationparameter, requestBody);
        if (inner != null) {
            return new GetOperationStatusResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CancelOperationsResponse> virtualMachinesCancelOperationsWithResponse(String locationparameter,
        CancelOperationsRequest requestBody, Context context) {
        Response<CancelOperationsResponseInner> inner
            = this.serviceClient().virtualMachinesCancelOperationsWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new CancelOperationsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public CancelOperationsResponse virtualMachinesCancelOperations(String locationparameter,
        CancelOperationsRequest requestBody) {
        CancelOperationsResponseInner inner
            = this.serviceClient().virtualMachinesCancelOperations(locationparameter, requestBody);
        if (inner != null) {
            return new CancelOperationsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<GetOperationErrorsResponse> virtualMachinesGetOperationErrorsWithResponse(String locationparameter,
        GetOperationErrorsRequest requestBody, Context context) {
        Response<GetOperationErrorsResponseInner> inner = this.serviceClient()
            .virtualMachinesGetOperationErrorsWithResponse(locationparameter, requestBody, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new GetOperationErrorsResponseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public GetOperationErrorsResponse virtualMachinesGetOperationErrors(String locationparameter,
        GetOperationErrorsRequest requestBody) {
        GetOperationErrorsResponseInner inner
            = this.serviceClient().virtualMachinesGetOperationErrors(locationparameter, requestBody);
        if (inner != null) {
            return new GetOperationErrorsResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private ScheduledActionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.computeschedule.ComputeScheduleManager manager() {
        return this.serviceManager;
    }
}
