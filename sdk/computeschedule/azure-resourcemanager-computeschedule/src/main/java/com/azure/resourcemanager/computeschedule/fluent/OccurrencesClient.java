// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.computeschedule.fluent.models.OccurrenceInner;
import com.azure.resourcemanager.computeschedule.fluent.models.OccurrenceResourceListResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.RecurringActionsResourceOperationResultInner;
import com.azure.resourcemanager.computeschedule.models.CancelOccurrenceRequest;
import com.azure.resourcemanager.computeschedule.models.DelayRequest;

/**
 * An instance of this class provides access to all the operations defined in OccurrencesClient.
 */
public interface OccurrencesClient {
    /**
     * Get a Occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Occurrence along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OccurrenceInner> getWithResponse(String resourceGroupName, String scheduledActionName, String occurrenceId,
        Context context);

    /**
     * Get a Occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Occurrence.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OccurrenceInner get(String resourceGroupName, String scheduledActionName, String occurrenceId);

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OccurrenceInner> listByScheduledAction(String resourceGroupName, String scheduledActionName);

    /**
     * List Occurrence resources by ScheduledAction.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Occurrence list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<OccurrenceInner> listByScheduledAction(String resourceGroupName, String scheduledActionName,
        Context context);

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<OccurrenceResourceListResponseInner> listResourcesWithResponse(String resourceGroupName,
        String scheduledActionName, String occurrenceId, Context context);

    /**
     * List resources attached to Scheduled Actions for the given occurrence.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of OccurrenceResource items.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    OccurrenceResourceListResponseInner listResources(String resourceGroupName, String scheduledActionName,
        String occurrenceId);

    /**
     * A synchronous resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from scheduled action resource requests, which contains the status of each resource along
     * with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<RecurringActionsResourceOperationResultInner> cancelWithResponse(String resourceGroupName,
        String scheduledActionName, String occurrenceId, CancelOccurrenceRequest body, Context context);

    /**
     * A synchronous resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from scheduled action resource requests, which contains the status of each resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecurringActionsResourceOperationResultInner cancel(String resourceGroupName, String scheduledActionName,
        String occurrenceId, CancelOccurrenceRequest body);

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RecurringActionsResourceOperationResultInner>, RecurringActionsResourceOperationResultInner>
        beginDelay(String resourceGroupName, String scheduledActionName, String occurrenceId, DelayRequest body);

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<RecurringActionsResourceOperationResultInner>, RecurringActionsResourceOperationResultInner>
        beginDelay(String resourceGroupName, String scheduledActionName, String occurrenceId, DelayRequest body,
            Context context);

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecurringActionsResourceOperationResultInner delay(String resourceGroupName, String scheduledActionName,
        String occurrenceId, DelayRequest body);

    /**
     * A long-running resource action.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param scheduledActionName The name of the ScheduledAction.
     * @param occurrenceId The name of the Occurrence.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    RecurringActionsResourceOperationResultInner delay(String resourceGroupName, String scheduledActionName,
        String occurrenceId, DelayRequest body, Context context);
}
