// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.computeschedule.models.NotificationProperties;
import java.io.IOException;
import java.util.List;

/**
 * Represents an scheduled action resource metadata.
 */
@Fluent
public final class ScheduledActionResourceInner implements JsonSerializable<ScheduledActionResourceInner> {
    /*
     * The name of the resource
     */
    private String name;

    /*
     * The compute RP resource id of the resource in the scheduled actions scope.
     */
    private String id;

    /*
     * The type of resource
     */
    private String type;

    /*
     * The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}"
     */
    private String resourceId;

    /*
     * The desired notification settings for the specified resource.
     */
    private List<NotificationProperties> notificationSettings;

    /**
     * Creates an instance of ScheduledActionResourceInner class.
     */
    public ScheduledActionResourceInner() {
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: The compute RP resource id of the resource in the scheduled actions scope.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the type property: The type of resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the resourceId property: The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}".
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Set the resourceId property: The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}".
     * 
     * @param resourceId the resourceId value to set.
     * @return the ScheduledActionResourceInner object itself.
     */
    public ScheduledActionResourceInner withResourceId(String resourceId) {
        this.resourceId = resourceId;
        return this;
    }

    /**
     * Get the notificationSettings property: The desired notification settings for the specified resource.
     * 
     * @return the notificationSettings value.
     */
    public List<NotificationProperties> notificationSettings() {
        return this.notificationSettings;
    }

    /**
     * Set the notificationSettings property: The desired notification settings for the specified resource.
     * 
     * @param notificationSettings the notificationSettings value to set.
     * @return the ScheduledActionResourceInner object itself.
     */
    public ScheduledActionResourceInner withNotificationSettings(List<NotificationProperties> notificationSettings) {
        this.notificationSettings = notificationSettings;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model ScheduledActionResourceInner"));
        }
        if (notificationSettings() != null) {
            notificationSettings().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ScheduledActionResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeArrayField("notificationSettings", this.notificationSettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduledActionResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduledActionResourceInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ScheduledActionResourceInner.
     */
    public static ScheduledActionResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduledActionResourceInner deserializedScheduledActionResourceInner = new ScheduledActionResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedScheduledActionResourceInner.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedScheduledActionResourceInner.id = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedScheduledActionResourceInner.resourceId = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedScheduledActionResourceInner.type = reader.getString();
                } else if ("notificationSettings".equals(fieldName)) {
                    List<NotificationProperties> notificationSettings
                        = reader.readArray(reader1 -> NotificationProperties.fromJson(reader1));
                    deserializedScheduledActionResourceInner.notificationSettings = notificationSettings;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduledActionResourceInner;
        });
    }
}
