// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.computeschedule.models.Error;
import com.azure.resourcemanager.computeschedule.models.NotificationProperties;
import com.azure.resourcemanager.computeschedule.models.ResourceProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Represents an scheduled action resource metadata.
 */
@Immutable
public final class OccurrenceResourceInner implements JsonSerializable<OccurrenceResourceInner> {
    /*
     * The name of the resource
     */
    private String name;

    /*
     * The compute RP resource id of the resource in the scheduled actions scope.
     */
    private String id;

    /*
     * The type of resource
     */
    private String type;

    /*
     * The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}"
     */
    private String resourceId;

    /*
     * The desired notification settings for the specified resource.
     */
    private List<NotificationProperties> notificationSettings;

    /*
     * The time the occurrence is scheduled for the resource.
     */
    private OffsetDateTime scheduledTime;

    /*
     * The current state of the resource
     */
    private ResourceProvisioningState provisioningState;

    /*
     * Error details for the resource. Only populated if resource is in failed state.
     */
    private Error errorDetails;

    /**
     * Creates an instance of OccurrenceResourceInner class.
     */
    private OccurrenceResourceInner() {
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: The compute RP resource id of the resource in the scheduled actions scope.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Get the type property: The type of resource.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the resourceId property: The ARM Id of the resource.
     * "subscriptions/{subId}/resourceGroups/{rgName}/providers/Microsoft.Compute/virtualMachines/{vmName}".
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the notificationSettings property: The desired notification settings for the specified resource.
     * 
     * @return the notificationSettings value.
     */
    public List<NotificationProperties> notificationSettings() {
        return this.notificationSettings;
    }

    /**
     * Get the scheduledTime property: The time the occurrence is scheduled for the resource.
     * 
     * @return the scheduledTime value.
     */
    public OffsetDateTime scheduledTime() {
        return this.scheduledTime;
    }

    /**
     * Get the provisioningState property: The current state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the errorDetails property: Error details for the resource. Only populated if resource is in failed state.
     * 
     * @return the errorDetails value.
     */
    public Error errorDetails() {
        return this.errorDetails;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeArrayField("notificationSettings", this.notificationSettings,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OccurrenceResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OccurrenceResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OccurrenceResourceInner.
     */
    public static OccurrenceResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OccurrenceResourceInner deserializedOccurrenceResourceInner = new OccurrenceResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.name = reader.getString();
                } else if ("id".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.id = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.resourceId = reader.getString();
                } else if ("scheduledTime".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.scheduledTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.type = reader.getString();
                } else if ("notificationSettings".equals(fieldName)) {
                    List<NotificationProperties> notificationSettings
                        = reader.readArray(reader1 -> NotificationProperties.fromJson(reader1));
                    deserializedOccurrenceResourceInner.notificationSettings = notificationSettings;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else if ("errorDetails".equals(fieldName)) {
                    deserializedOccurrenceResourceInner.errorDetails = Error.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOccurrenceResourceInner;
        });
    }
}
