// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.computeschedule.fluent.models.CancelOperationsResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.DeallocateResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.GetOperationErrorsResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.GetOperationStatusResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.HibernateResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.fluent.models.StartResourceOperationResponseInner;
import com.azure.resourcemanager.computeschedule.models.CancelOperationsRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteHibernateRequest;
import com.azure.resourcemanager.computeschedule.models.ExecuteStartRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationErrorsRequest;
import com.azure.resourcemanager.computeschedule.models.GetOperationStatusRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitDeallocateRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitHibernateRequest;
import com.azure.resourcemanager.computeschedule.models.SubmitStartRequest;

/**
 * An instance of this class provides access to all the operations defined in ScheduledActionsClient.
 */
public interface ScheduledActionsClient {
    /**
     * virtualMachinesSubmitDeallocate: submitDeallocate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DeallocateResourceOperationResponseInner> virtualMachinesSubmitDeallocateWithResponse(
        String locationparameter, SubmitDeallocateRequest requestBody, Context context);

    /**
     * virtualMachinesSubmitDeallocate: submitDeallocate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeallocateResourceOperationResponseInner virtualMachinesSubmitDeallocate(String locationparameter,
        SubmitDeallocateRequest requestBody);

    /**
     * virtualMachinesSubmitHibernate: submitHibernate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HibernateResourceOperationResponseInner> virtualMachinesSubmitHibernateWithResponse(
        String locationparameter, SubmitHibernateRequest requestBody, Context context);

    /**
     * virtualMachinesSubmitHibernate: submitHibernate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HibernateResourceOperationResponseInner virtualMachinesSubmitHibernate(String locationparameter,
        SubmitHibernateRequest requestBody);

    /**
     * virtualMachinesSubmitStart: submitStart for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StartResourceOperationResponseInner> virtualMachinesSubmitStartWithResponse(String locationparameter,
        SubmitStartRequest requestBody, Context context);

    /**
     * virtualMachinesSubmitStart: submitStart for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StartResourceOperationResponseInner virtualMachinesSubmitStart(String locationparameter,
        SubmitStartRequest requestBody);

    /**
     * virtualMachinesExecuteDeallocate: executeDeallocate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DeallocateResourceOperationResponseInner> virtualMachinesExecuteDeallocateWithResponse(
        String locationparameter, ExecuteDeallocateRequest requestBody, Context context);

    /**
     * virtualMachinesExecuteDeallocate: executeDeallocate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a deallocate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DeallocateResourceOperationResponseInner virtualMachinesExecuteDeallocate(String locationparameter,
        ExecuteDeallocateRequest requestBody);

    /**
     * virtualMachinesExecuteHibernate: executeHibernate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HibernateResourceOperationResponseInner> virtualMachinesExecuteHibernateWithResponse(
        String locationparameter, ExecuteHibernateRequest requestBody, Context context);

    /**
     * virtualMachinesExecuteHibernate: executeHibernate for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a Hibernate request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HibernateResourceOperationResponseInner virtualMachinesExecuteHibernate(String locationparameter,
        ExecuteHibernateRequest requestBody);

    /**
     * virtualMachinesExecuteStart: executeStart for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<StartResourceOperationResponseInner> virtualMachinesExecuteStartWithResponse(String locationparameter,
        ExecuteStartRequest requestBody, Context context);

    /**
     * virtualMachinesExecuteStart: executeStart for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response from a start request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    StartResourceOperationResponseInner virtualMachinesExecuteStart(String locationparameter,
        ExecuteStartRequest requestBody);

    /**
     * virtualMachinesGetOperationStatus: getOperationStatus for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetOperationStatusResponseInner> virtualMachinesGetOperationStatusWithResponse(String locationparameter,
        GetOperationStatusRequest requestBody, Context context);

    /**
     * virtualMachinesGetOperationStatus: getOperationStatus for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations status request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetOperationStatusResponseInner virtualMachinesGetOperationStatus(String locationparameter,
        GetOperationStatusRequest requestBody);

    /**
     * virtualMachinesCancelOperations: cancelOperations for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CancelOperationsResponseInner> virtualMachinesCancelOperationsWithResponse(String locationparameter,
        CancelOperationsRequest requestBody, Context context);

    /**
     * virtualMachinesCancelOperations: cancelOperations for a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a cancel operations request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CancelOperationsResponseInner virtualMachinesCancelOperations(String locationparameter,
        CancelOperationsRequest requestBody);

    /**
     * virtualMachinesGetOperationErrors: getOperationErrors associated with an operation on a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<GetOperationErrorsResponseInner> virtualMachinesGetOperationErrorsWithResponse(String locationparameter,
        GetOperationErrorsRequest requestBody, Context context);

    /**
     * virtualMachinesGetOperationErrors: getOperationErrors associated with an operation on a virtual machine.
     * 
     * @param locationparameter The location name.
     * @param requestBody The request body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return this is the response from a get operations errors request.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    GetOperationErrorsResponseInner virtualMachinesGetOperationErrors(String locationparameter,
        GetOperationErrorsRequest requestBody);
}
