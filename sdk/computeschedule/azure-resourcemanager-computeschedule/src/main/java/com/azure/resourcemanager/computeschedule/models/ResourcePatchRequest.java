// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Request model perform a resource operation in a list of resources.
 */
@Fluent
public final class ResourcePatchRequest implements JsonSerializable<ResourcePatchRequest> {
    /*
     * The list of resources we watch to patch
     */
    private List<ScheduledActionResource> resources;

    /**
     * Creates an instance of ResourcePatchRequest class.
     */
    public ResourcePatchRequest() {
    }

    /**
     * Get the resources property: The list of resources we watch to patch.
     * 
     * @return the resources value.
     */
    public List<ScheduledActionResource> resources() {
        return this.resources;
    }

    /**
     * Set the resources property: The list of resources we watch to patch.
     * 
     * @param resources the resources value to set.
     * @return the ResourcePatchRequest object itself.
     */
    public ResourcePatchRequest withResources(List<ScheduledActionResource> resources) {
        this.resources = resources;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resources() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resources in model ResourcePatchRequest"));
        } else {
            resources().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourcePatchRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("resources", this.resources, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourcePatchRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourcePatchRequest if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourcePatchRequest.
     */
    public static ResourcePatchRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourcePatchRequest deserializedResourcePatchRequest = new ResourcePatchRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resources".equals(fieldName)) {
                    List<ScheduledActionResource> resources
                        = reader.readArray(reader1 -> ScheduledActionResource.fromJson(reader1));
                    deserializedResourcePatchRequest.resources = resources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourcePatchRequest;
        });
    }
}
