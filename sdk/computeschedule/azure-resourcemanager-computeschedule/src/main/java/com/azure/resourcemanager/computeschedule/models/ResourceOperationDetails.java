// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.computeschedule.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The details of a response from an operation on a resource.
 */
@Immutable
public final class ResourceOperationDetails implements JsonSerializable<ResourceOperationDetails> {
    /*
     * Operation identifier for the unique operation
     */
    private String operationId;

    /*
     * Unique identifier for the resource involved in the operation, eg ArmId
     */
    private String resourceId;

    /*
     * Type of operation performed on the resources
     */
    private ResourceOperationType opType;

    /*
     * Subscription id attached to the request
     */
    private String subscriptionId;

    /*
     * Deadline for the operation
     */
    private OffsetDateTime deadline;

    /*
     * Type of deadline of the operation
     */
    private DeadlineType deadlineType;

    /*
     * Current state of the operation
     */
    private OperationState state;

    /*
     * Timezone for the operation
     */
    private String timeZone;

    /*
     * Operation level errors if they exist
     */
    private ResourceOperationError resourceOperationError;

    /*
     * Time the operation was complete if errors are null
     */
    private OffsetDateTime completedAt;

    /*
     * Retry policy the user can pass
     */
    private RetryPolicy retryPolicy;

    /**
     * Creates an instance of ResourceOperationDetails class.
     */
    private ResourceOperationDetails() {
    }

    /**
     * Get the operationId property: Operation identifier for the unique operation.
     * 
     * @return the operationId value.
     */
    public String operationId() {
        return this.operationId;
    }

    /**
     * Get the resourceId property: Unique identifier for the resource involved in the operation, eg ArmId.
     * 
     * @return the resourceId value.
     */
    public String resourceId() {
        return this.resourceId;
    }

    /**
     * Get the opType property: Type of operation performed on the resources.
     * 
     * @return the opType value.
     */
    public ResourceOperationType opType() {
        return this.opType;
    }

    /**
     * Get the subscriptionId property: Subscription id attached to the request.
     * 
     * @return the subscriptionId value.
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the deadline property: Deadline for the operation.
     * 
     * @return the deadline value.
     */
    public OffsetDateTime deadline() {
        return this.deadline;
    }

    /**
     * Get the deadlineType property: Type of deadline of the operation.
     * 
     * @return the deadlineType value.
     */
    public DeadlineType deadlineType() {
        return this.deadlineType;
    }

    /**
     * Get the state property: Current state of the operation.
     * 
     * @return the state value.
     */
    public OperationState state() {
        return this.state;
    }

    /**
     * Get the timeZone property: Timezone for the operation.
     * 
     * @return the timeZone value.
     */
    public String timeZone() {
        return this.timeZone;
    }

    /**
     * Get the resourceOperationError property: Operation level errors if they exist.
     * 
     * @return the resourceOperationError value.
     */
    public ResourceOperationError resourceOperationError() {
        return this.resourceOperationError;
    }

    /**
     * Get the completedAt property: Time the operation was complete if errors are null.
     * 
     * @return the completedAt value.
     */
    public OffsetDateTime completedAt() {
        return this.completedAt;
    }

    /**
     * Get the retryPolicy property: Retry policy the user can pass.
     * 
     * @return the retryPolicy value.
     */
    public RetryPolicy retryPolicy() {
        return this.retryPolicy;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (operationId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property operationId in model ResourceOperationDetails"));
        }
        if (resourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property resourceId in model ResourceOperationDetails"));
        }
        if (opType() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property opType in model ResourceOperationDetails"));
        }
        if (subscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property subscriptionId in model ResourceOperationDetails"));
        }
        if (deadline() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property deadline in model ResourceOperationDetails"));
        }
        if (deadlineType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property deadlineType in model ResourceOperationDetails"));
        }
        if (state() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property state in model ResourceOperationDetails"));
        }
        if (resourceOperationError() != null) {
            resourceOperationError().validate();
        }
        if (retryPolicy() != null) {
            retryPolicy().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceOperationDetails.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", this.operationId);
        jsonWriter.writeStringField("resourceId", this.resourceId);
        jsonWriter.writeStringField("opType", this.opType == null ? null : this.opType.toString());
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("deadline",
            this.deadline == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.deadline));
        jsonWriter.writeStringField("deadlineType", this.deadlineType == null ? null : this.deadlineType.toString());
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("timeZone", this.timeZone);
        jsonWriter.writeJsonField("resourceOperationError", this.resourceOperationError);
        jsonWriter.writeStringField("completedAt",
            this.completedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.completedAt));
        jsonWriter.writeJsonField("retryPolicy", this.retryPolicy);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceOperationDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceOperationDetails if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceOperationDetails.
     */
    public static ResourceOperationDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceOperationDetails deserializedResourceOperationDetails = new ResourceOperationDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    deserializedResourceOperationDetails.operationId = reader.getString();
                } else if ("resourceId".equals(fieldName)) {
                    deserializedResourceOperationDetails.resourceId = reader.getString();
                } else if ("opType".equals(fieldName)) {
                    deserializedResourceOperationDetails.opType = ResourceOperationType.fromString(reader.getString());
                } else if ("subscriptionId".equals(fieldName)) {
                    deserializedResourceOperationDetails.subscriptionId = reader.getString();
                } else if ("deadline".equals(fieldName)) {
                    deserializedResourceOperationDetails.deadline = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("deadlineType".equals(fieldName)) {
                    deserializedResourceOperationDetails.deadlineType = DeadlineType.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    deserializedResourceOperationDetails.state = OperationState.fromString(reader.getString());
                } else if ("timeZone".equals(fieldName)) {
                    deserializedResourceOperationDetails.timeZone = reader.getString();
                } else if ("resourceOperationError".equals(fieldName)) {
                    deserializedResourceOperationDetails.resourceOperationError
                        = ResourceOperationError.fromJson(reader);
                } else if ("completedAt".equals(fieldName)) {
                    deserializedResourceOperationDetails.completedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("retryPolicy".equals(fieldName)) {
                    deserializedResourceOperationDetails.retryPolicy = RetryPolicy.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceOperationDetails;
        });
    }
}
