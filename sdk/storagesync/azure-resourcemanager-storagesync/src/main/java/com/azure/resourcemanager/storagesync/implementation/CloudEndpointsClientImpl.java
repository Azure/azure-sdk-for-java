// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.storagesync.fluent.CloudEndpointsClient;
import com.azure.resourcemanager.storagesync.fluent.models.CloudEndpointInner;
import com.azure.resourcemanager.storagesync.fluent.models.PostBackupResponseInner;
import com.azure.resourcemanager.storagesync.models.BackupRequest;
import com.azure.resourcemanager.storagesync.models.CloudEndpointCreateParameters;
import com.azure.resourcemanager.storagesync.models.CloudEndpointsGetResponse;
import com.azure.resourcemanager.storagesync.models.CloudEndpointsListBySyncGroupResponse;
import com.azure.resourcemanager.storagesync.models.CloudEndpointsRestoreheartbeatResponse;
import com.azure.resourcemanager.storagesync.models.PostRestoreRequest;
import com.azure.resourcemanager.storagesync.models.PreRestoreRequest;
import com.azure.resourcemanager.storagesync.models.StorageSyncApiErrorException;
import com.azure.resourcemanager.storagesync.models.TriggerChangeDetectionParameters;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in CloudEndpointsClient. */
public final class CloudEndpointsClientImpl implements CloudEndpointsClient {
    private final ClientLogger logger = new ClientLogger(CloudEndpointsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final CloudEndpointsService service;

    /** The service client containing this operation class. */
    private final MicrosoftStorageSyncImpl client;

    /**
     * Initializes an instance of CloudEndpointsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    CloudEndpointsClientImpl(MicrosoftStorageSyncImpl client) {
        this.service =
            RestProxy.create(CloudEndpointsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftStorageSyncCloudEndpoints to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftStorageSync")
    private interface CloudEndpointsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @BodyParam("application/json") CloudEndpointCreateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<CloudEndpointsGetResponse> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}")
        @ExpectedResponses({200, 202, 204})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<CloudEndpointsListBySyncGroupResponse> listBySyncGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}/prebackup")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> preBackup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @BodyParam("application/json") BackupRequest parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}/postbackup")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> postBackup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @BodyParam("application/json") BackupRequest parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}/prerestore")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> preRestore(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @BodyParam("application/json") PreRestoreRequest parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}/restoreheartbeat")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<CloudEndpointsRestoreheartbeatResponse> restoreheartbeat(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}/postrestore")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> postRestore(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @BodyParam("application/json") PostRestoreRequest parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/cloudEndpoints"
                + "/{cloudEndpointName}/triggerChangeDetection")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> triggerChangeDetection(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("cloudEndpointName") String cloudEndpointName,
            @BodyParam("application/json") TriggerChangeDetectionParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<CloudEndpointInner>, CloudEndpointInner> beginCreateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        return this
            .client
            .<CloudEndpointInner, CloudEndpointInner>getLroResult(
                mono, this.client.getHttpPipeline(), CloudEndpointInner.class, CloudEndpointInner.class, Context.NONE);
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<CloudEndpointInner>, CloudEndpointInner> beginCreateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        return this
            .client
            .<CloudEndpointInner, CloudEndpointInner>getLroResult(
                mono, this.client.getHttpPipeline(), CloudEndpointInner.class, CloudEndpointInner.class, context);
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<CloudEndpointInner>, CloudEndpointInner> beginCreate(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters) {
        return beginCreateAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<CloudEndpointInner>, CloudEndpointInner> beginCreate(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters,
        Context context) {
        return beginCreateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointInner> createAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters) {
        return beginCreateAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointInner> createAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters,
        Context context) {
        return beginCreateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudEndpointInner create(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters) {
        return createAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .block();
    }

    /**
     * Create a new CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return cloud Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudEndpointInner create(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        CloudEndpointCreateParameters parameters,
        Context context) {
        return createAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .block();
    }

    /**
     * Get a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given CloudEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointsGetResponse> getWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given CloudEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointsGetResponse> getWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                accept,
                context);
    }

    /**
     * Get a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given CloudEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointInner> getAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return getWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName)
            .flatMap(
                (CloudEndpointsGetResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given CloudEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudEndpointInner get(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return getAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).block();
    }

    /**
     * Get a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given CloudEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudEndpointsGetResponse getWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context)
            .block();
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                accept,
                context);
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName)
            .getSyncPoller();
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context)
            .getSyncPoller();
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        deleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).block();
    }

    /**
     * Delete a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        deleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context).block();
    }

    /**
     * Get a CloudEndpoint List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CloudEndpoint List.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CloudEndpointInner>> listBySyncGroupSinglePageAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBySyncGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            accept,
                            context))
            .<PagedResponse<CloudEndpointInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        null,
                        res.getDeserializedHeaders()))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a CloudEndpoint List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CloudEndpoint List.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<CloudEndpointInner>> listBySyncGroupSinglePageAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySyncGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        null,
                        res.getDeserializedHeaders()));
    }

    /**
     * Get a CloudEndpoint List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CloudEndpoint List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CloudEndpointInner> listBySyncGroupAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return new PagedFlux<>(
            () -> listBySyncGroupSinglePageAsync(resourceGroupName, storageSyncServiceName, syncGroupName));
    }

    /**
     * Get a CloudEndpoint List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CloudEndpoint List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<CloudEndpointInner> listBySyncGroupAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        return new PagedFlux<>(
            () -> listBySyncGroupSinglePageAsync(resourceGroupName, storageSyncServiceName, syncGroupName, context));
    }

    /**
     * Get a CloudEndpoint List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CloudEndpoint List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CloudEndpointInner> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return new PagedIterable<>(listBySyncGroupAsync(resourceGroupName, storageSyncServiceName, syncGroupName));
    }

    /**
     * Get a CloudEndpoint List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a CloudEndpoint List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<CloudEndpointInner> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        return new PagedIterable<>(
            listBySyncGroupAsync(resourceGroupName, storageSyncServiceName, syncGroupName, context));
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> preBackupWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .preBackup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> preBackupWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .preBackup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginPreBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            preBackupWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginPreBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            preBackupWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginPreBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        return beginPreBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginPreBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        return beginPreBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> preBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        return beginPreBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> preBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        return beginPreBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void preBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        preBackupAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters).block();
    }

    /**
     * Pre Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void preBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        preBackupAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .block();
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postBackupWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .postBackup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postBackupWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .postBackup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<PostBackupResponseInner>, PostBackupResponseInner> beginPostBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            postBackupWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        return this
            .client
            .<PostBackupResponseInner, PostBackupResponseInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                PostBackupResponseInner.class,
                PostBackupResponseInner.class,
                Context.NONE);
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<PostBackupResponseInner>, PostBackupResponseInner> beginPostBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            postBackupWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        return this
            .client
            .<PostBackupResponseInner, PostBackupResponseInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                PostBackupResponseInner.class,
                PostBackupResponseInner.class,
                context);
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<PostBackupResponseInner>, PostBackupResponseInner> beginPostBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        return beginPostBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<PostBackupResponseInner>, PostBackupResponseInner> beginPostBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        return beginPostBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PostBackupResponseInner> postBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        return beginPostBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PostBackupResponseInner> postBackupAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        return beginPostBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PostBackupResponseInner postBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        return postBackupAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .block();
    }

    /**
     * Post Backup a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Backup request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return post Backup Response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public PostBackupResponseInner postBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        return postBackupAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .block();
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> preRestoreWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .preRestore(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> preRestoreWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .preRestore(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginPreRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            preRestoreWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginPreRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            preRestoreWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginPreRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters) {
        return beginPreRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginPreRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters,
        Context context) {
        return beginPreRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> preRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters) {
        return beginPreRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> preRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters,
        Context context) {
        return beginPreRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void preRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters) {
        preRestoreAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .block();
    }

    /**
     * Pre Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void preRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters,
        Context context) {
        preRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .block();
    }

    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointsRestoreheartbeatResponse> restoreheartbeatWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .restoreheartbeat(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<CloudEndpointsRestoreheartbeatResponse> restoreheartbeatWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .restoreheartbeat(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                accept,
                context);
    }

    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> restoreheartbeatAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        return restoreheartbeatWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName)
            .flatMap((CloudEndpointsRestoreheartbeatResponse res) -> Mono.empty());
    }

    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void restoreheartbeat(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        restoreheartbeatAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName).block();
    }

    /**
     * Restore Heartbeat a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CloudEndpointsRestoreheartbeatResponse restoreheartbeatWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        return restoreheartbeatWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context)
            .block();
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postRestoreWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .postRestore(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> postRestoreWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .postRestore(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginPostRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            postRestoreWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginPostRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            postRestoreWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginPostRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters) {
        return beginPostRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginPostRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters,
        Context context) {
        return beginPostRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> postRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters) {
        return beginPostRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> postRestoreAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters,
        Context context) {
        return beginPostRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters) {
        postRestoreAsync(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .block();
    }

    /**
     * Post Restore a given CloudEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Body of Cloud Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void postRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters,
        Context context) {
        postRestoreAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .block();
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerChangeDetectionWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .triggerChangeDetection(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            cloudEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> triggerChangeDetectionWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (cloudEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter cloudEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .triggerChangeDetection(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                cloudEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginTriggerChangeDetectionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            triggerChangeDetectionWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginTriggerChangeDetectionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            triggerChangeDetectionWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginTriggerChangeDetection(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters) {
        return beginTriggerChangeDetectionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginTriggerChangeDetection(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters,
        Context context) {
        return beginTriggerChangeDetectionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerChangeDetectionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters) {
        return beginTriggerChangeDetectionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> triggerChangeDetectionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters,
        Context context) {
        return beginTriggerChangeDetectionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerChangeDetection(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters) {
        triggerChangeDetectionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters)
            .block();
    }

    /**
     * Triggers detection of changes performed on Azure File share connected to the specified Azure File Sync Cloud
     * Endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param cloudEndpointName Name of Cloud Endpoint object.
     * @param parameters Trigger Change Detection Action parameters.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void triggerChangeDetection(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters,
        Context context) {
        triggerChangeDetectionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context)
            .block();
    }
}
