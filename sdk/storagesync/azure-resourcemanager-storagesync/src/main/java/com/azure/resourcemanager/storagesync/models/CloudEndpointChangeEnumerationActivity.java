// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Cloud endpoint change enumeration activity object. */
@Immutable
public final class CloudEndpointChangeEnumerationActivity {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CloudEndpointChangeEnumerationActivity.class);

    /*
     * Last updated timestamp
     */
    @JsonProperty(value = "lastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Change enumeration operation state
     */
    @JsonProperty(value = "operationState", access = JsonProperty.Access.WRITE_ONLY)
    private CloudEndpointChangeEnumerationActivityState operationState;

    /*
     * When non-zero, indicates an issue that is delaying change enumeration
     */
    @JsonProperty(value = "statusCode", access = JsonProperty.Access.WRITE_ONLY)
    private Integer statusCode;

    /*
     * Timestamp when change enumeration started
     */
    @JsonProperty(value = "startedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startedTimestamp;

    /*
     * Count of files processed
     */
    @JsonProperty(value = "processedFilesCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long processedFilesCount;

    /*
     * Count of directories processed
     */
    @JsonProperty(value = "processedDirectoriesCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long processedDirectoriesCount;

    /*
     * Total count of files enumerated
     */
    @JsonProperty(value = "totalFilesCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalFilesCount;

    /*
     * Total count of directories enumerated
     */
    @JsonProperty(value = "totalDirectoriesCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalDirectoriesCount;

    /*
     * Total enumerated size in bytes
     */
    @JsonProperty(value = "totalSizeBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalSizeBytes;

    /*
     * Progress percentage for change enumeration run, excluding processing of
     * deletes
     */
    @JsonProperty(value = "progressPercent", access = JsonProperty.Access.WRITE_ONLY)
    private Integer progressPercent;

    /*
     * Estimate of time remaining for the enumeration run
     */
    @JsonProperty(value = "minutesRemaining", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minutesRemaining;

    /*
     * Change enumeration total counts state
     */
    @JsonProperty(value = "totalCountsState", access = JsonProperty.Access.WRITE_ONLY)
    private CloudEndpointChangeEnumerationTotalCountsState totalCountsState;

    /*
     * Progress percentage for processing deletes. This is done separately from
     * the rest of the enumeration run
     */
    @JsonProperty(value = "deletesProgressPercent", access = JsonProperty.Access.WRITE_ONLY)
    private Integer deletesProgressPercent;

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     *
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the operationState property: Change enumeration operation state.
     *
     * @return the operationState value.
     */
    public CloudEndpointChangeEnumerationActivityState operationState() {
        return this.operationState;
    }

    /**
     * Get the statusCode property: When non-zero, indicates an issue that is delaying change enumeration.
     *
     * @return the statusCode value.
     */
    public Integer statusCode() {
        return this.statusCode;
    }

    /**
     * Get the startedTimestamp property: Timestamp when change enumeration started.
     *
     * @return the startedTimestamp value.
     */
    public OffsetDateTime startedTimestamp() {
        return this.startedTimestamp;
    }

    /**
     * Get the processedFilesCount property: Count of files processed.
     *
     * @return the processedFilesCount value.
     */
    public Long processedFilesCount() {
        return this.processedFilesCount;
    }

    /**
     * Get the processedDirectoriesCount property: Count of directories processed.
     *
     * @return the processedDirectoriesCount value.
     */
    public Long processedDirectoriesCount() {
        return this.processedDirectoriesCount;
    }

    /**
     * Get the totalFilesCount property: Total count of files enumerated.
     *
     * @return the totalFilesCount value.
     */
    public Long totalFilesCount() {
        return this.totalFilesCount;
    }

    /**
     * Get the totalDirectoriesCount property: Total count of directories enumerated.
     *
     * @return the totalDirectoriesCount value.
     */
    public Long totalDirectoriesCount() {
        return this.totalDirectoriesCount;
    }

    /**
     * Get the totalSizeBytes property: Total enumerated size in bytes.
     *
     * @return the totalSizeBytes value.
     */
    public Long totalSizeBytes() {
        return this.totalSizeBytes;
    }

    /**
     * Get the progressPercent property: Progress percentage for change enumeration run, excluding processing of
     * deletes.
     *
     * @return the progressPercent value.
     */
    public Integer progressPercent() {
        return this.progressPercent;
    }

    /**
     * Get the minutesRemaining property: Estimate of time remaining for the enumeration run.
     *
     * @return the minutesRemaining value.
     */
    public Integer minutesRemaining() {
        return this.minutesRemaining;
    }

    /**
     * Get the totalCountsState property: Change enumeration total counts state.
     *
     * @return the totalCountsState value.
     */
    public CloudEndpointChangeEnumerationTotalCountsState totalCountsState() {
        return this.totalCountsState;
    }

    /**
     * Get the deletesProgressPercent property: Progress percentage for processing deletes. This is done separately from
     * the rest of the enumeration run.
     *
     * @return the deletesProgressPercent value.
     */
    public Integer deletesProgressPercent() {
        return this.deletesProgressPercent;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
