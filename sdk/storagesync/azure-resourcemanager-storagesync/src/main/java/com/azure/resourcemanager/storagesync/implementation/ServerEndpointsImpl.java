// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.ServerEndpointsClient;
import com.azure.resourcemanager.storagesync.fluent.models.ServerEndpointInner;
import com.azure.resourcemanager.storagesync.models.RecallActionParameters;
import com.azure.resourcemanager.storagesync.models.ServerEndpoint;
import com.azure.resourcemanager.storagesync.models.ServerEndpoints;
import com.azure.resourcemanager.storagesync.models.ServerEndpointsGetResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ServerEndpointsImpl implements ServerEndpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointsImpl.class);

    private final ServerEndpointsClient innerClient;

    private final com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager;

    public ServerEndpointsImpl(
        ServerEndpointsClient innerClient, com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ServerEndpoint get(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        ServerEndpointInner inner =
            this.serviceClient().get(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName);
        if (inner != null) {
            return new ServerEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServerEndpoint> getWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        ServerEndpointsGetResponse inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServerEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        this.serviceClient().delete(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName);
    }

    public void delete(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context);
    }

    public PagedIterable<ServerEndpoint> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        PagedIterable<ServerEndpointInner> inner =
            this.serviceClient().listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName);
        return Utils.mapPage(inner, inner1 -> new ServerEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerEndpoint> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        PagedIterable<ServerEndpointInner> inner =
            this.serviceClient().listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, context);
        return Utils.mapPage(inner, inner1 -> new ServerEndpointImpl(inner1, this.manager()));
    }

    public void recallAction(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters) {
        this
            .serviceClient()
            .recallAction(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
    }

    public void recallAction(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters,
        Context context) {
        this
            .serviceClient()
            .recallAction(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context);
    }

    public ServerEndpoint getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String serverEndpointName = Utils.getValueFromIdByName(id, "serverEndpoints");
        if (serverEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'serverEndpoints'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, Context.NONE)
            .getValue();
    }

    public Response<ServerEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String serverEndpointName = Utils.getValueFromIdByName(id, "serverEndpoints");
        if (serverEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'serverEndpoints'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String serverEndpointName = Utils.getValueFromIdByName(id, "serverEndpoints");
        if (serverEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'serverEndpoints'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String serverEndpointName = Utils.getValueFromIdByName(id, "serverEndpoints");
        if (serverEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'serverEndpoints'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context);
    }

    private ServerEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagesync.StoragesyncManager manager() {
        return this.serviceManager;
    }

    public ServerEndpointImpl define(String name) {
        return new ServerEndpointImpl(name, this.manager());
    }
}
