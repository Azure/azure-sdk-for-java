// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Server endpoint cloud tiering status object. */
@Immutable
public final class ServerEndpointCloudTieringStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointCloudTieringStatus.class);

    /*
     * Last updated timestamp
     */
    @JsonProperty(value = "lastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Cloud tiering health state.
     */
    @JsonProperty(value = "health", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointHealthState health;

    /*
     * The last updated timestamp of health state
     */
    @JsonProperty(value = "healthLastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime healthLastUpdatedTimestamp;

    /*
     * Last cloud tiering result (HResult)
     */
    @JsonProperty(value = "lastCloudTieringResult", access = JsonProperty.Access.WRITE_ONLY)
    private Integer lastCloudTieringResult;

    /*
     * Last cloud tiering success timestamp
     */
    @JsonProperty(value = "lastSuccessTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSuccessTimestamp;

    /*
     * Information regarding how much local space cloud tiering is saving.
     */
    @JsonProperty(value = "spaceSavings", access = JsonProperty.Access.WRITE_ONLY)
    private CloudTieringSpaceSavings spaceSavings;

    /*
     * Information regarding how well the local cache on the server is
     * performing.
     */
    @JsonProperty(value = "cachePerformance", access = JsonProperty.Access.WRITE_ONLY)
    private CloudTieringCachePerformance cachePerformance;

    /*
     * Information regarding files that failed to be tiered
     */
    @JsonProperty(value = "filesNotTiering", access = JsonProperty.Access.WRITE_ONLY)
    private CloudTieringFilesNotTiering filesNotTiering;

    /*
     * Status of the volume free space policy
     */
    @JsonProperty(value = "volumeFreeSpacePolicyStatus", access = JsonProperty.Access.WRITE_ONLY)
    private CloudTieringVolumeFreeSpacePolicyStatus volumeFreeSpacePolicyStatus;

    /*
     * Status of the date policy
     */
    @JsonProperty(value = "datePolicyStatus", access = JsonProperty.Access.WRITE_ONLY)
    private CloudTieringDatePolicyStatus datePolicyStatus;

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     *
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the health property: Cloud tiering health state.
     *
     * @return the health value.
     */
    public ServerEndpointHealthState health() {
        return this.health;
    }

    /**
     * Get the healthLastUpdatedTimestamp property: The last updated timestamp of health state.
     *
     * @return the healthLastUpdatedTimestamp value.
     */
    public OffsetDateTime healthLastUpdatedTimestamp() {
        return this.healthLastUpdatedTimestamp;
    }

    /**
     * Get the lastCloudTieringResult property: Last cloud tiering result (HResult).
     *
     * @return the lastCloudTieringResult value.
     */
    public Integer lastCloudTieringResult() {
        return this.lastCloudTieringResult;
    }

    /**
     * Get the lastSuccessTimestamp property: Last cloud tiering success timestamp.
     *
     * @return the lastSuccessTimestamp value.
     */
    public OffsetDateTime lastSuccessTimestamp() {
        return this.lastSuccessTimestamp;
    }

    /**
     * Get the spaceSavings property: Information regarding how much local space cloud tiering is saving.
     *
     * @return the spaceSavings value.
     */
    public CloudTieringSpaceSavings spaceSavings() {
        return this.spaceSavings;
    }

    /**
     * Get the cachePerformance property: Information regarding how well the local cache on the server is performing.
     *
     * @return the cachePerformance value.
     */
    public CloudTieringCachePerformance cachePerformance() {
        return this.cachePerformance;
    }

    /**
     * Get the filesNotTiering property: Information regarding files that failed to be tiered.
     *
     * @return the filesNotTiering value.
     */
    public CloudTieringFilesNotTiering filesNotTiering() {
        return this.filesNotTiering;
    }

    /**
     * Get the volumeFreeSpacePolicyStatus property: Status of the volume free space policy.
     *
     * @return the volumeFreeSpacePolicyStatus value.
     */
    public CloudTieringVolumeFreeSpacePolicyStatus volumeFreeSpacePolicyStatus() {
        return this.volumeFreeSpacePolicyStatus;
    }

    /**
     * Get the datePolicyStatus property: Status of the date policy.
     *
     * @return the datePolicyStatus value.
     */
    public CloudTieringDatePolicyStatus datePolicyStatus() {
        return this.datePolicyStatus;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (spaceSavings() != null) {
            spaceSavings().validate();
        }
        if (cachePerformance() != null) {
            cachePerformance().validate();
        }
        if (filesNotTiering() != null) {
            filesNotTiering().validate();
        }
        if (volumeFreeSpacePolicyStatus() != null) {
            volumeFreeSpacePolicyStatus().validate();
        }
        if (datePolicyStatus() != null) {
            datePolicyStatus().validate();
        }
    }
}
