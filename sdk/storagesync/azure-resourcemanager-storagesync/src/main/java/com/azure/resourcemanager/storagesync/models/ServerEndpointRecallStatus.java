// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Server endpoint recall status object. */
@Immutable
public final class ServerEndpointRecallStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointRecallStatus.class);

    /*
     * Last updated timestamp
     */
    @JsonProperty(value = "lastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Total count of recall errors.
     */
    @JsonProperty(value = "totalRecallErrorsCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalRecallErrorsCount;

    /*
     * Array of recall errors
     */
    @JsonProperty(value = "recallErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<ServerEndpointRecallError> recallErrors;

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     *
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the totalRecallErrorsCount property: Total count of recall errors.
     *
     * @return the totalRecallErrorsCount value.
     */
    public Long totalRecallErrorsCount() {
        return this.totalRecallErrorsCount;
    }

    /**
     * Get the recallErrors property: Array of recall errors.
     *
     * @return the recallErrors value.
     */
    public List<ServerEndpointRecallError> recallErrors() {
        return this.recallErrors;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (recallErrors() != null) {
            recallErrors().forEach(e -> e.validate());
        }
    }
}
