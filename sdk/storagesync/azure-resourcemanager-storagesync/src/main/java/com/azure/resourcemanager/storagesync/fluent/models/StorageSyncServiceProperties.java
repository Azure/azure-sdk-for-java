// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.storagesync.models.IncomingTrafficPolicy;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** Storage Sync Service Properties object. */
@Fluent
public final class StorageSyncServiceProperties {
    /*
     * Incoming Traffic Policy
     */
    @JsonProperty(value = "incomingTrafficPolicy")
    private IncomingTrafficPolicy incomingTrafficPolicy;

    /*
     * Storage Sync service status.
     */
    @JsonProperty(value = "storageSyncServiceStatus", access = JsonProperty.Access.WRITE_ONLY)
    private Integer storageSyncServiceStatus;

    /*
     * Storage Sync service Uid
     */
    @JsonProperty(value = "storageSyncServiceUid", access = JsonProperty.Access.WRITE_ONLY)
    private String storageSyncServiceUid;

    /*
     * StorageSyncService Provisioning State
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * StorageSyncService lastWorkflowId
     */
    @JsonProperty(value = "lastWorkflowId", access = JsonProperty.Access.WRITE_ONLY)
    private String lastWorkflowId;

    /*
     * Resource Last Operation Name
     */
    @JsonProperty(value = "lastOperationName", access = JsonProperty.Access.WRITE_ONLY)
    private String lastOperationName;

    /*
     * List of private endpoint connection associated with the specified storage sync service
     */
    @JsonProperty(value = "privateEndpointConnections", access = JsonProperty.Access.WRITE_ONLY)
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /**
     * Get the incomingTrafficPolicy property: Incoming Traffic Policy.
     *
     * @return the incomingTrafficPolicy value.
     */
    public IncomingTrafficPolicy incomingTrafficPolicy() {
        return this.incomingTrafficPolicy;
    }

    /**
     * Set the incomingTrafficPolicy property: Incoming Traffic Policy.
     *
     * @param incomingTrafficPolicy the incomingTrafficPolicy value to set.
     * @return the StorageSyncServiceProperties object itself.
     */
    public StorageSyncServiceProperties withIncomingTrafficPolicy(IncomingTrafficPolicy incomingTrafficPolicy) {
        this.incomingTrafficPolicy = incomingTrafficPolicy;
        return this;
    }

    /**
     * Get the storageSyncServiceStatus property: Storage Sync service status.
     *
     * @return the storageSyncServiceStatus value.
     */
    public Integer storageSyncServiceStatus() {
        return this.storageSyncServiceStatus;
    }

    /**
     * Get the storageSyncServiceUid property: Storage Sync service Uid.
     *
     * @return the storageSyncServiceUid value.
     */
    public String storageSyncServiceUid() {
        return this.storageSyncServiceUid;
    }

    /**
     * Get the provisioningState property: StorageSyncService Provisioning State.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lastWorkflowId property: StorageSyncService lastWorkflowId.
     *
     * @return the lastWorkflowId value.
     */
    public String lastWorkflowId() {
        return this.lastWorkflowId;
    }

    /**
     * Get the lastOperationName property: Resource Last Operation Name.
     *
     * @return the lastOperationName value.
     */
    public String lastOperationName() {
        return this.lastOperationName;
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connection associated with the specified
     * storage sync service.
     *
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }
}
