// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.storagesync.fluent.ServerEndpointsClient;
import com.azure.resourcemanager.storagesync.fluent.models.ServerEndpointInner;
import com.azure.resourcemanager.storagesync.models.RecallActionParameters;
import com.azure.resourcemanager.storagesync.models.ServerEndpointCreateParameters;
import com.azure.resourcemanager.storagesync.models.ServerEndpointUpdateParameters;
import com.azure.resourcemanager.storagesync.models.ServerEndpointsGetResponse;
import com.azure.resourcemanager.storagesync.models.ServerEndpointsListBySyncGroupResponse;
import com.azure.resourcemanager.storagesync.models.StorageSyncApiErrorException;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in ServerEndpointsClient. */
public final class ServerEndpointsClientImpl implements ServerEndpointsClient {
    private final ClientLogger logger = new ClientLogger(ServerEndpointsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final ServerEndpointsService service;

    /** The service client containing this operation class. */
    private final MicrosoftStorageSyncImpl client;

    /**
     * Initializes an instance of ServerEndpointsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    ServerEndpointsClientImpl(MicrosoftStorageSyncImpl client) {
        this.service =
            RestProxy.create(ServerEndpointsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftStorageSyncServerEndpoints to be used by the proxy service
     * to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftStorageSync")
    private interface ServerEndpointsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints"
                + "/{serverEndpointName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("serverEndpointName") String serverEndpointName,
            @BodyParam("application/json") ServerEndpointCreateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints"
                + "/{serverEndpointName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> update(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("serverEndpointName") String serverEndpointName,
            @BodyParam("application/json") ServerEndpointUpdateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints"
                + "/{serverEndpointName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<ServerEndpointsGetResponse> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("serverEndpointName") String serverEndpointName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints"
                + "/{serverEndpointName}")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("serverEndpointName") String serverEndpointName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<ServerEndpointsListBySyncGroupResponse> listBySyncGroup(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Post(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}/serverEndpoints"
                + "/{serverEndpointName}/recallAction")
        @ExpectedResponses({200, 202})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<Response<Flux<ByteBuffer>>> recallAction(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @PathParam("serverEndpointName") String serverEndpointName,
            @BodyParam("application/json") RecallActionParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            serverEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ServerEndpointInner>, ServerEndpointInner> beginCreateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
        return this
            .client
            .<ServerEndpointInner, ServerEndpointInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ServerEndpointInner.class,
                ServerEndpointInner.class,
                Context.NONE);
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ServerEndpointInner>, ServerEndpointInner> beginCreateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            createWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context);
        return this
            .client
            .<ServerEndpointInner, ServerEndpointInner>getLroResult(
                mono, this.client.getHttpPipeline(), ServerEndpointInner.class, ServerEndpointInner.class, context);
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ServerEndpointInner>, ServerEndpointInner> beginCreate(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters) {
        return beginCreateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ServerEndpointInner>, ServerEndpointInner> beginCreate(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters,
        Context context) {
        return beginCreateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointInner> createAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters) {
        return beginCreateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointInner> createAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters,
        Context context) {
        return beginCreateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointInner create(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters) {
        return createAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .block();
    }

    /**
     * Create a new ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointInner create(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointCreateParameters parameters,
        Context context) {
        return createAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .block();
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            serverEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> updateWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        if (parameters != null) {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ServerEndpointInner>, ServerEndpointInner> beginUpdateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
        return this
            .client
            .<ServerEndpointInner, ServerEndpointInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                ServerEndpointInner.class,
                ServerEndpointInner.class,
                Context.NONE);
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<ServerEndpointInner>, ServerEndpointInner> beginUpdateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            updateWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context);
        return this
            .client
            .<ServerEndpointInner, ServerEndpointInner>getLroResult(
                mono, this.client.getHttpPipeline(), ServerEndpointInner.class, ServerEndpointInner.class, context);
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ServerEndpointInner>, ServerEndpointInner> beginUpdate(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters) {
        return beginUpdateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<ServerEndpointInner>, ServerEndpointInner> beginUpdate(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters,
        Context context) {
        return beginUpdateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointInner> updateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters) {
        return beginUpdateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointInner> updateAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        final ServerEndpointUpdateParameters parameters = null;
        return beginUpdateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointInner> updateAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters,
        Context context) {
        return beginUpdateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointInner update(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters) {
        return updateAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .block();
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointInner update(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        final ServerEndpointUpdateParameters parameters = null;
        return updateAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .block();
    }

    /**
     * Patch a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Any of the properties applicable in PUT request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return server Endpoint object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointInner update(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        ServerEndpointUpdateParameters parameters,
        Context context) {
        return updateAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .block();
    }

    /**
     * Get a ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointsGetResponse> getWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            serverEndpointName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointsGetResponse> getWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                accept,
                context);
    }

    /**
     * Get a ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ServerEndpointInner> getAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        return getWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName)
            .flatMap(
                (ServerEndpointsGetResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get a ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointInner get(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        return getAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName).block();
    }

    /**
     * Get a ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ServerEndpointsGetResponse getWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        return getWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context)
            .block();
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            serverEndpointName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                accept,
                context);
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            deleteWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName)
            .getSyncPoller();
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context)
            .getSyncPoller();
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        return beginDeleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String serverEndpointName) {
        deleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName).block();
    }

    /**
     * Delete a given ServerEndpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        Context context) {
        deleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, context).block();
    }

    /**
     * Get a ServerEndpoint list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerEndpointInner>> listBySyncGroupSinglePageAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listBySyncGroup(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            accept,
                            context))
            .<PagedResponse<ServerEndpointInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        null,
                        res.getDeserializedHeaders()))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a ServerEndpoint list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint list.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<ServerEndpointInner>> listBySyncGroupSinglePageAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listBySyncGroup(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        null,
                        res.getDeserializedHeaders()));
    }

    /**
     * Get a ServerEndpoint list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint list.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerEndpointInner> listBySyncGroupAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return new PagedFlux<>(
            () -> listBySyncGroupSinglePageAsync(resourceGroupName, storageSyncServiceName, syncGroupName));
    }

    /**
     * Get a ServerEndpoint list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint list.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<ServerEndpointInner> listBySyncGroupAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        return new PagedFlux<>(
            () -> listBySyncGroupSinglePageAsync(resourceGroupName, storageSyncServiceName, syncGroupName, context));
    }

    /**
     * Get a ServerEndpoint list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint list.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerEndpointInner> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return new PagedIterable<>(listBySyncGroupAsync(resourceGroupName, storageSyncServiceName, syncGroupName));
    }

    /**
     * Get a ServerEndpoint list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a ServerEndpoint list.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<ServerEndpointInner> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        return new PagedIterable<>(
            listBySyncGroupAsync(resourceGroupName, storageSyncServiceName, syncGroupName, context));
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> recallActionWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .recallAction(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            serverEndpointName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> recallActionWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (serverEndpointName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter serverEndpointName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .recallAction(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                serverEndpointName,
                parameters,
                accept,
                context);
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginRecallActionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters) {
        Mono<Response<Flux<ByteBuffer>>> mono =
            recallActionWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, Context.NONE);
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PollerFlux<PollResult<Void>, Void> beginRecallActionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters,
        Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono =
            recallActionWithResponseAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginRecallAction(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters) {
        return beginRecallActionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .getSyncPoller();
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncPoller<PollResult<Void>, Void> beginRecallAction(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters,
        Context context) {
        return beginRecallActionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .getSyncPoller();
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> recallActionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters) {
        return beginRecallActionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> recallActionAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters,
        Context context) {
        return beginRecallActionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void recallAction(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters) {
        recallActionAsync(resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters)
            .block();
    }

    /**
     * Recall a server endpoint.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param serverEndpointName Name of Server Endpoint object.
     * @param parameters Body of Recall Action object.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void recallAction(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String serverEndpointName,
        RecallActionParameters parameters,
        Context context) {
        recallActionAsync(
                resourceGroupName, storageSyncServiceName, syncGroupName, serverEndpointName, parameters, context)
            .block();
    }
}
