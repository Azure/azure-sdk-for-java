// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/** Sync Session status object. */
@Immutable
public final class ServerEndpointSyncSessionStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointSyncSessionStatus.class);

    /*
     * Last sync result (HResult)
     */
    @JsonProperty(value = "lastSyncResult", access = JsonProperty.Access.WRITE_ONLY)
    private Integer lastSyncResult;

    /*
     * Last sync timestamp
     */
    @JsonProperty(value = "lastSyncTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSyncTimestamp;

    /*
     * Last sync success timestamp
     */
    @JsonProperty(value = "lastSyncSuccessTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastSyncSuccessTimestamp;

    /*
     * Last sync per item error count.
     */
    @JsonProperty(value = "lastSyncPerItemErrorCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long lastSyncPerItemErrorCount;

    /*
     * Count of persistent files not syncing.
     */
    @JsonProperty(value = "persistentFilesNotSyncingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long persistentFilesNotSyncingCount;

    /*
     * Count of transient files not syncing.
     */
    @JsonProperty(value = "transientFilesNotSyncingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long transientFilesNotSyncingCount;

    /*
     * Array of per-item errors coming from the last sync session.
     */
    @JsonProperty(value = "filesNotSyncingErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<ServerEndpointFilesNotSyncingError> filesNotSyncingErrors;

    /*
     * Sync mode
     */
    @JsonProperty(value = "lastSyncMode", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncMode lastSyncMode;

    /**
     * Get the lastSyncResult property: Last sync result (HResult).
     *
     * @return the lastSyncResult value.
     */
    public Integer lastSyncResult() {
        return this.lastSyncResult;
    }

    /**
     * Get the lastSyncTimestamp property: Last sync timestamp.
     *
     * @return the lastSyncTimestamp value.
     */
    public OffsetDateTime lastSyncTimestamp() {
        return this.lastSyncTimestamp;
    }

    /**
     * Get the lastSyncSuccessTimestamp property: Last sync success timestamp.
     *
     * @return the lastSyncSuccessTimestamp value.
     */
    public OffsetDateTime lastSyncSuccessTimestamp() {
        return this.lastSyncSuccessTimestamp;
    }

    /**
     * Get the lastSyncPerItemErrorCount property: Last sync per item error count.
     *
     * @return the lastSyncPerItemErrorCount value.
     */
    public Long lastSyncPerItemErrorCount() {
        return this.lastSyncPerItemErrorCount;
    }

    /**
     * Get the persistentFilesNotSyncingCount property: Count of persistent files not syncing.
     *
     * @return the persistentFilesNotSyncingCount value.
     */
    public Long persistentFilesNotSyncingCount() {
        return this.persistentFilesNotSyncingCount;
    }

    /**
     * Get the transientFilesNotSyncingCount property: Count of transient files not syncing.
     *
     * @return the transientFilesNotSyncingCount value.
     */
    public Long transientFilesNotSyncingCount() {
        return this.transientFilesNotSyncingCount;
    }

    /**
     * Get the filesNotSyncingErrors property: Array of per-item errors coming from the last sync session.
     *
     * @return the filesNotSyncingErrors value.
     */
    public List<ServerEndpointFilesNotSyncingError> filesNotSyncingErrors() {
        return this.filesNotSyncingErrors;
    }

    /**
     * Get the lastSyncMode property: Sync mode.
     *
     * @return the lastSyncMode value.
     */
    public ServerEndpointSyncMode lastSyncMode() {
        return this.lastSyncMode;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filesNotSyncingErrors() != null) {
            filesNotSyncingErrors().forEach(e -> e.validate());
        }
    }
}
