// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.StorageSyncServicesClient;
import com.azure.resourcemanager.storagesync.fluent.models.CheckNameAvailabilityResultInner;
import com.azure.resourcemanager.storagesync.fluent.models.StorageSyncServiceInner;
import com.azure.resourcemanager.storagesync.models.CheckNameAvailabilityParameters;
import com.azure.resourcemanager.storagesync.models.CheckNameAvailabilityResult;
import com.azure.resourcemanager.storagesync.models.StorageSyncService;
import com.azure.resourcemanager.storagesync.models.StorageSyncServices;
import com.azure.resourcemanager.storagesync.models.StorageSyncServicesGetByResourceGroupResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class StorageSyncServicesImpl implements StorageSyncServices {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(StorageSyncServicesImpl.class);

    private final StorageSyncServicesClient innerClient;

    private final com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager;

    public StorageSyncServicesImpl(
        StorageSyncServicesClient innerClient,
        com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CheckNameAvailabilityResult checkNameAvailability(
        String locationName, CheckNameAvailabilityParameters parameters) {
        CheckNameAvailabilityResultInner inner = this.serviceClient().checkNameAvailability(locationName, parameters);
        if (inner != null) {
            return new CheckNameAvailabilityResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CheckNameAvailabilityResult> checkNameAvailabilityWithResponse(
        String locationName, CheckNameAvailabilityParameters parameters, Context context) {
        Response<CheckNameAvailabilityResultInner> inner =
            this.serviceClient().checkNameAvailabilityWithResponse(locationName, parameters, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CheckNameAvailabilityResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public StorageSyncService getByResourceGroup(String resourceGroupName, String storageSyncServiceName) {
        StorageSyncServiceInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, storageSyncServiceName);
        if (inner != null) {
            return new StorageSyncServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<StorageSyncService> getByResourceGroupWithResponse(
        String resourceGroupName, String storageSyncServiceName, Context context) {
        StorageSyncServicesGetByResourceGroupResponse inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, storageSyncServiceName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new StorageSyncServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String resourceGroupName, String storageSyncServiceName) {
        this.serviceClient().delete(resourceGroupName, storageSyncServiceName);
    }

    public void delete(String resourceGroupName, String storageSyncServiceName, Context context) {
        this.serviceClient().delete(resourceGroupName, storageSyncServiceName, context);
    }

    public PagedIterable<StorageSyncService> listByResourceGroup(String resourceGroupName) {
        PagedIterable<StorageSyncServiceInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return Utils.mapPage(inner, inner1 -> new StorageSyncServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageSyncService> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<StorageSyncServiceInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return Utils.mapPage(inner, inner1 -> new StorageSyncServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageSyncService> list() {
        PagedIterable<StorageSyncServiceInner> inner = this.serviceClient().list();
        return Utils.mapPage(inner, inner1 -> new StorageSyncServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<StorageSyncService> list(Context context) {
        PagedIterable<StorageSyncServiceInner> inner = this.serviceClient().list(context);
        return Utils.mapPage(inner, inner1 -> new StorageSyncServiceImpl(inner1, this.manager()));
    }

    public StorageSyncService getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, storageSyncServiceName, Context.NONE).getValue();
    }

    public Response<StorageSyncService> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, storageSyncServiceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, context);
    }

    private StorageSyncServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagesync.StoragesyncManager manager() {
        return this.serviceManager;
    }

    public StorageSyncServiceImpl define(String name) {
        return new StorageSyncServiceImpl(name, this.manager());
    }
}
