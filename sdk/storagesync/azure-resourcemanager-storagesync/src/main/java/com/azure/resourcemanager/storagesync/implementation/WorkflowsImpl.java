// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.WorkflowsClient;
import com.azure.resourcemanager.storagesync.fluent.models.WorkflowInner;
import com.azure.resourcemanager.storagesync.models.Workflow;
import com.azure.resourcemanager.storagesync.models.Workflows;
import com.azure.resourcemanager.storagesync.models.WorkflowsAbortResponse;
import com.azure.resourcemanager.storagesync.models.WorkflowsGetResponse;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class WorkflowsImpl implements Workflows {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(WorkflowsImpl.class);

    private final WorkflowsClient innerClient;

    private final com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager;

    public WorkflowsImpl(
        WorkflowsClient innerClient, com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Workflow> listByStorageSyncService(String resourceGroupName, String storageSyncServiceName) {
        PagedIterable<WorkflowInner> inner =
            this.serviceClient().listByStorageSyncService(resourceGroupName, storageSyncServiceName);
        return Utils.mapPage(inner, inner1 -> new WorkflowImpl(inner1, this.manager()));
    }

    public PagedIterable<Workflow> listByStorageSyncService(
        String resourceGroupName, String storageSyncServiceName, Context context) {
        PagedIterable<WorkflowInner> inner =
            this.serviceClient().listByStorageSyncService(resourceGroupName, storageSyncServiceName, context);
        return Utils.mapPage(inner, inner1 -> new WorkflowImpl(inner1, this.manager()));
    }

    public Workflow get(String resourceGroupName, String storageSyncServiceName, String workflowId) {
        WorkflowInner inner = this.serviceClient().get(resourceGroupName, storageSyncServiceName, workflowId);
        if (inner != null) {
            return new WorkflowImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Workflow> getWithResponse(
        String resourceGroupName, String storageSyncServiceName, String workflowId, Context context) {
        WorkflowsGetResponse inner =
            this.serviceClient().getWithResponse(resourceGroupName, storageSyncServiceName, workflowId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new WorkflowImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void abort(String resourceGroupName, String storageSyncServiceName, String workflowId) {
        this.serviceClient().abort(resourceGroupName, storageSyncServiceName, workflowId);
    }

    public WorkflowsAbortResponse abortWithResponse(
        String resourceGroupName, String storageSyncServiceName, String workflowId, Context context) {
        return this.serviceClient().abortWithResponse(resourceGroupName, storageSyncServiceName, workflowId, context);
    }

    private WorkflowsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagesync.StoragesyncManager manager() {
        return this.serviceManager;
    }
}
