// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.RegisteredServersClient;
import com.azure.resourcemanager.storagesync.fluent.models.RegisteredServerInner;
import com.azure.resourcemanager.storagesync.models.RegisteredServer;
import com.azure.resourcemanager.storagesync.models.RegisteredServers;
import com.azure.resourcemanager.storagesync.models.RegisteredServersGetResponse;
import com.azure.resourcemanager.storagesync.models.TriggerRolloverRequest;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class RegisteredServersImpl implements RegisteredServers {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(RegisteredServersImpl.class);

    private final RegisteredServersClient innerClient;

    private final com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager;

    public RegisteredServersImpl(
        RegisteredServersClient innerClient, com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<RegisteredServer> listByStorageSyncService(
        String resourceGroupName, String storageSyncServiceName) {
        PagedIterable<RegisteredServerInner> inner =
            this.serviceClient().listByStorageSyncService(resourceGroupName, storageSyncServiceName);
        return Utils.mapPage(inner, inner1 -> new RegisteredServerImpl(inner1, this.manager()));
    }

    public PagedIterable<RegisteredServer> listByStorageSyncService(
        String resourceGroupName, String storageSyncServiceName, Context context) {
        PagedIterable<RegisteredServerInner> inner =
            this.serviceClient().listByStorageSyncService(resourceGroupName, storageSyncServiceName, context);
        return Utils.mapPage(inner, inner1 -> new RegisteredServerImpl(inner1, this.manager()));
    }

    public RegisteredServer get(String resourceGroupName, String storageSyncServiceName, String serverId) {
        RegisteredServerInner inner = this.serviceClient().get(resourceGroupName, storageSyncServiceName, serverId);
        if (inner != null) {
            return new RegisteredServerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RegisteredServer> getWithResponse(
        String resourceGroupName, String storageSyncServiceName, String serverId, Context context) {
        RegisteredServersGetResponse inner =
            this.serviceClient().getWithResponse(resourceGroupName, storageSyncServiceName, serverId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new RegisteredServerImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String storageSyncServiceName, String serverId) {
        this.serviceClient().delete(resourceGroupName, storageSyncServiceName, serverId);
    }

    public void delete(String resourceGroupName, String storageSyncServiceName, String serverId, Context context) {
        this.serviceClient().delete(resourceGroupName, storageSyncServiceName, serverId, context);
    }

    public void triggerRollover(
        String resourceGroupName, String storageSyncServiceName, String serverId, TriggerRolloverRequest parameters) {
        this.serviceClient().triggerRollover(resourceGroupName, storageSyncServiceName, serverId, parameters);
    }

    public void triggerRollover(
        String resourceGroupName,
        String storageSyncServiceName,
        String serverId,
        TriggerRolloverRequest parameters,
        Context context) {
        this.serviceClient().triggerRollover(resourceGroupName, storageSyncServiceName, serverId, parameters, context);
    }

    public RegisteredServer getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String serverId = Utils.getValueFromIdByName(id, "registeredServers");
        if (serverId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'registeredServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, storageSyncServiceName, serverId, Context.NONE).getValue();
    }

    public Response<RegisteredServer> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String serverId = Utils.getValueFromIdByName(id, "registeredServers");
        if (serverId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'registeredServers'.", id)));
        }
        return this.getWithResponse(resourceGroupName, storageSyncServiceName, serverId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String serverId = Utils.getValueFromIdByName(id, "registeredServers");
        if (serverId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'registeredServers'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, serverId, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String serverId = Utils.getValueFromIdByName(id, "registeredServers");
        if (serverId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'registeredServers'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, serverId, context);
    }

    private RegisteredServersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagesync.StoragesyncManager manager() {
        return this.serviceManager;
    }

    public RegisteredServerImpl define(String name) {
        return new RegisteredServerImpl(name, this.manager());
    }
}
