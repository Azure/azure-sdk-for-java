// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.storagesync.fluent.models.ServerEndpointUpdateProperties;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Parameters for updating an Server Endpoint. */
@Fluent
public final class ServerEndpointUpdateParameters {
    /*
     * The properties of the server endpoint.
     */
    @JsonProperty(value = "properties")
    private ServerEndpointUpdateProperties innerProperties;

    /**
     * Get the innerProperties property: The properties of the server endpoint.
     *
     * @return the innerProperties value.
     */
    private ServerEndpointUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the cloudTiering property: Cloud Tiering.
     *
     * @return the cloudTiering value.
     */
    public FeatureStatus cloudTiering() {
        return this.innerProperties() == null ? null : this.innerProperties().cloudTiering();
    }

    /**
     * Set the cloudTiering property: Cloud Tiering.
     *
     * @param cloudTiering the cloudTiering value to set.
     * @return the ServerEndpointUpdateParameters object itself.
     */
    public ServerEndpointUpdateParameters withCloudTiering(FeatureStatus cloudTiering) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerEndpointUpdateProperties();
        }
        this.innerProperties().withCloudTiering(cloudTiering);
        return this;
    }

    /**
     * Get the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     *
     * @return the volumeFreeSpacePercent value.
     */
    public Integer volumeFreeSpacePercent() {
        return this.innerProperties() == null ? null : this.innerProperties().volumeFreeSpacePercent();
    }

    /**
     * Set the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param volumeFreeSpacePercent the volumeFreeSpacePercent value to set.
     * @return the ServerEndpointUpdateParameters object itself.
     */
    public ServerEndpointUpdateParameters withVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerEndpointUpdateProperties();
        }
        this.innerProperties().withVolumeFreeSpacePercent(volumeFreeSpacePercent);
        return this;
    }

    /**
     * Get the tierFilesOlderThanDays property: Tier files older than days.
     *
     * @return the tierFilesOlderThanDays value.
     */
    public Integer tierFilesOlderThanDays() {
        return this.innerProperties() == null ? null : this.innerProperties().tierFilesOlderThanDays();
    }

    /**
     * Set the tierFilesOlderThanDays property: Tier files older than days.
     *
     * @param tierFilesOlderThanDays the tierFilesOlderThanDays value to set.
     * @return the ServerEndpointUpdateParameters object itself.
     */
    public ServerEndpointUpdateParameters withTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerEndpointUpdateProperties();
        }
        this.innerProperties().withTierFilesOlderThanDays(tierFilesOlderThanDays);
        return this;
    }

    /**
     * Get the offlineDataTransfer property: Offline data transfer.
     *
     * @return the offlineDataTransfer value.
     */
    public FeatureStatus offlineDataTransfer() {
        return this.innerProperties() == null ? null : this.innerProperties().offlineDataTransfer();
    }

    /**
     * Set the offlineDataTransfer property: Offline data transfer.
     *
     * @param offlineDataTransfer the offlineDataTransfer value to set.
     * @return the ServerEndpointUpdateParameters object itself.
     */
    public ServerEndpointUpdateParameters withOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerEndpointUpdateProperties();
        }
        this.innerProperties().withOfflineDataTransfer(offlineDataTransfer);
        return this;
    }

    /**
     * Get the offlineDataTransferShareName property: Offline data transfer share name.
     *
     * @return the offlineDataTransferShareName value.
     */
    public String offlineDataTransferShareName() {
        return this.innerProperties() == null ? null : this.innerProperties().offlineDataTransferShareName();
    }

    /**
     * Set the offlineDataTransferShareName property: Offline data transfer share name.
     *
     * @param offlineDataTransferShareName the offlineDataTransferShareName value to set.
     * @return the ServerEndpointUpdateParameters object itself.
     */
    public ServerEndpointUpdateParameters withOfflineDataTransferShareName(String offlineDataTransferShareName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerEndpointUpdateProperties();
        }
        this.innerProperties().withOfflineDataTransferShareName(offlineDataTransferShareName);
        return this;
    }

    /**
     * Get the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     *
     * @return the localCacheMode value.
     */
    public LocalCacheMode localCacheMode() {
        return this.innerProperties() == null ? null : this.innerProperties().localCacheMode();
    }

    /**
     * Set the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     *
     * @param localCacheMode the localCacheMode value to set.
     * @return the ServerEndpointUpdateParameters object itself.
     */
    public ServerEndpointUpdateParameters withLocalCacheMode(LocalCacheMode localCacheMode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ServerEndpointUpdateProperties();
        }
        this.innerProperties().withLocalCacheMode(localCacheMode);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
