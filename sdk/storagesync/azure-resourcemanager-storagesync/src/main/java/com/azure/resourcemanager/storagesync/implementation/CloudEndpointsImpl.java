// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.CloudEndpointsClient;
import com.azure.resourcemanager.storagesync.fluent.models.CloudEndpointInner;
import com.azure.resourcemanager.storagesync.fluent.models.PostBackupResponseInner;
import com.azure.resourcemanager.storagesync.models.BackupRequest;
import com.azure.resourcemanager.storagesync.models.CloudEndpoint;
import com.azure.resourcemanager.storagesync.models.CloudEndpoints;
import com.azure.resourcemanager.storagesync.models.CloudEndpointsGetResponse;
import com.azure.resourcemanager.storagesync.models.CloudEndpointsRestoreheartbeatResponse;
import com.azure.resourcemanager.storagesync.models.PostBackupResponse;
import com.azure.resourcemanager.storagesync.models.PostRestoreRequest;
import com.azure.resourcemanager.storagesync.models.PreRestoreRequest;
import com.azure.resourcemanager.storagesync.models.TriggerChangeDetectionParameters;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class CloudEndpointsImpl implements CloudEndpoints {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CloudEndpointsImpl.class);

    private final CloudEndpointsClient innerClient;

    private final com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager;

    public CloudEndpointsImpl(
        CloudEndpointsClient innerClient, com.azure.resourcemanager.storagesync.StoragesyncManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public CloudEndpoint get(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        CloudEndpointInner inner =
            this.serviceClient().get(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName);
        if (inner != null) {
            return new CloudEndpointImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<CloudEndpoint> getWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        CloudEndpointsGetResponse inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new CloudEndpointImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        this.serviceClient().delete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName);
    }

    public void delete(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context);
    }

    public PagedIterable<CloudEndpoint> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        PagedIterable<CloudEndpointInner> inner =
            this.serviceClient().listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName);
        return Utils.mapPage(inner, inner1 -> new CloudEndpointImpl(inner1, this.manager()));
    }

    public PagedIterable<CloudEndpoint> listBySyncGroup(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        PagedIterable<CloudEndpointInner> inner =
            this.serviceClient().listBySyncGroup(resourceGroupName, storageSyncServiceName, syncGroupName, context);
        return Utils.mapPage(inner, inner1 -> new CloudEndpointImpl(inner1, this.manager()));
    }

    public void preBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        this
            .serviceClient()
            .preBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
    }

    public void preBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        this
            .serviceClient()
            .preBackup(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
    }

    public PostBackupResponse postBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters) {
        PostBackupResponseInner inner =
            this
                .serviceClient()
                .postBackup(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
        if (inner != null) {
            return new PostBackupResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PostBackupResponse postBackup(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        BackupRequest parameters,
        Context context) {
        PostBackupResponseInner inner =
            this
                .serviceClient()
                .postBackup(
                    resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
        if (inner != null) {
            return new PostBackupResponseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void preRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters) {
        this
            .serviceClient()
            .preRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
    }

    public void preRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PreRestoreRequest parameters,
        Context context) {
        this
            .serviceClient()
            .preRestore(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
    }

    public void restoreheartbeat(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, String cloudEndpointName) {
        this
            .serviceClient()
            .restoreheartbeat(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName);
    }

    public CloudEndpointsRestoreheartbeatResponse restoreheartbeatWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        Context context) {
        return this
            .serviceClient()
            .restoreheartbeatWithResponse(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context);
    }

    public void postRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters) {
        this
            .serviceClient()
            .postRestore(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
    }

    public void postRestore(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        PostRestoreRequest parameters,
        Context context) {
        this
            .serviceClient()
            .postRestore(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
    }

    public void triggerChangeDetection(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters) {
        this
            .serviceClient()
            .triggerChangeDetection(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters);
    }

    public void triggerChangeDetection(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        String cloudEndpointName,
        TriggerChangeDetectionParameters parameters,
        Context context) {
        this
            .serviceClient()
            .triggerChangeDetection(
                resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, parameters, context);
    }

    public CloudEndpoint getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String cloudEndpointName = Utils.getValueFromIdByName(id, "cloudEndpoints");
        if (cloudEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudEndpoints'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, Context.NONE)
            .getValue();
    }

    public Response<CloudEndpoint> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String cloudEndpointName = Utils.getValueFromIdByName(id, "cloudEndpoints");
        if (cloudEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudEndpoints'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String cloudEndpointName = Utils.getValueFromIdByName(id, "cloudEndpoints");
        if (cloudEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudEndpoints'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String storageSyncServiceName = Utils.getValueFromIdByName(id, "storageSyncServices");
        if (storageSyncServiceName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'storageSyncServices'.", id)));
        }
        String syncGroupName = Utils.getValueFromIdByName(id, "syncGroups");
        if (syncGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'syncGroups'.", id)));
        }
        String cloudEndpointName = Utils.getValueFromIdByName(id, "cloudEndpoints");
        if (cloudEndpointName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'cloudEndpoints'.", id)));
        }
        this.delete(resourceGroupName, storageSyncServiceName, syncGroupName, cloudEndpointName, context);
    }

    private CloudEndpointsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.storagesync.StoragesyncManager manager() {
        return this.serviceManager;
    }

    public CloudEndpointImpl define(String name) {
        return new CloudEndpointImpl(name, this.manager());
    }
}
