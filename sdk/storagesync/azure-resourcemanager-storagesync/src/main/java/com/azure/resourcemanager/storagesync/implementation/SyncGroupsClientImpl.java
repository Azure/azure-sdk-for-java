// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.fluent.SyncGroupsClient;
import com.azure.resourcemanager.storagesync.fluent.models.SyncGroupInner;
import com.azure.resourcemanager.storagesync.models.StorageSyncApiErrorException;
import com.azure.resourcemanager.storagesync.models.SyncGroupCreateParameters;
import com.azure.resourcemanager.storagesync.models.SyncGroupsCreateResponse;
import com.azure.resourcemanager.storagesync.models.SyncGroupsDeleteResponse;
import com.azure.resourcemanager.storagesync.models.SyncGroupsGetResponse;
import com.azure.resourcemanager.storagesync.models.SyncGroupsListByStorageSyncServiceResponse;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in SyncGroupsClient. */
public final class SyncGroupsClientImpl implements SyncGroupsClient {
    private final ClientLogger logger = new ClientLogger(SyncGroupsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final SyncGroupsService service;

    /** The service client containing this operation class. */
    private final MicrosoftStorageSyncImpl client;

    /**
     * Initializes an instance of SyncGroupsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    SyncGroupsClientImpl(MicrosoftStorageSyncImpl client) {
        this.service =
            RestProxy.create(SyncGroupsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for MicrosoftStorageSyncSyncGroups to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "MicrosoftStorageSync")
    private interface SyncGroupsService {
        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<SyncGroupsListByStorageSyncServiceResponse> listByStorageSyncService(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<SyncGroupsCreateResponse> create(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @BodyParam("application/json") SyncGroupCreateParameters parameters,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<SyncGroupsGetResponse> get(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync"
                + "/storageSyncServices/{storageSyncServiceName}/syncGroups/{syncGroupName}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(StorageSyncApiErrorException.class)
        Mono<SyncGroupsDeleteResponse> delete(
            @HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @QueryParam("api-version") String apiVersion,
            @PathParam("storageSyncServiceName") String storageSyncServiceName,
            @PathParam("syncGroupName") String syncGroupName,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get a SyncGroup List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SyncGroup List.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SyncGroupInner>> listByStorageSyncServiceSinglePageAsync(
        String resourceGroupName, String storageSyncServiceName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .listByStorageSyncService(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            accept,
                            context))
            .<PagedResponse<SyncGroupInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        null,
                        res.getDeserializedHeaders()))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a SyncGroup List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SyncGroup List.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<SyncGroupInner>> listByStorageSyncServiceSinglePageAsync(
        String resourceGroupName, String storageSyncServiceName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByStorageSyncService(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                accept,
                context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        null,
                        res.getDeserializedHeaders()));
    }

    /**
     * Get a SyncGroup List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SyncGroup List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SyncGroupInner> listByStorageSyncServiceAsync(
        String resourceGroupName, String storageSyncServiceName) {
        return new PagedFlux<>(
            () -> listByStorageSyncServiceSinglePageAsync(resourceGroupName, storageSyncServiceName));
    }

    /**
     * Get a SyncGroup List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SyncGroup List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<SyncGroupInner> listByStorageSyncServiceAsync(
        String resourceGroupName, String storageSyncServiceName, Context context) {
        return new PagedFlux<>(
            () -> listByStorageSyncServiceSinglePageAsync(resourceGroupName, storageSyncServiceName, context));
    }

    /**
     * Get a SyncGroup List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SyncGroup List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SyncGroupInner> listByStorageSyncService(
        String resourceGroupName, String storageSyncServiceName) {
        return new PagedIterable<>(listByStorageSyncServiceAsync(resourceGroupName, storageSyncServiceName));
    }

    /**
     * Get a SyncGroup List.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a SyncGroup List.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<SyncGroupInner> listByStorageSyncService(
        String resourceGroupName, String storageSyncServiceName, Context context) {
        return new PagedIterable<>(listByStorageSyncServiceAsync(resourceGroupName, storageSyncServiceName, context));
    }

    /**
     * Create a new SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sync Group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupsCreateResponse> createWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        SyncGroupCreateParameters parameters) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            parameters,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sync Group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupsCreateResponse> createWithResponseAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        SyncGroupCreateParameters parameters,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        if (parameters == null) {
            return Mono.error(new IllegalArgumentException("Parameter parameters is required and cannot be null."));
        } else {
            parameters.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                parameters,
                accept,
                context);
    }

    /**
     * Create a new SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sync Group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupInner> createAsync(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        SyncGroupCreateParameters parameters) {
        return createWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, parameters)
            .flatMap(
                (SyncGroupsCreateResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a new SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sync Group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncGroupInner create(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        SyncGroupCreateParameters parameters) {
        return createAsync(resourceGroupName, storageSyncServiceName, syncGroupName, parameters).block();
    }

    /**
     * Create a new SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param parameters Sync Group Body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return sync Group object.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncGroupsCreateResponse createWithResponse(
        String resourceGroupName,
        String storageSyncServiceName,
        String syncGroupName,
        SyncGroupCreateParameters parameters,
        Context context) {
        return createWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, parameters, context)
            .block();
    }

    /**
     * Get a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given SyncGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupsGetResponse> getWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .get(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given SyncGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupsGetResponse> getWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .get(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                accept,
                context);
    }

    /**
     * Get a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given SyncGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupInner> getAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return getWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName)
            .flatMap(
                (SyncGroupsGetResponse res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Get a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given SyncGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncGroupInner get(String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return getAsync(resourceGroupName, storageSyncServiceName, syncGroupName).block();
    }

    /**
     * Get a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given SyncGroup.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncGroupsGetResponse getWithResponse(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        return getWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, context).block();
    }

    /**
     * Delete a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupsDeleteResponse> deleteWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(
                            this.client.getEndpoint(),
                            this.client.getSubscriptionId(),
                            resourceGroupName,
                            this.client.getApiVersion(),
                            storageSyncServiceName,
                            syncGroupName,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Delete a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<SyncGroupsDeleteResponse> deleteWithResponseAsync(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (storageSyncServiceName == null) {
            return Mono
                .error(
                    new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null."));
        }
        if (syncGroupName == null) {
            return Mono.error(new IllegalArgumentException("Parameter syncGroupName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .delete(
                this.client.getEndpoint(),
                this.client.getSubscriptionId(),
                resourceGroupName,
                this.client.getApiVersion(),
                storageSyncServiceName,
                syncGroupName,
                accept,
                context);
    }

    /**
     * Delete a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        return deleteWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName)
            .flatMap((SyncGroupsDeleteResponse res) -> Mono.empty());
    }

    /**
     * Delete a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceGroupName, String storageSyncServiceName, String syncGroupName) {
        deleteAsync(resourceGroupName, storageSyncServiceName, syncGroupName).block();
    }

    /**
     * Delete a given SyncGroup.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param syncGroupName Name of Sync Group resource.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws StorageSyncApiErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public SyncGroupsDeleteResponse deleteWithResponse(
        String resourceGroupName, String storageSyncServiceName, String syncGroupName, Context context) {
        return deleteWithResponseAsync(resourceGroupName, storageSyncServiceName, syncGroupName, context).block();
    }
}
