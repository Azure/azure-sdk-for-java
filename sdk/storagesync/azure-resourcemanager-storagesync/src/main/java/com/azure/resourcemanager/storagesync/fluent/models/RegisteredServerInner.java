// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.resourcemanager.storagesync.models.RegisteredServerAgentVersionStatus;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Registered Server resource. */
@Fluent
public final class RegisteredServerInner extends ProxyResource {
    /*
     * RegisteredServer properties.
     */
    @JsonProperty(value = "properties")
    private RegisteredServerProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /**
     * Get the innerProperties property: RegisteredServer properties.
     *
     * @return the innerProperties value.
     */
    private RegisteredServerProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the serverCertificate property: Registered Server Certificate.
     *
     * @return the serverCertificate value.
     */
    public String serverCertificate() {
        return this.innerProperties() == null ? null : this.innerProperties().serverCertificate();
    }

    /**
     * Set the serverCertificate property: Registered Server Certificate.
     *
     * @param serverCertificate the serverCertificate value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withServerCertificate(String serverCertificate) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withServerCertificate(serverCertificate);
        return this;
    }

    /**
     * Get the agentVersion property: Registered Server Agent Version.
     *
     * @return the agentVersion value.
     */
    public String agentVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().agentVersion();
    }

    /**
     * Set the agentVersion property: Registered Server Agent Version.
     *
     * @param agentVersion the agentVersion value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withAgentVersion(String agentVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withAgentVersion(agentVersion);
        return this;
    }

    /**
     * Get the agentVersionStatus property: Registered Server Agent Version Status.
     *
     * @return the agentVersionStatus value.
     */
    public RegisteredServerAgentVersionStatus agentVersionStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().agentVersionStatus();
    }

    /**
     * Get the agentVersionExpirationDate property: Registered Server Agent Version Expiration Date.
     *
     * @return the agentVersionExpirationDate value.
     */
    public OffsetDateTime agentVersionExpirationDate() {
        return this.innerProperties() == null ? null : this.innerProperties().agentVersionExpirationDate();
    }

    /**
     * Get the serverOSVersion property: Registered Server OS Version.
     *
     * @return the serverOSVersion value.
     */
    public String serverOSVersion() {
        return this.innerProperties() == null ? null : this.innerProperties().serverOSVersion();
    }

    /**
     * Set the serverOSVersion property: Registered Server OS Version.
     *
     * @param serverOSVersion the serverOSVersion value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withServerOSVersion(String serverOSVersion) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withServerOSVersion(serverOSVersion);
        return this;
    }

    /**
     * Get the serverManagementErrorCode property: Registered Server Management Error Code.
     *
     * @return the serverManagementErrorCode value.
     */
    public Integer serverManagementErrorCode() {
        return this.innerProperties() == null ? null : this.innerProperties().serverManagementErrorCode();
    }

    /**
     * Set the serverManagementErrorCode property: Registered Server Management Error Code.
     *
     * @param serverManagementErrorCode the serverManagementErrorCode value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withServerManagementErrorCode(Integer serverManagementErrorCode) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withServerManagementErrorCode(serverManagementErrorCode);
        return this;
    }

    /**
     * Get the lastHeartBeat property: Registered Server last heart beat.
     *
     * @return the lastHeartBeat value.
     */
    public String lastHeartBeat() {
        return this.innerProperties() == null ? null : this.innerProperties().lastHeartBeat();
    }

    /**
     * Set the lastHeartBeat property: Registered Server last heart beat.
     *
     * @param lastHeartBeat the lastHeartBeat value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withLastHeartBeat(String lastHeartBeat) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withLastHeartBeat(lastHeartBeat);
        return this;
    }

    /**
     * Get the provisioningState property: Registered Server Provisioning State.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Set the provisioningState property: Registered Server Provisioning State.
     *
     * @param provisioningState the provisioningState value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withProvisioningState(String provisioningState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Get the serverRole property: Registered Server serverRole.
     *
     * @return the serverRole value.
     */
    public String serverRole() {
        return this.innerProperties() == null ? null : this.innerProperties().serverRole();
    }

    /**
     * Set the serverRole property: Registered Server serverRole.
     *
     * @param serverRole the serverRole value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withServerRole(String serverRole) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withServerRole(serverRole);
        return this;
    }

    /**
     * Get the clusterId property: Registered Server clusterId.
     *
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterId();
    }

    /**
     * Set the clusterId property: Registered Server clusterId.
     *
     * @param clusterId the clusterId value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withClusterId(String clusterId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withClusterId(clusterId);
        return this;
    }

    /**
     * Get the clusterName property: Registered Server clusterName.
     *
     * @return the clusterName value.
     */
    public String clusterName() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterName();
    }

    /**
     * Set the clusterName property: Registered Server clusterName.
     *
     * @param clusterName the clusterName value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withClusterName(String clusterName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withClusterName(clusterName);
        return this;
    }

    /**
     * Get the serverId property: Registered Server serverId.
     *
     * @return the serverId value.
     */
    public String serverId() {
        return this.innerProperties() == null ? null : this.innerProperties().serverId();
    }

    /**
     * Set the serverId property: Registered Server serverId.
     *
     * @param serverId the serverId value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withServerId(String serverId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withServerId(serverId);
        return this;
    }

    /**
     * Get the storageSyncServiceUid property: Registered Server storageSyncServiceUid.
     *
     * @return the storageSyncServiceUid value.
     */
    public String storageSyncServiceUid() {
        return this.innerProperties() == null ? null : this.innerProperties().storageSyncServiceUid();
    }

    /**
     * Set the storageSyncServiceUid property: Registered Server storageSyncServiceUid.
     *
     * @param storageSyncServiceUid the storageSyncServiceUid value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withStorageSyncServiceUid(String storageSyncServiceUid) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withStorageSyncServiceUid(storageSyncServiceUid);
        return this;
    }

    /**
     * Get the lastWorkflowId property: Registered Server lastWorkflowId.
     *
     * @return the lastWorkflowId value.
     */
    public String lastWorkflowId() {
        return this.innerProperties() == null ? null : this.innerProperties().lastWorkflowId();
    }

    /**
     * Set the lastWorkflowId property: Registered Server lastWorkflowId.
     *
     * @param lastWorkflowId the lastWorkflowId value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withLastWorkflowId(String lastWorkflowId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withLastWorkflowId(lastWorkflowId);
        return this;
    }

    /**
     * Get the lastOperationName property: Resource Last Operation Name.
     *
     * @return the lastOperationName value.
     */
    public String lastOperationName() {
        return this.innerProperties() == null ? null : this.innerProperties().lastOperationName();
    }

    /**
     * Set the lastOperationName property: Resource Last Operation Name.
     *
     * @param lastOperationName the lastOperationName value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withLastOperationName(String lastOperationName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withLastOperationName(lastOperationName);
        return this;
    }

    /**
     * Get the discoveryEndpointUri property: Resource discoveryEndpointUri.
     *
     * @return the discoveryEndpointUri value.
     */
    public String discoveryEndpointUri() {
        return this.innerProperties() == null ? null : this.innerProperties().discoveryEndpointUri();
    }

    /**
     * Set the discoveryEndpointUri property: Resource discoveryEndpointUri.
     *
     * @param discoveryEndpointUri the discoveryEndpointUri value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withDiscoveryEndpointUri(String discoveryEndpointUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withDiscoveryEndpointUri(discoveryEndpointUri);
        return this;
    }

    /**
     * Get the resourceLocation property: Resource Location.
     *
     * @return the resourceLocation value.
     */
    public String resourceLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceLocation();
    }

    /**
     * Set the resourceLocation property: Resource Location.
     *
     * @param resourceLocation the resourceLocation value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withResourceLocation(String resourceLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withResourceLocation(resourceLocation);
        return this;
    }

    /**
     * Get the serviceLocation property: Service Location.
     *
     * @return the serviceLocation value.
     */
    public String serviceLocation() {
        return this.innerProperties() == null ? null : this.innerProperties().serviceLocation();
    }

    /**
     * Set the serviceLocation property: Service Location.
     *
     * @param serviceLocation the serviceLocation value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withServiceLocation(String serviceLocation) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withServiceLocation(serviceLocation);
        return this;
    }

    /**
     * Get the friendlyName property: Friendly Name.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.innerProperties() == null ? null : this.innerProperties().friendlyName();
    }

    /**
     * Set the friendlyName property: Friendly Name.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withFriendlyName(String friendlyName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withFriendlyName(friendlyName);
        return this;
    }

    /**
     * Get the managementEndpointUri property: Management Endpoint Uri.
     *
     * @return the managementEndpointUri value.
     */
    public String managementEndpointUri() {
        return this.innerProperties() == null ? null : this.innerProperties().managementEndpointUri();
    }

    /**
     * Set the managementEndpointUri property: Management Endpoint Uri.
     *
     * @param managementEndpointUri the managementEndpointUri value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withManagementEndpointUri(String managementEndpointUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withManagementEndpointUri(managementEndpointUri);
        return this;
    }

    /**
     * Get the monitoringEndpointUri property: Telemetry Endpoint Uri.
     *
     * @return the monitoringEndpointUri value.
     */
    public String monitoringEndpointUri() {
        return this.innerProperties() == null ? null : this.innerProperties().monitoringEndpointUri();
    }

    /**
     * Set the monitoringEndpointUri property: Telemetry Endpoint Uri.
     *
     * @param monitoringEndpointUri the monitoringEndpointUri value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withMonitoringEndpointUri(String monitoringEndpointUri) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withMonitoringEndpointUri(monitoringEndpointUri);
        return this;
    }

    /**
     * Get the monitoringConfiguration property: Monitoring Configuration.
     *
     * @return the monitoringConfiguration value.
     */
    public String monitoringConfiguration() {
        return this.innerProperties() == null ? null : this.innerProperties().monitoringConfiguration();
    }

    /**
     * Set the monitoringConfiguration property: Monitoring Configuration.
     *
     * @param monitoringConfiguration the monitoringConfiguration value to set.
     * @return the RegisteredServerInner object itself.
     */
    public RegisteredServerInner withMonitoringConfiguration(String monitoringConfiguration) {
        if (this.innerProperties() == null) {
            this.innerProperties = new RegisteredServerProperties();
        }
        this.innerProperties().withMonitoringConfiguration(monitoringConfiguration);
        return this;
    }

    /**
     * Get the serverName property: Server name.
     *
     * @return the serverName value.
     */
    public String serverName() {
        return this.innerProperties() == null ? null : this.innerProperties().serverName();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
