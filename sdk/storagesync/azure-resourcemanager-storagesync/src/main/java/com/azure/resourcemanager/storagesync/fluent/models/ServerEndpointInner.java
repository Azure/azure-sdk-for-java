// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.storagesync.models.FeatureStatus;
import com.azure.resourcemanager.storagesync.models.InitialDownloadPolicy;
import com.azure.resourcemanager.storagesync.models.LocalCacheMode;
import com.azure.resourcemanager.storagesync.models.ServerEndpointCloudTieringStatus;
import com.azure.resourcemanager.storagesync.models.ServerEndpointRecallStatus;
import com.azure.resourcemanager.storagesync.models.ServerEndpointSyncStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** Server Endpoint object. */
@JsonFlatten
@Fluent
public class ServerEndpointInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointInner.class);

    /*
     * Server Local path.
     */
    @JsonProperty(value = "properties.serverLocalPath")
    private String serverLocalPath;

    /*
     * Cloud Tiering.
     */
    @JsonProperty(value = "properties.cloudTiering")
    private FeatureStatus cloudTiering;

    /*
     * Level of free space to be maintained by Cloud Tiering if it is enabled.
     */
    @JsonProperty(value = "properties.volumeFreeSpacePercent")
    private Integer volumeFreeSpacePercent;

    /*
     * Tier files older than days.
     */
    @JsonProperty(value = "properties.tierFilesOlderThanDays")
    private Integer tierFilesOlderThanDays;

    /*
     * Friendly Name
     */
    @JsonProperty(value = "properties.friendlyName")
    private String friendlyName;

    /*
     * Server Resource Id.
     */
    @JsonProperty(value = "properties.serverResourceId")
    private String serverResourceId;

    /*
     * ServerEndpoint Provisioning State
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /*
     * ServerEndpoint lastWorkflowId
     */
    @JsonProperty(value = "properties.lastWorkflowId", access = JsonProperty.Access.WRITE_ONLY)
    private String lastWorkflowId;

    /*
     * Resource Last Operation Name
     */
    @JsonProperty(value = "properties.lastOperationName", access = JsonProperty.Access.WRITE_ONLY)
    private String lastOperationName;

    /*
     * Server Endpoint sync status
     */
    @JsonProperty(value = "properties.syncStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncStatus syncStatus;

    /*
     * Offline data transfer
     */
    @JsonProperty(value = "properties.offlineDataTransfer")
    private FeatureStatus offlineDataTransfer;

    /*
     * Offline data transfer storage account resource ID
     */
    @JsonProperty(
        value = "properties.offlineDataTransferStorageAccountResourceId",
        access = JsonProperty.Access.WRITE_ONLY)
    private String offlineDataTransferStorageAccountResourceId;

    /*
     * Offline data transfer storage account tenant ID
     */
    @JsonProperty(
        value = "properties.offlineDataTransferStorageAccountTenantId",
        access = JsonProperty.Access.WRITE_ONLY)
    private String offlineDataTransferStorageAccountTenantId;

    /*
     * Offline data transfer share name
     */
    @JsonProperty(value = "properties.offlineDataTransferShareName")
    private String offlineDataTransferShareName;

    /*
     * Cloud tiering status. Only populated if cloud tiering is enabled.
     */
    @JsonProperty(value = "properties.cloudTieringStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointCloudTieringStatus cloudTieringStatus;

    /*
     * Recall status. Only populated if cloud tiering is enabled.
     */
    @JsonProperty(value = "properties.recallStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointRecallStatus recallStatus;

    /*
     * Policy for how namespace and files are recalled during FastDr.
     */
    @JsonProperty(value = "properties.initialDownloadPolicy")
    private InitialDownloadPolicy initialDownloadPolicy;

    /*
     * Policy for enabling follow-the-sun business models: link local cache to
     * cloud behavior to pre-populate before local access.
     */
    @JsonProperty(value = "properties.localCacheMode")
    private LocalCacheMode localCacheMode;

    /*
     * Server name
     */
    @JsonProperty(value = "properties.serverName", access = JsonProperty.Access.WRITE_ONLY)
    private String serverName;

    /**
     * Get the serverLocalPath property: Server Local path.
     *
     * @return the serverLocalPath value.
     */
    public String serverLocalPath() {
        return this.serverLocalPath;
    }

    /**
     * Set the serverLocalPath property: Server Local path.
     *
     * @param serverLocalPath the serverLocalPath value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withServerLocalPath(String serverLocalPath) {
        this.serverLocalPath = serverLocalPath;
        return this;
    }

    /**
     * Get the cloudTiering property: Cloud Tiering.
     *
     * @return the cloudTiering value.
     */
    public FeatureStatus cloudTiering() {
        return this.cloudTiering;
    }

    /**
     * Set the cloudTiering property: Cloud Tiering.
     *
     * @param cloudTiering the cloudTiering value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withCloudTiering(FeatureStatus cloudTiering) {
        this.cloudTiering = cloudTiering;
        return this;
    }

    /**
     * Get the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     *
     * @return the volumeFreeSpacePercent value.
     */
    public Integer volumeFreeSpacePercent() {
        return this.volumeFreeSpacePercent;
    }

    /**
     * Set the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param volumeFreeSpacePercent the volumeFreeSpacePercent value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
        this.volumeFreeSpacePercent = volumeFreeSpacePercent;
        return this;
    }

    /**
     * Get the tierFilesOlderThanDays property: Tier files older than days.
     *
     * @return the tierFilesOlderThanDays value.
     */
    public Integer tierFilesOlderThanDays() {
        return this.tierFilesOlderThanDays;
    }

    /**
     * Set the tierFilesOlderThanDays property: Tier files older than days.
     *
     * @param tierFilesOlderThanDays the tierFilesOlderThanDays value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
        this.tierFilesOlderThanDays = tierFilesOlderThanDays;
        return this;
    }

    /**
     * Get the friendlyName property: Friendly Name.
     *
     * @return the friendlyName value.
     */
    public String friendlyName() {
        return this.friendlyName;
    }

    /**
     * Set the friendlyName property: Friendly Name.
     *
     * @param friendlyName the friendlyName value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withFriendlyName(String friendlyName) {
        this.friendlyName = friendlyName;
        return this;
    }

    /**
     * Get the serverResourceId property: Server Resource Id.
     *
     * @return the serverResourceId value.
     */
    public String serverResourceId() {
        return this.serverResourceId;
    }

    /**
     * Set the serverResourceId property: Server Resource Id.
     *
     * @param serverResourceId the serverResourceId value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withServerResourceId(String serverResourceId) {
        this.serverResourceId = serverResourceId;
        return this;
    }

    /**
     * Get the provisioningState property: ServerEndpoint Provisioning State.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the lastWorkflowId property: ServerEndpoint lastWorkflowId.
     *
     * @return the lastWorkflowId value.
     */
    public String lastWorkflowId() {
        return this.lastWorkflowId;
    }

    /**
     * Get the lastOperationName property: Resource Last Operation Name.
     *
     * @return the lastOperationName value.
     */
    public String lastOperationName() {
        return this.lastOperationName;
    }

    /**
     * Get the syncStatus property: Server Endpoint sync status.
     *
     * @return the syncStatus value.
     */
    public ServerEndpointSyncStatus syncStatus() {
        return this.syncStatus;
    }

    /**
     * Get the offlineDataTransfer property: Offline data transfer.
     *
     * @return the offlineDataTransfer value.
     */
    public FeatureStatus offlineDataTransfer() {
        return this.offlineDataTransfer;
    }

    /**
     * Set the offlineDataTransfer property: Offline data transfer.
     *
     * @param offlineDataTransfer the offlineDataTransfer value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
        this.offlineDataTransfer = offlineDataTransfer;
        return this;
    }

    /**
     * Get the offlineDataTransferStorageAccountResourceId property: Offline data transfer storage account resource ID.
     *
     * @return the offlineDataTransferStorageAccountResourceId value.
     */
    public String offlineDataTransferStorageAccountResourceId() {
        return this.offlineDataTransferStorageAccountResourceId;
    }

    /**
     * Get the offlineDataTransferStorageAccountTenantId property: Offline data transfer storage account tenant ID.
     *
     * @return the offlineDataTransferStorageAccountTenantId value.
     */
    public String offlineDataTransferStorageAccountTenantId() {
        return this.offlineDataTransferStorageAccountTenantId;
    }

    /**
     * Get the offlineDataTransferShareName property: Offline data transfer share name.
     *
     * @return the offlineDataTransferShareName value.
     */
    public String offlineDataTransferShareName() {
        return this.offlineDataTransferShareName;
    }

    /**
     * Set the offlineDataTransferShareName property: Offline data transfer share name.
     *
     * @param offlineDataTransferShareName the offlineDataTransferShareName value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withOfflineDataTransferShareName(String offlineDataTransferShareName) {
        this.offlineDataTransferShareName = offlineDataTransferShareName;
        return this;
    }

    /**
     * Get the cloudTieringStatus property: Cloud tiering status. Only populated if cloud tiering is enabled.
     *
     * @return the cloudTieringStatus value.
     */
    public ServerEndpointCloudTieringStatus cloudTieringStatus() {
        return this.cloudTieringStatus;
    }

    /**
     * Get the recallStatus property: Recall status. Only populated if cloud tiering is enabled.
     *
     * @return the recallStatus value.
     */
    public ServerEndpointRecallStatus recallStatus() {
        return this.recallStatus;
    }

    /**
     * Get the initialDownloadPolicy property: Policy for how namespace and files are recalled during FastDr.
     *
     * @return the initialDownloadPolicy value.
     */
    public InitialDownloadPolicy initialDownloadPolicy() {
        return this.initialDownloadPolicy;
    }

    /**
     * Set the initialDownloadPolicy property: Policy for how namespace and files are recalled during FastDr.
     *
     * @param initialDownloadPolicy the initialDownloadPolicy value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withInitialDownloadPolicy(InitialDownloadPolicy initialDownloadPolicy) {
        this.initialDownloadPolicy = initialDownloadPolicy;
        return this;
    }

    /**
     * Get the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     *
     * @return the localCacheMode value.
     */
    public LocalCacheMode localCacheMode() {
        return this.localCacheMode;
    }

    /**
     * Set the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     *
     * @param localCacheMode the localCacheMode value to set.
     * @return the ServerEndpointInner object itself.
     */
    public ServerEndpointInner withLocalCacheMode(LocalCacheMode localCacheMode) {
        this.localCacheMode = localCacheMode;
        return this;
    }

    /**
     * Get the serverName property: Server name.
     *
     * @return the serverName value.
     */
    public String serverName() {
        return this.serverName;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (syncStatus() != null) {
            syncStatus().validate();
        }
        if (cloudTieringStatus() != null) {
            cloudTieringStatus().validate();
        }
        if (recallStatus() != null) {
            recallStatus().validate();
        }
    }
}
