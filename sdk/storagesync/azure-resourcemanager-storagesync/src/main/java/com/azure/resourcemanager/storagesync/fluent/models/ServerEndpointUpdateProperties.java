// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.storagesync.models.FeatureStatus;
import com.azure.resourcemanager.storagesync.models.LocalCacheMode;
import com.fasterxml.jackson.annotation.JsonProperty;

/** ServerEndpoint Update Properties object. */
@Fluent
public final class ServerEndpointUpdateProperties {
    /*
     * Cloud Tiering.
     */
    @JsonProperty(value = "cloudTiering")
    private FeatureStatus cloudTiering;

    /*
     * Level of free space to be maintained by Cloud Tiering if it is enabled.
     */
    @JsonProperty(value = "volumeFreeSpacePercent")
    private Integer volumeFreeSpacePercent;

    /*
     * Tier files older than days.
     */
    @JsonProperty(value = "tierFilesOlderThanDays")
    private Integer tierFilesOlderThanDays;

    /*
     * Offline data transfer
     */
    @JsonProperty(value = "offlineDataTransfer")
    private FeatureStatus offlineDataTransfer;

    /*
     * Offline data transfer share name
     */
    @JsonProperty(value = "offlineDataTransferShareName")
    private String offlineDataTransferShareName;

    /*
     * Policy for enabling follow-the-sun business models: link local cache to cloud behavior to pre-populate before
     * local access.
     */
    @JsonProperty(value = "localCacheMode")
    private LocalCacheMode localCacheMode;

    /**
     * Get the cloudTiering property: Cloud Tiering.
     *
     * @return the cloudTiering value.
     */
    public FeatureStatus cloudTiering() {
        return this.cloudTiering;
    }

    /**
     * Set the cloudTiering property: Cloud Tiering.
     *
     * @param cloudTiering the cloudTiering value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withCloudTiering(FeatureStatus cloudTiering) {
        this.cloudTiering = cloudTiering;
        return this;
    }

    /**
     * Get the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     *
     * @return the volumeFreeSpacePercent value.
     */
    public Integer volumeFreeSpacePercent() {
        return this.volumeFreeSpacePercent;
    }

    /**
     * Set the volumeFreeSpacePercent property: Level of free space to be maintained by Cloud Tiering if it is enabled.
     *
     * @param volumeFreeSpacePercent the volumeFreeSpacePercent value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withVolumeFreeSpacePercent(Integer volumeFreeSpacePercent) {
        this.volumeFreeSpacePercent = volumeFreeSpacePercent;
        return this;
    }

    /**
     * Get the tierFilesOlderThanDays property: Tier files older than days.
     *
     * @return the tierFilesOlderThanDays value.
     */
    public Integer tierFilesOlderThanDays() {
        return this.tierFilesOlderThanDays;
    }

    /**
     * Set the tierFilesOlderThanDays property: Tier files older than days.
     *
     * @param tierFilesOlderThanDays the tierFilesOlderThanDays value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withTierFilesOlderThanDays(Integer tierFilesOlderThanDays) {
        this.tierFilesOlderThanDays = tierFilesOlderThanDays;
        return this;
    }

    /**
     * Get the offlineDataTransfer property: Offline data transfer.
     *
     * @return the offlineDataTransfer value.
     */
    public FeatureStatus offlineDataTransfer() {
        return this.offlineDataTransfer;
    }

    /**
     * Set the offlineDataTransfer property: Offline data transfer.
     *
     * @param offlineDataTransfer the offlineDataTransfer value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withOfflineDataTransfer(FeatureStatus offlineDataTransfer) {
        this.offlineDataTransfer = offlineDataTransfer;
        return this;
    }

    /**
     * Get the offlineDataTransferShareName property: Offline data transfer share name.
     *
     * @return the offlineDataTransferShareName value.
     */
    public String offlineDataTransferShareName() {
        return this.offlineDataTransferShareName;
    }

    /**
     * Set the offlineDataTransferShareName property: Offline data transfer share name.
     *
     * @param offlineDataTransferShareName the offlineDataTransferShareName value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withOfflineDataTransferShareName(String offlineDataTransferShareName) {
        this.offlineDataTransferShareName = offlineDataTransferShareName;
        return this;
    }

    /**
     * Get the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     *
     * @return the localCacheMode value.
     */
    public LocalCacheMode localCacheMode() {
        return this.localCacheMode;
    }

    /**
     * Set the localCacheMode property: Policy for enabling follow-the-sun business models: link local cache to cloud
     * behavior to pre-populate before local access.
     *
     * @param localCacheMode the localCacheMode value to set.
     * @return the ServerEndpointUpdateProperties object itself.
     */
    public ServerEndpointUpdateProperties withLocalCacheMode(LocalCacheMode localCacheMode) {
        this.localCacheMode = localCacheMode;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
