// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Cloud endpoint change enumeration status object. */
@Immutable
public final class CloudEndpointLastChangeEnumerationStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CloudEndpointLastChangeEnumerationStatus.class);

    /*
     * Timestamp when change enumeration started
     */
    @JsonProperty(value = "startedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime startedTimestamp;

    /*
     * Timestamp when change enumeration completed
     */
    @JsonProperty(value = "completedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime completedTimestamp;

    /*
     * Count of files in the namespace
     */
    @JsonProperty(value = "namespaceFilesCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long namespaceFilesCount;

    /*
     * Count of directories in the namespace
     */
    @JsonProperty(value = "namespaceDirectoriesCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long namespaceDirectoriesCount;

    /*
     * Namespace size in bytes
     */
    @JsonProperty(value = "namespaceSizeBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Long namespaceSizeBytes;

    /*
     * Timestamp of when change enumeration is expected to run again
     */
    @JsonProperty(value = "nextRunTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime nextRunTimestamp;

    /**
     * Get the startedTimestamp property: Timestamp when change enumeration started.
     *
     * @return the startedTimestamp value.
     */
    public OffsetDateTime startedTimestamp() {
        return this.startedTimestamp;
    }

    /**
     * Get the completedTimestamp property: Timestamp when change enumeration completed.
     *
     * @return the completedTimestamp value.
     */
    public OffsetDateTime completedTimestamp() {
        return this.completedTimestamp;
    }

    /**
     * Get the namespaceFilesCount property: Count of files in the namespace.
     *
     * @return the namespaceFilesCount value.
     */
    public Long namespaceFilesCount() {
        return this.namespaceFilesCount;
    }

    /**
     * Get the namespaceDirectoriesCount property: Count of directories in the namespace.
     *
     * @return the namespaceDirectoriesCount value.
     */
    public Long namespaceDirectoriesCount() {
        return this.namespaceDirectoriesCount;
    }

    /**
     * Get the namespaceSizeBytes property: Namespace size in bytes.
     *
     * @return the namespaceSizeBytes value.
     */
    public Long namespaceSizeBytes() {
        return this.namespaceSizeBytes;
    }

    /**
     * Get the nextRunTimestamp property: Timestamp of when change enumeration is expected to run again.
     *
     * @return the nextRunTimestamp value.
     */
    public OffsetDateTime nextRunTimestamp() {
        return this.nextRunTimestamp;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
