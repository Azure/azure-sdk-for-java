// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Sync Session status object. */
@Immutable
public final class ServerEndpointSyncActivityStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointSyncActivityStatus.class);

    /*
     * Timestamp when properties were updated
     */
    @JsonProperty(value = "timestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime timestamp;

    /*
     * Per item error count
     */
    @JsonProperty(value = "perItemErrorCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long perItemErrorCount;

    /*
     * Applied item count.
     */
    @JsonProperty(value = "appliedItemCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long appliedItemCount;

    /*
     * Total item count (if available)
     */
    @JsonProperty(value = "totalItemCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalItemCount;

    /*
     * Applied bytes
     */
    @JsonProperty(value = "appliedBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Long appliedBytes;

    /*
     * Total bytes (if available)
     */
    @JsonProperty(value = "totalBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalBytes;

    /*
     * Sync mode
     */
    @JsonProperty(value = "syncMode", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncMode syncMode;

    /*
     * Session minutes remaining (if available)
     */
    @JsonProperty(value = "sessionMinutesRemaining", access = JsonProperty.Access.WRITE_ONLY)
    private Integer sessionMinutesRemaining;

    /**
     * Get the timestamp property: Timestamp when properties were updated.
     *
     * @return the timestamp value.
     */
    public OffsetDateTime timestamp() {
        return this.timestamp;
    }

    /**
     * Get the perItemErrorCount property: Per item error count.
     *
     * @return the perItemErrorCount value.
     */
    public Long perItemErrorCount() {
        return this.perItemErrorCount;
    }

    /**
     * Get the appliedItemCount property: Applied item count.
     *
     * @return the appliedItemCount value.
     */
    public Long appliedItemCount() {
        return this.appliedItemCount;
    }

    /**
     * Get the totalItemCount property: Total item count (if available).
     *
     * @return the totalItemCount value.
     */
    public Long totalItemCount() {
        return this.totalItemCount;
    }

    /**
     * Get the appliedBytes property: Applied bytes.
     *
     * @return the appliedBytes value.
     */
    public Long appliedBytes() {
        return this.appliedBytes;
    }

    /**
     * Get the totalBytes property: Total bytes (if available).
     *
     * @return the totalBytes value.
     */
    public Long totalBytes() {
        return this.totalBytes;
    }

    /**
     * Get the syncMode property: Sync mode.
     *
     * @return the syncMode value.
     */
    public ServerEndpointSyncMode syncMode() {
        return this.syncMode;
    }

    /**
     * Get the sessionMinutesRemaining property: Session minutes remaining (if available).
     *
     * @return the sessionMinutesRemaining value.
     */
    public Integer sessionMinutesRemaining() {
        return this.sessionMinutesRemaining;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
