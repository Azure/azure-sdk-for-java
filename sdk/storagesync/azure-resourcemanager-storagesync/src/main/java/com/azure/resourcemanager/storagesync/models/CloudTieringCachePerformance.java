// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Server endpoint cloud tiering status object. */
@Immutable
public final class CloudTieringCachePerformance {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CloudTieringCachePerformance.class);

    /*
     * Last updated timestamp
     */
    @JsonProperty(value = "lastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Count of bytes that were served from the local server
     */
    @JsonProperty(value = "cacheHitBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Long cacheHitBytes;

    /*
     * Count of bytes that were served from the cloud
     */
    @JsonProperty(value = "cacheMissBytes", access = JsonProperty.Access.WRITE_ONLY)
    private Long cacheMissBytes;

    /*
     * Percentage of total bytes (hit + miss) that were served from the local
     * server
     */
    @JsonProperty(value = "cacheHitBytesPercent", access = JsonProperty.Access.WRITE_ONLY)
    private Integer cacheHitBytesPercent;

    /**
     * Get the lastUpdatedTimestamp property: Last updated timestamp.
     *
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the cacheHitBytes property: Count of bytes that were served from the local server.
     *
     * @return the cacheHitBytes value.
     */
    public Long cacheHitBytes() {
        return this.cacheHitBytes;
    }

    /**
     * Get the cacheMissBytes property: Count of bytes that were served from the cloud.
     *
     * @return the cacheMissBytes value.
     */
    public Long cacheMissBytes() {
        return this.cacheMissBytes;
    }

    /**
     * Get the cacheHitBytesPercent property: Percentage of total bytes (hit + miss) that were served from the local
     * server.
     *
     * @return the cacheHitBytesPercent value.
     */
    public Integer cacheHitBytesPercent() {
        return this.cacheHitBytesPercent;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
