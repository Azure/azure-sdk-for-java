// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.resourcemanager.storagesync.models.IncomingTrafficPolicy;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Storage Sync Service object. */
@Fluent
public final class StorageSyncServiceInner extends Resource {
    /*
     * Storage Sync Service properties.
     */
    @JsonProperty(value = "properties")
    private StorageSyncServiceProperties innerProperties;

    /**
     * Get the innerProperties property: Storage Sync Service properties.
     *
     * @return the innerProperties value.
     */
    private StorageSyncServiceProperties innerProperties() {
        return this.innerProperties;
    }

    /** {@inheritDoc} */
    @Override
    public StorageSyncServiceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public StorageSyncServiceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the incomingTrafficPolicy property: Incoming Traffic Policy.
     *
     * @return the incomingTrafficPolicy value.
     */
    public IncomingTrafficPolicy incomingTrafficPolicy() {
        return this.innerProperties() == null ? null : this.innerProperties().incomingTrafficPolicy();
    }

    /**
     * Set the incomingTrafficPolicy property: Incoming Traffic Policy.
     *
     * @param incomingTrafficPolicy the incomingTrafficPolicy value to set.
     * @return the StorageSyncServiceInner object itself.
     */
    public StorageSyncServiceInner withIncomingTrafficPolicy(IncomingTrafficPolicy incomingTrafficPolicy) {
        if (this.innerProperties() == null) {
            this.innerProperties = new StorageSyncServiceProperties();
        }
        this.innerProperties().withIncomingTrafficPolicy(incomingTrafficPolicy);
        return this;
    }

    /**
     * Get the storageSyncServiceStatus property: Storage Sync service status.
     *
     * @return the storageSyncServiceStatus value.
     */
    public Integer storageSyncServiceStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().storageSyncServiceStatus();
    }

    /**
     * Get the storageSyncServiceUid property: Storage Sync service Uid.
     *
     * @return the storageSyncServiceUid value.
     */
    public String storageSyncServiceUid() {
        return this.innerProperties() == null ? null : this.innerProperties().storageSyncServiceUid();
    }

    /**
     * Get the provisioningState property: StorageSyncService Provisioning State.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the lastWorkflowId property: StorageSyncService lastWorkflowId.
     *
     * @return the lastWorkflowId value.
     */
    public String lastWorkflowId() {
        return this.innerProperties() == null ? null : this.innerProperties().lastWorkflowId();
    }

    /**
     * Get the lastOperationName property: Resource Last Operation Name.
     *
     * @return the lastOperationName value.
     */
    public String lastOperationName() {
        return this.innerProperties() == null ? null : this.innerProperties().lastOperationName();
    }

    /**
     * Get the privateEndpointConnections property: List of private endpoint connection associated with the specified
     * storage sync service.
     *
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.innerProperties() == null ? null : this.innerProperties().privateEndpointConnections();
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
