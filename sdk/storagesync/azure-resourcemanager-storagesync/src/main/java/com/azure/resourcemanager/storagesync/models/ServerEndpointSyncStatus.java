// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.storagesync.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** Server Endpoint sync status. */
@Immutable
public final class ServerEndpointSyncStatus {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ServerEndpointSyncStatus.class);

    /*
     * Download Health Status.
     */
    @JsonProperty(value = "downloadHealth", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointHealthState downloadHealth;

    /*
     * Upload Health Status.
     */
    @JsonProperty(value = "uploadHealth", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointHealthState uploadHealth;

    /*
     * Combined Health Status.
     */
    @JsonProperty(value = "combinedHealth", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointHealthState combinedHealth;

    /*
     * Sync activity
     */
    @JsonProperty(value = "syncActivity", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncActivityState syncActivity;

    /*
     * Total count of persistent files not syncing (combined upload +
     * download).
     */
    @JsonProperty(value = "totalPersistentFilesNotSyncingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalPersistentFilesNotSyncingCount;

    /*
     * Last Updated Timestamp
     */
    @JsonProperty(value = "lastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastUpdatedTimestamp;

    /*
     * Upload Status
     */
    @JsonProperty(value = "uploadStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncSessionStatus uploadStatus;

    /*
     * Download Status
     */
    @JsonProperty(value = "downloadStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncSessionStatus downloadStatus;

    /*
     * Upload sync activity
     */
    @JsonProperty(value = "uploadActivity", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncActivityStatus uploadActivity;

    /*
     * Download sync activity
     */
    @JsonProperty(value = "downloadActivity", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointSyncActivityStatus downloadActivity;

    /*
     * Offline Data Transfer State
     */
    @JsonProperty(value = "offlineDataTransferStatus", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointOfflineDataTransferState offlineDataTransferStatus;

    /*
     * Background data download activity
     */
    @JsonProperty(value = "backgroundDataDownloadActivity", access = JsonProperty.Access.WRITE_ONLY)
    private ServerEndpointBackgroundDataDownloadActivity backgroundDataDownloadActivity;

    /**
     * Get the downloadHealth property: Download Health Status.
     *
     * @return the downloadHealth value.
     */
    public ServerEndpointHealthState downloadHealth() {
        return this.downloadHealth;
    }

    /**
     * Get the uploadHealth property: Upload Health Status.
     *
     * @return the uploadHealth value.
     */
    public ServerEndpointHealthState uploadHealth() {
        return this.uploadHealth;
    }

    /**
     * Get the combinedHealth property: Combined Health Status.
     *
     * @return the combinedHealth value.
     */
    public ServerEndpointHealthState combinedHealth() {
        return this.combinedHealth;
    }

    /**
     * Get the syncActivity property: Sync activity.
     *
     * @return the syncActivity value.
     */
    public ServerEndpointSyncActivityState syncActivity() {
        return this.syncActivity;
    }

    /**
     * Get the totalPersistentFilesNotSyncingCount property: Total count of persistent files not syncing (combined
     * upload + download).
     *
     * @return the totalPersistentFilesNotSyncingCount value.
     */
    public Long totalPersistentFilesNotSyncingCount() {
        return this.totalPersistentFilesNotSyncingCount;
    }

    /**
     * Get the lastUpdatedTimestamp property: Last Updated Timestamp.
     *
     * @return the lastUpdatedTimestamp value.
     */
    public OffsetDateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get the uploadStatus property: Upload Status.
     *
     * @return the uploadStatus value.
     */
    public ServerEndpointSyncSessionStatus uploadStatus() {
        return this.uploadStatus;
    }

    /**
     * Get the downloadStatus property: Download Status.
     *
     * @return the downloadStatus value.
     */
    public ServerEndpointSyncSessionStatus downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Get the uploadActivity property: Upload sync activity.
     *
     * @return the uploadActivity value.
     */
    public ServerEndpointSyncActivityStatus uploadActivity() {
        return this.uploadActivity;
    }

    /**
     * Get the downloadActivity property: Download sync activity.
     *
     * @return the downloadActivity value.
     */
    public ServerEndpointSyncActivityStatus downloadActivity() {
        return this.downloadActivity;
    }

    /**
     * Get the offlineDataTransferStatus property: Offline Data Transfer State.
     *
     * @return the offlineDataTransferStatus value.
     */
    public ServerEndpointOfflineDataTransferState offlineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }

    /**
     * Get the backgroundDataDownloadActivity property: Background data download activity.
     *
     * @return the backgroundDataDownloadActivity value.
     */
    public ServerEndpointBackgroundDataDownloadActivity backgroundDataDownloadActivity() {
        return this.backgroundDataDownloadActivity;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (uploadStatus() != null) {
            uploadStatus().validate();
        }
        if (downloadStatus() != null) {
            downloadStatus().validate();
        }
        if (uploadActivity() != null) {
            uploadActivity().validate();
        }
        if (downloadActivity() != null) {
            downloadActivity().validate();
        }
        if (backgroundDataDownloadActivity() != null) {
            backgroundDataDownloadActivity().validate();
        }
    }
}
