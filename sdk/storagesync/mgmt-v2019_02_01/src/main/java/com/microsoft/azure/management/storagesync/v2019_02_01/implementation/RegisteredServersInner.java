/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.v2019_02_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServerCreateParameters;
import com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServersCreateHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServersDeleteHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServersGetHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServersListByStorageSyncServiceHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServersTriggerRolloverHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncErrorException;
import com.microsoft.azure.management.storagesync.v2019_02_01.TriggerRolloverRequest;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in RegisteredServers.
 */
public class RegisteredServersInner {
    /** The Retrofit service to perform REST calls. */
    private RegisteredServersService service;
    /** The service client containing this operation class. */
    private StorageSyncManagementClientImpl client;

    /**
     * Initializes an instance of RegisteredServersInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public RegisteredServersInner(Retrofit retrofit, StorageSyncManagementClientImpl client) {
        this.service = retrofit.create(RegisteredServersService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for RegisteredServers to be
     * used by Retrofit to perform actually REST calls.
     */
    interface RegisteredServersService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers listByStorageSyncService" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers")
        Observable<Response<ResponseBody>> listByStorageSyncService(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Body RegisteredServerCreateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers beginCreate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}")
        Observable<Response<ResponseBody>> beginCreate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Body RegisteredServerCreateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers triggerRollover" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}/triggerRollover")
        Observable<Response<ResponseBody>> triggerRollover(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TriggerRolloverRequest parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.RegisteredServers beginTriggerRollover" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}/registeredServers/{serverId}/triggerRollover")
        Observable<Response<ResponseBody>> beginTriggerRollover(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Path("serverId") String serverId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body TriggerRolloverRequest parameters, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a given registered server list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;RegisteredServerInner&gt; object if successful.
     */
    public List<RegisteredServerInner> listByStorageSyncService(String resourceGroupName, String storageSyncServiceName) {
        return listByStorageSyncServiceWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Get a given registered server list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<RegisteredServerInner>> listByStorageSyncServiceAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<List<RegisteredServerInner>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listByStorageSyncServiceWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Get a given registered server list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RegisteredServerInner&gt; object
     */
    public Observable<List<RegisteredServerInner>> listByStorageSyncServiceAsync(String resourceGroupName, String storageSyncServiceName) {
        return listByStorageSyncServiceWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<List<RegisteredServerInner>, RegisteredServersListByStorageSyncServiceHeaders>, List<RegisteredServerInner>>() {
            @Override
            public List<RegisteredServerInner> call(ServiceResponseWithHeaders<List<RegisteredServerInner>, RegisteredServersListByStorageSyncServiceHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a given registered server list.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;RegisteredServerInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<RegisteredServerInner>, RegisteredServersListByStorageSyncServiceHeaders>> listByStorageSyncServiceWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByStorageSyncService(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<RegisteredServerInner>, RegisteredServersListByStorageSyncServiceHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<RegisteredServerInner>, RegisteredServersListByStorageSyncServiceHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<RegisteredServerInner>> result = listByStorageSyncServiceDelegate(response);
                        List<RegisteredServerInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<RegisteredServerInner>> clientResponse = new ServiceResponse<List<RegisteredServerInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<PageImpl1<RegisteredServerInner>, RegisteredServersListByStorageSyncServiceHeaders> listByStorageSyncServiceDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<RegisteredServerInner>, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<RegisteredServerInner>>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, RegisteredServersListByStorageSyncServiceHeaders.class);
    }

    /**
     * Get a given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegisteredServerInner object if successful.
     */
    public RegisteredServerInner get(String resourceGroupName, String storageSyncServiceName, String serverId) {
        return getWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).toBlocking().single().body();
    }

    /**
     * Get a given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegisteredServerInner> getAsync(String resourceGroupName, String storageSyncServiceName, String serverId, final ServiceCallback<RegisteredServerInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId), serviceCallback);
    }

    /**
     * Get a given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegisteredServerInner object
     */
    public Observable<RegisteredServerInner> getAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        return getWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).map(new Func1<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders>, RegisteredServerInner>() {
            @Override
            public RegisteredServerInner call(ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegisteredServerInner object
     */
    public Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders>> getWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersGetHeaders> getDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegisteredServerInner, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegisteredServerInner>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, RegisteredServersGetHeaders.class);
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegisteredServerInner object if successful.
     */
    public RegisteredServerInner create(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters) {
        return createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, parameters).toBlocking().last().body();
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegisteredServerInner> createAsync(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters, final ServiceCallback<RegisteredServerInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, parameters), serviceCallback);
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<RegisteredServerInner> createAsync(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters) {
        return createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, parameters).map(new Func1<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders>, RegisteredServerInner>() {
            @Override
            public RegisteredServerInner call(ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders>> createWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        Observable<Response<ResponseBody>> observable = service.create(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultWithHeadersAsync(observable, new TypeToken<RegisteredServerInner>() { }.getType(), RegisteredServersCreateHeaders.class);
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the RegisteredServerInner object if successful.
     */
    public RegisteredServerInner beginCreate(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, parameters).toBlocking().single().body();
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<RegisteredServerInner> beginCreateAsync(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters, final ServiceCallback<RegisteredServerInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginCreateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, parameters), serviceCallback);
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegisteredServerInner object
     */
    public Observable<RegisteredServerInner> beginCreateAsync(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters) {
        return beginCreateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, parameters).map(new Func1<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders>, RegisteredServerInner>() {
            @Override
            public RegisteredServerInner call(ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Add a new registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param parameters Body of Registered Server object.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the RegisteredServerInner object
     */
    public Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders>> beginCreateWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId, RegisteredServerCreateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.beginCreate(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders> clientResponse = beginCreateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<RegisteredServerInner, RegisteredServersCreateHeaders> beginCreateDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<RegisteredServerInner, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<RegisteredServerInner>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, RegisteredServersCreateHeaders.class);
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String storageSyncServiceName, String serverId) {
        deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).toBlocking().last().body();
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName, String serverId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId), serviceCallback);
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        return deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).map(new Func1<ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), RegisteredServersDeleteHeaders.class);
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String storageSyncServiceName, String serverId) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).toBlocking().single().body();
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String storageSyncServiceName, String serverId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId), serviceCallback);
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).map(new Func1<ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete the given registered server.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId GUID identifying the on-premises server.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, RegisteredServersDeleteHeaders> beginDeleteDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, RegisteredServersDeleteHeaders.class);
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void triggerRollover(String resourceGroupName, String storageSyncServiceName, String serverId) {
        triggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).toBlocking().last().body();
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> triggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(triggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId), serviceCallback);
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> triggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        return triggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).map(new Func1<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>> triggerRolloverWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String serverCertificate = null;
        TriggerRolloverRequest parameters = new TriggerRolloverRequest();
        parameters.withServerCertificate(null);
        Observable<Response<ResponseBody>> observable = service.triggerRollover(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), RegisteredServersTriggerRolloverHeaders.class);
    }
    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void triggerRollover(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate) {
        triggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, serverCertificate).toBlocking().last().body();
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> triggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(triggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, serverCertificate), serviceCallback);
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> triggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate) {
        return triggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, serverCertificate).map(new Func1<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>> triggerRolloverWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        TriggerRolloverRequest parameters = new TriggerRolloverRequest();
        parameters.withServerCertificate(serverCertificate);
        Observable<Response<ResponseBody>> observable = service.triggerRollover(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultWithHeadersAsync(observable, new TypeToken<Void>() { }.getType(), RegisteredServersTriggerRolloverHeaders.class);
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginTriggerRollover(String resourceGroupName, String storageSyncServiceName, String serverId) {
        beginTriggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).toBlocking().single().body();
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginTriggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginTriggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId), serviceCallback);
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginTriggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        return beginTriggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId).map(new Func1<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>> beginTriggerRolloverWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String serverCertificate = null;
        TriggerRolloverRequest parameters = new TriggerRolloverRequest();
        parameters.withServerCertificate(null);
        return service.beginTriggerRollover(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> clientResponse = beginTriggerRolloverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginTriggerRollover(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate) {
        beginTriggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, serverCertificate).toBlocking().single().body();
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginTriggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(beginTriggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, serverCertificate), serviceCallback);
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> beginTriggerRolloverAsync(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate) {
        return beginTriggerRolloverWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, serverId, serverCertificate).map(new Func1<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Triggers Server certificate rollover.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serverId Server Id
     * @param serverCertificate Certificate Data
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>> beginTriggerRolloverWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, String serverId, String serverCertificate) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (serverId == null) {
            throw new IllegalArgumentException("Parameter serverId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        TriggerRolloverRequest parameters = new TriggerRolloverRequest();
        parameters.withServerCertificate(serverCertificate);
        return service.beginTriggerRollover(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, serverId, this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> clientResponse = beginTriggerRolloverDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, RegisteredServersTriggerRolloverHeaders> beginTriggerRolloverDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, RegisteredServersTriggerRolloverHeaders.class);
    }

}
