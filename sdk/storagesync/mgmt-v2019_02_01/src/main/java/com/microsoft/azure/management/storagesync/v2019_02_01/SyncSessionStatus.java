/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.v2019_02_01;

import org.joda.time.DateTime;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Sync Session status object.
 */
public class SyncSessionStatus {
    /**
     * Last sync result (HResult).
     */
    @JsonProperty(value = "lastSyncResult", access = JsonProperty.Access.WRITE_ONLY)
    private Integer lastSyncResult;

    /**
     * Last sync timestamp.
     */
    @JsonProperty(value = "lastSyncTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastSyncTimestamp;

    /**
     * Last sync success timestamp.
     */
    @JsonProperty(value = "lastSyncSuccessTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastSyncSuccessTimestamp;

    /**
     * Last sync per item error count.
     */
    @JsonProperty(value = "lastSyncPerItemErrorCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long lastSyncPerItemErrorCount;

    /**
     * Count of persistent files not syncing. Reserved for future use.
     */
    @JsonProperty(value = "persistentFilesNotSyncingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long persistentFilesNotSyncingCount;

    /**
     * Count of transient files not syncing. Reserved for future use.
     */
    @JsonProperty(value = "transientFilesNotSyncingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long transientFilesNotSyncingCount;

    /**
     * Array of per-item errors coming from the last sync session. Reserved for
     * future use.
     */
    @JsonProperty(value = "filesNotSyncingErrors", access = JsonProperty.Access.WRITE_ONLY)
    private List<FilesNotSyncingError> filesNotSyncingErrors;

    /**
     * Get last sync result (HResult).
     *
     * @return the lastSyncResult value
     */
    public Integer lastSyncResult() {
        return this.lastSyncResult;
    }

    /**
     * Get last sync timestamp.
     *
     * @return the lastSyncTimestamp value
     */
    public DateTime lastSyncTimestamp() {
        return this.lastSyncTimestamp;
    }

    /**
     * Get last sync success timestamp.
     *
     * @return the lastSyncSuccessTimestamp value
     */
    public DateTime lastSyncSuccessTimestamp() {
        return this.lastSyncSuccessTimestamp;
    }

    /**
     * Get last sync per item error count.
     *
     * @return the lastSyncPerItemErrorCount value
     */
    public Long lastSyncPerItemErrorCount() {
        return this.lastSyncPerItemErrorCount;
    }

    /**
     * Get count of persistent files not syncing. Reserved for future use.
     *
     * @return the persistentFilesNotSyncingCount value
     */
    public Long persistentFilesNotSyncingCount() {
        return this.persistentFilesNotSyncingCount;
    }

    /**
     * Get count of transient files not syncing. Reserved for future use.
     *
     * @return the transientFilesNotSyncingCount value
     */
    public Long transientFilesNotSyncingCount() {
        return this.transientFilesNotSyncingCount;
    }

    /**
     * Get array of per-item errors coming from the last sync session. Reserved for future use.
     *
     * @return the filesNotSyncingErrors value
     */
    public List<FilesNotSyncingError> filesNotSyncingErrors() {
        return this.filesNotSyncingErrors;
    }

}
