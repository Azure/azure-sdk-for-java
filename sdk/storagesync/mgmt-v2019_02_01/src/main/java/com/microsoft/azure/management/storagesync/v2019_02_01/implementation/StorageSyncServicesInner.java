/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.v2019_02_01.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.management.storagesync.v2019_02_01.CheckNameAvailabilityParameters;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncErrorException;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServiceCreateParameters;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServicesDeleteHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServicesGetHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServicesListByResourceGroupHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServicesListBySubscriptionHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServicesUpdateHeaders;
import com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServiceUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.ServiceResponseWithHeaders;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in StorageSyncServices.
 */
public class StorageSyncServicesInner implements InnerSupportsGet<StorageSyncServiceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<StorageSyncServiceInner> {
    /** The Retrofit service to perform REST calls. */
    private StorageSyncServicesService service;
    /** The service client containing this operation class. */
    private StorageSyncManagementClientImpl client;

    /**
     * Initializes an instance of StorageSyncServicesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public StorageSyncServicesInner(Retrofit retrofit, StorageSyncManagementClientImpl client) {
        this.service = retrofit.create(StorageSyncServicesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for StorageSyncServices to be
     * used by Retrofit to perform actually REST calls.
     */
    interface StorageSyncServicesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices checkNameAvailability" })
        @POST("subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/locations/{locationName}/checkNameAvailability")
        Observable<Response<ResponseBody>> checkNameAvailability(@Path("locationName") String locationName, @Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body CheckNameAvailabilityParameters parameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices create" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}")
        Observable<Response<ResponseBody>> create(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Body StorageSyncServiceCreateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Body StorageSyncServiceUpdateParameters parameters, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices/{storageSyncServiceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("storageSyncServiceName") String storageSyncServiceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageSync/storageSyncServices")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.storagesync.v2019_02_01.StorageSyncServices list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.StorageSync/storageSyncServices")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Check the give namespace name availability.
     *
     * @param locationName The desired region for the name check.
     * @param name The name to check for availability
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the CheckNameAvailabilityResultInner object if successful.
     */
    public CheckNameAvailabilityResultInner checkNameAvailability(String locationName, String name) {
        return checkNameAvailabilityWithServiceResponseAsync(locationName, name).toBlocking().single().body();
    }

    /**
     * Check the give namespace name availability.
     *
     * @param locationName The desired region for the name check.
     * @param name The name to check for availability
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<CheckNameAvailabilityResultInner> checkNameAvailabilityAsync(String locationName, String name, final ServiceCallback<CheckNameAvailabilityResultInner> serviceCallback) {
        return ServiceFuture.fromResponse(checkNameAvailabilityWithServiceResponseAsync(locationName, name), serviceCallback);
    }

    /**
     * Check the give namespace name availability.
     *
     * @param locationName The desired region for the name check.
     * @param name The name to check for availability
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityResultInner object
     */
    public Observable<CheckNameAvailabilityResultInner> checkNameAvailabilityAsync(String locationName, String name) {
        return checkNameAvailabilityWithServiceResponseAsync(locationName, name).map(new Func1<ServiceResponse<CheckNameAvailabilityResultInner>, CheckNameAvailabilityResultInner>() {
            @Override
            public CheckNameAvailabilityResultInner call(ServiceResponse<CheckNameAvailabilityResultInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Check the give namespace name availability.
     *
     * @param locationName The desired region for the name check.
     * @param name The name to check for availability
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the CheckNameAvailabilityResultInner object
     */
    public Observable<ServiceResponse<CheckNameAvailabilityResultInner>> checkNameAvailabilityWithServiceResponseAsync(String locationName, String name) {
        if (locationName == null) {
            throw new IllegalArgumentException("Parameter locationName is required and cannot be null.");
        }
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (name == null) {
            throw new IllegalArgumentException("Parameter name is required and cannot be null.");
        }
        CheckNameAvailabilityParameters parameters = new CheckNameAvailabilityParameters();
        parameters.withName(name);
        return service.checkNameAvailability(locationName, this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), parameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<CheckNameAvailabilityResultInner>>>() {
                @Override
                public Observable<ServiceResponse<CheckNameAvailabilityResultInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<CheckNameAvailabilityResultInner> clientResponse = checkNameAvailabilityDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<CheckNameAvailabilityResultInner> checkNameAvailabilityDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<CheckNameAvailabilityResultInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<CheckNameAvailabilityResultInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner create(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceCreateParameters parameters) {
        return createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, parameters).toBlocking().single().body();
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> createAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceCreateParameters parameters, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, parameters), serviceCallback);
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> createAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceCreateParameters parameters) {
        return createWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, parameters).map(new Func1<ServiceResponse<StorageSyncServiceInner>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponse<StorageSyncServiceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a new StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponse<StorageSyncServiceInner>> createWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceCreateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (parameters == null) {
            throw new IllegalArgumentException("Parameter parameters is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.create(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<StorageSyncServiceInner>>>() {
                @Override
                public Observable<ServiceResponse<StorageSyncServiceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<StorageSyncServiceInner> clientResponse = createDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<StorageSyncServiceInner> createDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageSyncServiceInner, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageSyncServiceInner>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .build(response);
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner getByResourceGroup(String resourceGroupName, String storageSyncServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> getByResourceGroupAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> getByResourceGroupAsync(String resourceGroupName, String storageSyncServiceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesGetHeaders> getByResourceGroupDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageSyncServiceInner, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageSyncServiceInner>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesGetHeaders.class);
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner update(String resourceGroupName, String storageSyncServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final StorageSyncServiceUpdateParameters parameters = null;
        return service.update(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the StorageSyncServiceInner object if successful.
     */
    public StorageSyncServiceInner update(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, parameters).toBlocking().single().body();
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceUpdateParameters parameters, final ServiceCallback<StorageSyncServiceInner> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, parameters), serviceCallback);
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<StorageSyncServiceInner> updateAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceUpdateParameters parameters) {
        return updateWithServiceResponseAsync(resourceGroupName, storageSyncServiceName, parameters).map(new Func1<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>, StorageSyncServiceInner>() {
            @Override
            public StorageSyncServiceInner call(ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Patch a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param parameters Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the StorageSyncServiceInner object
     */
    public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> updateWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName, StorageSyncServiceUpdateParameters parameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(parameters);
        return service.update(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), parameters, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<StorageSyncServiceInner, StorageSyncServicesUpdateHeaders> updateDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<StorageSyncServiceInner, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<StorageSyncServiceInner>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesUpdateHeaders.class);
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws StorageSyncErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String storageSyncServiceName) {
        deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).toBlocking().single().body();
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName), serviceCallback);
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String storageSyncServiceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, storageSyncServiceName).map(new Func1<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>, Void>() {
            @Override
            public Void call(ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a given StorageSyncService.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param storageSyncServiceName Name of Storage Sync Service resource.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponseWithHeaders} object if successful.
     */
    public Observable<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>> deleteWithServiceResponseAsync(String resourceGroupName, String storageSyncServiceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (storageSyncServiceName == null) {
            throw new IllegalArgumentException("Parameter storageSyncServiceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, storageSyncServiceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<Void, StorageSyncServicesDeleteHeaders> deleteDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesDeleteHeaders.class);
    }

    /**
     * Get a StorageSyncService list by Resource group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the PagedList<StorageSyncServiceInner> object if successful.
     */
    public PagedList<StorageSyncServiceInner> listByResourceGroup(String resourceGroupName) {
        PageImpl1<StorageSyncServiceInner> page = new PageImpl1<>();
        page.setItems(listByResourceGroupWithServiceResponseAsync(resourceGroupName).toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<StorageSyncServiceInner>(page) {
            @Override
            public Page<StorageSyncServiceInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Get a StorageSyncService list by Resource group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StorageSyncServiceInner>> listByResourceGroupAsync(String resourceGroupName, final ServiceCallback<List<StorageSyncServiceInner>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listByResourceGroupWithServiceResponseAsync(resourceGroupName), serviceCallback);
    }

    /**
     * Get a StorageSyncService list by Resource group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the observable to the List&lt;StorageSyncServiceInner&gt; object
     */
    public Observable<Page<StorageSyncServiceInner>> listByResourceGroupAsync(String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName).map(new Func1<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListByResourceGroupHeaders>, Page<StorageSyncServiceInner>>() {
            @Override
            public Page<StorageSyncServiceInner> call(ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListByResourceGroupHeaders> response) {
                PageImpl1<StorageSyncServiceInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Get a StorageSyncService list by Resource group name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @return the observable to the List&lt;StorageSyncServiceInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListByResourceGroupHeaders>> listByResourceGroupWithServiceResponseAsync(String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListByResourceGroupHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListByResourceGroupHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<StorageSyncServiceInner>> result = listByResourceGroupDelegate(response);
                        List<StorageSyncServiceInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<StorageSyncServiceInner>> clientResponse = new ServiceResponse<List<StorageSyncServiceInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<PageImpl1<StorageSyncServiceInner>, StorageSyncServicesListByResourceGroupHeaders> listByResourceGroupDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<StorageSyncServiceInner>, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<StorageSyncServiceInner>>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesListByResourceGroupHeaders.class);
    }

    /**
     * Get a StorageSyncService list by subscription.
     *
     * @return the PagedList<StorageSyncServiceInner> object if successful.
     */
    public PagedList<StorageSyncServiceInner> list() {
        PageImpl1<StorageSyncServiceInner> page = new PageImpl1<>();
        page.setItems(listWithServiceResponseAsync().toBlocking().single().body());
        page.setNextPageLink(null);
        return new PagedList<StorageSyncServiceInner>(page) {
            @Override
            public Page<StorageSyncServiceInner> nextPage(String nextPageLink) {
                return null;
            }
        };
    }

    /**
     * Get a StorageSyncService list by subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<StorageSyncServiceInner>> listAsync(final ServiceCallback<List<StorageSyncServiceInner>> serviceCallback) {
        return ServiceFuture.fromHeaderResponse(listWithServiceResponseAsync(), serviceCallback);
    }

    /**
     * Get a StorageSyncService list by subscription.
     *
     * @return the observable to the List&lt;StorageSyncServiceInner&gt; object
     */
    public Observable<Page<StorageSyncServiceInner>> listAsync() {
        return listWithServiceResponseAsync().map(new Func1<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListBySubscriptionHeaders>, Page<StorageSyncServiceInner>>() {
            @Override
            public Page<StorageSyncServiceInner> call(ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListBySubscriptionHeaders> response) {
                PageImpl1<StorageSyncServiceInner> page = new PageImpl1<>();
                page.setItems(response.body());
                return page;
            }
        });
    }

    /**
     * Get a StorageSyncService list by subscription.
     *
     * @return the observable to the List&lt;StorageSyncServiceInner&gt; object
     */
    public Observable<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListBySubscriptionHeaders>> listWithServiceResponseAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListBySubscriptionHeaders>>>() {
                @Override
                public Observable<ServiceResponseWithHeaders<List<StorageSyncServiceInner>, StorageSyncServicesListBySubscriptionHeaders>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<StorageSyncServiceInner>> result = listDelegate(response);
                        List<StorageSyncServiceInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<StorageSyncServiceInner>> clientResponse = new ServiceResponse<List<StorageSyncServiceInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponseWithHeaders<PageImpl1<StorageSyncServiceInner>, StorageSyncServicesListBySubscriptionHeaders> listDelegate(Response<ResponseBody> response) throws StorageSyncErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<StorageSyncServiceInner>, StorageSyncErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<StorageSyncServiceInner>>() { }.getType())
                .registerError(StorageSyncErrorException.class)
                .buildWithHeaders(response, StorageSyncServicesListBySubscriptionHeaders.class);
    }

}
