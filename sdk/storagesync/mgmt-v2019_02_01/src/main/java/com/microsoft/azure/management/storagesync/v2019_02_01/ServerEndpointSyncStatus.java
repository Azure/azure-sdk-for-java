/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.storagesync.v2019_02_01;

import org.joda.time.DateTime;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Server Endpoint sync status.
 */
public class ServerEndpointSyncStatus {
    /**
     * Download Health Status. Possible values include: 'Healthy', 'Error',
     * 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore',
     * 'NoActivity'.
     */
    @JsonProperty(value = "downloadHealth", access = JsonProperty.Access.WRITE_ONLY)
    private String downloadHealth;

    /**
     * Upload Health Status. Possible values include: 'Healthy', 'Error',
     * 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore',
     * 'NoActivity'.
     */
    @JsonProperty(value = "uploadHealth", access = JsonProperty.Access.WRITE_ONLY)
    private String uploadHealth;

    /**
     * Combined Health Status. Possible values include: 'Healthy', 'Error',
     * 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore',
     * 'NoActivity'.
     */
    @JsonProperty(value = "combinedHealth", access = JsonProperty.Access.WRITE_ONLY)
    private String combinedHealth;

    /**
     * Sync activity. Possible values include: 'Upload', 'Download',
     * 'UploadAndDownload'.
     */
    @JsonProperty(value = "syncActivity", access = JsonProperty.Access.WRITE_ONLY)
    private String syncActivity;

    /**
     * Total count of persistent files not syncing (combined upload +
     * download). Reserved for future use.
     */
    @JsonProperty(value = "totalPersistentFilesNotSyncingCount", access = JsonProperty.Access.WRITE_ONLY)
    private Long totalPersistentFilesNotSyncingCount;

    /**
     * Last Updated Timestamp.
     */
    @JsonProperty(value = "lastUpdatedTimestamp", access = JsonProperty.Access.WRITE_ONLY)
    private DateTime lastUpdatedTimestamp;

    /**
     * Upload Status.
     */
    @JsonProperty(value = "uploadStatus", access = JsonProperty.Access.WRITE_ONLY)
    private SyncSessionStatus uploadStatus;

    /**
     * Download Status.
     */
    @JsonProperty(value = "downloadStatus", access = JsonProperty.Access.WRITE_ONLY)
    private SyncSessionStatus downloadStatus;

    /**
     * Upload sync activity.
     */
    @JsonProperty(value = "uploadActivity", access = JsonProperty.Access.WRITE_ONLY)
    private SyncActivityStatus uploadActivity;

    /**
     * Download sync activity.
     */
    @JsonProperty(value = "downloadActivity", access = JsonProperty.Access.WRITE_ONLY)
    private SyncActivityStatus downloadActivity;

    /**
     * Offline Data Transfer State. Possible values include: 'InProgress',
     * 'Stopping', 'NotRunning', 'Complete'.
     */
    @JsonProperty(value = "offlineDataTransferStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String offlineDataTransferStatus;

    /**
     * Get download Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @return the downloadHealth value
     */
    public String downloadHealth() {
        return this.downloadHealth;
    }

    /**
     * Get upload Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @return the uploadHealth value
     */
    public String uploadHealth() {
        return this.uploadHealth;
    }

    /**
     * Get combined Health Status. Possible values include: 'Healthy', 'Error', 'SyncBlockedForRestore', 'SyncBlockedForChangeDetectionPostRestore', 'NoActivity'.
     *
     * @return the combinedHealth value
     */
    public String combinedHealth() {
        return this.combinedHealth;
    }

    /**
     * Get sync activity. Possible values include: 'Upload', 'Download', 'UploadAndDownload'.
     *
     * @return the syncActivity value
     */
    public String syncActivity() {
        return this.syncActivity;
    }

    /**
     * Get total count of persistent files not syncing (combined upload + download). Reserved for future use.
     *
     * @return the totalPersistentFilesNotSyncingCount value
     */
    public Long totalPersistentFilesNotSyncingCount() {
        return this.totalPersistentFilesNotSyncingCount;
    }

    /**
     * Get last Updated Timestamp.
     *
     * @return the lastUpdatedTimestamp value
     */
    public DateTime lastUpdatedTimestamp() {
        return this.lastUpdatedTimestamp;
    }

    /**
     * Get upload Status.
     *
     * @return the uploadStatus value
     */
    public SyncSessionStatus uploadStatus() {
        return this.uploadStatus;
    }

    /**
     * Get download Status.
     *
     * @return the downloadStatus value
     */
    public SyncSessionStatus downloadStatus() {
        return this.downloadStatus;
    }

    /**
     * Get upload sync activity.
     *
     * @return the uploadActivity value
     */
    public SyncActivityStatus uploadActivity() {
        return this.uploadActivity;
    }

    /**
     * Get download sync activity.
     *
     * @return the downloadActivity value
     */
    public SyncActivityStatus downloadActivity() {
        return this.downloadActivity;
    }

    /**
     * Get offline Data Transfer State. Possible values include: 'InProgress', 'Stopping', 'NotRunning', 'Complete'.
     *
     * @return the offlineDataTransferStatus value
     */
    public String offlineDataTransferStatus() {
        return this.offlineDataTransferStatus;
    }

}
