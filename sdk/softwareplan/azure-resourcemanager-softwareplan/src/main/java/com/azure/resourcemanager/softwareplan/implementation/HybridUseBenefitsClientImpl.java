// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.softwareplan.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.softwareplan.fluent.HybridUseBenefitsClient;
import com.azure.resourcemanager.softwareplan.fluent.models.HybridUseBenefitModelInner;
import com.azure.resourcemanager.softwareplan.models.HybridUseBenefitListResult;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in HybridUseBenefitsClient. */
public final class HybridUseBenefitsClientImpl implements HybridUseBenefitsClient {
    private final ClientLogger logger = new ClientLogger(HybridUseBenefitsClientImpl.class);

    /** The proxy service used to perform REST calls. */
    private final HybridUseBenefitsService service;

    /** The service client containing this operation class. */
    private final SoftwarePlanRPImpl client;

    /**
     * Initializes an instance of HybridUseBenefitsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    HybridUseBenefitsClientImpl(SoftwarePlanRPImpl client) {
        this.service =
            RestProxy.create(HybridUseBenefitsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for SoftwarePlanRPHybridUseBenefits to be used by the proxy service to
     * perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "SoftwarePlanRPHybrid")
    private interface HybridUseBenefitsService {
        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridUseBenefitListResult>> list(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @QueryParam("api-version") String apiVersion,
            @QueryParam("$filter") String filter,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Put("/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridUseBenefitModelInner>> create(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("planId") String planId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") HybridUseBenefitModelInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Patch("/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridUseBenefitModelInner>> update(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("planId") String planId,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") HybridUseBenefitModelInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridUseBenefitModelInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("planId") String planId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete("/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}")
        @ExpectedResponses({200, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(
            @HostParam("$host") String endpoint,
            @PathParam("scope") String scope,
            @PathParam("planId") String planId,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HybridUseBenefitListResult>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param filter Supports applying filter on the type of SKU.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridUseBenefitModelInner>> listSinglePageAsync(String scope, String filter) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .list(this.client.getEndpoint(), scope, this.client.getApiVersion(), filter, accept, context))
            .<PagedResponse<HybridUseBenefitModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param filter Supports applying filter on the type of SKU.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridUseBenefitModelInner>> listSinglePageAsync(
        String scope, String filter, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), scope, this.client.getApiVersion(), filter, accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param filter Supports applying filter on the type of SKU.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridUseBenefitModelInner> listAsync(String scope, String filter) {
        return new PagedFlux<>(() -> listSinglePageAsync(scope, filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridUseBenefitModelInner> listAsync(String scope) {
        final String filter = null;
        return new PagedFlux<>(() -> listSinglePageAsync(scope, filter), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param filter Supports applying filter on the type of SKU.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HybridUseBenefitModelInner> listAsync(String scope, String filter, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(scope, filter, context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridUseBenefitModelInner> list(String scope) {
        final String filter = null;
        return new PagedIterable<>(listAsync(scope, filter));
    }

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param filter Supports applying filter on the type of SKU.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HybridUseBenefitModelInner> list(String scope, String filter, Context context) {
        return new PagedIterable<>(listAsync(scope, filter, context));
    }

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridUseBenefitModelInner>> createWithResponseAsync(
        String scope, String planId, HybridUseBenefitModelInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(),
                            scope,
                            planId,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridUseBenefitModelInner>> createWithResponseAsync(
        String scope, String planId, HybridUseBenefitModelInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(this.client.getEndpoint(), scope, planId, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridUseBenefitModelInner> createAsync(String scope, String planId, HybridUseBenefitModelInner body) {
        return createWithResponseAsync(scope, planId, body)
            .flatMap(
                (Response<HybridUseBenefitModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridUseBenefitModelInner create(String scope, String planId, HybridUseBenefitModelInner body) {
        return createAsync(scope, planId, body).block();
    }

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridUseBenefitModelInner> createWithResponse(
        String scope, String planId, HybridUseBenefitModelInner body, Context context) {
        return createWithResponseAsync(scope, planId, body, context).block();
    }

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridUseBenefitModelInner>> updateWithResponseAsync(
        String scope, String planId, HybridUseBenefitModelInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .update(
                            this.client.getEndpoint(),
                            scope,
                            planId,
                            this.client.getApiVersion(),
                            body,
                            accept,
                            context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridUseBenefitModelInner>> updateWithResponseAsync(
        String scope, String planId, HybridUseBenefitModelInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .update(this.client.getEndpoint(), scope, planId, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridUseBenefitModelInner> updateAsync(String scope, String planId, HybridUseBenefitModelInner body) {
        return updateWithResponseAsync(scope, planId, body)
            .flatMap(
                (Response<HybridUseBenefitModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridUseBenefitModelInner update(String scope, String planId, HybridUseBenefitModelInner body) {
        return updateAsync(scope, planId, body).block();
    }

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridUseBenefitModelInner> updateWithResponse(
        String scope, String planId, HybridUseBenefitModelInner body, Context context) {
        return updateWithResponseAsync(scope, planId, body, context).block();
    }

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridUseBenefitModelInner>> getWithResponseAsync(String scope, String planId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.get(this.client.getEndpoint(), scope, planId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HybridUseBenefitModelInner>> getWithResponseAsync(
        String scope, String planId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), scope, planId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HybridUseBenefitModelInner> getAsync(String scope, String planId) {
        return getWithResponseAsync(scope, planId)
            .flatMap(
                (Response<HybridUseBenefitModelInner> res) -> {
                    if (res.getValue() != null) {
                        return Mono.just(res.getValue());
                    } else {
                        return Mono.empty();
                    }
                });
    }

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HybridUseBenefitModelInner get(String scope, String planId) {
        return getAsync(scope, planId).block();
    }

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HybridUseBenefitModelInner> getWithResponse(String scope, String planId, Context context) {
        return getWithResponseAsync(scope, planId, context).block();
    }

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope, String planId) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(this.client.getEndpoint(), scope, planId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String scope, String planId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (scope == null) {
            return Mono.error(new IllegalArgumentException("Parameter scope is required and cannot be null."));
        }
        if (planId == null) {
            return Mono.error(new IllegalArgumentException("Parameter planId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), scope, planId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String scope, String planId) {
        return deleteWithResponseAsync(scope, planId).flatMap((Response<Void> res) -> Mono.empty());
    }

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String scope, String planId) {
        deleteAsync(scope, planId).block();
    }

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String scope, String planId, Context context) {
        return deleteWithResponseAsync(scope, planId, context).block();
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of hybrid use benefits.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridUseBenefitModelInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HybridUseBenefitModelInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of hybrid use benefits.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HybridUseBenefitModelInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
