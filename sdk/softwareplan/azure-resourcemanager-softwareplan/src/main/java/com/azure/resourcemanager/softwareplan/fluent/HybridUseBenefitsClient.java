// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.softwareplan.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.softwareplan.fluent.models.HybridUseBenefitModelInner;

/** An instance of this class provides access to all the operations defined in HybridUseBenefitsClient. */
public interface HybridUseBenefitsClient {
    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HybridUseBenefitModelInner> list(String scope);

    /**
     * Get all hybrid use benefits associated with an ARM resource.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param filter Supports applying filter on the type of SKU.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all hybrid use benefits associated with an ARM resource as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HybridUseBenefitModelInner> list(String scope, String filter, Context context);

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HybridUseBenefitModelInner> createWithResponse(
        String scope, String planId, HybridUseBenefitModelInner body, Context context);

    /**
     * Create a new hybrid use benefit under a given scope.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HybridUseBenefitModelInner create(String scope, String planId, HybridUseBenefitModelInner body);

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HybridUseBenefitModelInner> updateWithResponse(
        String scope, String planId, HybridUseBenefitModelInner body, Context context);

    /**
     * Updates an existing hybrid use benefit.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param body Request body for creating a hybrid use benefit.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response on GET of a hybrid use benefit.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HybridUseBenefitModelInner update(String scope, String planId, HybridUseBenefitModelInner body);

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HybridUseBenefitModelInner> getWithResponse(String scope, String planId, Context context);

    /**
     * Gets a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a given plan ID.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HybridUseBenefitModelInner get(String scope, String planId);

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String scope, String planId, Context context);

    /**
     * Deletes a given plan ID.
     *
     * @param scope The scope at which the operation is performed. This is limited to Microsoft.Compute/virtualMachines
     *     and Microsoft.Compute/hostGroups/hosts for now.
     * @param planId This is a unique identifier for a plan. Should be a guid.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String scope, String planId);
}
