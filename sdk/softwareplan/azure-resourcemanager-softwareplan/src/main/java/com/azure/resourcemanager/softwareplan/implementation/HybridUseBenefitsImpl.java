// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.softwareplan.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.softwareplan.fluent.HybridUseBenefitsClient;
import com.azure.resourcemanager.softwareplan.fluent.models.HybridUseBenefitModelInner;
import com.azure.resourcemanager.softwareplan.models.HybridUseBenefitModel;
import com.azure.resourcemanager.softwareplan.models.HybridUseBenefits;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class HybridUseBenefitsImpl implements HybridUseBenefits {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(HybridUseBenefitsImpl.class);

    private final HybridUseBenefitsClient innerClient;

    private final com.azure.resourcemanager.softwareplan.SoftwarePlanManager serviceManager;

    public HybridUseBenefitsImpl(
        HybridUseBenefitsClient innerClient,
        com.azure.resourcemanager.softwareplan.SoftwarePlanManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<HybridUseBenefitModel> list(String scope) {
        PagedIterable<HybridUseBenefitModelInner> inner = this.serviceClient().list(scope);
        return Utils.mapPage(inner, inner1 -> new HybridUseBenefitModelImpl(inner1, this.manager()));
    }

    public PagedIterable<HybridUseBenefitModel> list(String scope, String filter, Context context) {
        PagedIterable<HybridUseBenefitModelInner> inner = this.serviceClient().list(scope, filter, context);
        return Utils.mapPage(inner, inner1 -> new HybridUseBenefitModelImpl(inner1, this.manager()));
    }

    public HybridUseBenefitModel get(String scope, String planId) {
        HybridUseBenefitModelInner inner = this.serviceClient().get(scope, planId);
        if (inner != null) {
            return new HybridUseBenefitModelImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<HybridUseBenefitModel> getWithResponse(String scope, String planId, Context context) {
        Response<HybridUseBenefitModelInner> inner = this.serviceClient().getWithResponse(scope, planId, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new HybridUseBenefitModelImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void deleteByResourceGroup(String scope, String planId) {
        this.serviceClient().delete(scope, planId);
    }

    public Response<Void> deleteWithResponse(String scope, String planId, Context context) {
        return this.serviceClient().deleteWithResponse(scope, planId, context);
    }

    public HybridUseBenefitModel getById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String planId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "planId");
        if (planId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridUseBenefits'.", id)));
        }
        return this.getWithResponse(scope, planId, Context.NONE).getValue();
    }

    public Response<HybridUseBenefitModel> getByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String planId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "planId");
        if (planId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridUseBenefits'.", id)));
        }
        return this.getWithResponse(scope, planId, context);
    }

    public void deleteById(String id) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String planId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "planId");
        if (planId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridUseBenefits'.", id)));
        }
        this.deleteWithResponse(scope, planId, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String scope =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "scope");
        if (scope == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'scope'.", id)));
        }
        String planId =
            Utils
                .getValueFromIdByParameterName(
                    id, "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "planId");
        if (planId == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'hybridUseBenefits'.", id)));
        }
        return this.deleteWithResponse(scope, planId, context);
    }

    private HybridUseBenefitsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.softwareplan.SoftwarePlanManager manager() {
        return this.serviceManager;
    }

    public HybridUseBenefitModelImpl define(String name) {
        return new HybridUseBenefitModelImpl(name, this.manager());
    }
}
