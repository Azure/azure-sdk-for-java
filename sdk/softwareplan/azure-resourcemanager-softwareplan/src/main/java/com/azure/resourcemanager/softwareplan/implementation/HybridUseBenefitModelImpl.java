// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.softwareplan.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.softwareplan.fluent.models.HybridUseBenefitModelInner;
import com.azure.resourcemanager.softwareplan.models.HybridUseBenefitModel;
import com.azure.resourcemanager.softwareplan.models.ProvisioningState;
import com.azure.resourcemanager.softwareplan.models.Sku;
import java.time.OffsetDateTime;

public final class HybridUseBenefitModelImpl
    implements HybridUseBenefitModel, HybridUseBenefitModel.Definition, HybridUseBenefitModel.Update {
    private HybridUseBenefitModelInner innerObject;

    private final com.azure.resourcemanager.softwareplan.SoftwarePlanManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public Integer etag() {
        return this.innerModel().etag();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public OffsetDateTime createdDate() {
        return this.innerModel().createdDate();
    }

    public OffsetDateTime lastUpdatedDate() {
        return this.innerModel().lastUpdatedDate();
    }

    public HybridUseBenefitModelInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.softwareplan.SoftwarePlanManager manager() {
        return this.serviceManager;
    }

    private String scope;

    private String planId;

    public HybridUseBenefitModelImpl withExistingScope(String scope) {
        this.scope = scope;
        return this;
    }

    public HybridUseBenefitModel create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridUseBenefits()
                .createWithResponse(scope, planId, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public HybridUseBenefitModel create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridUseBenefits()
                .createWithResponse(scope, planId, this.innerModel(), context)
                .getValue();
        return this;
    }

    HybridUseBenefitModelImpl(String name, com.azure.resourcemanager.softwareplan.SoftwarePlanManager serviceManager) {
        this.innerObject = new HybridUseBenefitModelInner();
        this.serviceManager = serviceManager;
        this.planId = name;
    }

    public HybridUseBenefitModelImpl update() {
        return this;
    }

    public HybridUseBenefitModel apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridUseBenefits()
                .updateWithResponse(scope, planId, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public HybridUseBenefitModel apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridUseBenefits()
                .updateWithResponse(scope, planId, this.innerModel(), context)
                .getValue();
        return this;
    }

    HybridUseBenefitModelImpl(
        HybridUseBenefitModelInner innerObject,
        com.azure.resourcemanager.softwareplan.SoftwarePlanManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.scope =
            Utils
                .getValueFromIdByParameterName(
                    innerObject.id(), "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "scope");
        this.planId =
            Utils
                .getValueFromIdByParameterName(
                    innerObject.id(), "/{scope}/providers/Microsoft.SoftwarePlan/hybridUseBenefits/{planId}", "planId");
    }

    public HybridUseBenefitModel refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getHybridUseBenefits()
                .getWithResponse(scope, planId, Context.NONE)
                .getValue();
        return this;
    }

    public HybridUseBenefitModel refresh(Context context) {
        this.innerObject =
            serviceManager.serviceClient().getHybridUseBenefits().getWithResponse(scope, planId, context).getValue();
        return this;
    }

    public HybridUseBenefitModelImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }
}
