// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.engagementfabric.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.engagementfabric.models.ProxyOnlyResource;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** The EngagementFabric channel. */
@Fluent
public final class ChannelInner extends ProxyOnlyResource {
    /*
     * The properties of the channel
     */
    @JsonProperty(value = "properties")
    private ChannelProperties innerProperties;

    /**
     * Get the innerProperties property: The properties of the channel.
     *
     * @return the innerProperties value.
     */
    private ChannelProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the channelType property: The channel type.
     *
     * @return the channelType value.
     */
    public String channelType() {
        return this.innerProperties() == null ? null : this.innerProperties().channelType();
    }

    /**
     * Set the channelType property: The channel type.
     *
     * @param channelType the channelType value to set.
     * @return the ChannelInner object itself.
     */
    public ChannelInner withChannelType(String channelType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChannelProperties();
        }
        this.innerProperties().withChannelType(channelType);
        return this;
    }

    /**
     * Get the channelFunctions property: The functions to be enabled for the channel.
     *
     * @return the channelFunctions value.
     */
    public List<String> channelFunctions() {
        return this.innerProperties() == null ? null : this.innerProperties().channelFunctions();
    }

    /**
     * Set the channelFunctions property: The functions to be enabled for the channel.
     *
     * @param channelFunctions the channelFunctions value to set.
     * @return the ChannelInner object itself.
     */
    public ChannelInner withChannelFunctions(List<String> channelFunctions) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChannelProperties();
        }
        this.innerProperties().withChannelFunctions(channelFunctions);
        return this;
    }

    /**
     * Get the credentials property: The channel credentials.
     *
     * @return the credentials value.
     */
    public Map<String, String> credentials() {
        return this.innerProperties() == null ? null : this.innerProperties().credentials();
    }

    /**
     * Set the credentials property: The channel credentials.
     *
     * @param credentials the credentials value to set.
     * @return the ChannelInner object itself.
     */
    public ChannelInner withCredentials(Map<String, String> credentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ChannelProperties();
        }
        this.innerProperties().withCredentials(credentials);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }
}
