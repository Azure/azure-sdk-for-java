// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.engagementfabric.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.resourcemanager.engagementfabric.fluent.models.AccountInner;
import com.azure.resourcemanager.engagementfabric.fluent.models.ChannelTypeDescriptionListInner;
import com.azure.resourcemanager.engagementfabric.fluent.models.KeyDescriptionInner;
import com.azure.resourcemanager.engagementfabric.models.AccountPatch;
import com.azure.resourcemanager.engagementfabric.models.RegenerateKeyParameter;

/** An instance of this class provides access to all the operations defined in AccountsClient. */
public interface AccountsClient {
    /**
     * Get the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EngagementFabric account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccountInner getByResourceGroup(String resourceGroupName, String accountName);

    /**
     * Get the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EngagementFabric account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccountInner> getByResourceGroupWithResponse(
        String resourceGroupName, String accountName, Context context);

    /**
     * Create or Update the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param account The EngagementFabric account description.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EngagementFabric account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccountInner createOrUpdate(String resourceGroupName, String accountName, AccountInner account);

    /**
     * Create or Update the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param account The EngagementFabric account description.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EngagementFabric account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccountInner> createOrUpdateWithResponse(
        String resourceGroupName, String accountName, AccountInner account, Context context);

    /**
     * Delete the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String accountName);

    /**
     * Delete the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<Void> deleteWithResponse(String resourceGroupName, String accountName, Context context);

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param accountPatch The account patch.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EngagementFabric account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    AccountInner update(String resourceGroupName, String accountName, AccountPatch accountPatch);

    /**
     * Update EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param accountPatch The account patch.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the EngagementFabric account.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<AccountInner> updateWithResponse(
        String resourceGroupName, String accountName, AccountPatch accountPatch, Context context);

    /**
     * List the EngagementFabric accounts in given subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the EngagementFabric accounts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccountInner> list();

    /**
     * List the EngagementFabric accounts in given subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the EngagementFabric accounts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccountInner> list(Context context);

    /**
     * List EngagementFabric accounts in given resource group.
     *
     * @param resourceGroupName Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the EngagementFabric accounts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccountInner> listByResourceGroup(String resourceGroupName);

    /**
     * List EngagementFabric accounts in given resource group.
     *
     * @param resourceGroupName Resource Group Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the EngagementFabric accounts.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<AccountInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * List keys of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the EngagementFabric account keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<KeyDescriptionInner> listKeys(String resourceGroupName, String accountName);

    /**
     * List keys of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the EngagementFabric account keys.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<KeyDescriptionInner> listKeys(String resourceGroupName, String accountName, Context context);

    /**
     * Regenerate key of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param parameter Parameters specifying the key to be regenerated.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the EngagementFabric account key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    KeyDescriptionInner regenerateKey(String resourceGroupName, String accountName, RegenerateKeyParameter parameter);

    /**
     * Regenerate key of the EngagementFabric account.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param parameter Parameters specifying the key to be regenerated.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the description of the EngagementFabric account key.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<KeyDescriptionInner> regenerateKeyWithResponse(
        String resourceGroupName, String accountName, RegenerateKeyParameter parameter, Context context);

    /**
     * List available EngagementFabric channel types and functions.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of the EngagementFabric channel descriptions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    ChannelTypeDescriptionListInner listChannelTypes(String resourceGroupName, String accountName);

    /**
     * List available EngagementFabric channel types and functions.
     *
     * @param resourceGroupName Resource Group Name.
     * @param accountName Account Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of the EngagementFabric channel descriptions.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<ChannelTypeDescriptionListInner> listChannelTypesWithResponse(
        String resourceGroupName, String accountName, Context context);
}
