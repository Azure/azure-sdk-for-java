// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.engagementfabric.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.engagementfabric.fluent.models.AccountInner;
import com.azure.resourcemanager.engagementfabric.models.Account;
import com.azure.resourcemanager.engagementfabric.models.AccountPatch;
import com.azure.resourcemanager.engagementfabric.models.ChannelTypeDescriptionList;
import com.azure.resourcemanager.engagementfabric.models.KeyDescription;
import com.azure.resourcemanager.engagementfabric.models.RegenerateKeyParameter;
import com.azure.resourcemanager.engagementfabric.models.Sku;
import java.util.Collections;
import java.util.Map;

public final class AccountImpl implements Account, Account.Definition, Account.Update {
    private AccountInner innerObject;

    private final com.azure.resourcemanager.engagementfabric.EngagementFabricManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Sku sku() {
        return this.innerModel().sku();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public AccountInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.engagementfabric.EngagementFabricManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String accountName;

    private AccountPatch updateAccountPatch;

    public AccountImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Account create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccounts()
                .createOrUpdateWithResponse(resourceGroupName, accountName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public Account create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccounts()
                .createOrUpdateWithResponse(resourceGroupName, accountName, this.innerModel(), context)
                .getValue();
        return this;
    }

    AccountImpl(String name, com.azure.resourcemanager.engagementfabric.EngagementFabricManager serviceManager) {
        this.innerObject = new AccountInner();
        this.serviceManager = serviceManager;
        this.accountName = name;
    }

    public AccountImpl update() {
        this.updateAccountPatch = new AccountPatch();
        return this;
    }

    public Account apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccounts()
                .updateWithResponse(resourceGroupName, accountName, updateAccountPatch, Context.NONE)
                .getValue();
        return this;
    }

    public Account apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccounts()
                .updateWithResponse(resourceGroupName, accountName, updateAccountPatch, context)
                .getValue();
        return this;
    }

    AccountImpl(
        AccountInner innerObject, com.azure.resourcemanager.engagementfabric.EngagementFabricManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.accountName = Utils.getValueFromIdByName(innerObject.id(), "Accounts");
    }

    public Account refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, Context.NONE)
                .getValue();
        return this;
    }

    public Account refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getAccounts()
                .getByResourceGroupWithResponse(resourceGroupName, accountName, context)
                .getValue();
        return this;
    }

    public PagedIterable<KeyDescription> listKeys() {
        return serviceManager.accounts().listKeys(resourceGroupName, accountName);
    }

    public PagedIterable<KeyDescription> listKeys(Context context) {
        return serviceManager.accounts().listKeys(resourceGroupName, accountName, context);
    }

    public KeyDescription regenerateKey(RegenerateKeyParameter parameter) {
        return serviceManager.accounts().regenerateKey(resourceGroupName, accountName, parameter);
    }

    public Response<KeyDescription> regenerateKeyWithResponse(RegenerateKeyParameter parameter, Context context) {
        return serviceManager.accounts().regenerateKeyWithResponse(resourceGroupName, accountName, parameter, context);
    }

    public ChannelTypeDescriptionList listChannelTypes() {
        return serviceManager.accounts().listChannelTypes(resourceGroupName, accountName);
    }

    public Response<ChannelTypeDescriptionList> listChannelTypesWithResponse(Context context) {
        return serviceManager.accounts().listChannelTypesWithResponse(resourceGroupName, accountName, context);
    }

    public AccountImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public AccountImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public AccountImpl withSku(Sku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public AccountImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateAccountPatch.withTags(tags);
            return this;
        }
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
