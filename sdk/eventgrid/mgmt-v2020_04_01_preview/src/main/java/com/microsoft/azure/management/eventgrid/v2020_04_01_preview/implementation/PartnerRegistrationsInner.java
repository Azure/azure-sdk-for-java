/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrationUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PartnerRegistrations.
 */
public class PartnerRegistrationsInner implements InnerSupportsGet<PartnerRegistrationInner>, InnerSupportsDelete<Void>, InnerSupportsListing<PartnerRegistrationInner> {
    /** The Retrofit service to perform REST calls. */
    private PartnerRegistrationsService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of PartnerRegistrationsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PartnerRegistrationsInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(PartnerRegistrationsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PartnerRegistrations to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PartnerRegistrationsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerRegistrationName") String partnerRegistrationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerRegistrationName") String partnerRegistrationName, @Body PartnerRegistrationInner partnerRegistrationInfo, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerRegistrationName") String partnerRegistrationName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations/{partnerRegistrationName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerRegistrationName") String partnerRegistrationName, @Body PartnerRegistrationUpdateParameters partnerRegistrationUpdateParameters, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerRegistrations")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerRegistrations")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations list1" })
        @GET("providers/Microsoft.EventGrid/partnerRegistrations")
        Observable<Response<ResponseBody>> list1(@Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerRegistrations listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a partner registration.
     * Gets a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerRegistrationInner object if successful.
     */
    public PartnerRegistrationInner getByResourceGroup(String resourceGroupName, String partnerRegistrationName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerRegistrationName).toBlocking().single().body();
    }

    /**
     * Get a partner registration.
     * Gets a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerRegistrationInner> getByResourceGroupAsync(String resourceGroupName, String partnerRegistrationName, final ServiceCallback<PartnerRegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerRegistrationName), serviceCallback);
    }

    /**
     * Get a partner registration.
     * Gets a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerRegistrationInner object
     */
    public Observable<PartnerRegistrationInner> getByResourceGroupAsync(String resourceGroupName, String partnerRegistrationName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerRegistrationName).map(new Func1<ServiceResponse<PartnerRegistrationInner>, PartnerRegistrationInner>() {
            @Override
            public PartnerRegistrationInner call(ServiceResponse<PartnerRegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a partner registration.
     * Gets a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerRegistrationInner object
     */
    public Observable<ServiceResponse<PartnerRegistrationInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String partnerRegistrationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerRegistrationName == null) {
            throw new IllegalArgumentException("Parameter partnerRegistrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, partnerRegistrationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerRegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerRegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerRegistrationInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerRegistrationInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerRegistrationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerRegistrationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a partner registration.
     * Creates a new partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationInfo PartnerRegistration information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerRegistrationInner object if successful.
     */
    public PartnerRegistrationInner createOrUpdate(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationInner partnerRegistrationInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerRegistrationName, partnerRegistrationInfo).toBlocking().single().body();
    }

    /**
     * Create a partner registration.
     * Creates a new partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationInfo PartnerRegistration information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerRegistrationInner> createOrUpdateAsync(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationInner partnerRegistrationInfo, final ServiceCallback<PartnerRegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerRegistrationName, partnerRegistrationInfo), serviceCallback);
    }

    /**
     * Create a partner registration.
     * Creates a new partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationInfo PartnerRegistration information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerRegistrationInner object
     */
    public Observable<PartnerRegistrationInner> createOrUpdateAsync(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationInner partnerRegistrationInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerRegistrationName, partnerRegistrationInfo).map(new Func1<ServiceResponse<PartnerRegistrationInner>, PartnerRegistrationInner>() {
            @Override
            public PartnerRegistrationInner call(ServiceResponse<PartnerRegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a partner registration.
     * Creates a new partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationInfo PartnerRegistration information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerRegistrationInner object
     */
    public Observable<ServiceResponse<PartnerRegistrationInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationInner partnerRegistrationInfo) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerRegistrationName == null) {
            throw new IllegalArgumentException("Parameter partnerRegistrationName is required and cannot be null.");
        }
        if (partnerRegistrationInfo == null) {
            throw new IllegalArgumentException("Parameter partnerRegistrationInfo is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(partnerRegistrationInfo);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, partnerRegistrationName, partnerRegistrationInfo, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerRegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerRegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerRegistrationInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerRegistrationInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerRegistrationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerRegistrationInner>() { }.getType())
                .register(202, new TypeToken<PartnerRegistrationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a partner registration.
     * Deletes a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String partnerRegistrationName) {
        deleteWithServiceResponseAsync(resourceGroupName, partnerRegistrationName).toBlocking().single().body();
    }

    /**
     * Delete a partner registration.
     * Deletes a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String partnerRegistrationName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, partnerRegistrationName), serviceCallback);
    }

    /**
     * Delete a partner registration.
     * Deletes a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String partnerRegistrationName) {
        return deleteWithServiceResponseAsync(resourceGroupName, partnerRegistrationName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a partner registration.
     * Deletes a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String partnerRegistrationName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerRegistrationName == null) {
            throw new IllegalArgumentException("Parameter partnerRegistrationName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.delete(this.client.subscriptionId(), resourceGroupName, partnerRegistrationName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = deleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> deleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a partner registration.
     * Updates a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationUpdateParameters Partner registration update information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerRegistrationInner object if successful.
     */
    public PartnerRegistrationInner update(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationUpdateParameters partnerRegistrationUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerRegistrationName, partnerRegistrationUpdateParameters).toBlocking().single().body();
    }

    /**
     * Update a partner registration.
     * Updates a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationUpdateParameters Partner registration update information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerRegistrationInner> updateAsync(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationUpdateParameters partnerRegistrationUpdateParameters, final ServiceCallback<PartnerRegistrationInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, partnerRegistrationName, partnerRegistrationUpdateParameters), serviceCallback);
    }

    /**
     * Update a partner registration.
     * Updates a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationUpdateParameters Partner registration update information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerRegistrationInner object
     */
    public Observable<PartnerRegistrationInner> updateAsync(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationUpdateParameters partnerRegistrationUpdateParameters) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerRegistrationName, partnerRegistrationUpdateParameters).map(new Func1<ServiceResponse<PartnerRegistrationInner>, PartnerRegistrationInner>() {
            @Override
            public PartnerRegistrationInner call(ServiceResponse<PartnerRegistrationInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner registration.
     * Updates a partner registration with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerRegistrationName Name of the partner registration.
     * @param partnerRegistrationUpdateParameters Partner registration update information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerRegistrationInner object
     */
    public Observable<ServiceResponse<PartnerRegistrationInner>> updateWithServiceResponseAsync(String resourceGroupName, String partnerRegistrationName, PartnerRegistrationUpdateParameters partnerRegistrationUpdateParameters) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerRegistrationName == null) {
            throw new IllegalArgumentException("Parameter partnerRegistrationName is required and cannot be null.");
        }
        if (partnerRegistrationUpdateParameters == null) {
            throw new IllegalArgumentException("Parameter partnerRegistrationUpdateParameters is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(partnerRegistrationUpdateParameters);
        return service.update(this.client.subscriptionId(), resourceGroupName, partnerRegistrationName, partnerRegistrationUpdateParameters, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerRegistrationInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerRegistrationInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerRegistrationInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerRegistrationInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerRegistrationInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(201, new TypeToken<PartnerRegistrationInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public PagedList<PartnerRegistrationInner> list() {
        ServiceResponse<Page<PartnerRegistrationInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<PartnerRegistrationInner>(response.body()) {
            @Override
            public Page<PartnerRegistrationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> listAsync(final ListOperationCallback<PartnerRegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<Page<PartnerRegistrationInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Page<PartnerRegistrationInner>>() {
                @Override
                public Page<PartnerRegistrationInner> call(ServiceResponse<Page<PartnerRegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(ServiceResponse<Page<PartnerRegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerRegistrationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerRegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public PagedList<PartnerRegistrationInner> list(final String filter, final Integer top) {
        ServiceResponse<Page<PartnerRegistrationInner>> response = listSinglePageAsync(filter, top).toBlocking().single();
        return new PagedList<PartnerRegistrationInner>(response.body()) {
            @Override
            public Page<PartnerRegistrationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> listAsync(final String filter, final Integer top, final ListOperationCallback<PartnerRegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter, top),
            new Func1<String, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<Page<PartnerRegistrationInner>> listAsync(final String filter, final Integer top) {
        return listWithServiceResponseAsync(filter, top)
            .map(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Page<PartnerRegistrationInner>>() {
                @Override
                public Page<PartnerRegistrationInner> call(ServiceResponse<Page<PartnerRegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listWithServiceResponseAsync(final String filter, final Integer top) {
        return listSinglePageAsync(filter, top)
            .concatMap(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(ServiceResponse<Page<PartnerRegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listSinglePageAsync(final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerRegistrationInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerRegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerRegistrationInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerRegistrationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerRegistrationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public PagedList<PartnerRegistrationInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<PartnerRegistrationInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<PartnerRegistrationInner>(response.body()) {
            @Override
            public Page<PartnerRegistrationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<PartnerRegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<Page<PartnerRegistrationInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Page<PartnerRegistrationInner>>() {
                @Override
                public Page<PartnerRegistrationInner> call(ServiceResponse<Page<PartnerRegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(ServiceResponse<Page<PartnerRegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerRegistrationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerRegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public PagedList<PartnerRegistrationInner> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top) {
        ServiceResponse<Page<PartnerRegistrationInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter, top).toBlocking().single();
        return new PagedList<PartnerRegistrationInner>(response.body()) {
            @Override
            public Page<PartnerRegistrationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final ListOperationCallback<PartnerRegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, filter, top),
            new Func1<String, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<Page<PartnerRegistrationInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, filter, top)
            .map(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Page<PartnerRegistrationInner>>() {
                @Override
                public Page<PartnerRegistrationInner> call(ServiceResponse<Page<PartnerRegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter, top)
            .concatMap(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(ServiceResponse<Page<PartnerRegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param resourceGroupName The name of the resource group within the user's subscription.
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerRegistrationInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerRegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerRegistrationInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerRegistrationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerRegistrationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List all available partners registrations.
     * List all partners registrations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public List<PartnerRegistrationInner> list1() {
        return list1WithServiceResponseAsync().toBlocking().single().body();
    }

    /**
     * List all available partners registrations.
     * List all partners registrations.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> list1Async(final ServiceCallback<List<PartnerRegistrationInner>> serviceCallback) {
        return ServiceFuture.fromResponse(list1WithServiceResponseAsync(), serviceCallback);
    }

    /**
     * List all available partners registrations.
     * List all partners registrations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<List<PartnerRegistrationInner>> list1Async() {
        return list1WithServiceResponseAsync().map(new Func1<ServiceResponse<List<PartnerRegistrationInner>>, List<PartnerRegistrationInner>>() {
            @Override
            public List<PartnerRegistrationInner> call(ServiceResponse<List<PartnerRegistrationInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List all available partners registrations.
     * List all partners registrations.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<List<PartnerRegistrationInner>>> list1WithServiceResponseAsync() {
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list1(this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl1<PartnerRegistrationInner>> result = list1Delegate(response);
                        List<PartnerRegistrationInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<PartnerRegistrationInner>> clientResponse = new ServiceResponse<List<PartnerRegistrationInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl1<PartnerRegistrationInner>> list1Delegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl1<PartnerRegistrationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl1<PartnerRegistrationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public PagedList<PartnerRegistrationInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<PartnerRegistrationInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PartnerRegistrationInner>(response.body()) {
            @Override
            public Page<PartnerRegistrationInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PartnerRegistrationInner>> serviceFuture, final ListOperationCallback<PartnerRegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<Page<PartnerRegistrationInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Page<PartnerRegistrationInner>>() {
                @Override
                public Page<PartnerRegistrationInner> call(ServiceResponse<Page<PartnerRegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(ServiceResponse<Page<PartnerRegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner registrations under an Azure subscription.
     * List all the partner registrations under an Azure subscription.
     *
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerRegistrationInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerRegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerRegistrationInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerRegistrationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerRegistrationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object if successful.
     */
    public PagedList<PartnerRegistrationInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PartnerRegistrationInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PartnerRegistrationInner>(response.body()) {
            @Override
            public Page<PartnerRegistrationInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerRegistrationInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PartnerRegistrationInner>> serviceFuture, final ListOperationCallback<PartnerRegistrationInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<Page<PartnerRegistrationInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Page<PartnerRegistrationInner>>() {
                @Override
                public Page<PartnerRegistrationInner> call(ServiceResponse<Page<PartnerRegistrationInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerRegistrationInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PartnerRegistrationInner>>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(ServiceResponse<Page<PartnerRegistrationInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner registrations under a resource group.
     * List all the partner registrations under a resource group.
     *
    ServiceResponse<PageImpl<PartnerRegistrationInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerRegistrationInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerRegistrationInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerRegistrationInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerRegistrationInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerRegistrationInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerRegistrationInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerRegistrationInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerRegistrationInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
