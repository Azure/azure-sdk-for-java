/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopicUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PartnerTopics.
 */
public class PartnerTopicsInner implements InnerSupportsGet<PartnerTopicInner>, InnerSupportsDelete<Void>, InnerSupportsListing<PartnerTopicInner> {
    /** The Retrofit service to perform REST calls. */
    private PartnerTopicsService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of PartnerTopicsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PartnerTopicsInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(PartnerTopicsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PartnerTopics to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PartnerTopicsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerTopicName") String partnerTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerTopicName") String partnerTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerTopicName") String partnerTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerTopicName") String partnerTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PartnerTopicUpdateParameters partnerTopicUpdateParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerTopics")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics activate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/activate")
        Observable<Response<ResponseBody>> activate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerTopicName") String partnerTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics deactivate" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerTopics/{partnerTopicName}/deactivate")
        Observable<Response<ResponseBody>> deactivate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerTopicName") String partnerTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopics listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a partner topic.
     * Get properties of a partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerTopicInner object if successful.
     */
    public PartnerTopicInner getByResourceGroup(String resourceGroupName, String partnerTopicName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerTopicName).toBlocking().single().body();
    }

    /**
     * Get a partner topic.
     * Get properties of a partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerTopicInner> getByResourceGroupAsync(String resourceGroupName, String partnerTopicName, final ServiceCallback<PartnerTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerTopicName), serviceCallback);
    }

    /**
     * Get a partner topic.
     * Get properties of a partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<PartnerTopicInner> getByResourceGroupAsync(String resourceGroupName, String partnerTopicName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerTopicName).map(new Func1<ServiceResponse<PartnerTopicInner>, PartnerTopicInner>() {
            @Override
            public PartnerTopicInner call(ServiceResponse<PartnerTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a partner topic.
     * Get properties of a partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<ServiceResponse<PartnerTopicInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String partnerTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerTopicInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerTopicInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String partnerTopicName) {
        deleteWithServiceResponseAsync(resourceGroupName, partnerTopicName).toBlocking().last().body();
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String partnerTopicName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, partnerTopicName), serviceCallback);
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String partnerTopicName) {
        return deleteWithServiceResponseAsync(resourceGroupName, partnerTopicName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String partnerTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String partnerTopicName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, partnerTopicName).toBlocking().single().body();
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String partnerTopicName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, partnerTopicName), serviceCallback);
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String partnerTopicName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, partnerTopicName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a partner topic.
     * Delete existing partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String partnerTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerTopicInner object if successful.
     */
    public PartnerTopicInner update(String resourceGroupName, String partnerTopicName) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerTopicName).toBlocking().single().body();
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerTopicInner> updateAsync(String resourceGroupName, String partnerTopicName, final ServiceCallback<PartnerTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, partnerTopicName), serviceCallback);
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<PartnerTopicInner> updateAsync(String resourceGroupName, String partnerTopicName) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerTopicName).map(new Func1<ServiceResponse<PartnerTopicInner>, PartnerTopicInner>() {
            @Override
            public PartnerTopicInner call(ServiceResponse<PartnerTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<ServiceResponse<PartnerTopicInner>> updateWithServiceResponseAsync(String resourceGroupName, String partnerTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        PartnerTopicUpdateParameters partnerTopicUpdateParameters = new PartnerTopicUpdateParameters();
        partnerTopicUpdateParameters.withTags(null);
        return service.update(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), partnerTopicUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerTopicInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param tags Tags of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerTopicInner object if successful.
     */
    public PartnerTopicInner update(String resourceGroupName, String partnerTopicName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerTopicName, tags).toBlocking().single().body();
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param tags Tags of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerTopicInner> updateAsync(String resourceGroupName, String partnerTopicName, Map<String, String> tags, final ServiceCallback<PartnerTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, partnerTopicName, tags), serviceCallback);
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param tags Tags of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<PartnerTopicInner> updateAsync(String resourceGroupName, String partnerTopicName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerTopicName, tags).map(new Func1<ServiceResponse<PartnerTopicInner>, PartnerTopicInner>() {
            @Override
            public PartnerTopicInner call(ServiceResponse<PartnerTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner topic.
     * Asynchronously updates a partner topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param tags Tags of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<ServiceResponse<PartnerTopicInner>> updateWithServiceResponseAsync(String resourceGroupName, String partnerTopicName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        PartnerTopicUpdateParameters partnerTopicUpdateParameters = new PartnerTopicUpdateParameters();
        partnerTopicUpdateParameters.withTags(tags);
        return service.update(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), partnerTopicUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerTopicInner> clientResponse = updateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerTopicInner> updateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(201, new TypeToken<PartnerTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerTopicInner&gt; object if successful.
     */
    public PagedList<PartnerTopicInner> list() {
        ServiceResponse<Page<PartnerTopicInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<PartnerTopicInner>(response.body()) {
            @Override
            public Page<PartnerTopicInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerTopicInner>> listAsync(final ListOperationCallback<PartnerTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<Page<PartnerTopicInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Page<PartnerTopicInner>>() {
                @Override
                public Page<PartnerTopicInner> call(ServiceResponse<Page<PartnerTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(ServiceResponse<Page<PartnerTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerTopicInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerTopicInner&gt; object if successful.
     */
    public PagedList<PartnerTopicInner> list(final String filter, final Integer top) {
        ServiceResponse<Page<PartnerTopicInner>> response = listSinglePageAsync(filter, top).toBlocking().single();
        return new PagedList<PartnerTopicInner>(response.body()) {
            @Override
            public Page<PartnerTopicInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerTopicInner>> listAsync(final String filter, final Integer top, final ListOperationCallback<PartnerTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter, top),
            new Func1<String, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<Page<PartnerTopicInner>> listAsync(final String filter, final Integer top) {
        return listWithServiceResponseAsync(filter, top)
            .map(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Page<PartnerTopicInner>>() {
                @Override
                public Page<PartnerTopicInner> call(ServiceResponse<Page<PartnerTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listWithServiceResponseAsync(final String filter, final Integer top) {
        return listSinglePageAsync(filter, top)
            .concatMap(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(ServiceResponse<Page<PartnerTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listSinglePageAsync(final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerTopicInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerTopicInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerTopicInner&gt; object if successful.
     */
    public PagedList<PartnerTopicInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<PartnerTopicInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<PartnerTopicInner>(response.body()) {
            @Override
            public Page<PartnerTopicInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerTopicInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<PartnerTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<Page<PartnerTopicInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Page<PartnerTopicInner>>() {
                @Override
                public Page<PartnerTopicInner> call(ServiceResponse<Page<PartnerTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(ServiceResponse<Page<PartnerTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerTopicInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerTopicInner&gt; object if successful.
     */
    public PagedList<PartnerTopicInner> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top) {
        ServiceResponse<Page<PartnerTopicInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter, top).toBlocking().single();
        return new PagedList<PartnerTopicInner>(response.body()) {
            @Override
            public Page<PartnerTopicInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerTopicInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final ListOperationCallback<PartnerTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, filter, top),
            new Func1<String, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<Page<PartnerTopicInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, filter, top)
            .map(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Page<PartnerTopicInner>>() {
                @Override
                public Page<PartnerTopicInner> call(ServiceResponse<Page<PartnerTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter, top)
            .concatMap(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(ServiceResponse<Page<PartnerTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param resourceGroupName The name of the resource group within the user's subscription.
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerTopicInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerTopicInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Activate a partner topic.
     * Activate a newly created partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerTopicInner object if successful.
     */
    public PartnerTopicInner activate(String resourceGroupName, String partnerTopicName) {
        return activateWithServiceResponseAsync(resourceGroupName, partnerTopicName).toBlocking().single().body();
    }

    /**
     * Activate a partner topic.
     * Activate a newly created partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerTopicInner> activateAsync(String resourceGroupName, String partnerTopicName, final ServiceCallback<PartnerTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(activateWithServiceResponseAsync(resourceGroupName, partnerTopicName), serviceCallback);
    }

    /**
     * Activate a partner topic.
     * Activate a newly created partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<PartnerTopicInner> activateAsync(String resourceGroupName, String partnerTopicName) {
        return activateWithServiceResponseAsync(resourceGroupName, partnerTopicName).map(new Func1<ServiceResponse<PartnerTopicInner>, PartnerTopicInner>() {
            @Override
            public PartnerTopicInner call(ServiceResponse<PartnerTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Activate a partner topic.
     * Activate a newly created partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<ServiceResponse<PartnerTopicInner>> activateWithServiceResponseAsync(String resourceGroupName, String partnerTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.activate(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerTopicInner> clientResponse = activateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerTopicInner> activateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Deactivate a partner topic.
     * Deactivate specific partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerTopicInner object if successful.
     */
    public PartnerTopicInner deactivate(String resourceGroupName, String partnerTopicName) {
        return deactivateWithServiceResponseAsync(resourceGroupName, partnerTopicName).toBlocking().single().body();
    }

    /**
     * Deactivate a partner topic.
     * Deactivate specific partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerTopicInner> deactivateAsync(String resourceGroupName, String partnerTopicName, final ServiceCallback<PartnerTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(deactivateWithServiceResponseAsync(resourceGroupName, partnerTopicName), serviceCallback);
    }

    /**
     * Deactivate a partner topic.
     * Deactivate specific partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<PartnerTopicInner> deactivateAsync(String resourceGroupName, String partnerTopicName) {
        return deactivateWithServiceResponseAsync(resourceGroupName, partnerTopicName).map(new Func1<ServiceResponse<PartnerTopicInner>, PartnerTopicInner>() {
            @Override
            public PartnerTopicInner call(ServiceResponse<PartnerTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Deactivate a partner topic.
     * Deactivate specific partner topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerTopicName Name of the partner topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerTopicInner object
     */
    public Observable<ServiceResponse<PartnerTopicInner>> deactivateWithServiceResponseAsync(String resourceGroupName, String partnerTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerTopicName == null) {
            throw new IllegalArgumentException("Parameter partnerTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.deactivate(this.client.subscriptionId(), resourceGroupName, partnerTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerTopicInner> clientResponse = deactivateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerTopicInner> deactivateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerTopicInner&gt; object if successful.
     */
    public PagedList<PartnerTopicInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<PartnerTopicInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PartnerTopicInner>(response.body()) {
            @Override
            public Page<PartnerTopicInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerTopicInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PartnerTopicInner>> serviceFuture, final ListOperationCallback<PartnerTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<Page<PartnerTopicInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Page<PartnerTopicInner>>() {
                @Override
                public Page<PartnerTopicInner> call(ServiceResponse<Page<PartnerTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(ServiceResponse<Page<PartnerTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner topics under an Azure subscription.
     * List all the partner topics under an Azure subscription.
     *
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerTopicInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerTopicInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerTopicInner&gt; object if successful.
     */
    public PagedList<PartnerTopicInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PartnerTopicInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PartnerTopicInner>(response.body()) {
            @Override
            public Page<PartnerTopicInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerTopicInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PartnerTopicInner>> serviceFuture, final ListOperationCallback<PartnerTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<Page<PartnerTopicInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Page<PartnerTopicInner>>() {
                @Override
                public Page<PartnerTopicInner> call(ServiceResponse<Page<PartnerTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PartnerTopicInner>>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(ServiceResponse<Page<PartnerTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner topics under a resource group.
     * List all the partner topics under a resource group.
     *
    ServiceResponse<PageImpl<PartnerTopicInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerTopicInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerTopicInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerTopicInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
