/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in EventChannels.
 */
public class EventChannelsInner {
    /** The Retrofit service to perform REST calls. */
    private EventChannelsService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of EventChannelsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public EventChannelsInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(EventChannelsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for EventChannels to be
     * used by Retrofit to perform actually REST calls.
     */
    interface EventChannelsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannels get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Path("eventChannelName") String eventChannelName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannels createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Path("eventChannelName") String eventChannelName, @Body EventChannelInner eventChannelInfo, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannels delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Path("eventChannelName") String eventChannelName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannels beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels/{eventChannelName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Path("eventChannelName") String eventChannelName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannels listByPartnerNamespace" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/eventChannels")
        Observable<Response<ResponseBody>> listByPartnerNamespace(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannels listByPartnerNamespaceNext" })
        @GET
        Observable<Response<ResponseBody>> listByPartnerNamespaceNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get an event channel.
     * Get properties of an event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventChannelInner object if successful.
     */
    public EventChannelInner get(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        return getWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName).toBlocking().single().body();
    }

    /**
     * Get an event channel.
     * Get properties of an event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventChannelInner> getAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName, final ServiceCallback<EventChannelInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName), serviceCallback);
    }

    /**
     * Get an event channel.
     * Get properties of an event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventChannelInner object
     */
    public Observable<EventChannelInner> getAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        return getWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName).map(new Func1<ServiceResponse<EventChannelInner>, EventChannelInner>() {
            @Override
            public EventChannelInner call(ServiceResponse<EventChannelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get an event channel.
     * Get properties of an event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventChannelInner object
     */
    public Observable<ServiceResponse<EventChannelInner>> getWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (eventChannelName == null) {
            throw new IllegalArgumentException("Parameter eventChannelName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, eventChannelName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventChannelInner>>>() {
                @Override
                public Observable<ServiceResponse<EventChannelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventChannelInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventChannelInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventChannelInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EventChannelInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create an event channel.
     * Asynchronously creates a new event channel with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param eventChannelInfo EventChannel information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the EventChannelInner object if successful.
     */
    public EventChannelInner createOrUpdate(String resourceGroupName, String partnerNamespaceName, String eventChannelName, EventChannelInner eventChannelInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName, eventChannelInfo).toBlocking().single().body();
    }

    /**
     * Create an event channel.
     * Asynchronously creates a new event channel with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param eventChannelInfo EventChannel information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<EventChannelInner> createOrUpdateAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName, EventChannelInner eventChannelInfo, final ServiceCallback<EventChannelInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName, eventChannelInfo), serviceCallback);
    }

    /**
     * Create an event channel.
     * Asynchronously creates a new event channel with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param eventChannelInfo EventChannel information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventChannelInner object
     */
    public Observable<EventChannelInner> createOrUpdateAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName, EventChannelInner eventChannelInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName, eventChannelInfo).map(new Func1<ServiceResponse<EventChannelInner>, EventChannelInner>() {
            @Override
            public EventChannelInner call(ServiceResponse<EventChannelInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create an event channel.
     * Asynchronously creates a new event channel with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param eventChannelInfo EventChannel information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the EventChannelInner object
     */
    public Observable<ServiceResponse<EventChannelInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName, EventChannelInner eventChannelInfo) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (eventChannelName == null) {
            throw new IllegalArgumentException("Parameter eventChannelName is required and cannot be null.");
        }
        if (eventChannelInfo == null) {
            throw new IllegalArgumentException("Parameter eventChannelInfo is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(eventChannelInfo);
        return service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, eventChannelName, eventChannelInfo, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<EventChannelInner>>>() {
                @Override
                public Observable<ServiceResponse<EventChannelInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<EventChannelInner> clientResponse = createOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<EventChannelInner> createOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<EventChannelInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<EventChannelInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        deleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName).toBlocking().last().body();
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName), serviceCallback);
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        return deleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (eventChannelName == null) {
            throw new IllegalArgumentException("Parameter eventChannelName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, eventChannelName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName).toBlocking().single().body();
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName), serviceCallback);
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, eventChannelName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete an event channel.
     * Delete existing event channel.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param eventChannelName Name of the event channel.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, String eventChannelName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (eventChannelName == null) {
            throw new IllegalArgumentException("Parameter eventChannelName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, eventChannelName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EventChannelInner&gt; object if successful.
     */
    public PagedList<EventChannelInner> listByPartnerNamespace(final String resourceGroupName, final String partnerNamespaceName) {
        ServiceResponse<Page<EventChannelInner>> response = listByPartnerNamespaceSinglePageAsync(resourceGroupName, partnerNamespaceName).toBlocking().single();
        return new PagedList<EventChannelInner>(response.body()) {
            @Override
            public Page<EventChannelInner> nextPage(String nextPageLink) {
                return listByPartnerNamespaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventChannelInner>> listByPartnerNamespaceAsync(final String resourceGroupName, final String partnerNamespaceName, final ListOperationCallback<EventChannelInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPartnerNamespaceSinglePageAsync(resourceGroupName, partnerNamespaceName),
            new Func1<String, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(String nextPageLink) {
                    return listByPartnerNamespaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EventChannelInner&gt; object
     */
    public Observable<Page<EventChannelInner>> listByPartnerNamespaceAsync(final String resourceGroupName, final String partnerNamespaceName) {
        return listByPartnerNamespaceWithServiceResponseAsync(resourceGroupName, partnerNamespaceName)
            .map(new Func1<ServiceResponse<Page<EventChannelInner>>, Page<EventChannelInner>>() {
                @Override
                public Page<EventChannelInner> call(ServiceResponse<Page<EventChannelInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EventChannelInner&gt; object
     */
    public Observable<ServiceResponse<Page<EventChannelInner>>> listByPartnerNamespaceWithServiceResponseAsync(final String resourceGroupName, final String partnerNamespaceName) {
        return listByPartnerNamespaceSinglePageAsync(resourceGroupName, partnerNamespaceName)
            .concatMap(new Func1<ServiceResponse<Page<EventChannelInner>>, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(ServiceResponse<Page<EventChannelInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPartnerNamespaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EventChannelInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EventChannelInner>>> listByPartnerNamespaceSinglePageAsync(final String resourceGroupName, final String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.listByPartnerNamespace(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventChannelInner>> result = listByPartnerNamespaceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EventChannelInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EventChannelInner&gt; object if successful.
     */
    public PagedList<EventChannelInner> listByPartnerNamespace(final String resourceGroupName, final String partnerNamespaceName, final String filter, final Integer top) {
        ServiceResponse<Page<EventChannelInner>> response = listByPartnerNamespaceSinglePageAsync(resourceGroupName, partnerNamespaceName, filter, top).toBlocking().single();
        return new PagedList<EventChannelInner>(response.body()) {
            @Override
            public Page<EventChannelInner> nextPage(String nextPageLink) {
                return listByPartnerNamespaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventChannelInner>> listByPartnerNamespaceAsync(final String resourceGroupName, final String partnerNamespaceName, final String filter, final Integer top, final ListOperationCallback<EventChannelInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPartnerNamespaceSinglePageAsync(resourceGroupName, partnerNamespaceName, filter, top),
            new Func1<String, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(String nextPageLink) {
                    return listByPartnerNamespaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EventChannelInner&gt; object
     */
    public Observable<Page<EventChannelInner>> listByPartnerNamespaceAsync(final String resourceGroupName, final String partnerNamespaceName, final String filter, final Integer top) {
        return listByPartnerNamespaceWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, filter, top)
            .map(new Func1<ServiceResponse<Page<EventChannelInner>>, Page<EventChannelInner>>() {
                @Override
                public Page<EventChannelInner> call(ServiceResponse<Page<EventChannelInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EventChannelInner&gt; object
     */
    public Observable<ServiceResponse<Page<EventChannelInner>>> listByPartnerNamespaceWithServiceResponseAsync(final String resourceGroupName, final String partnerNamespaceName, final String filter, final Integer top) {
        return listByPartnerNamespaceSinglePageAsync(resourceGroupName, partnerNamespaceName, filter, top)
            .concatMap(new Func1<ServiceResponse<Page<EventChannelInner>>, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(ServiceResponse<Page<EventChannelInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPartnerNamespaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
    ServiceResponse<PageImpl<EventChannelInner>> * @param resourceGroupName The name of the resource group within the user's subscription.
    ServiceResponse<PageImpl<EventChannelInner>> * @param partnerNamespaceName Name of the partner namespace.
    ServiceResponse<PageImpl<EventChannelInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<EventChannelInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EventChannelInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EventChannelInner>>> listByPartnerNamespaceSinglePageAsync(final String resourceGroupName, final String partnerNamespaceName, final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByPartnerNamespace(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventChannelInner>> result = listByPartnerNamespaceDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EventChannelInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventChannelInner>> listByPartnerNamespaceDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventChannelInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventChannelInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;EventChannelInner&gt; object if successful.
     */
    public PagedList<EventChannelInner> listByPartnerNamespaceNext(final String nextPageLink) {
        ServiceResponse<Page<EventChannelInner>> response = listByPartnerNamespaceNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<EventChannelInner>(response.body()) {
            @Override
            public Page<EventChannelInner> nextPage(String nextPageLink) {
                return listByPartnerNamespaceNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<EventChannelInner>> listByPartnerNamespaceNextAsync(final String nextPageLink, final ServiceFuture<List<EventChannelInner>> serviceFuture, final ListOperationCallback<EventChannelInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByPartnerNamespaceNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(String nextPageLink) {
                    return listByPartnerNamespaceNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EventChannelInner&gt; object
     */
    public Observable<Page<EventChannelInner>> listByPartnerNamespaceNextAsync(final String nextPageLink) {
        return listByPartnerNamespaceNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<EventChannelInner>>, Page<EventChannelInner>>() {
                @Override
                public Page<EventChannelInner> call(ServiceResponse<Page<EventChannelInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;EventChannelInner&gt; object
     */
    public Observable<ServiceResponse<Page<EventChannelInner>>> listByPartnerNamespaceNextWithServiceResponseAsync(final String nextPageLink) {
        return listByPartnerNamespaceNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<EventChannelInner>>, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(ServiceResponse<Page<EventChannelInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByPartnerNamespaceNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List event channels.
     * List all the event channels in a partner namespace.
     *
    ServiceResponse<PageImpl<EventChannelInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;EventChannelInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<EventChannelInner>>> listByPartnerNamespaceNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByPartnerNamespaceNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<EventChannelInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<EventChannelInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<EventChannelInner>> result = listByPartnerNamespaceNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<EventChannelInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<EventChannelInner>> listByPartnerNamespaceNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<EventChannelInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<EventChannelInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
