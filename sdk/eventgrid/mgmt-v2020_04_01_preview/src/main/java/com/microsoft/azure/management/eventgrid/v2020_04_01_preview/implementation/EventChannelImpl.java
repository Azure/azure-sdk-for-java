/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannel;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelSource;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelDestination;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelProvisioningState;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopicReadinessState;
import org.joda.time.DateTime;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelFilter;

class EventChannelImpl extends CreatableUpdatableImpl<EventChannel, EventChannelInner, EventChannelImpl> implements EventChannel, EventChannel.Definition, EventChannel.Update {
    private final EventGridManager manager;
    private String resourceGroupName;
    private String partnerNamespaceName;
    private String eventChannelName;

    EventChannelImpl(String name, EventGridManager manager) {
        super(name, new EventChannelInner());
        this.manager = manager;
        // Set resource name
        this.eventChannelName = name;
        //
    }

    EventChannelImpl(EventChannelInner inner, EventGridManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.eventChannelName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.partnerNamespaceName = IdParsingUtils.getValueFromIdByName(inner.id(), "partnerNamespaces");
        this.eventChannelName = IdParsingUtils.getValueFromIdByName(inner.id(), "eventChannels");
        //
    }

    @Override
    public EventGridManager manager() {
        return this.manager;
    }

    @Override
    public Observable<EventChannel> createResourceAsync() {
        EventChannelsInner client = this.manager().inner().eventChannels();
        return client.createOrUpdateAsync(this.resourceGroupName, this.partnerNamespaceName, this.eventChannelName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<EventChannel> updateResourceAsync() {
        EventChannelsInner client = this.manager().inner().eventChannels();
        return client.createOrUpdateAsync(this.resourceGroupName, this.partnerNamespaceName, this.eventChannelName, this.inner())
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EventChannelInner> getInnerAsync() {
        EventChannelsInner client = this.manager().inner().eventChannels();
        return client.getAsync(this.resourceGroupName, this.partnerNamespaceName, this.eventChannelName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public EventChannelDestination destination() {
        return this.inner().destination();
    }

    @Override
    public DateTime expirationTimeIfNotActivatedUtc() {
        return this.inner().expirationTimeIfNotActivatedUtc();
    }

    @Override
    public EventChannelFilter filter() {
        return this.inner().filter();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public String partnerTopicFriendlyDescription() {
        return this.inner().partnerTopicFriendlyDescription();
    }

    @Override
    public PartnerTopicReadinessState partnerTopicReadinessState() {
        return this.inner().partnerTopicReadinessState();
    }

    @Override
    public EventChannelProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public EventChannelSource source() {
        return this.inner().source();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public EventChannelImpl withExistingPartnerNamespace(String resourceGroupName, String partnerNamespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.partnerNamespaceName = partnerNamespaceName;
        return this;
    }

    @Override
    public EventChannelImpl withDestination(EventChannelDestination destination) {
        this.inner().withDestination(destination);
        return this;
    }

    @Override
    public EventChannelImpl withExpirationTimeIfNotActivatedUtc(DateTime expirationTimeIfNotActivatedUtc) {
        this.inner().withExpirationTimeIfNotActivatedUtc(expirationTimeIfNotActivatedUtc);
        return this;
    }

    @Override
    public EventChannelImpl withFilter(EventChannelFilter filter) {
        this.inner().withFilter(filter);
        return this;
    }

    @Override
    public EventChannelImpl withPartnerTopicFriendlyDescription(String partnerTopicFriendlyDescription) {
        this.inner().withPartnerTopicFriendlyDescription(partnerTopicFriendlyDescription);
        return this;
    }

    @Override
    public EventChannelImpl withSource(EventChannelSource source) {
        this.inner().withSource(source);
        return this;
    }

}
