/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation.EventGridManager;
import java.util.Map;
import org.joda.time.DateTime;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation.PartnerTopicInner;

/**
 * Type representing PartnerTopic.
 */
public interface PartnerTopic extends HasInner<PartnerTopicInner>, Resource, GroupableResourceCore<EventGridManager, PartnerTopicInner>, HasResourceGroup, Refreshable<PartnerTopic>, Updatable<PartnerTopic.Update>, HasManager<EventGridManager> {
    /**
     * @return the activationState value.
     */
    PartnerTopicActivationState activationState();

    /**
     * @return the expirationTimeIfNotActivatedUtc value.
     */
    DateTime expirationTimeIfNotActivatedUtc();

    /**
     * @return the partnerTopicFriendlyDescription value.
     */
    String partnerTopicFriendlyDescription();

    /**
     * @return the provisioningState value.
     */
    PartnerTopicProvisioningState provisioningState();

    /**
     * @return the source value.
     */
    String source();

    /**
     * The template for a PartnerTopic update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<PartnerTopic>, Resource.UpdateWithTags<Update>, UpdateStages.WithTags {
    }

    /**
     * Grouping of PartnerTopic update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the partnertopic update allowing to specify Tags.
         */
        interface WithTags {
            /**
             * Specifies tags.
             * @param tags Tags of the partner topic
             * @return the next update stage
             */
            Update withTags(Map<String, String> tags);
        }

    }
}
