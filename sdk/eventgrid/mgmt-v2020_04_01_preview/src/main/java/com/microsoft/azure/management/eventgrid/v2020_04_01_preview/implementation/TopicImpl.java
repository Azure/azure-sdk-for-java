/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.Topic;
import rx.Observable;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.TopicUpdateParameters;
import java.util.List;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.TopicProvisioningState;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.InputSchema;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.InputSchemaMapping;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.InboundIpRule;
import rx.functions.Func1;

class TopicImpl extends GroupableResourceCoreImpl<Topic, TopicInner, TopicImpl, EventGridManager> implements Topic, Topic.Definition, Topic.Update {
    private TopicUpdateParameters updateParameter;
    TopicImpl(String name, TopicInner inner, EventGridManager manager) {
        super(name, inner, manager);
        this.updateParameter = new TopicUpdateParameters();
    }

    @Override
    public Observable<Topic> createResourceAsync() {
        TopicsInner client = this.manager().inner().topics();
        return client.createOrUpdateAsync(this.resourceGroupName(), this.name(), this.inner())
            .map(new Func1<TopicInner, TopicInner>() {
               @Override
               public TopicInner call(TopicInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<Topic> updateResourceAsync() {
        TopicsInner client = this.manager().inner().topics();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<TopicInner, TopicInner>() {
               @Override
               public TopicInner call(TopicInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<TopicInner> getInnerAsync() {
        TopicsInner client = this.manager().inner().topics();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new TopicUpdateParameters();
    }

    @Override
    public Boolean allowTrafficFromAllIPs() {
        return this.inner().allowTrafficFromAllIPs();
    }

    @Override
    public String endpoint() {
        return this.inner().endpoint();
    }

    @Override
    public List<InboundIpRule> inboundIpRules() {
        return this.inner().inboundIpRules();
    }

    @Override
    public InputSchema inputSchema() {
        return this.inner().inputSchema();
    }

    @Override
    public InputSchemaMapping inputSchemaMapping() {
        return this.inner().inputSchemaMapping();
    }

    @Override
    public String metricResourceId() {
        return this.inner().metricResourceId();
    }

    @Override
    public TopicProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public TopicImpl withInputSchema(InputSchema inputSchema) {
        this.inner().withInputSchema(inputSchema);
        return this;
    }

    @Override
    public TopicImpl withInputSchemaMapping(InputSchemaMapping inputSchemaMapping) {
        this.inner().withInputSchemaMapping(inputSchemaMapping);
        return this;
    }

    @Override
    public TopicImpl withAllowTrafficFromAllIPs(Boolean allowTrafficFromAllIPs) {
        if (isInCreateMode()) {
            this.inner().withAllowTrafficFromAllIPs(allowTrafficFromAllIPs);
        } else {
            this.updateParameter.withAllowTrafficFromAllIPs(allowTrafficFromAllIPs);
        }
        return this;
    }

    @Override
    public TopicImpl withInboundIpRules(List<InboundIpRule> inboundIpRules) {
        if (isInCreateMode()) {
            this.inner().withInboundIpRules(inboundIpRules);
        } else {
            this.updateParameter.withInboundIpRules(inboundIpRules);
        }
        return this;
    }

}
