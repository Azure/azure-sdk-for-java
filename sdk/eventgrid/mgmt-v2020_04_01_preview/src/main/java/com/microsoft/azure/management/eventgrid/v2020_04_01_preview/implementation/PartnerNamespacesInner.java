/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaceRegenerateKeyRequest;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaceUpdateParameters;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PartnerNamespaces.
 */
public class PartnerNamespacesInner implements InnerSupportsGet<PartnerNamespaceInner>, InnerSupportsDelete<Void>, InnerSupportsListing<PartnerNamespaceInner> {
    /** The Retrofit service to perform REST calls. */
    private PartnerNamespacesService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of PartnerNamespacesInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PartnerNamespacesInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(PartnerNamespacesService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PartnerNamespaces to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PartnerNamespacesService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Body PartnerNamespaceInner partnerNamespaceInfo, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Body PartnerNamespaceInner partnerNamespaceInfo, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PartnerNamespaceUpdateParameters partnerNamespaceUpdateParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PartnerNamespaceUpdateParameters partnerNamespaceUpdateParameters, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.EventGrid/partnerNamespaces")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces listSharedAccessKeys" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/listKeys")
        Observable<Response<ResponseBody>> listSharedAccessKeys(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces regenerateKey" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/regenerateKey")
        Observable<Response<ResponseBody>> regenerateKey(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("partnerNamespaceName") String partnerNamespaceName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Body PartnerNamespaceRegenerateKeyRequest regenerateKeyRequest, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerNamespaces listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a partner namespace.
     * Get properties of a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner getByResourceGroup(String resourceGroupName, String partnerNamespaceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).toBlocking().single().body();
    }

    /**
     * Get a partner namespace.
     * Get properties of a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> getByResourceGroupAsync(String resourceGroupName, String partnerNamespaceName, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerNamespaceName), serviceCallback);
    }

    /**
     * Get a partner namespace.
     * Get properties of a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<PartnerNamespaceInner> getByResourceGroupAsync(String resourceGroupName, String partnerNamespaceName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a partner namespace.
     * Get properties of a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerNamespaceInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerNamespaceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerNamespaceInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerNamespaceInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerNamespaceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerNamespaceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner createOrUpdate(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, partnerNamespaceInfo).toBlocking().last().body();
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> createOrUpdateAsync(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, partnerNamespaceInfo), serviceCallback);
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PartnerNamespaceInner> createOrUpdateAsync(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, partnerNamespaceInfo).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (partnerNamespaceInfo == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceInfo is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(partnerNamespaceInfo);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, partnerNamespaceInfo, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PartnerNamespaceInner>() { }.getType());
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner beginCreateOrUpdate(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, partnerNamespaceInfo).toBlocking().single().body();
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> beginCreateOrUpdateAsync(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, partnerNamespaceInfo), serviceCallback);
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<PartnerNamespaceInner> beginCreateOrUpdateAsync(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, partnerNamespaceInfo).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a partner namespace.
     * Asynchronously creates a new partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param partnerNamespaceInfo PartnerNamespace information.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, PartnerNamespaceInner partnerNamespaceInfo) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (partnerNamespaceInfo == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceInfo is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(partnerNamespaceInfo);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, partnerNamespaceInfo, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerNamespaceInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerNamespaceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerNamespaceInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerNamespaceInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerNamespaceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<PartnerNamespaceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String partnerNamespaceName) {
        deleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).toBlocking().last().body();
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String partnerNamespaceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName), serviceCallback);
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String partnerNamespaceName) {
        return deleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String partnerNamespaceName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).toBlocking().single().body();
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String partnerNamespaceName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName), serviceCallback);
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String partnerNamespaceName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a partner namespace.
     * Delete existing partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner update(String resourceGroupName, String partnerNamespaceName) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).toBlocking().last().body();
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> updateAsync(String resourceGroupName, String partnerNamespaceName, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName), serviceCallback);
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PartnerNamespaceInner> updateAsync(String resourceGroupName, String partnerNamespaceName) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> updateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        PartnerNamespaceUpdateParameters partnerNamespaceUpdateParameters = new PartnerNamespaceUpdateParameters();
        partnerNamespaceUpdateParameters.withTags(null);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), partnerNamespaceUpdateParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PartnerNamespaceInner>() { }.getType());
    }
    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner update(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, tags).toBlocking().last().body();
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> updateAsync(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, tags), serviceCallback);
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PartnerNamespaceInner> updateAsync(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags) {
        return updateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, tags).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> updateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        PartnerNamespaceUpdateParameters partnerNamespaceUpdateParameters = new PartnerNamespaceUpdateParameters();
        partnerNamespaceUpdateParameters.withTags(tags);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), partnerNamespaceUpdateParameters, this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PartnerNamespaceInner>() { }.getType());
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner beginUpdate(String resourceGroupName, String partnerNamespaceName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).toBlocking().single().body();
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> beginUpdateAsync(String resourceGroupName, String partnerNamespaceName, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName), serviceCallback);
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<PartnerNamespaceInner> beginUpdateAsync(String resourceGroupName, String partnerNamespaceName) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final Map<String, String> tags = null;
        PartnerNamespaceUpdateParameters partnerNamespaceUpdateParameters = new PartnerNamespaceUpdateParameters();
        partnerNamespaceUpdateParameters.withTags(null);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), partnerNamespaceUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerNamespaceInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerNamespaceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerNamespaceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceInner object if successful.
     */
    public PartnerNamespaceInner beginUpdate(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, tags).toBlocking().single().body();
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceInner> beginUpdateAsync(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags, final ServiceCallback<PartnerNamespaceInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, tags), serviceCallback);
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<PartnerNamespaceInner> beginUpdateAsync(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, tags).map(new Func1<ServiceResponse<PartnerNamespaceInner>, PartnerNamespaceInner>() {
            @Override
            public PartnerNamespaceInner call(ServiceResponse<PartnerNamespaceInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a partner namespace.
     * Asynchronously updates a partner namespace with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param tags Tags of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceInner object
     */
    public Observable<ServiceResponse<PartnerNamespaceInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, Map<String, String> tags) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(tags);
        PartnerNamespaceUpdateParameters partnerNamespaceUpdateParameters = new PartnerNamespaceUpdateParameters();
        partnerNamespaceUpdateParameters.withTags(tags);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), partnerNamespaceUpdateParameters, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerNamespaceInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerNamespaceInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerNamespaceInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerNamespaceInner> beginUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerNamespaceInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(201, new TypeToken<PartnerNamespaceInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object if successful.
     */
    public PagedList<PartnerNamespaceInner> list() {
        ServiceResponse<Page<PartnerNamespaceInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<PartnerNamespaceInner>(response.body()) {
            @Override
            public Page<PartnerNamespaceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerNamespaceInner>> listAsync(final ListOperationCallback<PartnerNamespaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<Page<PartnerNamespaceInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Page<PartnerNamespaceInner>>() {
                @Override
                public Page<PartnerNamespaceInner> call(ServiceResponse<Page<PartnerNamespaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(ServiceResponse<Page<PartnerNamespaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerNamespaceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerNamespaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object if successful.
     */
    public PagedList<PartnerNamespaceInner> list(final String filter, final Integer top) {
        ServiceResponse<Page<PartnerNamespaceInner>> response = listSinglePageAsync(filter, top).toBlocking().single();
        return new PagedList<PartnerNamespaceInner>(response.body()) {
            @Override
            public Page<PartnerNamespaceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerNamespaceInner>> listAsync(final String filter, final Integer top, final ListOperationCallback<PartnerNamespaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(filter, top),
            new Func1<String, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<Page<PartnerNamespaceInner>> listAsync(final String filter, final Integer top) {
        return listWithServiceResponseAsync(filter, top)
            .map(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Page<PartnerNamespaceInner>>() {
                @Override
                public Page<PartnerNamespaceInner> call(ServiceResponse<Page<PartnerNamespaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listWithServiceResponseAsync(final String filter, final Integer top) {
        return listSinglePageAsync(filter, top)
            .concatMap(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(ServiceResponse<Page<PartnerNamespaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listSinglePageAsync(final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerNamespaceInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerNamespaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerNamespaceInner>> listDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerNamespaceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerNamespaceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object if successful.
     */
    public PagedList<PartnerNamespaceInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<PartnerNamespaceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<PartnerNamespaceInner>(response.body()) {
            @Override
            public Page<PartnerNamespaceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerNamespaceInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<PartnerNamespaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<Page<PartnerNamespaceInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Page<PartnerNamespaceInner>>() {
                @Override
                public Page<PartnerNamespaceInner> call(ServiceResponse<Page<PartnerNamespaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(ServiceResponse<Page<PartnerNamespaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerNamespaceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerNamespaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object if successful.
     */
    public PagedList<PartnerNamespaceInner> listByResourceGroup(final String resourceGroupName, final String filter, final Integer top) {
        ServiceResponse<Page<PartnerNamespaceInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName, filter, top).toBlocking().single();
        return new PagedList<PartnerNamespaceInner>(response.body()) {
            @Override
            public Page<PartnerNamespaceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerNamespaceInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top, final ListOperationCallback<PartnerNamespaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName, filter, top),
            new Func1<String, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<Page<PartnerNamespaceInner>> listByResourceGroupAsync(final String resourceGroupName, final String filter, final Integer top) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName, filter, top)
            .map(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Page<PartnerNamespaceInner>>() {
                @Override
                public Page<PartnerNamespaceInner> call(ServiceResponse<Page<PartnerNamespaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName, final String filter, final Integer top) {
        return listByResourceGroupSinglePageAsync(resourceGroupName, filter, top)
            .concatMap(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(ServiceResponse<Page<PartnerNamespaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param resourceGroupName The name of the resource group within the user's subscription.
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName, final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerNamespaceInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerNamespaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerNamespaceInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerNamespaceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerNamespaceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List keys for a partner namespace.
     * List the two keys used to publish to a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceSharedAccessKeysInner object if successful.
     */
    public PartnerNamespaceSharedAccessKeysInner listSharedAccessKeys(String resourceGroupName, String partnerNamespaceName) {
        return listSharedAccessKeysWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).toBlocking().single().body();
    }

    /**
     * List keys for a partner namespace.
     * List the two keys used to publish to a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceSharedAccessKeysInner> listSharedAccessKeysAsync(String resourceGroupName, String partnerNamespaceName, final ServiceCallback<PartnerNamespaceSharedAccessKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(listSharedAccessKeysWithServiceResponseAsync(resourceGroupName, partnerNamespaceName), serviceCallback);
    }

    /**
     * List keys for a partner namespace.
     * List the two keys used to publish to a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceSharedAccessKeysInner object
     */
    public Observable<PartnerNamespaceSharedAccessKeysInner> listSharedAccessKeysAsync(String resourceGroupName, String partnerNamespaceName) {
        return listSharedAccessKeysWithServiceResponseAsync(resourceGroupName, partnerNamespaceName).map(new Func1<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>, PartnerNamespaceSharedAccessKeysInner>() {
            @Override
            public PartnerNamespaceSharedAccessKeysInner call(ServiceResponse<PartnerNamespaceSharedAccessKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List keys for a partner namespace.
     * List the two keys used to publish to a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceSharedAccessKeysInner object
     */
    public Observable<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>> listSharedAccessKeysWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSharedAccessKeys(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerNamespaceSharedAccessKeysInner> clientResponse = listSharedAccessKeysDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerNamespaceSharedAccessKeysInner> listSharedAccessKeysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerNamespaceSharedAccessKeysInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerNamespaceSharedAccessKeysInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Regenerate key for a partner namespace.
     * Regenerate a shared access key for a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param keyName Key name to regenerate (key1 or key2).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PartnerNamespaceSharedAccessKeysInner object if successful.
     */
    public PartnerNamespaceSharedAccessKeysInner regenerateKey(String resourceGroupName, String partnerNamespaceName, String keyName) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, keyName).toBlocking().single().body();
    }

    /**
     * Regenerate key for a partner namespace.
     * Regenerate a shared access key for a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param keyName Key name to regenerate (key1 or key2).
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PartnerNamespaceSharedAccessKeysInner> regenerateKeyAsync(String resourceGroupName, String partnerNamespaceName, String keyName, final ServiceCallback<PartnerNamespaceSharedAccessKeysInner> serviceCallback) {
        return ServiceFuture.fromResponse(regenerateKeyWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, keyName), serviceCallback);
    }

    /**
     * Regenerate key for a partner namespace.
     * Regenerate a shared access key for a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param keyName Key name to regenerate (key1 or key2).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceSharedAccessKeysInner object
     */
    public Observable<PartnerNamespaceSharedAccessKeysInner> regenerateKeyAsync(String resourceGroupName, String partnerNamespaceName, String keyName) {
        return regenerateKeyWithServiceResponseAsync(resourceGroupName, partnerNamespaceName, keyName).map(new Func1<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>, PartnerNamespaceSharedAccessKeysInner>() {
            @Override
            public PartnerNamespaceSharedAccessKeysInner call(ServiceResponse<PartnerNamespaceSharedAccessKeysInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Regenerate key for a partner namespace.
     * Regenerate a shared access key for a partner namespace.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param partnerNamespaceName Name of the partner namespace.
     * @param keyName Key name to regenerate (key1 or key2).
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PartnerNamespaceSharedAccessKeysInner object
     */
    public Observable<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>> regenerateKeyWithServiceResponseAsync(String resourceGroupName, String partnerNamespaceName, String keyName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (partnerNamespaceName == null) {
            throw new IllegalArgumentException("Parameter partnerNamespaceName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (keyName == null) {
            throw new IllegalArgumentException("Parameter keyName is required and cannot be null.");
        }
        PartnerNamespaceRegenerateKeyRequest regenerateKeyRequest = new PartnerNamespaceRegenerateKeyRequest();
        regenerateKeyRequest.withKeyName(keyName);
        return service.regenerateKey(this.client.subscriptionId(), resourceGroupName, partnerNamespaceName, this.client.apiVersion(), this.client.acceptLanguage(), regenerateKeyRequest, this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>>>() {
                @Override
                public Observable<ServiceResponse<PartnerNamespaceSharedAccessKeysInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PartnerNamespaceSharedAccessKeysInner> clientResponse = regenerateKeyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PartnerNamespaceSharedAccessKeysInner> regenerateKeyDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PartnerNamespaceSharedAccessKeysInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PartnerNamespaceSharedAccessKeysInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object if successful.
     */
    public PagedList<PartnerNamespaceInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<PartnerNamespaceInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PartnerNamespaceInner>(response.body()) {
            @Override
            public Page<PartnerNamespaceInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerNamespaceInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PartnerNamespaceInner>> serviceFuture, final ListOperationCallback<PartnerNamespaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<Page<PartnerNamespaceInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Page<PartnerNamespaceInner>>() {
                @Override
                public Page<PartnerNamespaceInner> call(ServiceResponse<Page<PartnerNamespaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(ServiceResponse<Page<PartnerNamespaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner namespaces under an Azure subscription.
     * List all the partner namespaces under an Azure subscription.
     *
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerNamespaceInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerNamespaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerNamespaceInner>> listNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerNamespaceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerNamespaceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object if successful.
     */
    public PagedList<PartnerNamespaceInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PartnerNamespaceInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PartnerNamespaceInner>(response.body()) {
            @Override
            public Page<PartnerNamespaceInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PartnerNamespaceInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PartnerNamespaceInner>> serviceFuture, final ListOperationCallback<PartnerNamespaceInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<Page<PartnerNamespaceInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Page<PartnerNamespaceInner>>() {
                @Override
                public Page<PartnerNamespaceInner> call(ServiceResponse<Page<PartnerNamespaceInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PartnerNamespaceInner&gt; object
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PartnerNamespaceInner>>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(ServiceResponse<Page<PartnerNamespaceInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List partner namespaces under a resource group.
     * List all the partner namespaces under a resource group.
     *
    ServiceResponse<PageImpl<PartnerNamespaceInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PartnerNamespaceInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PartnerNamespaceInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PartnerNamespaceInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PartnerNamespaceInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PartnerNamespaceInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PartnerNamespaceInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PartnerNamespaceInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PartnerNamespaceInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
