/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopicEventSubscription;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventSubscriptionUpdateParameters;
import java.util.List;
import org.joda.time.DateTime;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventSubscriptionProvisioningState;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventSubscriptionDestination;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.DeliveryWithResourceIdentity;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventSubscriptionFilter;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventDeliverySchema;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.RetryPolicy;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.DeadLetterDestination;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.DeadLetterWithResourceIdentity;
import rx.functions.Func1;

class PartnerTopicEventSubscriptionImpl extends CreatableUpdatableImpl<PartnerTopicEventSubscription, EventSubscriptionInner, PartnerTopicEventSubscriptionImpl> implements PartnerTopicEventSubscription, PartnerTopicEventSubscription.Definition, PartnerTopicEventSubscription.Update {
    private final EventGridManager manager;
    private String resourceGroupName;
    private String partnerTopicName;
    private String eventSubscriptionName;
    private EventSubscriptionUpdateParameters updateParameter;

    PartnerTopicEventSubscriptionImpl(String name, EventGridManager manager) {
        super(name, new EventSubscriptionInner());
        this.manager = manager;
        // Set resource name
        this.eventSubscriptionName = name;
        //
        this.updateParameter = new EventSubscriptionUpdateParameters();
    }

    PartnerTopicEventSubscriptionImpl(EventSubscriptionInner inner, EventGridManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.eventSubscriptionName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.partnerTopicName = IdParsingUtils.getValueFromIdByName(inner.id(), "partnerTopics");
        this.eventSubscriptionName = IdParsingUtils.getValueFromIdByName(inner.id(), "eventSubscriptions");
        //
        this.updateParameter = new EventSubscriptionUpdateParameters();
    }

    @Override
    public EventGridManager manager() {
        return this.manager;
    }

    @Override
    public Observable<PartnerTopicEventSubscription> createResourceAsync() {
        PartnerTopicEventSubscriptionsInner client = this.manager().inner().partnerTopicEventSubscriptions();
        return client.createOrUpdateAsync(this.resourceGroupName, this.partnerTopicName, this.eventSubscriptionName, this.inner())
            .map(new Func1<EventSubscriptionInner, EventSubscriptionInner>() {
               @Override
               public EventSubscriptionInner call(EventSubscriptionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<PartnerTopicEventSubscription> updateResourceAsync() {
        PartnerTopicEventSubscriptionsInner client = this.manager().inner().partnerTopicEventSubscriptions();
        return client.updateAsync(this.resourceGroupName, this.partnerTopicName, this.eventSubscriptionName, this.updateParameter)
            .map(new Func1<EventSubscriptionInner, EventSubscriptionInner>() {
               @Override
               public EventSubscriptionInner call(EventSubscriptionInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<EventSubscriptionInner> getInnerAsync() {
        PartnerTopicEventSubscriptionsInner client = this.manager().inner().partnerTopicEventSubscriptions();
        return client.getAsync(this.resourceGroupName, this.partnerTopicName, this.eventSubscriptionName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.updateParameter = new EventSubscriptionUpdateParameters();
    }

    @Override
    public DeadLetterDestination deadLetterDestination() {
        return this.inner().deadLetterDestination();
    }

    @Override
    public DeadLetterWithResourceIdentity deadLetterWithResourceIdentity() {
        return this.inner().deadLetterWithResourceIdentity();
    }

    @Override
    public DeliveryWithResourceIdentity deliveryWithResourceIdentity() {
        return this.inner().deliveryWithResourceIdentity();
    }

    @Override
    public EventSubscriptionDestination destination() {
        return this.inner().destination();
    }

    @Override
    public EventDeliverySchema eventDeliverySchema() {
        return this.inner().eventDeliverySchema();
    }

    @Override
    public DateTime expirationTimeUtc() {
        return this.inner().expirationTimeUtc();
    }

    @Override
    public EventSubscriptionFilter filter() {
        return this.inner().filter();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public List<String> labels() {
        return this.inner().labels();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public EventSubscriptionProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public RetryPolicy retryPolicy() {
        return this.inner().retryPolicy();
    }

    @Override
    public String topic() {
        return this.inner().topic();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withExistingPartnerTopic(String resourceGroupName, String partnerTopicName) {
        this.resourceGroupName = resourceGroupName;
        this.partnerTopicName = partnerTopicName;
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withDeadLetterDestination(DeadLetterDestination deadLetterDestination) {
        if (isInCreateMode()) {
            this.inner().withDeadLetterDestination(deadLetterDestination);
        } else {
            this.updateParameter.withDeadLetterDestination(deadLetterDestination);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withDeadLetterWithResourceIdentity(DeadLetterWithResourceIdentity deadLetterWithResourceIdentity) {
        if (isInCreateMode()) {
            this.inner().withDeadLetterWithResourceIdentity(deadLetterWithResourceIdentity);
        } else {
            this.updateParameter.withDeadLetterWithResourceIdentity(deadLetterWithResourceIdentity);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withDeliveryWithResourceIdentity(DeliveryWithResourceIdentity deliveryWithResourceIdentity) {
        if (isInCreateMode()) {
            this.inner().withDeliveryWithResourceIdentity(deliveryWithResourceIdentity);
        } else {
            this.updateParameter.withDeliveryWithResourceIdentity(deliveryWithResourceIdentity);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withDestination(EventSubscriptionDestination destination) {
        if (isInCreateMode()) {
            this.inner().withDestination(destination);
        } else {
            this.updateParameter.withDestination(destination);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withEventDeliverySchema(EventDeliverySchema eventDeliverySchema) {
        if (isInCreateMode()) {
            this.inner().withEventDeliverySchema(eventDeliverySchema);
        } else {
            this.updateParameter.withEventDeliverySchema(eventDeliverySchema);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withExpirationTimeUtc(DateTime expirationTimeUtc) {
        if (isInCreateMode()) {
            this.inner().withExpirationTimeUtc(expirationTimeUtc);
        } else {
            this.updateParameter.withExpirationTimeUtc(expirationTimeUtc);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withFilter(EventSubscriptionFilter filter) {
        if (isInCreateMode()) {
            this.inner().withFilter(filter);
        } else {
            this.updateParameter.withFilter(filter);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withLabels(List<String> labels) {
        if (isInCreateMode()) {
            this.inner().withLabels(labels);
        } else {
            this.updateParameter.withLabels(labels);
        }
        return this;
    }

    @Override
    public PartnerTopicEventSubscriptionImpl withRetryPolicy(RetryPolicy retryPolicy) {
        if (isInCreateMode()) {
            this.inner().withRetryPolicy(retryPolicy);
        } else {
            this.updateParameter.withRetryPolicy(retryPolicy);
        }
        return this;
    }

}
