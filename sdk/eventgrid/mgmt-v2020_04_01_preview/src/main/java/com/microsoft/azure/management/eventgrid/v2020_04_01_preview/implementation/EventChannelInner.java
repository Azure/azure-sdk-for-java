/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_04_01_preview.implementation;

import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelSource;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelDestination;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelProvisioningState;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.PartnerTopicReadinessState;
import org.joda.time.DateTime;
import com.microsoft.azure.management.eventgrid.v2020_04_01_preview.EventChannelFilter;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.azure.ProxyResource;

/**
 * Event Channel.
 */
@JsonFlatten
public class EventChannelInner extends ProxyResource {
    /**
     * Source of the event channel. This represents a unique resource in the
     * partner's resource model.
     */
    @JsonProperty(value = "properties.source")
    private EventChannelSource source;

    /**
     * Represents the destination of an event channel.
     */
    @JsonProperty(value = "properties.destination")
    private EventChannelDestination destination;

    /**
     * Provisioning state of the event channel. Possible values include:
     * 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private EventChannelProvisioningState provisioningState;

    /**
     * The readiness state of the corresponding partner topic. Possible values
     * include: 'NotActivatedByUserYet', 'ActivatedByUser',
     * 'DeactivatedByUser', 'DeletedByUser'.
     */
    @JsonProperty(value = "properties.partnerTopicReadinessState", access = JsonProperty.Access.WRITE_ONLY)
    private PartnerTopicReadinessState partnerTopicReadinessState;

    /**
     * Expiration time of the event channel. If this timer expires while the
     * corresponding partner topic is never activated,
     * the event channel and corresponding partner topic are deleted.
     */
    @JsonProperty(value = "properties.expirationTimeIfNotActivatedUtc")
    private DateTime expirationTimeIfNotActivatedUtc;

    /**
     * Information about the filter for the event channel.
     */
    @JsonProperty(value = "properties.filter")
    private EventChannelFilter filter;

    /**
     * Friendly description about the topic. This can be set by the
     * publisher/partner to show custom description for the customer partner
     * topic.
     * This will be helpful to remove any ambiguity of the origin of creation
     * of the partner topic for the customer.
     */
    @JsonProperty(value = "properties.partnerTopicFriendlyDescription")
    private String partnerTopicFriendlyDescription;

    /**
     * Get source of the event channel. This represents a unique resource in the partner's resource model.
     *
     * @return the source value
     */
    public EventChannelSource source() {
        return this.source;
    }

    /**
     * Set source of the event channel. This represents a unique resource in the partner's resource model.
     *
     * @param source the source value to set
     * @return the EventChannelInner object itself.
     */
    public EventChannelInner withSource(EventChannelSource source) {
        this.source = source;
        return this;
    }

    /**
     * Get represents the destination of an event channel.
     *
     * @return the destination value
     */
    public EventChannelDestination destination() {
        return this.destination;
    }

    /**
     * Set represents the destination of an event channel.
     *
     * @param destination the destination value to set
     * @return the EventChannelInner object itself.
     */
    public EventChannelInner withDestination(EventChannelDestination destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get provisioning state of the event channel. Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Canceled', 'Failed'.
     *
     * @return the provisioningState value
     */
    public EventChannelProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the readiness state of the corresponding partner topic. Possible values include: 'NotActivatedByUserYet', 'ActivatedByUser', 'DeactivatedByUser', 'DeletedByUser'.
     *
     * @return the partnerTopicReadinessState value
     */
    public PartnerTopicReadinessState partnerTopicReadinessState() {
        return this.partnerTopicReadinessState;
    }

    /**
     * Get expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     the event channel and corresponding partner topic are deleted.
     *
     * @return the expirationTimeIfNotActivatedUtc value
     */
    public DateTime expirationTimeIfNotActivatedUtc() {
        return this.expirationTimeIfNotActivatedUtc;
    }

    /**
     * Set expiration time of the event channel. If this timer expires while the corresponding partner topic is never activated,
     the event channel and corresponding partner topic are deleted.
     *
     * @param expirationTimeIfNotActivatedUtc the expirationTimeIfNotActivatedUtc value to set
     * @return the EventChannelInner object itself.
     */
    public EventChannelInner withExpirationTimeIfNotActivatedUtc(DateTime expirationTimeIfNotActivatedUtc) {
        this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
        return this;
    }

    /**
     * Get information about the filter for the event channel.
     *
     * @return the filter value
     */
    public EventChannelFilter filter() {
        return this.filter;
    }

    /**
     * Set information about the filter for the event channel.
     *
     * @param filter the filter value to set
     * @return the EventChannelInner object itself.
     */
    public EventChannelInner withFilter(EventChannelFilter filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     *
     * @return the partnerTopicFriendlyDescription value
     */
    public String partnerTopicFriendlyDescription() {
        return this.partnerTopicFriendlyDescription;
    }

    /**
     * Set friendly description about the topic. This can be set by the publisher/partner to show custom description for the customer partner topic.
     This will be helpful to remove any ambiguity of the origin of creation of the partner topic for the customer.
     *
     * @param partnerTopicFriendlyDescription the partnerTopicFriendlyDescription value to set
     * @return the EventChannelInner object itself.
     */
    public EventChannelInner withPartnerTopicFriendlyDescription(String partnerTopicFriendlyDescription) {
        this.partnerTopicFriendlyDescription = partnerTopicFriendlyDescription;
        return this;
    }

}
