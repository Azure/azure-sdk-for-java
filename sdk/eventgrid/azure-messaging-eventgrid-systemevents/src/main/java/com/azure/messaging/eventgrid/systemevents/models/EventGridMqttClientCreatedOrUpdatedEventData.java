// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Event data for Microsoft.EventGrid.SystemEvents.MQTTClientCreatedOrUpdated event.
 */
@Immutable
public final class EventGridMqttClientCreatedOrUpdatedEventData
    implements JsonSerializable<EventGridMqttClientCreatedOrUpdatedEventData> {
    /*
     * Unique identifier for the MQTT client that the client presents to the service
     * for authentication. This case-sensitive string can be up to 128 characters
     * long, and supports UTF-8 characters.
     */
    @Generated
    private String clientAuthenticationName;

    /*
     * Name of the client resource in the Event Grid namespace.
     */
    @Generated
    private String clientName;

    /*
     * Name of the Event Grid namespace where the MQTT client was created or updated.
     */
    @Generated
    private String namespaceName;

    /*
     * Configured state of the client. The value could be Enabled or Disabled
     */
    @Generated
    private EventGridMqttClientState state;

    /*
     * Time the client resource is created based on the provider's UTC time.
     */
    @Generated
    private OffsetDateTime createdOn;

    /*
     * Time the client resource is last updated based on the provider's UTC time. If
     * the client resource was never updated, this value is identical to the value of
     * the 'createdOn' property.
     */
    @Generated
    private OffsetDateTime updatedOn;

    /*
     * The key-value attributes that are assigned to the client resource.
     */
    @Generated
    private Map<String, String> attributes;

    /**
     * Creates an instance of EventGridMqttClientCreatedOrUpdatedEventData class.
     */
    @Generated
    private EventGridMqttClientCreatedOrUpdatedEventData() {
    }

    /**
     * Get the clientAuthenticationName property: Unique identifier for the MQTT client that the client presents to the
     * service
     * for authentication. This case-sensitive string can be up to 128 characters
     * long, and supports UTF-8 characters.
     * 
     * @return the clientAuthenticationName value.
     */
    @Generated
    public String getClientAuthenticationName() {
        return this.clientAuthenticationName;
    }

    /**
     * Get the clientName property: Name of the client resource in the Event Grid namespace.
     * 
     * @return the clientName value.
     */
    @Generated
    public String getClientName() {
        return this.clientName;
    }

    /**
     * Get the namespaceName property: Name of the Event Grid namespace where the MQTT client was created or updated.
     * 
     * @return the namespaceName value.
     */
    @Generated
    public String getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Get the state property: Configured state of the client. The value could be Enabled or Disabled.
     * 
     * @return the state value.
     */
    @Generated
    public EventGridMqttClientState getState() {
        return this.state;
    }

    /**
     * Get the createdOn property: Time the client resource is created based on the provider's UTC time.
     * 
     * @return the createdOn value.
     */
    @Generated
    public OffsetDateTime getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Get the updatedOn property: Time the client resource is last updated based on the provider's UTC time. If
     * the client resource was never updated, this value is identical to the value of
     * the 'createdOn' property.
     * 
     * @return the updatedOn value.
     */
    @Generated
    public OffsetDateTime getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Get the attributes property: The key-value attributes that are assigned to the client resource.
     * 
     * @return the attributes value.
     */
    @Generated
    public Map<String, String> getAttributes() {
        return this.attributes;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientAuthenticationName", this.clientAuthenticationName);
        jsonWriter.writeStringField("clientName", this.clientName);
        jsonWriter.writeStringField("namespaceName", this.namespaceName);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("createdOn",
            this.createdOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdOn));
        jsonWriter.writeStringField("updatedOn",
            this.updatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedOn));
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventGridMqttClientCreatedOrUpdatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventGridMqttClientCreatedOrUpdatedEventData if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventGridMqttClientCreatedOrUpdatedEventData.
     */
    @Generated
    public static EventGridMqttClientCreatedOrUpdatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventGridMqttClientCreatedOrUpdatedEventData deserializedEventGridMqttClientCreatedOrUpdatedEventData
                = new EventGridMqttClientCreatedOrUpdatedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientAuthenticationName".equals(fieldName)) {
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.clientAuthenticationName
                        = reader.getString();
                } else if ("clientName".equals(fieldName)) {
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.clientName = reader.getString();
                } else if ("namespaceName".equals(fieldName)) {
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.namespaceName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.state
                        = EventGridMqttClientState.fromString(reader.getString());
                } else if ("createdOn".equals(fieldName)) {
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.createdOn
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("updatedOn".equals(fieldName)) {
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.updatedOn
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("attributes".equals(fieldName)) {
                    Map<String, String> attributes = reader.readMap(reader1 -> reader1.getString());
                    deserializedEventGridMqttClientCreatedOrUpdatedEventData.attributes = attributes;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventGridMqttClientCreatedOrUpdatedEventData;
        });
    }
}
