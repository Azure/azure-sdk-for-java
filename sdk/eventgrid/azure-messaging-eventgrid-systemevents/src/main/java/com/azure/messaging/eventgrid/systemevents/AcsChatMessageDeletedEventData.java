// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatMessageDeleted event.
 */
@Immutable
public final class AcsChatMessageDeletedEventData extends AcsChatMessageEventBaseProperties {
    /*
     * The time at which the message was deleted
     */
    @Generated
    private final OffsetDateTime deleteTime;

    /*
     * The version of the message
     */
    @Generated
    private Long version;

    /*
     * The type of the message
     */
    @Generated
    private String type;

    /*
     * The display name of the sender
     */
    @Generated
    private String senderDisplayName;

    /*
     * The chat message id
     */
    @Generated
    private String messageId;

    /*
     * The chat thread id
     */
    @Generated
    private String threadId;

    /*
     * The transaction id will be used as co-relation vector
     */
    @Generated
    private String transactionId;

    /**
     * Creates an instance of AcsChatMessageDeletedEventData class.
     * 
     * @param recipientCommunicationIdentifier the recipientCommunicationIdentifier value to set.
     * @param senderCommunicationIdentifier the senderCommunicationIdentifier value to set.
     * @param composeTime the composeTime value to set.
     * @param deleteTime the deleteTime value to set.
     */
    @Generated
    private AcsChatMessageDeletedEventData(CommunicationIdentifierModel recipientCommunicationIdentifier,
        CommunicationIdentifierModel senderCommunicationIdentifier, OffsetDateTime composeTime,
        OffsetDateTime deleteTime) {
        super(recipientCommunicationIdentifier, senderCommunicationIdentifier, composeTime);
        this.deleteTime = deleteTime;
    }

    /**
     * Get the deleteTime property: The time at which the message was deleted.
     * 
     * @return the deleteTime value.
     */
    @Generated
    public OffsetDateTime getDeleteTime() {
        return this.deleteTime;
    }

    /**
     * Get the version property: The version of the message.
     * 
     * @return the version value.
     */
    @Generated
    @Override
    public Long getVersion() {
        return this.version;
    }

    /**
     * Get the type property: The type of the message.
     * 
     * @return the type value.
     */
    @Generated
    @Override
    public String getType() {
        return this.type;
    }

    /**
     * Get the senderDisplayName property: The display name of the sender.
     * 
     * @return the senderDisplayName value.
     */
    @Generated
    @Override
    public String getSenderDisplayName() {
        return this.senderDisplayName;
    }

    /**
     * Get the messageId property: The chat message id.
     * 
     * @return the messageId value.
     */
    @Generated
    @Override
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Get the threadId property: The chat thread id.
     * 
     * @return the threadId value.
     */
    @Generated
    @Override
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the transactionId property: The transaction id will be used as co-relation vector.
     * 
     * @return the transactionId value.
     */
    @Generated
    @Override
    public String getTransactionId() {
        return this.transactionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recipientCommunicationIdentifier", getRecipientCommunicationIdentifier());
        jsonWriter.writeJsonField("senderCommunicationIdentifier", getSenderCommunicationIdentifier());
        jsonWriter.writeStringField("composeTime",
            getComposeTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getComposeTime()));
        jsonWriter.writeStringField("transactionId", getTransactionId());
        jsonWriter.writeStringField("threadId", getThreadId());
        jsonWriter.writeStringField("messageId", getMessageId());
        jsonWriter.writeStringField("senderDisplayName", getSenderDisplayName());
        jsonWriter.writeStringField("type", getType());
        jsonWriter.writeNumberField("version", getVersion());
        jsonWriter.writeStringField("deleteTime",
            this.deleteTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.deleteTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsChatMessageDeletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsChatMessageDeletedEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsChatMessageDeletedEventData.
     */
    @Generated
    public static AcsChatMessageDeletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationIdentifierModel recipientCommunicationIdentifier = null;
            CommunicationIdentifierModel senderCommunicationIdentifier = null;
            OffsetDateTime composeTime = null;
            String transactionId = null;
            String threadId = null;
            String messageId = null;
            String senderDisplayName = null;
            String type = null;
            Long version = null;
            OffsetDateTime deleteTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recipientCommunicationIdentifier".equals(fieldName)) {
                    recipientCommunicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("senderCommunicationIdentifier".equals(fieldName)) {
                    senderCommunicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("composeTime".equals(fieldName)) {
                    composeTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("transactionId".equals(fieldName)) {
                    transactionId = reader.getString();
                } else if ("threadId".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("senderDisplayName".equals(fieldName)) {
                    senderDisplayName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getNullable(JsonReader::getLong);
                } else if ("deleteTime".equals(fieldName)) {
                    deleteTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            AcsChatMessageDeletedEventData deserializedAcsChatMessageDeletedEventData
                = new AcsChatMessageDeletedEventData(recipientCommunicationIdentifier, senderCommunicationIdentifier,
                    composeTime, deleteTime);
            deserializedAcsChatMessageDeletedEventData.transactionId = transactionId;
            deserializedAcsChatMessageDeletedEventData.threadId = threadId;
            deserializedAcsChatMessageDeletedEventData.messageId = messageId;
            deserializedAcsChatMessageDeletedEventData.senderDisplayName = senderDisplayName;
            deserializedAcsChatMessageDeletedEventData.type = type;
            deserializedAcsChatMessageDeletedEventData.version = version;

            return deserializedAcsChatMessageDeletedEventData;
        });
    }
}
