// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of common properties of all participant events.
 */
@Immutable
public class AcsCallParticipantEventData extends AcsCallingEventProperties {

    /*
     * The user of the call participant
     */
    @Generated
    private AcsCallParticipantProperties user;

    /*
     * The display name of the participant.
     */
    @Generated
    private String displayName;

    /*
     * The id of the participant.
     */
    @Generated
    private String participantId;

    /*
     * The user agent of the participant.
     */
    @Generated
    private String userAgent;

    /*
     * Is the calling event a room call.
     */
    @Generated
    private Boolean isRoomsCall;

    /*
     * Is two-party in calling event.
     */
    @Generated
    private Boolean isTwoParty;

    /*
     * The room metadata
     */
    @Generated
    private AcsCallRoomProperties room;

    /*
     * The group metadata
     */
    @Generated
    private AcsCallGroupProperties group;

    /**
     * Creates an instance of AcsCallParticipantEventData class.
     *
     * @param startedBy the startedBy value to set.
     * @param serverCallId the serverCallId value to set.
     * @param correlationId the correlationId value to set.
     */
    @Generated
    protected AcsCallParticipantEventData(AcsCallParticipantProperties startedBy, String serverCallId,
        String correlationId) {
        super(startedBy, serverCallId, correlationId);
    }

    /**
     * Get the user property: The user of the call participant.
     *
     * @return the user value.
     */
    @Generated
    public AcsCallParticipantProperties getUser() {
        return this.user;
    }

    /**
     * Set the user property: The user of the call participant.
     *
     * @param user the user value to set.
     * @return the AcsCallParticipantEventData object itself.
     */
    @Generated
    AcsCallParticipantEventData setUser(AcsCallParticipantProperties user) {
        this.user = user;
        return this;
    }

    /**
     * Get the displayName property: The display name of the participant.
     *
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: The display name of the participant.
     *
     * @param displayName the displayName value to set.
     * @return the AcsCallParticipantEventData object itself.
     */
    @Generated
    AcsCallParticipantEventData setDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the participantId property: The id of the participant.
     *
     * @return the participantId value.
     */
    @Generated
    public String getParticipantId() {
        return this.participantId;
    }

    /**
     * Set the participantId property: The id of the participant.
     *
     * @param participantId the participantId value to set.
     * @return the AcsCallParticipantEventData object itself.
     */
    @Generated
    AcsCallParticipantEventData setParticipantId(String participantId) {
        this.participantId = participantId;
        return this;
    }

    /**
     * Get the userAgent property: The user agent of the participant.
     *
     * @return the userAgent value.
     */
    @Generated
    public String getUserAgent() {
        return this.userAgent;
    }

    /**
     * Set the userAgent property: The user agent of the participant.
     *
     * @param userAgent the userAgent value to set.
     * @return the AcsCallParticipantEventData object itself.
     */
    @Generated
    AcsCallParticipantEventData setUserAgent(String userAgent) {
        this.userAgent = userAgent;
        return this;
    }

    /**
     * Get the isRoomsCall property: Is the calling event a room call.
     *
     * @return the isRoomsCall value.
     */
    @Generated
    @Override
    public Boolean isRoomsCall() {
        return this.isRoomsCall;
    }

    /**
     * Get the isTwoParty property: Is two-party in calling event.
     *
     * @return the isTwoParty value.
     */
    @Generated
    @Override
    public Boolean isTwoParty() {
        return this.isTwoParty;
    }

    /**
     * Get the room property: The room metadata.
     *
     * @return the room value.
     */
    @Generated
    @Override
    public AcsCallRoomProperties getRoom() {
        return this.room;
    }

    /**
     * Get the group property: The group metadata.
     *
     * @return the group value.
     */
    @Generated
    @Override
    public AcsCallGroupProperties getGroup() {
        return this.group;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("startedBy", getStartedBy());
        jsonWriter.writeStringField("serverCallId", getServerCallId());
        jsonWriter.writeStringField("correlationId", getCorrelationId());
        jsonWriter.writeJsonField("group", getGroup());
        jsonWriter.writeJsonField("room", getRoom());
        jsonWriter.writeBooleanField("isTwoParty", isTwoParty());
        jsonWriter.writeBooleanField("isRoomsCall", isRoomsCall());
        jsonWriter.writeJsonField("user", this.user);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("participantId", this.participantId);
        jsonWriter.writeStringField("userAgent", this.userAgent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsCallParticipantEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsCallParticipantEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsCallParticipantEventData.
     */
    @Generated
    public static AcsCallParticipantEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsCallParticipantProperties startedBy = null;
            String serverCallId = null;
            String correlationId = null;
            AcsCallGroupProperties group = null;
            AcsCallRoomProperties room = null;
            Boolean isTwoParty = null;
            Boolean isRoomsCall = null;
            AcsCallParticipantProperties user = null;
            String displayName = null;
            String participantId = null;
            String userAgent = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("startedBy".equals(fieldName)) {
                    startedBy = AcsCallParticipantProperties.fromJson(reader);
                } else if ("serverCallId".equals(fieldName)) {
                    serverCallId = reader.getString();
                } else if ("correlationId".equals(fieldName)) {
                    correlationId = reader.getString();
                } else if ("group".equals(fieldName)) {
                    group = AcsCallGroupProperties.fromJson(reader);
                } else if ("room".equals(fieldName)) {
                    room = AcsCallRoomProperties.fromJson(reader);
                } else if ("isTwoParty".equals(fieldName)) {
                    isTwoParty = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRoomsCall".equals(fieldName)) {
                    isRoomsCall = reader.getNullable(JsonReader::getBoolean);
                } else if ("user".equals(fieldName)) {
                    user = AcsCallParticipantProperties.fromJson(reader);
                } else if ("displayName".equals(fieldName)) {
                    displayName = reader.getString();
                } else if ("participantId".equals(fieldName)) {
                    participantId = reader.getString();
                } else if ("userAgent".equals(fieldName)) {
                    userAgent = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsCallParticipantEventData deserializedAcsCallParticipantEventData
                = new AcsCallParticipantEventData(startedBy, serverCallId, correlationId);
            deserializedAcsCallParticipantEventData.group = group;
            deserializedAcsCallParticipantEventData.room = room;
            deserializedAcsCallParticipantEventData.isTwoParty = isTwoParty;
            deserializedAcsCallParticipantEventData.isRoomsCall = isRoomsCall;
            deserializedAcsCallParticipantEventData.user = user;
            deserializedAcsCallParticipantEventData.displayName = displayName;
            deserializedAcsCallParticipantEventData.participantId = participantId;
            deserializedAcsCallParticipantEventData.userAgent = userAgent;
            return deserializedAcsCallParticipantEventData;
        });
    }
}
