// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunCompleted event.
 */
@Immutable
public final class MachineLearningServicesRunCompletedEventData
    implements JsonSerializable<MachineLearningServicesRunCompletedEventData> {
    /*
     * The ID of the experiment that the run belongs to.
     */
    @Generated
    private String experimentId;

    /*
     * The name of the experiment that the run belongs to.
     */
    @Generated
    private String experimentName;

    /*
     * The ID of the Run that was completed.
     */
    @Generated
    private String runId;

    /*
     * The Run Type of the completed Run.
     */
    @Generated
    private String runType;

    /*
     * The tags of the completed Run.
     */
    @Generated
    private final Map<String, BinaryData> runTags;

    /*
     * The properties of the completed Run.
     */
    @Generated
    private final Map<String, BinaryData> runProperties;

    /**
     * Creates an instance of MachineLearningServicesRunCompletedEventData class.
     * 
     * @param runTags the runTags value to set.
     * @param runProperties the runProperties value to set.
     */
    @Generated
    private MachineLearningServicesRunCompletedEventData(Map<String, BinaryData> runTags,
        Map<String, BinaryData> runProperties) {
        this.runTags = runTags;
        this.runProperties = runProperties;
    }

    /**
     * Get the experimentId property: The ID of the experiment that the run belongs to.
     * 
     * @return the experimentId value.
     */
    @Generated
    public String getExperimentId() {
        return this.experimentId;
    }

    /**
     * Get the experimentName property: The name of the experiment that the run belongs to.
     * 
     * @return the experimentName value.
     */
    @Generated
    public String getExperimentName() {
        return this.experimentName;
    }

    /**
     * Get the runId property: The ID of the Run that was completed.
     * 
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the runType property: The Run Type of the completed Run.
     * 
     * @return the runType value.
     */
    @Generated
    public String getRunType() {
        return this.runType;
    }

    /**
     * Get the runTags property: The tags of the completed Run.
     * 
     * @return the runTags value.
     */
    @Generated
    public Map<String, BinaryData> getRunTags() {
        return this.runTags;
    }

    /**
     * Get the runProperties property: The properties of the completed Run.
     * 
     * @return the runProperties value.
     */
    @Generated
    public Map<String, BinaryData> getRunProperties() {
        return this.runProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("runTags", this.runTags,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeMapField("runProperties", this.runProperties,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("experimentId", this.experimentId);
        jsonWriter.writeStringField("experimentName", this.experimentName);
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("runType", this.runType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineLearningServicesRunCompletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineLearningServicesRunCompletedEventData if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MachineLearningServicesRunCompletedEventData.
     */
    @Generated
    public static MachineLearningServicesRunCompletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, BinaryData> runTags = null;
            Map<String, BinaryData> runProperties = null;
            String experimentId = null;
            String experimentName = null;
            String runId = null;
            String runType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("runTags".equals(fieldName)) {
                    runTags = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("runProperties".equals(fieldName)) {
                    runProperties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("experimentId".equals(fieldName)) {
                    experimentId = reader.getString();
                } else if ("experimentName".equals(fieldName)) {
                    experimentName = reader.getString();
                } else if ("runId".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("runType".equals(fieldName)) {
                    runType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MachineLearningServicesRunCompletedEventData deserializedMachineLearningServicesRunCompletedEventData
                = new MachineLearningServicesRunCompletedEventData(runTags, runProperties);
            deserializedMachineLearningServicesRunCompletedEventData.experimentId = experimentId;
            deserializedMachineLearningServicesRunCompletedEventData.experimentName = experimentName;
            deserializedMachineLearningServicesRunCompletedEventData.runId = runId;
            deserializedMachineLearningServicesRunCompletedEventData.runType = runType;

            return deserializedMachineLearningServicesRunCompletedEventData;
        });
    }
}
