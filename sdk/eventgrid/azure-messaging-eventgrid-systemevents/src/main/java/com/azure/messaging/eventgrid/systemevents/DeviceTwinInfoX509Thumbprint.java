// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a
 * certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically exist in
 * the certificate.
 */
@Immutable
public final class DeviceTwinInfoX509Thumbprint implements JsonSerializable<DeviceTwinInfoX509Thumbprint> {
    /*
     * Primary thumbprint for the x509 certificate.
     */
    @Generated
    private final String primaryThumbprint;

    /*
     * Secondary thumbprint for the x509 certificate.
     */
    @Generated
    private final String secondaryThumbprint;

    /**
     * Creates an instance of DeviceTwinInfoX509Thumbprint class.
     * 
     * @param primaryThumbprint the primaryThumbprint value to set.
     * @param secondaryThumbprint the secondaryThumbprint value to set.
     */
    @Generated
    private DeviceTwinInfoX509Thumbprint(String primaryThumbprint, String secondaryThumbprint) {
        this.primaryThumbprint = primaryThumbprint;
        this.secondaryThumbprint = secondaryThumbprint;
    }

    /**
     * Get the primaryThumbprint property: Primary thumbprint for the x509 certificate.
     * 
     * @return the primaryThumbprint value.
     */
    @Generated
    public String getPrimaryThumbprint() {
        return this.primaryThumbprint;
    }

    /**
     * Get the secondaryThumbprint property: Secondary thumbprint for the x509 certificate.
     * 
     * @return the secondaryThumbprint value.
     */
    @Generated
    public String getSecondaryThumbprint() {
        return this.secondaryThumbprint;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("primaryThumbprint", this.primaryThumbprint);
        jsonWriter.writeStringField("secondaryThumbprint", this.secondaryThumbprint);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceTwinInfoX509Thumbprint from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceTwinInfoX509Thumbprint if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceTwinInfoX509Thumbprint.
     */
    @Generated
    public static DeviceTwinInfoX509Thumbprint fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String primaryThumbprint = null;
            String secondaryThumbprint = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("primaryThumbprint".equals(fieldName)) {
                    primaryThumbprint = reader.getString();
                } else if ("secondaryThumbprint".equals(fieldName)) {
                    secondaryThumbprint = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new DeviceTwinInfoX509Thumbprint(primaryThumbprint, secondaryThumbprint);
        });
    }
}
