// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Event data for Microsoft.EventGrid.MQTTClientCreatedOrUpdated event.
 */
@Immutable
public final class EventGridMqttClientCreatedOrUpdatedEventData extends EventGridMqttClientEventData {
    /*
     * Configured state of the client. The value could be Enabled or Disabled
     */
    @Generated
    private final EventGridMqttClientState state;

    /*
     * Time the client resource is created based on the provider's UTC time.
     */
    @Generated
    private final OffsetDateTime createdOn;

    /*
     * Time the client resource is last updated based on the provider's UTC time. If
     * the client resource was never updated, this value is identical to the value of
     * the 'createdOn' property.
     */
    @Generated
    private final OffsetDateTime updatedOn;

    /*
     * The key-value attributes that are assigned to the client resource.
     */
    @Generated
    private final Map<String, String> attributes;

    /**
     * Creates an instance of EventGridMqttClientCreatedOrUpdatedEventData class.
     * 
     * @param clientAuthenticationName the clientAuthenticationName value to set.
     * @param clientName the clientName value to set.
     * @param namespaceName the namespaceName value to set.
     * @param state the state value to set.
     * @param createdOn the createdOn value to set.
     * @param updatedOn the updatedOn value to set.
     * @param attributes the attributes value to set.
     */
    @Generated
    private EventGridMqttClientCreatedOrUpdatedEventData(String clientAuthenticationName, String clientName,
        String namespaceName, EventGridMqttClientState state, OffsetDateTime createdOn, OffsetDateTime updatedOn,
        Map<String, String> attributes) {
        super(clientAuthenticationName, clientName, namespaceName);
        this.state = state;
        this.createdOn = createdOn;
        this.updatedOn = updatedOn;
        this.attributes = attributes;
    }

    /**
     * Get the state property: Configured state of the client. The value could be Enabled or Disabled.
     * 
     * @return the state value.
     */
    @Generated
    public EventGridMqttClientState getState() {
        return this.state;
    }

    /**
     * Get the createdOn property: Time the client resource is created based on the provider's UTC time.
     * 
     * @return the createdOn value.
     */
    @Generated
    public OffsetDateTime getCreatedOn() {
        return this.createdOn;
    }

    /**
     * Get the updatedOn property: Time the client resource is last updated based on the provider's UTC time. If
     * the client resource was never updated, this value is identical to the value of
     * the 'createdOn' property.
     * 
     * @return the updatedOn value.
     */
    @Generated
    public OffsetDateTime getUpdatedOn() {
        return this.updatedOn;
    }

    /**
     * Get the attributes property: The key-value attributes that are assigned to the client resource.
     * 
     * @return the attributes value.
     */
    @Generated
    public Map<String, String> getAttributes() {
        return this.attributes;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientAuthenticationName", getClientAuthenticationName());
        jsonWriter.writeStringField("clientName", getClientName());
        jsonWriter.writeStringField("namespaceName", getNamespaceName());
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("createdOn",
            this.createdOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdOn));
        jsonWriter.writeStringField("updatedOn",
            this.updatedOn == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.updatedOn));
        jsonWriter.writeMapField("attributes", this.attributes, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventGridMqttClientCreatedOrUpdatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventGridMqttClientCreatedOrUpdatedEventData if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EventGridMqttClientCreatedOrUpdatedEventData.
     */
    @Generated
    public static EventGridMqttClientCreatedOrUpdatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String clientAuthenticationName = null;
            String clientName = null;
            String namespaceName = null;
            EventGridMqttClientState state = null;
            OffsetDateTime createdOn = null;
            OffsetDateTime updatedOn = null;
            Map<String, String> attributes = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientAuthenticationName".equals(fieldName)) {
                    clientAuthenticationName = reader.getString();
                } else if ("clientName".equals(fieldName)) {
                    clientName = reader.getString();
                } else if ("namespaceName".equals(fieldName)) {
                    namespaceName = reader.getString();
                } else if ("state".equals(fieldName)) {
                    state = EventGridMqttClientState.fromString(reader.getString());
                } else if ("createdOn".equals(fieldName)) {
                    createdOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedOn".equals(fieldName)) {
                    updatedOn = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("attributes".equals(fieldName)) {
                    attributes = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new EventGridMqttClientCreatedOrUpdatedEventData(clientAuthenticationName, clientName, namespaceName,
                state, createdOn, updatedOn, attributes);
        });
    }
}
