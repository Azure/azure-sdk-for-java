// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobClosed event.
 */
@Immutable
public final class AcsRouterJobClosedEventData extends AcsRouterJobEventData {

    /*
     * Router Job Closed Assignment Id
     */
    @Generated
    private String assignmentId;

    /*
     * Router Job Closed Worker Id
     */
    @Generated
    private String workerId;

    /*
     * Router Job Closed Disposition Code
     */
    @Generated
    private String dispositionCode;

    /*
     * Router Job events Queue Id
     */
    @Generated
    private String queueId;

    /*
     * Router Event Channel ID
     */
    @Generated
    private String channelId;

    /*
     * Router Event Channel Reference
     */
    @Generated
    private String channelReference;

    /**
     * Creates an instance of AcsRouterJobClosedEventData class.
     *
     * @param jobId the jobId value to set.
     * @param labels the labels value to set.
     * @param tags the tags value to set.
     */
    @Generated
    private AcsRouterJobClosedEventData(String jobId, Map<String, String> labels, Map<String, String> tags) {
        super(jobId, labels, tags);
    }

    /**
     * Get the assignmentId property: Router Job Closed Assignment Id.
     *
     * @return the assignmentId value.
     */
    @Generated
    public String getAssignmentId() {
        return this.assignmentId;
    }

    /**
     * Get the workerId property: Router Job Closed Worker Id.
     *
     * @return the workerId value.
     */
    @Generated
    public String getWorkerId() {
        return this.workerId;
    }

    /**
     * Get the dispositionCode property: Router Job Closed Disposition Code.
     *
     * @return the dispositionCode value.
     */
    @Generated
    public String getDispositionCode() {
        return this.dispositionCode;
    }

    /**
     * Get the queueId property: Router Job events Queue Id.
     *
     * @return the queueId value.
     */
    @Generated
    @Override
    public String getQueueId() {
        return this.queueId;
    }

    /**
     * Get the channelId property: Router Event Channel ID.
     *
     * @return the channelId value.
     */
    @Generated
    @Override
    public String getChannelId() {
        return this.channelId;
    }

    /**
     * Get the channelReference property: Router Event Channel Reference.
     *
     * @return the channelReference value.
     */
    @Generated
    @Override
    public String getChannelReference() {
        return this.channelReference;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobId", getJobId());
        jsonWriter.writeMapField("labels", getLabels(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("channelReference", getChannelReference());
        jsonWriter.writeStringField("channelId", getChannelId());
        jsonWriter.writeStringField("queueId", getQueueId());
        jsonWriter.writeStringField("assignmentId", this.assignmentId);
        jsonWriter.writeStringField("workerId", this.workerId);
        jsonWriter.writeStringField("dispositionCode", this.dispositionCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRouterJobClosedEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRouterJobClosedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsRouterJobClosedEventData.
     */
    @Generated
    public static AcsRouterJobClosedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String jobId = null;
            Map<String, String> labels = null;
            Map<String, String> tags = null;
            String channelReference = null;
            String channelId = null;
            String queueId = null;
            String assignmentId = null;
            String workerId = null;
            String dispositionCode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    labels = reader.readMap(reader1 -> reader1.getString());
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("channelReference".equals(fieldName)) {
                    channelReference = reader.getString();
                } else if ("channelId".equals(fieldName)) {
                    channelId = reader.getString();
                } else if ("queueId".equals(fieldName)) {
                    queueId = reader.getString();
                } else if ("assignmentId".equals(fieldName)) {
                    assignmentId = reader.getString();
                } else if ("workerId".equals(fieldName)) {
                    workerId = reader.getString();
                } else if ("dispositionCode".equals(fieldName)) {
                    dispositionCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsRouterJobClosedEventData deserializedAcsRouterJobClosedEventData
                = new AcsRouterJobClosedEventData(jobId, labels, tags);
            deserializedAcsRouterJobClosedEventData.channelReference = channelReference;
            deserializedAcsRouterJobClosedEventData.channelId = channelId;
            deserializedAcsRouterJobClosedEventData.queueId = queueId;
            deserializedAcsRouterJobClosedEventData.assignmentId = assignmentId;
            deserializedAcsRouterJobClosedEventData.workerId = workerId;
            deserializedAcsRouterJobClosedEventData.dispositionCode = dispositionCode;
            return deserializedAcsRouterJobClosedEventData;
        });
    }
}
