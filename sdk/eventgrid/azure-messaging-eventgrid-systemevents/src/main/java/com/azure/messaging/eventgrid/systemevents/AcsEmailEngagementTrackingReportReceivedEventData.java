// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.EmailEngagementTrackingReportReceived
 * event.
 */
@Immutable
public final class AcsEmailEngagementTrackingReportReceivedEventData
    implements JsonSerializable<AcsEmailEngagementTrackingReportReceivedEventData> {
    /*
     * The Sender Email Address
     */
    @Generated
    private String sender;

    /*
     * The Recipient Email Address
     */
    @Generated
    private String recipient;

    /*
     * The Id of the email that has been sent
     */
    @Generated
    private String messageId;

    /*
     * The time at which the user interacted with the email
     */
    @Generated
    private final OffsetDateTime userActionTimestamp;

    /*
     * The context of the type of engagement user had with email
     */
    @Generated
    private String engagementContext;

    /*
     * The user agent interacting with the email
     */
    @Generated
    private String userAgent;

    /*
     * The type of engagement user have with email
     */
    @Generated
    private final AcsUserEngagement engagementType;

    /**
     * Creates an instance of AcsEmailEngagementTrackingReportReceivedEventData class.
     * 
     * @param userActionTimestamp the userActionTimestamp value to set.
     * @param engagementType the engagementType value to set.
     */
    @Generated
    private AcsEmailEngagementTrackingReportReceivedEventData(OffsetDateTime userActionTimestamp,
        AcsUserEngagement engagementType) {
        this.userActionTimestamp = userActionTimestamp;
        this.engagementType = engagementType;
    }

    /**
     * Get the sender property: The Sender Email Address.
     * 
     * @return the sender value.
     */
    @Generated
    public String getSender() {
        return this.sender;
    }

    /**
     * Get the recipient property: The Recipient Email Address.
     * 
     * @return the recipient value.
     */
    @Generated
    public String getRecipient() {
        return this.recipient;
    }

    /**
     * Get the messageId property: The Id of the email that has been sent.
     * 
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Get the userActionTimestamp property: The time at which the user interacted with the email.
     * 
     * @return the userActionTimestamp value.
     */
    @Generated
    public OffsetDateTime getUserActionTimestamp() {
        return this.userActionTimestamp;
    }

    /**
     * Get the engagementContext property: The context of the type of engagement user had with email.
     * 
     * @return the engagementContext value.
     */
    @Generated
    public String getEngagementContext() {
        return this.engagementContext;
    }

    /**
     * Get the userAgent property: The user agent interacting with the email.
     * 
     * @return the userAgent value.
     */
    @Generated
    public String getUserAgent() {
        return this.userAgent;
    }

    /**
     * Get the engagementType property: The type of engagement user have with email.
     * 
     * @return the engagementType value.
     */
    @Generated
    public AcsUserEngagement getEngagementType() {
        return this.engagementType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userActionTimestamp",
            this.userActionTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.userActionTimestamp));
        jsonWriter.writeStringField("engagementType",
            this.engagementType == null ? null : this.engagementType.toString());
        jsonWriter.writeStringField("sender", this.sender);
        jsonWriter.writeStringField("recipient", this.recipient);
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeStringField("engagementContext", this.engagementContext);
        jsonWriter.writeStringField("userAgent", this.userAgent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsEmailEngagementTrackingReportReceivedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsEmailEngagementTrackingReportReceivedEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsEmailEngagementTrackingReportReceivedEventData.
     */
    @Generated
    public static AcsEmailEngagementTrackingReportReceivedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime userActionTimestamp = null;
            AcsUserEngagement engagementType = null;
            String sender = null;
            String recipient = null;
            String messageId = null;
            String engagementContext = null;
            String userAgent = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userActionTimestamp".equals(fieldName)) {
                    userActionTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("engagementType".equals(fieldName)) {
                    engagementType = AcsUserEngagement.fromString(reader.getString());
                } else if ("sender".equals(fieldName)) {
                    sender = reader.getString();
                } else if ("recipient".equals(fieldName)) {
                    recipient = reader.getString();
                } else if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("engagementContext".equals(fieldName)) {
                    engagementContext = reader.getString();
                } else if ("userAgent".equals(fieldName)) {
                    userAgent = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsEmailEngagementTrackingReportReceivedEventData deserializedAcsEmailEngagementTrackingReportReceivedEventData
                = new AcsEmailEngagementTrackingReportReceivedEventData(userActionTimestamp, engagementType);
            deserializedAcsEmailEngagementTrackingReportReceivedEventData.sender = sender;
            deserializedAcsEmailEngagementTrackingReportReceivedEventData.recipient = recipient;
            deserializedAcsEmailEngagementTrackingReportReceivedEventData.messageId = messageId;
            deserializedAcsEmailEngagementTrackingReportReceivedEventData.engagementContext = engagementContext;
            deserializedAcsEmailEngagementTrackingReportReceivedEventData.userAgent = userAgent;

            return deserializedAcsEmailEngagementTrackingReportReceivedEventData;
        });
    }
}
