// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The geofence geometry.
 */
@Immutable
public final class MapsGeofenceGeometry implements JsonSerializable<MapsGeofenceGeometry> {
    /*
     * ID of the device.
     */
    @Generated
    private final String deviceId;

    /*
     * Distance from the coordinate to the closest border of the geofence. Positive means the coordinate is outside of
     * the geofence. If the coordinate is outside of the geofence, but more than the value of searchBuffer away from the
     * closest geofence border, then the value is 999. Negative means the coordinate is inside of the geofence. If the
     * coordinate is inside the polygon, but more than the value of searchBuffer away from the closest geofencing
     * border,then the value is -999. A value of 999 means that there is great confidence the coordinate is well outside
     * the geofence. A value of -999 means that there is great confidence the coordinate is well within the geofence.
     */
    @Generated
    private final double distance;

    /*
     * The unique ID for the geofence geometry.
     */
    @Generated
    private final String geometryId;

    /*
     * Latitude of the nearest point of the geometry.
     */
    @Generated
    private final double nearestLat;

    /*
     * Longitude of the nearest point of the geometry.
     */
    @Generated
    private final double nearestLon;

    /*
     * The unique id returned from user upload service when uploading a geofence. Will not be included in geofencing
     * post API.
     */
    @Generated
    private String udId;

    /**
     * Creates an instance of MapsGeofenceGeometry class.
     * 
     * @param deviceId the deviceId value to set.
     * @param distance the distance value to set.
     * @param geometryId the geometryId value to set.
     * @param nearestLat the nearestLat value to set.
     * @param nearestLon the nearestLon value to set.
     */
    @Generated
    private MapsGeofenceGeometry(String deviceId, double distance, String geometryId, double nearestLat,
        double nearestLon) {
        this.deviceId = deviceId;
        this.distance = distance;
        this.geometryId = geometryId;
        this.nearestLat = nearestLat;
        this.nearestLon = nearestLon;
    }

    /**
     * Get the deviceId property: ID of the device.
     * 
     * @return the deviceId value.
     */
    @Generated
    public String getDeviceId() {
        return this.deviceId;
    }

    /**
     * Get the distance property: Distance from the coordinate to the closest border of the geofence. Positive means the
     * coordinate is outside of the geofence. If the coordinate is outside of the geofence, but more than the value of
     * searchBuffer away from the closest geofence border, then the value is 999. Negative means the coordinate is
     * inside of the geofence. If the coordinate is inside the polygon, but more than the value of searchBuffer away
     * from the closest geofencing border,then the value is -999. A value of 999 means that there is great confidence
     * the coordinate is well outside the geofence. A value of -999 means that there is great confidence the coordinate
     * is well within the geofence.
     * 
     * @return the distance value.
     */
    @Generated
    public double getDistance() {
        return this.distance;
    }

    /**
     * Get the geometryId property: The unique ID for the geofence geometry.
     * 
     * @return the geometryId value.
     */
    @Generated
    public String getGeometryId() {
        return this.geometryId;
    }

    /**
     * Get the nearestLat property: Latitude of the nearest point of the geometry.
     * 
     * @return the nearestLat value.
     */
    @Generated
    public double getNearestLat() {
        return this.nearestLat;
    }

    /**
     * Get the nearestLon property: Longitude of the nearest point of the geometry.
     * 
     * @return the nearestLon value.
     */
    @Generated
    public double getNearestLon() {
        return this.nearestLon;
    }

    /**
     * Get the udId property: The unique id returned from user upload service when uploading a geofence. Will not be
     * included in geofencing post API.
     * 
     * @return the udId value.
     */
    @Generated
    public String getUdId() {
        return this.udId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceId", this.deviceId);
        jsonWriter.writeDoubleField("distance", this.distance);
        jsonWriter.writeStringField("geometryId", this.geometryId);
        jsonWriter.writeDoubleField("nearestLat", this.nearestLat);
        jsonWriter.writeDoubleField("nearestLon", this.nearestLon);
        jsonWriter.writeStringField("udId", this.udId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapsGeofenceGeometry from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapsGeofenceGeometry if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MapsGeofenceGeometry.
     */
    @Generated
    public static MapsGeofenceGeometry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String deviceId = null;
            double distance = 0.0;
            String geometryId = null;
            double nearestLat = 0.0;
            double nearestLon = 0.0;
            String udId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceId".equals(fieldName)) {
                    deviceId = reader.getString();
                } else if ("distance".equals(fieldName)) {
                    distance = reader.getDouble();
                } else if ("geometryId".equals(fieldName)) {
                    geometryId = reader.getString();
                } else if ("nearestLat".equals(fieldName)) {
                    nearestLat = reader.getDouble();
                } else if ("nearestLon".equals(fieldName)) {
                    nearestLon = reader.getDouble();
                } else if ("udId".equals(fieldName)) {
                    udId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MapsGeofenceGeometry deserializedMapsGeofenceGeometry
                = new MapsGeofenceGeometry(deviceId, distance, geometryId, nearestLat, nearestLon);
            deserializedMapsGeofenceGeometry.udId = udId;

            return deserializedMapsGeofenceGeometry;
        });
    }
}
