// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Policy run status of an account in a Blob Management cycle.
 */
@Immutable
public final class StorageLifecyclePolicyRunSummary implements JsonSerializable<StorageLifecyclePolicyRunSummary> {
    /*
     * Policy status can be Completed/CompletedWithError/Incomplete.
     */
    @Generated
    private final StorageLifecycleCompletionStatus completionStatus;

    /**
     * Creates an instance of StorageLifecyclePolicyRunSummary class.
     * 
     * @param completionStatus the completionStatus value to set.
     */
    @Generated
    private StorageLifecyclePolicyRunSummary(StorageLifecycleCompletionStatus completionStatus) {
        this.completionStatus = completionStatus;
    }

    /**
     * Get the completionStatus property: Policy status can be Completed/CompletedWithError/Incomplete.
     * 
     * @return the completionStatus value.
     */
    @Generated
    public StorageLifecycleCompletionStatus getCompletionStatus() {
        return this.completionStatus;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("completionStatus",
            this.completionStatus == null ? null : this.completionStatus.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageLifecyclePolicyRunSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageLifecyclePolicyRunSummary if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageLifecyclePolicyRunSummary.
     */
    @Generated
    public static StorageLifecyclePolicyRunSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageLifecycleCompletionStatus completionStatus = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("completionStatus".equals(fieldName)) {
                    completionStatus = StorageLifecycleCompletionStatus.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new StorageLifecyclePolicyRunSummary(completionStatus);
        });
    }
}
