// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Router Queue Details.
 */
@Immutable
public final class AcsRouterQueueDetails implements JsonSerializable<AcsRouterQueueDetails> {
    /*
     * Router Queue Id
     */
    @Generated
    private String id;

    /*
     * Router Queue Name
     */
    @Generated
    private String name;

    /*
     * Router Queue Labels
     */
    @Generated
    private final Map<String, String> labels;

    /**
     * Creates an instance of AcsRouterQueueDetails class.
     * 
     * @param labels the labels value to set.
     */
    @Generated
    private AcsRouterQueueDetails(Map<String, String> labels) {
        this.labels = labels;
    }

    /**
     * Get the id property: Router Queue Id.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: Router Queue Name.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the labels property: Router Queue Labels.
     * 
     * @return the labels value.
     */
    @Generated
    public Map<String, String> getLabels() {
        return this.labels;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRouterQueueDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRouterQueueDetails if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsRouterQueueDetails.
     */
    @Generated
    public static AcsRouterQueueDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, String> labels = null;
            String id = null;
            String name = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("labels".equals(fieldName)) {
                    labels = reader.readMap(reader1 -> reader1.getString());
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsRouterQueueDetails deserializedAcsRouterQueueDetails = new AcsRouterQueueDetails(labels);
            deserializedAcsRouterQueueDetails.id = id;
            deserializedAcsRouterQueueDetails.name = name;

            return deserializedAcsRouterQueueDetails;
        });
    }
}
