// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The target of the event.
 */
@Immutable
public final class ContainerRegistryArtifactEventTarget
    implements JsonSerializable<ContainerRegistryArtifactEventTarget> {
    /*
     * The MIME type of the artifact.
     */
    @Generated
    private final String mediaType;

    /*
     * The size in bytes of the artifact.
     */
    @Generated
    private Long size;

    /*
     * The digest of the artifact.
     */
    @Generated
    private String digest;

    /*
     * The repository name of the artifact.
     */
    @Generated
    private final String repository;

    /*
     * The tag of the artifact.
     */
    @Generated
    private String tag;

    /*
     * The name of the artifact.
     */
    @Generated
    private String name;

    /*
     * The version of the artifact.
     */
    @Generated
    private String version;

    /**
     * Creates an instance of ContainerRegistryArtifactEventTarget class.
     * 
     * @param mediaType the mediaType value to set.
     * @param repository the repository value to set.
     */
    @Generated
    private ContainerRegistryArtifactEventTarget(String mediaType, String repository) {
        this.mediaType = mediaType;
        this.repository = repository;
    }

    /**
     * Get the mediaType property: The MIME type of the artifact.
     * 
     * @return the mediaType value.
     */
    @Generated
    public String getMediaType() {
        return this.mediaType;
    }

    /**
     * Get the size property: The size in bytes of the artifact.
     * 
     * @return the size value.
     */
    @Generated
    public Long getSize() {
        return this.size;
    }

    /**
     * Get the digest property: The digest of the artifact.
     * 
     * @return the digest value.
     */
    @Generated
    public String getDigest() {
        return this.digest;
    }

    /**
     * Get the repository property: The repository name of the artifact.
     * 
     * @return the repository value.
     */
    @Generated
    public String getRepository() {
        return this.repository;
    }

    /**
     * Get the tag property: The tag of the artifact.
     * 
     * @return the tag value.
     */
    @Generated
    public String getTag() {
        return this.tag;
    }

    /**
     * Get the name property: The name of the artifact.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the version property: The version of the artifact.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mediaType", this.mediaType);
        jsonWriter.writeStringField("repository", this.repository);
        jsonWriter.writeNumberField("size", this.size);
        jsonWriter.writeStringField("digest", this.digest);
        jsonWriter.writeStringField("tag", this.tag);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerRegistryArtifactEventTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerRegistryArtifactEventTarget if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerRegistryArtifactEventTarget.
     */
    @Generated
    public static ContainerRegistryArtifactEventTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String mediaType = null;
            String repository = null;
            Long size = null;
            String digest = null;
            String tag = null;
            String name = null;
            String version = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mediaType".equals(fieldName)) {
                    mediaType = reader.getString();
                } else if ("repository".equals(fieldName)) {
                    repository = reader.getString();
                } else if ("size".equals(fieldName)) {
                    size = reader.getNullable(JsonReader::getLong);
                } else if ("digest".equals(fieldName)) {
                    digest = reader.getString();
                } else if ("tag".equals(fieldName)) {
                    tag = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ContainerRegistryArtifactEventTarget deserializedContainerRegistryArtifactEventTarget
                = new ContainerRegistryArtifactEventTarget(mediaType, repository);
            deserializedContainerRegistryArtifactEventTarget.size = size;
            deserializedContainerRegistryArtifactEventTarget.digest = digest;
            deserializedContainerRegistryArtifactEventTarget.tag = tag;
            deserializedContainerRegistryArtifactEventTarget.name = name;
            deserializedContainerRegistryArtifactEventTarget.version = version;

            return deserializedContainerRegistryArtifactEventTarget;
        });
    }
}
