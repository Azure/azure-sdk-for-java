// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.CallEnded event.
 */
@Immutable
public final class AcsCallEndedEventData extends AcsCallingEventProperties {

    /*
     * The communication identifier of the user who was disconnected
     */
    @Generated
    private AcsCallEndedByProperties endedBy;

    /*
     * The reason for ending the call.
     */
    @Generated
    private AcsCallEndReasonProperties reason;

    /*
     * Duration of the call in seconds.
     */
    @Generated
    private Double callDuration;

    /*
     * Is the calling event a room call.
     */
    @Generated
    private Boolean isRoomsCall;

    /*
     * Is two-party in calling event.
     */
    @Generated
    private Boolean isTwoParty;

    /*
     * The room metadata
     */
    @Generated
    private AcsCallRoomProperties room;

    /*
     * The group metadata
     */
    @Generated
    private AcsCallGroupProperties group;

    /**
     * Creates an instance of AcsCallEndedEventData class.
     *
     * @param startedBy the startedBy value to set.
     * @param serverCallId the serverCallId value to set.
     * @param correlationId the correlationId value to set.
     */
    @Generated
    private AcsCallEndedEventData(AcsCallParticipantProperties startedBy, String serverCallId, String correlationId) {
        super(startedBy, serverCallId, correlationId);
    }

    /**
     * Get the endedBy property: The communication identifier of the user who was disconnected.
     *
     * @return the endedBy value.
     */
    @Generated
    public AcsCallEndedByProperties getEndedBy() {
        return this.endedBy;
    }

    /**
     * Get the reason property: The reason for ending the call.
     *
     * @return the reason value.
     */
    @Generated
    public AcsCallEndReasonProperties getReason() {
        return this.reason;
    }

    /**
     * Get the callDuration property: Duration of the call in seconds.
     *
     * @return the callDuration value.
     */
    @Generated
    public Duration getCallDuration() {
        if (this.callDuration == null) {
            return null;
        }
        return Duration.ofNanos((long) (this.callDuration * 1000_000_000L));
    }

    /**
     * Get the isRoomsCall property: Is the calling event a room call.
     *
     * @return the isRoomsCall value.
     */
    @Generated
    @Override
    public Boolean isRoomsCall() {
        return this.isRoomsCall;
    }

    /**
     * Get the isTwoParty property: Is two-party in calling event.
     *
     * @return the isTwoParty value.
     */
    @Generated
    @Override
    public Boolean isTwoParty() {
        return this.isTwoParty;
    }

    /**
     * Get the room property: The room metadata.
     *
     * @return the room value.
     */
    @Generated
    @Override
    public AcsCallRoomProperties getRoom() {
        return this.room;
    }

    /**
     * Get the group property: The group metadata.
     *
     * @return the group value.
     */
    @Generated
    @Override
    public AcsCallGroupProperties getGroup() {
        return this.group;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("startedBy", getStartedBy());
        jsonWriter.writeStringField("serverCallId", getServerCallId());
        jsonWriter.writeStringField("correlationId", getCorrelationId());
        jsonWriter.writeJsonField("group", getGroup());
        jsonWriter.writeJsonField("room", getRoom());
        jsonWriter.writeBooleanField("isTwoParty", isTwoParty());
        jsonWriter.writeBooleanField("isRoomsCall", isRoomsCall());
        jsonWriter.writeJsonField("endedBy", this.endedBy);
        jsonWriter.writeJsonField("reason", this.reason);
        jsonWriter.writeNumberField("callDurationInSeconds", this.callDuration);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsCallEndedEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsCallEndedEventData if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsCallEndedEventData.
     */
    @Generated
    public static AcsCallEndedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsCallParticipantProperties startedBy = null;
            String serverCallId = null;
            String correlationId = null;
            AcsCallGroupProperties group = null;
            AcsCallRoomProperties room = null;
            Boolean isTwoParty = null;
            Boolean isRoomsCall = null;
            AcsCallEndedByProperties endedBy = null;
            AcsCallEndReasonProperties reason = null;
            Double callDuration = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("startedBy".equals(fieldName)) {
                    startedBy = AcsCallParticipantProperties.fromJson(reader);
                } else if ("serverCallId".equals(fieldName)) {
                    serverCallId = reader.getString();
                } else if ("correlationId".equals(fieldName)) {
                    correlationId = reader.getString();
                } else if ("group".equals(fieldName)) {
                    group = AcsCallGroupProperties.fromJson(reader);
                } else if ("room".equals(fieldName)) {
                    room = AcsCallRoomProperties.fromJson(reader);
                } else if ("isTwoParty".equals(fieldName)) {
                    isTwoParty = reader.getNullable(JsonReader::getBoolean);
                } else if ("isRoomsCall".equals(fieldName)) {
                    isRoomsCall = reader.getNullable(JsonReader::getBoolean);
                } else if ("endedBy".equals(fieldName)) {
                    endedBy = AcsCallEndedByProperties.fromJson(reader);
                } else if ("reason".equals(fieldName)) {
                    reason = AcsCallEndReasonProperties.fromJson(reader);
                } else if ("callDurationInSeconds".equals(fieldName)) {
                    callDuration = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            AcsCallEndedEventData deserializedAcsCallEndedEventData
                = new AcsCallEndedEventData(startedBy, serverCallId, correlationId);
            deserializedAcsCallEndedEventData.group = group;
            deserializedAcsCallEndedEventData.room = room;
            deserializedAcsCallEndedEventData.isTwoParty = isTwoParty;
            deserializedAcsCallEndedEventData.isRoomsCall = isRoomsCall;
            deserializedAcsCallEndedEventData.endedBy = endedBy;
            deserializedAcsCallEndedEventData.reason = reason;
            deserializedAcsCallEndedEventData.callDuration = callDuration;
            return deserializedAcsCallEndedEventData;
        });
    }
}
