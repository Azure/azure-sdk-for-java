// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Job output canceling event data. Schema of the data property of an
 * EventGridEvent for a Microsoft.Media.JobOutputCanceling event.
 */
@Immutable
public final class MediaJobOutputCancelingEventData extends MediaJobOutputStateChangeEventData {
    /**
     * Creates an instance of MediaJobOutputCancelingEventData class.
     * 
     * @param previousState the previousState value to set.
     * @param output the output value to set.
     * @param jobCorrelationData the jobCorrelationData value to set.
     */
    @Generated
    private MediaJobOutputCancelingEventData(MediaJobState previousState, MediaJobOutput output,
        Map<String, String> jobCorrelationData) {
        super(previousState, output, jobCorrelationData);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("previousState", getPreviousState() == null ? null : getPreviousState().toString());
        jsonWriter.writeJsonField("output", getOutput());
        jsonWriter.writeMapField("jobCorrelationData", getJobCorrelationData(),
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaJobOutputCancelingEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaJobOutputCancelingEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaJobOutputCancelingEventData.
     */
    @Generated
    public static MediaJobOutputCancelingEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MediaJobState previousState = null;
            MediaJobOutput output = null;
            Map<String, String> jobCorrelationData = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("previousState".equals(fieldName)) {
                    previousState = MediaJobState.fromString(reader.getString());
                } else if ("output".equals(fieldName)) {
                    output = MediaJobOutput.fromJson(reader);
                } else if ("jobCorrelationData".equals(fieldName)) {
                    jobCorrelationData = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new MediaJobOutputCancelingEventData(previousState, output, jobCorrelationData);
        });
    }
}
