// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;

/**
 * Channel Archive heartbeat event data. Schema of the data property of an EventGridEvent for a
 * Microsoft.Media.LiveEventChannelArchiveHeartbeat event.
 */
@Immutable
public final class MediaLiveEventChannelArchiveHeartbeatEventData
    implements JsonSerializable<MediaLiveEventChannelArchiveHeartbeatEventData> {

    /*
     * Gets the channel latency in ms.
     */
    @Generated
    private final String channelLatency;

    /*
     * Gets the latency result code.
     */
    @Generated
    private final String latencyResultCode;

    static final ClientLogger LOGGER = new ClientLogger(MediaLiveEventChannelArchiveHeartbeatEventData.class);

    /**
     * Creates an instance of MediaLiveEventChannelArchiveHeartbeatEventData class.
     *
     * @param channelLatency the channelLatency value to set.
     * @param latencyResultCode the latencyResultCode value to set.
     */
    @Generated
    private MediaLiveEventChannelArchiveHeartbeatEventData(String channelLatency, String latencyResultCode) {
        this.channelLatency = channelLatency;
        this.latencyResultCode = latencyResultCode;
    }

    /**
     * Gets the duration of channel latency.
     *
     * @return the duration of channel latency.
     */
    @Generated
    public Duration getChannelLatency() {
        if ("n/a".equals(this.channelLatency)) {
            return null;
        }
        Long channelLatencyLong;
        try {
            channelLatencyLong = Long.parseLong(this.channelLatency);
        } catch (NumberFormatException ex) {
            LOGGER.logExceptionAsError(ex);
            return null;
        }
        return Duration.ofMillis(channelLatencyLong);
    }

    /**
     * Get the latencyResultCode property: Gets the latency result code.
     *
     * @return the latencyResultCode value.
     */
    @Generated
    public String getLatencyResultCode() {
        return this.latencyResultCode;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("channelLatencyMs", this.channelLatency);
        jsonWriter.writeStringField("latencyResultCode", this.latencyResultCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaLiveEventChannelArchiveHeartbeatEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaLiveEventChannelArchiveHeartbeatEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaLiveEventChannelArchiveHeartbeatEventData.
     */
    @Generated
    public static MediaLiveEventChannelArchiveHeartbeatEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String channelLatency = null;
            String latencyResultCode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("channelLatencyMs".equals(fieldName)) {
                    channelLatency = reader.getString();
                } else if ("latencyResultCode".equals(fieldName)) {
                    latencyResultCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new MediaLiveEventChannelArchiveHeartbeatEventData(channelLatency, latencyResultCode);
        });
    }
}
