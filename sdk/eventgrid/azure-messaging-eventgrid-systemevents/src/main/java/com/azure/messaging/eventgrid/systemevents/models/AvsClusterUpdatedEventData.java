// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ClusterUpdated event.
 */
@Immutable
public final class AvsClusterUpdatedEventData extends AvsClusterEventData {
    /**
     * Creates an instance of AvsClusterUpdatedEventData class.
     * 
     * @param addedHostNames the addedHostNames value to set.
     * @param removedHostNames the removedHostNames value to set.
     * @param inMaintenanceHostNames the inMaintenanceHostNames value to set.
     */
    @Generated
    private AvsClusterUpdatedEventData(List<String> addedHostNames, List<String> removedHostNames,
        List<String> inMaintenanceHostNames) {
        super(addedHostNames, removedHostNames, inMaintenanceHostNames);
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("addedHostNames", getAddedHostNames(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("removedHostNames", getRemovedHostNames(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("inMaintenanceHostNames", getInMaintenanceHostNames(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("operationId", getOperationId());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsClusterUpdatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsClusterUpdatedEventData if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvsClusterUpdatedEventData.
     */
    @Generated
    public static AvsClusterUpdatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> addedHostNames = null;
            List<String> removedHostNames = null;
            List<String> inMaintenanceHostNames = null;
            String operationId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("addedHostNames".equals(fieldName)) {
                    addedHostNames = reader.readArray(reader1 -> reader1.getString());
                } else if ("removedHostNames".equals(fieldName)) {
                    removedHostNames = reader.readArray(reader1 -> reader1.getString());
                } else if ("inMaintenanceHostNames".equals(fieldName)) {
                    inMaintenanceHostNames = reader.readArray(reader1 -> reader1.getString());
                } else if ("operationId".equals(fieldName)) {
                    operationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AvsClusterUpdatedEventData deserializedAvsClusterUpdatedEventData
                = new AvsClusterUpdatedEventData(addedHostNames, removedHostNames, inMaintenanceHostNames);
            deserializedAvsClusterUpdatedEventData.setOperationId(operationId);

            return deserializedAvsClusterUpdatedEventData;
        });
    }
}
