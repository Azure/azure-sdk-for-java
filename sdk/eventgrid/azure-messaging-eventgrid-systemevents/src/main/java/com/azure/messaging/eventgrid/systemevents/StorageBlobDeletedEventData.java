// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobDeleted event.
 */
@Immutable
public final class StorageBlobDeletedEventData implements JsonSerializable<StorageBlobDeletedEventData> {
    /*
     * The name of the API/operation that triggered this event.
     */
    @Generated
    private String api;

    /*
     * A request id provided by the client of the storage API operation that triggered this event.
     */
    @Generated
    private String clientRequestId;

    /*
     * The request id generated by the storage service for the storage API operation that triggered this event.
     */
    @Generated
    private String requestId;

    /*
     * The content type of the blob. This is the same as what would be returned in the Content-Type header from the
     * blob.
     */
    @Generated
    private String contentType;

    /*
     * The type of blob.
     */
    @Generated
    private String blobType;

    /*
     * The path to the blob.
     */
    @Generated
    private String url;

    /*
     * An opaque string value representing the logical sequence of events for any particular blob name. Users can use
     * standard string comparison to understand the relative sequence of two events on the same blob name.
     */
    @Generated
    private String sequencer;

    /*
     * The identity of the requester that triggered this event.
     */
    @Generated
    private String identity;

    /*
     * For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be
     * ignored by event consumers.
     */
    @Generated
    private final Map<String, BinaryData> storageDiagnostics;

    /**
     * Creates an instance of StorageBlobDeletedEventData class.
     * 
     * @param storageDiagnostics the storageDiagnostics value to set.
     */
    @Generated
    private StorageBlobDeletedEventData(Map<String, BinaryData> storageDiagnostics) {
        this.storageDiagnostics = storageDiagnostics;
    }

    /**
     * Get the api property: The name of the API/operation that triggered this event.
     * 
     * @return the api value.
     */
    @Generated
    public String getApi() {
        return this.api;
    }

    /**
     * Get the clientRequestId property: A request id provided by the client of the storage API operation that triggered
     * this event.
     * 
     * @return the clientRequestId value.
     */
    @Generated
    public String getClientRequestId() {
        return this.clientRequestId;
    }

    /**
     * Get the requestId property: The request id generated by the storage service for the storage API operation that
     * triggered this event.
     * 
     * @return the requestId value.
     */
    @Generated
    public String getRequestId() {
        return this.requestId;
    }

    /**
     * Get the contentType property: The content type of the blob. This is the same as what would be returned in the
     * Content-Type header from the blob.
     * 
     * @return the contentType value.
     */
    @Generated
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Get the blobType property: The type of blob.
     * 
     * @return the blobType value.
     */
    @Generated
    public String getBlobType() {
        return this.blobType;
    }

    /**
     * Get the url property: The path to the blob.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the sequencer property: An opaque string value representing the logical sequence of events for any particular
     * blob name. Users can use standard string comparison to understand the relative sequence of two events on the same
     * blob name.
     * 
     * @return the sequencer value.
     */
    @Generated
    public String getSequencer() {
        return this.sequencer;
    }

    /**
     * Get the identity property: The identity of the requester that triggered this event.
     * 
     * @return the identity value.
     */
    @Generated
    public String getIdentity() {
        return this.identity;
    }

    /**
     * Get the storageDiagnostics property: For service use only. Diagnostic data occasionally included by the Azure
     * Storage service. This property should be ignored by event consumers.
     * 
     * @return the storageDiagnostics value.
     */
    @Generated
    public Map<String, BinaryData> getStorageDiagnostics() {
        return this.storageDiagnostics;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("storageDiagnostics", this.storageDiagnostics,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        jsonWriter.writeStringField("api", this.api);
        jsonWriter.writeStringField("clientRequestId", this.clientRequestId);
        jsonWriter.writeStringField("requestId", this.requestId);
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeStringField("blobType", this.blobType);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("sequencer", this.sequencer);
        jsonWriter.writeStringField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageBlobDeletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageBlobDeletedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageBlobDeletedEventData.
     */
    @Generated
    public static StorageBlobDeletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, BinaryData> storageDiagnostics = null;
            String api = null;
            String clientRequestId = null;
            String requestId = null;
            String contentType = null;
            String blobType = null;
            String url = null;
            String sequencer = null;
            String identity = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageDiagnostics".equals(fieldName)) {
                    storageDiagnostics = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else if ("api".equals(fieldName)) {
                    api = reader.getString();
                } else if ("clientRequestId".equals(fieldName)) {
                    clientRequestId = reader.getString();
                } else if ("requestId".equals(fieldName)) {
                    requestId = reader.getString();
                } else if ("contentType".equals(fieldName)) {
                    contentType = reader.getString();
                } else if ("blobType".equals(fieldName)) {
                    blobType = reader.getString();
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("sequencer".equals(fieldName)) {
                    sequencer = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    identity = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            StorageBlobDeletedEventData deserializedStorageBlobDeletedEventData
                = new StorageBlobDeletedEventData(storageDiagnostics);
            deserializedStorageBlobDeletedEventData.api = api;
            deserializedStorageBlobDeletedEventData.clientRequestId = clientRequestId;
            deserializedStorageBlobDeletedEventData.requestId = requestId;
            deserializedStorageBlobDeletedEventData.contentType = contentType;
            deserializedStorageBlobDeletedEventData.blobType = blobType;
            deserializedStorageBlobDeletedEventData.url = url;
            deserializedStorageBlobDeletedEventData.sequencer = sequencer;
            deserializedStorageBlobDeletedEventData.identity = identity;

            return deserializedStorageBlobDeletedEventData;
        });
    }
}
