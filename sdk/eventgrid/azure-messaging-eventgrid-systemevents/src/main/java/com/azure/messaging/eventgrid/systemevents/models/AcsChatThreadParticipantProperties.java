// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the chat thread participant.
 */
@Immutable
public final class AcsChatThreadParticipantProperties implements JsonSerializable<AcsChatThreadParticipantProperties> {
    /*
     * The name of the user
     */
    @Generated
    private String displayName;

    /*
     * The communication identifier of the user
     */
    @Generated
    private CommunicationIdentifierModel participantCommunicationIdentifier;

    /**
     * Creates an instance of AcsChatThreadParticipantProperties class.
     */
    @Generated
    private AcsChatThreadParticipantProperties() {
    }

    /**
     * Get the displayName property: The name of the user.
     * 
     * @return the displayName value.
     */
    @Generated
    public String getDisplayName() {
        return this.displayName;
    }

    /**
     * Get the participantCommunicationIdentifier property: The communication identifier of the user.
     * 
     * @return the participantCommunicationIdentifier value.
     */
    @Generated
    public CommunicationIdentifierModel getParticipantCommunicationIdentifier() {
        return this.participantCommunicationIdentifier;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeJsonField("participantCommunicationIdentifier", this.participantCommunicationIdentifier);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsChatThreadParticipantProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsChatThreadParticipantProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AcsChatThreadParticipantProperties.
     */
    @Generated
    public static AcsChatThreadParticipantProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsChatThreadParticipantProperties deserializedAcsChatThreadParticipantProperties
                = new AcsChatThreadParticipantProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedAcsChatThreadParticipantProperties.displayName = reader.getString();
                } else if ("participantCommunicationIdentifier".equals(fieldName)) {
                    deserializedAcsChatThreadParticipantProperties.participantCommunicationIdentifier
                        = CommunicationIdentifierModel.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAcsChatThreadParticipantProperties;
        });
    }
}
