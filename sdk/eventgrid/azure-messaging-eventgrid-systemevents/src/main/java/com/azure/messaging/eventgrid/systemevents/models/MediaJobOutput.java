// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The event data for a Job output.
 */
@Immutable
public class MediaJobOutput implements JsonSerializable<MediaJobOutput> {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String oDataType;

    /*
     * Gets the Job output error.
     */
    @Generated
    private MediaJobError error;

    /*
     * Gets the Job output label.
     */
    @Generated
    private String label;

    /*
     * Gets the Job output progress.
     */
    @Generated
    private final long progress;

    /*
     * Gets the Job output state.
     */
    @Generated
    private final MediaJobState state;

    /**
     * Creates an instance of MediaJobOutput class.
     * 
     * @param progress the progress value to set.
     * @param state the state value to set.
     */
    @Generated
    protected MediaJobOutput(long progress, MediaJobState state) {
        this.oDataType = "MediaJobOutput";
        this.progress = progress;
        this.state = state;
    }

    /**
     * Get the oDataType property: The discriminator for derived types.
     * 
     * @return the oDataType value.
     */
    @Generated
    public String getODataType() {
        return this.oDataType;
    }

    /**
     * Set the oDataType property: The discriminator for derived types.
     * 
     * @param oDataType the oDataType value to set.
     * @return the MediaJobOutput object itself.
     */
    MediaJobOutput setODataType(String oDataType) {
        this.oDataType = oDataType;
        return this;
    }

    /**
     * Get the error property: Gets the Job output error.
     * 
     * @return the error value.
     */
    @Generated
    public MediaJobError getError() {
        return this.error;
    }

    /**
     * Set the error property: Gets the Job output error.
     * 
     * @param error the error value to set.
     * @return the MediaJobOutput object itself.
     */
    MediaJobOutput setError(MediaJobError error) {
        this.error = error;
        return this;
    }

    /**
     * Get the label property: Gets the Job output label.
     * 
     * @return the label value.
     */
    @Generated
    public String getLabel() {
        return this.label;
    }

    /**
     * Set the label property: Gets the Job output label.
     * 
     * @param label the label value to set.
     * @return the MediaJobOutput object itself.
     */
    MediaJobOutput setLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the progress property: Gets the Job output progress.
     * 
     * @return the progress value.
     */
    @Generated
    public long getProgress() {
        return this.progress;
    }

    /**
     * Get the state property: Gets the Job output state.
     * 
     * @return the state value.
     */
    @Generated
    public MediaJobState getState() {
        return this.state;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("progress", this.progress);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("oDataType", this.oDataType);
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("label", this.label);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaJobOutput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaJobOutput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaJobOutput.
     */
    @Generated
    public static MediaJobOutput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("oDataType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("#Microsoft.Media.JobOutputAsset".equals(discriminatorValue)) {
                    return MediaJobOutputAsset.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    @Generated
    static MediaJobOutput fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long progress = 0L;
            MediaJobState state = null;
            String oDataType = null;
            MediaJobError error = null;
            String label = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("progress".equals(fieldName)) {
                    progress = reader.getLong();
                } else if ("state".equals(fieldName)) {
                    state = MediaJobState.fromString(reader.getString());
                } else if ("oDataType".equals(fieldName)) {
                    oDataType = reader.getString();
                } else if ("error".equals(fieldName)) {
                    error = MediaJobError.fromJson(reader);
                } else if ("label".equals(fieldName)) {
                    label = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MediaJobOutput deserializedMediaJobOutput = new MediaJobOutput(progress, state);
            deserializedMediaJobOutput.oDataType = oDataType;
            deserializedMediaJobOutput.error = error;
            deserializedMediaJobOutput.label = label;

            return deserializedMediaJobOutput;
        });
    }
}
