// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ServiceBus.DeadletterMessagesAvailableWithNoListeners event.
 */
@Immutable
public final class ServiceBusDeadletterMessagesAvailableWithNoListenersEventData
    implements JsonSerializable<ServiceBusDeadletterMessagesAvailableWithNoListenersEventData> {
    /*
     * The namespace name of the Microsoft.ServiceBus resource.
     */
    @Generated
    private final String namespaceName;

    /*
     * The endpoint of the Microsoft.ServiceBus resource.
     */
    @Generated
    private final String requestUri;

    /*
     * The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or 'subscriber'.
     */
    @Generated
    private final String entityType;

    /*
     * The name of the Microsoft.ServiceBus queue. If the entity type is of type 'subscriber', then this value will be
     * null.
     */
    @Generated
    private final String queueName;

    /*
     * The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue', then this value will be null.
     */
    @Generated
    private final String topicName;

    /*
     * The name of the Microsoft.ServiceBus topic's subscription. If the entity type is of type 'queue', then this value
     * will be null.
     */
    @Generated
    private final String subscriptionName;

    /**
     * Creates an instance of ServiceBusDeadletterMessagesAvailableWithNoListenersEventData class.
     * 
     * @param namespaceName the namespaceName value to set.
     * @param requestUri the requestUri value to set.
     * @param entityType the entityType value to set.
     * @param queueName the queueName value to set.
     * @param topicName the topicName value to set.
     * @param subscriptionName the subscriptionName value to set.
     */
    @Generated
    private ServiceBusDeadletterMessagesAvailableWithNoListenersEventData(String namespaceName, String requestUri,
        String entityType, String queueName, String topicName, String subscriptionName) {
        this.namespaceName = namespaceName;
        this.requestUri = requestUri;
        this.entityType = entityType;
        this.queueName = queueName;
        this.topicName = topicName;
        this.subscriptionName = subscriptionName;
    }

    /**
     * Get the namespaceName property: The namespace name of the Microsoft.ServiceBus resource.
     * 
     * @return the namespaceName value.
     */
    @Generated
    public String getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Get the requestUri property: The endpoint of the Microsoft.ServiceBus resource.
     * 
     * @return the requestUri value.
     */
    @Generated
    public String getRequestUri() {
        return this.requestUri;
    }

    /**
     * Get the entityType property: The entity type of the Microsoft.ServiceBus resource. Could be one of 'queue' or
     * 'subscriber'.
     * 
     * @return the entityType value.
     */
    @Generated
    public String getEntityType() {
        return this.entityType;
    }

    /**
     * Get the queueName property: The name of the Microsoft.ServiceBus queue. If the entity type is of type
     * 'subscriber', then this value will be null.
     * 
     * @return the queueName value.
     */
    @Generated
    public String getQueueName() {
        return this.queueName;
    }

    /**
     * Get the topicName property: The name of the Microsoft.ServiceBus topic. If the entity type is of type 'queue',
     * then this value will be null.
     * 
     * @return the topicName value.
     */
    @Generated
    public String getTopicName() {
        return this.topicName;
    }

    /**
     * Get the subscriptionName property: The name of the Microsoft.ServiceBus topic's subscription. If the entity type
     * is of type 'queue', then this value will be null.
     * 
     * @return the subscriptionName value.
     */
    @Generated
    public String getSubscriptionName() {
        return this.subscriptionName;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("namespaceName", this.namespaceName);
        jsonWriter.writeStringField("requestUri", this.requestUri);
        jsonWriter.writeStringField("entityType", this.entityType);
        jsonWriter.writeStringField("queueName", this.queueName);
        jsonWriter.writeStringField("topicName", this.topicName);
        jsonWriter.writeStringField("subscriptionName", this.subscriptionName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServiceBusDeadletterMessagesAvailableWithNoListenersEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServiceBusDeadletterMessagesAvailableWithNoListenersEventData if the JsonReader was
     * pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the
     * ServiceBusDeadletterMessagesAvailableWithNoListenersEventData.
     */
    @Generated
    public static ServiceBusDeadletterMessagesAvailableWithNoListenersEventData fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            String namespaceName = null;
            String requestUri = null;
            String entityType = null;
            String queueName = null;
            String topicName = null;
            String subscriptionName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("namespaceName".equals(fieldName)) {
                    namespaceName = reader.getString();
                } else if ("requestUri".equals(fieldName)) {
                    requestUri = reader.getString();
                } else if ("entityType".equals(fieldName)) {
                    entityType = reader.getString();
                } else if ("queueName".equals(fieldName)) {
                    queueName = reader.getString();
                } else if ("topicName".equals(fieldName)) {
                    topicName = reader.getString();
                } else if ("subscriptionName".equals(fieldName)) {
                    subscriptionName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new ServiceBusDeadletterMessagesAvailableWithNoListenersEventData(namespaceName, requestUri,
                entityType, queueName, topicName, subscriptionName);
        });
    }
}
