// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Information related to the circuit breaker configured on the backend.
 */
@Immutable
public final class ApiManagementCircuitBreakerProperties
    implements JsonSerializable<ApiManagementCircuitBreakerProperties> {
    /*
     * Overview of all configured rules and respective details.
     */
    @Generated
    private final Map<String, Map<String, BinaryData>> rules;

    /**
     * Creates an instance of ApiManagementCircuitBreakerProperties class.
     * 
     * @param rules the rules value to set.
     */
    @Generated
    private ApiManagementCircuitBreakerProperties(Map<String, Map<String, BinaryData>> rules) {
        this.rules = rules;
    }

    /**
     * Get the rules property: Overview of all configured rules and respective details.
     * 
     * @return the rules value.
     */
    @Generated
    public Map<String, Map<String, BinaryData>> getRules() {
        return this.rules;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("rules", this.rules, (writer, element) -> writer.writeMap(element,
            (writer1, element1) -> writer1.writeUntyped(element1 == null ? null : element1.toObject(Object.class))));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ApiManagementCircuitBreakerProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ApiManagementCircuitBreakerProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ApiManagementCircuitBreakerProperties.
     */
    @Generated
    public static ApiManagementCircuitBreakerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, Map<String, BinaryData>> rules = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rules".equals(fieldName)) {
                    rules = reader.readMap(reader1 -> reader1.readMap(reader2 -> reader2
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()))));
                } else {
                    reader.skipChildren();
                }
            }
            return new ApiManagementCircuitBreakerProperties(rules);
        });
    }
}
