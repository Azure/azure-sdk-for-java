// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.SMSReceived event.
 */
@Immutable
public final class AcsSmsReceivedEventData extends AcsSmsEventBaseProperties {
    /*
     * The SMS content
     */
    @Generated
    private String message;

    /*
     * The time at which the SMS was received
     */
    @Generated
    private final OffsetDateTime receivedTimestamp;

    /*
     * Number of segments in the message
     */
    @Generated
    private final int segmentCount;

    /*
     * The identity of SMS message receiver
     */
    @Generated
    private String to;

    /*
     * The identity of SMS message sender
     */
    @Generated
    private String from;

    /*
     * The identity of the SMS message
     */
    @Generated
    private String messageId;

    /**
     * Creates an instance of AcsSmsReceivedEventData class.
     * 
     * @param receivedTimestamp the receivedTimestamp value to set.
     * @param segmentCount the segmentCount value to set.
     */
    @Generated
    private AcsSmsReceivedEventData(OffsetDateTime receivedTimestamp, int segmentCount) {
        this.receivedTimestamp = receivedTimestamp;
        this.segmentCount = segmentCount;
    }

    /**
     * Get the message property: The SMS content.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * Get the receivedTimestamp property: The time at which the SMS was received.
     * 
     * @return the receivedTimestamp value.
     */
    @Generated
    public OffsetDateTime getReceivedTimestamp() {
        return this.receivedTimestamp;
    }

    /**
     * Get the segmentCount property: Number of segments in the message.
     * 
     * @return the segmentCount value.
     */
    @Generated
    public int getSegmentCount() {
        return this.segmentCount;
    }

    /**
     * Get the to property: The identity of SMS message receiver.
     * 
     * @return the to value.
     */
    @Generated
    @Override
    public String getTo() {
        return this.to;
    }

    /**
     * Get the from property: The identity of SMS message sender.
     * 
     * @return the from value.
     */
    @Generated
    @Override
    public String getFrom() {
        return this.from;
    }

    /**
     * Get the messageId property: The identity of the SMS message.
     * 
     * @return the messageId value.
     */
    @Generated
    @Override
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageId", getMessageId());
        jsonWriter.writeStringField("from", getFrom());
        jsonWriter.writeStringField("to", getTo());
        jsonWriter.writeStringField("receivedTimestamp",
            this.receivedTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.receivedTimestamp));
        jsonWriter.writeIntField("segmentCount", this.segmentCount);
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsSmsReceivedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsSmsReceivedEventData if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsSmsReceivedEventData.
     */
    @Generated
    public static AcsSmsReceivedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String messageId = null;
            String from = null;
            String to = null;
            OffsetDateTime receivedTimestamp = null;
            int segmentCount = 0;
            String message = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("from".equals(fieldName)) {
                    from = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else if ("receivedTimestamp".equals(fieldName)) {
                    receivedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("segmentCount".equals(fieldName)) {
                    segmentCount = reader.getInt();
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsSmsReceivedEventData deserializedAcsSmsReceivedEventData
                = new AcsSmsReceivedEventData(receivedTimestamp, segmentCount);
            deserializedAcsSmsReceivedEventData.messageId = messageId;
            deserializedAcsSmsReceivedEventData.from = from;
            deserializedAcsSmsReceivedEventData.to = to;
            deserializedAcsSmsReceivedEventData.message = message;

            return deserializedAcsSmsReceivedEventData;
        });
    }
}
