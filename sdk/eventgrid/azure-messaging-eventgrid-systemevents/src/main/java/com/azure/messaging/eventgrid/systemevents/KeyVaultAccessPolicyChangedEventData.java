// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.KeyVault.VaultAccessPolicyChanged event.
 */
@Immutable
public final class KeyVaultAccessPolicyChangedEventData
    implements JsonSerializable<KeyVaultAccessPolicyChangedEventData> {
    /*
     * The id of the object that triggered this event.
     */
    @Generated
    private final String id;

    /*
     * Key vault name of the object that triggered this event.
     */
    @Generated
    private final String vaultName;

    /*
     * The type of the object that triggered this event
     */
    @Generated
    private final String objectType;

    /*
     * The name of the object that triggered this event
     */
    @Generated
    private final String objectName;

    /*
     * The version of the object that triggered this event
     */
    @Generated
    private final String version;

    /*
     * Not before date of the object that triggered this event
     */
    @Generated
    private final double nbf;

    /*
     * The expiration date of the object that triggered this event
     */
    @Generated
    private final double exp;

    /**
     * Creates an instance of KeyVaultAccessPolicyChangedEventData class.
     * 
     * @param id the id value to set.
     * @param vaultName the vaultName value to set.
     * @param objectType the objectType value to set.
     * @param objectName the objectName value to set.
     * @param version the version value to set.
     * @param nbf the nbf value to set.
     * @param exp the exp value to set.
     */
    @Generated
    private KeyVaultAccessPolicyChangedEventData(String id, String vaultName, String objectType, String objectName,
        String version, double nbf, double exp) {
        this.id = id;
        this.vaultName = vaultName;
        this.objectType = objectType;
        this.objectName = objectName;
        this.version = version;
        this.nbf = nbf;
        this.exp = exp;
    }

    /**
     * Get the id property: The id of the object that triggered this event.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the vaultName property: Key vault name of the object that triggered this event.
     * 
     * @return the vaultName value.
     */
    @Generated
    public String getVaultName() {
        return this.vaultName;
    }

    /**
     * Get the objectType property: The type of the object that triggered this event.
     * 
     * @return the objectType value.
     */
    @Generated
    public String getObjectType() {
        return this.objectType;
    }

    /**
     * Get the objectName property: The name of the object that triggered this event.
     * 
     * @return the objectName value.
     */
    @Generated
    public String getObjectName() {
        return this.objectName;
    }

    /**
     * Get the version property: The version of the object that triggered this event.
     * 
     * @return the version value.
     */
    @Generated
    public String getVersion() {
        return this.version;
    }

    /**
     * Get the nbf property: Not before date of the object that triggered this event.
     * 
     * @return the nbf value.
     */
    @Generated
    public double getNbf() {
        return this.nbf;
    }

    /**
     * Get the exp property: The expiration date of the object that triggered this event.
     * 
     * @return the exp value.
     */
    @Generated
    public double getExp() {
        return this.exp;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("Id", this.id);
        jsonWriter.writeStringField("VaultName", this.vaultName);
        jsonWriter.writeStringField("ObjectType", this.objectType);
        jsonWriter.writeStringField("ObjectName", this.objectName);
        jsonWriter.writeStringField("Version", this.version);
        jsonWriter.writeDoubleField("NBF", this.nbf);
        jsonWriter.writeDoubleField("EXP", this.exp);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of KeyVaultAccessPolicyChangedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of KeyVaultAccessPolicyChangedEventData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the KeyVaultAccessPolicyChangedEventData.
     */
    @Generated
    public static KeyVaultAccessPolicyChangedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String vaultName = null;
            String objectType = null;
            String objectName = null;
            String version = null;
            double nbf = 0.0;
            double exp = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("Id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("VaultName".equals(fieldName)) {
                    vaultName = reader.getString();
                } else if ("ObjectType".equals(fieldName)) {
                    objectType = reader.getString();
                } else if ("ObjectName".equals(fieldName)) {
                    objectName = reader.getString();
                } else if ("Version".equals(fieldName)) {
                    version = reader.getString();
                } else if ("NBF".equals(fieldName)) {
                    nbf = reader.getDouble();
                } else if ("EXP".equals(fieldName)) {
                    exp = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new KeyVaultAccessPolicyChangedEventData(id, vaultName, objectType, objectName, version, nbf, exp);
        });
    }
}
