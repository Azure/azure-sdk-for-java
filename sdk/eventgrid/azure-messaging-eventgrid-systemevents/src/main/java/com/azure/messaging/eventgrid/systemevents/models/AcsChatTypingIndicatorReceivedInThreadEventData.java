// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatTypingIndicatorReceivedInThread
 * event.
 */
@Immutable
public final class AcsChatTypingIndicatorReceivedInThreadEventData extends AcsChatMessageEventInThreadBaseProperties {

    /*
     * The body of the chat message
     */
    @Generated
    private final String messageBody;

    /*
     * The chat message metadata
     */
    @Generated
    private Map<String, String> metadata;

    /*
     * The display name of the sender
     */
    @Generated
    private String senderDisplayName;

    /*
     * The transaction id will be used as co-relation vector
     */
    @Generated
    private String transactionId;

    /**
     * Creates an instance of AcsChatTypingIndicatorReceivedInThreadEventData class.
     *
     * @param threadId the threadId value to set.
     * @param messageId the messageId value to set.
     * @param senderCommunicationIdentifier the senderCommunicationIdentifier value to set.
     * @param composeTime the composeTime value to set.
     * @param type the type value to set.
     * @param version the version value to set.
     * @param messageBody the messageBody value to set.
     */
    @Generated
    private AcsChatTypingIndicatorReceivedInThreadEventData(String threadId, String messageId,
        CommunicationIdentifierModel senderCommunicationIdentifier, OffsetDateTime composeTime, String type,
        long version, String messageBody) {
        super(threadId, messageId, senderCommunicationIdentifier, composeTime, type, version);
        this.messageBody = messageBody;
    }

    /**
     * Get the messageBody property: The body of the chat message.
     *
     * @return the messageBody value.
     */
    @Generated
    public String getMessageBody() {
        return this.messageBody;
    }

    /**
     * Get the metadata property: The chat message metadata.
     *
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the senderDisplayName property: The display name of the sender.
     *
     * @return the senderDisplayName value.
     */
    @Generated
    @Override
    public String getSenderDisplayName() {
        return this.senderDisplayName;
    }

    /**
     * Get the transactionId property: The transaction id will be used as co-relation vector.
     *
     * @return the transactionId value.
     */
    @Generated
    @Override
    public String getTransactionId() {
        return this.transactionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("threadId", getThreadId());
        jsonWriter.writeStringField("messageId", getMessageId());
        jsonWriter.writeJsonField("senderCommunicationIdentifier", getSenderCommunicationIdentifier());
        jsonWriter.writeStringField("composeTime",
            getComposeTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getComposeTime()));
        jsonWriter.writeStringField("type", getType());
        jsonWriter.writeLongField("version", getVersion());
        jsonWriter.writeStringField("transactionId", getTransactionId());
        jsonWriter.writeStringField("senderDisplayName", getSenderDisplayName());
        jsonWriter.writeStringField("messageBody", this.messageBody);
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsChatTypingIndicatorReceivedInThreadEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsChatTypingIndicatorReceivedInThreadEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsChatTypingIndicatorReceivedInThreadEventData.
     */
    @Generated
    public static AcsChatTypingIndicatorReceivedInThreadEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String threadId = null;
            String messageId = null;
            CommunicationIdentifierModel senderCommunicationIdentifier = null;
            OffsetDateTime composeTime = null;
            String type = null;
            long version = 0L;
            String transactionId = null;
            String senderDisplayName = null;
            String messageBody = null;
            Map<String, String> metadata = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("threadId".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("senderCommunicationIdentifier".equals(fieldName)) {
                    senderCommunicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("composeTime".equals(fieldName)) {
                    composeTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getLong();
                } else if ("transactionId".equals(fieldName)) {
                    transactionId = reader.getString();
                } else if ("senderDisplayName".equals(fieldName)) {
                    senderDisplayName = reader.getString();
                } else if ("messageBody".equals(fieldName)) {
                    messageBody = reader.getString();
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AcsChatTypingIndicatorReceivedInThreadEventData deserializedAcsChatTypingIndicatorReceivedInThreadEventData
                = new AcsChatTypingIndicatorReceivedInThreadEventData(threadId, messageId,
                    senderCommunicationIdentifier, composeTime, type, version, messageBody);
            deserializedAcsChatTypingIndicatorReceivedInThreadEventData.transactionId = transactionId;
            deserializedAcsChatTypingIndicatorReceivedInThreadEventData.senderDisplayName = senderDisplayName;
            deserializedAcsChatTypingIndicatorReceivedInThreadEventData.metadata = metadata;
            return deserializedAcsChatTypingIndicatorReceivedInThreadEventData;
        });
    }
}
