// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerOfferAccepted event.
 */
@Immutable
public final class AcsRouterWorkerOfferAcceptedEventData extends AcsRouterWorkerEventData {
    /*
     * Router Worker Offer Accepted Queue Id
     */
    @Generated
    private String queueId;

    /*
     * Router Worker Offer Accepted Offer Id
     */
    @Generated
    private String offerId;

    /*
     * Router Worker Offer Accepted Assignment Id
     */
    @Generated
    private String assignmentId;

    /*
     * Router Worker Offer Accepted Job Priority
     */
    @Generated
    private Integer jobPriority;

    /*
     * Router Worker Offer Accepted Worker Labels
     */
    @Generated
    private Map<String, String> workerLabels;

    /*
     * Router Worker Offer Accepted Worker Tags
     */
    @Generated
    private Map<String, String> workerTags;

    /*
     * Router Worker Offer Accepted Job Labels
     */
    @Generated
    private Map<String, String> jobLabels;

    /*
     * Router Worker Offer Accepted Job Tags
     */
    @Generated
    private Map<String, String> jobTags;

    /**
     * Creates an instance of AcsRouterWorkerOfferAcceptedEventData class.
     */
    @Generated
    private AcsRouterWorkerOfferAcceptedEventData() {
    }

    /**
     * Get the queueId property: Router Worker Offer Accepted Queue Id.
     * 
     * @return the queueId value.
     */
    @Generated
    public String getQueueId() {
        return this.queueId;
    }

    /**
     * Get the offerId property: Router Worker Offer Accepted Offer Id.
     * 
     * @return the offerId value.
     */
    @Generated
    public String getOfferId() {
        return this.offerId;
    }

    /**
     * Get the assignmentId property: Router Worker Offer Accepted Assignment Id.
     * 
     * @return the assignmentId value.
     */
    @Generated
    public String getAssignmentId() {
        return this.assignmentId;
    }

    /**
     * Get the jobPriority property: Router Worker Offer Accepted Job Priority.
     * 
     * @return the jobPriority value.
     */
    @Generated
    public Integer getJobPriority() {
        return this.jobPriority;
    }

    /**
     * Get the workerLabels property: Router Worker Offer Accepted Worker Labels.
     * 
     * @return the workerLabels value.
     */
    @Generated
    public Map<String, String> getWorkerLabels() {
        return this.workerLabels;
    }

    /**
     * Get the workerTags property: Router Worker Offer Accepted Worker Tags.
     * 
     * @return the workerTags value.
     */
    @Generated
    public Map<String, String> getWorkerTags() {
        return this.workerTags;
    }

    /**
     * Get the jobLabels property: Router Worker Offer Accepted Job Labels.
     * 
     * @return the jobLabels value.
     */
    @Generated
    public Map<String, String> getJobLabels() {
        return this.jobLabels;
    }

    /**
     * Get the jobTags property: Router Worker Offer Accepted Job Tags.
     * 
     * @return the jobTags value.
     */
    @Generated
    public Map<String, String> getJobTags() {
        return this.jobTags;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("jobId", getJobId());
        jsonWriter.writeStringField("channelReference", getChannelReference());
        jsonWriter.writeStringField("channelId", getChannelId());
        jsonWriter.writeStringField("workerId", getWorkerId());
        jsonWriter.writeStringField("queueId", this.queueId);
        jsonWriter.writeStringField("offerId", this.offerId);
        jsonWriter.writeStringField("assignmentId", this.assignmentId);
        jsonWriter.writeNumberField("jobPriority", this.jobPriority);
        jsonWriter.writeMapField("workerLabels", this.workerLabels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("workerTags", this.workerTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("jobLabels", this.jobLabels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("jobTags", this.jobTags, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRouterWorkerOfferAcceptedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRouterWorkerOfferAcceptedEventData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AcsRouterWorkerOfferAcceptedEventData.
     */
    @Generated
    public static AcsRouterWorkerOfferAcceptedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsRouterWorkerOfferAcceptedEventData deserializedAcsRouterWorkerOfferAcceptedEventData
                = new AcsRouterWorkerOfferAcceptedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobId".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.setJobId(reader.getString());
                } else if ("channelReference".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.setChannelReference(reader.getString());
                } else if ("channelId".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.setChannelId(reader.getString());
                } else if ("workerId".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.setWorkerId(reader.getString());
                } else if ("queueId".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.queueId = reader.getString();
                } else if ("offerId".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.offerId = reader.getString();
                } else if ("assignmentId".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.assignmentId = reader.getString();
                } else if ("jobPriority".equals(fieldName)) {
                    deserializedAcsRouterWorkerOfferAcceptedEventData.jobPriority
                        = reader.getNullable(JsonReader::getInt);
                } else if ("workerLabels".equals(fieldName)) {
                    Map<String, String> workerLabels = reader.readMap(reader1 -> reader1.getString());
                    deserializedAcsRouterWorkerOfferAcceptedEventData.workerLabels = workerLabels;
                } else if ("workerTags".equals(fieldName)) {
                    Map<String, String> workerTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAcsRouterWorkerOfferAcceptedEventData.workerTags = workerTags;
                } else if ("jobLabels".equals(fieldName)) {
                    Map<String, String> jobLabels = reader.readMap(reader1 -> reader1.getString());
                    deserializedAcsRouterWorkerOfferAcceptedEventData.jobLabels = jobLabels;
                } else if ("jobTags".equals(fieldName)) {
                    Map<String, String> jobTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedAcsRouterWorkerOfferAcceptedEventData.jobTags = jobTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAcsRouterWorkerOfferAcceptedEventData;
        });
    }
}
