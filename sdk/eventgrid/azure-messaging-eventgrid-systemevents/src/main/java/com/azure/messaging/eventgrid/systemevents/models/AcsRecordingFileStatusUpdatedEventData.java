// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RecordingFileStatusUpdated event.
 */
@Immutable
public final class AcsRecordingFileStatusUpdatedEventData
    implements JsonSerializable<AcsRecordingFileStatusUpdatedEventData> {
    /*
     * The details of recording storage information
     */
    @Generated
    private AcsRecordingStorageInfoProperties recordingStorageInfo;

    /*
     * The time at which the recording started
     */
    @Generated
    private OffsetDateTime recordingStartTime;

    /*
     * The recording duration in milliseconds
     */
    @Generated
    private Long recordingDurationMs;

    /*
     * The recording content type- AudioVideo, or Audio
     */
    @Generated
    private RecordingContentType recordingContentType;

    /*
     * The recording channel type - Mixed, Unmixed
     */
    @Generated
    private RecordingChannelType recordingChannelType;

    /*
     * The recording format type - Mp4, Mp3, Wav
     */
    @Generated
    private RecordingFormatType recordingFormatType;

    /*
     * The reason for ending recording session
     */
    @Generated
    private String sessionEndReason;

    /**
     * Creates an instance of AcsRecordingFileStatusUpdatedEventData class.
     */
    @Generated
    private AcsRecordingFileStatusUpdatedEventData() {
    }

    /**
     * Get the recordingStorageInfo property: The details of recording storage information.
     * 
     * @return the recordingStorageInfo value.
     */
    @Generated
    public AcsRecordingStorageInfoProperties getRecordingStorageInfo() {
        return this.recordingStorageInfo;
    }

    /**
     * Get the recordingStartTime property: The time at which the recording started.
     * 
     * @return the recordingStartTime value.
     */
    @Generated
    public OffsetDateTime getRecordingStartTime() {
        return this.recordingStartTime;
    }

    /**
     * Get the recordingDurationMs property: The recording duration in milliseconds.
     * 
     * @return the recordingDurationMs value.
     */
    @Generated
    public Long getRecordingDurationMs() {
        return this.recordingDurationMs;
    }

    /**
     * Get the recordingContentType property: The recording content type- AudioVideo, or Audio.
     * 
     * @return the recordingContentType value.
     */
    @Generated
    public RecordingContentType getRecordingContentType() {
        return this.recordingContentType;
    }

    /**
     * Get the recordingChannelType property: The recording channel type - Mixed, Unmixed.
     * 
     * @return the recordingChannelType value.
     */
    @Generated
    public RecordingChannelType getRecordingChannelType() {
        return this.recordingChannelType;
    }

    /**
     * Get the recordingFormatType property: The recording format type - Mp4, Mp3, Wav.
     * 
     * @return the recordingFormatType value.
     */
    @Generated
    public RecordingFormatType getRecordingFormatType() {
        return this.recordingFormatType;
    }

    /**
     * Get the sessionEndReason property: The reason for ending recording session.
     * 
     * @return the sessionEndReason value.
     */
    @Generated
    public String getSessionEndReason() {
        return this.sessionEndReason;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recordingStorageInfo", this.recordingStorageInfo);
        jsonWriter.writeStringField("recordingStartTime", this.recordingStartTime == null ? null
            : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.recordingStartTime));
        jsonWriter.writeNumberField("recordingDurationMs", this.recordingDurationMs);
        jsonWriter.writeStringField("recordingContentType",
            this.recordingContentType == null ? null : this.recordingContentType.toString());
        jsonWriter.writeStringField("recordingChannelType",
            this.recordingChannelType == null ? null : this.recordingChannelType.toString());
        jsonWriter.writeStringField("recordingFormatType",
            this.recordingFormatType == null ? null : this.recordingFormatType.toString());
        jsonWriter.writeStringField("sessionEndReason", this.sessionEndReason);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRecordingFileStatusUpdatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRecordingFileStatusUpdatedEventData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AcsRecordingFileStatusUpdatedEventData.
     */
    @Generated
    public static AcsRecordingFileStatusUpdatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsRecordingFileStatusUpdatedEventData deserializedAcsRecordingFileStatusUpdatedEventData
                = new AcsRecordingFileStatusUpdatedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recordingStorageInfo".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.recordingStorageInfo
                        = AcsRecordingStorageInfoProperties.fromJson(reader);
                } else if ("recordingStartTime".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.recordingStartTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("recordingDurationMs".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.recordingDurationMs
                        = reader.getNullable(JsonReader::getLong);
                } else if ("recordingContentType".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.recordingContentType
                        = RecordingContentType.fromString(reader.getString());
                } else if ("recordingChannelType".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.recordingChannelType
                        = RecordingChannelType.fromString(reader.getString());
                } else if ("recordingFormatType".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.recordingFormatType
                        = RecordingFormatType.fromString(reader.getString());
                } else if ("sessionEndReason".equals(fieldName)) {
                    deserializedAcsRecordingFileStatusUpdatedEventData.sessionEndReason = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAcsRecordingFileStatusUpdatedEventData;
        });
    }
}
