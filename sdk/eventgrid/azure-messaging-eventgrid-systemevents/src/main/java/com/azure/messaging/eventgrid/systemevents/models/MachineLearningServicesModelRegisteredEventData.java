// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.ModelRegistered event.
 */
@Immutable
public final class MachineLearningServicesModelRegisteredEventData
    implements JsonSerializable<MachineLearningServicesModelRegisteredEventData> {
    /*
     * The name of the model that was registered.
     */
    @Generated
    private String modelName;

    /*
     * The version of the model that was registered.
     */
    @Generated
    private String modelVersion;

    /*
     * The tags of the model that was registered.
     */
    @Generated
    private Map<String, String> modelTags;

    /*
     * The properties of the model that was registered.
     */
    @Generated
    private Map<String, String> modelProperties;

    /**
     * Creates an instance of MachineLearningServicesModelRegisteredEventData class.
     */
    @Generated
    private MachineLearningServicesModelRegisteredEventData() {
    }

    /**
     * Get the modelName property: The name of the model that was registered.
     * 
     * @return the modelName value.
     */
    @Generated
    public String getModelName() {
        return this.modelName;
    }

    /**
     * Get the modelVersion property: The version of the model that was registered.
     * 
     * @return the modelVersion value.
     */
    @Generated
    public String getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Get the modelTags property: The tags of the model that was registered.
     * 
     * @return the modelTags value.
     */
    @Generated
    public Map<String, String> getModelTags() {
        return this.modelTags;
    }

    /**
     * Get the modelProperties property: The properties of the model that was registered.
     * 
     * @return the modelProperties value.
     */
    @Generated
    public Map<String, String> getModelProperties() {
        return this.modelProperties;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("modelName", this.modelName);
        jsonWriter.writeStringField("modelVersion", this.modelVersion);
        jsonWriter.writeMapField("modelTags", this.modelTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("modelProperties", this.modelProperties,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineLearningServicesModelRegisteredEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineLearningServicesModelRegisteredEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineLearningServicesModelRegisteredEventData.
     */
    @Generated
    public static MachineLearningServicesModelRegisteredEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineLearningServicesModelRegisteredEventData deserializedMachineLearningServicesModelRegisteredEventData
                = new MachineLearningServicesModelRegisteredEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("modelName".equals(fieldName)) {
                    deserializedMachineLearningServicesModelRegisteredEventData.modelName = reader.getString();
                } else if ("modelVersion".equals(fieldName)) {
                    deserializedMachineLearningServicesModelRegisteredEventData.modelVersion = reader.getString();
                } else if ("modelTags".equals(fieldName)) {
                    Map<String, String> modelTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedMachineLearningServicesModelRegisteredEventData.modelTags = modelTags;
                } else if ("modelProperties".equals(fieldName)) {
                    Map<String, String> modelProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedMachineLearningServicesModelRegisteredEventData.modelProperties = modelProperties;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineLearningServicesModelRegisteredEventData;
        });
    }
}
