// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Job Output Progress Event Data. Schema of the Data property of an
 * EventGridEvent for a Microsoft.Media.JobOutputProgress event.
 */
@Immutable
public final class MediaJobOutputProgressEventData implements JsonSerializable<MediaJobOutputProgressEventData> {
    /*
     * Gets the Job output label.
     */
    @Generated
    private String label;

    /*
     * Gets the Job output progress.
     */
    @Generated
    private Long progress;

    /*
     * Gets the Job correlation data.
     */
    @Generated
    private final Map<String, String> jobCorrelationData;

    /**
     * Creates an instance of MediaJobOutputProgressEventData class.
     * 
     * @param jobCorrelationData the jobCorrelationData value to set.
     */
    @Generated
    private MediaJobOutputProgressEventData(Map<String, String> jobCorrelationData) {
        this.jobCorrelationData = jobCorrelationData;
    }

    /**
     * Get the label property: Gets the Job output label.
     * 
     * @return the label value.
     */
    @Generated
    public String getLabel() {
        return this.label;
    }

    /**
     * Get the progress property: Gets the Job output progress.
     * 
     * @return the progress value.
     */
    @Generated
    public Long getProgress() {
        return this.progress;
    }

    /**
     * Get the jobCorrelationData property: Gets the Job correlation data.
     * 
     * @return the jobCorrelationData value.
     */
    @Generated
    public Map<String, String> getJobCorrelationData() {
        return this.jobCorrelationData;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("jobCorrelationData", this.jobCorrelationData,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("label", this.label);
        jsonWriter.writeNumberField("progress", this.progress);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaJobOutputProgressEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaJobOutputProgressEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaJobOutputProgressEventData.
     */
    @Generated
    public static MediaJobOutputProgressEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, String> jobCorrelationData = null;
            String label = null;
            Long progress = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("jobCorrelationData".equals(fieldName)) {
                    jobCorrelationData = reader.readMap(reader1 -> reader1.getString());
                } else if ("label".equals(fieldName)) {
                    label = reader.getString();
                } else if ("progress".equals(fieldName)) {
                    progress = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }
            MediaJobOutputProgressEventData deserializedMediaJobOutputProgressEventData
                = new MediaJobOutputProgressEventData(jobCorrelationData);
            deserializedMediaJobOutputProgressEventData.label = label;
            deserializedMediaJobOutputProgressEventData.progress = progress;

            return deserializedMediaJobOutputProgressEventData;
        });
    }
}
