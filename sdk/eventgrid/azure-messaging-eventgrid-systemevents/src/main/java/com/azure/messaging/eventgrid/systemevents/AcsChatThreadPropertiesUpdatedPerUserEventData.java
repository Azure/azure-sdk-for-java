// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.ChatThreadPropertiesUpdatedPerUser
 * event.
 */
@Immutable
public final class AcsChatThreadPropertiesUpdatedPerUserEventData extends AcsChatThreadEventBaseProperties {
    /*
     * The communication identifier of the user who updated the thread properties
     */
    @Generated
    private final CommunicationIdentifierModel editedByCommunicationIdentifier;

    /*
     * The time at which the properties of the thread were updated
     */
    @Generated
    private final OffsetDateTime editTime;

    /*
     * The thread metadata
     */
    @Generated
    private final Map<String, String> metadata;

    /*
     * The updated thread properties
     */
    @Generated
    private final Map<String, BinaryData> properties;

    /*
     * The version of the thread
     */
    @Generated
    private Long version;

    /*
     * The chat thread id
     */
    @Generated
    private String threadId;

    /*
     * The transaction id will be used as co-relation vector
     */
    @Generated
    private String transactionId;

    /**
     * Creates an instance of AcsChatThreadPropertiesUpdatedPerUserEventData class.
     * 
     * @param recipientCommunicationIdentifier the recipientCommunicationIdentifier value to set.
     * @param createTime the createTime value to set.
     * @param editedByCommunicationIdentifier the editedByCommunicationIdentifier value to set.
     * @param editTime the editTime value to set.
     * @param metadata the metadata value to set.
     * @param properties the properties value to set.
     */
    @Generated
    private AcsChatThreadPropertiesUpdatedPerUserEventData(
        CommunicationIdentifierModel recipientCommunicationIdentifier, OffsetDateTime createTime,
        CommunicationIdentifierModel editedByCommunicationIdentifier, OffsetDateTime editTime,
        Map<String, String> metadata, Map<String, BinaryData> properties) {
        super(recipientCommunicationIdentifier, createTime);
        this.editedByCommunicationIdentifier = editedByCommunicationIdentifier;
        this.editTime = editTime;
        this.metadata = metadata;
        this.properties = properties;
    }

    /**
     * Get the editedByCommunicationIdentifier property: The communication identifier of the user who updated the thread
     * properties.
     * 
     * @return the editedByCommunicationIdentifier value.
     */
    @Generated
    public CommunicationIdentifierModel getEditedByCommunicationIdentifier() {
        return this.editedByCommunicationIdentifier;
    }

    /**
     * Get the editTime property: The time at which the properties of the thread were updated.
     * 
     * @return the editTime value.
     */
    @Generated
    public OffsetDateTime getEditTime() {
        return this.editTime;
    }

    /**
     * Get the metadata property: The thread metadata.
     * 
     * @return the metadata value.
     */
    @Generated
    public Map<String, String> getMetadata() {
        return this.metadata;
    }

    /**
     * Get the properties property: The updated thread properties.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, BinaryData> getProperties() {
        return this.properties;
    }

    /**
     * Get the version property: The version of the thread.
     * 
     * @return the version value.
     */
    @Generated
    @Override
    public Long getVersion() {
        return this.version;
    }

    /**
     * Get the threadId property: The chat thread id.
     * 
     * @return the threadId value.
     */
    @Generated
    @Override
    public String getThreadId() {
        return this.threadId;
    }

    /**
     * Get the transactionId property: The transaction id will be used as co-relation vector.
     * 
     * @return the transactionId value.
     */
    @Generated
    @Override
    public String getTransactionId() {
        return this.transactionId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("recipientCommunicationIdentifier", getRecipientCommunicationIdentifier());
        jsonWriter.writeStringField("createTime",
            getCreateTime() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getCreateTime()));
        jsonWriter.writeStringField("transactionId", getTransactionId());
        jsonWriter.writeStringField("threadId", getThreadId());
        jsonWriter.writeNumberField("version", getVersion());
        jsonWriter.writeJsonField("editedByCommunicationIdentifier", this.editedByCommunicationIdentifier);
        jsonWriter.writeStringField("editTime",
            this.editTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.editTime));
        jsonWriter.writeMapField("metadata", this.metadata, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsChatThreadPropertiesUpdatedPerUserEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsChatThreadPropertiesUpdatedPerUserEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsChatThreadPropertiesUpdatedPerUserEventData.
     */
    @Generated
    public static AcsChatThreadPropertiesUpdatedPerUserEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CommunicationIdentifierModel recipientCommunicationIdentifier = null;
            OffsetDateTime createTime = null;
            String transactionId = null;
            String threadId = null;
            Long version = null;
            CommunicationIdentifierModel editedByCommunicationIdentifier = null;
            OffsetDateTime editTime = null;
            Map<String, String> metadata = null;
            Map<String, BinaryData> properties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recipientCommunicationIdentifier".equals(fieldName)) {
                    recipientCommunicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("createTime".equals(fieldName)) {
                    createTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("transactionId".equals(fieldName)) {
                    transactionId = reader.getString();
                } else if ("threadId".equals(fieldName)) {
                    threadId = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getNullable(JsonReader::getLong);
                } else if ("editedByCommunicationIdentifier".equals(fieldName)) {
                    editedByCommunicationIdentifier = CommunicationIdentifierModel.fromJson(reader);
                } else if ("editTime".equals(fieldName)) {
                    editTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("metadata".equals(fieldName)) {
                    metadata = reader.readMap(reader1 -> reader1.getString());
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            AcsChatThreadPropertiesUpdatedPerUserEventData deserializedAcsChatThreadPropertiesUpdatedPerUserEventData
                = new AcsChatThreadPropertiesUpdatedPerUserEventData(recipientCommunicationIdentifier, createTime,
                    editedByCommunicationIdentifier, editTime, metadata, properties);
            deserializedAcsChatThreadPropertiesUpdatedPerUserEventData.transactionId = transactionId;
            deserializedAcsChatThreadPropertiesUpdatedPerUserEventData.threadId = threadId;
            deserializedAcsChatThreadPropertiesUpdatedPerUserEventData.version = version;

            return deserializedAcsChatThreadPropertiesUpdatedPerUserEventData;
        });
    }
}
