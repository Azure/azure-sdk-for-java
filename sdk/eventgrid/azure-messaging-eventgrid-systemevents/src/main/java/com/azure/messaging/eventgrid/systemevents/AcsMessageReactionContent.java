// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Message Reaction Content.
 */
@Immutable
public final class AcsMessageReactionContent implements JsonSerializable<AcsMessageReactionContent> {
    /*
     * Required. WhatsApp message ID of the message that the emoji is applied to
     */
    @Generated
    private final String messageId;

    /*
     * Optional. Unicode escape sequence of the emoji.
     */
    @Generated
    private String emoji;

    /**
     * Creates an instance of AcsMessageReactionContent class.
     * 
     * @param messageId the messageId value to set.
     */
    @Generated
    private AcsMessageReactionContent(String messageId) {
        this.messageId = messageId;
    }

    /**
     * Get the messageId property: Required. WhatsApp message ID of the message that the emoji is applied to.
     * 
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Get the emoji property: Optional. Unicode escape sequence of the emoji.
     * 
     * @return the emoji value.
     */
    @Generated
    public String getEmoji() {
        return this.emoji;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeStringField("emoji", this.emoji);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsMessageReactionContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsMessageReactionContent if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsMessageReactionContent.
     */
    @Generated
    public static AcsMessageReactionContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String messageId = null;
            String emoji = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("emoji".equals(fieldName)) {
                    emoji = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsMessageReactionContent deserializedAcsMessageReactionContent = new AcsMessageReactionContent(messageId);
            deserializedAcsMessageReactionContent.emoji = emoji;

            return deserializedAcsMessageReactionContent;
        });
    }
}
