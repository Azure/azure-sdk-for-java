// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Storage.DirectoryRenamed event.
 */
@Immutable
public final class StorageDirectoryRenamedEventData implements JsonSerializable<StorageDirectoryRenamedEventData> {
    /*
     * The path to the directory that was renamed.
     */
    @Generated
    private String sourceUrl;

    /*
     * The new path to the directory after the rename operation.
     */
    @Generated
    private String destinationUrl;

    /*
     * The name of the API/operation that triggered this event.
     */
    @Generated
    private String api;

    /*
     * A request id provided by the client of the storage API operation that triggered this event.
     */
    @Generated
    private String clientRequestId;

    /*
     * The request id generated by the storage service for the storage API operation that triggered this event.
     */
    @Generated
    private String requestId;

    /*
     * The identity of the requester that triggered this event.
     */
    @Generated
    private String identity;

    /*
     * For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should
     * be ignored by event consumers.
     */
    @Generated
    private Object storageDiagnostics;

    /*
     * An opaque string value representing the logical sequence of events for any particular directory name. Users can
     * use standard string comparison to understand the relative sequence of two events on the same directory name.
     */
    @Generated
    private String sequencer;

    /**
     * Creates an instance of StorageDirectoryRenamedEventData class.
     */
    @Generated
    private StorageDirectoryRenamedEventData() {
    }

    /**
     * Get the sourceUrl property: The path to the directory that was renamed.
     * 
     * @return the sourceUrl value.
     */
    @Generated
    public String getSourceUrl() {
        return this.sourceUrl;
    }

    /**
     * Get the destinationUrl property: The new path to the directory after the rename operation.
     * 
     * @return the destinationUrl value.
     */
    @Generated
    public String getDestinationUrl() {
        return this.destinationUrl;
    }

    /**
     * Get the api property: The name of the API/operation that triggered this event.
     * 
     * @return the api value.
     */
    @Generated
    public String getApi() {
        return this.api;
    }

    /**
     * Get the clientRequestId property: A request id provided by the client of the storage API operation that
     * triggered this event.
     * 
     * @return the clientRequestId value.
     */
    @Generated
    public String getClientRequestId() {
        return this.clientRequestId;
    }

    /**
     * Get the requestId property: The request id generated by the storage service for the storage API operation that
     * triggered this event.
     * 
     * @return the requestId value.
     */
    @Generated
    public String getRequestId() {
        return this.requestId;
    }

    /**
     * Get the identity property: The identity of the requester that triggered this event.
     * 
     * @return the identity value.
     */
    @Generated
    public String getIdentity() {
        return this.identity;
    }

    /**
     * Get the storageDiagnostics property: For service use only. Diagnostic data occasionally included by the Azure
     * Storage service. This property should be ignored by event consumers.
     * 
     * @return the storageDiagnostics value.
     */
    @Generated
    public Object getStorageDiagnostics() {
        return this.storageDiagnostics;
    }

    /**
     * Get the sequencer property: An opaque string value representing the logical sequence of events for any
     * particular directory name. Users can use standard string comparison to understand the relative sequence of two
     * events on the same directory name.
     * 
     * @return the sequencer value.
     */
    @Generated
    public String getSequencer() {
        return this.sequencer;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sourceUrl", this.sourceUrl);
        jsonWriter.writeStringField("destinationUrl", this.destinationUrl);
        jsonWriter.writeStringField("api", this.api);
        jsonWriter.writeStringField("clientRequestId", this.clientRequestId);
        jsonWriter.writeStringField("requestId", this.requestId);
        jsonWriter.writeStringField("identity", this.identity);
        jsonWriter.writeUntypedField("storageDiagnostics", this.storageDiagnostics);
        jsonWriter.writeStringField("sequencer", this.sequencer);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageDirectoryRenamedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageDirectoryRenamedEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageDirectoryRenamedEventData.
     */
    @Generated
    public static StorageDirectoryRenamedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageDirectoryRenamedEventData deserializedStorageDirectoryRenamedEventData
                = new StorageDirectoryRenamedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sourceUrl".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.sourceUrl = reader.getString();
                } else if ("destinationUrl".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.destinationUrl = reader.getString();
                } else if ("api".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.api = reader.getString();
                } else if ("clientRequestId".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.clientRequestId = reader.getString();
                } else if ("requestId".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.requestId = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.identity = reader.getString();
                } else if ("storageDiagnostics".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.storageDiagnostics = reader.readUntyped();
                } else if ("sequencer".equals(fieldName)) {
                    deserializedStorageDirectoryRenamedEventData.sequencer = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageDirectoryRenamedEventData;
        });
    }
}
