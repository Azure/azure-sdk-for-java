// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterWorkerRegistered event.
 */
@Immutable
public final class AcsRouterWorkerRegisteredEventData implements JsonSerializable<AcsRouterWorkerRegisteredEventData> {
    /*
     * Router Worker Registered Worker Id
     */
    @Generated
    private String workerId;

    /*
     * Router Worker Registered Queue Info
     */
    @Generated
    private final List<AcsRouterQueueDetails> queueAssignments;

    /*
     * Router Worker Registered Channel Configuration
     */
    @Generated
    private final List<AcsRouterChannelConfiguration> channelConfigurations;

    /*
     * Router Worker Register Total Capacity
     */
    @Generated
    private Integer totalCapacity;

    /*
     * Router Worker Registered Labels
     */
    @Generated
    private final Map<String, String> labels;

    /*
     * Router Worker Registered Tags
     */
    @Generated
    private final Map<String, String> tags;

    /**
     * Creates an instance of AcsRouterWorkerRegisteredEventData class.
     * 
     * @param queueAssignments the queueAssignments value to set.
     * @param channelConfigurations the channelConfigurations value to set.
     * @param labels the labels value to set.
     * @param tags the tags value to set.
     */
    @Generated
    private AcsRouterWorkerRegisteredEventData(List<AcsRouterQueueDetails> queueAssignments,
        List<AcsRouterChannelConfiguration> channelConfigurations, Map<String, String> labels,
        Map<String, String> tags) {
        this.queueAssignments = queueAssignments;
        this.channelConfigurations = channelConfigurations;
        this.labels = labels;
        this.tags = tags;
    }

    /**
     * Get the workerId property: Router Worker Registered Worker Id.
     * 
     * @return the workerId value.
     */
    @Generated
    public String getWorkerId() {
        return this.workerId;
    }

    /**
     * Get the queueAssignments property: Router Worker Registered Queue Info.
     * 
     * @return the queueAssignments value.
     */
    @Generated
    public List<AcsRouterQueueDetails> getQueueAssignments() {
        return this.queueAssignments;
    }

    /**
     * Get the channelConfigurations property: Router Worker Registered Channel Configuration.
     * 
     * @return the channelConfigurations value.
     */
    @Generated
    public List<AcsRouterChannelConfiguration> getChannelConfigurations() {
        return this.channelConfigurations;
    }

    /**
     * Get the totalCapacity property: Router Worker Register Total Capacity.
     * 
     * @return the totalCapacity value.
     */
    @Generated
    public Integer getTotalCapacity() {
        return this.totalCapacity;
    }

    /**
     * Get the labels property: Router Worker Registered Labels.
     * 
     * @return the labels value.
     */
    @Generated
    public Map<String, String> getLabels() {
        return this.labels;
    }

    /**
     * Get the tags property: Router Worker Registered Tags.
     * 
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("queueAssignments", this.queueAssignments,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("channelConfigurations", this.channelConfigurations,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("workerId", this.workerId);
        jsonWriter.writeNumberField("totalCapacity", this.totalCapacity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRouterWorkerRegisteredEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRouterWorkerRegisteredEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsRouterWorkerRegisteredEventData.
     */
    @Generated
    public static AcsRouterWorkerRegisteredEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<AcsRouterQueueDetails> queueAssignments = null;
            List<AcsRouterChannelConfiguration> channelConfigurations = null;
            Map<String, String> labels = null;
            Map<String, String> tags = null;
            String workerId = null;
            Integer totalCapacity = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("queueAssignments".equals(fieldName)) {
                    queueAssignments = reader.readArray(reader1 -> AcsRouterQueueDetails.fromJson(reader1));
                } else if ("channelConfigurations".equals(fieldName)) {
                    channelConfigurations
                        = reader.readArray(reader1 -> AcsRouterChannelConfiguration.fromJson(reader1));
                } else if ("labels".equals(fieldName)) {
                    labels = reader.readMap(reader1 -> reader1.getString());
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("workerId".equals(fieldName)) {
                    workerId = reader.getString();
                } else if ("totalCapacity".equals(fieldName)) {
                    totalCapacity = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            AcsRouterWorkerRegisteredEventData deserializedAcsRouterWorkerRegisteredEventData
                = new AcsRouterWorkerRegisteredEventData(queueAssignments, channelConfigurations, labels, tags);
            deserializedAcsRouterWorkerRegisteredEventData.workerId = workerId;
            deserializedAcsRouterWorkerRegisteredEventData.totalCapacity = totalCapacity;

            return deserializedAcsRouterWorkerRegisteredEventData;
        });
    }
}
