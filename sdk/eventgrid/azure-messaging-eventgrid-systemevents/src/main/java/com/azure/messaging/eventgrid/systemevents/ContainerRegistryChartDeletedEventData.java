// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted event.
 */
@Immutable
public final class ContainerRegistryChartDeletedEventData extends ContainerRegistryArtifactEventData {
    /*
     * The connected registry information if the event is generated by a connected registry.
     */
    @Generated
    private ContainerRegistryEventConnectedRegistry connectedRegistry;

    /**
     * Creates an instance of ContainerRegistryChartDeletedEventData class.
     * 
     * @param id the id value to set.
     * @param timestamp the timestamp value to set.
     * @param action the action value to set.
     * @param location the location value to set.
     * @param target the target value to set.
     */
    @Generated
    private ContainerRegistryChartDeletedEventData(String id, OffsetDateTime timestamp, String action, String location,
        ContainerRegistryArtifactEventTarget target) {
        super(id, timestamp, action, location, target);
    }

    /**
     * Get the connectedRegistry property: The connected registry information if the event is generated by a connected
     * registry.
     * 
     * @return the connectedRegistry value.
     */
    @Generated
    @Override
    public ContainerRegistryEventConnectedRegistry getConnectedRegistry() {
        return this.connectedRegistry;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("timestamp",
            getTimestamp() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getTimestamp()));
        jsonWriter.writeStringField("action", getAction());
        jsonWriter.writeStringField("location", getLocation());
        jsonWriter.writeJsonField("target", getTarget());
        jsonWriter.writeJsonField("connectedRegistry", getConnectedRegistry());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerRegistryChartDeletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerRegistryChartDeletedEventData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerRegistryChartDeletedEventData.
     */
    @Generated
    public static ContainerRegistryChartDeletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            OffsetDateTime timestamp = null;
            String action = null;
            String location = null;
            ContainerRegistryArtifactEventTarget target = null;
            ContainerRegistryEventConnectedRegistry connectedRegistry = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("action".equals(fieldName)) {
                    action = reader.getString();
                } else if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("target".equals(fieldName)) {
                    target = ContainerRegistryArtifactEventTarget.fromJson(reader);
                } else if ("connectedRegistry".equals(fieldName)) {
                    connectedRegistry = ContainerRegistryEventConnectedRegistry.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            ContainerRegistryChartDeletedEventData deserializedContainerRegistryChartDeletedEventData
                = new ContainerRegistryChartDeletedEventData(id, timestamp, action, location, target);
            deserializedContainerRegistryChartDeletedEventData.connectedRegistry = connectedRegistry;

            return deserializedContainerRegistryChartDeletedEventData;
        });
    }
}
