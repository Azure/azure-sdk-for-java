// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.ContainerRegistry.ChartDeleted event.
 */
@Immutable
public final class ContainerRegistryChartDeletedEventData extends ContainerRegistryArtifactEventData {
    /*
     * The location of the event.
     */
    @Generated
    private String location;

    /*
     * The action that encompasses the provided event.
     */
    @Generated
    private String action;

    /*
     * The event ID.
     */
    @Generated
    private String id;

    /**
     * Creates an instance of ContainerRegistryChartDeletedEventData class.
     * 
     * @param timestamp the timestamp value to set.
     * @param target the target value to set.
     * @param connectedRegistry the connectedRegistry value to set.
     */
    @Generated
    private ContainerRegistryChartDeletedEventData(OffsetDateTime timestamp,
        ContainerRegistryArtifactEventTarget target, ContainerRegistryEventConnectedRegistry connectedRegistry) {
        super(timestamp, target, connectedRegistry);
    }

    /**
     * Get the location property: The location of the event.
     * 
     * @return the location value.
     */
    @Generated
    @Override
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the action property: The action that encompasses the provided event.
     * 
     * @return the action value.
     */
    @Generated
    @Override
    public String getAction() {
        return this.action;
    }

    /**
     * Get the id property: The event ID.
     * 
     * @return the id value.
     */
    @Generated
    @Override
    public String getId() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            getTimestamp() == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getTimestamp()));
        jsonWriter.writeJsonField("target", getTarget());
        jsonWriter.writeJsonField("connectedRegistry", getConnectedRegistry());
        jsonWriter.writeStringField("id", getId());
        jsonWriter.writeStringField("action", getAction());
        jsonWriter.writeStringField("location", getLocation());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerRegistryChartDeletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerRegistryChartDeletedEventData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerRegistryChartDeletedEventData.
     */
    @Generated
    public static ContainerRegistryChartDeletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime timestamp = null;
            ContainerRegistryArtifactEventTarget target = null;
            ContainerRegistryEventConnectedRegistry connectedRegistry = null;
            String id = null;
            String action = null;
            String location = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("target".equals(fieldName)) {
                    target = ContainerRegistryArtifactEventTarget.fromJson(reader);
                } else if ("connectedRegistry".equals(fieldName)) {
                    connectedRegistry = ContainerRegistryEventConnectedRegistry.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("action".equals(fieldName)) {
                    action = reader.getString();
                } else if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ContainerRegistryChartDeletedEventData deserializedContainerRegistryChartDeletedEventData
                = new ContainerRegistryChartDeletedEventData(timestamp, target, connectedRegistry);
            deserializedContainerRegistryChartDeletedEventData.id = id;
            deserializedContainerRegistryChartDeletedEventData.action = action;
            deserializedContainerRegistryChartDeletedEventData.location = location;

            return deserializedContainerRegistryChartDeletedEventData;
        });
    }
}
