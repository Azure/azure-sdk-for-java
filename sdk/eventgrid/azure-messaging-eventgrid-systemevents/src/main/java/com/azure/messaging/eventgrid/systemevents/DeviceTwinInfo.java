// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about the device twin, which is the cloud representation of application device metadata.
 */
@Immutable
public final class DeviceTwinInfo implements JsonSerializable<DeviceTwinInfo> {
    /*
     * Authentication type used for this device: either SAS, SelfSigned, or CertificateAuthority.
     */
    @Generated
    private String authenticationType;

    /*
     * Count of cloud to device messages sent to this device.
     */
    @Generated
    private Double cloudToDeviceMessageCount;

    /*
     * Whether the device is connected or disconnected.
     */
    @Generated
    private String connectionState;

    /*
     * The unique identifier of the device twin.
     */
    @Generated
    private String deviceId;

    /*
     * A piece of information that describes the content of the device twin. Each etag is guaranteed to be unique per
     * device twin.
     */
    @Generated
    private String etag;

    /*
     * The ISO8601 timestamp of the last activity.
     */
    @Generated
    private String lastActivityTime;

    /*
     * Properties JSON element.
     */
    @Generated
    private final DeviceTwinInfoProperties properties;

    /*
     * Whether the device twin is enabled or disabled.
     */
    @Generated
    private String status;

    /*
     * The ISO8601 timestamp of the last device twin status update.
     */
    @Generated
    private String statusUpdateTime;

    /*
     * An integer that is incremented by one each time the device twin is updated.
     */
    @Generated
    private Double version;

    /*
     * The thumbprint is a unique value for the x509 certificate, commonly used to find a particular certificate in a
     * certificate store. The thumbprint is dynamically generated using the SHA1 algorithm, and does not physically
     * exist in the certificate.
     */
    @Generated
    private final DeviceTwinInfoX509Thumbprint x509Thumbprint;

    /**
     * Creates an instance of DeviceTwinInfo class.
     * 
     * @param properties the properties value to set.
     * @param x509Thumbprint the x509Thumbprint value to set.
     */
    @Generated
    private DeviceTwinInfo(DeviceTwinInfoProperties properties, DeviceTwinInfoX509Thumbprint x509Thumbprint) {
        this.properties = properties;
        this.x509Thumbprint = x509Thumbprint;
    }

    /**
     * Get the authenticationType property: Authentication type used for this device: either SAS, SelfSigned, or
     * CertificateAuthority.
     * 
     * @return the authenticationType value.
     */
    @Generated
    public String getAuthenticationType() {
        return this.authenticationType;
    }

    /**
     * Get the cloudToDeviceMessageCount property: Count of cloud to device messages sent to this device.
     * 
     * @return the cloudToDeviceMessageCount value.
     */
    @Generated
    public Double getCloudToDeviceMessageCount() {
        return this.cloudToDeviceMessageCount;
    }

    /**
     * Get the connectionState property: Whether the device is connected or disconnected.
     * 
     * @return the connectionState value.
     */
    @Generated
    public String getConnectionState() {
        return this.connectionState;
    }

    /**
     * Get the deviceId property: The unique identifier of the device twin.
     * 
     * @return the deviceId value.
     */
    @Generated
    public String getDeviceId() {
        return this.deviceId;
    }

    /**
     * Get the etag property: A piece of information that describes the content of the device twin. Each etag is
     * guaranteed to be unique per device twin.
     * 
     * @return the etag value.
     */
    @Generated
    public String getEtag() {
        return this.etag;
    }

    /**
     * Get the lastActivityTime property: The ISO8601 timestamp of the last activity.
     * 
     * @return the lastActivityTime value.
     */
    @Generated
    public String getLastActivityTime() {
        return this.lastActivityTime;
    }

    /**
     * Get the properties property: Properties JSON element.
     * 
     * @return the properties value.
     */
    @Generated
    public DeviceTwinInfoProperties getProperties() {
        return this.properties;
    }

    /**
     * Get the status property: Whether the device twin is enabled or disabled.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the statusUpdateTime property: The ISO8601 timestamp of the last device twin status update.
     * 
     * @return the statusUpdateTime value.
     */
    @Generated
    public String getStatusUpdateTime() {
        return this.statusUpdateTime;
    }

    /**
     * Get the version property: An integer that is incremented by one each time the device twin is updated.
     * 
     * @return the version value.
     */
    @Generated
    public Double getVersion() {
        return this.version;
    }

    /**
     * Get the x509Thumbprint property: The thumbprint is a unique value for the x509 certificate, commonly used to find
     * a particular certificate in a certificate store. The thumbprint is dynamically generated using the SHA1
     * algorithm, and does not physically exist in the certificate.
     * 
     * @return the x509Thumbprint value.
     */
    @Generated
    public DeviceTwinInfoX509Thumbprint getX509Thumbprint() {
        return this.x509Thumbprint;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.properties);
        jsonWriter.writeJsonField("x509Thumbprint", this.x509Thumbprint);
        jsonWriter.writeStringField("authenticationType", this.authenticationType);
        jsonWriter.writeNumberField("cloudToDeviceMessageCount", this.cloudToDeviceMessageCount);
        jsonWriter.writeStringField("connectionState", this.connectionState);
        jsonWriter.writeStringField("deviceId", this.deviceId);
        jsonWriter.writeStringField("etag", this.etag);
        jsonWriter.writeStringField("lastActivityTime", this.lastActivityTime);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("statusUpdateTime", this.statusUpdateTime);
        jsonWriter.writeNumberField("version", this.version);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceTwinInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceTwinInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceTwinInfo.
     */
    @Generated
    public static DeviceTwinInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceTwinInfoProperties properties = null;
            DeviceTwinInfoX509Thumbprint x509Thumbprint = null;
            String authenticationType = null;
            Double cloudToDeviceMessageCount = null;
            String connectionState = null;
            String deviceId = null;
            String etag = null;
            String lastActivityTime = null;
            String status = null;
            String statusUpdateTime = null;
            Double version = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    properties = DeviceTwinInfoProperties.fromJson(reader);
                } else if ("x509Thumbprint".equals(fieldName)) {
                    x509Thumbprint = DeviceTwinInfoX509Thumbprint.fromJson(reader);
                } else if ("authenticationType".equals(fieldName)) {
                    authenticationType = reader.getString();
                } else if ("cloudToDeviceMessageCount".equals(fieldName)) {
                    cloudToDeviceMessageCount = reader.getNullable(JsonReader::getDouble);
                } else if ("connectionState".equals(fieldName)) {
                    connectionState = reader.getString();
                } else if ("deviceId".equals(fieldName)) {
                    deviceId = reader.getString();
                } else if ("etag".equals(fieldName)) {
                    etag = reader.getString();
                } else if ("lastActivityTime".equals(fieldName)) {
                    lastActivityTime = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("statusUpdateTime".equals(fieldName)) {
                    statusUpdateTime = reader.getString();
                } else if ("version".equals(fieldName)) {
                    version = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            DeviceTwinInfo deserializedDeviceTwinInfo = new DeviceTwinInfo(properties, x509Thumbprint);
            deserializedDeviceTwinInfo.authenticationType = authenticationType;
            deserializedDeviceTwinInfo.cloudToDeviceMessageCount = cloudToDeviceMessageCount;
            deserializedDeviceTwinInfo.connectionState = connectionState;
            deserializedDeviceTwinInfo.deviceId = deviceId;
            deserializedDeviceTwinInfo.etag = etag;
            deserializedDeviceTwinInfo.lastActivityTime = lastActivityTime;
            deserializedDeviceTwinInfo.status = status;
            deserializedDeviceTwinInfo.statusUpdateTime = statusUpdateTime;
            deserializedDeviceTwinInfo.version = version;

            return deserializedDeviceTwinInfo;
        });
    }
}
