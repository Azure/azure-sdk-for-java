// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Resources.ResourceDeleteSuccess event. This is
 * raised when a resource delete operation succeeds.
 */
@Immutable
public final class ResourceDeleteSuccessEventData implements JsonSerializable<ResourceDeleteSuccessEventData> {
    /*
     * The tenant ID of the resource.
     */
    @Generated
    private String tenantId;

    /*
     * The subscription ID of the resource.
     */
    @Generated
    private String subscriptionId;

    /*
     * The resource group of the resource.
     */
    @Generated
    private String resourceGroup;

    /*
     * The resource provider performing the operation.
     */
    @Generated
    private String resourceProvider;

    /*
     * The URI of the resource in the operation.
     */
    @Generated
    private String resourceUri;

    /*
     * The operation that was performed.
     */
    @Generated
    private String operationName;

    /*
     * The status of the operation.
     */
    @Generated
    private String status;

    /*
     * The requested authorization for the operation.
     */
    @Generated
    private final ResourceAuthorization authorization;

    /*
     * The properties of the claims.
     */
    @Generated
    private final Map<String, String> claims;

    /*
     * An operation ID used for troubleshooting.
     */
    @Generated
    private String correlationId;

    /*
     * The details of the operation.
     */
    @Generated
    private final ResourceHttpRequest httpRequest;

    /**
     * Creates an instance of ResourceDeleteSuccessEventData class.
     * 
     * @param authorization the authorization value to set.
     * @param claims the claims value to set.
     * @param httpRequest the httpRequest value to set.
     */
    @Generated
    private ResourceDeleteSuccessEventData(ResourceAuthorization authorization, Map<String, String> claims,
        ResourceHttpRequest httpRequest) {
        this.authorization = authorization;
        this.claims = claims;
        this.httpRequest = httpRequest;
    }

    /**
     * Get the tenantId property: The tenant ID of the resource.
     * 
     * @return the tenantId value.
     */
    @Generated
    public String getTenantId() {
        return this.tenantId;
    }

    /**
     * Get the subscriptionId property: The subscription ID of the resource.
     * 
     * @return the subscriptionId value.
     */
    @Generated
    public String getSubscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the resourceGroup property: The resource group of the resource.
     * 
     * @return the resourceGroup value.
     */
    @Generated
    public String getResourceGroup() {
        return this.resourceGroup;
    }

    /**
     * Get the resourceProvider property: The resource provider performing the operation.
     * 
     * @return the resourceProvider value.
     */
    @Generated
    public String getResourceProvider() {
        return this.resourceProvider;
    }

    /**
     * Get the resourceUri property: The URI of the resource in the operation.
     * 
     * @return the resourceUri value.
     */
    @Generated
    public String getResourceUri() {
        return this.resourceUri;
    }

    /**
     * Get the operationName property: The operation that was performed.
     * 
     * @return the operationName value.
     */
    @Generated
    public String getOperationName() {
        return this.operationName;
    }

    /**
     * Get the status property: The status of the operation.
     * 
     * @return the status value.
     */
    @Generated
    public String getStatus() {
        return this.status;
    }

    /**
     * Get the authorization property: The requested authorization for the operation.
     * 
     * @return the authorization value.
     */
    @Generated
    public ResourceAuthorization getAuthorization() {
        return this.authorization;
    }

    /**
     * Get the claims property: The properties of the claims.
     * 
     * @return the claims value.
     */
    @Generated
    public Map<String, String> getClaims() {
        return this.claims;
    }

    /**
     * Get the correlationId property: An operation ID used for troubleshooting.
     * 
     * @return the correlationId value.
     */
    @Generated
    public String getCorrelationId() {
        return this.correlationId;
    }

    /**
     * Get the httpRequest property: The details of the operation.
     * 
     * @return the httpRequest value.
     */
    @Generated
    public ResourceHttpRequest getHttpRequest() {
        return this.httpRequest;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("authorization", this.authorization);
        jsonWriter.writeMapField("claims", this.claims, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("httpRequest", this.httpRequest);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("subscriptionId", this.subscriptionId);
        jsonWriter.writeStringField("resourceGroup", this.resourceGroup);
        jsonWriter.writeStringField("resourceProvider", this.resourceProvider);
        jsonWriter.writeStringField("resourceUri", this.resourceUri);
        jsonWriter.writeStringField("operationName", this.operationName);
        jsonWriter.writeStringField("status", this.status);
        jsonWriter.writeStringField("correlationId", this.correlationId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceDeleteSuccessEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceDeleteSuccessEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceDeleteSuccessEventData.
     */
    @Generated
    public static ResourceDeleteSuccessEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceAuthorization authorization = null;
            Map<String, String> claims = null;
            ResourceHttpRequest httpRequest = null;
            String tenantId = null;
            String subscriptionId = null;
            String resourceGroup = null;
            String resourceProvider = null;
            String resourceUri = null;
            String operationName = null;
            String status = null;
            String correlationId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authorization".equals(fieldName)) {
                    authorization = ResourceAuthorization.fromJson(reader);
                } else if ("claims".equals(fieldName)) {
                    claims = reader.readMap(reader1 -> reader1.getString());
                } else if ("httpRequest".equals(fieldName)) {
                    httpRequest = ResourceHttpRequest.fromJson(reader);
                } else if ("tenantId".equals(fieldName)) {
                    tenantId = reader.getString();
                } else if ("subscriptionId".equals(fieldName)) {
                    subscriptionId = reader.getString();
                } else if ("resourceGroup".equals(fieldName)) {
                    resourceGroup = reader.getString();
                } else if ("resourceProvider".equals(fieldName)) {
                    resourceProvider = reader.getString();
                } else if ("resourceUri".equals(fieldName)) {
                    resourceUri = reader.getString();
                } else if ("operationName".equals(fieldName)) {
                    operationName = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = reader.getString();
                } else if ("correlationId".equals(fieldName)) {
                    correlationId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ResourceDeleteSuccessEventData deserializedResourceDeleteSuccessEventData
                = new ResourceDeleteSuccessEventData(authorization, claims, httpRequest);
            deserializedResourceDeleteSuccessEventData.tenantId = tenantId;
            deserializedResourceDeleteSuccessEventData.subscriptionId = subscriptionId;
            deserializedResourceDeleteSuccessEventData.resourceGroup = resourceGroup;
            deserializedResourceDeleteSuccessEventData.resourceProvider = resourceProvider;
            deserializedResourceDeleteSuccessEventData.resourceUri = resourceUri;
            deserializedResourceDeleteSuccessEventData.operationName = operationName;
            deserializedResourceDeleteSuccessEventData.status = status;
            deserializedResourceDeleteSuccessEventData.correlationId = correlationId;

            return deserializedResourceDeleteSuccessEventData;
        });
    }
}
