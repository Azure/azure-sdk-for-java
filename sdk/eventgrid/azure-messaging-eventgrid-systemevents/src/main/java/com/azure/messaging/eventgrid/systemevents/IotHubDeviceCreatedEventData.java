// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Event data for Microsoft.Devices.DeviceCreated event.
 */
@Immutable
public final class IotHubDeviceCreatedEventData extends DeviceLifeCycleEventProperties {
    /**
     * Creates an instance of IotHubDeviceCreatedEventData class.
     * 
     * @param deviceId the deviceId value to set.
     * @param hubName the hubName value to set.
     * @param twin the twin value to set.
     */
    @Generated
    private IotHubDeviceCreatedEventData(String deviceId, String hubName, DeviceTwinInfo twin) {
        super(deviceId, hubName, twin);
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("deviceId", getDeviceId());
        jsonWriter.writeStringField("hubName", getHubName());
        jsonWriter.writeJsonField("twin", getTwin());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IotHubDeviceCreatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IotHubDeviceCreatedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IotHubDeviceCreatedEventData.
     */
    @Generated
    public static IotHubDeviceCreatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String deviceId = null;
            String hubName = null;
            DeviceTwinInfo twin = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("deviceId".equals(fieldName)) {
                    deviceId = reader.getString();
                } else if ("hubName".equals(fieldName)) {
                    hubName = reader.getString();
                } else if ("twin".equals(fieldName)) {
                    twin = DeviceTwinInfo.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new IotHubDeviceCreatedEventData(deviceId, hubName, twin);
        });
    }
}
