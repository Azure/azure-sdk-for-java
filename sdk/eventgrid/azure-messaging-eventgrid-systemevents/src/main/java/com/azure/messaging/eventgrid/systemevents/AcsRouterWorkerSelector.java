// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Router Job Worker Selector.
 */
@Immutable
public final class AcsRouterWorkerSelector implements JsonSerializable<AcsRouterWorkerSelector> {

    /*
     * Router Job Worker Selector Key
     */
    @Generated
    private String key;

    /*
     * Router Job Worker Selector Label Operator
     */
    @Generated
    private final AcsRouterLabelOperator labelOperator;

    /*
     * Router Job Worker Selector Value
     */
    @Generated
    private final BinaryData labelValue;

    /*
     * Router Job Worker Selector Time to Live in Seconds
     */
    @Generated
    private final double timeToLive;

    /*
     * Router Job Worker Selector State
     */
    @Generated
    private final AcsRouterWorkerSelectorState state;

    /*
     * Router Job Worker Selector Expiration Time
     */
    @Generated
    private final OffsetDateTime expirationTime;

    /**
     * Creates an instance of AcsRouterWorkerSelector class.
     *
     * @param labelOperator the labelOperator value to set.
     * @param labelValue the labelValue value to set.
     * @param timeToLive the timeToLive value to set.
     * @param state the state value to set.
     * @param expirationTime the expirationTime value to set.
     */
    @Generated
    private AcsRouterWorkerSelector(AcsRouterLabelOperator labelOperator, BinaryData labelValue, double timeToLive,
        AcsRouterWorkerSelectorState state, OffsetDateTime expirationTime) {
        this.labelOperator = labelOperator;
        this.labelValue = labelValue;
        this.timeToLive = timeToLive;
        this.state = state;
        this.expirationTime = expirationTime;
    }

    /**
     * Get the key property: Router Job Worker Selector Key.
     *
     * @return the key value.
     */
    @Generated
    public String getKey() {
        return this.key;
    }

    /**
     * Get the labelOperator property: Router Job Worker Selector Label Operator.
     *
     * @return the labelOperator value.
     */
    @Generated
    public AcsRouterLabelOperator getLabelOperator() {
        return this.labelOperator;
    }

    /**
     * Get the labelValue property: Router Job Worker Selector Value.
     *
     * @return the labelValue value.
     */
    @Generated
    public BinaryData getLabelValue() {
        return this.labelValue;
    }

    /**
     * Get the timeToLive property: Router Job Worker Selector Time to Live in Seconds.
     *
     * @return the timeToLive value.
     */
    @Generated
    public Duration getTimeToLive() {
        return Duration.ofSeconds((long) timeToLive);
    }

    /**
     * Get the state property: Router Job Worker Selector State.
     *
     * @return the state value.
     */
    @Generated
    public AcsRouterWorkerSelectorState getState() {
        return this.state;
    }

    /**
     * Get the expirationTime property: Router Job Worker Selector Expiration Time.
     *
     * @return the expirationTime value.
     */
    @Generated
    public OffsetDateTime getExpirationTime() {
        return this.expirationTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("labelOperator", this.labelOperator == null ? null : this.labelOperator.toString());
        jsonWriter.writeFieldName("value");
        this.labelValue.writeTo(jsonWriter);
        jsonWriter.writeDoubleField("ttlSeconds", this.timeToLive);
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeStringField("expirationTime",
            this.expirationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationTime));
        jsonWriter.writeStringField("key", this.key);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRouterWorkerSelector from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRouterWorkerSelector if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsRouterWorkerSelector.
     */
    @Generated
    public static AcsRouterWorkerSelector fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsRouterLabelOperator labelOperator = null;
            BinaryData labelValue = null;
            double timeToLive = 0.0;
            AcsRouterWorkerSelectorState state = null;
            OffsetDateTime expirationTime = null;
            String key = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("labelOperator".equals(fieldName)) {
                    labelOperator = AcsRouterLabelOperator.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    labelValue
                        = reader.getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped()));
                } else if ("ttlSeconds".equals(fieldName)) {
                    timeToLive = reader.getDouble();
                } else if ("state".equals(fieldName)) {
                    state = AcsRouterWorkerSelectorState.fromString(reader.getString());
                } else if ("expirationTime".equals(fieldName)) {
                    expirationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("key".equals(fieldName)) {
                    key = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsRouterWorkerSelector deserializedAcsRouterWorkerSelector
                = new AcsRouterWorkerSelector(labelOperator, labelValue, timeToLive, state, expirationTime);
            deserializedAcsRouterWorkerSelector.key = key;
            return deserializedAcsRouterWorkerSelector;
        });
    }
}
