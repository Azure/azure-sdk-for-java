// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.BinaryData;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Describes the schema of the properties under resource info which are common
 * across all ARN system topic events.
 */
@Immutable
public final class ResourceNotificationsResourceUpdatedDetails
    implements JsonSerializable<ResourceNotificationsResourceUpdatedDetails> {
    /*
     * id of the resource for which the event is being emitted
     */
    @Generated
    private final String id;

    /*
     * name of the resource for which the event is being emitted
     */
    @Generated
    private final String name;

    /*
     * the type of the resource for which the event is being emitted
     */
    @Generated
    private final String type;

    /*
     * the location of the resource for which the event is being emitted
     */
    @Generated
    private String location;

    /*
     * the tags on the resource for which the event is being emitted
     */
    @Generated
    private Map<String, String> tags;

    /*
     * properties in the payload of the resource for which the event is being emitted
     */
    @Generated
    private Map<String, BinaryData> properties;

    /**
     * Creates an instance of ResourceNotificationsResourceUpdatedDetails class.
     * 
     * @param id the id value to set.
     * @param name the name value to set.
     * @param type the type value to set.
     */
    @Generated
    private ResourceNotificationsResourceUpdatedDetails(String id, String name, String type) {
        this.id = id;
        this.name = name;
        this.type = type;
    }

    /**
     * Get the id property: id of the resource for which the event is being emitted.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Get the name property: name of the resource for which the event is being emitted.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the type property: the type of the resource for which the event is being emitted.
     * 
     * @return the type value.
     */
    @Generated
    public String getType() {
        return this.type;
    }

    /**
     * Get the location property: the location of the resource for which the event is being emitted.
     * 
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Get the tags property: the tags on the resource for which the event is being emitted.
     * 
     * @return the tags value.
     */
    @Generated
    public Map<String, String> getTags() {
        return this.tags;
    }

    /**
     * Get the properties property: properties in the payload of the resource for which the event is being emitted.
     * 
     * @return the properties value.
     */
    @Generated
    public Map<String, BinaryData> getProperties() {
        return this.properties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("type", this.type);
        jsonWriter.writeStringField("location", this.location);
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("properties", this.properties,
            (writer, element) -> writer.writeUntyped(element == null ? null : element.toObject(Object.class)));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceNotificationsResourceUpdatedDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceNotificationsResourceUpdatedDetails if the JsonReader was pointing to an instance
     * of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceNotificationsResourceUpdatedDetails.
     */
    @Generated
    public static ResourceNotificationsResourceUpdatedDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String id = null;
            String name = null;
            String type = null;
            String location = null;
            Map<String, String> tags = null;
            Map<String, BinaryData> properties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("properties".equals(fieldName)) {
                    properties = reader.readMap(reader1 -> reader1
                        .getNullable(nonNullReader -> BinaryData.fromObject(nonNullReader.readUntyped())));
                } else {
                    reader.skipChildren();
                }
            }
            ResourceNotificationsResourceUpdatedDetails deserializedResourceNotificationsResourceUpdatedDetails
                = new ResourceNotificationsResourceUpdatedDetails(id, name, type);
            deserializedResourceNotificationsResourceUpdatedDetails.location = location;
            deserializedResourceNotificationsResourceUpdatedDetails.tags = tags;
            deserializedResourceNotificationsResourceUpdatedDetails.properties = properties;

            return deserializedResourceNotificationsResourceUpdatedDetails;
        });
    }
}
