// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.RouterJobClassified event.
 */
@Immutable
public final class AcsRouterJobClassifiedEventData extends AcsRouterJobEventData {
    /*
     * Router Job Queue Info
     */
    @Generated
    private final AcsRouterQueueDetails queueDetails;

    /*
     * Router Job Classification Policy Id
     */
    @Generated
    private String classificationPolicyId;

    /*
     * Router Job Priority
     */
    @Generated
    private Integer priority;

    /*
     * Router Job Attached Worker Selector
     */
    @Generated
    private final List<AcsRouterWorkerSelector> attachedWorkerSelectors;

    /*
     * Router Job events Queue Id
     */
    @Generated
    private String queueId;

    /*
     * Router Event Channel ID
     */
    @Generated
    private String channelId;

    /*
     * Router Event Channel Reference
     */
    @Generated
    private String channelReference;

    /*
     * Router Event Job ID
     */
    @Generated
    private String jobId;

    /**
     * Creates an instance of AcsRouterJobClassifiedEventData class.
     * 
     * @param labels the labels value to set.
     * @param tags the tags value to set.
     * @param queueDetails the queueDetails value to set.
     * @param attachedWorkerSelectors the attachedWorkerSelectors value to set.
     */
    @Generated
    private AcsRouterJobClassifiedEventData(Map<String, String> labels, Map<String, String> tags,
        AcsRouterQueueDetails queueDetails, List<AcsRouterWorkerSelector> attachedWorkerSelectors) {
        super(labels, tags);
        this.queueDetails = queueDetails;
        this.attachedWorkerSelectors = attachedWorkerSelectors;
    }

    /**
     * Get the queueDetails property: Router Job Queue Info.
     * 
     * @return the queueDetails value.
     */
    @Generated
    public AcsRouterQueueDetails getQueueDetails() {
        return this.queueDetails;
    }

    /**
     * Get the classificationPolicyId property: Router Job Classification Policy Id.
     * 
     * @return the classificationPolicyId value.
     */
    @Generated
    public String getClassificationPolicyId() {
        return this.classificationPolicyId;
    }

    /**
     * Get the priority property: Router Job Priority.
     * 
     * @return the priority value.
     */
    @Generated
    public Integer getPriority() {
        return this.priority;
    }

    /**
     * Get the attachedWorkerSelectors property: Router Job Attached Worker Selector.
     * 
     * @return the attachedWorkerSelectors value.
     */
    @Generated
    public List<AcsRouterWorkerSelector> getAttachedWorkerSelectors() {
        return this.attachedWorkerSelectors;
    }

    /**
     * Get the queueId property: Router Job events Queue Id.
     * 
     * @return the queueId value.
     */
    @Generated
    @Override
    public String getQueueId() {
        return this.queueId;
    }

    /**
     * Get the channelId property: Router Event Channel ID.
     * 
     * @return the channelId value.
     */
    @Generated
    @Override
    public String getChannelId() {
        return this.channelId;
    }

    /**
     * Get the channelReference property: Router Event Channel Reference.
     * 
     * @return the channelReference value.
     */
    @Generated
    @Override
    public String getChannelReference() {
        return this.channelReference;
    }

    /**
     * Get the jobId property: Router Event Job ID.
     * 
     * @return the jobId value.
     */
    @Generated
    @Override
    public String getJobId() {
        return this.jobId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("labels", getLabels(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("tags", getTags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("jobId", getJobId());
        jsonWriter.writeStringField("channelReference", getChannelReference());
        jsonWriter.writeStringField("channelId", getChannelId());
        jsonWriter.writeStringField("queueId", getQueueId());
        jsonWriter.writeJsonField("queueDetails", this.queueDetails);
        jsonWriter.writeArrayField("attachedWorkerSelectors", this.attachedWorkerSelectors,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("classificationPolicyId", this.classificationPolicyId);
        jsonWriter.writeNumberField("priority", this.priority);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsRouterJobClassifiedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsRouterJobClassifiedEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsRouterJobClassifiedEventData.
     */
    @Generated
    public static AcsRouterJobClassifiedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Map<String, String> labels = null;
            Map<String, String> tags = null;
            String jobId = null;
            String channelReference = null;
            String channelId = null;
            String queueId = null;
            AcsRouterQueueDetails queueDetails = null;
            List<AcsRouterWorkerSelector> attachedWorkerSelectors = null;
            String classificationPolicyId = null;
            Integer priority = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("labels".equals(fieldName)) {
                    labels = reader.readMap(reader1 -> reader1.getString());
                } else if ("tags".equals(fieldName)) {
                    tags = reader.readMap(reader1 -> reader1.getString());
                } else if ("jobId".equals(fieldName)) {
                    jobId = reader.getString();
                } else if ("channelReference".equals(fieldName)) {
                    channelReference = reader.getString();
                } else if ("channelId".equals(fieldName)) {
                    channelId = reader.getString();
                } else if ("queueId".equals(fieldName)) {
                    queueId = reader.getString();
                } else if ("queueDetails".equals(fieldName)) {
                    queueDetails = AcsRouterQueueDetails.fromJson(reader);
                } else if ("attachedWorkerSelectors".equals(fieldName)) {
                    attachedWorkerSelectors = reader.readArray(reader1 -> AcsRouterWorkerSelector.fromJson(reader1));
                } else if ("classificationPolicyId".equals(fieldName)) {
                    classificationPolicyId = reader.getString();
                } else if ("priority".equals(fieldName)) {
                    priority = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }
            AcsRouterJobClassifiedEventData deserializedAcsRouterJobClassifiedEventData
                = new AcsRouterJobClassifiedEventData(labels, tags, queueDetails, attachedWorkerSelectors);
            deserializedAcsRouterJobClassifiedEventData.jobId = jobId;
            deserializedAcsRouterJobClassifiedEventData.channelReference = channelReference;
            deserializedAcsRouterJobClassifiedEventData.channelId = channelId;
            deserializedAcsRouterJobClassifiedEventData.queueId = queueId;
            deserializedAcsRouterJobClassifiedEventData.classificationPolicyId = classificationPolicyId;
            deserializedAcsRouterJobClassifiedEventData.priority = priority;

            return deserializedAcsRouterJobClassifiedEventData;
        });
    }
}
