// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.messaging.eventgrid.implementation.models.AcsMessageChannelEventError;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of common properties of all chat thread events.
 */
@Immutable
public class AcsMessageEventData implements JsonSerializable<AcsMessageEventData> {

    /*
     * The message sender
     */
    @Generated
    private String from;

    /*
     * The message recipient
     */
    @Generated
    private String to;

    /*
     * The time message was received
     */
    @Generated
    private final OffsetDateTime receivedTimestamp;

    /*
     * The channel event error
     */
    @Generated
    private final AcsMessageChannelEventError error;

    /**
     * Creates an instance of AcsMessageEventData class.
     *
     * @param receivedTimestamp the receivedTimestamp value to set.
     * @param error the error value to set.
     */
    @Generated
    protected AcsMessageEventData(OffsetDateTime receivedTimestamp, AcsMessageChannelEventError error) {
        this.receivedTimestamp = receivedTimestamp;
        this.error = error;
    }

    /**
     * Get the from property: The message sender.
     *
     * @return the from value.
     */
    @Generated
    public String getFrom() {
        return this.from;
    }

    /**
     * Set the from property: The message sender.
     *
     * @param from the from value to set.
     * @return the AcsMessageEventData object itself.
     */
    @Generated
    AcsMessageEventData setFrom(String from) {
        this.from = from;
        return this;
    }

    /**
     * Get the to property: The message recipient.
     *
     * @return the to value.
     */
    @Generated
    public String getTo() {
        return this.to;
    }

    /**
     * Set the to property: The message recipient.
     *
     * @param to the to value to set.
     * @return the AcsMessageEventData object itself.
     */
    @Generated
    AcsMessageEventData setTo(String to) {
        this.to = to;
        return this;
    }

    /**
     * Get the receivedTimestamp property: The time message was received.
     *
     * @return the receivedTimestamp value.
     */
    @Generated
    public OffsetDateTime getReceivedTimestamp() {
        return this.receivedTimestamp;
    }

    /**
     * Get the error property: The channel error code and message.
     *
     * @return the error value.
     */
    @Generated
    public ResponseError getError() {
        return new ResponseError(this.error.getChannelCode(), this.error.getChannelMessage());
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("receivedTimeStamp",
            this.receivedTimestamp == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.receivedTimestamp));
        jsonWriter.writeJsonField("error", this.error);
        jsonWriter.writeStringField("from", this.from);
        jsonWriter.writeStringField("to", this.to);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsMessageEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsMessageEventData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsMessageEventData.
     */
    @Generated
    public static AcsMessageEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime receivedTimestamp = null;
            AcsMessageChannelEventError error = null;
            String from = null;
            String to = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("receivedTimeStamp".equals(fieldName)) {
                    receivedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    error = AcsMessageChannelEventError.fromJson(reader);
                } else if ("from".equals(fieldName)) {
                    from = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsMessageEventData deserializedAcsMessageEventData = new AcsMessageEventData(receivedTimestamp, error);
            deserializedAcsMessageEventData.from = from;
            deserializedAcsMessageEventData.to = to;
            return deserializedAcsMessageEventData;
        });
    }
}
