// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.EventHub.CaptureFileCreated event.
 */
@Immutable
public final class EventHubCaptureFileCreatedEventData
    implements JsonSerializable<EventHubCaptureFileCreatedEventData> {
    /*
     * The path to the capture file.
     */
    @Generated
    private final String fileUrl;

    /*
     * The file type of the capture file.
     */
    @Generated
    private final String fileType;

    /*
     * The shard ID.
     */
    @Generated
    private final String partitionId;

    /*
     * The file size.
     */
    @Generated
    private final int sizeInBytes;

    /*
     * The number of events in the file.
     */
    @Generated
    private final int eventCount;

    /*
     * The smallest sequence number from the queue.
     */
    @Generated
    private final int firstSequenceNumber;

    /*
     * The last sequence number from the queue.
     */
    @Generated
    private final int lastSequenceNumber;

    /*
     * The first time from the queue.
     */
    @Generated
    private final OffsetDateTime firstEnqueueTime;

    /*
     * The last time from the queue.
     */
    @Generated
    private final OffsetDateTime lastEnqueueTime;

    /**
     * Creates an instance of EventHubCaptureFileCreatedEventData class.
     * 
     * @param fileUrl the fileUrl value to set.
     * @param fileType the fileType value to set.
     * @param partitionId the partitionId value to set.
     * @param sizeInBytes the sizeInBytes value to set.
     * @param eventCount the eventCount value to set.
     * @param firstSequenceNumber the firstSequenceNumber value to set.
     * @param lastSequenceNumber the lastSequenceNumber value to set.
     * @param firstEnqueueTime the firstEnqueueTime value to set.
     * @param lastEnqueueTime the lastEnqueueTime value to set.
     */
    @Generated
    private EventHubCaptureFileCreatedEventData(String fileUrl, String fileType, String partitionId, int sizeInBytes,
        int eventCount, int firstSequenceNumber, int lastSequenceNumber, OffsetDateTime firstEnqueueTime,
        OffsetDateTime lastEnqueueTime) {
        this.fileUrl = fileUrl;
        this.fileType = fileType;
        this.partitionId = partitionId;
        this.sizeInBytes = sizeInBytes;
        this.eventCount = eventCount;
        this.firstSequenceNumber = firstSequenceNumber;
        this.lastSequenceNumber = lastSequenceNumber;
        this.firstEnqueueTime = firstEnqueueTime;
        this.lastEnqueueTime = lastEnqueueTime;
    }

    /**
     * Get the fileUrl property: The path to the capture file.
     * 
     * @return the fileUrl value.
     */
    @Generated
    public String getFileUrl() {
        return this.fileUrl;
    }

    /**
     * Get the fileType property: The file type of the capture file.
     * 
     * @return the fileType value.
     */
    @Generated
    public String getFileType() {
        return this.fileType;
    }

    /**
     * Get the partitionId property: The shard ID.
     * 
     * @return the partitionId value.
     */
    @Generated
    public String getPartitionId() {
        return this.partitionId;
    }

    /**
     * Get the sizeInBytes property: The file size.
     * 
     * @return the sizeInBytes value.
     */
    @Generated
    public int getSizeInBytes() {
        return this.sizeInBytes;
    }

    /**
     * Get the eventCount property: The number of events in the file.
     * 
     * @return the eventCount value.
     */
    @Generated
    public int getEventCount() {
        return this.eventCount;
    }

    /**
     * Get the firstSequenceNumber property: The smallest sequence number from the queue.
     * 
     * @return the firstSequenceNumber value.
     */
    @Generated
    public int getFirstSequenceNumber() {
        return this.firstSequenceNumber;
    }

    /**
     * Get the lastSequenceNumber property: The last sequence number from the queue.
     * 
     * @return the lastSequenceNumber value.
     */
    @Generated
    public int getLastSequenceNumber() {
        return this.lastSequenceNumber;
    }

    /**
     * Get the firstEnqueueTime property: The first time from the queue.
     * 
     * @return the firstEnqueueTime value.
     */
    @Generated
    public OffsetDateTime getFirstEnqueueTime() {
        return this.firstEnqueueTime;
    }

    /**
     * Get the lastEnqueueTime property: The last time from the queue.
     * 
     * @return the lastEnqueueTime value.
     */
    @Generated
    public OffsetDateTime getLastEnqueueTime() {
        return this.lastEnqueueTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("fileUrl", this.fileUrl);
        jsonWriter.writeStringField("fileType", this.fileType);
        jsonWriter.writeStringField("partitionId", this.partitionId);
        jsonWriter.writeIntField("sizeInBytes", this.sizeInBytes);
        jsonWriter.writeIntField("eventCount", this.eventCount);
        jsonWriter.writeIntField("firstSequenceNumber", this.firstSequenceNumber);
        jsonWriter.writeIntField("lastSequenceNumber", this.lastSequenceNumber);
        jsonWriter.writeStringField("firstEnqueueTime",
            this.firstEnqueueTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.firstEnqueueTime));
        jsonWriter.writeStringField("lastEnqueueTime",
            this.lastEnqueueTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastEnqueueTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventHubCaptureFileCreatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventHubCaptureFileCreatedEventData if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EventHubCaptureFileCreatedEventData.
     */
    @Generated
    public static EventHubCaptureFileCreatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String fileUrl = null;
            String fileType = null;
            String partitionId = null;
            int sizeInBytes = 0;
            int eventCount = 0;
            int firstSequenceNumber = 0;
            int lastSequenceNumber = 0;
            OffsetDateTime firstEnqueueTime = null;
            OffsetDateTime lastEnqueueTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("fileUrl".equals(fieldName)) {
                    fileUrl = reader.getString();
                } else if ("fileType".equals(fieldName)) {
                    fileType = reader.getString();
                } else if ("partitionId".equals(fieldName)) {
                    partitionId = reader.getString();
                } else if ("sizeInBytes".equals(fieldName)) {
                    sizeInBytes = reader.getInt();
                } else if ("eventCount".equals(fieldName)) {
                    eventCount = reader.getInt();
                } else if ("firstSequenceNumber".equals(fieldName)) {
                    firstSequenceNumber = reader.getInt();
                } else if ("lastSequenceNumber".equals(fieldName)) {
                    lastSequenceNumber = reader.getInt();
                } else if ("firstEnqueueTime".equals(fieldName)) {
                    firstEnqueueTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastEnqueueTime".equals(fieldName)) {
                    lastEnqueueTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return new EventHubCaptureFileCreatedEventData(fileUrl, fileType, partitionId, sizeInBytes, eventCount,
                firstSequenceNumber, lastSequenceNumber, firstEnqueueTime, lastEnqueueTime);
        });
    }
}
