// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.RunStatusChanged event.
 */
@Immutable
public final class MachineLearningServicesRunStatusChangedEventData
    implements JsonSerializable<MachineLearningServicesRunStatusChangedEventData> {
    /*
     * The ID of the experiment that the Machine Learning Run belongs to.
     */
    @Generated
    private String experimentId;

    /*
     * The name of the experiment that the Machine Learning Run belongs to.
     */
    @Generated
    private String experimentName;

    /*
     * The ID of the Machine Learning Run.
     */
    @Generated
    private String runId;

    /*
     * The Run Type of the Machine Learning Run.
     */
    @Generated
    private String runType;

    /*
     * The tags of the Machine Learning Run.
     */
    @Generated
    private Map<String, String> runTags;

    /*
     * The properties of the Machine Learning Run.
     */
    @Generated
    private Map<String, String> runProperties;

    /*
     * The status of the Machine Learning Run.
     */
    @Generated
    private String runStatus;

    /**
     * Creates an instance of MachineLearningServicesRunStatusChangedEventData class.
     */
    @Generated
    private MachineLearningServicesRunStatusChangedEventData() {
    }

    /**
     * Get the experimentId property: The ID of the experiment that the Machine Learning Run belongs to.
     * 
     * @return the experimentId value.
     */
    @Generated
    public String getExperimentId() {
        return this.experimentId;
    }

    /**
     * Get the experimentName property: The name of the experiment that the Machine Learning Run belongs to.
     * 
     * @return the experimentName value.
     */
    @Generated
    public String getExperimentName() {
        return this.experimentName;
    }

    /**
     * Get the runId property: The ID of the Machine Learning Run.
     * 
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the runType property: The Run Type of the Machine Learning Run.
     * 
     * @return the runType value.
     */
    @Generated
    public String getRunType() {
        return this.runType;
    }

    /**
     * Get the runTags property: The tags of the Machine Learning Run.
     * 
     * @return the runTags value.
     */
    @Generated
    public Map<String, String> getRunTags() {
        return this.runTags;
    }

    /**
     * Get the runProperties property: The properties of the Machine Learning Run.
     * 
     * @return the runProperties value.
     */
    @Generated
    public Map<String, String> getRunProperties() {
        return this.runProperties;
    }

    /**
     * Get the runStatus property: The status of the Machine Learning Run.
     * 
     * @return the runStatus value.
     */
    @Generated
    public String getRunStatus() {
        return this.runStatus;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("experimentId", this.experimentId);
        jsonWriter.writeStringField("experimentName", this.experimentName);
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("runType", this.runType);
        jsonWriter.writeMapField("runTags", this.runTags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeMapField("runProperties", this.runProperties, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("runStatus", this.runStatus);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineLearningServicesRunStatusChangedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineLearningServicesRunStatusChangedEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MachineLearningServicesRunStatusChangedEventData.
     */
    @Generated
    public static MachineLearningServicesRunStatusChangedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MachineLearningServicesRunStatusChangedEventData deserializedMachineLearningServicesRunStatusChangedEventData
                = new MachineLearningServicesRunStatusChangedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("experimentId".equals(fieldName)) {
                    deserializedMachineLearningServicesRunStatusChangedEventData.experimentId = reader.getString();
                } else if ("experimentName".equals(fieldName)) {
                    deserializedMachineLearningServicesRunStatusChangedEventData.experimentName = reader.getString();
                } else if ("runId".equals(fieldName)) {
                    deserializedMachineLearningServicesRunStatusChangedEventData.runId = reader.getString();
                } else if ("runType".equals(fieldName)) {
                    deserializedMachineLearningServicesRunStatusChangedEventData.runType = reader.getString();
                } else if ("runTags".equals(fieldName)) {
                    Map<String, String> runTags = reader.readMap(reader1 -> reader1.getString());
                    deserializedMachineLearningServicesRunStatusChangedEventData.runTags = runTags;
                } else if ("runProperties".equals(fieldName)) {
                    Map<String, String> runProperties = reader.readMap(reader1 -> reader1.getString());
                    deserializedMachineLearningServicesRunStatusChangedEventData.runProperties = runProperties;
                } else if ("runStatus".equals(fieldName)) {
                    deserializedMachineLearningServicesRunStatusChangedEventData.runStatus = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMachineLearningServicesRunStatusChangedEventData;
        });
    }
}
