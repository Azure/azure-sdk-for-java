// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Schema of the Data property of an EventGridEvent for a Geofence event (GeofenceEntered, GeofenceExited,
 * GeofenceResult).
 */
@Immutable
public class MapsGeofenceEventProperties implements JsonSerializable<MapsGeofenceEventProperties> {
    /*
     * Lists of the geometry ID of the geofence which is expired relative to the user time in the request.
     */
    @Generated
    private final List<String> expiredGeofenceGeometryId;

    /*
     * Lists the fence geometries that either fully contain the coordinate position or have an overlap with the
     * searchBuffer around the fence.
     */
    @Generated
    private final List<MapsGeofenceGeometry> geometries;

    /*
     * Lists of the geometry ID of the geofence which is in invalid period relative to the user time in the request.
     */
    @Generated
    private final List<String> invalidPeriodGeofenceGeometryId;

    /*
     * True if at least one event is published to the Azure Maps event subscriber, false if no event is published to the
     * Azure Maps event subscriber.
     */
    @Generated
    private final boolean isEventPublished;

    /**
     * Creates an instance of MapsGeofenceEventProperties class.
     * 
     * @param expiredGeofenceGeometryId the expiredGeofenceGeometryId value to set.
     * @param geometries the geometries value to set.
     * @param invalidPeriodGeofenceGeometryId the invalidPeriodGeofenceGeometryId value to set.
     * @param isEventPublished the isEventPublished value to set.
     */
    @Generated
    protected MapsGeofenceEventProperties(List<String> expiredGeofenceGeometryId, List<MapsGeofenceGeometry> geometries,
        List<String> invalidPeriodGeofenceGeometryId, boolean isEventPublished) {
        this.expiredGeofenceGeometryId = expiredGeofenceGeometryId;
        this.geometries = geometries;
        this.invalidPeriodGeofenceGeometryId = invalidPeriodGeofenceGeometryId;
        this.isEventPublished = isEventPublished;
    }

    /**
     * Get the expiredGeofenceGeometryId property: Lists of the geometry ID of the geofence which is expired relative to
     * the user time in the request.
     * 
     * @return the expiredGeofenceGeometryId value.
     */
    @Generated
    public List<String> getExpiredGeofenceGeometryId() {
        return this.expiredGeofenceGeometryId;
    }

    /**
     * Get the geometries property: Lists the fence geometries that either fully contain the coordinate position or have
     * an overlap with the searchBuffer around the fence.
     * 
     * @return the geometries value.
     */
    @Generated
    public List<MapsGeofenceGeometry> getGeometries() {
        return this.geometries;
    }

    /**
     * Get the invalidPeriodGeofenceGeometryId property: Lists of the geometry ID of the geofence which is in invalid
     * period relative to the user time in the request.
     * 
     * @return the invalidPeriodGeofenceGeometryId value.
     */
    @Generated
    public List<String> getInvalidPeriodGeofenceGeometryId() {
        return this.invalidPeriodGeofenceGeometryId;
    }

    /**
     * Get the isEventPublished property: True if at least one event is published to the Azure Maps event subscriber,
     * false if no event is published to the Azure Maps event subscriber.
     * 
     * @return the isEventPublished value.
     */
    @Generated
    public boolean isEventPublished() {
        return this.isEventPublished;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("expiredGeofenceGeometryId", this.expiredGeofenceGeometryId,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("geometries", this.geometries, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("invalidPeriodGeofenceGeometryId", this.invalidPeriodGeofenceGeometryId,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeBooleanField("isEventPublished", this.isEventPublished);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MapsGeofenceEventProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MapsGeofenceEventProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MapsGeofenceEventProperties.
     */
    @Generated
    public static MapsGeofenceEventProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> expiredGeofenceGeometryId = null;
            List<MapsGeofenceGeometry> geometries = null;
            List<String> invalidPeriodGeofenceGeometryId = null;
            boolean isEventPublished = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("expiredGeofenceGeometryId".equals(fieldName)) {
                    expiredGeofenceGeometryId = reader.readArray(reader1 -> reader1.getString());
                } else if ("geometries".equals(fieldName)) {
                    geometries = reader.readArray(reader1 -> MapsGeofenceGeometry.fromJson(reader1));
                } else if ("invalidPeriodGeofenceGeometryId".equals(fieldName)) {
                    invalidPeriodGeofenceGeometryId = reader.readArray(reader1 -> reader1.getString());
                } else if ("isEventPublished".equals(fieldName)) {
                    isEventPublished = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new MapsGeofenceEventProperties(expiredGeofenceGeometryId, geometries,
                invalidPeriodGeofenceGeometryId, isEventPublished);
        });
    }
}
