// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for an Microsoft.Storage.StorageTaskCompleted event.
 */
@Immutable
public final class StorageTaskCompletedEventData implements JsonSerializable<StorageTaskCompletedEventData> {

    /*
     * The status for a storage task.
     */
    @Generated
    private final StorageTaskCompletedStatus status;

    /*
     * The time at which a storage task was completed.
     */
    @Generated
    private final OffsetDateTime completedDateTime;

    /*
     * The execution id for a storage task.
     */
    @Generated
    private String taskExecutionId;

    /*
     * The task name for a storage task.
     */
    @Generated
    private String taskName;

    /*
     * The summary report blob url for a storage task
     */
    @Generated
    private final String summaryReportBlobUri;

    /**
     * Creates an instance of StorageTaskCompletedEventData class.
     *
     * @param status the status value to set.
     * @param completedDateTime the completedDateTime value to set.
     * @param summaryReportBlobUri the summaryReportBlobUri value to set.
     */
    @Generated
    private StorageTaskCompletedEventData(StorageTaskCompletedStatus status, OffsetDateTime completedDateTime,
        String summaryReportBlobUri) {
        this.status = status;
        this.completedDateTime = completedDateTime;
        this.summaryReportBlobUri = summaryReportBlobUri;
    }

    /**
     * Get the status property: The status for a storage task.
     *
     * @return the status value.
     */
    @Generated
    public StorageTaskCompletedStatus getStatus() {
        return this.status;
    }

    /**
     * Get the completedDateTime property: The time at which a storage task was completed.
     *
     * @return the completedDateTime value.
     */
    @Generated
    public OffsetDateTime getCompletedDateTime() {
        return this.completedDateTime;
    }

    /**
     * Get the taskExecutionId property: The execution id for a storage task.
     *
     * @return the taskExecutionId value.
     */
    @Generated
    public String getTaskExecutionId() {
        return this.taskExecutionId;
    }

    /**
     * Get the taskName property: The task name for a storage task.
     *
     * @return the taskName value.
     */
    @Generated
    public String getTaskName() {
        return this.taskName;
    }

    /**
     * Get the summaryReportBlobUri property: The summary report blob url for a storage task.
     *
     * @return the summaryReportBlobUri value.
     */
    @Generated
    public String getSummaryReportBlobUri() {
        return this.summaryReportBlobUri;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("completedDateTime",
            this.completedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.completedDateTime));
        jsonWriter.writeStringField("summaryReportBlobUrl", this.summaryReportBlobUri);
        jsonWriter.writeStringField("taskExecutionId", this.taskExecutionId);
        jsonWriter.writeStringField("taskName", this.taskName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageTaskCompletedEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageTaskCompletedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageTaskCompletedEventData.
     */
    @Generated
    public static StorageTaskCompletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageTaskCompletedStatus status = null;
            OffsetDateTime completedDateTime = null;
            String summaryReportBlobUri = null;
            String taskExecutionId = null;
            String taskName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("status".equals(fieldName)) {
                    status = StorageTaskCompletedStatus.fromString(reader.getString());
                } else if ("completedDateTime".equals(fieldName)) {
                    completedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("summaryReportBlobUrl".equals(fieldName)) {
                    summaryReportBlobUri = reader.getString();
                } else if ("taskExecutionId".equals(fieldName)) {
                    taskExecutionId = reader.getString();
                } else if ("taskName".equals(fieldName)) {
                    taskName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            StorageTaskCompletedEventData deserializedStorageTaskCompletedEventData
                = new StorageTaskCompletedEventData(status, completedDateTime, summaryReportBlobUri);
            deserializedStorageTaskCompletedEventData.taskExecutionId = taskExecutionId;
            deserializedStorageTaskCompletedEventData.taskName = taskName;
            return deserializedStorageTaskCompletedEventData;
        });
    }
}
