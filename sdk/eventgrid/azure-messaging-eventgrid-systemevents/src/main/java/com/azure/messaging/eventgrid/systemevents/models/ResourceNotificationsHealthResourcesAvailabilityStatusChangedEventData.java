// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.ResourceNotifications.HealthResources.AvailabilityStatusChanged
 * event.
 */
@Immutable
public final class ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData
    extends ResourceNotificationsResourceUpdatedEventData {
    /**
     * Creates an instance of ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData class.
     */
    @Generated
    private ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData() {
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("resourceInfo", getResourceDetails());
        jsonWriter.writeJsonField("operationalInfo", getOperationalDetails());
        jsonWriter.writeStringField("apiVersion", getApiVersion());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData if the JsonReader
     * was pointing to an instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the
     * ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData.
     */
    @Generated
    public static ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData deserializedResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData
                = new ResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceInfo".equals(fieldName)) {
                    deserializedResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData
                        .setResourceDetails(ResourceNotificationsResourceUpdatedDetails.fromJson(reader));
                } else if ("operationalInfo".equals(fieldName)) {
                    deserializedResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData
                        .setOperationalDetails(ResourceNotificationsOperationalDetails.fromJson(reader));
                } else if ("apiVersion".equals(fieldName)) {
                    deserializedResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData
                        .setApiVersion(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceNotificationsHealthResourcesAvailabilityStatusChangedEventData;
        });
    }
}
