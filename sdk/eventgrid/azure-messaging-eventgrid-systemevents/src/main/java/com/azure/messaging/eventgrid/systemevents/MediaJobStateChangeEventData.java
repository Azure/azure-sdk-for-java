// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * Schema of the Data property of an EventGridEvent for a
 * Microsoft.Media.JobStateChange event.
 */
@Immutable
public class MediaJobStateChangeEventData implements JsonSerializable<MediaJobStateChangeEventData> {
    /*
     * The previous state of the Job.
     */
    @Generated
    private final MediaJobState previousState;

    /*
     * The new state of the Job.
     */
    @Generated
    private final MediaJobState state;

    /*
     * Gets the Job correlation data.
     */
    @Generated
    private final Map<String, String> correlationData;

    /**
     * Creates an instance of MediaJobStateChangeEventData class.
     * 
     * @param previousState the previousState value to set.
     * @param state the state value to set.
     * @param correlationData the correlationData value to set.
     */
    @Generated
    protected MediaJobStateChangeEventData(MediaJobState previousState, MediaJobState state,
        Map<String, String> correlationData) {
        this.previousState = previousState;
        this.state = state;
        this.correlationData = correlationData;
    }

    /**
     * Get the previousState property: The previous state of the Job.
     * 
     * @return the previousState value.
     */
    @Generated
    public MediaJobState getPreviousState() {
        return this.previousState;
    }

    /**
     * Get the state property: The new state of the Job.
     * 
     * @return the state value.
     */
    @Generated
    public MediaJobState getState() {
        return this.state;
    }

    /**
     * Get the correlationData property: Gets the Job correlation data.
     * 
     * @return the correlationData value.
     */
    @Generated
    public Map<String, String> getCorrelationData() {
        return this.correlationData;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("previousState", this.previousState == null ? null : this.previousState.toString());
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeMapField("correlationData", this.correlationData,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaJobStateChangeEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaJobStateChangeEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaJobStateChangeEventData.
     */
    @Generated
    public static MediaJobStateChangeEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MediaJobState previousState = null;
            MediaJobState state = null;
            Map<String, String> correlationData = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("previousState".equals(fieldName)) {
                    previousState = MediaJobState.fromString(reader.getString());
                } else if ("state".equals(fieldName)) {
                    state = MediaJobState.fromString(reader.getString());
                } else if ("correlationData".equals(fieldName)) {
                    correlationData = reader.readMap(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new MediaJobStateChangeEventData(previousState, state, correlationData);
        });
    }
}
