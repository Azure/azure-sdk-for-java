// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Message Interactive Content.
 */
@Immutable
public final class AcsMessageInteractiveContent implements JsonSerializable<AcsMessageInteractiveContent> {
    /*
     * The Message interactive reply type
     */
    @Generated
    private final AcsInteractiveReplyKind type;

    /*
     * The Message Sent when a customer clicks a button
     */
    @Generated
    private final AcsMessageInteractiveButtonReplyContent buttonReply;

    /*
     * The Message Sent when a customer selects an item from a list
     */
    @Generated
    private final AcsMessageInteractiveListReplyContent listReply;

    /**
     * Creates an instance of AcsMessageInteractiveContent class.
     * 
     * @param type the type value to set.
     * @param buttonReply the buttonReply value to set.
     * @param listReply the listReply value to set.
     */
    @Generated
    private AcsMessageInteractiveContent(AcsInteractiveReplyKind type,
        AcsMessageInteractiveButtonReplyContent buttonReply, AcsMessageInteractiveListReplyContent listReply) {
        this.type = type;
        this.buttonReply = buttonReply;
        this.listReply = listReply;
    }

    /**
     * Get the type property: The Message interactive reply type.
     * 
     * @return the type value.
     */
    @Generated
    public AcsInteractiveReplyKind getType() {
        return this.type;
    }

    /**
     * Get the buttonReply property: The Message Sent when a customer clicks a button.
     * 
     * @return the buttonReply value.
     */
    @Generated
    public AcsMessageInteractiveButtonReplyContent getButtonReply() {
        return this.buttonReply;
    }

    /**
     * Get the listReply property: The Message Sent when a customer selects an item from a list.
     * 
     * @return the listReply value.
     */
    @Generated
    public AcsMessageInteractiveListReplyContent getListReply() {
        return this.listReply;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeJsonField("buttonReply", this.buttonReply);
        jsonWriter.writeJsonField("listReply", this.listReply);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsMessageInteractiveContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsMessageInteractiveContent if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsMessageInteractiveContent.
     */
    @Generated
    public static AcsMessageInteractiveContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsInteractiveReplyKind type = null;
            AcsMessageInteractiveButtonReplyContent buttonReply = null;
            AcsMessageInteractiveListReplyContent listReply = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    type = AcsInteractiveReplyKind.fromString(reader.getString());
                } else if ("buttonReply".equals(fieldName)) {
                    buttonReply = AcsMessageInteractiveButtonReplyContent.fromJson(reader);
                } else if ("listReply".equals(fieldName)) {
                    listReply = AcsMessageInteractiveListReplyContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new AcsMessageInteractiveContent(type, buttonReply, listReply);
        });
    }
}
