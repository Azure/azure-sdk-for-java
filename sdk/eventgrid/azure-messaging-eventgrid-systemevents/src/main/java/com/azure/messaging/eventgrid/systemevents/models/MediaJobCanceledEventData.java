// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * Job canceled event data. Schema of the data property of an EventGridEvent for a
 * Microsoft.Media.JobCanceled event.
 */
@Immutable
public final class MediaJobCanceledEventData extends MediaJobStateChangeEventData {
    /*
     * Gets the Job outputs.
     */
    @Generated
    private List<MediaJobOutput> outputs;

    /**
     * Creates an instance of MediaJobCanceledEventData class.
     */
    @Generated
    private MediaJobCanceledEventData() {
    }

    /**
     * Get the outputs property: Gets the Job outputs.
     * 
     * @return the outputs value.
     */
    @Generated
    public List<MediaJobOutput> getOutputs() {
        return this.outputs;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("correlationData", getCorrelationData(),
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("outputs", this.outputs, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaJobCanceledEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaJobCanceledEventData if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MediaJobCanceledEventData.
     */
    @Generated
    public static MediaJobCanceledEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MediaJobCanceledEventData deserializedMediaJobCanceledEventData = new MediaJobCanceledEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("previousState".equals(fieldName)) {
                    deserializedMediaJobCanceledEventData
                        .setPreviousState(MediaJobState.fromString(reader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedMediaJobCanceledEventData.setState(MediaJobState.fromString(reader.getString()));
                } else if ("correlationData".equals(fieldName)) {
                    Map<String, String> correlationData = reader.readMap(reader1 -> reader1.getString());
                    deserializedMediaJobCanceledEventData.setCorrelationData(correlationData);
                } else if ("outputs".equals(fieldName)) {
                    List<MediaJobOutput> outputs = reader.readArray(reader1 -> MediaJobOutput.fromJson(reader1));
                    deserializedMediaJobCanceledEventData.outputs = outputs;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMediaJobCanceledEventData;
        });
    }
}
