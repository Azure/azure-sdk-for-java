// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.MachineLearningServices.DatasetDriftDetected event.
 */
@Immutable
public final class MachineLearningServicesDatasetDriftDetectedEventData
    implements JsonSerializable<MachineLearningServicesDatasetDriftDetectedEventData> {
    /*
     * The ID of the data drift monitor that triggered the event.
     */
    @Generated
    private String dataDriftId;

    /*
     * The name of the data drift monitor that triggered the event.
     */
    @Generated
    private String dataDriftName;

    /*
     * The ID of the Run that detected data drift.
     */
    @Generated
    private String runId;

    /*
     * The ID of the base Dataset used to detect drift.
     */
    @Generated
    private String baseDatasetId;

    /*
     * The ID of the target Dataset used to detect drift.
     */
    @Generated
    private String targetDatasetId;

    /*
     * The coefficient result that triggered the event.
     */
    @Generated
    private Double driftCoefficient;

    /*
     * The start time of the target dataset time series that resulted in drift detection.
     */
    @Generated
    private final OffsetDateTime startTime;

    /*
     * The end time of the target dataset time series that resulted in drift detection.
     */
    @Generated
    private final OffsetDateTime endTime;

    /**
     * Creates an instance of MachineLearningServicesDatasetDriftDetectedEventData class.
     * 
     * @param startTime the startTime value to set.
     * @param endTime the endTime value to set.
     */
    @Generated
    private MachineLearningServicesDatasetDriftDetectedEventData(OffsetDateTime startTime, OffsetDateTime endTime) {
        this.startTime = startTime;
        this.endTime = endTime;
    }

    /**
     * Get the dataDriftId property: The ID of the data drift monitor that triggered the event.
     * 
     * @return the dataDriftId value.
     */
    @Generated
    public String getDataDriftId() {
        return this.dataDriftId;
    }

    /**
     * Get the dataDriftName property: The name of the data drift monitor that triggered the event.
     * 
     * @return the dataDriftName value.
     */
    @Generated
    public String getDataDriftName() {
        return this.dataDriftName;
    }

    /**
     * Get the runId property: The ID of the Run that detected data drift.
     * 
     * @return the runId value.
     */
    @Generated
    public String getRunId() {
        return this.runId;
    }

    /**
     * Get the baseDatasetId property: The ID of the base Dataset used to detect drift.
     * 
     * @return the baseDatasetId value.
     */
    @Generated
    public String getBaseDatasetId() {
        return this.baseDatasetId;
    }

    /**
     * Get the targetDatasetId property: The ID of the target Dataset used to detect drift.
     * 
     * @return the targetDatasetId value.
     */
    @Generated
    public String getTargetDatasetId() {
        return this.targetDatasetId;
    }

    /**
     * Get the driftCoefficient property: The coefficient result that triggered the event.
     * 
     * @return the driftCoefficient value.
     */
    @Generated
    public Double getDriftCoefficient() {
        return this.driftCoefficient;
    }

    /**
     * Get the startTime property: The start time of the target dataset time series that resulted in drift detection.
     * 
     * @return the startTime value.
     */
    @Generated
    public OffsetDateTime getStartTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of the target dataset time series that resulted in drift detection.
     * 
     * @return the endTime value.
     */
    @Generated
    public OffsetDateTime getEndTime() {
        return this.endTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("dataDriftId", this.dataDriftId);
        jsonWriter.writeStringField("dataDriftName", this.dataDriftName);
        jsonWriter.writeStringField("runId", this.runId);
        jsonWriter.writeStringField("baseDatasetId", this.baseDatasetId);
        jsonWriter.writeStringField("targetDatasetId", this.targetDatasetId);
        jsonWriter.writeNumberField("driftCoefficient", this.driftCoefficient);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MachineLearningServicesDatasetDriftDetectedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MachineLearningServicesDatasetDriftDetectedEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MachineLearningServicesDatasetDriftDetectedEventData.
     */
    @Generated
    public static MachineLearningServicesDatasetDriftDetectedEventData fromJson(JsonReader jsonReader)
        throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime startTime = null;
            OffsetDateTime endTime = null;
            String dataDriftId = null;
            String dataDriftName = null;
            String runId = null;
            String baseDatasetId = null;
            String targetDatasetId = null;
            Double driftCoefficient = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("dataDriftId".equals(fieldName)) {
                    dataDriftId = reader.getString();
                } else if ("dataDriftName".equals(fieldName)) {
                    dataDriftName = reader.getString();
                } else if ("runId".equals(fieldName)) {
                    runId = reader.getString();
                } else if ("baseDatasetId".equals(fieldName)) {
                    baseDatasetId = reader.getString();
                } else if ("targetDatasetId".equals(fieldName)) {
                    targetDatasetId = reader.getString();
                } else if ("driftCoefficient".equals(fieldName)) {
                    driftCoefficient = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            MachineLearningServicesDatasetDriftDetectedEventData deserializedMachineLearningServicesDatasetDriftDetectedEventData
                = new MachineLearningServicesDatasetDriftDetectedEventData(startTime, endTime);
            deserializedMachineLearningServicesDatasetDriftDetectedEventData.dataDriftId = dataDriftId;
            deserializedMachineLearningServicesDatasetDriftDetectedEventData.dataDriftName = dataDriftName;
            deserializedMachineLearningServicesDatasetDriftDetectedEventData.runId = runId;
            deserializedMachineLearningServicesDatasetDriftDetectedEventData.baseDatasetId = baseDatasetId;
            deserializedMachineLearningServicesDatasetDriftDetectedEventData.targetDatasetId = targetDatasetId;
            deserializedMachineLearningServicesDatasetDriftDetectedEventData.driftCoefficient = driftCoefficient;

            return deserializedMachineLearningServicesDatasetDriftDetectedEventData;
        });
    }
}
