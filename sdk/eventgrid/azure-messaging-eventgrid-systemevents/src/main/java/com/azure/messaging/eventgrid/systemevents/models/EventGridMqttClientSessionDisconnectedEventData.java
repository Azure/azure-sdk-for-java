// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Event data for Microsoft.EventGrid.SystemEvents.MQTTClientSessionDisconnected event.
 */
@Immutable
public final class EventGridMqttClientSessionDisconnectedEventData
    implements JsonSerializable<EventGridMqttClientSessionDisconnectedEventData> {
    /*
     * Unique identifier for the MQTT client that the client presents to the service
     * for authentication. This case-sensitive string can be up to 128 characters
     * long, and supports UTF-8 characters.
     */
    @Generated
    private String clientAuthenticationName;

    /*
     * Name of the client resource in the Event Grid namespace.
     */
    @Generated
    private String clientName;

    /*
     * Name of the Event Grid namespace where the MQTT client was created or updated.
     */
    @Generated
    private String namespaceName;

    /*
     * Unique identifier for the MQTT client's session. This case-sensitive string can
     * be up to 128 characters long, and supports UTF-8 characters.
     */
    @Generated
    private String clientSessionName;

    /*
     * A number that helps indicate order of MQTT client session connected or
     * disconnected events. Latest event will have a sequence number that is higher
     * than the previous event.
     */
    @Generated
    private Long sequenceNumber;

    /*
     * Reason for the disconnection of the MQTT client's session. The value could be
     * one of the values in the disconnection reasons table.
     */
    @Generated
    private EventGridMqttClientDisconnectionReason disconnectionReason;

    /**
     * Creates an instance of EventGridMqttClientSessionDisconnectedEventData class.
     */
    @Generated
    private EventGridMqttClientSessionDisconnectedEventData() {
    }

    /**
     * Get the clientAuthenticationName property: Unique identifier for the MQTT client that the client presents to the
     * service
     * for authentication. This case-sensitive string can be up to 128 characters
     * long, and supports UTF-8 characters.
     * 
     * @return the clientAuthenticationName value.
     */
    @Generated
    public String getClientAuthenticationName() {
        return this.clientAuthenticationName;
    }

    /**
     * Get the clientName property: Name of the client resource in the Event Grid namespace.
     * 
     * @return the clientName value.
     */
    @Generated
    public String getClientName() {
        return this.clientName;
    }

    /**
     * Get the namespaceName property: Name of the Event Grid namespace where the MQTT client was created or updated.
     * 
     * @return the namespaceName value.
     */
    @Generated
    public String getNamespaceName() {
        return this.namespaceName;
    }

    /**
     * Get the clientSessionName property: Unique identifier for the MQTT client's session. This case-sensitive string
     * can
     * be up to 128 characters long, and supports UTF-8 characters.
     * 
     * @return the clientSessionName value.
     */
    @Generated
    public String getClientSessionName() {
        return this.clientSessionName;
    }

    /**
     * Get the sequenceNumber property: A number that helps indicate order of MQTT client session connected or
     * disconnected events. Latest event will have a sequence number that is higher
     * than the previous event.
     * 
     * @return the sequenceNumber value.
     */
    @Generated
    public Long getSequenceNumber() {
        return this.sequenceNumber;
    }

    /**
     * Get the disconnectionReason property: Reason for the disconnection of the MQTT client's session. The value could
     * be
     * one of the values in the disconnection reasons table.
     * 
     * @return the disconnectionReason value.
     */
    @Generated
    public EventGridMqttClientDisconnectionReason getDisconnectionReason() {
        return this.disconnectionReason;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("clientAuthenticationName", this.clientAuthenticationName);
        jsonWriter.writeStringField("clientName", this.clientName);
        jsonWriter.writeStringField("namespaceName", this.namespaceName);
        jsonWriter.writeStringField("clientSessionName", this.clientSessionName);
        jsonWriter.writeNumberField("sequenceNumber", this.sequenceNumber);
        jsonWriter.writeStringField("disconnectionReason",
            this.disconnectionReason == null ? null : this.disconnectionReason.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EventGridMqttClientSessionDisconnectedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EventGridMqttClientSessionDisconnectedEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EventGridMqttClientSessionDisconnectedEventData.
     */
    @Generated
    public static EventGridMqttClientSessionDisconnectedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EventGridMqttClientSessionDisconnectedEventData deserializedEventGridMqttClientSessionDisconnectedEventData
                = new EventGridMqttClientSessionDisconnectedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("clientAuthenticationName".equals(fieldName)) {
                    deserializedEventGridMqttClientSessionDisconnectedEventData.clientAuthenticationName
                        = reader.getString();
                } else if ("clientName".equals(fieldName)) {
                    deserializedEventGridMqttClientSessionDisconnectedEventData.clientName = reader.getString();
                } else if ("namespaceName".equals(fieldName)) {
                    deserializedEventGridMqttClientSessionDisconnectedEventData.namespaceName = reader.getString();
                } else if ("clientSessionName".equals(fieldName)) {
                    deserializedEventGridMqttClientSessionDisconnectedEventData.clientSessionName = reader.getString();
                } else if ("sequenceNumber".equals(fieldName)) {
                    deserializedEventGridMqttClientSessionDisconnectedEventData.sequenceNumber
                        = reader.getNullable(JsonReader::getLong);
                } else if ("disconnectionReason".equals(fieldName)) {
                    deserializedEventGridMqttClientSessionDisconnectedEventData.disconnectionReason
                        = EventGridMqttClientDisconnectionReason.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEventGridMqttClientSessionDisconnectedEventData;
        });
    }
}
