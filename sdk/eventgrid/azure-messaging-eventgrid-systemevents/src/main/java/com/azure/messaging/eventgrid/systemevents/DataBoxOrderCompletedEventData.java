// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.DataBox.OrderCompleted event.
 */
@Immutable
public final class DataBoxOrderCompletedEventData implements JsonSerializable<DataBoxOrderCompletedEventData> {
    /*
     * Serial Number of the device associated with the event. The list is comma separated if more than one serial number
     * is associated.
     */
    @Generated
    private final String serialNumber;

    /*
     * Name of the current Stage
     */
    @Generated
    private final DataBoxStageName stageName;

    /*
     * The time at which the stage happened.
     */
    @Generated
    private final OffsetDateTime stageTime;

    /**
     * Creates an instance of DataBoxOrderCompletedEventData class.
     * 
     * @param serialNumber the serialNumber value to set.
     * @param stageName the stageName value to set.
     * @param stageTime the stageTime value to set.
     */
    @Generated
    private DataBoxOrderCompletedEventData(String serialNumber, DataBoxStageName stageName, OffsetDateTime stageTime) {
        this.serialNumber = serialNumber;
        this.stageName = stageName;
        this.stageTime = stageTime;
    }

    /**
     * Get the serialNumber property: Serial Number of the device associated with the event. The list is comma separated
     * if more than one serial number is associated.
     * 
     * @return the serialNumber value.
     */
    @Generated
    public String getSerialNumber() {
        return this.serialNumber;
    }

    /**
     * Get the stageName property: Name of the current Stage.
     * 
     * @return the stageName value.
     */
    @Generated
    public DataBoxStageName getStageName() {
        return this.stageName;
    }

    /**
     * Get the stageTime property: The time at which the stage happened.
     * 
     * @return the stageTime value.
     */
    @Generated
    public OffsetDateTime getStageTime() {
        return this.stageTime;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("serialNumber", this.serialNumber);
        jsonWriter.writeStringField("stageName", this.stageName == null ? null : this.stageName.toString());
        jsonWriter.writeStringField("stageTime",
            this.stageTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.stageTime));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DataBoxOrderCompletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DataBoxOrderCompletedEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DataBoxOrderCompletedEventData.
     */
    @Generated
    public static DataBoxOrderCompletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String serialNumber = null;
            DataBoxStageName stageName = null;
            OffsetDateTime stageTime = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serialNumber".equals(fieldName)) {
                    serialNumber = reader.getString();
                } else if ("stageName".equals(fieldName)) {
                    stageName = DataBoxStageName.fromString(reader.getString());
                } else if ("stageTime".equals(fieldName)) {
                    stageTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }
            return new DataBoxOrderCompletedEventData(serialNumber, stageName, stageTime);
        });
    }
}
