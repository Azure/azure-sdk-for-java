// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Channel Archive heartbeat event data. Schema of the data property of an EventGridEvent for a
 * Microsoft.Media.LiveEventChannelArchiveHeartbeat event.
 */
@Immutable
public final class MediaLiveEventChannelArchiveHeartbeatEventData
    implements JsonSerializable<MediaLiveEventChannelArchiveHeartbeatEventData> {
    /*
     * Gets the channel latency in ms.
     */
    @Generated
    private final String channelLatencyMs;

    /*
     * Gets the latency result code.
     */
    @Generated
    private final String latencyResultCode;

    /**
     * Creates an instance of MediaLiveEventChannelArchiveHeartbeatEventData class.
     * 
     * @param channelLatencyMs the channelLatencyMs value to set.
     * @param latencyResultCode the latencyResultCode value to set.
     */
    @Generated
    private MediaLiveEventChannelArchiveHeartbeatEventData(String channelLatencyMs, String latencyResultCode) {
        this.channelLatencyMs = channelLatencyMs;
        this.latencyResultCode = latencyResultCode;
    }

    /**
     * Get the channelLatencyMs property: Gets the channel latency in ms.
     * 
     * @return the channelLatencyMs value.
     */
    @Generated
    public String getChannelLatencyMs() {
        return this.channelLatencyMs;
    }

    /**
     * Get the latencyResultCode property: Gets the latency result code.
     * 
     * @return the latencyResultCode value.
     */
    @Generated
    public String getLatencyResultCode() {
        return this.latencyResultCode;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("channelLatencyMs", this.channelLatencyMs);
        jsonWriter.writeStringField("latencyResultCode", this.latencyResultCode);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaLiveEventChannelArchiveHeartbeatEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaLiveEventChannelArchiveHeartbeatEventData if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaLiveEventChannelArchiveHeartbeatEventData.
     */
    @Generated
    public static MediaLiveEventChannelArchiveHeartbeatEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String channelLatencyMs = null;
            String latencyResultCode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("channelLatencyMs".equals(fieldName)) {
                    channelLatencyMs = reader.getString();
                } else if ("latencyResultCode".equals(fieldName)) {
                    latencyResultCode = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new MediaLiveEventChannelArchiveHeartbeatEventData(channelLatencyMs, latencyResultCode);
        });
    }
}
