// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.messaging.eventgrid.implementation.models.AcsMessageChannelEventError;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.AdvancedMessageReceived event.
 */
@Immutable
public final class AcsMessageReceivedEventData extends AcsMessageEventData {
    /*
     * The message content
     */
    @Generated
    private String content;

    /*
     * The message channel type
     */
    @Generated
    private final AcsMessageChannelKind channelType;

    /*
     * The received message media content
     */
    @Generated
    private final AcsMessageMediaContent media;

    /*
     * The received message context
     */
    @Generated
    private final AcsMessageContext context;

    /*
     * The received message button content
     */
    @Generated
    private final AcsMessageButtonContent button;

    /*
     * The received message interactive content
     */
    @Generated
    private final AcsMessageInteractiveContent interactive;

    /*
     * The message recipient
     */
    @Generated
    private String to;

    /*
     * The message sender
     */
    @Generated
    private String from;

    /**
     * Creates an instance of AcsMessageReceivedEventData class.
     * 
     * @param receivedTimeStamp the receivedTimeStamp value to set.
     * @param error the error value to set.
     * @param channelType the channelType value to set.
     * @param media the media value to set.
     * @param context the context value to set.
     * @param button the button value to set.
     * @param interactive the interactive value to set.
     */
    @Generated
    private AcsMessageReceivedEventData(OffsetDateTime receivedTimeStamp, AcsMessageChannelEventError error,
        AcsMessageChannelKind channelType, AcsMessageMediaContent media, AcsMessageContext context,
        AcsMessageButtonContent button, AcsMessageInteractiveContent interactive) {
        super(receivedTimeStamp, error);
        this.channelType = channelType;
        this.media = media;
        this.context = context;
        this.button = button;
        this.interactive = interactive;
    }

    /**
     * Get the content property: The message content.
     * 
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the channelType property: The message channel type.
     * 
     * @return the channelType value.
     */
    @Generated
    public AcsMessageChannelKind getChannelType() {
        return this.channelType;
    }

    /**
     * Get the media property: The received message media content.
     * 
     * @return the media value.
     */
    @Generated
    public AcsMessageMediaContent getMedia() {
        return this.media;
    }

    /**
     * Get the context property: The received message context.
     * 
     * @return the context value.
     */
    @Generated
    public AcsMessageContext getContext() {
        return this.context;
    }

    /**
     * Get the button property: The received message button content.
     * 
     * @return the button value.
     */
    @Generated
    public AcsMessageButtonContent getButton() {
        return this.button;
    }

    /**
     * Get the interactive property: The received message interactive content.
     * 
     * @return the interactive value.
     */
    @Generated
    public AcsMessageInteractiveContent getInteractive() {
        return this.interactive;
    }

    /**
     * Get the to property: The message recipient.
     * 
     * @return the to value.
     */
    @Generated
    @Override
    public String getTo() {
        return this.to;
    }

    /**
     * Get the from property: The message sender.
     * 
     * @return the from value.
     */
    @Generated
    @Override
    public String getFrom() {
        return this.from;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("receivedTimeStamp",
            getReceivedTimeStamp() == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getReceivedTimeStamp()));
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeStringField("from", getFrom());
        jsonWriter.writeStringField("to", getTo());
        jsonWriter.writeStringField("channelType", this.channelType == null ? null : this.channelType.toString());
        jsonWriter.writeJsonField("media", this.media);
        jsonWriter.writeJsonField("context", this.context);
        jsonWriter.writeJsonField("button", this.button);
        jsonWriter.writeJsonField("interactive", this.interactive);
        jsonWriter.writeStringField("content", this.content);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsMessageReceivedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsMessageReceivedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsMessageReceivedEventData.
     */
    @Generated
    public static AcsMessageReceivedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime receivedTimeStamp = null;
            AcsMessageChannelEventError error = null;
            String from = null;
            String to = null;
            AcsMessageChannelKind channelType = null;
            AcsMessageMediaContent media = null;
            AcsMessageContext context = null;
            AcsMessageButtonContent button = null;
            AcsMessageInteractiveContent interactive = null;
            String content = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("receivedTimeStamp".equals(fieldName)) {
                    receivedTimeStamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    error = AcsMessageChannelEventError.fromJson(reader);
                } else if ("from".equals(fieldName)) {
                    from = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else if ("channelType".equals(fieldName)) {
                    channelType = AcsMessageChannelKind.fromString(reader.getString());
                } else if ("media".equals(fieldName)) {
                    media = AcsMessageMediaContent.fromJson(reader);
                } else if ("context".equals(fieldName)) {
                    context = AcsMessageContext.fromJson(reader);
                } else if ("button".equals(fieldName)) {
                    button = AcsMessageButtonContent.fromJson(reader);
                } else if ("interactive".equals(fieldName)) {
                    interactive = AcsMessageInteractiveContent.fromJson(reader);
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsMessageReceivedEventData deserializedAcsMessageReceivedEventData = new AcsMessageReceivedEventData(
                receivedTimeStamp, error, channelType, media, context, button, interactive);
            deserializedAcsMessageReceivedEventData.from = from;
            deserializedAcsMessageReceivedEventData.to = to;
            deserializedAcsMessageReceivedEventData.content = content;

            return deserializedAcsMessageReceivedEventData;
        });
    }
}
