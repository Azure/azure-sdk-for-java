// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.messaging.eventgrid.implementation.models.AcsMessageChannelEventError;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.AdvancedMessageReceived event.
 */
@Immutable
public final class AcsMessageReceivedEventData extends AcsMessageEventData {

    /*
     * Optional. The message content
     */
    @Generated
    private String content;

    /*
     * Optional. Message ID. Format is Guid as string.
     */
    @Generated
    private String messageId;

    /*
     * Required. The message channel type
     */
    @Generated
    private final AcsMessageChannelKind channelKind;

    /*
     * Required. Whatsapp message type
     */
    @Generated
    private final String messageType;

    /*
     * Optional. The received message media content
     */
    @Generated
    private AcsMessageMediaContent mediaContent;

    /*
     * Optional. The received message reaction content
     */
    @Generated
    private AcsMessageReactionContent reaction;

    /*
     * Optional. The received message context
     */
    @Generated
    private AcsMessageContext context;

    /*
     * Optional. The received message button content
     */
    @Generated
    private AcsMessageButtonContent button;

    /*
     * Optional. The received message interactive content
     */
    @Generated
    private AcsMessageInteractiveContent interactiveContent;

    /*
     * The channel event error
     */
    @Generated
    private AcsMessageChannelEventError error;

    /**
     * Creates an instance of AcsMessageReceivedEventData class.
     *
     * @param from the from value to set.
     * @param to the to value to set.
     * @param receivedTimestamp the receivedTimestamp value to set.
     * @param channelKind the channelKind value to set.
     * @param messageType the messageType value to set.
     */
    @Generated
    private AcsMessageReceivedEventData(String from, String to, OffsetDateTime receivedTimestamp,
        AcsMessageChannelKind channelKind, String messageType) {
        super(from, to, receivedTimestamp);
        this.channelKind = channelKind;
        this.messageType = messageType;
    }

    /**
     * Get the content property: Optional. The message content.
     *
     * @return the content value.
     */
    @Generated
    public String getContent() {
        return this.content;
    }

    /**
     * Get the messageId property: Optional. Message ID. Format is Guid as string.
     *
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Get the channelKind property: Required. The message channel type.
     *
     * @return the channelKind value.
     */
    @Generated
    public AcsMessageChannelKind getChannelKind() {
        return this.channelKind;
    }

    /**
     * Get the messageType property: Required. Whatsapp message type.
     *
     * @return the messageType value.
     */
    @Generated
    public String getMessageType() {
        return this.messageType;
    }

    /**
     * Get the mediaContent property: Optional. The received message media content.
     *
     * @return the mediaContent value.
     */
    @Generated
    public AcsMessageMediaContent getMediaContent() {
        return this.mediaContent;
    }

    /**
     * Get the reaction property: Optional. The received message reaction content.
     *
     * @return the reaction value.
     */
    @Generated
    public AcsMessageReactionContent getReaction() {
        return this.reaction;
    }

    /**
     * Get the context property: Optional. The received message context.
     *
     * @return the context value.
     */
    @Generated
    public AcsMessageContext getContext() {
        return this.context;
    }

    /**
     * Get the button property: Optional. The received message button content.
     *
     * @return the button value.
     */
    @Generated
    public AcsMessageButtonContent getButton() {
        return this.button;
    }

    /**
     * Get the interactiveContent property: Optional. The received message interactive content.
     *
     * @return the interactiveContent value.
     */
    @Generated
    public AcsMessageInteractiveContent getInteractiveContent() {
        return this.interactiveContent;
    }

    /**
     * Get the error property: The channel error code and message.
     *
     * @return the error value.
     */
    @Generated
    @Override
    public ResponseError getError() {
        return new ResponseError(this.error.getChannelCode(), this.error.getChannelMessage());
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("from", getFrom());
        jsonWriter.writeStringField("to", getTo());
        jsonWriter.writeStringField("receivedTimeStamp",
            getReceivedTimestamp() == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getReceivedTimestamp()));
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeStringField("channelType", this.channelKind == null ? null : this.channelKind.toString());
        jsonWriter.writeStringField("messageType", this.messageType);
        jsonWriter.writeStringField("content", this.content);
        jsonWriter.writeStringField("messageId", this.messageId);
        jsonWriter.writeJsonField("media", this.mediaContent);
        jsonWriter.writeJsonField("reaction", this.reaction);
        jsonWriter.writeJsonField("context", this.context);
        jsonWriter.writeJsonField("button", this.button);
        jsonWriter.writeJsonField("interactive", this.interactiveContent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsMessageReceivedEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsMessageReceivedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsMessageReceivedEventData.
     */
    @Generated
    public static AcsMessageReceivedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String from = null;
            String to = null;
            OffsetDateTime receivedTimestamp = null;
            AcsMessageChannelEventError error = null;
            AcsMessageChannelKind channelKind = null;
            String messageType = null;
            String content = null;
            String messageId = null;
            AcsMessageMediaContent mediaContent = null;
            AcsMessageReactionContent reaction = null;
            AcsMessageContext context = null;
            AcsMessageButtonContent button = null;
            AcsMessageInteractiveContent interactiveContent = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("from".equals(fieldName)) {
                    from = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else if ("receivedTimeStamp".equals(fieldName)) {
                    receivedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    error = AcsMessageChannelEventError.fromJson(reader);
                } else if ("channelType".equals(fieldName)) {
                    channelKind = AcsMessageChannelKind.fromString(reader.getString());
                } else if ("messageType".equals(fieldName)) {
                    messageType = reader.getString();
                } else if ("content".equals(fieldName)) {
                    content = reader.getString();
                } else if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else if ("media".equals(fieldName)) {
                    mediaContent = AcsMessageMediaContent.fromJson(reader);
                } else if ("reaction".equals(fieldName)) {
                    reaction = AcsMessageReactionContent.fromJson(reader);
                } else if ("context".equals(fieldName)) {
                    context = AcsMessageContext.fromJson(reader);
                } else if ("button".equals(fieldName)) {
                    button = AcsMessageButtonContent.fromJson(reader);
                } else if ("interactive".equals(fieldName)) {
                    interactiveContent = AcsMessageInteractiveContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            AcsMessageReceivedEventData deserializedAcsMessageReceivedEventData
                = new AcsMessageReceivedEventData(from, to, receivedTimestamp, channelKind, messageType);
            deserializedAcsMessageReceivedEventData.error = error;
            deserializedAcsMessageReceivedEventData.content = content;
            deserializedAcsMessageReceivedEventData.messageId = messageId;
            deserializedAcsMessageReceivedEventData.mediaContent = mediaContent;
            deserializedAcsMessageReceivedEventData.reaction = reaction;
            deserializedAcsMessageReceivedEventData.context = context;
            deserializedAcsMessageReceivedEventData.button = button;
            deserializedAcsMessageReceivedEventData.interactiveContent = interactiveContent;
            return deserializedAcsMessageReceivedEventData;
        });
    }
}
