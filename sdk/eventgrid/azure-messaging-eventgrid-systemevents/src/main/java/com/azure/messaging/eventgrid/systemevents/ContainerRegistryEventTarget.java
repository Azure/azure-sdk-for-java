// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The target of the event.
 */
@Immutable
public final class ContainerRegistryEventTarget implements JsonSerializable<ContainerRegistryEventTarget> {
    /*
     * The MIME type of the referenced object.
     */
    @Generated
    private final String mediaType;

    /*
     * The number of bytes of the content. Same as Length field.
     */
    @Generated
    private Long size;

    /*
     * The digest of the content, as defined by the Registry V2 HTTP API Specification.
     */
    @Generated
    private String digest;

    /*
     * The number of bytes of the content. Same as Size field.
     */
    @Generated
    private Long length;

    /*
     * The repository name.
     */
    @Generated
    private final String repository;

    /*
     * The direct URL to the content.
     */
    @Generated
    private String url;

    /*
     * The tag name.
     */
    @Generated
    private String tag;

    /**
     * Creates an instance of ContainerRegistryEventTarget class.
     * 
     * @param mediaType the mediaType value to set.
     * @param repository the repository value to set.
     */
    @Generated
    private ContainerRegistryEventTarget(String mediaType, String repository) {
        this.mediaType = mediaType;
        this.repository = repository;
    }

    /**
     * Get the mediaType property: The MIME type of the referenced object.
     * 
     * @return the mediaType value.
     */
    @Generated
    public String getMediaType() {
        return this.mediaType;
    }

    /**
     * Get the size property: The number of bytes of the content. Same as Length field.
     * 
     * @return the size value.
     */
    @Generated
    public Long getSize() {
        return this.size;
    }

    /**
     * Get the digest property: The digest of the content, as defined by the Registry V2 HTTP API Specification.
     * 
     * @return the digest value.
     */
    @Generated
    public String getDigest() {
        return this.digest;
    }

    /**
     * Get the length property: The number of bytes of the content. Same as Size field.
     * 
     * @return the length value.
     */
    @Generated
    public Long getLength() {
        return this.length;
    }

    /**
     * Get the repository property: The repository name.
     * 
     * @return the repository value.
     */
    @Generated
    public String getRepository() {
        return this.repository;
    }

    /**
     * Get the url property: The direct URL to the content.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the tag property: The tag name.
     * 
     * @return the tag value.
     */
    @Generated
    public String getTag() {
        return this.tag;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("mediaType", this.mediaType);
        jsonWriter.writeStringField("repository", this.repository);
        jsonWriter.writeNumberField("size", this.size);
        jsonWriter.writeStringField("digest", this.digest);
        jsonWriter.writeNumberField("length", this.length);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("tag", this.tag);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerRegistryEventTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerRegistryEventTarget if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerRegistryEventTarget.
     */
    @Generated
    public static ContainerRegistryEventTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String mediaType = null;
            String repository = null;
            Long size = null;
            String digest = null;
            Long length = null;
            String url = null;
            String tag = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("mediaType".equals(fieldName)) {
                    mediaType = reader.getString();
                } else if ("repository".equals(fieldName)) {
                    repository = reader.getString();
                } else if ("size".equals(fieldName)) {
                    size = reader.getNullable(JsonReader::getLong);
                } else if ("digest".equals(fieldName)) {
                    digest = reader.getString();
                } else if ("length".equals(fieldName)) {
                    length = reader.getNullable(JsonReader::getLong);
                } else if ("url".equals(fieldName)) {
                    url = reader.getString();
                } else if ("tag".equals(fieldName)) {
                    tag = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ContainerRegistryEventTarget deserializedContainerRegistryEventTarget
                = new ContainerRegistryEventTarget(mediaType, repository);
            deserializedContainerRegistryEventTarget.size = size;
            deserializedContainerRegistryEventTarget.digest = digest;
            deserializedContainerRegistryEventTarget.length = length;
            deserializedContainerRegistryEventTarget.url = url;
            deserializedContainerRegistryEventTarget.tag = tag;

            return deserializedContainerRegistryEventTarget;
        });
    }
}
