// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.AVS.ScriptExecutionStarted event.
 */
@Immutable
public final class AvsScriptExecutionStartedEventData extends AvsScriptExecutionEventData {
    /*
     * Stdout outputs from the execution, if any.
     */
    @Generated
    private List<String> output;

    /**
     * Creates an instance of AvsScriptExecutionStartedEventData class.
     * 
     * @param operationId the operationId value to set.
     * @param cmdletId the cmdletId value to set.
     */
    @Generated
    private AvsScriptExecutionStartedEventData(String operationId, String cmdletId) {
        super(operationId, cmdletId);
    }

    /**
     * Get the output property: Stdout outputs from the execution, if any.
     * 
     * @return the output value.
     */
    @Generated
    @Override
    public List<String> getOutput() {
        return this.output;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationId", getOperationId());
        jsonWriter.writeStringField("cmdletId", getCmdletId());
        jsonWriter.writeArrayField("output", getOutput(), (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsScriptExecutionStartedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsScriptExecutionStartedEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AvsScriptExecutionStartedEventData.
     */
    @Generated
    public static AvsScriptExecutionStartedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String operationId = null;
            String cmdletId = null;
            List<String> output = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    operationId = reader.getString();
                } else if ("cmdletId".equals(fieldName)) {
                    cmdletId = reader.getString();
                } else if ("output".equals(fieldName)) {
                    output = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            AvsScriptExecutionStartedEventData deserializedAvsScriptExecutionStartedEventData
                = new AvsScriptExecutionStartedEventData(operationId, cmdletId);
            deserializedAvsScriptExecutionStartedEventData.output = output;

            return deserializedAvsScriptExecutionStartedEventData;
        });
    }
}
