// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Storage.LifecyclePolicyCompleted event.
 */
@Immutable
public final class StorageLifecyclePolicyCompletedEventData
    implements JsonSerializable<StorageLifecyclePolicyCompletedEventData> {
    /*
     * The time the policy task was scheduled.
     */
    @Generated
    private String scheduleTime;

    /*
     * Execution statistics of a specific policy action in a Blob Management cycle.
     */
    @Generated
    private StorageLifecyclePolicyActionSummaryDetail deleteSummary;

    /*
     * Execution statistics of a specific policy action in a Blob Management cycle.
     */
    @Generated
    private StorageLifecyclePolicyActionSummaryDetail tierToCoolSummary;

    /*
     * Execution statistics of a specific policy action in a Blob Management cycle.
     */
    @Generated
    private StorageLifecyclePolicyActionSummaryDetail tierToArchiveSummary;

    /**
     * Creates an instance of StorageLifecyclePolicyCompletedEventData class.
     */
    @Generated
    private StorageLifecyclePolicyCompletedEventData() {
    }

    /**
     * Get the scheduleTime property: The time the policy task was scheduled.
     * 
     * @return the scheduleTime value.
     */
    @Generated
    public String getScheduleTime() {
        return this.scheduleTime;
    }

    /**
     * Get the deleteSummary property: Execution statistics of a specific policy action in a Blob Management cycle.
     * 
     * @return the deleteSummary value.
     */
    @Generated
    public StorageLifecyclePolicyActionSummaryDetail getDeleteSummary() {
        return this.deleteSummary;
    }

    /**
     * Get the tierToCoolSummary property: Execution statistics of a specific policy action in a Blob Management cycle.
     * 
     * @return the tierToCoolSummary value.
     */
    @Generated
    public StorageLifecyclePolicyActionSummaryDetail getTierToCoolSummary() {
        return this.tierToCoolSummary;
    }

    /**
     * Get the tierToArchiveSummary property: Execution statistics of a specific policy action in a Blob Management
     * cycle.
     * 
     * @return the tierToArchiveSummary value.
     */
    @Generated
    public StorageLifecyclePolicyActionSummaryDetail getTierToArchiveSummary() {
        return this.tierToArchiveSummary;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduleTime", this.scheduleTime);
        jsonWriter.writeJsonField("deleteSummary", this.deleteSummary);
        jsonWriter.writeJsonField("tierToCoolSummary", this.tierToCoolSummary);
        jsonWriter.writeJsonField("tierToArchiveSummary", this.tierToArchiveSummary);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageLifecyclePolicyCompletedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageLifecyclePolicyCompletedEventData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageLifecyclePolicyCompletedEventData.
     */
    @Generated
    public static StorageLifecyclePolicyCompletedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageLifecyclePolicyCompletedEventData deserializedStorageLifecyclePolicyCompletedEventData
                = new StorageLifecyclePolicyCompletedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduleTime".equals(fieldName)) {
                    deserializedStorageLifecyclePolicyCompletedEventData.scheduleTime = reader.getString();
                } else if ("deleteSummary".equals(fieldName)) {
                    deserializedStorageLifecyclePolicyCompletedEventData.deleteSummary
                        = StorageLifecyclePolicyActionSummaryDetail.fromJson(reader);
                } else if ("tierToCoolSummary".equals(fieldName)) {
                    deserializedStorageLifecyclePolicyCompletedEventData.tierToCoolSummary
                        = StorageLifecyclePolicyActionSummaryDetail.fromJson(reader);
                } else if ("tierToArchiveSummary".equals(fieldName)) {
                    deserializedStorageLifecyclePolicyCompletedEventData.tierToArchiveSummary
                        = StorageLifecyclePolicyActionSummaryDetail.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageLifecyclePolicyCompletedEventData;
        });
    }
}
