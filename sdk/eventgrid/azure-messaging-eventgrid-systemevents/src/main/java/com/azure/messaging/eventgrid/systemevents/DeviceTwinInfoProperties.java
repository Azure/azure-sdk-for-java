// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties JSON element.
 */
@Immutable
public final class DeviceTwinInfoProperties implements JsonSerializable<DeviceTwinInfoProperties> {
    /*
     * A portion of the properties that can be written only by the application back-end, and read by the device.
     */
    @Generated
    private final DeviceTwinProperties desired;

    /*
     * A portion of the properties that can be written only by the device, and read by the application back-end.
     */
    @Generated
    private final DeviceTwinProperties reported;

    /**
     * Creates an instance of DeviceTwinInfoProperties class.
     * 
     * @param desired the desired value to set.
     * @param reported the reported value to set.
     */
    @Generated
    private DeviceTwinInfoProperties(DeviceTwinProperties desired, DeviceTwinProperties reported) {
        this.desired = desired;
        this.reported = reported;
    }

    /**
     * Get the desired property: A portion of the properties that can be written only by the application back-end, and
     * read by the device.
     * 
     * @return the desired value.
     */
    @Generated
    public DeviceTwinProperties getDesired() {
        return this.desired;
    }

    /**
     * Get the reported property: A portion of the properties that can be written only by the device, and read by the
     * application back-end.
     * 
     * @return the reported value.
     */
    @Generated
    public DeviceTwinProperties getReported() {
        return this.reported;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("desired", this.desired);
        jsonWriter.writeJsonField("reported", this.reported);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DeviceTwinInfoProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DeviceTwinInfoProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DeviceTwinInfoProperties.
     */
    @Generated
    public static DeviceTwinInfoProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DeviceTwinProperties desired = null;
            DeviceTwinProperties reported = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("desired".equals(fieldName)) {
                    desired = DeviceTwinProperties.fromJson(reader);
                } else if ("reported".equals(fieldName)) {
                    reported = DeviceTwinProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new DeviceTwinInfoProperties(desired, reported);
        });
    }
}
