// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.models.ResponseError;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.messaging.eventgrid.implementation.models.AcsMessageChannelEventError;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Communication.AdvancedMessageDeliveryStatusUpdated
 * event.
 */
@Immutable
public final class AcsMessageDeliveryStatusUpdatedEventData extends AcsMessageEventData {

    /*
     * The message id
     */
    @Generated
    private String messageId;

    /*
     * The updated message status
     */
    @Generated
    private final AcsMessageDeliveryStatus status;

    /*
     * The updated message channel type
     */
    @Generated
    private final AcsMessageChannelKind channelKind;

    /*
     * The channel event error
     */
    @Generated
    private AcsMessageChannelEventError error;

    /**
     * Creates an instance of AcsMessageDeliveryStatusUpdatedEventData class.
     *
     * @param from the from value to set.
     * @param to the to value to set.
     * @param receivedTimestamp the receivedTimestamp value to set.
     * @param status the status value to set.
     * @param channelKind the channelKind value to set.
     */
    @Generated
    private AcsMessageDeliveryStatusUpdatedEventData(String from, String to, OffsetDateTime receivedTimestamp,
        AcsMessageDeliveryStatus status, AcsMessageChannelKind channelKind) {
        super(from, to, receivedTimestamp);
        this.status = status;
        this.channelKind = channelKind;
    }

    /**
     * Get the messageId property: The message id.
     *
     * @return the messageId value.
     */
    @Generated
    public String getMessageId() {
        return this.messageId;
    }

    /**
     * Get the status property: The updated message status.
     *
     * @return the status value.
     */
    @Generated
    public AcsMessageDeliveryStatus getStatus() {
        return this.status;
    }

    /**
     * Get the channelKind property: The updated message channel type.
     *
     * @return the channelKind value.
     */
    @Generated
    public AcsMessageChannelKind getChannelKind() {
        return this.channelKind;
    }

    /**
     * Get the error property: The channel error code and message.
     *
     * @return the error value.
     */
    @Generated
    @Override
    public ResponseError getError() {
        return new ResponseError(this.error.getChannelCode(), this.error.getChannelMessage());
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("from", getFrom());
        jsonWriter.writeStringField("to", getTo());
        jsonWriter.writeStringField("receivedTimeStamp",
            getReceivedTimestamp() == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(getReceivedTimestamp()));
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("channelType", this.channelKind == null ? null : this.channelKind.toString());
        jsonWriter.writeStringField("messageId", this.messageId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsMessageDeliveryStatusUpdatedEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsMessageDeliveryStatusUpdatedEventData if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AcsMessageDeliveryStatusUpdatedEventData.
     */
    @Generated
    public static AcsMessageDeliveryStatusUpdatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String from = null;
            String to = null;
            OffsetDateTime receivedTimestamp = null;
            AcsMessageChannelEventError error = null;
            AcsMessageDeliveryStatus status = null;
            AcsMessageChannelKind channelKind = null;
            String messageId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("from".equals(fieldName)) {
                    from = reader.getString();
                } else if ("to".equals(fieldName)) {
                    to = reader.getString();
                } else if ("receivedTimeStamp".equals(fieldName)) {
                    receivedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("error".equals(fieldName)) {
                    error = AcsMessageChannelEventError.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    status = AcsMessageDeliveryStatus.fromString(reader.getString());
                } else if ("channelType".equals(fieldName)) {
                    channelKind = AcsMessageChannelKind.fromString(reader.getString());
                } else if ("messageId".equals(fieldName)) {
                    messageId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            AcsMessageDeliveryStatusUpdatedEventData deserializedAcsMessageDeliveryStatusUpdatedEventData
                = new AcsMessageDeliveryStatusUpdatedEventData(from, to, receivedTimestamp, status, channelKind);
            deserializedAcsMessageDeliveryStatusUpdatedEventData.error = error;
            deserializedAcsMessageDeliveryStatusUpdatedEventData.messageId = messageId;
            return deserializedAcsMessageDeliveryStatusUpdatedEventData;
        });
    }
}
