// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobCreated event.
 */
@Immutable
public final class StorageBlobCreatedEventData implements JsonSerializable<StorageBlobCreatedEventData> {
    /*
     * The etag of the blob at the time this event was triggered.
     */
    @Generated
    private String eTag;

    /*
     * The offset of the blob in bytes.
     */
    @Generated
    private Long contentOffset;

    /*
     * The name of the API/operation that triggered this event.
     */
    @Generated
    private String api;

    /*
     * A request id provided by the client of the storage API operation that triggered this event.
     */
    @Generated
    private String clientRequestId;

    /*
     * The request id generated by the storage service for the storage API operation that triggered this event.
     */
    @Generated
    private String requestId;

    /*
     * The identity of the requester that triggered this event.
     */
    @Generated
    private String identity;

    /*
     * For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should
     * be ignored by event consumers.
     */
    @Generated
    private Object storageDiagnostics;

    /*
     * An opaque string value representing the logical sequence of events for any particular blob name. Users can use
     * standard string comparison to understand the relative sequence of two events on the same blob name.
     */
    @Generated
    private String sequencer;

    /*
     * The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the
     * blob.
     */
    @Generated
    private Long contentLength;

    /*
     * The path to the blob.
     */
    @Generated
    private String url;

    /*
     * The content type of the blob. This is the same as what would be returned in the Content-Type header from the
     * blob.
     */
    @Generated
    private String contentType;

    /*
     * The type of blob.
     */
    @Generated
    private String blobType;

    /**
     * Creates an instance of StorageBlobCreatedEventData class.
     */
    @Generated
    private StorageBlobCreatedEventData() {
    }

    /**
     * Get the eTag property: The etag of the blob at the time this event was triggered.
     * 
     * @return the eTag value.
     */
    @Generated
    public String getETag() {
        return this.eTag;
    }

    /**
     * Get the contentOffset property: The offset of the blob in bytes.
     * 
     * @return the contentOffset value.
     */
    @Generated
    public Long getContentOffset() {
        return this.contentOffset;
    }

    /**
     * Get the api property: The name of the API/operation that triggered this event.
     * 
     * @return the api value.
     */
    @Generated
    public String getApi() {
        return this.api;
    }

    /**
     * Get the clientRequestId property: A request id provided by the client of the storage API operation that
     * triggered this event.
     * 
     * @return the clientRequestId value.
     */
    @Generated
    public String getClientRequestId() {
        return this.clientRequestId;
    }

    /**
     * Get the requestId property: The request id generated by the storage service for the storage API operation that
     * triggered this event.
     * 
     * @return the requestId value.
     */
    @Generated
    public String getRequestId() {
        return this.requestId;
    }

    /**
     * Get the identity property: The identity of the requester that triggered this event.
     * 
     * @return the identity value.
     */
    @Generated
    public String getIdentity() {
        return this.identity;
    }

    /**
     * Get the storageDiagnostics property: For service use only. Diagnostic data occasionally included by the Azure
     * Storage service. This property should be ignored by event consumers.
     * 
     * @return the storageDiagnostics value.
     */
    @Generated
    public Object getStorageDiagnostics() {
        return this.storageDiagnostics;
    }

    /**
     * Get the sequencer property: An opaque string value representing the logical sequence of events for any
     * particular blob name. Users can use standard string comparison to understand the relative sequence of two events
     * on the same blob name.
     * 
     * @return the sequencer value.
     */
    @Generated
    public String getSequencer() {
        return this.sequencer;
    }

    /**
     * Get the contentLength property: The size of the blob in bytes. This is the same as what would be returned in the
     * Content-Length header from the blob.
     * 
     * @return the contentLength value.
     */
    @Generated
    public Long getContentLength() {
        return this.contentLength;
    }

    /**
     * Get the url property: The path to the blob.
     * 
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Get the contentType property: The content type of the blob. This is the same as what would be returned in the
     * Content-Type header from the blob.
     * 
     * @return the contentType value.
     */
    @Generated
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Get the blobType property: The type of blob.
     * 
     * @return the blobType value.
     */
    @Generated
    public String getBlobType() {
        return this.blobType;
    }

    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eTag", this.eTag);
        jsonWriter.writeNumberField("contentOffset", this.contentOffset);
        jsonWriter.writeStringField("api", this.api);
        jsonWriter.writeStringField("clientRequestId", this.clientRequestId);
        jsonWriter.writeStringField("requestId", this.requestId);
        jsonWriter.writeStringField("identity", this.identity);
        jsonWriter.writeUntypedField("storageDiagnostics", this.storageDiagnostics);
        jsonWriter.writeStringField("sequencer", this.sequencer);
        jsonWriter.writeNumberField("contentLength", this.contentLength);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeStringField("blobType", this.blobType);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageBlobCreatedEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageBlobCreatedEventData if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageBlobCreatedEventData.
     */
    @Generated
    public static StorageBlobCreatedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageBlobCreatedEventData deserializedStorageBlobCreatedEventData = new StorageBlobCreatedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eTag".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.eTag = reader.getString();
                } else if ("contentOffset".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.contentOffset = reader.getNullable(JsonReader::getLong);
                } else if ("api".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.api = reader.getString();
                } else if ("clientRequestId".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.clientRequestId = reader.getString();
                } else if ("requestId".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.requestId = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.identity = reader.getString();
                } else if ("storageDiagnostics".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.storageDiagnostics = reader.readUntyped();
                } else if ("sequencer".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.sequencer = reader.getString();
                } else if ("contentLength".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.contentLength = reader.getNullable(JsonReader::getLong);
                } else if ("url".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.url = reader.getString();
                } else if ("contentType".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.contentType = reader.getString();
                } else if ("blobType".equals(fieldName)) {
                    deserializedStorageBlobCreatedEventData.blobType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageBlobCreatedEventData;
        });
    }
}
