// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The event data for a Job output asset.
 */
@Immutable
public final class MediaJobOutputAsset extends MediaJobOutput {
    /*
     * The discriminator for derived types.
     */
    @Generated
    private String odataType = "#Microsoft.Media.JobOutputAsset";

    /*
     * Gets the Job output asset name.
     */
    @Generated
    private String assetName;

    /*
     * Gets the Job output label.
     */
    @Generated
    private String label;

    /**
     * Creates an instance of MediaJobOutputAsset class.
     * 
     * @param error the error value to set.
     * @param progress the progress value to set.
     * @param state the state value to set.
     */
    @Generated
    private MediaJobOutputAsset(MediaJobError error, long progress, MediaJobState state) {
        super(error, progress, state);
    }

    /**
     * Get the odataType property: The discriminator for derived types.
     * 
     * @return the odataType value.
     */
    @Generated
    @Override
    public String getOdataType() {
        return this.odataType;
    }

    /**
     * Get the assetName property: Gets the Job output asset name.
     * 
     * @return the assetName value.
     */
    @Generated
    public String getAssetName() {
        return this.assetName;
    }

    /**
     * Get the label property: Gets the Job output label.
     * 
     * @return the label value.
     */
    @Generated
    @Override
    public String getLabel() {
        return this.label;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("error", getError());
        jsonWriter.writeLongField("progress", getProgress());
        jsonWriter.writeStringField("state", getState() == null ? null : getState().toString());
        jsonWriter.writeStringField("label", getLabel());
        jsonWriter.writeStringField("@odata.type", this.odataType);
        jsonWriter.writeStringField("assetName", this.assetName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MediaJobOutputAsset from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MediaJobOutputAsset if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MediaJobOutputAsset.
     */
    @Generated
    public static MediaJobOutputAsset fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MediaJobError error = null;
            long progress = 0L;
            MediaJobState state = null;
            String label = null;
            String odataType = "#Microsoft.Media.JobOutputAsset";
            String assetName = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("error".equals(fieldName)) {
                    error = MediaJobError.fromJson(reader);
                } else if ("progress".equals(fieldName)) {
                    progress = reader.getLong();
                } else if ("state".equals(fieldName)) {
                    state = MediaJobState.fromString(reader.getString());
                } else if ("label".equals(fieldName)) {
                    label = reader.getString();
                } else if ("@odata.type".equals(fieldName)) {
                    odataType = reader.getString();
                } else if ("assetName".equals(fieldName)) {
                    assetName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            MediaJobOutputAsset deserializedMediaJobOutputAsset = new MediaJobOutputAsset(error, progress, state);
            deserializedMediaJobOutputAsset.label = label;
            deserializedMediaJobOutputAsset.odataType = odataType;
            deserializedMediaJobOutputAsset.assetName = assetName;

            return deserializedMediaJobOutputAsset;
        });
    }
}
