// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.systemevents.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The content of the event request message.
 */
@Immutable
public class ContainerRegistryEventData implements JsonSerializable<ContainerRegistryEventData> {
    /*
     * The event ID.
     */
    @Generated
    private String id;

    /*
     * The time at which the event occurred.
     */
    @Generated
    private final OffsetDateTime timestamp;

    /*
     * The action that encompasses the provided event.
     */
    @Generated
    private String action;

    /*
     * The location of the event.
     */
    @Generated
    private String location;

    /*
     * The target of the event.
     */
    @Generated
    private final ContainerRegistryEventTarget target;

    /*
     * The request that generated the event.
     */
    @Generated
    private final ContainerRegistryEventRequest request;

    /*
     * The agent that initiated the event. For most situations, this could be from the authorization context of the
     * request.
     */
    @Generated
    private final ContainerRegistryEventActor actor;

    /*
     * The registry node that generated the event. Put differently, while the actor initiates the event, the source
     * generates it.
     */
    @Generated
    private final ContainerRegistryEventSource source;

    /*
     * The connected registry information if the event is generated by a connected registry.
     */
    @Generated
    private final ContainerRegistryEventConnectedRegistry connectedRegistry;

    /**
     * Creates an instance of ContainerRegistryEventData class.
     * 
     * @param timestamp the timestamp value to set.
     * @param target the target value to set.
     * @param request the request value to set.
     * @param actor the actor value to set.
     * @param source the source value to set.
     * @param connectedRegistry the connectedRegistry value to set.
     */
    @Generated
    protected ContainerRegistryEventData(OffsetDateTime timestamp, ContainerRegistryEventTarget target,
        ContainerRegistryEventRequest request, ContainerRegistryEventActor actor, ContainerRegistryEventSource source,
        ContainerRegistryEventConnectedRegistry connectedRegistry) {
        this.timestamp = timestamp;
        this.target = target;
        this.request = request;
        this.actor = actor;
        this.source = source;
        this.connectedRegistry = connectedRegistry;
    }

    /**
     * Get the id property: The event ID.
     * 
     * @return the id value.
     */
    @Generated
    public String getId() {
        return this.id;
    }

    /**
     * Set the id property: The event ID.
     * 
     * @param id the id value to set.
     * @return the ContainerRegistryEventData object itself.
     */
    @Generated
    ContainerRegistryEventData setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the timestamp property: The time at which the event occurred.
     * 
     * @return the timestamp value.
     */
    @Generated
    public OffsetDateTime getTimestamp() {
        return this.timestamp;
    }

    /**
     * Get the action property: The action that encompasses the provided event.
     * 
     * @return the action value.
     */
    @Generated
    public String getAction() {
        return this.action;
    }

    /**
     * Set the action property: The action that encompasses the provided event.
     * 
     * @param action the action value to set.
     * @return the ContainerRegistryEventData object itself.
     */
    @Generated
    ContainerRegistryEventData setAction(String action) {
        this.action = action;
        return this;
    }

    /**
     * Get the location property: The location of the event.
     * 
     * @return the location value.
     */
    @Generated
    public String getLocation() {
        return this.location;
    }

    /**
     * Set the location property: The location of the event.
     * 
     * @param location the location value to set.
     * @return the ContainerRegistryEventData object itself.
     */
    @Generated
    ContainerRegistryEventData setLocation(String location) {
        this.location = location;
        return this;
    }

    /**
     * Get the target property: The target of the event.
     * 
     * @return the target value.
     */
    @Generated
    public ContainerRegistryEventTarget getTarget() {
        return this.target;
    }

    /**
     * Get the request property: The request that generated the event.
     * 
     * @return the request value.
     */
    @Generated
    public ContainerRegistryEventRequest getRequest() {
        return this.request;
    }

    /**
     * Get the actor property: The agent that initiated the event. For most situations, this could be from the
     * authorization context of the request.
     * 
     * @return the actor value.
     */
    @Generated
    public ContainerRegistryEventActor getActor() {
        return this.actor;
    }

    /**
     * Get the source property: The registry node that generated the event. Put differently, while the actor initiates
     * the event, the source generates it.
     * 
     * @return the source value.
     */
    @Generated
    public ContainerRegistryEventSource getSource() {
        return this.source;
    }

    /**
     * Get the connectedRegistry property: The connected registry information if the event is generated by a connected
     * registry.
     * 
     * @return the connectedRegistry value.
     */
    @Generated
    public ContainerRegistryEventConnectedRegistry getConnectedRegistry() {
        return this.connectedRegistry;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("timestamp",
            this.timestamp == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.timestamp));
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeJsonField("request", this.request);
        jsonWriter.writeJsonField("actor", this.actor);
        jsonWriter.writeJsonField("source", this.source);
        jsonWriter.writeJsonField("connectedRegistry", this.connectedRegistry);
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("action", this.action);
        jsonWriter.writeStringField("location", this.location);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ContainerRegistryEventData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ContainerRegistryEventData if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ContainerRegistryEventData.
     */
    @Generated
    public static ContainerRegistryEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OffsetDateTime timestamp = null;
            ContainerRegistryEventTarget target = null;
            ContainerRegistryEventRequest request = null;
            ContainerRegistryEventActor actor = null;
            ContainerRegistryEventSource source = null;
            ContainerRegistryEventConnectedRegistry connectedRegistry = null;
            String id = null;
            String action = null;
            String location = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("timestamp".equals(fieldName)) {
                    timestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("target".equals(fieldName)) {
                    target = ContainerRegistryEventTarget.fromJson(reader);
                } else if ("request".equals(fieldName)) {
                    request = ContainerRegistryEventRequest.fromJson(reader);
                } else if ("actor".equals(fieldName)) {
                    actor = ContainerRegistryEventActor.fromJson(reader);
                } else if ("source".equals(fieldName)) {
                    source = ContainerRegistryEventSource.fromJson(reader);
                } else if ("connectedRegistry".equals(fieldName)) {
                    connectedRegistry = ContainerRegistryEventConnectedRegistry.fromJson(reader);
                } else if ("id".equals(fieldName)) {
                    id = reader.getString();
                } else if ("action".equals(fieldName)) {
                    action = reader.getString();
                } else if ("location".equals(fieldName)) {
                    location = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            ContainerRegistryEventData deserializedContainerRegistryEventData
                = new ContainerRegistryEventData(timestamp, target, request, actor, source, connectedRegistry);
            deserializedContainerRegistryEventData.id = id;
            deserializedContainerRegistryEventData.action = action;
            deserializedContainerRegistryEventData.location = location;

            return deserializedContainerRegistryEventData;
        });
    }
}
