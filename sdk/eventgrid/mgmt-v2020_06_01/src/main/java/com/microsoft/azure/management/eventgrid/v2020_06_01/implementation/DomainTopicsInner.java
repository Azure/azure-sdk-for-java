/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2020_06_01.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DomainTopics.
 */
public class DomainTopicsInner {
    /** The Retrofit service to perform REST calls. */
    private DomainTopicsService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of DomainTopicsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DomainTopicsInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(DomainTopicsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DomainTopics to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DomainTopicsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Path("domainTopicName") String domainTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Path("domainTopicName") String domainTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Path("domainTopicName") String domainTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Path("domainTopicName") String domainTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{domainTopicName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Path("domainTopicName") String domainTopicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics listByDomain" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics")
        Observable<Response<ResponseBody>> listByDomain(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Query("api-version") String apiVersion, @Query("$filter") String filter, @Query("$top") Integer top, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2020_06_01.DomainTopics listByDomainNext" })
        @GET
        Observable<Response<ResponseBody>> listByDomainNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DomainTopicInner object if successful.
     */
    public DomainTopicInner get(String resourceGroupName, String domainName, String domainTopicName) {
        return getWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).toBlocking().single().body();
    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DomainTopicInner> getAsync(String resourceGroupName, String domainName, String domainTopicName, final ServiceCallback<DomainTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName), serviceCallback);
    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainTopicInner object
     */
    public Observable<DomainTopicInner> getAsync(String resourceGroupName, String domainName, String domainTopicName) {
        return getWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).map(new Func1<ServiceResponse<DomainTopicInner>, DomainTopicInner>() {
            @Override
            public DomainTopicInner call(ServiceResponse<DomainTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainTopicInner object
     */
    public Observable<ServiceResponse<DomainTopicInner>> getWithServiceResponseAsync(String resourceGroupName, String domainName, String domainTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (domainTopicName == null) {
            throw new IllegalArgumentException("Parameter domainTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, domainName, domainTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DomainTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<DomainTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DomainTopicInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DomainTopicInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DomainTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DomainTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DomainTopicInner object if successful.
     */
    public DomainTopicInner createOrUpdate(String resourceGroupName, String domainName, String domainTopicName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).toBlocking().last().body();
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DomainTopicInner> createOrUpdateAsync(String resourceGroupName, String domainName, String domainTopicName, final ServiceCallback<DomainTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName), serviceCallback);
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<DomainTopicInner> createOrUpdateAsync(String resourceGroupName, String domainName, String domainTopicName) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).map(new Func1<ServiceResponse<DomainTopicInner>, DomainTopicInner>() {
            @Override
            public DomainTopicInner call(ServiceResponse<DomainTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<DomainTopicInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String domainName, String domainTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (domainTopicName == null) {
            throw new IllegalArgumentException("Parameter domainTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, domainName, domainTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<DomainTopicInner>() { }.getType());
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DomainTopicInner object if successful.
     */
    public DomainTopicInner beginCreateOrUpdate(String resourceGroupName, String domainName, String domainTopicName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).toBlocking().single().body();
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DomainTopicInner> beginCreateOrUpdateAsync(String resourceGroupName, String domainName, String domainTopicName, final ServiceCallback<DomainTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName), serviceCallback);
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainTopicInner object
     */
    public Observable<DomainTopicInner> beginCreateOrUpdateAsync(String resourceGroupName, String domainName, String domainTopicName) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).map(new Func1<ServiceResponse<DomainTopicInner>, DomainTopicInner>() {
            @Override
            public DomainTopicInner call(ServiceResponse<DomainTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a domain topic.
     * Asynchronously creates or updates a new domain topic with the specified parameters.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainTopicInner object
     */
    public Observable<ServiceResponse<DomainTopicInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String domainName, String domainTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (domainTopicName == null) {
            throw new IllegalArgumentException("Parameter domainTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, domainName, domainTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DomainTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<DomainTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DomainTopicInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DomainTopicInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DomainTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(201, new TypeToken<DomainTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String domainName, String domainTopicName) {
        deleteWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).toBlocking().last().body();
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String domainName, String domainTopicName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName), serviceCallback);
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String domainName, String domainTopicName) {
        return deleteWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String domainName, String domainTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (domainTopicName == null) {
            throw new IllegalArgumentException("Parameter domainTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, domainName, domainTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String domainName, String domainTopicName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).toBlocking().single().body();
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String domainName, String domainTopicName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName), serviceCallback);
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String domainName, String domainTopicName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, domainName, domainTopicName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a domain topic.
     * Delete existing domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain.
     * @param domainTopicName Name of the domain topic.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String domainName, String domainTopicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (domainTopicName == null) {
            throw new IllegalArgumentException("Parameter domainTopicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, domainName, domainTopicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DomainTopicInner&gt; object if successful.
     */
    public PagedList<DomainTopicInner> listByDomain(final String resourceGroupName, final String domainName) {
        ServiceResponse<Page<DomainTopicInner>> response = listByDomainSinglePageAsync(resourceGroupName, domainName).toBlocking().single();
        return new PagedList<DomainTopicInner>(response.body()) {
            @Override
            public Page<DomainTopicInner> nextPage(String nextPageLink) {
                return listByDomainNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DomainTopicInner>> listByDomainAsync(final String resourceGroupName, final String domainName, final ListOperationCallback<DomainTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDomainSinglePageAsync(resourceGroupName, domainName),
            new Func1<String, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(String nextPageLink) {
                    return listByDomainNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DomainTopicInner&gt; object
     */
    public Observable<Page<DomainTopicInner>> listByDomainAsync(final String resourceGroupName, final String domainName) {
        return listByDomainWithServiceResponseAsync(resourceGroupName, domainName)
            .map(new Func1<ServiceResponse<Page<DomainTopicInner>>, Page<DomainTopicInner>>() {
                @Override
                public Page<DomainTopicInner> call(ServiceResponse<Page<DomainTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DomainTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<DomainTopicInner>>> listByDomainWithServiceResponseAsync(final String resourceGroupName, final String domainName) {
        return listByDomainSinglePageAsync(resourceGroupName, domainName)
            .concatMap(new Func1<ServiceResponse<Page<DomainTopicInner>>, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(ServiceResponse<Page<DomainTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDomainNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DomainTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DomainTopicInner>>> listByDomainSinglePageAsync(final String resourceGroupName, final String domainName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        final String filter = null;
        final Integer top = null;
        return service.listByDomain(this.client.subscriptionId(), resourceGroupName, domainName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DomainTopicInner>> result = listByDomainDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DomainTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DomainTopicInner&gt; object if successful.
     */
    public PagedList<DomainTopicInner> listByDomain(final String resourceGroupName, final String domainName, final String filter, final Integer top) {
        ServiceResponse<Page<DomainTopicInner>> response = listByDomainSinglePageAsync(resourceGroupName, domainName, filter, top).toBlocking().single();
        return new PagedList<DomainTopicInner>(response.body()) {
            @Override
            public Page<DomainTopicInner> nextPage(String nextPageLink) {
                return listByDomainNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DomainTopicInner>> listByDomainAsync(final String resourceGroupName, final String domainName, final String filter, final Integer top, final ListOperationCallback<DomainTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDomainSinglePageAsync(resourceGroupName, domainName, filter, top),
            new Func1<String, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(String nextPageLink) {
                    return listByDomainNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DomainTopicInner&gt; object
     */
    public Observable<Page<DomainTopicInner>> listByDomainAsync(final String resourceGroupName, final String domainName, final String filter, final Integer top) {
        return listByDomainWithServiceResponseAsync(resourceGroupName, domainName, filter, top)
            .map(new Func1<ServiceResponse<Page<DomainTopicInner>>, Page<DomainTopicInner>>() {
                @Override
                public Page<DomainTopicInner> call(ServiceResponse<Page<DomainTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
     * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DomainTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<DomainTopicInner>>> listByDomainWithServiceResponseAsync(final String resourceGroupName, final String domainName, final String filter, final Integer top) {
        return listByDomainSinglePageAsync(resourceGroupName, domainName, filter, top)
            .concatMap(new Func1<ServiceResponse<Page<DomainTopicInner>>, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(ServiceResponse<Page<DomainTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDomainNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
    ServiceResponse<PageImpl<DomainTopicInner>> * @param resourceGroupName The name of the resource group within the user's subscription.
    ServiceResponse<PageImpl<DomainTopicInner>> * @param domainName Domain name.
    ServiceResponse<PageImpl<DomainTopicInner>> * @param filter The query used to filter the search results using OData syntax. Filtering is permitted on the 'name' property only and with limited number of OData operations. These operations are: the 'contains' function as well as the following logical operations: not, and, or, eq (for equal), and ne (for not equal). No arithmetic operations are supported. The following is a valid filter example: $filter=contains(namE, 'PATTERN') and name ne 'PATTERN-1'. The following is not a valid filter example: $filter=location eq 'westus'.
    ServiceResponse<PageImpl<DomainTopicInner>> * @param top The number of results to return per page for the list operation. Valid range for top parameter is 1 to 100. If not specified, the default number of results to be returned is 20 items per page.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DomainTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DomainTopicInner>>> listByDomainSinglePageAsync(final String resourceGroupName, final String domainName, final String filter, final Integer top) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDomain(this.client.subscriptionId(), resourceGroupName, domainName, this.client.apiVersion(), filter, top, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DomainTopicInner>> result = listByDomainDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DomainTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DomainTopicInner>> listByDomainDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DomainTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DomainTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;DomainTopicInner&gt; object if successful.
     */
    public PagedList<DomainTopicInner> listByDomainNext(final String nextPageLink) {
        ServiceResponse<Page<DomainTopicInner>> response = listByDomainNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<DomainTopicInner>(response.body()) {
            @Override
            public Page<DomainTopicInner> nextPage(String nextPageLink) {
                return listByDomainNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DomainTopicInner>> listByDomainNextAsync(final String nextPageLink, final ServiceFuture<List<DomainTopicInner>> serviceFuture, final ListOperationCallback<DomainTopicInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByDomainNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(String nextPageLink) {
                    return listByDomainNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DomainTopicInner&gt; object
     */
    public Observable<Page<DomainTopicInner>> listByDomainNextAsync(final String nextPageLink) {
        return listByDomainNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<DomainTopicInner>>, Page<DomainTopicInner>>() {
                @Override
                public Page<DomainTopicInner> call(ServiceResponse<Page<DomainTopicInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;DomainTopicInner&gt; object
     */
    public Observable<ServiceResponse<Page<DomainTopicInner>>> listByDomainNextWithServiceResponseAsync(final String nextPageLink) {
        return listByDomainNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<DomainTopicInner>>, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(ServiceResponse<Page<DomainTopicInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByDomainNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
    ServiceResponse<PageImpl<DomainTopicInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;DomainTopicInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<DomainTopicInner>>> listByDomainNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByDomainNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<DomainTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DomainTopicInner>> result = listByDomainNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<DomainTopicInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DomainTopicInner>> listByDomainNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DomainTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DomainTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
