/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.eventgrid.v2018_09_15_preview.implementation;

import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.CloudException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.http.Query;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in DomainTopics.
 */
public class DomainTopicsInner {
    /** The Retrofit service to perform REST calls. */
    private DomainTopicsService service;
    /** The service client containing this operation class. */
    private EventGridManagementClientImpl client;

    /**
     * Initializes an instance of DomainTopicsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public DomainTopicsInner(Retrofit retrofit, EventGridManagementClientImpl client) {
        this.service = retrofit.create(DomainTopicsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for DomainTopics to be
     * used by Retrofit to perform actually REST calls.
     */
    interface DomainTopicsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_09_15_preview.DomainTopics get" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics/{topicName}")
        Observable<Response<ResponseBody>> get(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Path("topicName") String topicName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.eventgrid.v2018_09_15_preview.DomainTopics listByDomain" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/domains/{domainName}/topics")
        Observable<Response<ResponseBody>> listByDomain(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("domainName") String domainName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain
     * @param topicName Name of the topic
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the DomainTopicInner object if successful.
     */
    public DomainTopicInner get(String resourceGroupName, String domainName, String topicName) {
        return getWithServiceResponseAsync(resourceGroupName, domainName, topicName).toBlocking().single().body();
    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain
     * @param topicName Name of the topic
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<DomainTopicInner> getAsync(String resourceGroupName, String domainName, String topicName, final ServiceCallback<DomainTopicInner> serviceCallback) {
        return ServiceFuture.fromResponse(getWithServiceResponseAsync(resourceGroupName, domainName, topicName), serviceCallback);
    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain
     * @param topicName Name of the topic
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainTopicInner object
     */
    public Observable<DomainTopicInner> getAsync(String resourceGroupName, String domainName, String topicName) {
        return getWithServiceResponseAsync(resourceGroupName, domainName, topicName).map(new Func1<ServiceResponse<DomainTopicInner>, DomainTopicInner>() {
            @Override
            public DomainTopicInner call(ServiceResponse<DomainTopicInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a domain topic.
     * Get properties of a domain topic.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Name of the domain
     * @param topicName Name of the topic
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the DomainTopicInner object
     */
    public Observable<ServiceResponse<DomainTopicInner>> getWithServiceResponseAsync(String resourceGroupName, String domainName, String topicName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (topicName == null) {
            throw new IllegalArgumentException("Parameter topicName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.get(this.client.subscriptionId(), resourceGroupName, domainName, topicName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<DomainTopicInner>>>() {
                @Override
                public Observable<ServiceResponse<DomainTopicInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<DomainTopicInner> clientResponse = getDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<DomainTopicInner> getDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<DomainTopicInner, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<DomainTopicInner>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the List&lt;DomainTopicInner&gt; object if successful.
     */
    public List<DomainTopicInner> listByDomain(String resourceGroupName, String domainName) {
        return listByDomainWithServiceResponseAsync(resourceGroupName, domainName).toBlocking().single().body();
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<DomainTopicInner>> listByDomainAsync(String resourceGroupName, String domainName, final ServiceCallback<List<DomainTopicInner>> serviceCallback) {
        return ServiceFuture.fromResponse(listByDomainWithServiceResponseAsync(resourceGroupName, domainName), serviceCallback);
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DomainTopicInner&gt; object
     */
    public Observable<List<DomainTopicInner>> listByDomainAsync(String resourceGroupName, String domainName) {
        return listByDomainWithServiceResponseAsync(resourceGroupName, domainName).map(new Func1<ServiceResponse<List<DomainTopicInner>>, List<DomainTopicInner>>() {
            @Override
            public List<DomainTopicInner> call(ServiceResponse<List<DomainTopicInner>> response) {
                return response.body();
            }
        });
    }

    /**
     * List domain topics.
     * List all the topics in a domain.
     *
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param domainName Domain name.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the List&lt;DomainTopicInner&gt; object
     */
    public Observable<ServiceResponse<List<DomainTopicInner>>> listByDomainWithServiceResponseAsync(String resourceGroupName, String domainName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (domainName == null) {
            throw new IllegalArgumentException("Parameter domainName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByDomain(this.client.subscriptionId(), resourceGroupName, domainName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<List<DomainTopicInner>>>>() {
                @Override
                public Observable<ServiceResponse<List<DomainTopicInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<DomainTopicInner>> result = listByDomainDelegate(response);
                        List<DomainTopicInner> items = null;
                        if (result.body() != null) {
                            items = result.body().items();
                        }
                        ServiceResponse<List<DomainTopicInner>> clientResponse = new ServiceResponse<List<DomainTopicInner>>(items, result.response());
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<DomainTopicInner>> listByDomainDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<DomainTopicInner>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<DomainTopicInner>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
