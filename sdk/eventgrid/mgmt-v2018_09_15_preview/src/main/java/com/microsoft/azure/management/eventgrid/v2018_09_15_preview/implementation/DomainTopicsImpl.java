/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.eventgrid.v2018_09_15_preview.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.eventgrid.v2018_09_15_preview.DomainTopics;
import rx.Observable;
import rx.functions.Func1;
import java.util.List;
import com.microsoft.azure.management.eventgrid.v2018_09_15_preview.DomainTopic;

class DomainTopicsImpl extends WrapperImpl<DomainTopicsInner> implements DomainTopics {
    private final EventGridManager manager;

    DomainTopicsImpl(EventGridManager manager) {
        super(manager.inner().domainTopics());
        this.manager = manager;
    }

    public EventGridManager manager() {
        return this.manager;
    }

    private DomainTopicImpl wrapModel(DomainTopicInner inner) {
        return  new DomainTopicImpl(inner, manager());
    }

    @Override
    public Observable<DomainTopic> listByDomainAsync(String resourceGroupName, String domainName) {
        DomainTopicsInner client = this.inner();
        return client.listByDomainAsync(resourceGroupName, domainName)
        .flatMap(new Func1<List<DomainTopicInner>, Observable<DomainTopicInner>>() {
            @Override
            public Observable<DomainTopicInner> call(List<DomainTopicInner> innerList) {
                return Observable.from(innerList);
            }
        })
        .map(new Func1<DomainTopicInner, DomainTopic>() {
            @Override
            public DomainTopic call(DomainTopicInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<DomainTopic> getAsync(String resourceGroupName, String domainName, String topicName) {
        DomainTopicsInner client = this.inner();
        return client.getAsync(resourceGroupName, domainName, topicName)
        .flatMap(new Func1<DomainTopicInner, Observable<DomainTopic>>() {
            @Override
            public Observable<DomainTopic> call(DomainTopicInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((DomainTopic)wrapModel(inner));
                }
            }
       });
    }

}
