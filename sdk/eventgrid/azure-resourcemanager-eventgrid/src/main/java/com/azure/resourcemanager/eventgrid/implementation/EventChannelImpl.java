// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.fluent.models.EventChannelInner;
import com.azure.resourcemanager.eventgrid.models.EventChannel;
import com.azure.resourcemanager.eventgrid.models.EventChannelDestination;
import com.azure.resourcemanager.eventgrid.models.EventChannelFilter;
import com.azure.resourcemanager.eventgrid.models.EventChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.EventChannelSource;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicReadinessState;
import com.azure.resourcemanager.eventgrid.models.SystemData;
import java.time.OffsetDateTime;

public final class EventChannelImpl implements EventChannel, EventChannel.Definition, EventChannel.Update {
    private EventChannelInner innerObject;

    private final EventGridManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public EventChannelSource source() {
        return this.innerModel().source();
    }

    public EventChannelDestination destination() {
        return this.innerModel().destination();
    }

    public EventChannelProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public PartnerTopicReadinessState partnerTopicReadinessState() {
        return this.innerModel().partnerTopicReadinessState();
    }

    public OffsetDateTime expirationTimeIfNotActivatedUtc() {
        return this.innerModel().expirationTimeIfNotActivatedUtc();
    }

    public EventChannelFilter filter() {
        return this.innerModel().filter();
    }

    public String partnerTopicFriendlyDescription() {
        return this.innerModel().partnerTopicFriendlyDescription();
    }

    public EventChannelInner innerModel() {
        return this.innerObject;
    }

    private EventGridManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String partnerNamespaceName;

    private String eventChannelName;

    public EventChannelImpl withExistingPartnerNamespace(String resourceGroupName, String partnerNamespaceName) {
        this.resourceGroupName = resourceGroupName;
        this.partnerNamespaceName = partnerNamespaceName;
        return this;
    }

    public EventChannel create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEventChannels()
                .createOrUpdateWithResponse(
                    resourceGroupName, partnerNamespaceName, eventChannelName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public EventChannel create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEventChannels()
                .createOrUpdateWithResponse(
                    resourceGroupName, partnerNamespaceName, eventChannelName, this.innerModel(), context)
                .getValue();
        return this;
    }

    EventChannelImpl(String name, EventGridManager serviceManager) {
        this.innerObject = new EventChannelInner();
        this.serviceManager = serviceManager;
        this.eventChannelName = name;
    }

    public EventChannelImpl update() {
        return this;
    }

    public EventChannel apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEventChannels()
                .createOrUpdateWithResponse(
                    resourceGroupName, partnerNamespaceName, eventChannelName, this.innerModel(), Context.NONE)
                .getValue();
        return this;
    }

    public EventChannel apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEventChannels()
                .createOrUpdateWithResponse(
                    resourceGroupName, partnerNamespaceName, eventChannelName, this.innerModel(), context)
                .getValue();
        return this;
    }

    EventChannelImpl(EventChannelInner innerObject, EventGridManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.partnerNamespaceName = Utils.getValueFromIdByName(innerObject.id(), "partnerNamespaces");
        this.eventChannelName = Utils.getValueFromIdByName(innerObject.id(), "eventChannels");
    }

    public EventChannel refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEventChannels()
                .getWithResponse(resourceGroupName, partnerNamespaceName, eventChannelName, Context.NONE)
                .getValue();
        return this;
    }

    public EventChannel refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getEventChannels()
                .getWithResponse(resourceGroupName, partnerNamespaceName, eventChannelName, context)
                .getValue();
        return this;
    }

    public EventChannelImpl withSource(EventChannelSource source) {
        this.innerModel().withSource(source);
        return this;
    }

    public EventChannelImpl withDestination(EventChannelDestination destination) {
        this.innerModel().withDestination(destination);
        return this;
    }

    public EventChannelImpl withExpirationTimeIfNotActivatedUtc(OffsetDateTime expirationTimeIfNotActivatedUtc) {
        this.innerModel().withExpirationTimeIfNotActivatedUtc(expirationTimeIfNotActivatedUtc);
        return this;
    }

    public EventChannelImpl withFilter(EventChannelFilter filter) {
        this.innerModel().withFilter(filter);
        return this;
    }

    public EventChannelImpl withPartnerTopicFriendlyDescription(String partnerTopicFriendlyDescription) {
        this.innerModel().withPartnerTopicFriendlyDescription(partnerTopicFriendlyDescription);
        return this;
    }
}
