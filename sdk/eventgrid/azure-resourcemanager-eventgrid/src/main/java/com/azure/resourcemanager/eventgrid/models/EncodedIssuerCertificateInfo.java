// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Information about the public certificate that is used for custom authentication.
 */
@Fluent
public final class EncodedIssuerCertificateInfo implements JsonSerializable<EncodedIssuerCertificateInfo> {
    /*
     * Identifier for the certificate.
     */
    private String kid;

    /*
     * Certificate in pem format.
     */
    private String encodedCertificate;

    /**
     * Creates an instance of EncodedIssuerCertificateInfo class.
     */
    public EncodedIssuerCertificateInfo() {
    }

    /**
     * Get the kid property: Identifier for the certificate.
     * 
     * @return the kid value.
     */
    public String kid() {
        return this.kid;
    }

    /**
     * Set the kid property: Identifier for the certificate.
     * 
     * @param kid the kid value to set.
     * @return the EncodedIssuerCertificateInfo object itself.
     */
    public EncodedIssuerCertificateInfo withKid(String kid) {
        this.kid = kid;
        return this;
    }

    /**
     * Get the encodedCertificate property: Certificate in pem format.
     * 
     * @return the encodedCertificate value.
     */
    public String encodedCertificate() {
        return this.encodedCertificate;
    }

    /**
     * Set the encodedCertificate property: Certificate in pem format.
     * 
     * @param encodedCertificate the encodedCertificate value to set.
     * @return the EncodedIssuerCertificateInfo object itself.
     */
    public EncodedIssuerCertificateInfo withEncodedCertificate(String encodedCertificate) {
        this.encodedCertificate = encodedCertificate;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kid() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property kid in model EncodedIssuerCertificateInfo"));
        }
        if (encodedCertificate() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property encodedCertificate in model EncodedIssuerCertificateInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(EncodedIssuerCertificateInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kid", this.kid);
        jsonWriter.writeStringField("encodedCertificate", this.encodedCertificate);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncodedIssuerCertificateInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncodedIssuerCertificateInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the EncodedIssuerCertificateInfo.
     */
    public static EncodedIssuerCertificateInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncodedIssuerCertificateInfo deserializedEncodedIssuerCertificateInfo = new EncodedIssuerCertificateInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kid".equals(fieldName)) {
                    deserializedEncodedIssuerCertificateInfo.kid = reader.getString();
                } else if ("encodedCertificate".equals(fieldName)) {
                    deserializedEncodedIssuerCertificateInfo.encodedCertificate = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncodedIssuerCertificateInfo;
        });
    }
}
