// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.eventgrid.fluent.NetworkSecurityPerimeterConfigurationsClient;
import com.azure.resourcemanager.eventgrid.fluent.models.NetworkSecurityPerimeterConfigurationInner;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationList;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterResourceType;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in
 * NetworkSecurityPerimeterConfigurationsClient.
 */
public final class NetworkSecurityPerimeterConfigurationsClientImpl
    implements NetworkSecurityPerimeterConfigurationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final NetworkSecurityPerimeterConfigurationsService service;

    /**
     * The service client containing this operation class.
     */
    private final EventGridManagementClientImpl client;

    /**
     * Initializes an instance of NetworkSecurityPerimeterConfigurationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    NetworkSecurityPerimeterConfigurationsClientImpl(EventGridManagementClientImpl client) {
        this.service = RestProxy.create(NetworkSecurityPerimeterConfigurationsService.class, client.getHttpPipeline(),
            client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for EventGridManagementClientNetworkSecurityPerimeterConfigurations to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "EventGridManagementC")
    public interface NetworkSecurityPerimeterConfigurationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{resourceType}/{resourceName}/networkSecurityPerimeterConfigurations/{perimeterGuid}.{associationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkSecurityPerimeterConfigurationInner>> get(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceType") NetworkSecurityPerimeterResourceType resourceType,
            @PathParam("resourceName") String resourceName, @PathParam("perimeterGuid") String perimeterGuid,
            @PathParam("associationName") String associationName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{resourceType}/{resourceName}/networkSecurityPerimeterConfigurations/{perimeterGuid}.{associationName}/reconcile")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> reconcile(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceType") NetworkSecurityPerimeterResourceType resourceType,
            @PathParam("resourceName") String resourceName, @PathParam("perimeterGuid") String perimeterGuid,
            @PathParam("associationName") String associationName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/{resourceType}/{resourceName}/networkSecurityPerimeterConfigurations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<NetworkSecurityPerimeterConfigurationList>> list(@HostParam("$host") String endpoint,
            @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName,
            @PathParam("resourceType") NetworkSecurityPerimeterResourceType resourceType,
            @PathParam("resourceName") String resourceName, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a specific network security perimeter configuration.
     * 
     * Get a specific network security perimeter configuration with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\', or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific network security perimeter configuration with a topic or domain along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkSecurityPerimeterConfigurationInner>> getWithResponseAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (perimeterGuid == null) {
            return Mono.error(new IllegalArgumentException("Parameter perimeterGuid is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, resourceType, resourceName, perimeterGuid, associationName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific network security perimeter configuration.
     * 
     * Get a specific network security perimeter configuration with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\', or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific network security perimeter configuration with a topic or domain along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<NetworkSecurityPerimeterConfigurationInner>> getWithResponseAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (perimeterGuid == null) {
            return Mono.error(new IllegalArgumentException("Parameter perimeterGuid is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, resourceType,
            resourceName, perimeterGuid, associationName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Get a specific network security perimeter configuration.
     * 
     * Get a specific network security perimeter configuration with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\', or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific network security perimeter configuration with a topic or domain on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkSecurityPerimeterConfigurationInner> getAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName) {
        return getWithResponseAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific network security perimeter configuration.
     * 
     * Get a specific network security perimeter configuration with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\', or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific network security perimeter configuration with a topic or domain along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<NetworkSecurityPerimeterConfigurationInner> getWithResponse(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName, Context context) {
        return getWithResponseAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName,
            context).block();
    }

    /**
     * Get a specific network security perimeter configuration.
     * 
     * Get a specific network security perimeter configuration with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\', or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific network security perimeter configuration with a topic or domain.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkSecurityPerimeterConfigurationInner get(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName) {
        return getWithResponse(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName,
            Context.NONE).getValue();
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network security perimeter configuration along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reconcileWithResponseAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (perimeterGuid == null) {
            return Mono.error(new IllegalArgumentException("Parameter perimeterGuid is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.reconcile(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, resourceType, resourceName, perimeterGuid, associationName,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network security perimeter configuration along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> reconcileWithResponseAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        if (perimeterGuid == null) {
            return Mono.error(new IllegalArgumentException("Parameter perimeterGuid is required and cannot be null."));
        }
        if (associationName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter associationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.reconcile(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName,
            resourceType, resourceName, perimeterGuid, associationName, this.client.getApiVersion(), accept, context);
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of network security perimeter configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<NetworkSecurityPerimeterConfigurationInner>, NetworkSecurityPerimeterConfigurationInner>
        beginReconcileAsync(String resourceGroupName, NetworkSecurityPerimeterResourceType resourceType,
            String resourceName, String perimeterGuid, String associationName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = reconcileWithResponseAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName);
        return this.client
            .<NetworkSecurityPerimeterConfigurationInner, NetworkSecurityPerimeterConfigurationInner>getLroResult(mono,
                this.client.getHttpPipeline(), NetworkSecurityPerimeterConfigurationInner.class,
                NetworkSecurityPerimeterConfigurationInner.class, this.client.getContext());
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of network security perimeter configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private
        PollerFlux<PollResult<NetworkSecurityPerimeterConfigurationInner>, NetworkSecurityPerimeterConfigurationInner>
        beginReconcileAsync(String resourceGroupName, NetworkSecurityPerimeterResourceType resourceType,
            String resourceName, String perimeterGuid, String associationName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = reconcileWithResponseAsync(resourceGroupName, resourceType,
            resourceName, perimeterGuid, associationName, context);
        return this.client
            .<NetworkSecurityPerimeterConfigurationInner, NetworkSecurityPerimeterConfigurationInner>getLroResult(mono,
                this.client.getHttpPipeline(), NetworkSecurityPerimeterConfigurationInner.class,
                NetworkSecurityPerimeterConfigurationInner.class, context);
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network security perimeter configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<NetworkSecurityPerimeterConfigurationInner>, NetworkSecurityPerimeterConfigurationInner>
        beginReconcile(String resourceGroupName, NetworkSecurityPerimeterResourceType resourceType, String resourceName,
            String perimeterGuid, String associationName) {
        return this.beginReconcileAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName)
            .getSyncPoller();
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of network security perimeter configuration.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public
        SyncPoller<PollResult<NetworkSecurityPerimeterConfigurationInner>, NetworkSecurityPerimeterConfigurationInner>
        beginReconcile(String resourceGroupName, NetworkSecurityPerimeterResourceType resourceType, String resourceName,
            String perimeterGuid, String associationName, Context context) {
        return this
            .beginReconcileAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName, context)
            .getSyncPoller();
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network security perimeter configuration on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkSecurityPerimeterConfigurationInner> reconcileAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName) {
        return beginReconcileAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network security perimeter configuration on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<NetworkSecurityPerimeterConfigurationInner> reconcileAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName, Context context) {
        return beginReconcileAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName,
            context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network security perimeter configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkSecurityPerimeterConfigurationInner reconcile(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName) {
        return reconcileAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName).block();
    }

    /**
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association.
     * 
     * Reconcile a specific network security perimeter configuration for a given network security perimeter association
     * with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param perimeterGuid Unique identifier for perimeter.
     * @param associationName Association name to association network security perimeter resource to profile.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return network security perimeter configuration.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public NetworkSecurityPerimeterConfigurationInner reconcile(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, String perimeterGuid,
        String associationName, Context context) {
        return reconcileAsync(resourceGroupName, resourceType, resourceName, perimeterGuid, associationName, context)
            .block();
    }

    /**
     * Get all network security perimeter configurations for resource.
     * 
     * Get all network security perimeter configurations associated with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all network security perimeter configurations associated with a topic or domain along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkSecurityPerimeterConfigurationInner>> listSinglePageAsync(
        String resourceGroupName, NetworkSecurityPerimeterResourceType resourceType, String resourceName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), this.client.getSubscriptionId(),
                resourceGroupName, resourceType, resourceName, this.client.getApiVersion(), accept, context))
            .<PagedResponse<NetworkSecurityPerimeterConfigurationInner>>map(res -> new PagedResponseBase<>(
                res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(), null, null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get all network security perimeter configurations for resource.
     * 
     * Get all network security perimeter configurations associated with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all network security perimeter configurations associated with a topic or domain along with
     * {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<NetworkSecurityPerimeterConfigurationInner>> listSinglePageAsync(
        String resourceGroupName, NetworkSecurityPerimeterResourceType resourceType, String resourceName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            return Mono.error(new IllegalArgumentException(
                "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (resourceType == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceType is required and cannot be null."));
        }
        if (resourceName == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), this.client.getSubscriptionId(), resourceGroupName, resourceType,
                resourceName, this.client.getApiVersion(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), null, null));
    }

    /**
     * Get all network security perimeter configurations for resource.
     * 
     * Get all network security perimeter configurations associated with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all network security perimeter configurations associated with a topic or domain as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NetworkSecurityPerimeterConfigurationInner> listAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, resourceType, resourceName));
    }

    /**
     * Get all network security perimeter configurations for resource.
     * 
     * Get all network security perimeter configurations associated with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all network security perimeter configurations associated with a topic or domain as paginated response
     * with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<NetworkSecurityPerimeterConfigurationInner> listAsync(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, Context context) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceGroupName, resourceType, resourceName, context));
    }

    /**
     * Get all network security perimeter configurations for resource.
     * 
     * Get all network security perimeter configurations associated with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all network security perimeter configurations associated with a topic or domain as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NetworkSecurityPerimeterConfigurationInner> list(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName) {
        return new PagedIterable<>(listAsync(resourceGroupName, resourceType, resourceName));
    }

    /**
     * Get all network security perimeter configurations for resource.
     * 
     * Get all network security perimeter configurations associated with a topic or domain.
     * 
     * @param resourceGroupName The name of the resource group within the user's subscription.
     * @param resourceType The type of the resource. This can be either \'topics\' or \'domains\'.
     * @param resourceName The name of the resource (namely, either, the topic name or domain name).
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all network security perimeter configurations associated with a topic or domain as paginated response
     * with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<NetworkSecurityPerimeterConfigurationInner> list(String resourceGroupName,
        NetworkSecurityPerimeterResourceType resourceType, String resourceName, Context context) {
        return new PagedIterable<>(listAsync(resourceGroupName, resourceType, resourceName, context));
    }
}
