// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.eventgrid.models.CaCertificateProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/** The properties of CA certificate. */
@Fluent
public final class CaCertificateProperties {
    /*
     * Description for the CA Certificate resource.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Base64 encoded PEM (Privacy Enhanced Mail) format certificate data.
     */
    @JsonProperty(value = "encodedCertificate")
    private String encodedCertificate;

    /*
     * Certificate issue time in UTC. This is a read-only field.
     */
    @JsonProperty(value = "issueTimeInUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime issueTimeInUtc;

    /*
     * Certificate expiry time in UTC. This is a read-only field.
     */
    @JsonProperty(value = "expiryTimeInUtc", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime expiryTimeInUtc;

    /*
     * Provisioning state of the CA Certificate resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private CaCertificateProvisioningState provisioningState;

    /** Creates an instance of CaCertificateProperties class. */
    public CaCertificateProperties() {
    }

    /**
     * Get the description property: Description for the CA Certificate resource.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description for the CA Certificate resource.
     *
     * @param description the description value to set.
     * @return the CaCertificateProperties object itself.
     */
    public CaCertificateProperties withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the encodedCertificate property: Base64 encoded PEM (Privacy Enhanced Mail) format certificate data.
     *
     * @return the encodedCertificate value.
     */
    public String encodedCertificate() {
        return this.encodedCertificate;
    }

    /**
     * Set the encodedCertificate property: Base64 encoded PEM (Privacy Enhanced Mail) format certificate data.
     *
     * @param encodedCertificate the encodedCertificate value to set.
     * @return the CaCertificateProperties object itself.
     */
    public CaCertificateProperties withEncodedCertificate(String encodedCertificate) {
        this.encodedCertificate = encodedCertificate;
        return this;
    }

    /**
     * Get the issueTimeInUtc property: Certificate issue time in UTC. This is a read-only field.
     *
     * @return the issueTimeInUtc value.
     */
    public OffsetDateTime issueTimeInUtc() {
        return this.issueTimeInUtc;
    }

    /**
     * Get the expiryTimeInUtc property: Certificate expiry time in UTC. This is a read-only field.
     *
     * @return the expiryTimeInUtc value.
     */
    public OffsetDateTime expiryTimeInUtc() {
        return this.expiryTimeInUtc;
    }

    /**
     * Get the provisioningState property: Provisioning state of the CA Certificate resource.
     *
     * @return the provisioningState value.
     */
    public CaCertificateProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
