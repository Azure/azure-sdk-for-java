// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.http.rest.Response;
import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerDestinationInner;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.UUID;

/** An immutable client-side representation of PartnerDestination. */
public interface PartnerDestination {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the systemData property: The system metadata relating to Partner Destination resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the partnerRegistrationImmutableId property: The immutable Id of the corresponding partner registration.
     *
     * @return the partnerRegistrationImmutableId value.
     */
    UUID partnerRegistrationImmutableId();

    /**
     * Gets the endpointServiceContext property: Endpoint context associated with this partner destination.
     *
     * @return the endpointServiceContext value.
     */
    String endpointServiceContext();

    /**
     * Gets the expirationTimeIfNotActivatedUtc property: Expiration time of the partner destination. If this timer
     * expires and the partner destination was never activated, the partner destination and corresponding channel are
     * deleted.
     *
     * @return the expirationTimeIfNotActivatedUtc value.
     */
    OffsetDateTime expirationTimeIfNotActivatedUtc();

    /**
     * Gets the provisioningState property: Provisioning state of the partner destination.
     *
     * @return the provisioningState value.
     */
    PartnerDestinationProvisioningState provisioningState();

    /**
     * Gets the activationState property: Activation state of the partner destination.
     *
     * @return the activationState value.
     */
    PartnerDestinationActivationState activationState();

    /**
     * Gets the endpointBaseUrl property: Endpoint Base URL of the partner destination.
     *
     * @return the endpointBaseUrl value.
     */
    String endpointBaseUrl();

    /**
     * Gets the messageForActivation property: Context or helpful message that can be used during the approval process.
     *
     * @return the messageForActivation value.
     */
    String messageForActivation();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the name of the resource group.
     *
     * @return the name of the resource group.
     */
    String resourceGroupName();

    /**
     * Gets the inner com.azure.resourcemanager.eventgrid.fluent.models.PartnerDestinationInner object.
     *
     * @return the inner object.
     */
    PartnerDestinationInner innerModel();

    /** The entirety of the PartnerDestination definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The PartnerDestination definition stages. */
    interface DefinitionStages {
        /** The first stage of the PartnerDestination definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the PartnerDestination definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the PartnerDestination definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group within the user's subscription.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the PartnerDestination definition which contains all the minimum required properties for the
         * resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithPartnerRegistrationImmutableId,
                DefinitionStages.WithEndpointServiceContext,
                DefinitionStages.WithExpirationTimeIfNotActivatedUtc,
                DefinitionStages.WithActivationState,
                DefinitionStages.WithEndpointBaseUrl,
                DefinitionStages.WithMessageForActivation {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            PartnerDestination create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            PartnerDestination create(Context context);
        }
        /** The stage of the PartnerDestination definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the PartnerDestination definition allowing to specify partnerRegistrationImmutableId. */
        interface WithPartnerRegistrationImmutableId {
            /**
             * Specifies the partnerRegistrationImmutableId property: The immutable Id of the corresponding partner
             * registration..
             *
             * @param partnerRegistrationImmutableId The immutable Id of the corresponding partner registration.
             * @return the next definition stage.
             */
            WithCreate withPartnerRegistrationImmutableId(UUID partnerRegistrationImmutableId);
        }
        /** The stage of the PartnerDestination definition allowing to specify endpointServiceContext. */
        interface WithEndpointServiceContext {
            /**
             * Specifies the endpointServiceContext property: Endpoint context associated with this partner
             * destination..
             *
             * @param endpointServiceContext Endpoint context associated with this partner destination.
             * @return the next definition stage.
             */
            WithCreate withEndpointServiceContext(String endpointServiceContext);
        }
        /** The stage of the PartnerDestination definition allowing to specify expirationTimeIfNotActivatedUtc. */
        interface WithExpirationTimeIfNotActivatedUtc {
            /**
             * Specifies the expirationTimeIfNotActivatedUtc property: Expiration time of the partner destination. If
             * this timer expires and the partner destination was never activated, the partner destination and
             * corresponding channel are deleted..
             *
             * @param expirationTimeIfNotActivatedUtc Expiration time of the partner destination. If this timer expires
             *     and the partner destination was never activated, the partner destination and corresponding channel
             *     are deleted.
             * @return the next definition stage.
             */
            WithCreate withExpirationTimeIfNotActivatedUtc(OffsetDateTime expirationTimeIfNotActivatedUtc);
        }
        /** The stage of the PartnerDestination definition allowing to specify activationState. */
        interface WithActivationState {
            /**
             * Specifies the activationState property: Activation state of the partner destination..
             *
             * @param activationState Activation state of the partner destination.
             * @return the next definition stage.
             */
            WithCreate withActivationState(PartnerDestinationActivationState activationState);
        }
        /** The stage of the PartnerDestination definition allowing to specify endpointBaseUrl. */
        interface WithEndpointBaseUrl {
            /**
             * Specifies the endpointBaseUrl property: Endpoint Base URL of the partner destination.
             *
             * @param endpointBaseUrl Endpoint Base URL of the partner destination.
             * @return the next definition stage.
             */
            WithCreate withEndpointBaseUrl(String endpointBaseUrl);
        }
        /** The stage of the PartnerDestination definition allowing to specify messageForActivation. */
        interface WithMessageForActivation {
            /**
             * Specifies the messageForActivation property: Context or helpful message that can be used during the
             * approval process..
             *
             * @param messageForActivation Context or helpful message that can be used during the approval process.
             * @return the next definition stage.
             */
            WithCreate withMessageForActivation(String messageForActivation);
        }
    }
    /**
     * Begins update for the PartnerDestination resource.
     *
     * @return the stage of resource update.
     */
    PartnerDestination.Update update();

    /** The template for PartnerDestination update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        PartnerDestination apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        PartnerDestination apply(Context context);
    }
    /** The PartnerDestination update stages. */
    interface UpdateStages {
        /** The stage of the PartnerDestination update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Tags of the Partner Destination resource..
             *
             * @param tags Tags of the Partner Destination resource.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    PartnerDestination refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    PartnerDestination refresh(Context context);

    /**
     * Activate a partner destination.
     *
     * <p>Activate a newly created partner destination.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return event Grid Partner Destination along with {@link Response}.
     */
    Response<PartnerDestination> activateWithResponse(Context context);

    /**
     * Activate a partner destination.
     *
     * <p>Activate a newly created partner destination.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return event Grid Partner Destination.
     */
    PartnerDestination activate();
}
