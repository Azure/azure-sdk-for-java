// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.eventgrid.fluent.models.WebhookPartnerDestinationProperties;
import java.io.IOException;
import java.util.List;

/**
 * Information about the WebHook of the partner destination.
 */
@Fluent
public final class WebhookPartnerDestinationInfo extends PartnerDestinationInfo {
    /*
     * Type of the endpoint for the partner destination
     */
    private PartnerEndpointType endpointType = PartnerEndpointType.WEB_HOOK;

    /*
     * WebHook Properties of the partner destination.
     */
    private WebhookPartnerDestinationProperties innerProperties;

    /**
     * Creates an instance of WebhookPartnerDestinationInfo class.
     */
    public WebhookPartnerDestinationInfo() {
    }

    /**
     * Get the endpointType property: Type of the endpoint for the partner destination.
     * 
     * @return the endpointType value.
     */
    @Override
    public PartnerEndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the innerProperties property: WebHook Properties of the partner destination.
     * 
     * @return the innerProperties value.
     */
    private WebhookPartnerDestinationProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookPartnerDestinationInfo withAzureSubscriptionId(String azureSubscriptionId) {
        super.withAzureSubscriptionId(azureSubscriptionId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookPartnerDestinationInfo withResourceGroupName(String resourceGroupName) {
        super.withResourceGroupName(resourceGroupName);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookPartnerDestinationInfo withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookPartnerDestinationInfo withEndpointServiceContext(String endpointServiceContext) {
        super.withEndpointServiceContext(endpointServiceContext);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public WebhookPartnerDestinationInfo
        withResourceMoveChangeHistory(List<ResourceMoveChangeHistory> resourceMoveChangeHistory) {
        super.withResourceMoveChangeHistory(resourceMoveChangeHistory);
        return this;
    }

    /**
     * Get the endpointUrl property: The URL that represents the endpoint of the partner destination.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().endpointUrl();
    }

    /**
     * Set the endpointUrl property: The URL that represents the endpoint of the partner destination.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the WebhookPartnerDestinationInfo object itself.
     */
    public WebhookPartnerDestinationInfo withEndpointUrl(String endpointUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookPartnerDestinationProperties();
        }
        this.innerProperties().withEndpointUrl(endpointUrl);
        return this;
    }

    /**
     * Get the endpointBaseUrl property: The base URL that represents the endpoint of the partner destination.
     * 
     * @return the endpointBaseUrl value.
     */
    public String endpointBaseUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().endpointBaseUrl();
    }

    /**
     * Set the endpointBaseUrl property: The base URL that represents the endpoint of the partner destination.
     * 
     * @param endpointBaseUrl the endpointBaseUrl value to set.
     * @return the WebhookPartnerDestinationInfo object itself.
     */
    public WebhookPartnerDestinationInfo withEndpointBaseUrl(String endpointBaseUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookPartnerDestinationProperties();
        }
        this.innerProperties().withEndpointBaseUrl(endpointBaseUrl);
        return this;
    }

    /**
     * Get the clientAuthentication property: Partner client authentication.
     * 
     * @return the clientAuthentication value.
     */
    public PartnerClientAuthentication clientAuthentication() {
        return this.innerProperties() == null ? null : this.innerProperties().clientAuthentication();
    }

    /**
     * Set the clientAuthentication property: Partner client authentication.
     * 
     * @param clientAuthentication the clientAuthentication value to set.
     * @return the WebhookPartnerDestinationInfo object itself.
     */
    public WebhookPartnerDestinationInfo withClientAuthentication(PartnerClientAuthentication clientAuthentication) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WebhookPartnerDestinationProperties();
        }
        this.innerProperties().withClientAuthentication(clientAuthentication);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
        if (resourceMoveChangeHistory() != null) {
            resourceMoveChangeHistory().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureSubscriptionId", azureSubscriptionId());
        jsonWriter.writeStringField("resourceGroupName", resourceGroupName());
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("endpointServiceContext", endpointServiceContext());
        jsonWriter.writeArrayField("resourceMoveChangeHistory", resourceMoveChangeHistory(),
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebhookPartnerDestinationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebhookPartnerDestinationInfo if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebhookPartnerDestinationInfo.
     */
    public static WebhookPartnerDestinationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebhookPartnerDestinationInfo deserializedWebhookPartnerDestinationInfo
                = new WebhookPartnerDestinationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureSubscriptionId".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationInfo.withAzureSubscriptionId(reader.getString());
                } else if ("resourceGroupName".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationInfo.withResourceGroupName(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationInfo.withName(reader.getString());
                } else if ("endpointServiceContext".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationInfo.withEndpointServiceContext(reader.getString());
                } else if ("resourceMoveChangeHistory".equals(fieldName)) {
                    List<ResourceMoveChangeHistory> resourceMoveChangeHistory
                        = reader.readArray(reader1 -> ResourceMoveChangeHistory.fromJson(reader1));
                    deserializedWebhookPartnerDestinationInfo.withResourceMoveChangeHistory(resourceMoveChangeHistory);
                } else if ("endpointType".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationInfo.endpointType
                        = PartnerEndpointType.fromString(reader.getString());
                } else if ("properties".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationInfo.innerProperties
                        = WebhookPartnerDestinationProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhookPartnerDestinationInfo;
        });
    }
}
