// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.util.Context;
import com.azure.resourcemanager.eventgrid.fluent.models.EventChannelInner;
import java.time.OffsetDateTime;

/** An immutable client-side representation of EventChannel. */
public interface EventChannel {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the systemData property: The system metadata relating to this resource.
     *
     * @return the systemData value.
     */
    SystemData systemData();

    /**
     * Gets the source property: Source of the event channel. This represents a unique resource in the partner's
     * resource model.
     *
     * @return the source value.
     */
    EventChannelSource source();

    /**
     * Gets the destination property: Represents the destination of an event channel.
     *
     * @return the destination value.
     */
    EventChannelDestination destination();

    /**
     * Gets the provisioningState property: Provisioning state of the event channel.
     *
     * @return the provisioningState value.
     */
    EventChannelProvisioningState provisioningState();

    /**
     * Gets the partnerTopicReadinessState property: The readiness state of the corresponding partner topic.
     *
     * @return the partnerTopicReadinessState value.
     */
    PartnerTopicReadinessState partnerTopicReadinessState();

    /**
     * Gets the expirationTimeIfNotActivatedUtc property: Expiration time of the event channel. If this timer expires
     * while the corresponding partner topic is never activated, the event channel and corresponding partner topic are
     * deleted.
     *
     * @return the expirationTimeIfNotActivatedUtc value.
     */
    OffsetDateTime expirationTimeIfNotActivatedUtc();

    /**
     * Gets the filter property: Information about the filter for the event channel.
     *
     * @return the filter value.
     */
    EventChannelFilter filter();

    /**
     * Gets the partnerTopicFriendlyDescription property: Friendly description about the topic. This can be set by the
     * publisher/partner to show custom description for the customer partner topic. This will be helpful to remove any
     * ambiguity of the origin of creation of the partner topic for the customer.
     *
     * @return the partnerTopicFriendlyDescription value.
     */
    String partnerTopicFriendlyDescription();

    /**
     * Gets the inner com.azure.resourcemanager.eventgrid.fluent.models.EventChannelInner object.
     *
     * @return the inner object.
     */
    EventChannelInner innerModel();

    /** The entirety of the EventChannel definition. */
    interface Definition
        extends DefinitionStages.Blank, DefinitionStages.WithParentResource, DefinitionStages.WithCreate {
    }
    /** The EventChannel definition stages. */
    interface DefinitionStages {
        /** The first stage of the EventChannel definition. */
        interface Blank extends WithParentResource {
        }
        /** The stage of the EventChannel definition allowing to specify parent resource. */
        interface WithParentResource {
            /**
             * Specifies resourceGroupName, partnerNamespaceName.
             *
             * @param resourceGroupName The name of the resource group within the user's subscription.
             * @param partnerNamespaceName Name of the partner namespace.
             * @return the next definition stage.
             */
            WithCreate withExistingPartnerNamespace(String resourceGroupName, String partnerNamespaceName);
        }
        /**
         * The stage of the EventChannel definition which contains all the minimum required properties for the resource
         * to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithSource,
                DefinitionStages.WithDestination,
                DefinitionStages.WithExpirationTimeIfNotActivatedUtc,
                DefinitionStages.WithFilter,
                DefinitionStages.WithPartnerTopicFriendlyDescription {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            EventChannel create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            EventChannel create(Context context);
        }
        /** The stage of the EventChannel definition allowing to specify source. */
        interface WithSource {
            /**
             * Specifies the source property: Source of the event channel. This represents a unique resource in the
             * partner's resource model..
             *
             * @param source Source of the event channel. This represents a unique resource in the partner's resource
             *     model.
             * @return the next definition stage.
             */
            WithCreate withSource(EventChannelSource source);
        }
        /** The stage of the EventChannel definition allowing to specify destination. */
        interface WithDestination {
            /**
             * Specifies the destination property: Represents the destination of an event channel..
             *
             * @param destination Represents the destination of an event channel.
             * @return the next definition stage.
             */
            WithCreate withDestination(EventChannelDestination destination);
        }
        /** The stage of the EventChannel definition allowing to specify expirationTimeIfNotActivatedUtc. */
        interface WithExpirationTimeIfNotActivatedUtc {
            /**
             * Specifies the expirationTimeIfNotActivatedUtc property: Expiration time of the event channel. If this
             * timer expires while the corresponding partner topic is never activated, the event channel and
             * corresponding partner topic are deleted..
             *
             * @param expirationTimeIfNotActivatedUtc Expiration time of the event channel. If this timer expires while
             *     the corresponding partner topic is never activated, the event channel and corresponding partner topic
             *     are deleted.
             * @return the next definition stage.
             */
            WithCreate withExpirationTimeIfNotActivatedUtc(OffsetDateTime expirationTimeIfNotActivatedUtc);
        }
        /** The stage of the EventChannel definition allowing to specify filter. */
        interface WithFilter {
            /**
             * Specifies the filter property: Information about the filter for the event channel..
             *
             * @param filter Information about the filter for the event channel.
             * @return the next definition stage.
             */
            WithCreate withFilter(EventChannelFilter filter);
        }
        /** The stage of the EventChannel definition allowing to specify partnerTopicFriendlyDescription. */
        interface WithPartnerTopicFriendlyDescription {
            /**
             * Specifies the partnerTopicFriendlyDescription property: Friendly description about the topic. This can be
             * set by the publisher/partner to show custom description for the customer partner topic. This will be
             * helpful to remove any ambiguity of the origin of creation of the partner topic for the customer..
             *
             * @param partnerTopicFriendlyDescription Friendly description about the topic. This can be set by the
             *     publisher/partner to show custom description for the customer partner topic. This will be helpful to
             *     remove any ambiguity of the origin of creation of the partner topic for the customer.
             * @return the next definition stage.
             */
            WithCreate withPartnerTopicFriendlyDescription(String partnerTopicFriendlyDescription);
        }
    }
    /**
     * Begins update for the EventChannel resource.
     *
     * @return the stage of resource update.
     */
    EventChannel.Update update();

    /** The template for EventChannel update. */
    interface Update
        extends UpdateStages.WithSource,
            UpdateStages.WithDestination,
            UpdateStages.WithExpirationTimeIfNotActivatedUtc,
            UpdateStages.WithFilter,
            UpdateStages.WithPartnerTopicFriendlyDescription {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        EventChannel apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        EventChannel apply(Context context);
    }
    /** The EventChannel update stages. */
    interface UpdateStages {
        /** The stage of the EventChannel update allowing to specify source. */
        interface WithSource {
            /**
             * Specifies the source property: Source of the event channel. This represents a unique resource in the
             * partner's resource model..
             *
             * @param source Source of the event channel. This represents a unique resource in the partner's resource
             *     model.
             * @return the next definition stage.
             */
            Update withSource(EventChannelSource source);
        }
        /** The stage of the EventChannel update allowing to specify destination. */
        interface WithDestination {
            /**
             * Specifies the destination property: Represents the destination of an event channel..
             *
             * @param destination Represents the destination of an event channel.
             * @return the next definition stage.
             */
            Update withDestination(EventChannelDestination destination);
        }
        /** The stage of the EventChannel update allowing to specify expirationTimeIfNotActivatedUtc. */
        interface WithExpirationTimeIfNotActivatedUtc {
            /**
             * Specifies the expirationTimeIfNotActivatedUtc property: Expiration time of the event channel. If this
             * timer expires while the corresponding partner topic is never activated, the event channel and
             * corresponding partner topic are deleted..
             *
             * @param expirationTimeIfNotActivatedUtc Expiration time of the event channel. If this timer expires while
             *     the corresponding partner topic is never activated, the event channel and corresponding partner topic
             *     are deleted.
             * @return the next definition stage.
             */
            Update withExpirationTimeIfNotActivatedUtc(OffsetDateTime expirationTimeIfNotActivatedUtc);
        }
        /** The stage of the EventChannel update allowing to specify filter. */
        interface WithFilter {
            /**
             * Specifies the filter property: Information about the filter for the event channel..
             *
             * @param filter Information about the filter for the event channel.
             * @return the next definition stage.
             */
            Update withFilter(EventChannelFilter filter);
        }
        /** The stage of the EventChannel update allowing to specify partnerTopicFriendlyDescription. */
        interface WithPartnerTopicFriendlyDescription {
            /**
             * Specifies the partnerTopicFriendlyDescription property: Friendly description about the topic. This can be
             * set by the publisher/partner to show custom description for the customer partner topic. This will be
             * helpful to remove any ambiguity of the origin of creation of the partner topic for the customer..
             *
             * @param partnerTopicFriendlyDescription Friendly description about the topic. This can be set by the
             *     publisher/partner to show custom description for the customer partner topic. This will be helpful to
             *     remove any ambiguity of the origin of creation of the partner topic for the customer.
             * @return the next definition stage.
             */
            Update withPartnerTopicFriendlyDescription(String partnerTopicFriendlyDescription);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    EventChannel refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    EventChannel refresh(Context context);
}
