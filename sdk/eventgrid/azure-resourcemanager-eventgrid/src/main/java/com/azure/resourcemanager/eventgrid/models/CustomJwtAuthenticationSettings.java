// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Custom JWT authentication settings for namespace resource.
 */
@Fluent
public final class CustomJwtAuthenticationSettings {
    /*
     * Expected JWT token issuer.
     */
    @JsonProperty(value = "tokenIssuer")
    private String tokenIssuer;

    /*
     * Information about the certificate that is used for token validation. We currently support maximum 2 certificates.
     */
    @JsonProperty(value = "issuerCertificates")
    private List<IssuerCertificateInfo> issuerCertificates;

    /**
     * Creates an instance of CustomJwtAuthenticationSettings class.
     */
    public CustomJwtAuthenticationSettings() {
    }

    /**
     * Get the tokenIssuer property: Expected JWT token issuer.
     * 
     * @return the tokenIssuer value.
     */
    public String tokenIssuer() {
        return this.tokenIssuer;
    }

    /**
     * Set the tokenIssuer property: Expected JWT token issuer.
     * 
     * @param tokenIssuer the tokenIssuer value to set.
     * @return the CustomJwtAuthenticationSettings object itself.
     */
    public CustomJwtAuthenticationSettings withTokenIssuer(String tokenIssuer) {
        this.tokenIssuer = tokenIssuer;
        return this;
    }

    /**
     * Get the issuerCertificates property: Information about the certificate that is used for token validation. We
     * currently support maximum 2 certificates.
     * 
     * @return the issuerCertificates value.
     */
    public List<IssuerCertificateInfo> issuerCertificates() {
        return this.issuerCertificates;
    }

    /**
     * Set the issuerCertificates property: Information about the certificate that is used for token validation. We
     * currently support maximum 2 certificates.
     * 
     * @param issuerCertificates the issuerCertificates value to set.
     * @return the CustomJwtAuthenticationSettings object itself.
     */
    public CustomJwtAuthenticationSettings withIssuerCertificates(List<IssuerCertificateInfo> issuerCertificates) {
        this.issuerCertificates = issuerCertificates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issuerCertificates() != null) {
            issuerCertificates().forEach(e -> e.validate());
        }
    }
}
