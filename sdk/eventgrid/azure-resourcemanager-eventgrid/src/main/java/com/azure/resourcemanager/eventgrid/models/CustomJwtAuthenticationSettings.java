// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Custom JWT authentication settings for namespace resource.
 */
@Fluent
public final class CustomJwtAuthenticationSettings implements JsonSerializable<CustomJwtAuthenticationSettings> {
    /*
     * Expected JWT token issuer.
     */
    private String tokenIssuer;

    /*
     * Information about the certificate that is used for token validation. We currently support maximum 2 certificates.
     */
    private List<IssuerCertificateInfo> issuerCertificates;

    /**
     * Creates an instance of CustomJwtAuthenticationSettings class.
     */
    public CustomJwtAuthenticationSettings() {
    }

    /**
     * Get the tokenIssuer property: Expected JWT token issuer.
     * 
     * @return the tokenIssuer value.
     */
    public String tokenIssuer() {
        return this.tokenIssuer;
    }

    /**
     * Set the tokenIssuer property: Expected JWT token issuer.
     * 
     * @param tokenIssuer the tokenIssuer value to set.
     * @return the CustomJwtAuthenticationSettings object itself.
     */
    public CustomJwtAuthenticationSettings withTokenIssuer(String tokenIssuer) {
        this.tokenIssuer = tokenIssuer;
        return this;
    }

    /**
     * Get the issuerCertificates property: Information about the certificate that is used for token validation. We
     * currently support maximum 2 certificates.
     * 
     * @return the issuerCertificates value.
     */
    public List<IssuerCertificateInfo> issuerCertificates() {
        return this.issuerCertificates;
    }

    /**
     * Set the issuerCertificates property: Information about the certificate that is used for token validation. We
     * currently support maximum 2 certificates.
     * 
     * @param issuerCertificates the issuerCertificates value to set.
     * @return the CustomJwtAuthenticationSettings object itself.
     */
    public CustomJwtAuthenticationSettings withIssuerCertificates(List<IssuerCertificateInfo> issuerCertificates) {
        this.issuerCertificates = issuerCertificates;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issuerCertificates() != null) {
            issuerCertificates().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tokenIssuer", this.tokenIssuer);
        jsonWriter.writeArrayField("issuerCertificates", this.issuerCertificates,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomJwtAuthenticationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomJwtAuthenticationSettings if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomJwtAuthenticationSettings.
     */
    public static CustomJwtAuthenticationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomJwtAuthenticationSettings deserializedCustomJwtAuthenticationSettings
                = new CustomJwtAuthenticationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tokenIssuer".equals(fieldName)) {
                    deserializedCustomJwtAuthenticationSettings.tokenIssuer = reader.getString();
                } else if ("issuerCertificates".equals(fieldName)) {
                    List<IssuerCertificateInfo> issuerCertificates
                        = reader.readArray(reader1 -> IssuerCertificateInfo.fromJson(reader1));
                    deserializedCustomJwtAuthenticationSettings.issuerCertificates = issuerCertificates;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomJwtAuthenticationSettings;
        });
    }
}
