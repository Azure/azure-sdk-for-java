// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Authentication settings for a webhook endpoint within a Namespace resource.
 */
@Fluent
public final class WebhookAuthenticationSettings implements JsonSerializable<WebhookAuthenticationSettings> {
    /*
     * The identity configuration required for authenticating a custom webhook.
     */
    private CustomWebhookAuthenticationManagedIdentity identity;

    /*
     * The URL endpoint where the Event Grid service sends authenticated webhook requests using the specified managed
     * identity.
     */
    private String endpointUrl;

    /*
     * The base URL endpoint where the Event Grid service sends authenticated webhook requests using the specified
     * managed identity.
     */
    private String endpointBaseUrl;

    /*
     * Microsoft Entra ID Application ID or URI to get the access token that will be included as the bearer token in
     * delivery requests.
     */
    private String azureActiveDirectoryApplicationIdOrUri;

    /*
     * Microsoft Entra ID Tenant ID to get the access token that will be included as the bearer token in delivery
     * requests.
     */
    private String azureActiveDirectoryTenantId;

    /**
     * Creates an instance of WebhookAuthenticationSettings class.
     */
    public WebhookAuthenticationSettings() {
    }

    /**
     * Get the identity property: The identity configuration required for authenticating a custom webhook.
     * 
     * @return the identity value.
     */
    public CustomWebhookAuthenticationManagedIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity configuration required for authenticating a custom webhook.
     * 
     * @param identity the identity value to set.
     * @return the WebhookAuthenticationSettings object itself.
     */
    public WebhookAuthenticationSettings withIdentity(CustomWebhookAuthenticationManagedIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the endpointUrl property: The URL endpoint where the Event Grid service sends authenticated webhook requests
     * using the specified managed identity.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: The URL endpoint where the Event Grid service sends authenticated webhook requests
     * using the specified managed identity.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the WebhookAuthenticationSettings object itself.
     */
    public WebhookAuthenticationSettings withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Get the endpointBaseUrl property: The base URL endpoint where the Event Grid service sends authenticated webhook
     * requests using the specified managed identity.
     * 
     * @return the endpointBaseUrl value.
     */
    public String endpointBaseUrl() {
        return this.endpointBaseUrl;
    }

    /**
     * Set the endpointBaseUrl property: The base URL endpoint where the Event Grid service sends authenticated webhook
     * requests using the specified managed identity.
     * 
     * @param endpointBaseUrl the endpointBaseUrl value to set.
     * @return the WebhookAuthenticationSettings object itself.
     */
    public WebhookAuthenticationSettings withEndpointBaseUrl(String endpointBaseUrl) {
        this.endpointBaseUrl = endpointBaseUrl;
        return this;
    }

    /**
     * Get the azureActiveDirectoryApplicationIdOrUri property: Microsoft Entra ID Application ID or URI to get the
     * access token that will be included as the bearer token in delivery requests.
     * 
     * @return the azureActiveDirectoryApplicationIdOrUri value.
     */
    public String azureActiveDirectoryApplicationIdOrUri() {
        return this.azureActiveDirectoryApplicationIdOrUri;
    }

    /**
     * Set the azureActiveDirectoryApplicationIdOrUri property: Microsoft Entra ID Application ID or URI to get the
     * access token that will be included as the bearer token in delivery requests.
     * 
     * @param azureActiveDirectoryApplicationIdOrUri the azureActiveDirectoryApplicationIdOrUri value to set.
     * @return the WebhookAuthenticationSettings object itself.
     */
    public WebhookAuthenticationSettings
        withAzureActiveDirectoryApplicationIdOrUri(String azureActiveDirectoryApplicationIdOrUri) {
        this.azureActiveDirectoryApplicationIdOrUri = azureActiveDirectoryApplicationIdOrUri;
        return this;
    }

    /**
     * Get the azureActiveDirectoryTenantId property: Microsoft Entra ID Tenant ID to get the access token that will be
     * included as the bearer token in delivery requests.
     * 
     * @return the azureActiveDirectoryTenantId value.
     */
    public String azureActiveDirectoryTenantId() {
        return this.azureActiveDirectoryTenantId;
    }

    /**
     * Set the azureActiveDirectoryTenantId property: Microsoft Entra ID Tenant ID to get the access token that will be
     * included as the bearer token in delivery requests.
     * 
     * @param azureActiveDirectoryTenantId the azureActiveDirectoryTenantId value to set.
     * @return the WebhookAuthenticationSettings object itself.
     */
    public WebhookAuthenticationSettings withAzureActiveDirectoryTenantId(String azureActiveDirectoryTenantId) {
        this.azureActiveDirectoryTenantId = azureActiveDirectoryTenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (identity() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property identity in model WebhookAuthenticationSettings"));
        } else {
            identity().validate();
        }
        if (endpointUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property endpointUrl in model WebhookAuthenticationSettings"));
        }
        if (azureActiveDirectoryApplicationIdOrUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureActiveDirectoryApplicationIdOrUri in model WebhookAuthenticationSettings"));
        }
        if (azureActiveDirectoryTenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property azureActiveDirectoryTenantId in model WebhookAuthenticationSettings"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WebhookAuthenticationSettings.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeStringField("endpointUrl", this.endpointUrl);
        jsonWriter.writeStringField("azureActiveDirectoryApplicationIdOrUri",
            this.azureActiveDirectoryApplicationIdOrUri);
        jsonWriter.writeStringField("azureActiveDirectoryTenantId", this.azureActiveDirectoryTenantId);
        jsonWriter.writeStringField("endpointBaseUrl", this.endpointBaseUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebhookAuthenticationSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebhookAuthenticationSettings if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WebhookAuthenticationSettings.
     */
    public static WebhookAuthenticationSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebhookAuthenticationSettings deserializedWebhookAuthenticationSettings
                = new WebhookAuthenticationSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("identity".equals(fieldName)) {
                    deserializedWebhookAuthenticationSettings.identity
                        = CustomWebhookAuthenticationManagedIdentity.fromJson(reader);
                } else if ("endpointUrl".equals(fieldName)) {
                    deserializedWebhookAuthenticationSettings.endpointUrl = reader.getString();
                } else if ("azureActiveDirectoryApplicationIdOrUri".equals(fieldName)) {
                    deserializedWebhookAuthenticationSettings.azureActiveDirectoryApplicationIdOrUri
                        = reader.getString();
                } else if ("azureActiveDirectoryTenantId".equals(fieldName)) {
                    deserializedWebhookAuthenticationSettings.azureActiveDirectoryTenantId = reader.getString();
                } else if ("endpointBaseUrl".equals(fieldName)) {
                    deserializedWebhookAuthenticationSettings.endpointBaseUrl = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhookAuthenticationSettings;
        });
    }
}
