// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationProvisioningState;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Objects;
import java.util.UUID;

/**
 * Properties of the Partner Destination.
 */
@Fluent
public final class PartnerDestinationProperties implements JsonSerializable<PartnerDestinationProperties> {
    /*
     * The immutable Id of the corresponding partner registration.
     */
    private UUID partnerRegistrationImmutableId;

    /*
     * Endpoint context associated with this partner destination.
     */
    private String endpointServiceContext;

    /*
     * Expiration time of the partner destination. If this timer expires and the partner destination was never
     * activated,
     * the partner destination and corresponding channel are deleted.
     */
    private OffsetDateTime expirationTimeIfNotActivatedUtc;

    /*
     * Provisioning state of the partner destination.
     */
    private PartnerDestinationProvisioningState provisioningState;

    /*
     * Activation state of the partner destination.
     */
    private PartnerDestinationActivationState activationState;

    /*
     * Endpoint Base URL of the partner destination
     */
    private String endpointBaseUrl;

    /*
     * Context or helpful message that can be used during the approval process.
     */
    private String messageForActivation;

    /**
     * Creates an instance of PartnerDestinationProperties class.
     */
    public PartnerDestinationProperties() {
    }

    /**
     * Get the partnerRegistrationImmutableId property: The immutable Id of the corresponding partner registration.
     * 
     * @return the partnerRegistrationImmutableId value.
     */
    public UUID partnerRegistrationImmutableId() {
        return this.partnerRegistrationImmutableId;
    }

    /**
     * Set the partnerRegistrationImmutableId property: The immutable Id of the corresponding partner registration.
     * 
     * @param partnerRegistrationImmutableId the partnerRegistrationImmutableId value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withPartnerRegistrationImmutableId(UUID partnerRegistrationImmutableId) {
        this.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
        return this;
    }

    /**
     * Get the endpointServiceContext property: Endpoint context associated with this partner destination.
     * 
     * @return the endpointServiceContext value.
     */
    public String endpointServiceContext() {
        return this.endpointServiceContext;
    }

    /**
     * Set the endpointServiceContext property: Endpoint context associated with this partner destination.
     * 
     * @param endpointServiceContext the endpointServiceContext value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withEndpointServiceContext(String endpointServiceContext) {
        this.endpointServiceContext = endpointServiceContext;
        return this;
    }

    /**
     * Get the expirationTimeIfNotActivatedUtc property: Expiration time of the partner destination. If this timer
     * expires and the partner destination was never activated,
     * the partner destination and corresponding channel are deleted.
     * 
     * @return the expirationTimeIfNotActivatedUtc value.
     */
    public OffsetDateTime expirationTimeIfNotActivatedUtc() {
        return this.expirationTimeIfNotActivatedUtc;
    }

    /**
     * Set the expirationTimeIfNotActivatedUtc property: Expiration time of the partner destination. If this timer
     * expires and the partner destination was never activated,
     * the partner destination and corresponding channel are deleted.
     * 
     * @param expirationTimeIfNotActivatedUtc the expirationTimeIfNotActivatedUtc value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties
        withExpirationTimeIfNotActivatedUtc(OffsetDateTime expirationTimeIfNotActivatedUtc) {
        this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the partner destination.
     * 
     * @return the provisioningState value.
     */
    public PartnerDestinationProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the activationState property: Activation state of the partner destination.
     * 
     * @return the activationState value.
     */
    public PartnerDestinationActivationState activationState() {
        return this.activationState;
    }

    /**
     * Set the activationState property: Activation state of the partner destination.
     * 
     * @param activationState the activationState value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withActivationState(PartnerDestinationActivationState activationState) {
        this.activationState = activationState;
        return this;
    }

    /**
     * Get the endpointBaseUrl property: Endpoint Base URL of the partner destination.
     * 
     * @return the endpointBaseUrl value.
     */
    public String endpointBaseUrl() {
        return this.endpointBaseUrl;
    }

    /**
     * Set the endpointBaseUrl property: Endpoint Base URL of the partner destination.
     * 
     * @param endpointBaseUrl the endpointBaseUrl value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withEndpointBaseUrl(String endpointBaseUrl) {
        this.endpointBaseUrl = endpointBaseUrl;
        return this;
    }

    /**
     * Get the messageForActivation property: Context or helpful message that can be used during the approval process.
     * 
     * @return the messageForActivation value.
     */
    public String messageForActivation() {
        return this.messageForActivation;
    }

    /**
     * Set the messageForActivation property: Context or helpful message that can be used during the approval process.
     * 
     * @param messageForActivation the messageForActivation value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withMessageForActivation(String messageForActivation) {
        this.messageForActivation = messageForActivation;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("partnerRegistrationImmutableId",
            Objects.toString(this.partnerRegistrationImmutableId, null));
        jsonWriter.writeStringField("endpointServiceContext", this.endpointServiceContext);
        jsonWriter.writeStringField("expirationTimeIfNotActivatedUtc",
            this.expirationTimeIfNotActivatedUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationTimeIfNotActivatedUtc));
        jsonWriter.writeStringField("activationState",
            this.activationState == null ? null : this.activationState.toString());
        jsonWriter.writeStringField("endpointBaseUrl", this.endpointBaseUrl);
        jsonWriter.writeStringField("messageForActivation", this.messageForActivation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerDestinationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerDestinationProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PartnerDestinationProperties.
     */
    public static PartnerDestinationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerDestinationProperties deserializedPartnerDestinationProperties = new PartnerDestinationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("partnerRegistrationImmutableId".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.partnerRegistrationImmutableId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("endpointServiceContext".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.endpointServiceContext = reader.getString();
                } else if ("expirationTimeIfNotActivatedUtc".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.expirationTimeIfNotActivatedUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.provisioningState
                        = PartnerDestinationProvisioningState.fromString(reader.getString());
                } else if ("activationState".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.activationState
                        = PartnerDestinationActivationState.fromString(reader.getString());
                } else if ("endpointBaseUrl".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.endpointBaseUrl = reader.getString();
                } else if ("messageForActivation".equals(fieldName)) {
                    deserializedPartnerDestinationProperties.messageForActivation = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerDestinationProperties;
        });
    }
}
