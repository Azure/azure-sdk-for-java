// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationProvisioningState;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.UUID;

/** Properties of the Partner Destination. */
@Fluent
public final class PartnerDestinationProperties {
    /*
     * The immutable Id of the corresponding partner registration.
     */
    @JsonProperty(value = "partnerRegistrationImmutableId")
    private UUID partnerRegistrationImmutableId;

    /*
     * Endpoint context associated with this partner destination.
     */
    @JsonProperty(value = "endpointServiceContext")
    private String endpointServiceContext;

    /*
     * Expiration time of the partner destination. If this timer expires and the partner destination was never
     * activated,
     * the partner destination and corresponding channel are deleted.
     */
    @JsonProperty(value = "expirationTimeIfNotActivatedUtc")
    private OffsetDateTime expirationTimeIfNotActivatedUtc;

    /*
     * Provisioning state of the partner destination.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private PartnerDestinationProvisioningState provisioningState;

    /*
     * Activation state of the partner destination.
     */
    @JsonProperty(value = "activationState")
    private PartnerDestinationActivationState activationState;

    /*
     * Endpoint Base URL of the partner destination
     */
    @JsonProperty(value = "endpointBaseUrl")
    private String endpointBaseUrl;

    /*
     * Context or helpful message that can be used during the approval process.
     */
    @JsonProperty(value = "messageForActivation")
    private String messageForActivation;

    /** Creates an instance of PartnerDestinationProperties class. */
    public PartnerDestinationProperties() {
    }

    /**
     * Get the partnerRegistrationImmutableId property: The immutable Id of the corresponding partner registration.
     *
     * @return the partnerRegistrationImmutableId value.
     */
    public UUID partnerRegistrationImmutableId() {
        return this.partnerRegistrationImmutableId;
    }

    /**
     * Set the partnerRegistrationImmutableId property: The immutable Id of the corresponding partner registration.
     *
     * @param partnerRegistrationImmutableId the partnerRegistrationImmutableId value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withPartnerRegistrationImmutableId(UUID partnerRegistrationImmutableId) {
        this.partnerRegistrationImmutableId = partnerRegistrationImmutableId;
        return this;
    }

    /**
     * Get the endpointServiceContext property: Endpoint context associated with this partner destination.
     *
     * @return the endpointServiceContext value.
     */
    public String endpointServiceContext() {
        return this.endpointServiceContext;
    }

    /**
     * Set the endpointServiceContext property: Endpoint context associated with this partner destination.
     *
     * @param endpointServiceContext the endpointServiceContext value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withEndpointServiceContext(String endpointServiceContext) {
        this.endpointServiceContext = endpointServiceContext;
        return this;
    }

    /**
     * Get the expirationTimeIfNotActivatedUtc property: Expiration time of the partner destination. If this timer
     * expires and the partner destination was never activated, the partner destination and corresponding channel are
     * deleted.
     *
     * @return the expirationTimeIfNotActivatedUtc value.
     */
    public OffsetDateTime expirationTimeIfNotActivatedUtc() {
        return this.expirationTimeIfNotActivatedUtc;
    }

    /**
     * Set the expirationTimeIfNotActivatedUtc property: Expiration time of the partner destination. If this timer
     * expires and the partner destination was never activated, the partner destination and corresponding channel are
     * deleted.
     *
     * @param expirationTimeIfNotActivatedUtc the expirationTimeIfNotActivatedUtc value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withExpirationTimeIfNotActivatedUtc(
        OffsetDateTime expirationTimeIfNotActivatedUtc) {
        this.expirationTimeIfNotActivatedUtc = expirationTimeIfNotActivatedUtc;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the partner destination.
     *
     * @return the provisioningState value.
     */
    public PartnerDestinationProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the activationState property: Activation state of the partner destination.
     *
     * @return the activationState value.
     */
    public PartnerDestinationActivationState activationState() {
        return this.activationState;
    }

    /**
     * Set the activationState property: Activation state of the partner destination.
     *
     * @param activationState the activationState value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withActivationState(PartnerDestinationActivationState activationState) {
        this.activationState = activationState;
        return this;
    }

    /**
     * Get the endpointBaseUrl property: Endpoint Base URL of the partner destination.
     *
     * @return the endpointBaseUrl value.
     */
    public String endpointBaseUrl() {
        return this.endpointBaseUrl;
    }

    /**
     * Set the endpointBaseUrl property: Endpoint Base URL of the partner destination.
     *
     * @param endpointBaseUrl the endpointBaseUrl value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withEndpointBaseUrl(String endpointBaseUrl) {
        this.endpointBaseUrl = endpointBaseUrl;
        return this;
    }

    /**
     * Get the messageForActivation property: Context or helpful message that can be used during the approval process.
     *
     * @return the messageForActivation value.
     */
    public String messageForActivation() {
        return this.messageForActivation;
    }

    /**
     * Set the messageForActivation property: Context or helpful message that can be used during the approval process.
     *
     * @param messageForActivation the messageForActivation value to set.
     * @return the PartnerDestinationProperties object itself.
     */
    public PartnerDestinationProperties withMessageForActivation(String messageForActivation) {
        this.messageForActivation = messageForActivation;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
