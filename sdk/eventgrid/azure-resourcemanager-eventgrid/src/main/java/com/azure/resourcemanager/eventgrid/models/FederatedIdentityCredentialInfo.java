// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Objects;
import java.util.UUID;

/**
 * The details of the Federated Identity Credential (FIC) used with the resource.
 */
@Fluent
public final class FederatedIdentityCredentialInfo implements JsonSerializable<FederatedIdentityCredentialInfo> {
    /*
     * The Multi-Tenant Microsoft Entra ID Application where the Federated Identity Credential (FIC) is associated with.
     */
    private UUID federatedClientId;

    /**
     * Creates an instance of FederatedIdentityCredentialInfo class.
     */
    public FederatedIdentityCredentialInfo() {
    }

    /**
     * Get the federatedClientId property: The Multi-Tenant Microsoft Entra ID Application where the Federated Identity
     * Credential (FIC) is associated with.
     * 
     * @return the federatedClientId value.
     */
    public UUID federatedClientId() {
        return this.federatedClientId;
    }

    /**
     * Set the federatedClientId property: The Multi-Tenant Microsoft Entra ID Application where the Federated Identity
     * Credential (FIC) is associated with.
     * 
     * @param federatedClientId the federatedClientId value to set.
     * @return the FederatedIdentityCredentialInfo object itself.
     */
    public FederatedIdentityCredentialInfo withFederatedClientId(UUID federatedClientId) {
        this.federatedClientId = federatedClientId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (federatedClientId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property federatedClientId in model FederatedIdentityCredentialInfo"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(FederatedIdentityCredentialInfo.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("federatedClientId", Objects.toString(this.federatedClientId, null));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FederatedIdentityCredentialInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FederatedIdentityCredentialInfo if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FederatedIdentityCredentialInfo.
     */
    public static FederatedIdentityCredentialInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FederatedIdentityCredentialInfo deserializedFederatedIdentityCredentialInfo
                = new FederatedIdentityCredentialInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("federatedClientId".equals(fieldName)) {
                    deserializedFederatedIdentityCredentialInfo.federatedClientId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedFederatedIdentityCredentialInfo;
        });
    }
}
