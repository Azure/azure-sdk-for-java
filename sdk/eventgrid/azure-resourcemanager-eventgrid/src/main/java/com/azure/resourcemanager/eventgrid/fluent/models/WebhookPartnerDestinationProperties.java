// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.eventgrid.models.PartnerClientAuthentication;
import java.io.IOException;

/**
 * Properties of a partner destination webhook.
 */
@Fluent
public final class WebhookPartnerDestinationProperties
    implements JsonSerializable<WebhookPartnerDestinationProperties> {
    /*
     * The URL that represents the endpoint of the partner destination.
     */
    private String endpointUrl;

    /*
     * The base URL that represents the endpoint of the partner destination.
     */
    private String endpointBaseUrl;

    /*
     * Partner client authentication
     */
    private PartnerClientAuthentication clientAuthentication;

    /**
     * Creates an instance of WebhookPartnerDestinationProperties class.
     */
    public WebhookPartnerDestinationProperties() {
    }

    /**
     * Get the endpointUrl property: The URL that represents the endpoint of the partner destination.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: The URL that represents the endpoint of the partner destination.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the WebhookPartnerDestinationProperties object itself.
     */
    public WebhookPartnerDestinationProperties withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Get the endpointBaseUrl property: The base URL that represents the endpoint of the partner destination.
     * 
     * @return the endpointBaseUrl value.
     */
    public String endpointBaseUrl() {
        return this.endpointBaseUrl;
    }

    /**
     * Set the endpointBaseUrl property: The base URL that represents the endpoint of the partner destination.
     * 
     * @param endpointBaseUrl the endpointBaseUrl value to set.
     * @return the WebhookPartnerDestinationProperties object itself.
     */
    public WebhookPartnerDestinationProperties withEndpointBaseUrl(String endpointBaseUrl) {
        this.endpointBaseUrl = endpointBaseUrl;
        return this;
    }

    /**
     * Get the clientAuthentication property: Partner client authentication.
     * 
     * @return the clientAuthentication value.
     */
    public PartnerClientAuthentication clientAuthentication() {
        return this.clientAuthentication;
    }

    /**
     * Set the clientAuthentication property: Partner client authentication.
     * 
     * @param clientAuthentication the clientAuthentication value to set.
     * @return the WebhookPartnerDestinationProperties object itself.
     */
    public WebhookPartnerDestinationProperties
        withClientAuthentication(PartnerClientAuthentication clientAuthentication) {
        this.clientAuthentication = clientAuthentication;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (clientAuthentication() != null) {
            clientAuthentication().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointUrl", this.endpointUrl);
        jsonWriter.writeStringField("endpointBaseUrl", this.endpointBaseUrl);
        jsonWriter.writeJsonField("clientAuthentication", this.clientAuthentication);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WebhookPartnerDestinationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WebhookPartnerDestinationProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WebhookPartnerDestinationProperties.
     */
    public static WebhookPartnerDestinationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WebhookPartnerDestinationProperties deserializedWebhookPartnerDestinationProperties
                = new WebhookPartnerDestinationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointUrl".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationProperties.endpointUrl = reader.getString();
                } else if ("endpointBaseUrl".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationProperties.endpointBaseUrl = reader.getString();
                } else if ("clientAuthentication".equals(fieldName)) {
                    deserializedWebhookPartnerDestinationProperties.clientAuthentication
                        = PartnerClientAuthentication.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWebhookPartnerDestinationProperties;
        });
    }
}
