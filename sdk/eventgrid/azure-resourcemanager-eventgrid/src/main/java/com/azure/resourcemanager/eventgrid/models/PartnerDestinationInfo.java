// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Properties of the corresponding partner destination of a Channel.
 */
@Fluent
public class PartnerDestinationInfo implements JsonSerializable<PartnerDestinationInfo> {
    /*
     * Type of the endpoint for the partner destination
     */
    private PartnerEndpointType endpointType = PartnerEndpointType.fromString("PartnerDestinationInfo");

    /*
     * Azure subscription ID of the subscriber. The partner destination associated with the channel will be
     * created under this Azure subscription.
     */
    private String azureSubscriptionId;

    /*
     * Azure Resource Group of the subscriber. The partner destination associated with the channel will be
     * created under this resource group.
     */
    private String resourceGroupName;

    /*
     * Name of the partner destination associated with the channel.
     */
    private String name;

    /*
     * Additional context of the partner destination endpoint.
     */
    private String endpointServiceContext;

    /*
     * Change history of the resource move.
     */
    private List<ResourceMoveChangeHistory> resourceMoveChangeHistory;

    /**
     * Creates an instance of PartnerDestinationInfo class.
     */
    public PartnerDestinationInfo() {
    }

    /**
     * Get the endpointType property: Type of the endpoint for the partner destination.
     * 
     * @return the endpointType value.
     */
    public PartnerEndpointType endpointType() {
        return this.endpointType;
    }

    /**
     * Get the azureSubscriptionId property: Azure subscription ID of the subscriber. The partner destination associated
     * with the channel will be
     * created under this Azure subscription.
     * 
     * @return the azureSubscriptionId value.
     */
    public String azureSubscriptionId() {
        return this.azureSubscriptionId;
    }

    /**
     * Set the azureSubscriptionId property: Azure subscription ID of the subscriber. The partner destination associated
     * with the channel will be
     * created under this Azure subscription.
     * 
     * @param azureSubscriptionId the azureSubscriptionId value to set.
     * @return the PartnerDestinationInfo object itself.
     */
    public PartnerDestinationInfo withAzureSubscriptionId(String azureSubscriptionId) {
        this.azureSubscriptionId = azureSubscriptionId;
        return this;
    }

    /**
     * Get the resourceGroupName property: Azure Resource Group of the subscriber. The partner destination associated
     * with the channel will be
     * created under this resource group.
     * 
     * @return the resourceGroupName value.
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }

    /**
     * Set the resourceGroupName property: Azure Resource Group of the subscriber. The partner destination associated
     * with the channel will be
     * created under this resource group.
     * 
     * @param resourceGroupName the resourceGroupName value to set.
     * @return the PartnerDestinationInfo object itself.
     */
    public PartnerDestinationInfo withResourceGroupName(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    /**
     * Get the name property: Name of the partner destination associated with the channel.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Name of the partner destination associated with the channel.
     * 
     * @param name the name value to set.
     * @return the PartnerDestinationInfo object itself.
     */
    public PartnerDestinationInfo withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the endpointServiceContext property: Additional context of the partner destination endpoint.
     * 
     * @return the endpointServiceContext value.
     */
    public String endpointServiceContext() {
        return this.endpointServiceContext;
    }

    /**
     * Set the endpointServiceContext property: Additional context of the partner destination endpoint.
     * 
     * @param endpointServiceContext the endpointServiceContext value to set.
     * @return the PartnerDestinationInfo object itself.
     */
    public PartnerDestinationInfo withEndpointServiceContext(String endpointServiceContext) {
        this.endpointServiceContext = endpointServiceContext;
        return this;
    }

    /**
     * Get the resourceMoveChangeHistory property: Change history of the resource move.
     * 
     * @return the resourceMoveChangeHistory value.
     */
    public List<ResourceMoveChangeHistory> resourceMoveChangeHistory() {
        return this.resourceMoveChangeHistory;
    }

    /**
     * Set the resourceMoveChangeHistory property: Change history of the resource move.
     * 
     * @param resourceMoveChangeHistory the resourceMoveChangeHistory value to set.
     * @return the PartnerDestinationInfo object itself.
     */
    public PartnerDestinationInfo
        withResourceMoveChangeHistory(List<ResourceMoveChangeHistory> resourceMoveChangeHistory) {
        this.resourceMoveChangeHistory = resourceMoveChangeHistory;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceMoveChangeHistory() != null) {
            resourceMoveChangeHistory().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("endpointType", this.endpointType == null ? null : this.endpointType.toString());
        jsonWriter.writeStringField("azureSubscriptionId", this.azureSubscriptionId);
        jsonWriter.writeStringField("resourceGroupName", this.resourceGroupName);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("endpointServiceContext", this.endpointServiceContext);
        jsonWriter.writeArrayField("resourceMoveChangeHistory", this.resourceMoveChangeHistory,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PartnerDestinationInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PartnerDestinationInfo if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PartnerDestinationInfo.
     */
    public static PartnerDestinationInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("endpointType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("WebHook".equals(discriminatorValue)) {
                    return WebhookPartnerDestinationInfo.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static PartnerDestinationInfo fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PartnerDestinationInfo deserializedPartnerDestinationInfo = new PartnerDestinationInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("endpointType".equals(fieldName)) {
                    deserializedPartnerDestinationInfo.endpointType
                        = PartnerEndpointType.fromString(reader.getString());
                } else if ("azureSubscriptionId".equals(fieldName)) {
                    deserializedPartnerDestinationInfo.azureSubscriptionId = reader.getString();
                } else if ("resourceGroupName".equals(fieldName)) {
                    deserializedPartnerDestinationInfo.resourceGroupName = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedPartnerDestinationInfo.name = reader.getString();
                } else if ("endpointServiceContext".equals(fieldName)) {
                    deserializedPartnerDestinationInfo.endpointServiceContext = reader.getString();
                } else if ("resourceMoveChangeHistory".equals(fieldName)) {
                    List<ResourceMoveChangeHistory> resourceMoveChangeHistory
                        = reader.readArray(reader1 -> ResourceMoveChangeHistory.fromJson(reader1));
                    deserializedPartnerDestinationInfo.resourceMoveChangeHistory = resourceMoveChangeHistory;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPartnerDestinationInfo;
        });
    }
}
