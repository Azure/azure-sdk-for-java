// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterAssociationAccessMode;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigProvisioningState;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfiguration;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueSeverity;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueType;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterResourceType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NetworkSecurityPerimeterConfigurationsReconcileMockTests {
    @Test
    public void testReconcile() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"provisioningIssues\":[{\"name\":\"zluczdq\",\"properties\":{\"issueType\":\"Other\",\"severity\":\"Warning\",\"description\":\"vhvzielbprnqu\",\"suggestedResourceIds\":[\"zcqyg\",\"mnwsvh\"],\"suggestedAccessRules\":[\"qiwy\",\"jtobdrrp\"]}},{\"name\":\"ehkuns\",\"properties\":{\"issueType\":\"MissingIdentityConfiguration\",\"severity\":\"Warning\",\"description\":\"tpkvegeattbzkgtz\",\"suggestedResourceIds\":[\"qsttewuvcysjeuf\",\"x\",\"lpditfnonpi\"],\"suggestedAccessRules\":[\"lvrhprrvbwonleq\",\"lvtlrvbst\",\"huy\",\"uninttlnrjdszd\"]}}],\"networkSecurityPerimeter\":{\"id\":\"iciqppo\",\"perimeterGuid\":\"gpnewuhwfwjnox\",\"location\":\"xtfnress\"},\"resourceAssociation\":{\"name\":\"gckncjmg\",\"accessMode\":\"Learning\"},\"profile\":{\"name\":\"tqdx\",\"accessRulesVersion\":\"jymjnhjluq\",\"accessRules\":[{\"fullyQualifiedArmId\":\"upubdxckdlhz\",\"name\":\"cu\",\"type\":\"bosjjfd\",\"properties\":{}},{\"fullyQualifiedArmId\":\"rjqfyaytvslyekcg\",\"name\":\"uarlcjiwgsxfaioc\",\"type\":\"gujjgn\",\"properties\":{}}],\"diagnosticSettingsVersion\":\"zxbarcbpae\",\"enabledLogCategories\":[\"sym\"]}},\"id\":\"w\",\"name\":\"njcytesmfucrtfod\",\"type\":\"hua\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkSecurityPerimeterConfiguration response = manager.networkSecurityPerimeterConfigurations().reconcile(
            "yvouprsytq", NetworkSecurityPerimeterResourceType.TOPICS, "slhmgw", "nivrxpfduio", "hgyqvpbfj",
            com.azure.core.util.Context.NONE);

        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.SUCCEEDED,
            response.provisioningState());
        Assertions.assertEquals("zluczdq", response.provisioningIssues().get(0).name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.OTHER,
            response.provisioningIssues().get(0).issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING,
            response.provisioningIssues().get(0).severity());
        Assertions.assertEquals("vhvzielbprnqu", response.provisioningIssues().get(0).description());
        Assertions.assertEquals("zcqyg", response.provisioningIssues().get(0).suggestedResourceIds().get(0));
        Assertions.assertEquals("qiwy", response.provisioningIssues().get(0).suggestedAccessRules().get(0));
        Assertions.assertEquals("iciqppo", response.networkSecurityPerimeter().id());
        Assertions.assertEquals("gpnewuhwfwjnox", response.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("xtfnress", response.networkSecurityPerimeter().location());
        Assertions.assertEquals("gckncjmg", response.resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.LEARNING,
            response.resourceAssociation().accessMode());
        Assertions.assertEquals("tqdx", response.profile().name());
        Assertions.assertEquals("jymjnhjluq", response.profile().accessRulesVersion());
        Assertions.assertEquals("upubdxckdlhz", response.profile().accessRules().get(0).fullyQualifiedArmId());
        Assertions.assertEquals("cu", response.profile().accessRules().get(0).name());
        Assertions.assertEquals("bosjjfd", response.profile().accessRules().get(0).type());
        Assertions.assertEquals("zxbarcbpae", response.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("sym", response.profile().enabledLogCategories().get(0));
    }
}
