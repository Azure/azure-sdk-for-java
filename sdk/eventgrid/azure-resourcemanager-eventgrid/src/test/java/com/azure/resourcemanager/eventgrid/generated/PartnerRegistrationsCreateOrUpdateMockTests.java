// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.PartnerRegistration;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerRegistrationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"partnerRegistrationImmutableId\":\"0adbab65-218c-421b-9644-8d284a77c803\"},\"location\":\"ttpfsmwgsgh\",\"tags\":{\"thxuarigrjdl\":\"umlddauqmllfe\"},\"id\":\"lkqhvkrbzkua\",\"name\":\"taxklpruu\",\"type\":\"hgltoizwxvs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PartnerRegistration response = manager.partnerRegistrations()
            .define("tncwmhjobzrfpr")
            .withRegion("yftcvbzwgwhg")
            .withExistingResourceGroup("pyfaofdfp")
            .withTags(mapOf("uoorssatfybipufd", "o", "q", "xuqbdqnasttuxvz", "xmndztgsqjayqmar", "yopbtsixhgvb", "nh",
                "neibpgbrhbjdq"))
            .withPartnerRegistrationImmutableId(UUID.fromString("97bd28ba-280b-4340-9c20-863095acb4c5"))
            .create();

        Assertions.assertEquals("ttpfsmwgsgh", response.location());
        Assertions.assertEquals("umlddauqmllfe", response.tags().get("thxuarigrjdl"));
        Assertions.assertEquals(UUID.fromString("0adbab65-218c-421b-9644-8d284a77c803"),
            response.partnerRegistrationImmutableId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
