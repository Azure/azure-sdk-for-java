// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerNamespaceInner;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerNamespaceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerNamespaceInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"wyivqikf\"},\"groupIds\":[\"hrfsphuagrtti\",\"teusqczkvyklxu\",\"yja\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"bl\",\"actionsRequired\":\"cuubgq\"},\"provisioningState\":\"Succeeded\"},\"id\":\"talmett\",\"name\":\"wgdsl\",\"type\":\"xih\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"oi\"},\"groupIds\":[\"eypxiutcxapzhyr\",\"etoge\",\"joxslhvnhla\",\"rqnkkzjcjbtr\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"vibr\",\"actionsRequired\":\"jsto\"},\"provisioningState\":\"Failed\"},\"id\":\"it\",\"name\":\"kxzt\",\"type\":\"oobklftidgfcwq\"}],\"provisioningState\":\"Failed\",\"partnerRegistrationFullyQualifiedId\":\"aqxzhemjyho\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"wtwko\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"kb\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"partnerTopicRoutingMode\":\"ChannelNameHeader\"},\"location\":\"wltlwtjjguktalh\",\"tags\":{\"iaaomylweazul\":\"kcdmxzrpoaimln\",\"jhlfzswpchwahf\":\"sethwwn\"},\"id\":\"ousnfepgfewe\",\"name\":\"wlyxgncxyk\",\"type\":\"hdjhlimmbcx\"}")
            .toObject(PartnerNamespaceInner.class);
        Assertions.assertEquals("wltlwtjjguktalh", model.location());
        Assertions.assertEquals("kcdmxzrpoaimln", model.tags().get("iaaomylweazul"));
        Assertions.assertEquals("aqxzhemjyho", model.partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("kb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertTrue(model.disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER, model.partnerTopicRoutingMode());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerNamespaceInner model = new PartnerNamespaceInner().withLocation("wltlwtjjguktalh")
            .withTags(mapOf("iaaomylweazul", "kcdmxzrpoaimln", "jhlfzswpchwahf", "sethwwn"))
            .withPartnerRegistrationFullyQualifiedId("aqxzhemjyho")
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("kb").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER);
        model = BinaryData.fromObject(model).toObject(PartnerNamespaceInner.class);
        Assertions.assertEquals("wltlwtjjguktalh", model.location());
        Assertions.assertEquals("kcdmxzrpoaimln", model.tags().get("iaaomylweazul"));
        Assertions.assertEquals("aqxzhemjyho", model.partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("kb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertTrue(model.disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER, model.partnerTopicRoutingMode());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
