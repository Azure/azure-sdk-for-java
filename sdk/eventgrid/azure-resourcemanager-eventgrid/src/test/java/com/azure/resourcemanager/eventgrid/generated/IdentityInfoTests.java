// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class IdentityInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        IdentityInfo model = BinaryData.fromString(
            "{\"type\":\"None\",\"principalId\":\"bpg\",\"tenantId\":\"ytxhp\",\"userAssignedIdentities\":{\"ovplw\":{\"principalId\":\"pfza\",\"clientId\":\"lcuhxwtctyqiklb\"},\"kfplgmgsxnk\":{\"principalId\":\"hvgyuguosvmk\",\"clientId\":\"sxqu\"}}}")
            .toObject(IdentityInfo.class);
        Assertions.assertEquals(IdentityType.NONE, model.type());
        Assertions.assertEquals("bpg", model.principalId());
        Assertions.assertEquals("ytxhp", model.tenantId());
        Assertions.assertEquals("pfza", model.userAssignedIdentities().get("ovplw").principalId());
        Assertions.assertEquals("lcuhxwtctyqiklb", model.userAssignedIdentities().get("ovplw").clientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        IdentityInfo model
            = new IdentityInfo().withType(IdentityType.NONE)
                .withPrincipalId("bpg")
                .withTenantId("ytxhp")
                .withUserAssignedIdentities(mapOf("ovplw",
                    new UserIdentityProperties().withPrincipalId("pfza").withClientId("lcuhxwtctyqiklb"), "kfplgmgsxnk",
                    new UserIdentityProperties().withPrincipalId("hvgyuguosvmk").withClientId("sxqu")));
        model = BinaryData.fromObject(model).toObject(IdentityInfo.class);
        Assertions.assertEquals(IdentityType.NONE, model.type());
        Assertions.assertEquals("bpg", model.principalId());
        Assertions.assertEquals("ytxhp", model.tenantId());
        Assertions.assertEquals("pfza", model.userAssignedIdentities().get("ovplw").principalId());
        Assertions.assertEquals("lcuhxwtctyqiklb", model.userAssignedIdentities().get("ovplw").clientId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
