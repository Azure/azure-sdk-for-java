// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.NamespaceInner;
import com.azure.resourcemanager.eventgrid.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.eventgrid.models.AlternativeAuthenticationNameSource;
import com.azure.resourcemanager.eventgrid.models.ClientAuthenticationSettings;
import com.azure.resourcemanager.eventgrid.models.CustomDomainConfiguration;
import com.azure.resourcemanager.eventgrid.models.CustomJwtAuthenticationSettings;
import com.azure.resourcemanager.eventgrid.models.DynamicRoutingEnrichment;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.NamespaceSku;
import com.azure.resourcemanager.eventgrid.models.NamespacesListResult;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.RoutingEnrichments;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityInfo;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.StaticRoutingEnrichment;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicsConfiguration;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfiguration;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class NamespacesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NamespacesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"gz\",\"name\":\"ulucv\",\"type\":\"amrsreuzv\"},{\"properties\":{},\"id\":\"risjnhnytxifqjz\",\"name\":\"xmrhu\",\"type\":\"lw\"},{\"properties\":{},\"id\":\"esutrgjupauutpw\",\"name\":\"qhih\",\"type\":\"jqgwzp\"}],\"provisioningState\":\"Updating\",\"topicsConfiguration\":{\"hostname\":\"cypsxjv\",\"customDomains\":[{\"fullyQualifiedDomainName\":\"mwks\"},{\"fullyQualifiedDomainName\":\"ircizjxvy\"},{\"fullyQualifiedDomainName\":\"fceacvlhvygd\"}]},\"topicSpacesConfiguration\":{\"state\":\"Enabled\",\"routeTopicResourceId\":\"rtwnawjslbi\",\"hostname\":\"ojgcyzt\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{}]},\"clientAuthentication\":{\"alternativeAuthenticationNameSources\":[\"ClientCertificateUri\",\"ClientCertificateEmail\",\"ClientCertificateUri\",\"ClientCertificateUri\"],\"customJwtAuthentication\":{}},\"maximumSessionExpiryInHours\":325411087,\"maximumClientSessionsPerAuthenticationName\":1219456707,\"routingIdentityInfo\":{\"type\":\"None\",\"userAssignedIdentity\":\"uwrykqgaifmvikl\"},\"customDomains\":[{\"fullyQualifiedDomainName\":\"vkhbejdznx\"}]},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"iv\",\"action\":\"Allow\"},{\"ipMask\":\"novqfzge\",\"action\":\"Allow\"},{\"ipMask\":\"tul\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.2\"},\"sku\":{\"name\":\"Standard\",\"capacity\":1779259768},\"identity\":{\"type\":\"None\",\"principalId\":\"o\",\"tenantId\":\"jw\",\"userAssignedIdentities\":{\"kwcf\":{\"principalId\":\"ioknssxmoj\",\"clientId\":\"vpkjpr\"},\"ripltf\":{\"principalId\":\"ljyxgtczhe\",\"clientId\":\"bsdshmkxmaehvbbx\"}}},\"location\":\"tbaxk\",\"tags\":{\"yklyhpluodpvruud\":\"wrck\",\"xeclzedqbcvhzlhp\":\"gzibthostgktstv\"},\"id\":\"odqkdlwwqfb\",\"name\":\"mlkxtrqjfs\",\"type\":\"lmbtxhwgfwsrt\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"zbrhubskhudyg\",\"name\":\"ookk\",\"type\":\"fqjbvleo\"},{\"properties\":{},\"id\":\"ml\",\"name\":\"iqtqzfavyvnq\",\"type\":\"ybar\"},{\"properties\":{},\"id\":\"uayjkqa\",\"name\":\"qgzsles\",\"type\":\"cbhernntiewdj\"}],\"provisioningState\":\"UpdatedFailed\",\"topicsConfiguration\":{\"hostname\":\"wr\",\"customDomains\":[{\"fullyQualifiedDomainName\":\"wagohbuffk\"},{\"fullyQualifiedDomainName\":\"rqemvvhmxt\"},{\"fullyQualifiedDomainName\":\"rjfut\"},{\"fullyQualifiedDomainName\":\"coebjvewzcj\"}]},\"topicSpacesConfiguration\":{\"state\":\"Enabled\",\"routeTopicResourceId\":\"pmguaadraufac\",\"hostname\":\"ahzovajjziuxxp\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{}]},\"clientAuthentication\":{\"alternativeAuthenticationNameSources\":[\"ClientCertificateSubject\",\"ClientCertificateEmail\",\"ClientCertificateIp\"],\"customJwtAuthentication\":{}},\"maximumSessionExpiryInHours\":389915828,\"maximumClientSessionsPerAuthenticationName\":471639164,\"routingIdentityInfo\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"rds\"},\"customDomains\":[{\"fullyQualifiedDomainName\":\"jbazpjuohminy\"},{\"fullyQualifiedDomainName\":\"lnorwmdu\"},{\"fullyQualifiedDomainName\":\"wpklvxw\"},{\"fullyQualifiedDomainName\":\"ygdxpgpqchis\"}]},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"rxgibbd\",\"action\":\"Allow\"},{\"ipMask\":\"nfo\",\"action\":\"Allow\"},{\"ipMask\":\"rsukokwbqplh\",\"action\":\"Allow\"},{\"ipMask\":\"uepzl\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\"},\"sku\":{\"name\":\"Standard\",\"capacity\":699852198},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"dunvmnnrwrbiorkt\",\"tenantId\":\"ywjhhgdnhx\",\"userAssignedIdentities\":{\"ndieuzaofj\":{\"principalId\":\"fomiloxgg\",\"clientId\":\"fi\"},\"cubiipuipw\":{\"principalId\":\"vcyy\",\"clientId\":\"fgdo\"},\"pevf\":{\"principalId\":\"onmacjekniz\",\"clientId\":\"qvci\"}}},\"location\":\"b\",\"tags\":{\"ccwr\":\"ilbywdxsm\",\"dvoqyt\":\"fscjfnynszquji\"},\"id\":\"byowbblgyavutp\",\"name\":\"hjoxo\",\"type\":\"smsks\"}],\"nextLink\":\"iml\"}")
            .toObject(NamespacesListResult.class);
        Assertions.assertEquals("tbaxk", model.value().get(0).location());
        Assertions.assertEquals("wrck", model.value().get(0).tags().get("yklyhpluodpvruud"));
        Assertions.assertEquals(SkuName.STANDARD, model.value().get(0).sku().name());
        Assertions.assertEquals(1779259768, model.value().get(0).sku().capacity());
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("o", model.value().get(0).identity().principalId());
        Assertions.assertEquals("jw", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("ioknssxmoj",
            model.value().get(0).identity().userAssignedIdentities().get("kwcf").principalId());
        Assertions.assertEquals("vpkjpr",
            model.value().get(0).identity().userAssignedIdentities().get("kwcf").clientId());
        Assertions.assertEquals("mwks",
            model.value().get(0).topicsConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(TopicSpacesConfigurationState.ENABLED,
            model.value().get(0).topicSpacesConfiguration().state());
        Assertions.assertEquals("rtwnawjslbi", model.value().get(0).topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI,
            model.value()
                .get(0)
                .topicSpacesConfiguration()
                .clientAuthentication()
                .alternativeAuthenticationNameSources()
                .get(0));
        Assertions.assertEquals(325411087,
            model.value().get(0).topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(1219456707,
            model.value().get(0).topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.NONE,
            model.value().get(0).topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("uwrykqgaifmvikl",
            model.value().get(0).topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals("vkhbejdznx",
            model.value().get(0).topicSpacesConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(false, model.value().get(0).isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("iv", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals("iml", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NamespacesListResult model = new NamespacesListResult()
            .withValue(Arrays.asList(
                new NamespaceInner().withLocation("tbaxk")
                    .withTags(mapOf("yklyhpluodpvruud", "wrck", "xeclzedqbcvhzlhp", "gzibthostgktstv"))
                    .withSku(new NamespaceSku().withName(SkuName.STANDARD).withCapacity(1779259768))
                    .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                        .withPrincipalId("o")
                        .withTenantId("jw")
                        .withUserAssignedIdentities(mapOf("kwcf",
                            new UserIdentityProperties().withPrincipalId("ioknssxmoj").withClientId("vpkjpr"), "ripltf",
                            new UserIdentityProperties().withPrincipalId("ljyxgtczhe")
                                .withClientId("bsdshmkxmaehvbbx"))))
                    .withPrivateEndpointConnections(Arrays.asList(new PrivateEndpointConnectionInner(),
                        new PrivateEndpointConnectionInner(), new PrivateEndpointConnectionInner()))
                    .withTopicsConfiguration(new TopicsConfiguration().withCustomDomains(
                        Arrays.asList(new CustomDomainConfiguration().withFullyQualifiedDomainName("mwks"),
                            new CustomDomainConfiguration().withFullyQualifiedDomainName("ircizjxvy"),
                            new CustomDomainConfiguration().withFullyQualifiedDomainName("fceacvlhvygd"))))
                    .withTopicSpacesConfiguration(new TopicSpacesConfiguration()
                        .withState(TopicSpacesConfigurationState.ENABLED)
                        .withRouteTopicResourceId("rtwnawjslbi")
                        .withRoutingEnrichments(new RoutingEnrichments()
                            .withStaticProperty(Arrays.asList(new StaticRoutingEnrichment()))
                            .withDynamic(Arrays.asList(new DynamicRoutingEnrichment(), new DynamicRoutingEnrichment())))
                        .withClientAuthentication(new ClientAuthenticationSettings()
                            .withAlternativeAuthenticationNameSources(
                                Arrays.asList(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI,
                                    AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_EMAIL,
                                    AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI,
                                    AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI))
                            .withCustomJwtAuthentication(new CustomJwtAuthenticationSettings()))
                        .withMaximumSessionExpiryInHours(325411087)
                        .withMaximumClientSessionsPerAuthenticationName(1219456707)
                        .withRoutingIdentityInfo(new RoutingIdentityInfo().withType(RoutingIdentityType.NONE)
                            .withUserAssignedIdentity("uwrykqgaifmvikl"))
                        .withCustomDomains(
                            Arrays.asList(new CustomDomainConfiguration().withFullyQualifiedDomainName("vkhbejdznx"))))
                    .withIsZoneRedundant(false)
                    .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                    .withInboundIpRules(
                        Arrays.asList(new InboundIpRule().withIpMask("iv").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("novqfzge")
                                .withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("tul").withAction(IpActionType.ALLOW)))
                    .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO),
                new NamespaceInner().withLocation("b")
                    .withTags(mapOf("ccwr", "ilbywdxsm", "dvoqyt", "fscjfnynszquji"))
                    .withSku(new NamespaceSku().withName(SkuName.STANDARD).withCapacity(699852198))
                    .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withPrincipalId("dunvmnnrwrbiorkt")
                        .withTenantId("ywjhhgdnhx")
                        .withUserAssignedIdentities(mapOf("ndieuzaofj",
                            new UserIdentityProperties().withPrincipalId("fomiloxgg").withClientId("fi"), "cubiipuipw",
                            new UserIdentityProperties().withPrincipalId("vcyy").withClientId("fgdo"), "pevf",
                            new UserIdentityProperties().withPrincipalId("onmacjekniz").withClientId("qvci"))))
                    .withPrivateEndpointConnections(Arrays.asList(new PrivateEndpointConnectionInner(),
                        new PrivateEndpointConnectionInner(), new PrivateEndpointConnectionInner()))
                    .withTopicsConfiguration(new TopicsConfiguration().withCustomDomains(
                        Arrays.asList(new CustomDomainConfiguration().withFullyQualifiedDomainName("wagohbuffk"),
                            new CustomDomainConfiguration().withFullyQualifiedDomainName("rqemvvhmxt"),
                            new CustomDomainConfiguration()
                                .withFullyQualifiedDomainName("rjfut"),
                            new CustomDomainConfiguration().withFullyQualifiedDomainName("coebjvewzcj"))))
                    .withTopicSpacesConfiguration(new TopicSpacesConfiguration()
                        .withState(TopicSpacesConfigurationState.ENABLED)
                        .withRouteTopicResourceId("pmguaadraufac")
                        .withRoutingEnrichments(new RoutingEnrichments()
                            .withStaticProperty(
                                Arrays.asList(new StaticRoutingEnrichment(), new StaticRoutingEnrichment(),
                                    new StaticRoutingEnrichment(), new StaticRoutingEnrichment()))
                            .withDynamic(Arrays.asList(new DynamicRoutingEnrichment(), new DynamicRoutingEnrichment())))
                        .withClientAuthentication(new ClientAuthenticationSettings()
                            .withAlternativeAuthenticationNameSources(
                                Arrays.asList(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_SUBJECT,
                                    AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_EMAIL,
                                    AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_IP))
                            .withCustomJwtAuthentication(new CustomJwtAuthenticationSettings()))
                        .withMaximumSessionExpiryInHours(389915828)
                        .withMaximumClientSessionsPerAuthenticationName(471639164)
                        .withRoutingIdentityInfo(new RoutingIdentityInfo().withType(RoutingIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentity("rds"))
                        .withCustomDomains(
                            Arrays.asList(new CustomDomainConfiguration().withFullyQualifiedDomainName("jbazpjuohminy"),
                                new CustomDomainConfiguration().withFullyQualifiedDomainName("lnorwmdu"),
                                new CustomDomainConfiguration().withFullyQualifiedDomainName("wpklvxw"),
                                new CustomDomainConfiguration().withFullyQualifiedDomainName("ygdxpgpqchis"))))
                    .withIsZoneRedundant(false)
                    .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
                    .withInboundIpRules(
                        Arrays.asList(new InboundIpRule().withIpMask("rxgibbd").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("nfo").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("rsukokwbqplh").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("uepzl").withAction(IpActionType.ALLOW)))
                    .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)))
            .withNextLink("iml");
        model = BinaryData.fromObject(model).toObject(NamespacesListResult.class);
        Assertions.assertEquals("tbaxk", model.value().get(0).location());
        Assertions.assertEquals("wrck", model.value().get(0).tags().get("yklyhpluodpvruud"));
        Assertions.assertEquals(SkuName.STANDARD, model.value().get(0).sku().name());
        Assertions.assertEquals(1779259768, model.value().get(0).sku().capacity());
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("o", model.value().get(0).identity().principalId());
        Assertions.assertEquals("jw", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("ioknssxmoj",
            model.value().get(0).identity().userAssignedIdentities().get("kwcf").principalId());
        Assertions.assertEquals("vpkjpr",
            model.value().get(0).identity().userAssignedIdentities().get("kwcf").clientId());
        Assertions.assertEquals("mwks",
            model.value().get(0).topicsConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(TopicSpacesConfigurationState.ENABLED,
            model.value().get(0).topicSpacesConfiguration().state());
        Assertions.assertEquals("rtwnawjslbi", model.value().get(0).topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI,
            model.value()
                .get(0)
                .topicSpacesConfiguration()
                .clientAuthentication()
                .alternativeAuthenticationNameSources()
                .get(0));
        Assertions.assertEquals(325411087,
            model.value().get(0).topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(1219456707,
            model.value().get(0).topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.NONE,
            model.value().get(0).topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("uwrykqgaifmvikl",
            model.value().get(0).topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals("vkhbejdznx",
            model.value().get(0).topicSpacesConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(false, model.value().get(0).isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("iv", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals("iml", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
