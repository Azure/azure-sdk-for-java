// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopic;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SystemTopicsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"source\":\"zwwy\",\"topicType\":\"djzghximkg\",\"metricResourceId\":\"xpqkjnpy\"},\"identity\":{\"type\":\"None\",\"principalId\":\"tcxmmqm\",\"tenantId\":\"jkyjrexw\",\"userAssignedIdentities\":{\"qtlfoz\":{\"principalId\":\"exf\",\"clientId\":\"daubheeggzgr\"},\"syxzxjmkanbc\":{\"principalId\":\"mrtgjq\",\"clientId\":\"cant\"}}},\"location\":\"azofm\",\"tags\":{\"as\":\"te\",\"cbhaah\":\"manydscdkxwdpw\",\"kkzdfivsu\":\"tofelfhpfixo\",\"fppinmgik\":\"ybsrwzzmrgtxdh\"},\"id\":\"smkw\",\"name\":\"zgfragjh\",\"type\":\"erxlobk\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        SystemTopic response = manager.systemTopics()
            .getByResourceGroupWithResponse("gkvyoh", "s", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("azofm", response.location());
        Assertions.assertEquals("te", response.tags().get("as"));
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("tcxmmqm", response.identity().principalId());
        Assertions.assertEquals("jkyjrexw", response.identity().tenantId());
        Assertions.assertEquals("exf", response.identity().userAssignedIdentities().get("qtlfoz").principalId());
        Assertions.assertEquals("daubheeggzgr", response.identity().userAssignedIdentities().get("qtlfoz").clientId());
        Assertions.assertEquals("zwwy", response.source());
        Assertions.assertEquals("djzghximkg", response.topicType());
    }
}
