// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterAssociationAccessMode;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigProvisioningState;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfiguration;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueSeverity;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueType;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterResourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NetworkSecurityPerimeterConfigurationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Updating\",\"provisioningIssues\":[{\"name\":\"qwqajqu\",\"properties\":{\"issueType\":\"Other\",\"severity\":\"Error\",\"description\":\"oipnfdb\",\"suggestedResourceIds\":[\"sci\",\"nezfvbennmfkbpj\",\"rtek\"],\"suggestedAccessRules\":[\"thr\",\"pmdudsyiurzt\",\"ktjhffe\",\"q\"]}},{\"name\":\"qyouerg\",\"properties\":{\"issueType\":\"Other\",\"severity\":\"Error\",\"description\":\"kpyehhfdyldh\",\"suggestedResourceIds\":[\"d\",\"fzqiyuq\",\"tdereunokakzw\",\"pjlwyxe\"],\"suggestedAccessRules\":[\"mxrfomckew\",\"my\",\"fopxf\",\"jt\"]}}],\"networkSecurityPerimeter\":{\"id\":\"z\",\"perimeterGuid\":\"txfp\",\"location\":\"fhgnuywezygv\"},\"resourceAssociation\":{\"name\":\"aaqwvkg\",\"accessMode\":\"Enforced\"},\"profile\":{\"name\":\"mpvdnogeh\",\"accessRulesVersion\":\"fbortbnukk\",\"accessRules\":[{\"fullyQualifiedArmId\":\"svbxxyjisskob\",\"name\":\"clflioe\",\"type\":\"hxessmvrk\",\"properties\":{}},{\"fullyQualifiedArmId\":\"qeq\",\"name\":\"dxmdses\",\"type\":\"ujbjppp\",\"properties\":{}},{\"fullyQualifiedArmId\":\"pdibfmthi\",\"name\":\"tnejrnminzqp\",\"type\":\"tkihonikzs\",\"properties\":{}}],\"diagnosticSettingsVersion\":\"ffjilzfbpnt\",\"enabledLogCategories\":[\"ensckhbmcarm\",\"yfxxkwykuqdnd\"]}},\"id\":\"lykhkg\",\"name\":\"apvd\",\"type\":\"t\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        NetworkSecurityPerimeterConfiguration response = manager.networkSecurityPerimeterConfigurations()
            .getWithResponse("fwkztsms", NetworkSecurityPerimeterResourceType.TOPICS, "evyllznfhkqyt", "ztadopgfz",
                "gjfcycrsvloyyh", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.UPDATING, response.provisioningState());
        Assertions.assertEquals("qwqajqu", response.provisioningIssues().get(0).name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.OTHER,
            response.provisioningIssues().get(0).issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR,
            response.provisioningIssues().get(0).severity());
        Assertions.assertEquals("oipnfdb", response.provisioningIssues().get(0).description());
        Assertions.assertEquals("sci", response.provisioningIssues().get(0).suggestedResourceIds().get(0));
        Assertions.assertEquals("thr", response.provisioningIssues().get(0).suggestedAccessRules().get(0));
        Assertions.assertEquals("z", response.networkSecurityPerimeter().id());
        Assertions.assertEquals("txfp", response.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("fhgnuywezygv", response.networkSecurityPerimeter().location());
        Assertions.assertEquals("aaqwvkg", response.resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.ENFORCED,
            response.resourceAssociation().accessMode());
        Assertions.assertEquals("mpvdnogeh", response.profile().name());
        Assertions.assertEquals("fbortbnukk", response.profile().accessRulesVersion());
        Assertions.assertEquals("svbxxyjisskob", response.profile().accessRules().get(0).fullyQualifiedArmId());
        Assertions.assertEquals("clflioe", response.profile().accessRules().get(0).name());
        Assertions.assertEquals("hxessmvrk", response.profile().accessRules().get(0).type());
        Assertions.assertEquals("ffjilzfbpnt", response.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("ensckhbmcarm", response.profile().enabledLogCategories().get(0));
    }
}
