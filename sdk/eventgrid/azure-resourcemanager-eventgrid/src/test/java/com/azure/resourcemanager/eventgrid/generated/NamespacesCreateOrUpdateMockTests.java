// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.eventgrid.models.AlternativeAuthenticationNameSource;
import com.azure.resourcemanager.eventgrid.models.ClientAuthenticationSettings;
import com.azure.resourcemanager.eventgrid.models.ConnectionState;
import com.azure.resourcemanager.eventgrid.models.DynamicRoutingEnrichment;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.NamespaceSku;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpoint;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingEnrichments;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityInfo;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.StaticRoutingEnrichment;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfiguration;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import com.azure.resourcemanager.eventgrid.models.TopicsConfiguration;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NamespacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"saebwfwhxorpwal\",\"zwuge\",\"ojfccylhtrht\",\"vazjpwexcd\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"o\",\"name\":\"zzxezmnrkj\",\"type\":\"pjeuxsp\"}],\"provisioningState\":\"Succeeded\",\"topicsConfiguration\":{\"hostname\":\"pmijp\"},\"topicSpacesConfiguration\":{\"state\":\"Disabled\",\"routeTopicResourceId\":\"bhwbdqufvcgnrgla\",\"hostname\":\"wyambhba\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{}]},\"clientAuthentication\":{\"alternativeAuthenticationNameSources\":[\"ClientCertificateUri\",\"ClientCertificateUri\"]},\"maximumSessionExpiryInHours\":1711467829,\"maximumClientSessionsPerAuthenticationName\":35221695,\"routingIdentityInfo\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"rvrk\"}},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"zmlghny\",\"action\":\"Allow\"},{\"ipMask\":\"yeuuk\",\"action\":\"Allow\"},{\"ipMask\":\"xqbolxvhhyqqegat\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\"},\"sku\":{\"name\":\"Standard\",\"capacity\":348340983},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"xch\",\"tenantId\":\"ibmg\",\"userAssignedIdentities\":{\"qjsvep\":{\"principalId\":\"cjc\",\"clientId\":\"airwcqzoofj\"}}},\"location\":\"htleberpyljek\",\"tags\":{\"jjqxowkdnjr\":\"n\",\"wiehycpn\":\"gkr\"},\"id\":\"wawonoehrguql\",\"name\":\"fwafbjz\",\"type\":\"pyrgu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Namespace response = manager.namespaces().define("mazdfsqxh").withRegion("qbbewfcuqfpyyxm")
            .withExistingResourceGroup("qhdgsjsatmrn")
            .withTags(mapOf("yjshcyb", "tmvwituwe", "vo", "fuppoxprc", "iikmoxrezsvavlrx", "ujx"))
            .withSku(new NamespaceSku().withName(SkuName.STANDARD).withCapacity(1898700029))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED).withPrincipalId("uauktwieopexelx")
                .withTenantId("wrswyiljp")
                .withUserAssignedIdentities(mapOf("ujsqycm",
                    new UserIdentityProperties().withPrincipalId("xyxyaux").withClientId("ddobmcnltmwyt"),
                    "iwrycgnwplrrb", new UserIdentityProperties().withPrincipalId("xfabl").withClientId("pwbmwhria"),
                    "bfs", new UserIdentityProperties().withPrincipalId("ctsbbibt").withClientId("uhqvums"))))
            .withPrivateEndpointConnections(Arrays.asList(
                new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                    .withGroupIds(Arrays.asList("r", "pvgrszr", "wtdrcwg"))
                    .withPrivateLinkServiceConnectionState(new ConnectionState())
                    .withProvisioningState(ResourceProvisioningState.UPDATING),
                new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                    .withGroupIds(Arrays.asList("dqpz", "zx"))
                    .withPrivateLinkServiceConnectionState(new ConnectionState())
                    .withProvisioningState(ResourceProvisioningState.SUCCEEDED),
                new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                    .withGroupIds(Arrays.asList("eylajamcajyhft"))
                    .withPrivateLinkServiceConnectionState(new ConnectionState())
                    .withProvisioningState(ResourceProvisioningState.DELETING)))
            .withTopicsConfiguration(new TopicsConfiguration())
            .withTopicSpacesConfiguration(new TopicSpacesConfiguration()
                .withState(TopicSpacesConfigurationState.ENABLED).withRouteTopicResourceId(
                    "xb")
                .withRoutingEnrichments(new RoutingEnrichments()
                    .withStaticProperty(Arrays.asList(new StaticRoutingEnrichment(), new StaticRoutingEnrichment(),
                        new StaticRoutingEnrichment()))
                    .withDynamic(Arrays.asList(new DynamicRoutingEnrichment())))
                .withClientAuthentication(new ClientAuthenticationSettings().withAlternativeAuthenticationNameSources(
                    Arrays.asList(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_DNS,
                        AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI,
                        AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_SUBJECT,
                        AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_IP)))
                .withMaximumSessionExpiryInHours(44425282).withMaximumClientSessionsPerAuthenticationName(103195865)
                .withRoutingIdentityInfo(new RoutingIdentityInfo().withType(RoutingIdentityType.NONE)
                    .withUserAssignedIdentity("czfzwushlc")))
            .withIsZoneRedundant(false).withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("ezpfki").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("dqzsaaoqdsgp").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("jq").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("cnlrt").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO).create();

        Assertions.assertEquals("htleberpyljek", response.location());
        Assertions.assertEquals("n", response.tags().get("jjqxowkdnjr"));
        Assertions.assertEquals(SkuName.STANDARD, response.sku().name());
        Assertions.assertEquals(348340983, response.sku().capacity());
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("xch", response.identity().principalId());
        Assertions.assertEquals("ibmg", response.identity().tenantId());
        Assertions.assertEquals("cjc", response.identity().userAssignedIdentities().get("qjsvep").principalId());
        Assertions.assertEquals("airwcqzoofj", response.identity().userAssignedIdentities().get("qjsvep").clientId());
        Assertions.assertEquals("saebwfwhxorpwal", response.privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED,
            response.privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals(TopicSpacesConfigurationState.DISABLED, response.topicSpacesConfiguration().state());
        Assertions.assertEquals("bhwbdqufvcgnrgla", response.topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI,
            response.topicSpacesConfiguration().clientAuthentication().alternativeAuthenticationNameSources().get(0));
        Assertions.assertEquals(1711467829, response.topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(35221695,
            response.topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.SYSTEM_ASSIGNED,
            response.topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("rvrk",
            response.topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals(false, response.isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals("zmlghny", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.minimumTlsVersionAllowed());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
