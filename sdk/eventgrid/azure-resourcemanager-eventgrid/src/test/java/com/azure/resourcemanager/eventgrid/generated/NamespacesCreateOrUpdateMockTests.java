// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.eventgrid.models.ConnectionState;
import com.azure.resourcemanager.eventgrid.models.CustomDomainConfiguration;
import com.azure.resourcemanager.eventgrid.models.CustomDomainIdentity;
import com.azure.resourcemanager.eventgrid.models.CustomDomainValidationState;
import com.azure.resourcemanager.eventgrid.models.DynamicRoutingEnrichment;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.NamespaceSku;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpoint;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingEnrichments;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityInfo;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.StaticRoutingEnrichment;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfiguration;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import com.azure.resourcemanager.eventgrid.models.TopicsConfiguration;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"jjsbcmlzaahzbhur\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"olirhhmojusuz\",\"name\":\"fjzc\",\"type\":\"aaxoialahfxwcc\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ukmkczynu\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"eqshavljqkxyrqol\",\"name\":\"thbb\",\"type\":\"kgzukwdrnzkjth\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ncjmlfuyf\",\"bpfiddhlrufz\",\"qyjmqrfuioc\",\"selqkrsazrhxud\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"tffisjmr\",\"name\":\"khmwdmd\",\"type\":\"gyqi\"}],\"provisioningState\":\"Succeeded\",\"topicsConfiguration\":{\"hostname\":\"jawh\",\"customDomains\":[{\"fullyQualifiedDomainName\":\"nqf\",\"validationState\":\"ErrorRetrievingDnsRecord\",\"identity\":{},\"certificateUrl\":\"vmyolcaym\",\"expectedTxtRecordName\":\"htvsnvl\",\"expectedTxtRecordValue\":\"dnzyzawatuwqko\"},{\"fullyQualifiedDomainName\":\"bczothymgobllms\",\"validationState\":\"Approved\",\"identity\":{},\"certificateUrl\":\"maanea\",\"expectedTxtRecordName\":\"t\",\"expectedTxtRecordValue\":\"obcyanrfvqtvk\"},{\"fullyQualifiedDomainName\":\"gvoogxkfna\",\"validationState\":\"Pending\",\"identity\":{},\"certificateUrl\":\"hccto\",\"expectedTxtRecordName\":\"o\",\"expectedTxtRecordValue\":\"rnskby\"},{\"fullyQualifiedDomainName\":\"quhczygxvh\",\"validationState\":\"Approved\",\"identity\":{},\"certificateUrl\":\"cxq\",\"expectedTxtRecordName\":\"hscozawmvgxsmpk\",\"expectedTxtRecordValue\":\"wirfljf\"}]},\"topicSpacesConfiguration\":{\"state\":\"Disabled\",\"routeTopicResourceId\":\"uoxudnmckaprh\",\"hostname\":\"qiijgenc\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{},{}]},\"maximumSessionExpiryInHours\":579117405,\"maximumClientSessionsPerAuthenticationName\":1020255281,\"routingIdentityInfo\":{\"type\":\"None\",\"userAssignedIdentity\":\"wlt\"},\"customDomains\":[{\"fullyQualifiedDomainName\":\"whldxwhie\",\"validationState\":\"ErrorRetrievingDnsRecord\",\"identity\":{},\"certificateUrl\":\"smfx\",\"expectedTxtRecordName\":\"vprstv\",\"expectedTxtRecordValue\":\"tbfjtdyotnplf\"},{\"fullyQualifiedDomainName\":\"cqoccq\",\"validationState\":\"Pending\",\"identity\":{},\"certificateUrl\":\"tjtdrhutfd\",\"expectedTxtRecordName\":\"dtxopgehpadkmdzg\",\"expectedTxtRecordValue\":\"zxvctkbbxuharls\"},{\"fullyQualifiedDomainName\":\"rncclabv\",\"validationState\":\"Approved\",\"identity\":{},\"certificateUrl\":\"uxx\",\"expectedTxtRecordName\":\"bmyqjog\",\"expectedTxtRecordValue\":\"saidjan\"},{\"fullyQualifiedDomainName\":\"rmov\",\"validationState\":\"ErrorRetrievingDnsRecord\",\"identity\":{},\"certificateUrl\":\"ntujmoilunwemhd\",\"expectedTxtRecordName\":\"ljslkyozd\",\"expectedTxtRecordValue\":\"zjuegrh\"}]},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"vxjnxv\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.1\"},\"sku\":{\"name\":\"Standard\",\"capacity\":782366599},\"identity\":{\"type\":\"None\",\"principalId\":\"bj\",\"tenantId\":\"wmtqsmoxsaz\",\"userAssignedIdentities\":{\"nqbdnddbboz\":{\"principalId\":\"gwecywnfysz\",\"clientId\":\"czs\"},\"jhqlfmsib\":{\"principalId\":\"vrmkjmyitrchwu\",\"clientId\":\"xeeihtpmno\"}}},\"location\":\"yrfgxkyd\",\"tags\":{\"lakxpejpewp\":\"pgfqvmtyw\"},\"id\":\"jlfxampqcrzgeuq\",\"name\":\"b\",\"type\":\"iatwfaujegqdtadr\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Namespace response
            = manager.namespaces()
                .define("bouguxtndopgjt")
                .withRegion("tzxnmxsdobygoog")
                .withExistingResourceGroup("ciqgjjrlhiqlwixv")
                .withTags(mapOf("csa", "pjxvazyjf", "sgm", "djnosdkvibf", "ktz", "trnzpducdaaktu", "wkppnwyytfvp",
                    "oimyfpqd"))
                .withSku(new NamespaceSku().withName(SkuName.STANDARD).withCapacity(1193531622))
                .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                    .withPrincipalId("ukiymjzpwdlvwt")
                    .withTenantId("smosaonhqnam")
                    .withUserAssignedIdentities(mapOf("jlcyizy",
                        new UserIdentityProperties().withPrincipalId("tassaekewna").withClientId("ajbk"), "ecpwgo",
                        new UserIdentityProperties().withPrincipalId("cvxodkrvfsxxby").withClientId("sqlv"))))
                .withPrivateEndpointConnections(Arrays.asList(
                    new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                        .withGroupIds(Arrays.asList("pdlndbeaqbkixvv"))
                        .withPrivateLinkServiceConnectionState(new ConnectionState())
                        .withProvisioningState(ResourceProvisioningState.CANCELED),
                    new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                        .withGroupIds(Arrays.asList("yezolgjzmicu"))
                        .withPrivateLinkServiceConnectionState(new ConnectionState())
                        .withProvisioningState(ResourceProvisioningState.CANCELED),
                    new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                        .withGroupIds(Arrays.asList("aatsdohzniucb", "aombwiinjdl", "wktlepowa", "vqxuajgcqw"))
                        .withPrivateLinkServiceConnectionState(new ConnectionState())
                        .withProvisioningState(ResourceProvisioningState.CREATING),
                    new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint())
                        .withGroupIds(Arrays.asList("x", "br", "lttfyhc", "jwsuoardnag"))
                        .withPrivateLinkServiceConnectionState(new ConnectionState())
                        .withProvisioningState(ResourceProvisioningState.UPDATING)))
                .withTopicsConfiguration(new TopicsConfiguration().withCustomDomains(Arrays.asList(
                    new CustomDomainConfiguration().withFullyQualifiedDomainName("qzgihotjecohmx")
                        .withValidationState(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD)
                        .withIdentity(new CustomDomainIdentity())
                        .withCertificateUrl("skapbxwie")
                        .withExpectedTxtRecordName("uyader")
                        .withExpectedTxtRecordValue("fokyks"),
                    new CustomDomainConfiguration().withFullyQualifiedDomainName("imyc")
                        .withValidationState(CustomDomainValidationState.PENDING)
                        .withIdentity(new CustomDomainIdentity())
                        .withCertificateUrl("cxzznnuife")
                        .withExpectedTxtRecordName("ejeg")
                        .withExpectedTxtRecordValue("kjguwrjmwvvbtuq"),
                    new CustomDomainConfiguration().withFullyQualifiedDomainName("xximwgxq")
                        .withValidationState(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD)
                        .withIdentity(new CustomDomainIdentity())
                        .withCertificateUrl("tjgxieqfky")
                        .withExpectedTxtRecordName("iwvjaqupbyyn")
                        .withExpectedTxtRecordValue("kpajbmgeume"),
                    new CustomDomainConfiguration().withFullyQualifiedDomainName("mj")
                        .withValidationState(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD)
                        .withIdentity(new CustomDomainIdentity())
                        .withCertificateUrl("cwkqmtxape")
                        .withExpectedTxtRecordName("scrpilgftrqrej")
                        .withExpectedTxtRecordValue("ahuqi"))))
                .withTopicSpacesConfiguration(new TopicSpacesConfiguration()
                    .withState(TopicSpacesConfigurationState.ENABLED)
                    .withRouteTopicResourceId("lfxlmuifmuadj")
                    .withRoutingEnrichments(new RoutingEnrichments()
                        .withStaticProperty(Arrays.asList(new StaticRoutingEnrichment(), new StaticRoutingEnrichment(),
                            new StaticRoutingEnrichment(), new StaticRoutingEnrichment()))
                        .withDynamic(Arrays.asList(new DynamicRoutingEnrichment(), new DynamicRoutingEnrichment(),
                            new DynamicRoutingEnrichment(), new DynamicRoutingEnrichment())))
                    .withMaximumSessionExpiryInHours(1495134514)
                    .withMaximumClientSessionsPerAuthenticationName(493687960)
                    .withRoutingIdentityInfo(new RoutingIdentityInfo().withType(RoutingIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity("bnxgzt"))
                    .withCustomDomains(Arrays.asList(
                        new CustomDomainConfiguration().withFullyQualifiedDomainName("ctjchfjv")
                            .withValidationState(CustomDomainValidationState.APPROVED)
                            .withIdentity(new CustomDomainIdentity())
                            .withCertificateUrl("ebecuvlbefv")
                            .withExpectedTxtRecordName("ljkxpylrwoxz")
                            .withExpectedTxtRecordValue("psyxjije"),
                        new CustomDomainConfiguration().withFullyQualifiedDomainName("pdvrbkerdkdkga")
                            .withValidationState(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD)
                            .withIdentity(new CustomDomainIdentity())
                            .withCertificateUrl("ildfk")
                            .withExpectedTxtRecordName("feygzqp")
                            .withExpectedTxtRecordValue("isf"))))
                .withIsZoneRedundant(true)
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withInboundIpRules(
                    Arrays.asList(new InboundIpRule().withIpMask("xumentqontwhy").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("ulwivqtowlhlsy").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("ajasqubfajcywhjq").withAction(IpActionType.ALLOW)))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                .create();

        Assertions.assertEquals("yrfgxkyd", response.location());
        Assertions.assertEquals("pgfqvmtyw", response.tags().get("lakxpejpewp"));
        Assertions.assertEquals(SkuName.STANDARD, response.sku().name());
        Assertions.assertEquals(782366599, response.sku().capacity());
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("bj", response.identity().principalId());
        Assertions.assertEquals("wmtqsmoxsaz", response.identity().tenantId());
        Assertions.assertEquals("gwecywnfysz",
            response.identity().userAssignedIdentities().get("nqbdnddbboz").principalId());
        Assertions.assertEquals("czs", response.identity().userAssignedIdentities().get("nqbdnddbboz").clientId());
        Assertions.assertEquals("jjsbcmlzaahzbhur", response.privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED,
            response.privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("nqf",
            response.topicsConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD,
            response.topicsConfiguration().customDomains().get(0).validationState());
        Assertions.assertEquals("vmyolcaym", response.topicsConfiguration().customDomains().get(0).certificateUrl());
        Assertions.assertEquals("htvsnvl",
            response.topicsConfiguration().customDomains().get(0).expectedTxtRecordName());
        Assertions.assertEquals("dnzyzawatuwqko",
            response.topicsConfiguration().customDomains().get(0).expectedTxtRecordValue());
        Assertions.assertEquals(TopicSpacesConfigurationState.DISABLED, response.topicSpacesConfiguration().state());
        Assertions.assertEquals("uoxudnmckaprh", response.topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(579117405, response.topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(1020255281,
            response.topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.NONE,
            response.topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("wlt",
            response.topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals("whldxwhie",
            response.topicSpacesConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD,
            response.topicSpacesConfiguration().customDomains().get(0).validationState());
        Assertions.assertEquals("smfx", response.topicSpacesConfiguration().customDomains().get(0).certificateUrl());
        Assertions.assertEquals("vprstv",
            response.topicSpacesConfiguration().customDomains().get(0).expectedTxtRecordName());
        Assertions.assertEquals("tbfjtdyotnplf",
            response.topicSpacesConfiguration().customDomains().get(0).expectedTxtRecordValue());
        Assertions.assertEquals(false, response.isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals("vxjnxv", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.minimumTlsVersionAllowed());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
