// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.NetworkSecurityPerimeterConfigurationProperties;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterAssociationAccessMode;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigProvisioningState;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueSeverity;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueType;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssues;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationProfile;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterInfo;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterProfileAccessRule;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterProfileAccessRuleDirection;
import com.azure.resourcemanager.eventgrid.models.ResourceAssociation;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterConfigurationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterConfigurationProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"provisioningIssues\":[{\"name\":\"ao\",\"properties\":{\"issueType\":\"MissingIdentityConfiguration\",\"severity\":\"Error\",\"description\":\"porqzdfu\",\"suggestedResourceIds\":[\"vkfvxcnqmxqpswok\",\"vkhlggdhbemz\"],\"suggestedAccessRules\":[\"sz\",\"wiwtglxxhl\",\"fpgpicrmnzhrgm\"]}}],\"networkSecurityPerimeter\":{\"id\":\"sxvpqcbfrmbodths\",\"perimeterGuid\":\"gvriibakclac\",\"location\":\"rnxousxauzlwvsg\"},\"resourceAssociation\":{\"name\":\"hqf\",\"accessMode\":\"Learning\"},\"profile\":{\"name\":\"xmmkjs\",\"accessRulesVersion\":\"hnwpzt\",\"accessRules\":[{\"fullyQualifiedArmId\":\"mribiat\",\"name\":\"plucfotangcfhnyk\",\"type\":\"ugswvx\",\"properties\":{\"direction\":\"Inbound\",\"addressPrefixes\":[\"m\",\"tx\"],\"subscriptions\":[\"xmcuqud\",\"cvclxynpdk\",\"gfabuiyjibuzphdu\",\"neiknpg\"],\"networkSecurityPerimeters\":[{},{},{}],\"fullyQualifiedDomainNames\":[\"uqh\",\"btozipqwje\",\"mur\",\"xxgewpk\"],\"emailAddresses\":[\"ylkmqp\",\"o\",\"hlfbcgwgc\",\"oxoebqi\"],\"phoneNumbers\":[\"pnwjfujq\",\"afcba\"]}},{\"fullyQualifiedArmId\":\"pzpofoiyjw\",\"name\":\"ilkmk\",\"type\":\"olvdnd\",\"properties\":{\"direction\":\"Outbound\",\"addressPrefixes\":[\"phuartv\",\"iukyefchnmna\",\"mnxhkxjqirwrweo\"],\"subscriptions\":[\"fifhxwrsnew\",\"ozqvbubqmam\"],\"networkSecurityPerimeters\":[{},{},{}],\"fullyQualifiedDomainNames\":[\"hxzga\",\"ttaboidvmfqh\",\"pubowsepdfg\",\"mtdherngb\"],\"emailAddresses\":[\"uahokq\",\"obkauxofsh\",\"phwpnulaiywzej\"],\"phoneNumbers\":[\"slwkojpl\"]}},{\"fullyQualifiedArmId\":\"dnpdwrpqaf\",\"name\":\"ug\",\"type\":\"n\",\"properties\":{\"direction\":\"Inbound\",\"addressPrefixes\":[\"fypococtfjgti\"],\"subscriptions\":[\"vzuyturmlmu\",\"wolba\"],\"networkSecurityPerimeters\":[{},{}],\"fullyQualifiedDomainNames\":[\"ionszonwp\"],\"emailAddresses\":[\"jinnix\",\"awrtmjfjmyccxlz\",\"coxovn\",\"khenlus\"],\"phoneNumbers\":[\"dtjxtxrdcqt\"]}}],\"diagnosticSettingsVersion\":\"idttgepus\",\"enabledLogCategories\":[\"jtcvuwkasizies\",\"uughtuqfecjxeyg\"]}}")
            .toObject(NetworkSecurityPerimeterConfigurationProperties.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("ao", model.provisioningIssues().get(0).name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.MISSING_IDENTITY_CONFIGURATION,
            model.provisioningIssues().get(0).issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR,
            model.provisioningIssues().get(0).severity());
        Assertions.assertEquals("porqzdfu", model.provisioningIssues().get(0).description());
        Assertions.assertEquals("vkfvxcnqmxqpswok", model.provisioningIssues().get(0).suggestedResourceIds().get(0));
        Assertions.assertEquals("sz", model.provisioningIssues().get(0).suggestedAccessRules().get(0));
        Assertions.assertEquals("sxvpqcbfrmbodths", model.networkSecurityPerimeter().id());
        Assertions.assertEquals("gvriibakclac", model.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("rnxousxauzlwvsg", model.networkSecurityPerimeter().location());
        Assertions.assertEquals("hqf", model.resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.LEARNING,
            model.resourceAssociation().accessMode());
        Assertions.assertEquals("xmmkjs", model.profile().name());
        Assertions.assertEquals("hnwpzt", model.profile().accessRulesVersion());
        Assertions.assertEquals("mribiat", model.profile().accessRules().get(0).fullyQualifiedArmId());
        Assertions.assertEquals("plucfotangcfhnyk", model.profile().accessRules().get(0).name());
        Assertions.assertEquals("ugswvx", model.profile().accessRules().get(0).type());
        Assertions.assertEquals(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND,
            model.profile().accessRules().get(0).direction());
        Assertions.assertEquals("m", model.profile().accessRules().get(0).addressPrefixes().get(0));
        Assertions.assertEquals("xmcuqud", model.profile().accessRules().get(0).subscriptions().get(0));
        Assertions.assertEquals("uqh", model.profile().accessRules().get(0).fullyQualifiedDomainNames().get(0));
        Assertions.assertEquals("ylkmqp", model.profile().accessRules().get(0).emailAddresses().get(0));
        Assertions.assertEquals("pnwjfujq", model.profile().accessRules().get(0).phoneNumbers().get(0));
        Assertions.assertEquals("idttgepus", model.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("jtcvuwkasizies", model.profile().enabledLogCategories().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterConfigurationProperties model
            = new NetworkSecurityPerimeterConfigurationProperties()
                .withProvisioningState(NetworkSecurityPerimeterConfigProvisioningState.SUCCEEDED)
                .withProvisioningIssues(Arrays.asList(new NetworkSecurityPerimeterConfigurationIssues().withName("ao")
                    .withIssueType(NetworkSecurityPerimeterConfigurationIssueType.MISSING_IDENTITY_CONFIGURATION)
                    .withSeverity(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR).withDescription("porqzdfu")
                    .withSuggestedResourceIds(Arrays.asList("vkfvxcnqmxqpswok", "vkhlggdhbemz"))
                    .withSuggestedAccessRules(Arrays.asList("sz", "wiwtglxxhl", "fpgpicrmnzhrgm"))))
                .withNetworkSecurityPerimeter(new NetworkSecurityPerimeterInfo().withId("sxvpqcbfrmbodths")
                    .withPerimeterGuid("gvriibakclac").withLocation("rnxousxauzlwvsg"))
                .withResourceAssociation(new ResourceAssociation().withName("hqf")
                    .withAccessMode(NetworkSecurityPerimeterAssociationAccessMode.LEARNING))
                .withProfile(
                    new NetworkSecurityPerimeterConfigurationProfile()
                        .withName(
                            "xmmkjs")
                        .withAccessRulesVersion("hnwpzt")
                        .withAccessRules(Arrays.asList(new NetworkSecurityPerimeterProfileAccessRule()
                            .withFullyQualifiedArmId("mribiat").withName("plucfotangcfhnyk").withType("ugswvx")
                            .withDirection(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND)
                            .withAddressPrefixes(Arrays.asList("m", "tx"))
                            .withSubscriptions(Arrays.asList("xmcuqud", "cvclxynpdk", "gfabuiyjibuzphdu", "neiknpg"))
                            .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeterInfo(),
                                new NetworkSecurityPerimeterInfo(), new NetworkSecurityPerimeterInfo()))
                            .withFullyQualifiedDomainNames(Arrays.asList("uqh", "btozipqwje", "mur", "xxgewpk"))
                            .withEmailAddresses(Arrays.asList("ylkmqp", "o", "hlfbcgwgc", "oxoebqi"))
                            .withPhoneNumbers(Arrays.asList("pnwjfujq", "afcba")),
                            new NetworkSecurityPerimeterProfileAccessRule().withFullyQualifiedArmId("pzpofoiyjw")
                                .withName("ilkmk").withType("olvdnd")
                                .withDirection(NetworkSecurityPerimeterProfileAccessRuleDirection.OUTBOUND)
                                .withAddressPrefixes(Arrays.asList("phuartv", "iukyefchnmna", "mnxhkxjqirwrweo"))
                                .withSubscriptions(Arrays.asList("fifhxwrsnew", "ozqvbubqmam"))
                                .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeterInfo(),
                                    new NetworkSecurityPerimeterInfo(), new NetworkSecurityPerimeterInfo()))
                                .withFullyQualifiedDomainNames(
                                    Arrays.asList("hxzga", "ttaboidvmfqh", "pubowsepdfg", "mtdherngb"))
                                .withEmailAddresses(Arrays.asList("uahokq", "obkauxofsh", "phwpnulaiywzej"))
                                .withPhoneNumbers(Arrays.asList("slwkojpl")),
                            new NetworkSecurityPerimeterProfileAccessRule().withFullyQualifiedArmId("dnpdwrpqaf")
                                .withName("ug").withType("n")
                                .withDirection(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND)
                                .withAddressPrefixes(Arrays.asList("fypococtfjgti"))
                                .withSubscriptions(Arrays.asList("vzuyturmlmu", "wolba"))
                                .withNetworkSecurityPerimeters(Arrays.asList(new NetworkSecurityPerimeterInfo(),
                                    new NetworkSecurityPerimeterInfo()))
                                .withFullyQualifiedDomainNames(Arrays.asList("ionszonwp"))
                                .withEmailAddresses(Arrays.asList("jinnix", "awrtmjfjmyccxlz", "coxovn", "khenlus"))
                                .withPhoneNumbers(Arrays.asList("dtjxtxrdcqt"))))
                        .withDiagnosticSettingsVersion("idttgepus")
                        .withEnabledLogCategories(Arrays.asList("jtcvuwkasizies", "uughtuqfecjxeyg")));
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterConfigurationProperties.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("ao", model.provisioningIssues().get(0).name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.MISSING_IDENTITY_CONFIGURATION,
            model.provisioningIssues().get(0).issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR,
            model.provisioningIssues().get(0).severity());
        Assertions.assertEquals("porqzdfu", model.provisioningIssues().get(0).description());
        Assertions.assertEquals("vkfvxcnqmxqpswok", model.provisioningIssues().get(0).suggestedResourceIds().get(0));
        Assertions.assertEquals("sz", model.provisioningIssues().get(0).suggestedAccessRules().get(0));
        Assertions.assertEquals("sxvpqcbfrmbodths", model.networkSecurityPerimeter().id());
        Assertions.assertEquals("gvriibakclac", model.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("rnxousxauzlwvsg", model.networkSecurityPerimeter().location());
        Assertions.assertEquals("hqf", model.resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.LEARNING,
            model.resourceAssociation().accessMode());
        Assertions.assertEquals("xmmkjs", model.profile().name());
        Assertions.assertEquals("hnwpzt", model.profile().accessRulesVersion());
        Assertions.assertEquals("mribiat", model.profile().accessRules().get(0).fullyQualifiedArmId());
        Assertions.assertEquals("plucfotangcfhnyk", model.profile().accessRules().get(0).name());
        Assertions.assertEquals("ugswvx", model.profile().accessRules().get(0).type());
        Assertions.assertEquals(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND,
            model.profile().accessRules().get(0).direction());
        Assertions.assertEquals("m", model.profile().accessRules().get(0).addressPrefixes().get(0));
        Assertions.assertEquals("xmcuqud", model.profile().accessRules().get(0).subscriptions().get(0));
        Assertions.assertEquals("uqh", model.profile().accessRules().get(0).fullyQualifiedDomainNames().get(0));
        Assertions.assertEquals("ylkmqp", model.profile().accessRules().get(0).emailAddresses().get(0));
        Assertions.assertEquals("pnwjfujq", model.profile().accessRules().get(0).phoneNumbers().get(0));
        Assertions.assertEquals("idttgepus", model.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("jtcvuwkasizies", model.profile().enabledLogCategories().get(0));
    }
}
