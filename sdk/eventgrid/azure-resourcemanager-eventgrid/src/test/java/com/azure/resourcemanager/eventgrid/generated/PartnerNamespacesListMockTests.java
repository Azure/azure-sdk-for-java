// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespace;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerNamespacesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ssgwjfkain\",\"muymvec\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"cbgmusaictd\",\"name\":\"cnk\",\"type\":\"zohnrddclzeqozre\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ixbnj\",\"qvzyuexozonyn\",\"ameudpabcreu\",\"zosgyjxvcvasorm\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"vdubew\",\"name\":\"zygba\",\"type\":\"uvecovsd\"}],\"provisioningState\":\"Updating\",\"partnerRegistrationFullyQualifiedId\":\"tdbakrlimzf\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"eqsifjmclngygnhr\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"tajdopggorwjoqtr\",\"action\":\"Allow\"},{\"ipMask\":\"clpofyrlmwkp\",\"action\":\"Allow\"},{\"ipMask\":\"xjgvh\",\"action\":\"Allow\"},{\"ipMask\":\"mkakmkook\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"uyakm\",\"tags\":{\"lzqjimejtgzjxx\":\"tfowzkroyrdurx\",\"ayyzivrmitc\":\"fejlzuqloiw\",\"fibfiplhx\":\"qlhchwhrktjle\",\"jow\":\"nsmy\"},\"id\":\"yeyzm\",\"name\":\"dsqcmhnxl\",\"type\":\"buwodmachbkv\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PartnerNamespace> response
            = manager.partnerNamespaces().list("r", 55620701, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("uyakm", response.iterator().next().location());
        Assertions.assertEquals("tfowzkroyrdurx", response.iterator().next().tags().get("lzqjimejtgzjxx"));
        Assertions.assertEquals("tdbakrlimzf", response.iterator().next().partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER,
            response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("tajdopggorwjoqtr", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            response.iterator().next().partnerTopicRoutingMode());
    }
}
