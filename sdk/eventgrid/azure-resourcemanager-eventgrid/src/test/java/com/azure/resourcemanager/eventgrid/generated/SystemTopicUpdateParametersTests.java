// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"hpsprkzyaupiac\":\"kbwetnj\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"bwqroohtuovm\",\"tenantId\":\"nur\",\"userAssignedIdentities\":{\"jxl\":{\"principalId\":\"ghihpvecms\",\"clientId\":\"lbl\"},\"eukdqkkyih\":{\"principalId\":\"sjuscvsfxigctmg\",\"clientId\":\"upbezqccydrt\"},\"waoaguhi\":{\"principalId\":\"geqmgqzgwldoych\",\"clientId\":\"lcecfeh\"},\"kwqejpmvsseh\":{\"principalId\":\"llizs\",\"clientId\":\"csjvhrwef\"}}}}")
            .toObject(SystemTopicUpdateParameters.class);
        Assertions.assertEquals("kbwetnj", model.tags().get("hpsprkzyaupiac"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("bwqroohtuovm", model.identity().principalId());
        Assertions.assertEquals("nur", model.identity().tenantId());
        Assertions.assertEquals("ghihpvecms", model.identity().userAssignedIdentities().get("jxl").principalId());
        Assertions.assertEquals("lbl", model.identity().userAssignedIdentities().get("jxl").clientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicUpdateParameters model = new SystemTopicUpdateParameters()
            .withTags(mapOf("hpsprkzyaupiac", "kbwetnj"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withPrincipalId("bwqroohtuovm")
                .withTenantId("nur")
                .withUserAssignedIdentities(mapOf("jxl",
                    new UserIdentityProperties().withPrincipalId("ghihpvecms").withClientId("lbl"), "eukdqkkyih",
                    new UserIdentityProperties().withPrincipalId("sjuscvsfxigctmg").withClientId("upbezqccydrt"),
                    "waoaguhi", new UserIdentityProperties().withPrincipalId("geqmgqzgwldoych").withClientId("lcecfeh"),
                    "kwqejpmvsseh", new UserIdentityProperties().withPrincipalId("llizs").withClientId("csjvhrwef"))));
        model = BinaryData.fromObject(model).toObject(SystemTopicUpdateParameters.class);
        Assertions.assertEquals("kbwetnj", model.tags().get("hpsprkzyaupiac"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("bwqroohtuovm", model.identity().principalId());
        Assertions.assertEquals("nur", model.identity().tenantId());
        Assertions.assertEquals("ghihpvecms", model.identity().userAssignedIdentities().get("jxl").principalId());
        Assertions.assertEquals("lbl", model.identity().userAssignedIdentities().get("jxl").clientId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
