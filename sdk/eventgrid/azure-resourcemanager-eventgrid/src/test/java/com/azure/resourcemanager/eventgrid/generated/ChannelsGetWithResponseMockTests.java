// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Channel;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ChannelsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"channelType\":\"PartnerDestination\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"sqxtltclkrdpq\",\"resourceGroupName\":\"hyrfrakkldgr\",\"name\":\"fcmfcn\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"atxjtiel\":{},\"zqgxx\":{}}},\"source\":\"bbmtlpqagynoip\"},\"partnerDestinationInfo\":{\"endpointType\":\"PartnerDestinationInfo\",\"azureSubscriptionId\":\"calincryqxz\",\"resourceGroupName\":\"q\",\"name\":\"bmqimi\",\"endpointServiceContext\":\"qruqguh\",\"resourceMoveChangeHistory\":[{\"azureSubscriptionId\":\"tasvvoqs\",\"resourceGroupName\":\"kfla\",\"changedTimeUtc\":\"2021-06-30T07:43:41Z\"},{\"azureSubscriptionId\":\"xsyaowuzowpuoh\",\"resourceGroupName\":\"cprgukxrztiochl\",\"changedTimeUtc\":\"2021-11-23T11:53:15Z\"},{\"azureSubscriptionId\":\"mqrud\",\"resourceGroupName\":\"zcbf\",\"changedTimeUtc\":\"2021-07-10T18:58:26Z\"}]},\"messageForActivation\":\"unfhiucnmfbcp\",\"provisioningState\":\"Failed\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-10-06T01:43:57Z\"},\"id\":\"zuedkyzbfvxovqk\",\"name\":\"iuxqggvqr\",\"type\":\"hyhlwcjsqg\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Channel response = manager.channels()
            .getWithResponse("qqax", "yvymcnudndo", "bhjxwxqweuipmpv", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, response.channelType());
        Assertions.assertEquals("sqxtltclkrdpq", response.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("hyrfrakkldgr", response.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("fcmfcn", response.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("bbmtlpqagynoip", response.partnerTopicInfo().source());
        Assertions.assertEquals("calincryqxz", response.partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("q", response.partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("bmqimi", response.partnerDestinationInfo().name());
        Assertions.assertEquals("qruqguh", response.partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("tasvvoqs",
            response.partnerDestinationInfo().resourceMoveChangeHistory().get(0).azureSubscriptionId());
        Assertions.assertEquals("kfla",
            response.partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-30T07:43:41Z"),
            response.partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("unfhiucnmfbcp", response.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.FAILED, response.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, response.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-06T01:43:57Z"),
            response.expirationTimeIfNotActivatedUtc());
    }
}
