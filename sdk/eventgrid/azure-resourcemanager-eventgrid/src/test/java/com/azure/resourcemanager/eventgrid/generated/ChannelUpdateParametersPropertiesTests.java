// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ChannelUpdateParametersProperties;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerUpdateTopicInfo;
import com.azure.resourcemanager.eventgrid.models.WebhookUpdatePartnerDestinationInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelUpdateParametersPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelUpdateParametersProperties model = BinaryData.fromString(
            "{\"expirationTimeIfNotActivatedUtc\":\"2021-07-05T04:35:30Z\",\"partnerDestinationInfo\":{\"endpointType\":\"WebHook\"},\"partnerTopicInfo\":{\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"mzidnsezcxtb\":{\"description\":\"vzwdzuhtymwis\",\"displayName\":\"fthwxmnteiwa\",\"documentationUrl\":\"vkmijcmmxdcuf\",\"dataSchemaUrl\":\"srp\"},\"hzzvypyq\":{\"description\":\"gfycc\",\"displayName\":\"ewmdw\",\"documentationUrl\":\"eiachboosflnr\",\"dataSchemaUrl\":\"fqpte\"},\"znorcj\":{\"description\":\"mzinpvswjdk\",\"displayName\":\"soodqxhcrmnoh\",\"documentationUrl\":\"ckwhds\",\"dataSchemaUrl\":\"fiyipjxsqwpgrj\"}}}}}")
            .toObject(ChannelUpdateParametersProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T04:35:30Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("vzwdzuhtymwis",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").description());
        Assertions.assertEquals("fthwxmnteiwa",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").displayName());
        Assertions.assertEquals("vkmijcmmxdcuf",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").documentationUrl());
        Assertions.assertEquals("srp",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelUpdateParametersProperties model
            = new ChannelUpdateParametersProperties()
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-07-05T04:35:30Z"))
                .withPartnerDestinationInfo(new WebhookUpdatePartnerDestinationInfo())
                .withPartnerTopicInfo(new PartnerUpdateTopicInfo()
                    .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                        .withInlineEventTypes(mapOf("mzidnsezcxtb",
                            new InlineEventProperties().withDescription("vzwdzuhtymwis")
                                .withDisplayName("fthwxmnteiwa")
                                .withDocumentationUrl("vkmijcmmxdcuf")
                                .withDataSchemaUrl("srp"),
                            "hzzvypyq",
                            new InlineEventProperties().withDescription("gfycc")
                                .withDisplayName("ewmdw")
                                .withDocumentationUrl("eiachboosflnr")
                                .withDataSchemaUrl("fqpte"),
                            "znorcj",
                            new InlineEventProperties().withDescription("mzinpvswjdk")
                                .withDisplayName("soodqxhcrmnoh")
                                .withDocumentationUrl("ckwhds")
                                .withDataSchemaUrl("fiyipjxsqwpgrj")))));
        model = BinaryData.fromObject(model).toObject(ChannelUpdateParametersProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-05T04:35:30Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("vzwdzuhtymwis",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").description());
        Assertions.assertEquals("fthwxmnteiwa",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").displayName());
        Assertions.assertEquals("vkmijcmmxdcuf",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").documentationUrl());
        Assertions.assertEquals("srp",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("mzidnsezcxtb").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
