// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ChannelUpdateParametersProperties;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerUpdateTopicInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelUpdateParametersPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelUpdateParametersProperties model = BinaryData.fromString(
            "{\"expirationTimeIfNotActivatedUtc\":\"2021-07-20T07:16:34Z\",\"partnerTopicInfo\":{\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"vndhkrwpdapp\":{\"description\":\"nzl\",\"displayName\":\"fmppe\",\"documentationUrl\":\"vmgxsab\",\"dataSchemaUrl\":\"qduujitcjczdz\"},\"gphuticndvka\":{\"description\":\"bdkvwrwjf\",\"displayName\":\"snhu\",\"documentationUrl\":\"eltmrldhugjzzdat\",\"dataSchemaUrl\":\"hocdgeab\"},\"lwckbasyypnddhs\":{\"description\":\"wyiftyhxhur\",\"displayName\":\"ftyxolniw\",\"documentationUrl\":\"cukjf\",\"dataSchemaUrl\":\"iawxklry\"}}}}}")
            .toObject(ChannelUpdateParametersProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T07:16:34Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("nzl",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").description());
        Assertions.assertEquals("fmppe",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").displayName());
        Assertions.assertEquals("vmgxsab",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").documentationUrl());
        Assertions.assertEquals("qduujitcjczdz",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelUpdateParametersProperties model
            = new ChannelUpdateParametersProperties()
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-07-20T07:16:34Z"))
                .withPartnerTopicInfo(new PartnerUpdateTopicInfo()
                    .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                        .withInlineEventTypes(mapOf("vndhkrwpdapp",
                            new InlineEventProperties().withDescription("nzl")
                                .withDisplayName("fmppe")
                                .withDocumentationUrl("vmgxsab")
                                .withDataSchemaUrl("qduujitcjczdz"),
                            "gphuticndvka",
                            new InlineEventProperties().withDescription("bdkvwrwjf")
                                .withDisplayName("snhu")
                                .withDocumentationUrl("eltmrldhugjzzdat")
                                .withDataSchemaUrl("hocdgeab"),
                            "lwckbasyypnddhs",
                            new InlineEventProperties().withDescription("wyiftyhxhur")
                                .withDisplayName("ftyxolniw")
                                .withDocumentationUrl("cukjf")
                                .withDataSchemaUrl("iawxklry")))));
        model = BinaryData.fromObject(model).toObject(ChannelUpdateParametersProperties.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-20T07:16:34Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("nzl",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").description());
        Assertions.assertEquals("fmppe",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").displayName());
        Assertions.assertEquals("vmgxsab",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").documentationUrl());
        Assertions.assertEquals("qduujitcjczdz",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("vndhkrwpdapp").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
