// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ClientInner;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClientInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClientInner model = BinaryData.fromString(
            "{\"properties\":{\"description\":\"drabhjybige\",\"authenticationName\":\"qfbow\",\"clientCertificateAuthentication\":{\"validationScheme\":\"SubjectMatchesAuthenticationName\",\"allowedThumbprints\":[\"tzlcuiywgqywgn\",\"rvynhzgpph\",\"cgyncocpecf\"]},\"state\":\"Enabled\",\"attributes\":{\"zevgb\":\"dataofsx\"},\"provisioningState\":\"Updating\"},\"id\":\"abcypmivk\",\"name\":\"lzu\",\"type\":\"ccfwnfnbacfion\"}")
            .toObject(ClientInner.class);
        Assertions.assertEquals("drabhjybige", model.description());
        Assertions.assertEquals("qfbow", model.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.SUBJECT_MATCHES_AUTHENTICATION_NAME,
            model.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("tzlcuiywgqywgn", model.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClientInner model = new ClientInner().withDescription("drabhjybige")
            .withAuthenticationName("qfbow")
            .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                .withValidationScheme(ClientCertificateValidationScheme.SUBJECT_MATCHES_AUTHENTICATION_NAME)
                .withAllowedThumbprints(Arrays.asList("tzlcuiywgqywgn", "rvynhzgpph", "cgyncocpecf")))
            .withState(ClientState.ENABLED)
            .withAttributes(mapOf("zevgb", "dataofsx"));
        model = BinaryData.fromObject(model).toObject(ClientInner.class);
        Assertions.assertEquals("drabhjybige", model.description());
        Assertions.assertEquals("qfbow", model.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.SUBJECT_MATCHES_AUTHENTICATION_NAME,
            model.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("tzlcuiywgqywgn", model.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
