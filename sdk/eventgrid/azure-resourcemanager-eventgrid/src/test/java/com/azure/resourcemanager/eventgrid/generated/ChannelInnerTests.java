// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ChannelInner;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationInfo;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import com.azure.resourcemanager.eventgrid.models.ResourceMoveChangeHistory;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelInner model = BinaryData.fromString(
            "{\"properties\":{\"channelType\":\"PartnerTopic\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"oizh\",\"resourceGroupName\":\"rxybqsoq\",\"name\":\"gkdmb\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"qes\":{\"description\":\"ufpdznrbtcqq\",\"displayName\":\"qglhq\",\"documentationUrl\":\"ufo\",\"dataSchemaUrl\":\"jywif\"}}},\"source\":\"gdf\"},\"partnerDestinationInfo\":{\"endpointType\":\"PartnerDestinationInfo\",\"azureSubscriptionId\":\"zlhjxrifkwmrvkt\",\"resourceGroupName\":\"zntocipaouajps\",\"name\":\"cmpoyfdkfogkny\",\"endpointServiceContext\":\"ofjdde\",\"resourceMoveChangeHistory\":[{\"azureSubscriptionId\":\"eupewnwreitjz\",\"resourceGroupName\":\"lusarh\",\"changedTimeUtc\":\"2021-11-04T00:37:18Z\"}]},\"messageForActivation\":\"qhsmyurkdtml\",\"provisioningState\":\"Succeeded\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-01-05T18:43:06Z\"},\"id\":\"txukcdmp\",\"name\":\"rcryuanzwuxzdxta\",\"type\":\"rlhm\"}")
            .toObject(ChannelInner.class);
        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, model.channelType());
        Assertions.assertEquals("oizh", model.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("rxybqsoq", model.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("gkdmb", model.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("ufpdznrbtcqq",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").description());
        Assertions.assertEquals("qglhq",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").displayName());
        Assertions.assertEquals("ufo",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").documentationUrl());
        Assertions.assertEquals("jywif",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").dataSchemaUrl());
        Assertions.assertEquals("gdf", model.partnerTopicInfo().source());
        Assertions.assertEquals("zlhjxrifkwmrvkt", model.partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("zntocipaouajps", model.partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("cmpoyfdkfogkny", model.partnerDestinationInfo().name());
        Assertions.assertEquals("ofjdde", model.partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("eupewnwreitjz",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).azureSubscriptionId());
        Assertions.assertEquals("lusarh",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T00:37:18Z"),
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("qhsmyurkdtml", model.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, model.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T18:43:06Z"), model.expirationTimeIfNotActivatedUtc());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelInner model = new ChannelInner().withChannelType(ChannelType.PARTNER_TOPIC)
            .withPartnerTopicInfo(new PartnerTopicInfo().withAzureSubscriptionId("oizh")
                .withResourceGroupName("rxybqsoq")
                .withName("gkdmb")
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("qes",
                        new InlineEventProperties().withDescription("ufpdznrbtcqq")
                            .withDisplayName("qglhq")
                            .withDocumentationUrl("ufo")
                            .withDataSchemaUrl("jywif"))))
                .withSource("gdf"))
            .withPartnerDestinationInfo(new PartnerDestinationInfo().withAzureSubscriptionId("zlhjxrifkwmrvkt")
                .withResourceGroupName("zntocipaouajps")
                .withName("cmpoyfdkfogkny")
                .withEndpointServiceContext("ofjdde")
                .withResourceMoveChangeHistory(
                    Arrays.asList(new ResourceMoveChangeHistory().withAzureSubscriptionId("eupewnwreitjz")
                        .withResourceGroupName("lusarh")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-11-04T00:37:18Z")))))
            .withMessageForActivation("qhsmyurkdtml")
            .withProvisioningState(ChannelProvisioningState.SUCCEEDED)
            .withReadinessState(ReadinessState.ACTIVATED)
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-01-05T18:43:06Z"));
        model = BinaryData.fromObject(model).toObject(ChannelInner.class);
        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, model.channelType());
        Assertions.assertEquals("oizh", model.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("rxybqsoq", model.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("gkdmb", model.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("ufpdznrbtcqq",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").description());
        Assertions.assertEquals("qglhq",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").displayName());
        Assertions.assertEquals("ufo",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").documentationUrl());
        Assertions.assertEquals("jywif",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("qes").dataSchemaUrl());
        Assertions.assertEquals("gdf", model.partnerTopicInfo().source());
        Assertions.assertEquals("zlhjxrifkwmrvkt", model.partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("zntocipaouajps", model.partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("cmpoyfdkfogkny", model.partnerDestinationInfo().name());
        Assertions.assertEquals("ofjdde", model.partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("eupewnwreitjz",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).azureSubscriptionId());
        Assertions.assertEquals("lusarh",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T00:37:18Z"),
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("qhsmyurkdtml", model.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, model.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-05T18:43:06Z"), model.expirationTimeIfNotActivatedUtc());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
