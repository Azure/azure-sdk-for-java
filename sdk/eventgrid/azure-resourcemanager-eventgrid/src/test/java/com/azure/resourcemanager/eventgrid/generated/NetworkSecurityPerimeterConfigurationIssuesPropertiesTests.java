// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.NetworkSecurityPerimeterConfigurationIssuesProperties;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueSeverity;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterConfigurationIssuesPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterConfigurationIssuesProperties model = BinaryData.fromString(
            "{\"issueType\":\"MissingPerimeterConfiguration\",\"severity\":\"Warning\",\"description\":\"tznapxbannovv\",\"suggestedResourceIds\":[\"zytprwnwvroevy\",\"lyokrrrou\"],\"suggestedAccessRules\":[\"nsa\",\"bcrymodizrx\",\"lobdxna\",\"pmkmlmvevfx\"]}")
            .toObject(NetworkSecurityPerimeterConfigurationIssuesProperties.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.MISSING_PERIMETER_CONFIGURATION,
            model.issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING, model.severity());
        Assertions.assertEquals("tznapxbannovv", model.description());
        Assertions.assertEquals("zytprwnwvroevy", model.suggestedResourceIds().get(0));
        Assertions.assertEquals("nsa", model.suggestedAccessRules().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterConfigurationIssuesProperties model
            = new NetworkSecurityPerimeterConfigurationIssuesProperties()
                .withIssueType(NetworkSecurityPerimeterConfigurationIssueType.MISSING_PERIMETER_CONFIGURATION)
                .withSeverity(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING)
                .withDescription("tznapxbannovv")
                .withSuggestedResourceIds(Arrays.asList("zytprwnwvroevy", "lyokrrrou"))
                .withSuggestedAccessRules(Arrays.asList("nsa", "bcrymodizrx", "lobdxna", "pmkmlmvevfx"));
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterConfigurationIssuesProperties.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.MISSING_PERIMETER_CONFIGURATION,
            model.issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING, model.severity());
        Assertions.assertEquals("tznapxbannovv", model.description());
        Assertions.assertEquals("zytprwnwvroevy", model.suggestedResourceIds().get(0));
        Assertions.assertEquals("nsa", model.suggestedAccessRules().get(0));
    }
}
