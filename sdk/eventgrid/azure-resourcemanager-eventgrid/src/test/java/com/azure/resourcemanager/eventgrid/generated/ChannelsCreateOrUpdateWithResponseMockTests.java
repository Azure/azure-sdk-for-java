// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Channel;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"channelType\":\"PartnerTopic\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"mtuowogtgitsqhzv\",\"resourceGroupName\":\"zcdba\",\"name\":\"zndscxmxeatkdbmw\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"bqbnaomhjrmkuh\":{},\"axljal\":{},\"i\":{}}},\"source\":\"jmobca\"},\"messageForActivation\":\"de\",\"provisioningState\":\"Succeeded\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-12-08T09:52:24Z\"},\"id\":\"fgvaknokzwj\",\"name\":\"zrltixldzyyf\",\"type\":\"tpq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Channel response
            = manager.channels()
                .define("dfaifyzyzeyuube")
                .withExistingPartnerNamespace("gxannnoytzposewx", "gpxvkqmaupxvpi")
                .withChannelType(ChannelType.PARTNER_TOPIC)
                .withPartnerTopicInfo(
                    new PartnerTopicInfo().withAzureSubscriptionId("ytoithgygvfl")
                        .withResourceGroupName("vdihoynkrx")
                        .withName("twk")
                        .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                            .withInlineEventTypes(mapOf("cpcunnuzdqum", new InlineEventProperties(), "enodna",
                                new InlineEventProperties(), "enhqhskndnelq", new InlineEventProperties(), "aadl",
                                new InlineEventProperties())))
                        .withSource("wf"))
                .withMessageForActivation("nniyopetxi")
                .withProvisioningState(ChannelProvisioningState.CANCELED)
                .withReadinessState(ReadinessState.ACTIVATED)
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-06-10T00:54:20Z"))
                .create();

        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, response.channelType());
        Assertions.assertEquals("mtuowogtgitsqhzv", response.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("zcdba", response.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("zndscxmxeatkdbmw", response.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("jmobca", response.partnerTopicInfo().source());
        Assertions.assertEquals("de", response.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.SUCCEEDED, response.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, response.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-08T09:52:24Z"),
            response.expirationTimeIfNotActivatedUtc());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
