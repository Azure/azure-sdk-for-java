// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Channel;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import com.azure.resourcemanager.eventgrid.models.ResourceMoveChangeHistory;
import com.azure.resourcemanager.eventgrid.models.WebhookPartnerDestinationInfo;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"channelType\":\"PartnerDestination\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"kek\",\"resourceGroupName\":\"kzwaqxofq\",\"name\":\"chiqbplvfid\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"xbyjgmsfe\":{},\"x\":{}}},\"source\":\"hpqadagrhrdicxdw\"},\"partnerDestinationInfo\":{\"endpointType\":\"WebHook\",\"azureSubscriptionId\":\"xwyovcxjsgbip\",\"resourceGroupName\":\"kdveksb\",\"name\":\"oduchvlscr\",\"endpointServiceContext\":\"ib\",\"resourceMoveChangeHistory\":[{\"azureSubscriptionId\":\"dusspyszekbhwlka\",\"resourceGroupName\":\"gkrehbf\",\"changedTimeUtc\":\"2020-12-31T00:14:37Z\"},{\"azureSubscriptionId\":\"bffljfiimreoag\",\"resourceGroupName\":\"taadu\",\"changedTimeUtc\":\"2021-03-04T00:00:31Z\"},{\"azureSubscriptionId\":\"xfavsqwudoh\",\"resourceGroupName\":\"lfmn\",\"changedTimeUtc\":\"2021-03-12T12:37:46Z\"}]},\"messageForActivation\":\"simsfeypofqpmb\",\"provisioningState\":\"Deleting\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-10-26T18:03:11Z\"},\"id\":\"mttjxophgerh\",\"name\":\"mvgohtwz\",\"type\":\"qilrixysfn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Channel response = manager.channels()
            .define("xsl")
            .withExistingPartnerNamespace("xeqbwp", "tghyksarcdr")
            .withChannelType(ChannelType.PARTNER_DESTINATION)
            .withPartnerTopicInfo(new PartnerTopicInfo().withAzureSubscriptionId("dltxkpbq")
                .withResourceGroupName("fdqqjwkrhwz")
                .withName("nojisgglmvok")
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("ctibpvbka", new InlineEventProperties(), "hxsmzygdfwak",
                        new InlineEventProperties(), "seivmakxhysow", new InlineEventProperties())))
                .withSource("ux"))
            .withPartnerDestinationInfo(new WebhookPartnerDestinationInfo().withAzureSubscriptionId("tvtfjms")
                .withResourceGroupName("chmaiubavlzwpvgm")
                .withName("lkzazmgok")
                .withEndpointServiceContext("gjqafkmkrokzr")
                .withResourceMoveChangeHistory(Arrays.asList(
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("twpqrtva")
                        .withResourceGroupName("nqnixiezeagmce")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-06-06T13:22:55Z")),
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("gedhfpjstlzm")
                        .withResourceGroupName("syjdeolctae")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-11-07T19:02:21Z")),
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("rledjcu")
                        .withResourceGroupName("bvt")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-08-15T22:41:32Z")),
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("xzvsgeafgf")
                        .withResourceGroupName("ehxlzsxezppk")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-03-13T17:36:28Z")))))
            .withMessageForActivation("es")
            .withProvisioningState(ChannelProvisioningState.DELETING)
            .withReadinessState(ReadinessState.NEVER_ACTIVATED)
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-05-09T13:42:29Z"))
            .create();

        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, response.channelType());
        Assertions.assertEquals("kek", response.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("kzwaqxofq", response.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("chiqbplvfid", response.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("hpqadagrhrdicxdw", response.partnerTopicInfo().source());
        Assertions.assertEquals("xwyovcxjsgbip", response.partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("kdveksb", response.partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("oduchvlscr", response.partnerDestinationInfo().name());
        Assertions.assertEquals("ib", response.partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("dusspyszekbhwlka",
            response.partnerDestinationInfo().resourceMoveChangeHistory().get(0).azureSubscriptionId());
        Assertions.assertEquals("gkrehbf",
            response.partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-31T00:14:37Z"),
            response.partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("simsfeypofqpmb", response.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.DELETING, response.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, response.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-26T18:03:11Z"),
            response.expirationTimeIfNotActivatedUtc());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
