// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"73f4c511-c86b-4ae2-99b2-e5c555232e8e\",\"source\":\"dawsxmrsz\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"bjmbnvynfaooeac\":{\"description\":\"pnerxrzut\",\"displayName\":\"c\",\"documentationUrl\":\"za\",\"dataSchemaUrl\":\"nbxqaeht\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-06-29T09:09:18Z\",\"provisioningState\":\"Updating\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"akd\",\"messageForActivation\":\"dahzllrqm\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"roid\",\"tenantId\":\"qypffmnoiicsu\",\"userAssignedIdentities\":{\"pjwyblvtbdmvs\":{\"principalId\":\"rjjtalxrdsjrho\",\"clientId\":\"qwgusxxhdo\"}}},\"location\":\"yidaelqpv\",\"tags\":{\"sui\":\"kwjfbotloggdusxu\",\"izfwihvaangqt\":\"uxcjkcoqwczsyiq\",\"jfwtgdfkkaui\":\"hjrfdmfdvbbaex\"},\"id\":\"vmuafmc\",\"name\":\"fedyuep\",\"type\":\"vpltidajjvy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PartnerTopic> response
            = manager.partnerTopics().list("oioyidoxznvgvd", 910812694, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yidaelqpv", response.iterator().next().location());
        Assertions.assertEquals("kwjfbotloggdusxu", response.iterator().next().tags().get("sui"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("roid", response.iterator().next().identity().principalId());
        Assertions.assertEquals("qypffmnoiicsu", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("rjjtalxrdsjrho",
            response.iterator().next().identity().userAssignedIdentities().get("pjwyblvtbdmvs").principalId());
        Assertions.assertEquals("qwgusxxhdo",
            response.iterator().next().identity().userAssignedIdentities().get("pjwyblvtbdmvs").clientId());
        Assertions.assertEquals(UUID.fromString("73f4c511-c86b-4ae2-99b2-e5c555232e8e"),
            response.iterator().next().partnerRegistrationImmutableId());
        Assertions.assertEquals("dawsxmrsz", response.iterator().next().source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("pnerxrzut",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("bjmbnvynfaooeac").description());
        Assertions.assertEquals("c",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("bjmbnvynfaooeac").displayName());
        Assertions.assertEquals("za",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("bjmbnvynfaooeac").documentationUrl());
        Assertions.assertEquals("nbxqaeht",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("bjmbnvynfaooeac").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-29T09:09:18Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, response.iterator().next().activationState());
        Assertions.assertEquals("akd", response.iterator().next().partnerTopicFriendlyDescription());
        Assertions.assertEquals("dahzllrqm", response.iterator().next().messageForActivation());
    }
}
