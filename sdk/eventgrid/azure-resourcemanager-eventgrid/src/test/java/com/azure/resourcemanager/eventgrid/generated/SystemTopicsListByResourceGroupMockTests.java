// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopic;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class SystemTopicsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Updating\",\"source\":\"hd\",\"topicType\":\"vhaztkxbivz\",\"metricResourceId\":\"xmbrygmwibiosiq\"},\"identity\":{\"type\":\"None\",\"principalId\":\"qwdr\",\"tenantId\":\"tfdaglmrcokz\",\"userAssignedIdentities\":{\"fpopikzeb\":{\"principalId\":\"kounzsiy\",\"clientId\":\"uby\"},\"gpmgfjculo\":{\"principalId\":\"nfywtkq\",\"clientId\":\"sdlkhcz\"}}},\"location\":\"hhylx\",\"tags\":{\"bwjmtftcveln\":\"fiyymotuzb\",\"j\":\"rupkqnstpaqpi\"},\"id\":\"bvswmehfxrt\",\"name\":\"xbmsennqfabqc\",\"type\":\"malec\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<SystemTopic> response = manager.systemTopics().listByResourceGroup("xxicee", "vjwyuveox",
            1808067509, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("hhylx", response.iterator().next().location());
        Assertions.assertEquals("fiyymotuzb", response.iterator().next().tags().get("bwjmtftcveln"));
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("qwdr", response.iterator().next().identity().principalId());
        Assertions.assertEquals("tfdaglmrcokz", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("kounzsiy",
            response.iterator().next().identity().userAssignedIdentities().get("fpopikzeb").principalId());
        Assertions.assertEquals("uby",
            response.iterator().next().identity().userAssignedIdentities().get("fpopikzeb").clientId());
        Assertions.assertEquals("hd", response.iterator().next().source());
        Assertions.assertEquals("vhaztkxbivz", response.iterator().next().topicType());
    }
}
