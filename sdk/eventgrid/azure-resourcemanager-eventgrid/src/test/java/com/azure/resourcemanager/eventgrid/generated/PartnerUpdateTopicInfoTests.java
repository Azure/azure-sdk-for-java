// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerUpdateTopicInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerUpdateTopicInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerUpdateTopicInfo model = BinaryData.fromString(
            "{\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"idtqajzyu\":{\"description\":\"bnmo\",\"displayName\":\"cyshurzafbljjgp\",\"documentationUrl\":\"oq\",\"dataSchemaUrl\":\"mkljavb\"},\"aierhhb\":{\"description\":\"kudjkrlkhb\",\"displayName\":\"fepgzgq\",\"documentationUrl\":\"zloc\",\"dataSchemaUrl\":\"c\"}}}}")
            .toObject(PartnerUpdateTopicInfo.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("bnmo", model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").description());
        Assertions.assertEquals("cyshurzafbljjgp",
            model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").displayName());
        Assertions.assertEquals("oq", model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").documentationUrl());
        Assertions.assertEquals("mkljavb", model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerUpdateTopicInfo model
            = new PartnerUpdateTopicInfo().withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("idtqajzyu",
                    new InlineEventProperties().withDescription("bnmo")
                        .withDisplayName("cyshurzafbljjgp")
                        .withDocumentationUrl("oq")
                        .withDataSchemaUrl("mkljavb"),
                    "aierhhb",
                    new InlineEventProperties().withDescription("kudjkrlkhb")
                        .withDisplayName("fepgzgq")
                        .withDocumentationUrl("zloc")
                        .withDataSchemaUrl("c"))));
        model = BinaryData.fromObject(model).toObject(PartnerUpdateTopicInfo.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("bnmo", model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").description());
        Assertions.assertEquals("cyshurzafbljjgp",
            model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").displayName());
        Assertions.assertEquals("oq", model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").documentationUrl());
        Assertions.assertEquals("mkljavb", model.eventTypeInfo().inlineEventTypes().get("idtqajzyu").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
