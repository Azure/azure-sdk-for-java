// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.AlternativeAuthenticationNameSource;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NamespacesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"xsoednlw\",\"li\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"mucmq\",\"name\":\"isnionetbzdrdpue\",\"type\":\"xkgtlzlmtrlxcznn\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"bmxlxm\",\"tygeqzus\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"cahfsgbjmlreesr\",\"name\":\"wsszvlc\",\"type\":\"lisolntfxxc\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"fjwfoygizmshxx\",\"aizabu\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"skjto\",\"name\":\"jdzjsjzn\",\"type\":\"hxqqmqip\"}],\"provisioningState\":\"Deleting\",\"topicsConfiguration\":{\"hostname\":\"nzocxmtfshksnyzm\"},\"topicSpacesConfiguration\":{\"state\":\"Enabled\",\"routeTopicResourceId\":\"bwmbnlslcef\",\"hostname\":\"d\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{}]},\"clientAuthentication\":{\"alternativeAuthenticationNameSources\":[\"ClientCertificateSubject\",\"ClientCertificateIp\",\"ClientCertificateIp\"]},\"maximumSessionExpiryInHours\":1835241061,\"maximumClientSessionsPerAuthenticationName\":148488421,\"routingIdentityInfo\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"zhwv\"}},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"hausybkekymffzts\",\"action\":\"Allow\"},{\"ipMask\":\"v\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\"},\"sku\":{\"name\":\"Standard\",\"capacity\":1802232612},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"h\",\"tenantId\":\"seuugcig\",\"userAssignedIdentities\":{\"wrqbebjnfv\":{\"principalId\":\"smg\",\"clientId\":\"mt\"},\"izpacz\":{\"principalId\":\"labt\",\"clientId\":\"biwznhtfgficudy\"},\"dbjp\":{\"principalId\":\"hbcakznhokhoit\",\"clientId\":\"rjsdmmazdnck\"}}},\"location\":\"hzqpxzbawkikcdgf\",\"tags\":{\"jey\":\"sd\",\"cfiwhagxsurejq\":\"qxded\",\"g\":\"shzz\",\"xiqqzjkoxdupna\":\"ll\"},\"id\":\"gl\",\"name\":\"ouigdmfivjqte\",\"type\":\"dqqigdydkghpc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Namespace response = manager.namespaces()
            .getByResourceGroupWithResponse("fogxhcxnw", "tpfdzxcouzfwofwa", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("hzqpxzbawkikcdgf", response.location());
        Assertions.assertEquals("sd", response.tags().get("jey"));
        Assertions.assertEquals(SkuName.STANDARD, response.sku().name());
        Assertions.assertEquals(1802232612, response.sku().capacity());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("h", response.identity().principalId());
        Assertions.assertEquals("seuugcig", response.identity().tenantId());
        Assertions.assertEquals("smg", response.identity().userAssignedIdentities().get("wrqbebjnfv").principalId());
        Assertions.assertEquals("mt", response.identity().userAssignedIdentities().get("wrqbebjnfv").clientId());
        Assertions.assertEquals("xsoednlw", response.privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.FAILED,
            response.privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals(TopicSpacesConfigurationState.ENABLED, response.topicSpacesConfiguration().state());
        Assertions.assertEquals("bwmbnlslcef", response.topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_SUBJECT,
            response.topicSpacesConfiguration().clientAuthentication().alternativeAuthenticationNameSources().get(0));
        Assertions.assertEquals(1835241061, response.topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(148488421,
            response.topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.SYSTEM_ASSIGNED,
            response.topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("zhwv",
            response.topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals(false, response.isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals("hausybkekymffzts", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.minimumTlsVersionAllowed());
    }
}
