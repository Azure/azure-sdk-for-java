// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.CustomDomainValidationState;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"orbjg\",\"nzjotvmr\",\"khlobvvjbhvhdi\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"luiyuosnuudte\",\"name\":\"vhyibdrqrsw\",\"type\":\"buubpyrowt\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"fwfqchvcze\",\"j\",\"nctagfyvrtpqpem\",\"z\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"epdqhqyhwq\",\"name\":\"e\",\"type\":\"vx\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"mzeoxinhgre\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"h\",\"name\":\"puz\",\"type\":\"pceeznzangprbf\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"lbciphmsexro\",\"rndktx\",\"vonfeeqgpkr\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"gnixxowwzkyfwnw\",\"name\":\"iwxeiicrmpep\",\"type\":\"ldmaxxijvskwsdgk\"}],\"provisioningState\":\"CreateFailed\",\"topicsConfiguration\":{\"hostname\":\"wrasekw\",\"customDomains\":[{\"fullyQualifiedDomainName\":\"voinwo\",\"validationState\":\"ErrorRetrievingDnsRecord\",\"identity\":{},\"certificateUrl\":\"yxqicladv\",\"expectedTxtRecordName\":\"davuqmcbyms\",\"expectedTxtRecordValue\":\"bjlquv\"}]},\"topicSpacesConfiguration\":{\"state\":\"Disabled\",\"routeTopicResourceId\":\"umvpsimioyoigl\",\"hostname\":\"iqwnnraclibbfq\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{}]},\"maximumSessionExpiryInHours\":1536942635,\"maximumClientSessionsPerAuthenticationName\":1948229122,\"routingIdentityInfo\":{\"type\":\"None\",\"userAssignedIdentity\":\"twukex\"},\"customDomains\":[{\"fullyQualifiedDomainName\":\"mnmabeddqil\",\"validationState\":\"ErrorRetrievingDnsRecord\",\"identity\":{},\"certificateUrl\":\"fqfp\",\"expectedTxtRecordName\":\"stcl\",\"expectedTxtRecordValue\":\"rvwerfwxbsmtb\"}]},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"fkwdvbtbrekqh\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.1\"},\"sku\":{\"name\":\"Standard\",\"capacity\":1543301093},\"identity\":{\"type\":\"None\",\"principalId\":\"wy\",\"tenantId\":\"dqigmg\",\"userAssignedIdentities\":{\"cmrnkfmkhcq\":{\"principalId\":\"z\",\"clientId\":\"lujkhn\"},\"j\":{\"principalId\":\"mlm\",\"clientId\":\"nqtqea\"}}},\"location\":\"vragpokddx\",\"tags\":{\"vgua\":\"h\",\"k\":\"tpt\",\"gbvoffbkk\":\"wkqyns\",\"zbnobr\":\"vdxaexqokmyrljia\"},\"id\":\"lpbcjtrpz\",\"name\":\"yudivbxnhsqeaeo\",\"type\":\"qelwgdhuruzytza\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Namespace response = manager.namespaces()
            .getByResourceGroupWithResponse("uvczldbgl", "outbaaqgzeka", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("vragpokddx", response.location());
        Assertions.assertEquals("h", response.tags().get("vgua"));
        Assertions.assertEquals(SkuName.STANDARD, response.sku().name());
        Assertions.assertEquals(1543301093, response.sku().capacity());
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("wy", response.identity().principalId());
        Assertions.assertEquals("dqigmg", response.identity().tenantId());
        Assertions.assertEquals("z", response.identity().userAssignedIdentities().get("cmrnkfmkhcq").principalId());
        Assertions.assertEquals("lujkhn", response.identity().userAssignedIdentities().get("cmrnkfmkhcq").clientId());
        Assertions.assertEquals("orbjg", response.privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.CREATING,
            response.privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("voinwo",
            response.topicsConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD,
            response.topicsConfiguration().customDomains().get(0).validationState());
        Assertions.assertEquals("yxqicladv", response.topicsConfiguration().customDomains().get(0).certificateUrl());
        Assertions.assertEquals("davuqmcbyms",
            response.topicsConfiguration().customDomains().get(0).expectedTxtRecordName());
        Assertions.assertEquals("bjlquv",
            response.topicsConfiguration().customDomains().get(0).expectedTxtRecordValue());
        Assertions.assertEquals(TopicSpacesConfigurationState.DISABLED, response.topicSpacesConfiguration().state());
        Assertions.assertEquals("umvpsimioyoigl", response.topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(1536942635, response.topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(1948229122,
            response.topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.NONE,
            response.topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("twukex",
            response.topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals("mnmabeddqil",
            response.topicSpacesConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(CustomDomainValidationState.ERROR_RETRIEVING_DNS_RECORD,
            response.topicSpacesConfiguration().customDomains().get(0).validationState());
        Assertions.assertEquals("fqfp", response.topicSpacesConfiguration().customDomains().get(0).certificateUrl());
        Assertions.assertEquals("stcl",
            response.topicSpacesConfiguration().customDomains().get(0).expectedTxtRecordName());
        Assertions.assertEquals("rvwerfwxbsmtb",
            response.topicSpacesConfiguration().customDomains().get(0).expectedTxtRecordValue());
        Assertions.assertEquals(false, response.isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals("fkwdvbtbrekqh", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.minimumTlsVersionAllowed());
    }
}
