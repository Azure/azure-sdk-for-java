// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicUpdateParameterProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicUpdateParameterPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicUpdateParameterProperties model = BinaryData.fromString(
            "{\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"jb\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\",\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"myw\":{\"description\":\"w\",\"displayName\":\"uatbwbqamteuliy\",\"documentationUrl\":\"pkcvmwf\",\"dataSchemaUrl\":\"xxe\"}}}}")
            .toObject(TopicUpdateParameterProperties.class);
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertFalse(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("w", model.eventTypeInfo().inlineEventTypes().get("myw").description());
        Assertions.assertEquals("uatbwbqamteuliy", model.eventTypeInfo().inlineEventTypes().get("myw").displayName());
        Assertions.assertEquals("pkcvmwf", model.eventTypeInfo().inlineEventTypes().get("myw").documentationUrl());
        Assertions.assertEquals("xxe", model.eventTypeInfo().inlineEventTypes().get("myw").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicUpdateParameterProperties model
            = new TopicUpdateParameterProperties().withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("jb").withAction(IpActionType.ALLOW)))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                .withDisableLocalAuth(false)
                .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("myw",
                        new InlineEventProperties().withDescription("w")
                            .withDisplayName("uatbwbqamteuliy")
                            .withDocumentationUrl("pkcvmwf")
                            .withDataSchemaUrl("xxe"))));
        model = BinaryData.fromObject(model).toObject(TopicUpdateParameterProperties.class);
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertFalse(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("w", model.eventTypeInfo().inlineEventTypes().get("myw").description());
        Assertions.assertEquals("uatbwbqamteuliy", model.eventTypeInfo().inlineEventTypes().get("myw").displayName());
        Assertions.assertEquals("pkcvmwf", model.eventTypeInfo().inlineEventTypes().get("myw").documentationUrl());
        Assertions.assertEquals("xxe", model.eventTypeInfo().inlineEventTypes().get("myw").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
