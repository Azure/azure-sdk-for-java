// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.eventgrid.models.ConnectionState;
import com.azure.resourcemanager.eventgrid.models.PersistedConnectionStatus;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpoint;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpointConnection;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpointConnectionsParentType;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"imtcvvf\"},\"groupIds\":[\"ytzfsl\",\"izhqikmgobl\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"diiisklbonxxup\",\"actionsRequired\":\"vtrkfkg\"},\"provisioningState\":\"Succeeded\"},\"id\":\"qnnp\",\"name\":\"wkosnyxigf\",\"type\":\"ujjcxgdqmrlhn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .update("dojq", PrivateEndpointConnectionsParentType.PARTNER_NAMESPACES, "zesi", "iysnjqyowaadc",
                new PrivateEndpointConnectionInner().withPrivateEndpoint(new PrivateEndpoint().withId("a"))
                    .withGroupIds(Arrays.asList("dtsewkaupwhlzyc", "remgjlms", "dorsirxxhy"))
                    .withPrivateLinkServiceConnectionState(
                        new ConnectionState().withStatus(PersistedConnectionStatus.DISCONNECTED)
                            .withDescription("ofajfreprfvmkin")
                            .withActionsRequired("eyrqshixbcejop"))
                    .withProvisioningState(ResourceProvisioningState.UPDATING),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals("imtcvvf", response.privateEndpoint().id());
        Assertions.assertEquals("ytzfsl", response.groupIds().get(0));
        Assertions.assertEquals(PersistedConnectionStatus.APPROVED,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("diiisklbonxxup", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("vtrkfkg", response.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED, response.provisioningState());
    }
}
