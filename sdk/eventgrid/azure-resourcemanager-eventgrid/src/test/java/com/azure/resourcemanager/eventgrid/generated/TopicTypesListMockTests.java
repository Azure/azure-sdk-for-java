// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeInfo;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicTypesListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provider\":\"deepfhgan\",\"displayName\":\"wxqhpjhubo\",\"description\":\"vzgaybvr\",\"resourceRegionType\":\"RegionalResource\",\"provisioningState\":\"Creating\",\"supportedLocations\":[\"xnwfmzvzt\",\"uebpamq\",\"fcssanybzzghvd\"],\"sourceResourceFormat\":\"umyjsvcd\",\"supportedScopesForSource\":[\"ResourceGroup\",\"Resource\",\"ResourceGroup\"],\"areRegionalAndGlobalSourcesSupported\":false,\"additionalEnforcedPermissions\":[{\"permissionName\":\"nzxezriwgo\",\"isDataAction\":true},{\"permissionName\":\"cqksaaapxjh\",\"isDataAction\":false},{\"permissionName\":\"benwsdfp\",\"isDataAction\":false}]},\"id\":\"ahlfrcqk\",\"name\":\"pmvzpireszya\",\"type\":\"gomlb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<TopicTypeInfo> response = manager.topicTypes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("deepfhgan", response.iterator().next().provider());
        Assertions.assertEquals("wxqhpjhubo", response.iterator().next().displayName());
        Assertions.assertEquals("vzgaybvr", response.iterator().next().description());
        Assertions.assertEquals(ResourceRegionType.REGIONAL_RESOURCE, response.iterator().next().resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.CREATING, response.iterator().next().provisioningState());
        Assertions.assertEquals("xnwfmzvzt", response.iterator().next().supportedLocations().get(0));
        Assertions.assertEquals("umyjsvcd", response.iterator().next().sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP,
            response.iterator().next().supportedScopesForSource().get(0));
        Assertions.assertEquals(false, response.iterator().next().areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("nzxezriwgo",
            response.iterator().next().additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(true, response.iterator().next().additionalEnforcedPermissions().get(0).isDataAction());
    }
}
