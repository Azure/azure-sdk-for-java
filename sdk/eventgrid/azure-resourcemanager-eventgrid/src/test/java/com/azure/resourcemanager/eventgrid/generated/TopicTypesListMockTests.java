// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeInfo;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TopicTypesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"provider\":\"whgjsmbcsl\",\"displayName\":\"gsabdgdheronsdu\",\"description\":\"kzvzuatqhgzuyxtr\",\"resourceRegionType\":\"GlobalResource\",\"provisioningState\":\"Failed\",\"supportedLocations\":[\"gqj\",\"vitp\",\"pvsffavdhpiwrm\",\"wkgjwb\"],\"sourceResourceFormat\":\"dwfbwxy\",\"supportedScopesForSource\":[\"ManagementGroup\"],\"areRegionalAndGlobalSourcesSupported\":true,\"additionalEnforcedPermissions\":[{\"permissionName\":\"drmegajrzc\",\"isDataAction\":true},{\"permissionName\":\"zskwqk\",\"isDataAction\":false},{\"permissionName\":\"eiphgliupqs\",\"isDataAction\":true}]},\"id\":\"bkjlcaxsqcomji\",\"name\":\"i\",\"type\":\"ncevxxkdevpxi\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<TopicTypeInfo> response = manager.topicTypes().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("whgjsmbcsl", response.iterator().next().provider());
        Assertions.assertEquals("gsabdgdheronsdu", response.iterator().next().displayName());
        Assertions.assertEquals("kzvzuatqhgzuyxtr", response.iterator().next().description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, response.iterator().next().resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.FAILED, response.iterator().next().provisioningState());
        Assertions.assertEquals("gqj", response.iterator().next().supportedLocations().get(0));
        Assertions.assertEquals("dwfbwxy", response.iterator().next().sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.MANAGEMENT_GROUP,
            response.iterator().next().supportedScopesForSource().get(0));
        Assertions.assertEquals(true, response.iterator().next().areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("drmegajrzc",
            response.iterator().next().additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(true, response.iterator().next().additionalEnforcedPermissions().get(0).isDataAction());
    }
}
