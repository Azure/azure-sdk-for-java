// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.NetworkSecurityPerimeterConfigurationInner;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterAssociationAccessMode;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigProvisioningState;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssues;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueSeverity;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueType;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationProfile;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterInfo;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterProfileAccessRule;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterProfileAccessRuleDirection;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterSubscription;
import com.azure.resourcemanager.eventgrid.models.ResourceAssociation;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterConfigurationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterConfigurationInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Updating\",\"provisioningIssues\":[{\"name\":\"elxieixynllxecw\",\"properties\":{\"issueType\":\"ConfigurationPropagationFailure\",\"severity\":\"Warning\",\"description\":\"lhc\",\"suggestedResourceIds\":[\"u\",\"i\",\"dwfmvigorqjb\",\"tzh\"],\"suggestedAccessRules\":[\"lkafhonqjuje\"]}},{\"name\":\"kpzvcpopmxelnwc\",\"properties\":{\"issueType\":\"ConfigurationPropagationFailure\",\"severity\":\"Error\",\"description\":\"xxmlfmkqscazua\",\"suggestedResourceIds\":[\"z\",\"puamwabzxr\",\"xcushs\",\"haivm\"],\"suggestedAccessRules\":[\"sflvgsgzwywakoih\",\"nsmjbl\"]}},{\"name\":\"jhlnymzotqyryu\",\"properties\":{\"issueType\":\"Other\",\"severity\":\"Warning\",\"description\":\"xmvwfg\",\"suggestedResourceIds\":[\"xo\",\"supe\"],\"suggestedAccessRules\":[\"zqn\",\"cvsql\"]}}],\"networkSecurityPerimeter\":{\"id\":\"oibgsxg\",\"perimeterGuid\":\"fyq\",\"location\":\"mpqoxw\"},\"resourceAssociation\":{\"name\":\"dbxiqx\",\"accessMode\":\"Enforced\"},\"profile\":{\"name\":\"imht\",\"accessRulesVersion\":\"winhehfqpo\",\"accessRules\":[{\"fullyQualifiedArmId\":\"cblembnkbwv\",\"name\":\"xk\",\"type\":\"vqihebwtswbzuwf\",\"properties\":{\"direction\":\"Inbound\",\"addressPrefixes\":[\"egizv\",\"jfelisdjubggbqig\",\"xkbsazgakgac\"],\"subscriptions\":[{},{},{}],\"networkSecurityPerimeters\":[{},{},{},{}],\"fullyQualifiedDomainNames\":[\"spofapvuhry\",\"ni\",\"frzgbzjed\",\"st\"],\"emailAddresses\":[\"l\",\"xbcuiiznkt\",\"f\"],\"phoneNumbers\":[\"nv\",\"dibmikostbzbkiwb\",\"qnyophzfyls\"]}}],\"diagnosticSettingsVersion\":\"rpfbcunezz\",\"enabledLogCategories\":[\"elfwy\",\"wl\",\"xjwet\"]}},\"id\":\"psihcla\",\"name\":\"zvaylptrsqqw\",\"type\":\"tcmwqkchc\"}")
            .toObject(NetworkSecurityPerimeterConfigurationInner.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals("elxieixynllxecw", model.provisioningIssues().get(0).name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.CONFIGURATION_PROPAGATION_FAILURE,
            model.provisioningIssues().get(0).issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING,
            model.provisioningIssues().get(0).severity());
        Assertions.assertEquals("lhc", model.provisioningIssues().get(0).description());
        Assertions.assertEquals("u", model.provisioningIssues().get(0).suggestedResourceIds().get(0));
        Assertions.assertEquals("lkafhonqjuje", model.provisioningIssues().get(0).suggestedAccessRules().get(0));
        Assertions.assertEquals("oibgsxg", model.networkSecurityPerimeter().id());
        Assertions.assertEquals("fyq", model.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("mpqoxw", model.networkSecurityPerimeter().location());
        Assertions.assertEquals("dbxiqx", model.resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.ENFORCED,
            model.resourceAssociation().accessMode());
        Assertions.assertEquals("imht", model.profile().name());
        Assertions.assertEquals("winhehfqpo", model.profile().accessRulesVersion());
        Assertions.assertEquals("cblembnkbwv", model.profile().accessRules().get(0).fullyQualifiedArmId());
        Assertions.assertEquals("xk", model.profile().accessRules().get(0).name());
        Assertions.assertEquals("vqihebwtswbzuwf", model.profile().accessRules().get(0).type());
        Assertions.assertEquals(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND,
            model.profile().accessRules().get(0).direction());
        Assertions.assertEquals("egizv", model.profile().accessRules().get(0).addressPrefixes().get(0));
        Assertions.assertEquals("spofapvuhry", model.profile().accessRules().get(0).fullyQualifiedDomainNames().get(0));
        Assertions.assertEquals("l", model.profile().accessRules().get(0).emailAddresses().get(0));
        Assertions.assertEquals("nv", model.profile().accessRules().get(0).phoneNumbers().get(0));
        Assertions.assertEquals("rpfbcunezz", model.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("elfwy", model.profile().enabledLogCategories().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterConfigurationInner model
            = new NetworkSecurityPerimeterConfigurationInner()
                .withProvisioningState(NetworkSecurityPerimeterConfigProvisioningState.UPDATING)
                .withProvisioningIssues(
                    Arrays.asList(
                        new NetworkSecurityPerimeterConfigurationIssues().withName("elxieixynllxecw")
                            .withIssueType(
                                NetworkSecurityPerimeterConfigurationIssueType.CONFIGURATION_PROPAGATION_FAILURE)
                            .withSeverity(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING)
                            .withDescription("lhc")
                            .withSuggestedResourceIds(Arrays.asList("u", "i", "dwfmvigorqjb", "tzh"))
                            .withSuggestedAccessRules(Arrays.asList("lkafhonqjuje")),
                        new NetworkSecurityPerimeterConfigurationIssues().withName("kpzvcpopmxelnwc")
                            .withIssueType(
                                NetworkSecurityPerimeterConfigurationIssueType.CONFIGURATION_PROPAGATION_FAILURE)
                            .withSeverity(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR)
                            .withDescription("xxmlfmkqscazua")
                            .withSuggestedResourceIds(Arrays.asList("z", "puamwabzxr", "xcushs", "haivm"))
                            .withSuggestedAccessRules(Arrays.asList("sflvgsgzwywakoih", "nsmjbl")),
                        new NetworkSecurityPerimeterConfigurationIssues().withName("jhlnymzotqyryu")
                            .withIssueType(NetworkSecurityPerimeterConfigurationIssueType.OTHER)
                            .withSeverity(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING)
                            .withDescription("xmvwfg")
                            .withSuggestedResourceIds(Arrays.asList("xo", "supe"))
                            .withSuggestedAccessRules(Arrays.asList("zqn", "cvsql"))))
                .withNetworkSecurityPerimeter(new NetworkSecurityPerimeterInfo().withId("oibgsxg")
                    .withPerimeterGuid("fyq")
                    .withLocation("mpqoxw"))
                .withResourceAssociation(new ResourceAssociation().withName("dbxiqx")
                    .withAccessMode(NetworkSecurityPerimeterAssociationAccessMode.ENFORCED))
                .withProfile(
                    new NetworkSecurityPerimeterConfigurationProfile().withName("imht")
                        .withAccessRulesVersion("winhehfqpo")
                        .withAccessRules(Arrays.asList(new NetworkSecurityPerimeterProfileAccessRule()
                            .withFullyQualifiedArmId("cblembnkbwv")
                            .withName("xk")
                            .withType("vqihebwtswbzuwf")
                            .withDirection(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND)
                            .withAddressPrefixes(Arrays.asList("egizv", "jfelisdjubggbqig", "xkbsazgakgac"))
                            .withSubscriptions(Arrays.asList(new NetworkSecurityPerimeterSubscription(),
                                new NetworkSecurityPerimeterSubscription(), new NetworkSecurityPerimeterSubscription()))
                            .withNetworkSecurityPerimeters(
                                Arrays.asList(new NetworkSecurityPerimeterInfo(), new NetworkSecurityPerimeterInfo(),
                                    new NetworkSecurityPerimeterInfo(), new NetworkSecurityPerimeterInfo()))
                            .withFullyQualifiedDomainNames(Arrays.asList("spofapvuhry", "ni", "frzgbzjed", "st"))
                            .withEmailAddresses(Arrays.asList("l", "xbcuiiznkt", "f"))
                            .withPhoneNumbers(Arrays.asList("nv", "dibmikostbzbkiwb", "qnyophzfyls"))))
                        .withDiagnosticSettingsVersion("rpfbcunezz")
                        .withEnabledLogCategories(Arrays.asList("elfwy", "wl", "xjwet")));
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterConfigurationInner.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals("elxieixynllxecw", model.provisioningIssues().get(0).name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.CONFIGURATION_PROPAGATION_FAILURE,
            model.provisioningIssues().get(0).issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.WARNING,
            model.provisioningIssues().get(0).severity());
        Assertions.assertEquals("lhc", model.provisioningIssues().get(0).description());
        Assertions.assertEquals("u", model.provisioningIssues().get(0).suggestedResourceIds().get(0));
        Assertions.assertEquals("lkafhonqjuje", model.provisioningIssues().get(0).suggestedAccessRules().get(0));
        Assertions.assertEquals("oibgsxg", model.networkSecurityPerimeter().id());
        Assertions.assertEquals("fyq", model.networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("mpqoxw", model.networkSecurityPerimeter().location());
        Assertions.assertEquals("dbxiqx", model.resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.ENFORCED,
            model.resourceAssociation().accessMode());
        Assertions.assertEquals("imht", model.profile().name());
        Assertions.assertEquals("winhehfqpo", model.profile().accessRulesVersion());
        Assertions.assertEquals("cblembnkbwv", model.profile().accessRules().get(0).fullyQualifiedArmId());
        Assertions.assertEquals("xk", model.profile().accessRules().get(0).name());
        Assertions.assertEquals("vqihebwtswbzuwf", model.profile().accessRules().get(0).type());
        Assertions.assertEquals(NetworkSecurityPerimeterProfileAccessRuleDirection.INBOUND,
            model.profile().accessRules().get(0).direction());
        Assertions.assertEquals("egizv", model.profile().accessRules().get(0).addressPrefixes().get(0));
        Assertions.assertEquals("spofapvuhry", model.profile().accessRules().get(0).fullyQualifiedDomainNames().get(0));
        Assertions.assertEquals("l", model.profile().accessRules().get(0).emailAddresses().get(0));
        Assertions.assertEquals("nv", model.profile().accessRules().get(0).phoneNumbers().get(0));
        Assertions.assertEquals("rpfbcunezz", model.profile().diagnosticSettingsVersion());
        Assertions.assertEquals("elfwy", model.profile().enabledLogCategories().get(0));
    }
}
