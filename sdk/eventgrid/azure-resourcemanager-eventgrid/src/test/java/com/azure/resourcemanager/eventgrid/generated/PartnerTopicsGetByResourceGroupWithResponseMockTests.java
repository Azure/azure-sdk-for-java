// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"1247d6f1-18d9-467a-bad6-69907e3598bc\",\"source\":\"kwrt\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"qlcoqksyiibhyx\":{\"description\":\"szrtlhpdhwynct\",\"displayName\":\"zcnjfmbbfnvjxit\",\"documentationUrl\":\"vnk\",\"dataSchemaUrl\":\"iklsmni\"},\"agzlgpyai\":{\"description\":\"gbudav\",\"displayName\":\"orbccqcdhth\",\"documentationUrl\":\"vlirknuc\",\"dataSchemaUrl\":\"awrdt\"},\"ermhzicsbfdjhyaa\":{\"description\":\"hzqjjtsmuydqfttk\",\"displayName\":\"ybd\",\"documentationUrl\":\"urgmcdcp\",\"dataSchemaUrl\":\"hlo\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-12-08T00:07:25Z\",\"provisioningState\":\"Creating\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"iglh\",\"messageForActivation\":\"zwxqtejpii\"},\"identity\":{\"type\":\"None\",\"principalId\":\"yagjjnxkbylhyyxg\",\"tenantId\":\"klvqzrwtrdgscn\",\"userAssignedIdentities\":{\"kvtwfvesobpbo\":{\"principalId\":\"nsgnwxlwmez\",\"clientId\":\"hxpthceop\"},\"blqhxkasm\":{\"principalId\":\"mmlcdyarng\",\"clientId\":\"jf\"}}},\"location\":\"olmugpyvao\",\"tags\":{\"wzxeygzvtyevjhu\":\"l\",\"y\":\"nobguqisqsqkpdmi\"},\"id\":\"pnml\",\"name\":\"iqcpszpmcvq\",\"type\":\"vrdmvxyrxdh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PartnerTopic response = manager.partnerTopics()
            .getByResourceGroupWithResponse("ksgfyyskyekg", "fxcz", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("olmugpyvao", response.location());
        Assertions.assertEquals("l", response.tags().get("wzxeygzvtyevjhu"));
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("yagjjnxkbylhyyxg", response.identity().principalId());
        Assertions.assertEquals("klvqzrwtrdgscn", response.identity().tenantId());
        Assertions.assertEquals("nsgnwxlwmez",
            response.identity().userAssignedIdentities().get("kvtwfvesobpbo").principalId());
        Assertions.assertEquals("hxpthceop",
            response.identity().userAssignedIdentities().get("kvtwfvesobpbo").clientId());
        Assertions.assertEquals(UUID.fromString("1247d6f1-18d9-467a-bad6-69907e3598bc"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("kwrt", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("szrtlhpdhwynct",
            response.eventTypeInfo().inlineEventTypes().get("qlcoqksyiibhyx").description());
        Assertions.assertEquals("zcnjfmbbfnvjxit",
            response.eventTypeInfo().inlineEventTypes().get("qlcoqksyiibhyx").displayName());
        Assertions.assertEquals("vnk",
            response.eventTypeInfo().inlineEventTypes().get("qlcoqksyiibhyx").documentationUrl());
        Assertions.assertEquals("iklsmni",
            response.eventTypeInfo().inlineEventTypes().get("qlcoqksyiibhyx").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-08T00:07:25Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, response.activationState());
        Assertions.assertEquals("iglh", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("zwxqtejpii", response.messageForActivation());
    }
}
