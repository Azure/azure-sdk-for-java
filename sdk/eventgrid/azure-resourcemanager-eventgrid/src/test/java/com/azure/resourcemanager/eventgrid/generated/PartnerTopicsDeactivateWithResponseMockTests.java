// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsDeactivateWithResponseMockTests {
    @Test
    public void testDeactivateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"cae7e7ab-17fa-4625-80b5-7008e02e30e9\",\"source\":\"nsfdrlduye\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"obdoey\":{\"description\":\"gyuqwrldaxurfqa\",\"displayName\":\"sozjvxdzciggbnv\",\"documentationUrl\":\"o\",\"dataSchemaUrl\":\"alzyxwhoeamo\"},\"ueoqusvwluj\":{\"description\":\"pnimtwuuh\",\"displayName\":\"egnkwmnfeubtzjy\",\"documentationUrl\":\"wfugiph\",\"dataSchemaUrl\":\"kuumnqdurhzzfo\"},\"elfnzzryiz\":{\"description\":\"wnibittoz\",\"displayName\":\"dqumqvfm\",\"documentationUrl\":\"ad\",\"dataSchemaUrl\":\"gctxegtvgwyur\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-04-27T14:17:35Z\",\"provisioningState\":\"Deleting\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"layunomirhpfabe\",\"messageForActivation\":\"lamwmgewa\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"cpjs\",\"tenantId\":\"hemhcucsqsnxfbx\",\"userAssignedIdentities\":{\"pod\":{\"principalId\":\"pdr\",\"clientId\":\"yvbsuadu\"},\"qrojadhfztlray\":{\"principalId\":\"x\",\"clientId\":\"obkzhmhjdqltdel\"},\"dbkuwpzqxlcwe\":{\"principalId\":\"kg\",\"clientId\":\"yh\"}}},\"location\":\"kfecjvxf\",\"tags\":{\"jvppwooajeyy\":\"fqi\",\"zls\":\"mjjxizxpxh\",\"egh\":\"ekcttgzkjtyqpdwa\"},\"id\":\"tldsvczdjiahuq\",\"name\":\"mjzucwwme\",\"type\":\"jqhddwvmqxiyoo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PartnerTopic response = manager.partnerTopics()
            .deactivateWithResponse("hojqttbspvkhg", "aqjsgyzstujr", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("kfecjvxf", response.location());
        Assertions.assertEquals("fqi", response.tags().get("jvppwooajeyy"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("cpjs", response.identity().principalId());
        Assertions.assertEquals("hemhcucsqsnxfbx", response.identity().tenantId());
        Assertions.assertEquals("pdr", response.identity().userAssignedIdentities().get("pod").principalId());
        Assertions.assertEquals("yvbsuadu", response.identity().userAssignedIdentities().get("pod").clientId());
        Assertions.assertEquals(UUID.fromString("cae7e7ab-17fa-4625-80b5-7008e02e30e9"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("nsfdrlduye", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("gyuqwrldaxurfqa",
            response.eventTypeInfo().inlineEventTypes().get("obdoey").description());
        Assertions.assertEquals("sozjvxdzciggbnv",
            response.eventTypeInfo().inlineEventTypes().get("obdoey").displayName());
        Assertions.assertEquals("o", response.eventTypeInfo().inlineEventTypes().get("obdoey").documentationUrl());
        Assertions.assertEquals("alzyxwhoeamo",
            response.eventTypeInfo().inlineEventTypes().get("obdoey").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-27T14:17:35Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, response.activationState());
        Assertions.assertEquals("layunomirhpfabe", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("lamwmgewa", response.messageForActivation());
    }
}
