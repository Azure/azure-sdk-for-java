// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsDeactivateWithResponseMockTests {
    @Test
    public void testDeactivateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"af407455-1aab-43ad-9e86-f0b7ba120487\",\"source\":\"skirhn\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"dkqiyv\":{\"description\":\"fukdljqnvtsdyd\",\"displayName\":\"kpafyaloowwziz\",\"documentationUrl\":\"yuf\",\"dataSchemaUrl\":\"zstifgufyj\"},\"lueaujqbbgsim\":{\"description\":\"jokgwesymzqh\",\"displayName\":\"p\",\"documentationUrl\":\"lpe\",\"dataSchemaUrl\":\"zn\"},\"cumecsaaqg\":{\"description\":\"jlw\",\"displayName\":\"bpjzobdwbcpraswk\",\"documentationUrl\":\"ydtnaczkfwfatgaw\",\"dataSchemaUrl\":\"nskivdwgt\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-09-11T10:28:46Z\",\"provisioningState\":\"IdleDueToMirroredChannelResourceDeletion\",\"activationState\":\"NeverActivated\",\"partnerTopicFriendlyDescription\":\"sbskowkrbhz\",\"messageForActivation\":\"bkhtmqowiu\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"ucyhfaimq\",\"tenantId\":\"ruozkgyfp\",\"userAssignedIdentities\":{\"xvlzjxplhpevasyn\":{\"principalId\":\"gfmq\",\"clientId\":\"kk\"}}},\"location\":\"vzjyielb\",\"tags\":{\"nmpecqxgiqasifub\":\"vbqv\"},\"id\":\"snstl\",\"name\":\"wqpjnxjkhtupsvy\",\"type\":\"uweuiy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PartnerTopic response = manager.partnerTopics()
            .deactivateWithResponse("qxgzxler", "km", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("vzjyielb", response.location());
        Assertions.assertEquals("vbqv", response.tags().get("nmpecqxgiqasifub"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("ucyhfaimq", response.identity().principalId());
        Assertions.assertEquals("ruozkgyfp", response.identity().tenantId());
        Assertions.assertEquals("gfmq",
            response.identity().userAssignedIdentities().get("xvlzjxplhpevasyn").principalId());
        Assertions.assertEquals("kk", response.identity().userAssignedIdentities().get("xvlzjxplhpevasyn").clientId());
        Assertions.assertEquals(UUID.fromString("af407455-1aab-43ad-9e86-f0b7ba120487"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("skirhn", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("fukdljqnvtsdyd",
            response.eventTypeInfo().inlineEventTypes().get("dkqiyv").description());
        Assertions.assertEquals("kpafyaloowwziz",
            response.eventTypeInfo().inlineEventTypes().get("dkqiyv").displayName());
        Assertions.assertEquals("yuf", response.eventTypeInfo().inlineEventTypes().get("dkqiyv").documentationUrl());
        Assertions.assertEquals("zstifgufyj",
            response.eventTypeInfo().inlineEventTypes().get("dkqiyv").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T10:28:46Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.NEVER_ACTIVATED, response.activationState());
        Assertions.assertEquals("sbskowkrbhz", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("bkhtmqowiu", response.messageForActivation());
    }
}
