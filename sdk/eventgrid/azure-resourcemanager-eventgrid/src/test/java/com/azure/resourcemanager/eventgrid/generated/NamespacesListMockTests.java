// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.AlternativeAuthenticationNameSource;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NamespacesListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"lyvxchp\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"sf\",\"name\":\"euhwwskn\",\"type\":\"tvzuzhasup\"}],\"provisioningState\":\"Updating\",\"topicsConfiguration\":{\"hostname\":\"pgzvzqazvbka\"},\"topicSpacesConfiguration\":{\"state\":\"Disabled\",\"routeTopicResourceId\":\"ongru\",\"hostname\":\"s\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{}]},\"clientAuthentication\":{\"alternativeAuthenticationNameSources\":[\"ClientCertificateDns\"]},\"maximumSessionExpiryInHours\":1228289233,\"maximumClientSessionsPerAuthenticationName\":1375142660,\"routingIdentityInfo\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"aby\"}},\"isZoneRedundant\":false,\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"ey\",\"action\":\"Allow\"},{\"ipMask\":\"mexmnvk\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.2\"},\"sku\":{\"name\":\"Standard\",\"capacity\":1416645873},\"identity\":{\"type\":\"None\",\"principalId\":\"rr\",\"tenantId\":\"hvdvmi\",\"userAssignedIdentities\":{\"erkeluxzsh\":{\"principalId\":\"aeqjzmhkd\",\"clientId\":\"acroczfmu\"},\"sgqk\":{\"principalId\":\"ezbzu\",\"clientId\":\"dlevzskejcgw\"}}},\"location\":\"yecup\",\"tags\":{\"sjcfma\":\"jparda\",\"zvcmcokxi\":\"pzdqw\",\"nzvajbvbnkrdem\":\"ekuvfrjwuca\"},\"id\":\"idackzidgzwdyd\",\"name\":\"misvpztd\",\"type\":\"vykpxkqe\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Namespace> response
            = manager.namespaces().list("krrwepgqvqokql", 1219444449, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("yecup", response.iterator().next().location());
        Assertions.assertEquals("jparda", response.iterator().next().tags().get("sjcfma"));
        Assertions.assertEquals(SkuName.STANDARD, response.iterator().next().sku().name());
        Assertions.assertEquals(1416645873, response.iterator().next().sku().capacity());
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("rr", response.iterator().next().identity().principalId());
        Assertions.assertEquals("hvdvmi", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("aeqjzmhkd",
            response.iterator().next().identity().userAssignedIdentities().get("erkeluxzsh").principalId());
        Assertions.assertEquals("acroczfmu",
            response.iterator().next().identity().userAssignedIdentities().get("erkeluxzsh").clientId());
        Assertions.assertEquals("lyvxchp",
            response.iterator().next().privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.DELETING,
            response.iterator().next().privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals(TopicSpacesConfigurationState.DISABLED,
            response.iterator().next().topicSpacesConfiguration().state());
        Assertions.assertEquals("ongru", response.iterator().next().topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_DNS, response.iterator().next()
            .topicSpacesConfiguration().clientAuthentication().alternativeAuthenticationNameSources().get(0));
        Assertions.assertEquals(1228289233,
            response.iterator().next().topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(1375142660,
            response.iterator().next().topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("aby",
            response.iterator().next().topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals(false, response.iterator().next().isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("ey", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, response.iterator().next().minimumTlsVersionAllowed());
    }
}
