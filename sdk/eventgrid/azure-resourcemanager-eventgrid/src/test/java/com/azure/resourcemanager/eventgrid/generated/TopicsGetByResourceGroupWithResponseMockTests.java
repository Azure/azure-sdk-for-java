// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"q\",\"zpdgonjhxshthmgp\",\"zqulptkbv\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"zhigqqbtimpkj\",\"name\":\"lornsihqh\",\"type\":\"dsmusuaawjakxwj\"}],\"provisioningState\":\"Updating\",\"endpoint\":\"mnn\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"vlkpzwb\":{\"description\":\"ba\",\"displayName\":\"sjtgirnbgmgmddo\",\"documentationUrl\":\"mynltwmpftmfoeaj\",\"dataSchemaUrl\":\"syxwetamfdd\"},\"rrihufoi\":{\"description\":\"recchdidrmu\",\"displayName\":\"ahmjedbiu\",\"documentationUrl\":\"khhwmj\",\"dataSchemaUrl\":\"bweunxc\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"vgnzuzpbgkzcsc\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"unhdimjuk\",\"action\":\"Allow\"},{\"ipMask\":\"kaugpucdocfqplwg\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinRegion\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"klkvb\",\"tenantId\":\"kyjtkakvl\",\"userAssignedIdentities\":{\"nujvqynvavi\":{\"principalId\":\"jvpzaptuoskaoiz\",\"clientId\":\"xwfgcdiykkcx\"},\"quddrwjclj\":{\"principalId\":\"dmuqohhi\",\"clientId\":\"a\"},\"fhxrzfr\":{\"principalId\":\"hlhpvzadb\",\"clientId\":\"nnin\"},\"xgcbvzarmqcbp\":{\"principalId\":\"ztiucwviql\",\"clientId\":\"khkrc\"}}},\"location\":\"stsinvag\",\"tags\":{\"dvcehqw\":\"yhdrxb\",\"buwvorba\":\"itxnmxgnmgu\"},\"id\":\"kjnbkbdhlltqstq\",\"name\":\"qsygxiynec\",\"type\":\"vagzkheuba\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Topic response = manager.topics()
            .getByResourceGroupWithResponse("rbypi", "dbkp", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("stsinvag", response.location());
        Assertions.assertEquals("yhdrxb", response.tags().get("dvcehqw"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("klkvb", response.identity().principalId());
        Assertions.assertEquals("kyjtkakvl", response.identity().tenantId());
        Assertions.assertEquals("jvpzaptuoskaoiz",
            response.identity().userAssignedIdentities().get("nujvqynvavi").principalId());
        Assertions.assertEquals("xwfgcdiykkcx",
            response.identity().userAssignedIdentities().get("nujvqynvavi").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("ba", response.eventTypeInfo().inlineEventTypes().get("vlkpzwb").description());
        Assertions.assertEquals("sjtgirnbgmgmddo",
            response.eventTypeInfo().inlineEventTypes().get("vlkpzwb").displayName());
        Assertions.assertEquals("mynltwmpftmfoeaj",
            response.eventTypeInfo().inlineEventTypes().get("vlkpzwb").documentationUrl());
        Assertions.assertEquals("syxwetamfdd",
            response.eventTypeInfo().inlineEventTypes().get("vlkpzwb").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, response.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.publicNetworkAccess());
        Assertions.assertEquals("unhdimjuk", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, response.dataResidencyBoundary());
    }
}
