// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class EventTypeInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventTypeInfo model = BinaryData.fromString(
            "{\"kind\":\"Inline\",\"inlineEventTypes\":{\"eltmrldhugjzzdat\":{\"description\":\"jitcjczdzevn\",\"displayName\":\"krwpdap\",\"documentationUrl\":\"sbdkvwr\",\"dataSchemaUrl\":\"feusnhut\"},\"ftyxolniw\":{\"description\":\"hocdgeab\",\"displayName\":\"phut\",\"documentationUrl\":\"ndv\",\"dataSchemaUrl\":\"ozwyiftyhxhuro\"}}}")
            .toObject(EventTypeInfo.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.kind());
        Assertions.assertEquals("jitcjczdzevn", model.inlineEventTypes().get("eltmrldhugjzzdat").description());
        Assertions.assertEquals("krwpdap", model.inlineEventTypes().get("eltmrldhugjzzdat").displayName());
        Assertions.assertEquals("sbdkvwr", model.inlineEventTypes().get("eltmrldhugjzzdat").documentationUrl());
        Assertions.assertEquals("feusnhut", model.inlineEventTypes().get("eltmrldhugjzzdat").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventTypeInfo model = new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
            .withInlineEventTypes(mapOf("eltmrldhugjzzdat",
                new InlineEventProperties().withDescription("jitcjczdzevn")
                    .withDisplayName("krwpdap")
                    .withDocumentationUrl("sbdkvwr")
                    .withDataSchemaUrl("feusnhut"),
                "ftyxolniw",
                new InlineEventProperties().withDescription("hocdgeab")
                    .withDisplayName("phut")
                    .withDocumentationUrl("ndv")
                    .withDataSchemaUrl("ozwyiftyhxhuro")));
        model = BinaryData.fromObject(model).toObject(EventTypeInfo.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.kind());
        Assertions.assertEquals("jitcjczdzevn", model.inlineEventTypes().get("eltmrldhugjzzdat").description());
        Assertions.assertEquals("krwpdap", model.inlineEventTypes().get("eltmrldhugjzzdat").displayName());
        Assertions.assertEquals("sbdkvwr", model.inlineEventTypes().get("eltmrldhugjzzdat").documentationUrl());
        Assertions.assertEquals("feusnhut", model.inlineEventTypes().get("eltmrldhugjzzdat").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
