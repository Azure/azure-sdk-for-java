// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopic;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SystemTopicsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"source\":\"cq\",\"topicType\":\"zmz\",\"metricResourceId\":\"cxitmhxxrqi\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"jd\",\"tenantId\":\"kvpyeyo\",\"userAssignedIdentities\":{\"fwkyluobdxw\":{\"principalId\":\"mpnqup\",\"clientId\":\"jr\"},\"cvwbz\":{\"principalId\":\"dcclcvqsr\",\"clientId\":\"ay\"},\"ydrf\":{\"principalId\":\"xlrymfj\",\"clientId\":\"piywqnp\"},\"jqpulmwqg\":{\"principalId\":\"cnyxbyx\",\"clientId\":\"hmqyncgaullfstyy\"}}},\"location\":\"hmqmiwxzf\",\"tags\":{\"dukinhlxh\":\"ucqfgufjnbxwbm\"},\"id\":\"dekekzouyveww\",\"name\":\"zrdwcg\",\"type\":\"dohgcandxfhhhte\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SystemTopic response = manager.systemTopics()
            .define("mbzdxmsyn")
            .withRegion("amfbqh")
            .withExistingResourceGroup("cxs")
            .withTags(mapOf("fu", "k"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("rxbozp")
                .withTenantId("cnwjzbqblxr")
                .withUserAssignedIdentities(mapOf("gfhjxsawoo",
                    new UserIdentityProperties().withPrincipalId("svoqiza").withClientId("sdso"), "mrnotocjnzdaiovr",
                    new UserIdentityProperties().withPrincipalId("ffhx").withClientId("kmwzrdqyoy"), "uriwhjdfrw",
                    new UserIdentityProperties().withPrincipalId("rpqphkvyyzad").withClientId("xylaypdtyzvelffo"),
                    "oebnxsqcowscuyfq",
                    new UserIdentityProperties().withPrincipalId("shrmnkcclpctuog").withClientId("cxjfsgmos"))))
            .withSource("yufxuzmsvzyq")
            .withTopicType("rnxhjtlxfikjk")
            .create();

        Assertions.assertEquals("hmqmiwxzf", response.location());
        Assertions.assertEquals("ucqfgufjnbxwbm", response.tags().get("dukinhlxh"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("jd", response.identity().principalId());
        Assertions.assertEquals("kvpyeyo", response.identity().tenantId());
        Assertions.assertEquals("mpnqup",
            response.identity().userAssignedIdentities().get("fwkyluobdxw").principalId());
        Assertions.assertEquals("jr", response.identity().userAssignedIdentities().get("fwkyluobdxw").clientId());
        Assertions.assertEquals("cq", response.source());
        Assertions.assertEquals("zmz", response.topicType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
