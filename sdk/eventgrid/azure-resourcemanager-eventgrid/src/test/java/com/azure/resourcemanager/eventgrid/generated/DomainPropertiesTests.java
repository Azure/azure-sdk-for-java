// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.DomainProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainProperties model = BinaryData.fromString(
            "{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"pu\"},\"groupIds\":[\"rywn\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"tiyqzrnkcqv\",\"actionsRequired\":\"lwh\"},\"provisioningState\":\"Updating\"},\"id\":\"icohoqqnwvl\",\"name\":\"yav\",\"type\":\"hheunmmqhgyx\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"ocukoklyax\"},\"groupIds\":[\"nuqszfkbey\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"jmwvvj\",\"actionsRequired\":\"tcxsenhwlrs\"},\"provisioningState\":\"Succeeded\"},\"id\":\"zpwv\",\"name\":\"qdqgbi\",\"type\":\"ylihkaetckt\"}],\"provisioningState\":\"Failed\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"snkymuctq\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"uujqgidokgjljyo\":{\"description\":\"xerf\",\"displayName\":\"utttxfvjrbirp\",\"documentationUrl\":\"epcyvahfnlj\",\"dataSchemaUrl\":\"qxj\"},\"godebfqkkrbmpu\":{\"description\":\"vcltbgsncgh\",\"displayName\":\"esz\",\"documentationUrl\":\"bijhtxfvgxbf\",\"dataSchemaUrl\":\"xnehmpvec\"},\"kpikadrgvt\":{\"description\":\"riwflzlfb\",\"displayName\":\"puz\",\"documentationUrl\":\"ispnqzahmgkbrp\",\"dataSchemaUrl\":\"dhibnuq\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"n\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"jggmebfsiarbu\",\"action\":\"Allow\"},{\"ipMask\":\"pnazzm\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinRegion\"}")
            .toObject(DomainProperties.class);
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("xerf", model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").description());
        Assertions.assertEquals("utttxfvjrbirp",
            model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").displayName());
        Assertions.assertEquals("epcyvahfnlj",
            model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").documentationUrl());
        Assertions.assertEquals("qxj", model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jggmebfsiarbu", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainProperties model = new DomainProperties().withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
            .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("uujqgidokgjljyo",
                    new InlineEventProperties().withDescription("xerf")
                        .withDisplayName("utttxfvjrbirp")
                        .withDocumentationUrl("epcyvahfnlj")
                        .withDataSchemaUrl("qxj"),
                    "godebfqkkrbmpu",
                    new InlineEventProperties().withDescription("vcltbgsncgh")
                        .withDisplayName("esz")
                        .withDocumentationUrl("bijhtxfvgxbf")
                        .withDataSchemaUrl("xnehmpvec"),
                    "kpikadrgvt",
                    new InlineEventProperties().withDescription("riwflzlfb")
                        .withDisplayName("puz")
                        .withDocumentationUrl("ispnqzahmgkbrp")
                        .withDataSchemaUrl("dhibnuq"))))
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("jggmebfsiarbu").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("pnazzm").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(false)
            .withAutoCreateTopicWithFirstSubscription(false)
            .withAutoDeleteTopicWithLastSubscription(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION);
        model = BinaryData.fromObject(model).toObject(DomainProperties.class);
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("xerf", model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").description());
        Assertions.assertEquals("utttxfvjrbirp",
            model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").displayName());
        Assertions.assertEquals("epcyvahfnlj",
            model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").documentationUrl());
        Assertions.assertEquals("qxj", model.eventTypeInfo().inlineEventTypes().get("uujqgidokgjljyo").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jggmebfsiarbu", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
