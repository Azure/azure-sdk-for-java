// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.DomainProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainProperties model = BinaryData.fromString(
            "{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"mryw\"},\"groupIds\":[\"oqftiyqzrnkcq\",\"yx\",\"whzlsicohoq\",\"nwvlryavwhheunmm\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"zko\",\"actionsRequired\":\"cukoklyaxuconu\"},\"provisioningState\":\"Creating\"},\"id\":\"fkbey\",\"name\":\"ewrmjmwvvjektc\",\"type\":\"senhwlrs\"}],\"provisioningState\":\"Succeeded\",\"minimumTlsVersionAllowed\":\"1.1\",\"endpoint\":\"v\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"phxepcyvahf\":{\"description\":\"lihkaetcktvfc\",\"displayName\":\"fsnkymuctq\",\"documentationUrl\":\"fbebrjcxer\",\"dataSchemaUrl\":\"wutttxfvjrbi\"},\"sncghkjeszz\":{\"description\":\"jky\",\"displayName\":\"j\",\"documentationUrl\":\"ujqgidok\",\"dataSchemaUrl\":\"ljyoxgvcltb\"},\"gr\":{\"description\":\"ijhtxf\",\"displayName\":\"xbf\",\"documentationUrl\":\"xnehmpvec\",\"dataSchemaUrl\":\"odebfqkkrbmpu\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"lfbxzpuzycisp\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"gkbrpyyd\",\"action\":\"Allow\"},{\"ipMask\":\"uqqkpik\",\"action\":\"Allow\"},{\"ipMask\":\"vtq\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinGeopair\"}")
            .toObject(DomainProperties.class);
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("lihkaetcktvfc",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").description());
        Assertions.assertEquals("fsnkymuctq",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").displayName());
        Assertions.assertEquals("fbebrjcxer",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").documentationUrl());
        Assertions.assertEquals("wutttxfvjrbi",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("gkbrpyyd", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(true, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainProperties model = new DomainProperties().withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
            .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("phxepcyvahf",
                    new InlineEventProperties().withDescription("lihkaetcktvfc")
                        .withDisplayName("fsnkymuctq")
                        .withDocumentationUrl("fbebrjcxer")
                        .withDataSchemaUrl("wutttxfvjrbi"),
                    "sncghkjeszz",
                    new InlineEventProperties().withDescription("jky")
                        .withDisplayName("j")
                        .withDocumentationUrl("ujqgidok")
                        .withDataSchemaUrl("ljyoxgvcltb"),
                    "gr",
                    new InlineEventProperties().withDescription("ijhtxf")
                        .withDisplayName("xbf")
                        .withDocumentationUrl("xnehmpvec")
                        .withDataSchemaUrl("odebfqkkrbmpu"))))
            .withInputSchemaMapping(new JsonInputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("gkbrpyyd").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("uqqkpik").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("vtq").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(false)
            .withAutoCreateTopicWithFirstSubscription(true)
            .withAutoDeleteTopicWithLastSubscription(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(DomainProperties.class);
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("lihkaetcktvfc",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").description());
        Assertions.assertEquals("fsnkymuctq",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").displayName());
        Assertions.assertEquals("fbebrjcxer",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").documentationUrl());
        Assertions.assertEquals("wutttxfvjrbi",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("gkbrpyyd", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(true, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
