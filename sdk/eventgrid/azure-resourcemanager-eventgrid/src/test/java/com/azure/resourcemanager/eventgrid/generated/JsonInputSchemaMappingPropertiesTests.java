// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.JsonInputSchemaMappingProperties;
import com.azure.resourcemanager.eventgrid.models.JsonField;
import com.azure.resourcemanager.eventgrid.models.JsonFieldWithDefault;
import org.junit.jupiter.api.Assertions;

public final class JsonInputSchemaMappingPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonInputSchemaMappingProperties model = BinaryData.fromString(
            "{\"id\":{\"sourceField\":\"meikj\"},\"topic\":{\"sourceField\":\"zacn\"},\"eventTime\":{\"sourceField\":\"fsuqtaazyqbxy\"},\"eventType\":{\"sourceField\":\"fp\",\"defaultValue\":\"qi\"},\"subject\":{\"sourceField\":\"xlhdj\",\"defaultValue\":\"dcadwvpsozjiihjr\"},\"dataVersion\":{\"sourceField\":\"mrzoep\",\"defaultValue\":\"wdvwnjkgvfnmx\"}}")
            .toObject(JsonInputSchemaMappingProperties.class);
        Assertions.assertEquals("meikj", model.id().sourceField());
        Assertions.assertEquals("zacn", model.topic().sourceField());
        Assertions.assertEquals("fsuqtaazyqbxy", model.eventTime().sourceField());
        Assertions.assertEquals("fp", model.eventType().sourceField());
        Assertions.assertEquals("qi", model.eventType().defaultValue());
        Assertions.assertEquals("xlhdj", model.subject().sourceField());
        Assertions.assertEquals("dcadwvpsozjiihjr", model.subject().defaultValue());
        Assertions.assertEquals("mrzoep", model.dataVersion().sourceField());
        Assertions.assertEquals("wdvwnjkgvfnmx", model.dataVersion().defaultValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonInputSchemaMappingProperties model = new JsonInputSchemaMappingProperties()
            .withId(new JsonField().withSourceField("meikj"))
            .withTopic(new JsonField().withSourceField("zacn"))
            .withEventTime(new JsonField().withSourceField("fsuqtaazyqbxy"))
            .withEventType(new JsonFieldWithDefault().withSourceField("fp").withDefaultValue("qi"))
            .withSubject(new JsonFieldWithDefault().withSourceField("xlhdj").withDefaultValue("dcadwvpsozjiihjr"))
            .withDataVersion(new JsonFieldWithDefault().withSourceField("mrzoep").withDefaultValue("wdvwnjkgvfnmx"));
        model = BinaryData.fromObject(model).toObject(JsonInputSchemaMappingProperties.class);
        Assertions.assertEquals("meikj", model.id().sourceField());
        Assertions.assertEquals("zacn", model.topic().sourceField());
        Assertions.assertEquals("fsuqtaazyqbxy", model.eventTime().sourceField());
        Assertions.assertEquals("fp", model.eventType().sourceField());
        Assertions.assertEquals("qi", model.eventType().defaultValue());
        Assertions.assertEquals("xlhdj", model.subject().sourceField());
        Assertions.assertEquals("dcadwvpsozjiihjr", model.subject().defaultValue());
        Assertions.assertEquals("mrzoep", model.dataVersion().sourceField());
        Assertions.assertEquals("wdvwnjkgvfnmx", model.dataVersion().defaultValue());
    }
}
