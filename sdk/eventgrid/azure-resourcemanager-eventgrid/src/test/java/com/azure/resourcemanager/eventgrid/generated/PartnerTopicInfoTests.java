// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicInfo model = BinaryData.fromString(
            "{\"azureSubscriptionId\":\"kknryrtihf\",\"resourceGroupName\":\"ijbpzvgnwzsymgl\",\"name\":\"fcyzkohdbihanufh\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"tfwvukxgaudc\":{\"description\":\"git\",\"displayName\":\"qhabifpikxwcz\",\"documentationUrl\":\"scnpqxuhivy\",\"dataSchemaUrl\":\"iwbybrkxvdumjg\"}}},\"source\":\"nhsjcnyej\"}")
            .toObject(PartnerTopicInfo.class);
        Assertions.assertEquals("kknryrtihf", model.azureSubscriptionId());
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.resourceGroupName());
        Assertions.assertEquals("fcyzkohdbihanufh", model.name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("git", model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").description());
        Assertions.assertEquals("qhabifpikxwcz",
            model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").displayName());
        Assertions.assertEquals("scnpqxuhivy",
            model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").documentationUrl());
        Assertions.assertEquals("iwbybrkxvdumjg",
            model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").dataSchemaUrl());
        Assertions.assertEquals("nhsjcnyej", model.source());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicInfo model = new PartnerTopicInfo().withAzureSubscriptionId("kknryrtihf")
            .withResourceGroupName("ijbpzvgnwzsymgl")
            .withName("fcyzkohdbihanufh")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("tfwvukxgaudc",
                    new InlineEventProperties().withDescription("git")
                        .withDisplayName("qhabifpikxwcz")
                        .withDocumentationUrl("scnpqxuhivy")
                        .withDataSchemaUrl("iwbybrkxvdumjg"))))
            .withSource("nhsjcnyej");
        model = BinaryData.fromObject(model).toObject(PartnerTopicInfo.class);
        Assertions.assertEquals("kknryrtihf", model.azureSubscriptionId());
        Assertions.assertEquals("ijbpzvgnwzsymgl", model.resourceGroupName());
        Assertions.assertEquals("fcyzkohdbihanufh", model.name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("git", model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").description());
        Assertions.assertEquals("qhabifpikxwcz",
            model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").displayName());
        Assertions.assertEquals("scnpqxuhivy",
            model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").documentationUrl());
        Assertions.assertEquals("iwbybrkxvdumjg",
            model.eventTypeInfo().inlineEventTypes().get("tfwvukxgaudc").dataSchemaUrl());
        Assertions.assertEquals("nhsjcnyej", model.source());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
