// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class TopicsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"eohlpsftqkrvm\",\"vbvvcpwtqsu\",\"pnhmzy\",\"ffetevrnt\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"acycsyo\",\"name\":\"ctkhfh\",\"type\":\"satvcs\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"mizhvprhqqw\",\"ublehhkplobz\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"aksadzighmmtbt\",\"name\":\"vucfvvraab\",\"type\":\"urdeewlsuxp\"}],\"provisioningState\":\"Succeeded\",\"endpoint\":\"dwjyjiznior\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"vzjowzug\":{\"description\":\"spmcreihuftrnigh\",\"displayName\":\"nuwqxungro\",\"documentationUrl\":\"wfmsxj\",\"dataSchemaUrl\":\"ylwx\"},\"gpruccwme\":{\"description\":\"rclbl\",\"displayName\":\"hpwachyeu\",\"documentationUrl\":\"wmvwryvdi\",\"dataSchemaUrl\":\"ii\"},\"ajwjuriarsbcll\":{\"description\":\"txsytrtexegwmrq\",\"displayName\":\"wi\",\"documentationUrl\":\"vycfjncindi\",\"dataSchemaUrl\":\"q\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"EventGridSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"jxizbaxdygzk\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"wacyyjmlxppdndzk\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"None\",\"principalId\":\"ytqdcizeqqfop\",\"tenantId\":\"opmotdsf\",\"userAssignedIdentities\":{\"dzmxojzsvmaigbqk\":{\"principalId\":\"lyo\",\"clientId\":\"yfbkmv\"},\"ihba\":{\"principalId\":\"yejthgeecb\",\"clientId\":\"rgwlc\"},\"jixiujzkc\":{\"principalId\":\"qsokknpug\",\"clientId\":\"wdizc\"},\"wlmnwzo\":{\"principalId\":\"xgkrswksykkbxk\",\"clientId\":\"b\"}}},\"kind\":\"Azure\",\"extendedLocation\":{\"name\":\"ddlggb\",\"type\":\"olgzubakdlkv\"},\"location\":\"cmfnsffet\",\"tags\":{\"qvxgvohdb\":\"ixwewzlscgsmep\"},\"id\":\"hhxmoevvud\",\"name\":\"epfhgannvwx\",\"type\":\"hpjhubohxvzga\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Topic> response
            = manager.topics().list("krbuoggtdltlcuha", 330580425, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("cmfnsffet", response.iterator().next().location());
        Assertions.assertEquals("ixwewzlscgsmep", response.iterator().next().tags().get("qvxgvohdb"));
        Assertions.assertEquals(Sku.BASIC, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("ytqdcizeqqfop", response.iterator().next().identity().principalId());
        Assertions.assertEquals("opmotdsf", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("lyo",
            response.iterator().next().identity().userAssignedIdentities().get("dzmxojzsvmaigbqk").principalId());
        Assertions.assertEquals("yfbkmv",
            response.iterator().next().identity().userAssignedIdentities().get("dzmxojzsvmaigbqk").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, response.iterator().next().kind());
        Assertions.assertEquals("ddlggb", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("olgzubakdlkv", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("spmcreihuftrnigh",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("vzjowzug").description());
        Assertions.assertEquals("nuwqxungro",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("vzjowzug").displayName());
        Assertions.assertEquals("wfmsxj",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("vzjowzug").documentationUrl());
        Assertions.assertEquals("ylwx",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("vzjowzug").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER,
            response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("wacyyjmlxppdndzk", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR,
            response.iterator().next().dataResidencyBoundary());
    }
}
