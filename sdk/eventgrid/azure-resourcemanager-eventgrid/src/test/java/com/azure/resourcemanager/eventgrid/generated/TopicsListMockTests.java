// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"yotct\",\"hfhfsat\",\"csxrmhnmizhv\",\"rhqq\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"lehhkplobzg\",\"name\":\"ttak\",\"type\":\"adzighmmtbt\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"vvraabeurdeewlsu\",\"pcbwkdwjyjiznio\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"m\",\"name\":\"taspmcrei\",\"type\":\"uftrni\"}],\"provisioningState\":\"Succeeded\",\"endpoint\":\"nuwqxungro\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"fkiikgpruccwm\":{\"description\":\"jwdylwxmvzjowz\",\"displayName\":\"eerclbltbhpw\",\"documentationUrl\":\"hyeurj\",\"dataSchemaUrl\":\"vwryvd\"},\"zbaxdygzkz\":{\"description\":\"btxsytrtexeg\",\"displayName\":\"rqjywiwhvycfjn\",\"documentationUrl\":\"ndiloqkajwjuria\",\"dataSchemaUrl\":\"bcllanhzcknjx\"}}},\"minimumTlsVersionAllowed\":\"1.2\",\"inputSchema\":\"EventGridSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"yjmlxppdndzkfe\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"ibfkcjytq\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"m\",\"tenantId\":\"ds\",\"userAssignedIdentities\":{\"hyejt\":{\"principalId\":\"qlyoazyfbkm\",\"clientId\":\"dzmxojzsvmaigbqk\"}}},\"kind\":\"AzureArc\",\"extendedLocation\":{\"name\":\"bpergwlck\",\"type\":\"bamyqsokkn\"},\"location\":\"gz\",\"tags\":{\"ujzkcsexgkrs\":\"izcrjix\",\"wzoknvu\":\"ksykkbxktxbbwlm\"},\"id\":\"ddlggb\",\"name\":\"a\",\"type\":\"lgzubak\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Topic> response = manager.topics().list("ffetevrnt", 187141043, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gz", response.iterator().next().location());
        Assertions.assertEquals("izcrjix", response.iterator().next().tags().get("ujzkcsexgkrs"));
        Assertions.assertEquals(Sku.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("m", response.iterator().next().identity().principalId());
        Assertions.assertEquals("ds", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("qlyoazyfbkm",
            response.iterator().next().identity().userAssignedIdentities().get("hyejt").principalId());
        Assertions.assertEquals("dzmxojzsvmaigbqk",
            response.iterator().next().identity().userAssignedIdentities().get("hyejt").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, response.iterator().next().kind());
        Assertions.assertEquals("bpergwlck", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("bamyqsokkn", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("jwdylwxmvzjowz",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("fkiikgpruccwm").description());
        Assertions.assertEquals("eerclbltbhpw",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("fkiikgpruccwm").displayName());
        Assertions.assertEquals("hyeurj",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("fkiikgpruccwm").documentationUrl());
        Assertions.assertEquals("vwryvd",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("fkiikgpruccwm").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("ibfkcjytq", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
