// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"wzlzklasl\",\"acizuxlr\",\"rwpewsa\",\"doejtighsxjpyt\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"alahovuuwxhm\",\"name\":\"hjnhjiot\",\"type\":\"ffbbcngkegxcypxb\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ilyrzoxp\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"frolq\",\"name\":\"wnk\",\"type\":\"u\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ahwkxjjm\",\"tnlmsoodtmvecdhd\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"rptveajczxvl\",\"name\":\"srg\",\"type\":\"rfizr\"}],\"provisioningState\":\"Creating\",\"endpoint\":\"ptyu\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"pcf\":{\"description\":\"k\",\"displayName\":\"pfuofixcnpcfykkp\",\"documentationUrl\":\"cpawmp\",\"dataSchemaUrl\":\"rdpwrpc\"}}},\"minimumTlsVersionAllowed\":\"1.1\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"awkgy\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"nnidmdiawpzxk\",\"action\":\"Allow\"},{\"ipMask\":\"mkctdhuo\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"},\"identity\":{\"type\":\"None\",\"principalId\":\"qodvqgcnbhcbmj\",\"tenantId\":\"ti\",\"userAssignedIdentities\":{\"gjrhs\":{\"principalId\":\"ntsxjmfmeftvh\",\"clientId\":\"o\"}}},\"location\":\"w\",\"tags\":{\"u\":\"g\",\"fdz\":\"cfogxhcxnwjt\",\"uzfwo\":\"c\",\"ednlwglihezo\":\"wakukzkdtzxs\"},\"id\":\"ucmqgisnione\",\"name\":\"bzdrdpuenxkgt\",\"type\":\"zlm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Topic> response = manager.topics().list("lxu", 1027956751, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("w", response.iterator().next().location());
        Assertions.assertEquals("g", response.iterator().next().tags().get("u"));
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("qodvqgcnbhcbmj", response.iterator().next().identity().principalId());
        Assertions.assertEquals("ti", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("ntsxjmfmeftvh",
            response.iterator().next().identity().userAssignedIdentities().get("gjrhs").principalId());
        Assertions.assertEquals("o",
            response.iterator().next().identity().userAssignedIdentities().get("gjrhs").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("k",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("pcf").description());
        Assertions.assertEquals("pfuofixcnpcfykkp",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("pcf").displayName());
        Assertions.assertEquals("cpawmp",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("pcf").documentationUrl());
        Assertions.assertEquals("rdpwrpc",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("pcf").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("nnidmdiawpzxk", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
