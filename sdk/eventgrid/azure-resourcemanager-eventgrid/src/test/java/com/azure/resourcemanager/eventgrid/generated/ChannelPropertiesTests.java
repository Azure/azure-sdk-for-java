// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ChannelProperties;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import com.azure.resourcemanager.eventgrid.models.ResourceMoveChangeHistory;
import com.azure.resourcemanager.eventgrid.models.WebhookPartnerDestinationInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelProperties model = BinaryData.fromString(
            "{\"channelType\":\"PartnerDestination\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"sjtxukcdmp\",\"resourceGroupName\":\"cryuan\",\"name\":\"uxzdxtay\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"cbjy\":{\"description\":\"pmrqobm\",\"displayName\":\"kknryrtihf\",\"documentationUrl\":\"ijbpzvgnwzsymgl\",\"dataSchemaUrl\":\"fcyzkohdbihanufh\"},\"tfwvukxgaudc\":{\"description\":\"git\",\"displayName\":\"qhabifpikxwcz\",\"documentationUrl\":\"scnpqxuhivy\",\"dataSchemaUrl\":\"iwbybrkxvdumjg\"},\"podmailzydehojwy\":{\"description\":\"nhsjcnyej\",\"displayName\":\"ryhtnapczwlokjy\",\"documentationUrl\":\"kkvnipjox\",\"dataSchemaUrl\":\"nchgej\"},\"wmfdatscmdvpjhul\":{\"description\":\"uxinpmqnjaq\",\"displayName\":\"xj\",\"documentationUrl\":\"r\",\"dataSchemaUrl\":\"vcputegj\"}}},\"source\":\"uvm\"},\"partnerDestinationInfo\":{\"endpointType\":\"WebHook\",\"azureSubscriptionId\":\"rwfndiod\",\"resourceGroupName\":\"slwejdpvw\",\"name\":\"oqpsoa\",\"endpointServiceContext\":\"tazak\",\"resourceMoveChangeHistory\":[{\"azureSubscriptionId\":\"hbcryffdfdosyge\",\"resourceGroupName\":\"aojakhmsbzjhcrz\",\"changedTimeUtc\":\"2021-03-26T06:15:53Z\"},{\"azureSubscriptionId\":\"hlxaolthqtr\",\"resourceGroupName\":\"jbp\",\"changedTimeUtc\":\"2021-11-13T22:11:47Z\"},{\"azureSubscriptionId\":\"inzgvfcj\",\"resourceGroupName\":\"zoxxjtf\",\"changedTimeUtc\":\"2021-02-16T06:48:17Z\"}]},\"messageForActivation\":\"wfzitonpeqfpjk\",\"provisioningState\":\"IdleDueToMirroredPartnerTopicDeletion\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-10-29T01:56:29Z\"}")
            .toObject(ChannelProperties.class);
        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, model.channelType());
        Assertions.assertEquals("sjtxukcdmp", model.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("cryuan", model.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("uxzdxtay", model.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("pmrqobm",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").description());
        Assertions.assertEquals("kknryrtihf",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").displayName());
        Assertions.assertEquals("ijbpzvgnwzsymgl",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").documentationUrl());
        Assertions.assertEquals("fcyzkohdbihanufh",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").dataSchemaUrl());
        Assertions.assertEquals("uvm", model.partnerTopicInfo().source());
        Assertions.assertEquals("rwfndiod", model.partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("slwejdpvw", model.partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("oqpsoa", model.partnerDestinationInfo().name());
        Assertions.assertEquals("tazak", model.partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("hbcryffdfdosyge",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).azureSubscriptionId());
        Assertions.assertEquals("aojakhmsbzjhcrz",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T06:15:53Z"),
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("wfzitonpeqfpjk", model.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.IDLE_DUE_TO_MIRRORED_PARTNER_TOPIC_DELETION,
            model.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, model.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T01:56:29Z"), model.expirationTimeIfNotActivatedUtc());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelProperties model = new ChannelProperties().withChannelType(ChannelType.PARTNER_DESTINATION)
            .withPartnerTopicInfo(new PartnerTopicInfo().withAzureSubscriptionId("sjtxukcdmp")
                .withResourceGroupName("cryuan")
                .withName("uxzdxtay")
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("cbjy",
                        new InlineEventProperties().withDescription("pmrqobm")
                            .withDisplayName("kknryrtihf")
                            .withDocumentationUrl("ijbpzvgnwzsymgl")
                            .withDataSchemaUrl("fcyzkohdbihanufh"),
                        "tfwvukxgaudc",
                        new InlineEventProperties().withDescription("git")
                            .withDisplayName("qhabifpikxwcz")
                            .withDocumentationUrl("scnpqxuhivy")
                            .withDataSchemaUrl("iwbybrkxvdumjg"),
                        "podmailzydehojwy",
                        new InlineEventProperties().withDescription("nhsjcnyej")
                            .withDisplayName("ryhtnapczwlokjy")
                            .withDocumentationUrl("kkvnipjox")
                            .withDataSchemaUrl("nchgej"),
                        "wmfdatscmdvpjhul",
                        new InlineEventProperties().withDescription("uxinpmqnjaq")
                            .withDisplayName("xj")
                            .withDocumentationUrl("r")
                            .withDataSchemaUrl("vcputegj"))))
                .withSource("uvm"))
            .withPartnerDestinationInfo(new WebhookPartnerDestinationInfo().withAzureSubscriptionId("rwfndiod")
                .withResourceGroupName("slwejdpvw")
                .withName("oqpsoa")
                .withEndpointServiceContext("tazak")
                .withResourceMoveChangeHistory(Arrays.asList(
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("hbcryffdfdosyge")
                        .withResourceGroupName("aojakhmsbzjhcrz")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-03-26T06:15:53Z")),
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("hlxaolthqtr")
                        .withResourceGroupName("jbp")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-11-13T22:11:47Z")),
                    new ResourceMoveChangeHistory().withAzureSubscriptionId("inzgvfcj")
                        .withResourceGroupName("zoxxjtf")
                        .withChangedTimeUtc(OffsetDateTime.parse("2021-02-16T06:48:17Z")))))
            .withMessageForActivation("wfzitonpeqfpjk")
            .withProvisioningState(ChannelProvisioningState.IDLE_DUE_TO_MIRRORED_PARTNER_TOPIC_DELETION)
            .withReadinessState(ReadinessState.ACTIVATED)
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-10-29T01:56:29Z"));
        model = BinaryData.fromObject(model).toObject(ChannelProperties.class);
        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, model.channelType());
        Assertions.assertEquals("sjtxukcdmp", model.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("cryuan", model.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("uxzdxtay", model.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("pmrqobm",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").description());
        Assertions.assertEquals("kknryrtihf",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").displayName());
        Assertions.assertEquals("ijbpzvgnwzsymgl",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").documentationUrl());
        Assertions.assertEquals("fcyzkohdbihanufh",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("cbjy").dataSchemaUrl());
        Assertions.assertEquals("uvm", model.partnerTopicInfo().source());
        Assertions.assertEquals("rwfndiod", model.partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("slwejdpvw", model.partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("oqpsoa", model.partnerDestinationInfo().name());
        Assertions.assertEquals("tazak", model.partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("hbcryffdfdosyge",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).azureSubscriptionId());
        Assertions.assertEquals("aojakhmsbzjhcrz",
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-26T06:15:53Z"),
            model.partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("wfzitonpeqfpjk", model.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.IDLE_DUE_TO_MIRRORED_PARTNER_TOPIC_DELETION,
            model.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, model.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-29T01:56:29Z"), model.expirationTimeIfNotActivatedUtc());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
