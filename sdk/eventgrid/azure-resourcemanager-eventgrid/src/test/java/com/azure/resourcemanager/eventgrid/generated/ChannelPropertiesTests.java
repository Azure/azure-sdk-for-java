// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ChannelProperties;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelProperties model = BinaryData.fromString(
            "{\"channelType\":\"PartnerTopic\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"dkfo\",\"resourceGroupName\":\"nygj\",\"name\":\"jddeqsrdeupewnw\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"arcryuanzwuxzdxt\":{\"description\":\"flusarhmof\",\"displayName\":\"hs\",\"documentationUrl\":\"urkdtmlx\",\"dataSchemaUrl\":\"kuksjtxukcdm\"}}},\"source\":\"rlhm\"},\"messageForActivation\":\"fp\",\"provisioningState\":\"Updating\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-02-24T20:47:16Z\"}")
            .toObject(ChannelProperties.class);
        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, model.channelType());
        Assertions.assertEquals("dkfo", model.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("nygj", model.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("jddeqsrdeupewnw", model.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("flusarhmof",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").description());
        Assertions.assertEquals("hs",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").displayName());
        Assertions.assertEquals("urkdtmlx",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").documentationUrl());
        Assertions.assertEquals("kuksjtxukcdm",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").dataSchemaUrl());
        Assertions.assertEquals("rlhm", model.partnerTopicInfo().source());
        Assertions.assertEquals("fp", model.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, model.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-24T20:47:16Z"), model.expirationTimeIfNotActivatedUtc());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelProperties model = new ChannelProperties().withChannelType(ChannelType.PARTNER_TOPIC)
            .withPartnerTopicInfo(new PartnerTopicInfo().withAzureSubscriptionId("dkfo")
                .withResourceGroupName("nygj")
                .withName("jddeqsrdeupewnw")
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("arcryuanzwuxzdxt",
                        new InlineEventProperties().withDescription("flusarhmof")
                            .withDisplayName("hs")
                            .withDocumentationUrl("urkdtmlx")
                            .withDataSchemaUrl("kuksjtxukcdm"))))
                .withSource("rlhm"))
            .withMessageForActivation("fp")
            .withProvisioningState(ChannelProvisioningState.UPDATING)
            .withReadinessState(ReadinessState.ACTIVATED)
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-02-24T20:47:16Z"));
        model = BinaryData.fromObject(model).toObject(ChannelProperties.class);
        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, model.channelType());
        Assertions.assertEquals("dkfo", model.partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("nygj", model.partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("jddeqsrdeupewnw", model.partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("flusarhmof",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").description());
        Assertions.assertEquals("hs",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").displayName());
        Assertions.assertEquals("urkdtmlx",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").documentationUrl());
        Assertions.assertEquals("kuksjtxukcdm",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("arcryuanzwuxzdxt").dataSchemaUrl());
        Assertions.assertEquals("rlhm", model.partnerTopicInfo().source());
        Assertions.assertEquals("fp", model.messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, model.readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-24T20:47:16Z"), model.expirationTimeIfNotActivatedUtc());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
