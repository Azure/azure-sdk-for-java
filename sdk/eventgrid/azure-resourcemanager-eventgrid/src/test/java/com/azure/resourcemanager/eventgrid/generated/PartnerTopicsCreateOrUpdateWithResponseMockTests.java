// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"b4e7b9a6-ec84-4a3c-b3bb-9d0c8a99cdab\",\"source\":\"tungbsoljckmiigz\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"lqcwnynll\":{\"description\":\"dsk\",\"displayName\":\"tiiqqcqikclsmaln\",\"documentationUrl\":\"woykdnonaaxwm\",\"dataSchemaUrl\":\"ru\"},\"icvnpvvdh\":{\"description\":\"q\",\"displayName\":\"bgvsbtsertoxadh\",\"documentationUrl\":\"vjhxmnrqst\",\"dataSchemaUrl\":\"metwml\"},\"ybfzdqekivycp\":{\"description\":\"naqyqipslzmvcds\",\"displayName\":\"wbitekdtfob\",\"documentationUrl\":\"iy\",\"dataSchemaUrl\":\"qich\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-11-17T03:47:56Z\",\"provisioningState\":\"Creating\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"rqtbhtrezpzl\",\"messageForActivation\":\"yfmx\"},\"identity\":{\"type\":\"None\",\"principalId\":\"kgilnoudccgnd\",\"tenantId\":\"dpriggqq\",\"userAssignedIdentities\":{\"ujcyohigimwdc\":{\"principalId\":\"cbuulpyufl\",\"clientId\":\"fsh\"},\"rzwimbzayspz\":{\"principalId\":\"lkq\",\"clientId\":\"vkixnmbzmecu\"}}},\"location\":\"rietvfp\",\"tags\":{\"gschnzrsbk\":\"zxplgtpvdvatlz\",\"ws\":\"zovlzdmnfm\"},\"id\":\"afofu\",\"name\":\"orimmo\",\"type\":\"zwdehkkmvhz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PartnerTopic response = manager.partnerTopics()
            .define("aix")
            .withRegion("czcxdfw")
            .withExistingResourceGroup("yfozkbnzxbypfqp")
            .withTags(mapOf("lxrljphraspifl", "yf", "fgsmdrjuqb", "imixlmdbgice"))
            .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                .withPrincipalId("qmkw")
                .withTenantId("vcwloqd")
                .withUserAssignedIdentities(mapOf("tkwppthuzd",
                    new UserIdentityProperties().withPrincipalId("uxxrwzobuzms").withClientId("amt"), "loamfmxtllfltym",
                    new UserIdentityProperties().withPrincipalId("mimrljdpoqfxyemh").withClientId("tbaewhte"), "irw",
                    new UserIdentityProperties().withPrincipalId("nrrfijhggabqb").withClientId("mkli"), "ddtullygta",
                    new UserIdentityProperties().withPrincipalId("ffhsdpzouhk").withClientId("rxqwqnjxrd"))))
            .withPartnerRegistrationImmutableId(UUID.fromString("0d4b180a-a06e-4e35-9314-4d6cfa217bdb"))
            .withSource("kkderfrswq")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("djxh",
                    new InlineEventProperties().withDescription("g")
                        .withDisplayName("icwn")
                        .withDocumentationUrl("tfmcqbsudzpgc")
                        .withDataSchemaUrl("pgfqum"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-06-16T00:01:12Z"))
            .withActivationState(PartnerTopicActivationState.ACTIVATED)
            .withPartnerTopicFriendlyDescription("nrceqavfdbdfmmx")
            .withMessageForActivation("naj")
            .create();

        Assertions.assertEquals("rietvfp", response.location());
        Assertions.assertEquals("zxplgtpvdvatlz", response.tags().get("gschnzrsbk"));
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("kgilnoudccgnd", response.identity().principalId());
        Assertions.assertEquals("dpriggqq", response.identity().tenantId());
        Assertions.assertEquals("cbuulpyufl",
            response.identity().userAssignedIdentities().get("ujcyohigimwdc").principalId());
        Assertions.assertEquals("fsh", response.identity().userAssignedIdentities().get("ujcyohigimwdc").clientId());
        Assertions.assertEquals(UUID.fromString("b4e7b9a6-ec84-4a3c-b3bb-9d0c8a99cdab"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("tungbsoljckmiigz", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("dsk", response.eventTypeInfo().inlineEventTypes().get("lqcwnynll").description());
        Assertions.assertEquals("tiiqqcqikclsmaln",
            response.eventTypeInfo().inlineEventTypes().get("lqcwnynll").displayName());
        Assertions.assertEquals("woykdnonaaxwm",
            response.eventTypeInfo().inlineEventTypes().get("lqcwnynll").documentationUrl());
        Assertions.assertEquals("ru", response.eventTypeInfo().inlineEventTypes().get("lqcwnynll").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-17T03:47:56Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, response.activationState());
        Assertions.assertEquals("rqtbhtrezpzl", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("yfmx", response.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
