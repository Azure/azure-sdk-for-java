// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"90bb0e6f-9db9-41c3-bcf2-fa1d78821a2f\",\"source\":\"gzxlermkmerghski\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"f\":{\"description\":\"cbkfukd\",\"displayName\":\"qnv\",\"documentationUrl\":\"dydshk\",\"dataSchemaUrl\":\"fyaloowwzizzny\"},\"qpfzlpejtznxlue\":{\"description\":\"zstifgufyj\",\"displayName\":\"kqiyvnd\",\"documentationUrl\":\"kgwesy\",\"dataSchemaUrl\":\"qh\"},\"cumecsaaqg\":{\"description\":\"jqbbgsimwejlw\",\"displayName\":\"bpjzobdwbcpraswk\",\"documentationUrl\":\"ydtnaczkfwfatgaw\",\"dataSchemaUrl\":\"nskivdwgt\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-09-11T10:28:46Z\",\"provisioningState\":\"IdleDueToMirroredChannelResourceDeletion\",\"activationState\":\"NeverActivated\",\"partnerTopicFriendlyDescription\":\"sbskowkrbhz\",\"messageForActivation\":\"bkhtmqowiu\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"ucyhfaimq\",\"tenantId\":\"ruozkgyfp\",\"userAssignedIdentities\":{\"xvlzjxplhpevasyn\":{\"principalId\":\"gfmq\",\"clientId\":\"kk\"}}},\"location\":\"vzjyielb\",\"tags\":{\"nmpecqxgiqasifub\":\"vbqv\"},\"id\":\"snstl\",\"name\":\"wqpjnxjkhtupsvy\",\"type\":\"uweuiy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PartnerTopic response = manager.partnerTopics()
            .define("osnqliwkmzojfe")
            .withRegion("dhqnufbxweiib")
            .withExistingResourceGroup("ofnqhlbs")
            .withTags(mapOf("ybydhui", "jovf", "aorhjkehwvumo", "aouwudh", "ugejcvjkjyczcmt", "qircamqprlob"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withPrincipalId("pg")
                .withTenantId("qebmvrdjomlnwsb")
                .withUserAssignedIdentities(mapOf("oinmphymcqidklt",
                    new UserIdentityProperties().withPrincipalId("sflxkqesd").withClientId("dsbgzan"))))
            .withPartnerRegistrationImmutableId(UUID.fromString("231746ee-1140-4b42-9504-fe5bf76a39ab"))
            .withSource("htgmknazgbj")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("lna",
                    new InlineEventProperties().withDescription("sttcucrcmm")
                        .withDisplayName("xp")
                        .withDocumentationUrl("iwifhbk")
                        .withDataSchemaUrl("dttohq"),
                    "bun",
                    new InlineEventProperties().withDescription("tgs")
                        .withDisplayName("ikvllrhtpmgl")
                        .withDocumentationUrl("oi")
                        .withDataSchemaUrl("trawrqkza"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-04-11T13:49:27Z"))
            .withActivationState(PartnerTopicActivationState.ACTIVATED)
            .withPartnerTopicFriendlyDescription("wee")
            .withMessageForActivation("nejzltkaszfjsxs")
            .create();

        Assertions.assertEquals("vzjyielb", response.location());
        Assertions.assertEquals("vbqv", response.tags().get("nmpecqxgiqasifub"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("ucyhfaimq", response.identity().principalId());
        Assertions.assertEquals("ruozkgyfp", response.identity().tenantId());
        Assertions.assertEquals("gfmq",
            response.identity().userAssignedIdentities().get("xvlzjxplhpevasyn").principalId());
        Assertions.assertEquals("kk", response.identity().userAssignedIdentities().get("xvlzjxplhpevasyn").clientId());
        Assertions.assertEquals(UUID.fromString("90bb0e6f-9db9-41c3-bcf2-fa1d78821a2f"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("gzxlermkmerghski", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("cbkfukd", response.eventTypeInfo().inlineEventTypes().get("f").description());
        Assertions.assertEquals("qnv", response.eventTypeInfo().inlineEventTypes().get("f").displayName());
        Assertions.assertEquals("dydshk", response.eventTypeInfo().inlineEventTypes().get("f").documentationUrl());
        Assertions.assertEquals("fyaloowwzizzny", response.eventTypeInfo().inlineEventTypes().get("f").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-11T10:28:46Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.NEVER_ACTIVATED, response.activationState());
        Assertions.assertEquals("sbskowkrbhz", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("bkhtmqowiu", response.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
