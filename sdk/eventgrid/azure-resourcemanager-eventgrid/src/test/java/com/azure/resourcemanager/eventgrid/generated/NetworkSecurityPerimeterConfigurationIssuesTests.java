// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueSeverity;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssueType;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssues;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterConfigurationIssuesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterConfigurationIssues model = BinaryData.fromString(
            "{\"name\":\"hxuicbuewmrs\",\"properties\":{\"issueType\":\"MissingPerimeterConfiguration\",\"severity\":\"Error\",\"description\":\"rhwpus\",\"suggestedResourceIds\":[\"aqehg\",\"dohzjq\",\"tu\"],\"suggestedAccessRules\":[\"gebx\",\"cnwfepbnwgfmxjg\",\"g\",\"jbgdlfgtdysnaquf\"]}}")
            .toObject(NetworkSecurityPerimeterConfigurationIssues.class);
        Assertions.assertEquals("hxuicbuewmrs", model.name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.MISSING_PERIMETER_CONFIGURATION,
            model.issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR, model.severity());
        Assertions.assertEquals("rhwpus", model.description());
        Assertions.assertEquals("aqehg", model.suggestedResourceIds().get(0));
        Assertions.assertEquals("gebx", model.suggestedAccessRules().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterConfigurationIssues model
            = new NetworkSecurityPerimeterConfigurationIssues().withName("hxuicbuewmrs")
                .withIssueType(NetworkSecurityPerimeterConfigurationIssueType.MISSING_PERIMETER_CONFIGURATION)
                .withSeverity(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR).withDescription("rhwpus")
                .withSuggestedResourceIds(Arrays.asList("aqehg", "dohzjq", "tu"))
                .withSuggestedAccessRules(Arrays.asList("gebx", "cnwfepbnwgfmxjg", "g", "jbgdlfgtdysnaquf"));
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterConfigurationIssues.class);
        Assertions.assertEquals("hxuicbuewmrs", model.name());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueType.MISSING_PERIMETER_CONFIGURATION,
            model.issueType());
        Assertions.assertEquals(NetworkSecurityPerimeterConfigurationIssueSeverity.ERROR, model.severity());
        Assertions.assertEquals("rhwpus", model.description());
        Assertions.assertEquals("aqehg", model.suggestedResourceIds().get(0));
        Assertions.assertEquals("gebx", model.suggestedAccessRules().get(0));
    }
}
