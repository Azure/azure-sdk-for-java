// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ClientInner;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientsListResult;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClientsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClientsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"description\":\"lbjnpgacftadehx\",\"authenticationName\":\"tyfsoppusuesn\",\"clientCertificateAuthentication\":{\"validationScheme\":\"ThumbprintMatch\",\"allowedThumbprints\":[\"avo\"]},\"state\":\"Disabled\",\"attributes\":{\"ndnvo\":\"dataohctbqvudwx\",\"lazjdyggdtjixhbk\":\"datagujjugwdkcglh\"},\"provisioningState\":\"Failed\"},\"id\":\"wey\",\"name\":\"hmenevfyexfwhybc\",\"type\":\"bvyvdcsity\"},{\"properties\":{\"description\":\"amdecte\",\"authenticationName\":\"iqscjeypv\",\"clientCertificateAuthentication\":{\"validationScheme\":\"DnsMatchesAuthenticationName\",\"allowedThumbprints\":[\"q\",\"c\",\"refovgmkqsleyyvx\"]},\"state\":\"Disabled\",\"attributes\":{\"jh\":\"datacattpngjcrcczsq\"},\"provisioningState\":\"Canceled\"},\"id\":\"jvnysounqe\",\"name\":\"a\",\"type\":\"oaeupfhyhltrpmo\"},{\"properties\":{\"description\":\"cma\",\"authenticationName\":\"okth\",\"clientCertificateAuthentication\":{\"validationScheme\":\"SubjectMatchesAuthenticationName\",\"allowedThumbprints\":[\"dsfcpkvxodpuoz\",\"yzydagfuaxbezyi\",\"okktwhrdxw\",\"ywqsmbsurexim\"]},\"state\":\"Enabled\",\"attributes\":{\"i\":\"datafsfksymddyst\"},\"provisioningState\":\"Creating\"},\"id\":\"qyud\",\"name\":\"o\",\"type\":\"rq\"}],\"nextLink\":\"poczvyifqrvkdvjs\"}")
            .toObject(ClientsListResult.class);
        Assertions.assertEquals("lbjnpgacftadehx", model.value().get(0).description());
        Assertions.assertEquals("tyfsoppusuesn", model.value().get(0).authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.THUMBPRINT_MATCH,
            model.value().get(0).clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("avo",
            model.value().get(0).clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.DISABLED, model.value().get(0).state());
        Assertions.assertEquals("poczvyifqrvkdvjs", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClientsListResult model = new ClientsListResult().withValue(Arrays.asList(
            new ClientInner().withDescription("lbjnpgacftadehx")
                .withAuthenticationName("tyfsoppusuesn")
                .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                    .withValidationScheme(ClientCertificateValidationScheme.THUMBPRINT_MATCH)
                    .withAllowedThumbprints(Arrays.asList("avo")))
                .withState(ClientState.DISABLED)
                .withAttributes(mapOf("ndnvo", "dataohctbqvudwx", "lazjdyggdtjixhbk", "datagujjugwdkcglh")),
            new ClientInner().withDescription("amdecte")
                .withAuthenticationName("iqscjeypv")
                .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                    .withValidationScheme(ClientCertificateValidationScheme.DNS_MATCHES_AUTHENTICATION_NAME)
                    .withAllowedThumbprints(Arrays.asList("q", "c", "refovgmkqsleyyvx")))
                .withState(ClientState.DISABLED)
                .withAttributes(mapOf("jh", "datacattpngjcrcczsq")),
            new ClientInner().withDescription("cma")
                .withAuthenticationName("okth")
                .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                    .withValidationScheme(ClientCertificateValidationScheme.SUBJECT_MATCHES_AUTHENTICATION_NAME)
                    .withAllowedThumbprints(
                        Arrays.asList("dsfcpkvxodpuoz", "yzydagfuaxbezyi", "okktwhrdxw", "ywqsmbsurexim")))
                .withState(ClientState.ENABLED)
                .withAttributes(mapOf("i", "datafsfksymddyst"))))
            .withNextLink("poczvyifqrvkdvjs");
        model = BinaryData.fromObject(model).toObject(ClientsListResult.class);
        Assertions.assertEquals("lbjnpgacftadehx", model.value().get(0).description());
        Assertions.assertEquals("tyfsoppusuesn", model.value().get(0).authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.THUMBPRINT_MATCH,
            model.value().get(0).clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("avo",
            model.value().get(0).clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.DISABLED, model.value().get(0).state());
        Assertions.assertEquals("poczvyifqrvkdvjs", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
