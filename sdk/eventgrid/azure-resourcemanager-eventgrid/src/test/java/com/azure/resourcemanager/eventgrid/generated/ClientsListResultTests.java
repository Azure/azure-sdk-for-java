// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ClientInner;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import com.azure.resourcemanager.eventgrid.models.ClientsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClientsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClientsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"description\":\"skanyk\",\"authenticationName\":\"lcuiywgqywgndr\",\"clientCertificateAuthentication\":{\"validationScheme\":\"IpMatchesAuthenticationName\",\"allowedThumbprints\":[\"pphrcgynco\",\"pec\",\"vmmcoofs\"]},\"state\":\"Enabled\",\"attributes\":{\"w\":\"datagbmqjqabcypmiv\"},\"provisioningState\":\"Succeeded\"},\"id\":\"ccfwnfnbacfion\",\"name\":\"ebxetqgtzxdp\",\"type\":\"qbqqwxr\"},{\"properties\":{\"description\":\"al\",\"authenticationName\":\"wsubisnja\",\"clientCertificateAuthentication\":{\"validationScheme\":\"EmailMatchesAuthenticationName\",\"allowedThumbprints\":[\"zscxaqwo\",\"chcbonqvpkvlrxnj\"]},\"state\":\"Enabled\",\"attributes\":{\"enjbdlwtgrhp\":\"datapheoflokeyy\",\"umasxazjpq\":\"datajp\",\"ualhbxxhejj\":\"datae\",\"ynpwlbj\":\"datazvdudgwdslfhotwm\"},\"provisioningState\":\"Failed\"},\"id\":\"cftadeh\",\"name\":\"nltyfsoppusuesnz\",\"type\":\"dejbavo\"}],\"nextLink\":\"zdmohctbqvu\"}")
            .toObject(ClientsListResult.class);
        Assertions.assertEquals("skanyk", model.value().get(0).description());
        Assertions.assertEquals("lcuiywgqywgndr", model.value().get(0).authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME,
            model.value().get(0).clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("pphrcgynco",
            model.value().get(0).clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, model.value().get(0).state());
        Assertions.assertEquals("zdmohctbqvu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClientsListResult model
            = new ClientsListResult()
                .withValue(
                    Arrays
                        .asList(
                            new ClientInner().withDescription("skanyk")
                                .withAuthenticationName("lcuiywgqywgndr")
                                .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                                    .withValidationScheme(
                                        ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME)
                                    .withAllowedThumbprints(Arrays.asList("pphrcgynco", "pec", "vmmcoofs")))
                                .withState(ClientState.ENABLED)
                                .withAttributes(mapOf("w", "datagbmqjqabcypmiv")),
                            new ClientInner().withDescription("al")
                                .withAuthenticationName("wsubisnja")
                                .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                                    .withValidationScheme(
                                        ClientCertificateValidationScheme.EMAIL_MATCHES_AUTHENTICATION_NAME)
                                    .withAllowedThumbprints(Arrays.asList("zscxaqwo", "chcbonqvpkvlrxnj")))
                                .withState(ClientState.ENABLED)
                                .withAttributes(mapOf("enjbdlwtgrhp", "datapheoflokeyy", "umasxazjpq", "datajp",
                                    "ualhbxxhejj", "datae", "ynpwlbj", "datazvdudgwdslfhotwm"))))
                .withNextLink("zdmohctbqvu");
        model = BinaryData.fromObject(model).toObject(ClientsListResult.class);
        Assertions.assertEquals("skanyk", model.value().get(0).description());
        Assertions.assertEquals("lcuiywgqywgndr", model.value().get(0).authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME,
            model.value().get(0).clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("pphrcgynco",
            model.value().get(0).clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, model.value().get(0).state());
        Assertions.assertEquals("zdmohctbqvu", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
