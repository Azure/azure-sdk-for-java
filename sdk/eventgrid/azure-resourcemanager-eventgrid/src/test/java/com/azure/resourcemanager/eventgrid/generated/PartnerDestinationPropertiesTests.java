// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerDestinationProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerDestinationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerDestinationProperties model = BinaryData.fromString(
            "{\"partnerRegistrationImmutableId\":\"97002a9f-e01f-45b4-b30d-a3fe37a8fef7\",\"endpointServiceContext\":\"ecxn\",\"expirationTimeIfNotActivatedUtc\":\"2021-02-18T17:11:23Z\",\"provisioningState\":\"Creating\",\"activationState\":\"NeverActivated\",\"endpointBaseUrl\":\"zmlqtmldgxo\",\"messageForActivation\":\"irclnpk\"}")
            .toObject(PartnerDestinationProperties.class);
        Assertions.assertEquals(UUID.fromString("97002a9f-e01f-45b4-b30d-a3fe37a8fef7"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("ecxn", model.endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-18T17:11:23Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.NEVER_ACTIVATED, model.activationState());
        Assertions.assertEquals("zmlqtmldgxo", model.endpointBaseUrl());
        Assertions.assertEquals("irclnpk", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerDestinationProperties model = new PartnerDestinationProperties()
            .withPartnerRegistrationImmutableId(UUID.fromString("97002a9f-e01f-45b4-b30d-a3fe37a8fef7"))
            .withEndpointServiceContext("ecxn")
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-02-18T17:11:23Z"))
            .withActivationState(PartnerDestinationActivationState.NEVER_ACTIVATED)
            .withEndpointBaseUrl("zmlqtmldgxo")
            .withMessageForActivation("irclnpk");
        model = BinaryData.fromObject(model).toObject(PartnerDestinationProperties.class);
        Assertions.assertEquals(UUID.fromString("97002a9f-e01f-45b4-b30d-a3fe37a8fef7"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("ecxn", model.endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-18T17:11:23Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.NEVER_ACTIVATED, model.activationState());
        Assertions.assertEquals("zmlqtmldgxo", model.endpointBaseUrl());
        Assertions.assertEquals("irclnpk", model.messageForActivation());
    }
}
