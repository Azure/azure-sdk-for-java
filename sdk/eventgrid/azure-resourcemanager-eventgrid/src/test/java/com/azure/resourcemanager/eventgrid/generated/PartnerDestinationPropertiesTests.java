// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerDestinationProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerDestinationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerDestinationProperties model = BinaryData.fromString(
            "{\"partnerRegistrationImmutableId\":\"b0021b02-58ae-42e0-bfea-9a5b76f953d7\",\"endpointServiceContext\":\"epr\",\"expirationTimeIfNotActivatedUtc\":\"2021-09-19T16:29:02Z\",\"provisioningState\":\"Succeeded\",\"activationState\":\"Activated\",\"endpointBaseUrl\":\"zdmovzv\",\"messageForActivation\":\"aawzqadfl\"}")
            .toObject(PartnerDestinationProperties.class);
        Assertions.assertEquals(UUID.fromString("b0021b02-58ae-42e0-bfea-9a5b76f953d7"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("epr", model.endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T16:29:02Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("zdmovzv", model.endpointBaseUrl());
        Assertions.assertEquals("aawzqadfl", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerDestinationProperties model = new PartnerDestinationProperties()
            .withPartnerRegistrationImmutableId(UUID.fromString("b0021b02-58ae-42e0-bfea-9a5b76f953d7"))
            .withEndpointServiceContext("epr")
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-09-19T16:29:02Z"))
            .withActivationState(PartnerDestinationActivationState.ACTIVATED)
            .withEndpointBaseUrl("zdmovzv")
            .withMessageForActivation("aawzqadfl");
        model = BinaryData.fromObject(model).toObject(PartnerDestinationProperties.class);
        Assertions.assertEquals(UUID.fromString("b0021b02-58ae-42e0-bfea-9a5b76f953d7"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("epr", model.endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T16:29:02Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("zdmovzv", model.endpointBaseUrl());
        Assertions.assertEquals("aawzqadfl", model.messageForActivation());
    }
}
