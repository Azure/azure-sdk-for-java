// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerTopicInner;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"787f5c9c-d5ae-4739-9daf-da62fbffb3b2\",\"source\":\"hohsd\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"ufcohdxbz\":{},\"mcmuapc\":{}}},\"expirationTimeIfNotActivatedUtc\":\"2021-01-21T06:48:45Z\",\"provisioningState\":\"IdleDueToMirroredChannelResourceDeletion\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"qxeysko\",\"messageForActivation\":\"zinkfkbgbzbowxeq\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"gvkzqkjjeokbze\",\"tenantId\":\"zrxcczurt\",\"userAssignedIdentities\":{\"gnzvdfbzdixzm\":{\"principalId\":\"q\",\"clientId\":\"kwv\"},\"jptmcgsbost\":{\"principalId\":\"noda\",\"clientId\":\"pqhe\"},\"iojlvfhrb\":{\"principalId\":\"lnd\",\"clientId\":\"tutmzl\"},\"rsnm\":{\"principalId\":\"neqvcwwyyurmo\",\"clientId\":\"ppr\"}}},\"location\":\"k\",\"tags\":{\"pcpil\":\"ejnhlbkpb\",\"hol\":\"hahzvechndbnwi\"},\"id\":\"wjwiuub\",\"name\":\"efqsfapaqtferrqw\",\"type\":\"x\"},{\"properties\":{\"partnerRegistrationImmutableId\":\"3d5ea47f-2674-4ca1-aa89-6cf509a7152d\",\"source\":\"xap\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"nobpudcdabtqwpw\":{},\"awbzasqb\":{}}},\"expirationTimeIfNotActivatedUtc\":\"2021-02-26T06:14:46Z\",\"provisioningState\":\"Updating\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"xa\",\"messageForActivation\":\"uy\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"daultxijjumfq\",\"tenantId\":\"z\",\"userAssignedIdentities\":{\"bjwgnyfus\":{\"principalId\":\"mcjn\",\"clientId\":\"qdqx\"},\"l\":{\"principalId\":\"svtui\",\"clientId\":\"hajqglcfh\"},\"zn\":{\"principalId\":\"ryxynqnzrd\",\"clientId\":\"ovw\"}}},\"location\":\"tgoe\",\"tags\":{\"bp\":\"b\",\"slkvntjl\":\"hv\"},\"id\":\"igjkskyrio\",\"name\":\"vzidsxwaab\",\"type\":\"mifrygznmma\"}],\"nextLink\":\"izkzobgo\"}")
            .toObject(PartnerTopicsListResult.class);
        Assertions.assertEquals("k", model.value().get(0).location());
        Assertions.assertEquals("ejnhlbkpb", model.value().get(0).tags().get("pcpil"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("gvkzqkjjeokbze", model.value().get(0).identity().principalId());
        Assertions.assertEquals("zrxcczurt", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("q",
            model.value().get(0).identity().userAssignedIdentities().get("gnzvdfbzdixzm").principalId());
        Assertions.assertEquals("kwv",
            model.value().get(0).identity().userAssignedIdentities().get("gnzvdfbzdixzm").clientId());
        Assertions.assertEquals(UUID.fromString("787f5c9c-d5ae-4739-9daf-da62fbffb3b2"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("hohsd", model.value().get(0).source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T06:48:45Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.value().get(0).activationState());
        Assertions.assertEquals("qxeysko", model.value().get(0).partnerTopicFriendlyDescription());
        Assertions.assertEquals("zinkfkbgbzbowxeq", model.value().get(0).messageForActivation());
        Assertions.assertEquals("izkzobgo", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicsListResult model
            = new PartnerTopicsListResult().withValue(Arrays.asList(
                new PartnerTopicInner().withLocation("k")
                    .withTags(mapOf("pcpil", "ejnhlbkpb", "hol", "hahzvechndbnwi"))
                    .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED)
                        .withPrincipalId("gvkzqkjjeokbze")
                        .withTenantId("zrxcczurt")
                        .withUserAssignedIdentities(mapOf(
                            "gnzvdfbzdixzm", new UserIdentityProperties().withPrincipalId("q").withClientId("kwv"),
                            "jptmcgsbost", new UserIdentityProperties().withPrincipalId("noda").withClientId("pqhe"),
                            "iojlvfhrb", new UserIdentityProperties().withPrincipalId("lnd").withClientId("tutmzl"),
                            "rsnm", new UserIdentityProperties().withPrincipalId("neqvcwwyyurmo").withClientId("ppr"))))
                    .withPartnerRegistrationImmutableId(UUID.fromString("787f5c9c-d5ae-4739-9daf-da62fbffb3b2"))
                    .withSource("hohsd")
                    .withEventTypeInfo(
                        new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                            .withInlineEventTypes(mapOf("ufcohdxbz", new InlineEventProperties(), "mcmuapc",
                                new InlineEventProperties())))
                    .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-01-21T06:48:45Z"))
                    .withActivationState(PartnerTopicActivationState.ACTIVATED)
                    .withPartnerTopicFriendlyDescription("qxeysko")
                    .withMessageForActivation("zinkfkbgbzbowxeq"),
                new PartnerTopicInner().withLocation("tgoe")
                    .withTags(mapOf("bp", "b", "slkvntjl", "hv"))
                    .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withPrincipalId("daultxijjumfq")
                        .withTenantId("z")
                        .withUserAssignedIdentities(mapOf("bjwgnyfus",
                            new UserIdentityProperties().withPrincipalId("mcjn").withClientId("qdqx"), "l",
                            new UserIdentityProperties().withPrincipalId("svtui").withClientId("hajqglcfh"), "zn",
                            new UserIdentityProperties().withPrincipalId("ryxynqnzrd").withClientId("ovw"))))
                    .withPartnerRegistrationImmutableId(UUID.fromString("3d5ea47f-2674-4ca1-aa89-6cf509a7152d"))
                    .withSource("xap")
                    .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                        .withInlineEventTypes(mapOf("nobpudcdabtqwpw", new InlineEventProperties(), "awbzasqb",
                            new InlineEventProperties())))
                    .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-02-26T06:14:46Z"))
                    .withActivationState(PartnerTopicActivationState.DEACTIVATED)
                    .withPartnerTopicFriendlyDescription("xa")
                    .withMessageForActivation("uy")))
                .withNextLink("izkzobgo");
        model = BinaryData.fromObject(model).toObject(PartnerTopicsListResult.class);
        Assertions.assertEquals("k", model.value().get(0).location());
        Assertions.assertEquals("ejnhlbkpb", model.value().get(0).tags().get("pcpil"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("gvkzqkjjeokbze", model.value().get(0).identity().principalId());
        Assertions.assertEquals("zrxcczurt", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("q",
            model.value().get(0).identity().userAssignedIdentities().get("gnzvdfbzdixzm").principalId());
        Assertions.assertEquals("kwv",
            model.value().get(0).identity().userAssignedIdentities().get("gnzvdfbzdixzm").clientId());
        Assertions.assertEquals(UUID.fromString("787f5c9c-d5ae-4739-9daf-da62fbffb3b2"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("hohsd", model.value().get(0).source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-21T06:48:45Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.value().get(0).activationState());
        Assertions.assertEquals("qxeysko", model.value().get(0).partnerTopicFriendlyDescription());
        Assertions.assertEquals("zinkfkbgbzbowxeq", model.value().get(0).messageForActivation());
        Assertions.assertEquals("izkzobgo", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
