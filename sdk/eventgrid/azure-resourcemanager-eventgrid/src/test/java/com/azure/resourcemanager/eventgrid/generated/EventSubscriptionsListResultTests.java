// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.EventSubscriptionInner;
import com.azure.resourcemanager.eventgrid.models.AdvancedFilter;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventDeliverySchema;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionFilter;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionsListResult;
import com.azure.resourcemanager.eventgrid.models.RetryPolicy;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EventSubscriptionsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventSubscriptionsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"topic\":\"jylwbtlhflsj\",\"provisioningState\":\"Failed\",\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"bgofeljag\"},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}},\"filter\":{\"subjectBeginsWith\":\"hldvriii\",\"subjectEndsWith\":\"nalghfkvtvsexso\",\"includedEventTypes\":[\"luqhhahhxv\"],\"isSubjectCaseSensitive\":false,\"enableAdvancedFilteringOnArrays\":true,\"advancedFilters\":[{\"operatorType\":\"AdvancedFilter\"},{\"operatorType\":\"AdvancedFilter\"},{\"operatorType\":\"AdvancedFilter\"}]},\"labels\":[\"wws\"],\"expirationTimeUtc\":\"2021-03-06T02:41:14Z\",\"eventDeliverySchema\":\"CustomInputSchema\",\"retryPolicy\":{\"maxDeliveryAttempts\":1926831328,\"eventTimeToLiveInMinutes\":1227202155},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"},\"deadLetterWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"kndxdigrjgu\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}}},\"id\":\"dmsyqtfihwhbo\",\"name\":\"z\",\"type\":\"ngamvpphosz\"}],\"nextLink\":\"udphqamvdkfwyn\"}")
            .toObject(EventSubscriptionsListResult.class);
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.value().get(0).deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("bgofeljag",
            model.value().get(0).deliveryWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("hldvriii", model.value().get(0).filter().subjectBeginsWith());
        Assertions.assertEquals("nalghfkvtvsexso", model.value().get(0).filter().subjectEndsWith());
        Assertions.assertEquals("luqhhahhxv", model.value().get(0).filter().includedEventTypes().get(0));
        Assertions.assertEquals(false, model.value().get(0).filter().isSubjectCaseSensitive());
        Assertions.assertEquals(true, model.value().get(0).filter().enableAdvancedFilteringOnArrays());
        Assertions.assertEquals("wws", model.value().get(0).labels().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T02:41:14Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals(EventDeliverySchema.CUSTOM_INPUT_SCHEMA, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals(1926831328, model.value().get(0).retryPolicy().maxDeliveryAttempts());
        Assertions.assertEquals(1227202155, model.value().get(0).retryPolicy().eventTimeToLiveInMinutes());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.value().get(0).deadLetterWithResourceIdentity().identity().type());
        Assertions.assertEquals("kndxdigrjgu",
            model.value().get(0).deadLetterWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("udphqamvdkfwyn", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventSubscriptionsListResult model
            = new EventSubscriptionsListResult().withValue(
                Arrays.asList(new EventSubscriptionInner().withDestination(new EventSubscriptionDestination())
                    .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentity("bgofeljag"))
                        .withDestination(new EventSubscriptionDestination()))
                    .withFilter(new EventSubscriptionFilter().withSubjectBeginsWith("hldvriii")
                        .withSubjectEndsWith("nalghfkvtvsexso").withIncludedEventTypes(Arrays.asList("luqhhahhxv"))
                        .withIsSubjectCaseSensitive(false).withEnableAdvancedFilteringOnArrays(true)
                        .withAdvancedFilters(
                            Arrays.asList(new AdvancedFilter(), new AdvancedFilter(), new AdvancedFilter())))
                    .withLabels(Arrays.asList("wws"))
                    .withExpirationTimeUtc(OffsetDateTime.parse("2021-03-06T02:41:14Z"))
                    .withEventDeliverySchema(EventDeliverySchema.CUSTOM_INPUT_SCHEMA)
                    .withRetryPolicy(
                        new RetryPolicy().withMaxDeliveryAttempts(1926831328).withEventTimeToLiveInMinutes(1227202155))
                    .withDeadLetterDestination(new DeadLetterDestination())
                    .withDeadLetterWithResourceIdentity(new DeadLetterWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentity("kndxdigrjgu"))
                        .withDeadLetterDestination(new DeadLetterDestination()))))
                .withNextLink("udphqamvdkfwyn");
        model = BinaryData.fromObject(model).toObject(EventSubscriptionsListResult.class);
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.value().get(0).deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("bgofeljag",
            model.value().get(0).deliveryWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("hldvriii", model.value().get(0).filter().subjectBeginsWith());
        Assertions.assertEquals("nalghfkvtvsexso", model.value().get(0).filter().subjectEndsWith());
        Assertions.assertEquals("luqhhahhxv", model.value().get(0).filter().includedEventTypes().get(0));
        Assertions.assertEquals(false, model.value().get(0).filter().isSubjectCaseSensitive());
        Assertions.assertEquals(true, model.value().get(0).filter().enableAdvancedFilteringOnArrays());
        Assertions.assertEquals("wws", model.value().get(0).labels().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-06T02:41:14Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals(EventDeliverySchema.CUSTOM_INPUT_SCHEMA, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals(1926831328, model.value().get(0).retryPolicy().maxDeliveryAttempts());
        Assertions.assertEquals(1227202155, model.value().get(0).retryPolicy().eventTimeToLiveInMinutes());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.value().get(0).deadLetterWithResourceIdentity().identity().type());
        Assertions.assertEquals("kndxdigrjgu",
            model.value().get(0).deadLetterWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("udphqamvdkfwyn", model.nextLink());
    }
}
