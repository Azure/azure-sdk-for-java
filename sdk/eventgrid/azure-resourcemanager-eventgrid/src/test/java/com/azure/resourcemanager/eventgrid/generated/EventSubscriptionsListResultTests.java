// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.EventSubscriptionInner;
import com.azure.resourcemanager.eventgrid.models.AdvancedFilter;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventDeliverySchema;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionFilter;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionsListResult;
import com.azure.resourcemanager.eventgrid.models.HybridConnectionEventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.NamespaceTopicEventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.RetryPolicy;
import com.azure.resourcemanager.eventgrid.models.ServiceBusQueueEventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.StorageBlobDeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.StorageQueueEventSubscriptionDestination;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EventSubscriptionsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventSubscriptionsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"topic\":\"whccs\",\"provisioningState\":\"Failed\",\"destination\":{\"endpointType\":\"ServiceBusQueue\"},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"cywuggwol\"},\"destination\":{\"endpointType\":\"StorageQueue\"}},\"filter\":{\"subjectBeginsWith\":\"emh\",\"subjectEndsWith\":\"rsbrgzdwm\",\"includedEventTypes\":[\"ypqwdxggiccc\",\"xqhuexm\",\"ttlstvlzywemhz\",\"ncsdtclusiyp\"],\"isSubjectCaseSensitive\":true,\"enableAdvancedFilteringOnArrays\":false,\"advancedFilters\":[{\"operatorType\":\"AdvancedFilter\"}]},\"labels\":[\"lfeadcygq\"],\"expirationTimeUtc\":\"2021-11-04T08:30:12Z\",\"eventDeliverySchema\":\"CustomInputSchema\",\"retryPolicy\":{\"maxDeliveryAttempts\":600272259,\"eventTimeToLiveInMinutes\":435176888},\"deadLetterDestination\":{\"endpointType\":\"StorageBlob\"},\"deadLetterWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"p\"},\"deadLetterDestination\":{\"endpointType\":\"StorageBlob\"}}},\"id\":\"pqvujzraehtwdwrf\",\"name\":\"swibyr\",\"type\":\"dl\"},{\"properties\":{\"topic\":\"hfwpracstwit\",\"provisioningState\":\"Deleting\",\"destination\":{\"endpointType\":\"HybridConnection\"},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"pnmdyodnwzxltjcv\"},\"destination\":{\"endpointType\":\"NamespaceTopic\"}},\"filter\":{\"subjectBeginsWith\":\"gcxn\",\"subjectEndsWith\":\"vwxqibyqunyo\",\"includedEventTypes\":[\"lmdjrkvfgbvfvpdb\",\"daciz\"],\"isSubjectCaseSensitive\":false,\"enableAdvancedFilteringOnArrays\":false,\"advancedFilters\":[{\"operatorType\":\"AdvancedFilter\"},{\"operatorType\":\"AdvancedFilter\"}]},\"labels\":[\"bdeibqipqk\",\"hvxndzwmkrefajpj\"],\"expirationTimeUtc\":\"2021-01-18T23:13:43Z\",\"eventDeliverySchema\":\"CustomInputSchema\",\"retryPolicy\":{\"maxDeliveryAttempts\":1457145453,\"eventTimeToLiveInMinutes\":234711061},\"deadLetterDestination\":{\"endpointType\":\"StorageBlob\"},\"deadLetterWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"zs\"},\"deadLetterDestination\":{\"endpointType\":\"StorageBlob\"}}},\"id\":\"systawfsdjp\",\"name\":\"kvpbjxbkzbz\",\"type\":\"dvncjabudurgk\"}],\"nextLink\":\"mokzhjjklf\"}")
            .toObject(EventSubscriptionsListResult.class);
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.value().get(0).deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("cywuggwol",
            model.value().get(0).deliveryWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("emh", model.value().get(0).filter().subjectBeginsWith());
        Assertions.assertEquals("rsbrgzdwm", model.value().get(0).filter().subjectEndsWith());
        Assertions.assertEquals("ypqwdxggiccc", model.value().get(0).filter().includedEventTypes().get(0));
        Assertions.assertEquals(true, model.value().get(0).filter().isSubjectCaseSensitive());
        Assertions.assertEquals(false, model.value().get(0).filter().enableAdvancedFilteringOnArrays());
        Assertions.assertEquals("lfeadcygq", model.value().get(0).labels().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:30:12Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals(EventDeliverySchema.CUSTOM_INPUT_SCHEMA, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals(600272259, model.value().get(0).retryPolicy().maxDeliveryAttempts());
        Assertions.assertEquals(435176888, model.value().get(0).retryPolicy().eventTimeToLiveInMinutes());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.value().get(0).deadLetterWithResourceIdentity().identity().type());
        Assertions.assertEquals("p",
            model.value().get(0).deadLetterWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("mokzhjjklf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventSubscriptionsListResult model
            = new EventSubscriptionsListResult()
                .withValue(Arrays.asList(
                    new EventSubscriptionInner().withDestination(new ServiceBusQueueEventSubscriptionDestination())
                        .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                            .withIdentity(
                                new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                    .withUserAssignedIdentity("cywuggwol"))
                            .withDestination(new StorageQueueEventSubscriptionDestination()))
                        .withFilter(new EventSubscriptionFilter().withSubjectBeginsWith("emh")
                            .withSubjectEndsWith("rsbrgzdwm")
                            .withIncludedEventTypes(
                                Arrays.asList("ypqwdxggiccc", "xqhuexm", "ttlstvlzywemhz", "ncsdtclusiyp"))
                            .withIsSubjectCaseSensitive(true)
                            .withEnableAdvancedFilteringOnArrays(false)
                            .withAdvancedFilters(Arrays.asList(new AdvancedFilter())))
                        .withLabels(Arrays.asList("lfeadcygq"))
                        .withExpirationTimeUtc(OffsetDateTime.parse("2021-11-04T08:30:12Z"))
                        .withEventDeliverySchema(EventDeliverySchema.CUSTOM_INPUT_SCHEMA)
                        .withRetryPolicy(new RetryPolicy().withMaxDeliveryAttempts(600272259)
                            .withEventTimeToLiveInMinutes(435176888))
                        .withDeadLetterDestination(new StorageBlobDeadLetterDestination())
                        .withDeadLetterWithResourceIdentity(new DeadLetterWithResourceIdentity()
                            .withIdentity(new EventSubscriptionIdentity()
                                .withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentity("p"))
                            .withDeadLetterDestination(new StorageBlobDeadLetterDestination())),
                    new EventSubscriptionInner().withDestination(new HybridConnectionEventSubscriptionDestination())
                        .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                            .withIdentity(
                                new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                    .withUserAssignedIdentity("pnmdyodnwzxltjcv"))
                            .withDestination(new NamespaceTopicEventSubscriptionDestination()))
                        .withFilter(new EventSubscriptionFilter().withSubjectBeginsWith("gcxn")
                            .withSubjectEndsWith("vwxqibyqunyo")
                            .withIncludedEventTypes(Arrays.asList("lmdjrkvfgbvfvpdb", "daciz"))
                            .withIsSubjectCaseSensitive(false)
                            .withEnableAdvancedFilteringOnArrays(false)
                            .withAdvancedFilters(Arrays.asList(new AdvancedFilter(), new AdvancedFilter())))
                        .withLabels(Arrays.asList("bdeibqipqk", "hvxndzwmkrefajpj"))
                        .withExpirationTimeUtc(OffsetDateTime.parse("2021-01-18T23:13:43Z"))
                        .withEventDeliverySchema(EventDeliverySchema.CUSTOM_INPUT_SCHEMA)
                        .withRetryPolicy(new RetryPolicy().withMaxDeliveryAttempts(1457145453)
                            .withEventTimeToLiveInMinutes(234711061))
                        .withDeadLetterDestination(new StorageBlobDeadLetterDestination())
                        .withDeadLetterWithResourceIdentity(new DeadLetterWithResourceIdentity()
                            .withIdentity(
                                new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                    .withUserAssignedIdentity("zs"))
                            .withDeadLetterDestination(new StorageBlobDeadLetterDestination()))))
                .withNextLink("mokzhjjklf");
        model = BinaryData.fromObject(model).toObject(EventSubscriptionsListResult.class);
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.value().get(0).deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("cywuggwol",
            model.value().get(0).deliveryWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("emh", model.value().get(0).filter().subjectBeginsWith());
        Assertions.assertEquals("rsbrgzdwm", model.value().get(0).filter().subjectEndsWith());
        Assertions.assertEquals("ypqwdxggiccc", model.value().get(0).filter().includedEventTypes().get(0));
        Assertions.assertEquals(true, model.value().get(0).filter().isSubjectCaseSensitive());
        Assertions.assertEquals(false, model.value().get(0).filter().enableAdvancedFilteringOnArrays());
        Assertions.assertEquals("lfeadcygq", model.value().get(0).labels().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T08:30:12Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals(EventDeliverySchema.CUSTOM_INPUT_SCHEMA, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals(600272259, model.value().get(0).retryPolicy().maxDeliveryAttempts());
        Assertions.assertEquals(435176888, model.value().get(0).retryPolicy().eventTimeToLiveInMinutes());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.value().get(0).deadLetterWithResourceIdentity().identity().type());
        Assertions.assertEquals("p",
            model.value().get(0).deadLetterWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("mokzhjjklf", model.nextLink());
    }
}
