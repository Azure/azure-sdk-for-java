// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.EventSubscriptionInner;
import com.azure.resourcemanager.eventgrid.models.AdvancedFilter;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventDeliverySchema;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionFilter;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionsListResult;
import com.azure.resourcemanager.eventgrid.models.RetryPolicy;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class EventSubscriptionsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        EventSubscriptionsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"topic\":\"hmtnvy\",\"provisioningState\":\"Succeeded\",\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"npwzcjaes\"},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}},\"filter\":{\"subjectBeginsWith\":\"ccyajg\",\"subjectEndsWith\":\"fhwygzlvdnkfxus\",\"includedEventTypes\":[\"wzrmuh\",\"pfcqdp\"],\"isSubjectCaseSensitive\":false,\"enableAdvancedFilteringOnArrays\":true,\"advancedFilters\":[{\"operatorType\":\"AdvancedFilter\"}]},\"labels\":[\"oymgccelvezr\",\"pqlmfe\",\"kerqwkyh\",\"ob\"],\"expirationTimeUtc\":\"2021-08-24T12:29:29Z\",\"eventDeliverySchema\":\"CloudEventSchemaV1_0\",\"retryPolicy\":{\"maxDeliveryAttempts\":1041237961,\"eventTimeToLiveInMinutes\":615107136},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"},\"deadLetterWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"fkbw\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}}},\"id\":\"njv\",\"name\":\"dw\",\"type\":\"lpqekf\"}],\"nextLink\":\"khtj\"}")
            .toObject(EventSubscriptionsListResult.class);
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.value().get(0).deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("npwzcjaes",
            model.value().get(0).deliveryWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("ccyajg", model.value().get(0).filter().subjectBeginsWith());
        Assertions.assertEquals("fhwygzlvdnkfxus", model.value().get(0).filter().subjectEndsWith());
        Assertions.assertEquals("wzrmuh", model.value().get(0).filter().includedEventTypes().get(0));
        Assertions.assertEquals(false, model.value().get(0).filter().isSubjectCaseSensitive());
        Assertions.assertEquals(true, model.value().get(0).filter().enableAdvancedFilteringOnArrays());
        Assertions.assertEquals("oymgccelvezr", model.value().get(0).labels().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-24T12:29:29Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals(EventDeliverySchema.CLOUD_EVENT_SCHEMA_V1_0,
            model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals(1041237961, model.value().get(0).retryPolicy().maxDeliveryAttempts());
        Assertions.assertEquals(615107136, model.value().get(0).retryPolicy().eventTimeToLiveInMinutes());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.value().get(0).deadLetterWithResourceIdentity().identity().type());
        Assertions.assertEquals("fkbw",
            model.value().get(0).deadLetterWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("khtj", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        EventSubscriptionsListResult model
            = new EventSubscriptionsListResult().withValue(
                Arrays.asList(new EventSubscriptionInner().withDestination(new EventSubscriptionDestination())
                    .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentity("npwzcjaes"))
                        .withDestination(new EventSubscriptionDestination()))
                    .withFilter(new EventSubscriptionFilter().withSubjectBeginsWith("ccyajg")
                        .withSubjectEndsWith("fhwygzlvdnkfxus")
                        .withIncludedEventTypes(Arrays.asList("wzrmuh", "pfcqdp"))
                        .withIsSubjectCaseSensitive(false)
                        .withEnableAdvancedFilteringOnArrays(true)
                        .withAdvancedFilters(Arrays.asList(new AdvancedFilter())))
                    .withLabels(Arrays.asList("oymgccelvezr", "pqlmfe", "kerqwkyh", "ob"))
                    .withExpirationTimeUtc(OffsetDateTime.parse("2021-08-24T12:29:29Z"))
                    .withEventDeliverySchema(EventDeliverySchema.CLOUD_EVENT_SCHEMA_V1_0)
                    .withRetryPolicy(
                        new RetryPolicy().withMaxDeliveryAttempts(1041237961).withEventTimeToLiveInMinutes(615107136))
                    .withDeadLetterDestination(new DeadLetterDestination())
                    .withDeadLetterWithResourceIdentity(new DeadLetterWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentity("fkbw"))
                        .withDeadLetterDestination(new DeadLetterDestination()))))
                .withNextLink("khtj");
        model = BinaryData.fromObject(model).toObject(EventSubscriptionsListResult.class);
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.value().get(0).deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("npwzcjaes",
            model.value().get(0).deliveryWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("ccyajg", model.value().get(0).filter().subjectBeginsWith());
        Assertions.assertEquals("fhwygzlvdnkfxus", model.value().get(0).filter().subjectEndsWith());
        Assertions.assertEquals("wzrmuh", model.value().get(0).filter().includedEventTypes().get(0));
        Assertions.assertEquals(false, model.value().get(0).filter().isSubjectCaseSensitive());
        Assertions.assertEquals(true, model.value().get(0).filter().enableAdvancedFilteringOnArrays());
        Assertions.assertEquals("oymgccelvezr", model.value().get(0).labels().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-24T12:29:29Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals(EventDeliverySchema.CLOUD_EVENT_SCHEMA_V1_0,
            model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals(1041237961, model.value().get(0).retryPolicy().maxDeliveryAttempts());
        Assertions.assertEquals(615107136, model.value().get(0).retryPolicy().eventTimeToLiveInMinutes());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.value().get(0).deadLetterWithResourceIdentity().identity().type());
        Assertions.assertEquals("fkbw",
            model.value().get(0).deadLetterWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals("khtj", model.nextLink());
    }
}
