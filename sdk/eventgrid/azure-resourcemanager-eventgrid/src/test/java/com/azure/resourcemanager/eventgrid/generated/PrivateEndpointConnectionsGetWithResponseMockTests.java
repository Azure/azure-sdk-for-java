// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.PersistedConnectionStatus;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpointConnection;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpointConnectionsParentType;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"kbdgddkrh\"},\"groupIds\":[\"xbeuuqu\",\"kzwtjwwguzytij\",\"xfn\",\"ndegjdydhqkkkbj\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"tuqbhp\",\"actionsRequired\":\"cnxtpzdlysei\"},\"provisioningState\":\"Succeeded\"},\"id\":\"akatprytg\",\"name\":\"hzbqfdpfawrptvcs\",\"type\":\"tk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .getWithResponse("uwxsuykznhrfgsl", PrivateEndpointConnectionsParentType.NAMESPACES, "hpryjfzihuioa",
                "ocpajt", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("kbdgddkrh", response.privateEndpoint().id());
        Assertions.assertEquals("xbeuuqu", response.groupIds().get(0));
        Assertions.assertEquals(PersistedConnectionStatus.DISCONNECTED,
            response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("tuqbhp", response.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("cnxtpzdlysei", response.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED, response.provisioningState());
    }
}
