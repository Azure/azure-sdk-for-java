// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"vvyezslpu\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"dsvalpnptwtrkx\",\"name\":\"pazwug\",\"type\":\"yqvnjobfe\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"uhzzgqlmfaew\",\"giudjpxpq\",\"ttqhnmhkrezsds\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"qdgcrux\",\"name\":\"pinymmqgwokmikp\",\"type\":\"zfbmjxuv\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"vhax\",\"vwzaehp\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"dklmvetatlakf\",\"name\":\"oixwgiksb\",\"type\":\"vtooxrpo\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"hgjtnhtukfaci\",\"mbf\",\"tumeezbxvqxb\",\"uvwc\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"omtmjzwxuqgov\",\"name\":\"xpwwzt\",\"type\":\"fmkk\"}],\"provisioningState\":\"Failed\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"dmlsc\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"dcqjkedwqurc\":{\"description\":\"vjowazhpabac\",\"displayName\":\"lyotg\",\"documentationUrl\":\"sxnsrqorcge\",\"dataSchemaUrl\":\"vcebxeetqujxcxxq\"},\"qgvtojrulfu\":{\"description\":\"jmrvvxwjongz\",\"displayName\":\"hqqrsilcch\",\"documentationUrl\":\"xxkan\",\"dataSchemaUrl\":\"vri\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"thcfj\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"bqjr\",\"action\":\"Allow\"},{\"ipMask\":\"rjeqmtzzbeqrztr\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"qatiwkkvyanxkvvc\",\"tenantId\":\"msvuvdjkqxetq\",\"userAssignedIdentities\":{\"jxlehzlx\":{\"principalId\":\"vrjjxnw\",\"clientId\":\"chp\"},\"bpjxljtxbusqtb\":{\"principalId\":\"fquwzpwiibel\",\"clientId\":\"erwk\"},\"u\":{\"principalId\":\"niuisdz\",\"clientId\":\"bdgzpagsecnad\"}}},\"location\":\"r\",\"tags\":{\"oellnkkiiwvmt\":\"llmqiyne\",\"axroqvqpilrgunc\":\"mxpymdjf\"},\"id\":\"nlduwzorxsbm\",\"name\":\"aqklxy\",\"type\":\"x\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Domain response = manager.domains()
            .getByResourceGroupWithResponse("ssov", "xpavid", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("r", response.location());
        Assertions.assertEquals("llmqiyne", response.tags().get("oellnkkiiwvmt"));
        Assertions.assertEquals(Sku.BASIC, response.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("qatiwkkvyanxkvvc", response.identity().principalId());
        Assertions.assertEquals("msvuvdjkqxetq", response.identity().tenantId());
        Assertions.assertEquals("vrjjxnw", response.identity().userAssignedIdentities().get("jxlehzlx").principalId());
        Assertions.assertEquals("chp", response.identity().userAssignedIdentities().get("jxlehzlx").clientId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, response.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, response.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("vjowazhpabac",
            response.eventTypeInfo().inlineEventTypes().get("dcqjkedwqurc").description());
        Assertions.assertEquals("lyotg", response.eventTypeInfo().inlineEventTypes().get("dcqjkedwqurc").displayName());
        Assertions.assertEquals("sxnsrqorcge",
            response.eventTypeInfo().inlineEventTypes().get("dcqjkedwqurc").documentationUrl());
        Assertions.assertEquals("vcebxeetqujxcxxq",
            response.eventTypeInfo().inlineEventTypes().get("dcqjkedwqurc").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, response.publicNetworkAccess());
        Assertions.assertEquals("bqjr", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.disableLocalAuth());
        Assertions.assertEquals(true, response.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, response.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, response.dataResidencyBoundary());
    }
}
