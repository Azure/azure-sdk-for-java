// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ck\",\"oikxkxhnegk\",\"jzrbhtmeplv\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"brlbpgs\",\"name\":\"bagn\",\"type\":\"hjhgem\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ywalhjymxcg\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"drclssoljome\",\"name\":\"tfy\",\"type\":\"nlbvgjcodkk\"}],\"provisioningState\":\"Updating\",\"minimumTlsVersionAllowed\":\"1.1\",\"endpoint\":\"s\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"qba\":{\"description\":\"q\",\"displayName\":\"ntnrgmqsorh\",\"documentationUrl\":\"kxgnlykmxcpwzvmd\",\"dataSchemaUrl\":\"sqdtiwlwxlbon\"},\"wnosbzlehgcvkbck\":{\"description\":\"icqchygtv\",\"displayName\":\"yjanepubdp\",\"documentationUrl\":\"yqvgxia\",\"dataSchemaUrl\":\"etvohkxdxuwsaifm\"},\"jglzoblqwaafrq\":{\"description\":\"olg\",\"displayName\":\"yxpvelszerqze\",\"documentationUrl\":\"o\",\"dataSchemaUrl\":\"intxwa\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"mz\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"afjrqpjiyrqjcrg\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"pdltbq\",\"tenantId\":\"qjf\",\"userAssignedIdentities\":{\"uwjoedxnguca\":{\"principalId\":\"aetgzdgvpyigd\",\"clientId\":\"qilzdc\"},\"xwxdcvjwc\":{\"principalId\":\"pa\",\"clientId\":\"wwgilfjqqacdm\"}}},\"location\":\"iakeciqc\",\"tags\":{\"wdfmmpzhzzwvywr\":\"tuicds\"},\"id\":\"yngydgrpxncaki\",\"name\":\"aondjrkclamgg\",\"type\":\"vlmfej\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Domain response = manager.domains()
            .getByResourceGroupWithResponse("evhdlmydid", "hepfwwtjfdoes", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("iakeciqc", response.location());
        Assertions.assertEquals("tuicds", response.tags().get("wdfmmpzhzzwvywr"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("pdltbq", response.identity().principalId());
        Assertions.assertEquals("qjf", response.identity().tenantId());
        Assertions.assertEquals("aetgzdgvpyigd",
            response.identity().userAssignedIdentities().get("uwjoedxnguca").principalId());
        Assertions.assertEquals("qilzdc", response.identity().userAssignedIdentities().get("uwjoedxnguca").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, response.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("q", response.eventTypeInfo().inlineEventTypes().get("qba").description());
        Assertions.assertEquals("ntnrgmqsorh", response.eventTypeInfo().inlineEventTypes().get("qba").displayName());
        Assertions.assertEquals("kxgnlykmxcpwzvmd",
            response.eventTypeInfo().inlineEventTypes().get("qba").documentationUrl());
        Assertions.assertEquals("sqdtiwlwxlbon",
            response.eventTypeInfo().inlineEventTypes().get("qba").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.publicNetworkAccess());
        Assertions.assertEquals("afjrqpjiyrqjcrg", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.disableLocalAuth());
        Assertions.assertEquals(true, response.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, response.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, response.dataResidencyBoundary());
    }
}
