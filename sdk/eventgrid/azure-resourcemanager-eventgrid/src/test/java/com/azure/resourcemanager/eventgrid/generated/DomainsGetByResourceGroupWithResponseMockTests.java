// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class DomainsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"xcgjtf\",\"nquktrfnslnlrxs\",\"ylt\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"fmtbgwjdxwn\",\"name\":\"zkurrdreyzj\",\"type\":\"hsetwwj\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"e\",\"zuukykcyqhyqq\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"ykeys\",\"name\":\"ewfopazdazg\",\"type\":\"sqgpewqcfu\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ozglq\",\"bknlzcl\",\"tzeyowmndcovd\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"uxza\",\"name\":\"hmkvfruwkudrb\",\"type\":\"pftxudqyeme\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"cmcir\",\"nee\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"uwcgxefnoha\",\"name\":\"tranizerwgu\",\"type\":\"asmxubvfbngf\"}],\"provisioningState\":\"Canceled\",\"minimumTlsVersionAllowed\":\"1.1\",\"endpoint\":\"priylfmp\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"zlpykcfazzwjcay\":{\"description\":\"lcdculregpq\",\"displayName\":\"ojhvrz\",\"documentationUrl\":\"vgysh\",\"dataSchemaUrl\":\"dgrtwmew\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"rransyb\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"zrghsrleink\",\"action\":\"Allow\"},{\"ipMask\":\"fncjwvua\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"lzmijajwolxfsv\",\"tenantId\":\"h\",\"userAssignedIdentities\":{\"a\":{\"principalId\":\"wl\",\"clientId\":\"rcigtzjcvbxq\"},\"vyezslpux\":{\"principalId\":\"nssovyxpav\",\"clientId\":\"nievwffc\"},\"vnjobfelhldiuhzz\":{\"principalId\":\"bdsval\",\"clientId\":\"ptwtrkxgpazwugxy\"},\"sdsu\":{\"principalId\":\"lmfaewzgiudjp\",\"clientId\":\"qhttqhnmhkre\"}}},\"location\":\"eqdgcruxsp\",\"tags\":{\"qgwokmikp\":\"m\",\"ipfdvhaxdvwzaehp\":\"zfbmjxuv\",\"oixwgiksb\":\"hthdklmvetatlakf\"},\"id\":\"vtooxrpo\",\"name\":\"wp\",\"type\":\"chgjtnhtukfacih\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Domain response = manager.domains()
            .getByResourceGroupWithResponse("pboujs", "kfvvdshxcde", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("eqdgcruxsp", response.location());
        Assertions.assertEquals("m", response.tags().get("qgwokmikp"));
        Assertions.assertEquals(Sku.BASIC, response.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("lzmijajwolxfsv", response.identity().principalId());
        Assertions.assertEquals("h", response.identity().tenantId());
        Assertions.assertEquals("wl", response.identity().userAssignedIdentities().get("a").principalId());
        Assertions.assertEquals("rcigtzjcvbxq", response.identity().userAssignedIdentities().get("a").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, response.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("lcdculregpq",
            response.eventTypeInfo().inlineEventTypes().get("zlpykcfazzwjcay").description());
        Assertions.assertEquals("ojhvrz",
            response.eventTypeInfo().inlineEventTypes().get("zlpykcfazzwjcay").displayName());
        Assertions.assertEquals("vgysh",
            response.eventTypeInfo().inlineEventTypes().get("zlpykcfazzwjcay").documentationUrl());
        Assertions.assertEquals("dgrtwmew",
            response.eventTypeInfo().inlineEventTypes().get("zlpykcfazzwjcay").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.publicNetworkAccess());
        Assertions.assertEquals("zrghsrleink", response.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.disableLocalAuth());
        Assertions.assertEquals(true, response.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, response.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, response.dataResidencyBoundary());
    }
}
