// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespace;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerNamespacesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"bfijzzcaoijol\",\"uauktwieopexelx\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"swyiljpibkgxyxy\",\"name\":\"ux\",\"type\":\"eddobmcnltm\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"jsqy\",\"mmoxfablqgpwbmwh\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"iwrycgnwplrrb\",\"name\":\"hctsbbibti\",\"type\":\"uhqvums\"}],\"provisioningState\":\"Failed\",\"partnerRegistrationFullyQualifiedId\":\"feq\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"f\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"yxmzrmtmvwituwey\",\"action\":\"Allow\"},{\"ipMask\":\"cybwfuppoxprcm\",\"action\":\"Allow\"},{\"ipMask\":\"jxdiikmoxrezsv\",\"action\":\"Allow\"},{\"ipMask\":\"xikjm\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"pcwybsz\",\"tags\":{\"wf\":\"npatpftsae\",\"exojfccy\":\"hxorpwaltzwu\"},\"id\":\"h\",\"name\":\"rh\",\"type\":\"hvazjpwexcdr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PartnerNamespace> response = manager.partnerNamespaces()
            .listByResourceGroup("aoq", "sgptotxjq", 523647498, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pcwybsz", response.iterator().next().location());
        Assertions.assertEquals("npatpftsae", response.iterator().next().tags().get("wf"));
        Assertions.assertEquals("feq", response.iterator().next().partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("yxmzrmtmvwituwey", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            response.iterator().next().partnerTopicRoutingMode());
    }
}
