// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespace;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerNamespacesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"zdprwnhkgqggox\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"ivrakfrryn\",\"name\":\"cwmhlymgnukxrk\",\"type\":\"mjpequlr\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"gjtfb\",\"lakkucddwnhcz\",\"utoucgjt\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"ayhic\",\"name\":\"qwwvgwkslvl\",\"type\":\"zedv\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"n\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"kzyqxadyfhbmw\",\"name\":\"hojqttbspvkhg\",\"type\":\"aqjsgyzstujr\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"sf\",\"rlduyehiiittugy\",\"qwrldaxur\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"csozjv\",\"name\":\"dzciggb\",\"type\":\"vt\"}],\"provisioningState\":\"Creating\",\"partnerRegistrationFullyQualifiedId\":\"alzyxwhoeamo\",\"minimumTlsVersionAllowed\":\"1.1\",\"endpoint\":\"oeysfp\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"uh\",\"action\":\"Allow\"},{\"ipMask\":\"nkwmnfeub\",\"action\":\"Allow\"},{\"ipMask\":\"r\",\"action\":\"Allow\"},{\"ipMask\":\"giphrrkuumnqdu\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"eoq\",\"tags\":{\"oztjdqumqvfmw\":\"wlujopwnibit\",\"tgctxe\":\"ad\",\"fnzzryizwbxg\":\"tvgwyurbe\"},\"id\":\"ebxlayu\",\"name\":\"omirhp\",\"type\":\"abenqlamwmg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PartnerNamespace> response = manager.partnerNamespaces()
            .listByResourceGroup("rpbj", "mvgoqpleh", 932346868, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("eoq", response.iterator().next().location());
        Assertions.assertEquals("wlujopwnibit", response.iterator().next().tags().get("oztjdqumqvfmw"));
        Assertions.assertEquals("alzyxwhoeamo", response.iterator().next().partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER,
            response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("uh", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            response.iterator().next().partnerTopicRoutingMode());
    }
}
