// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.eventgrid.models.ConnectionState;
import com.azure.resourcemanager.eventgrid.models.PersistedConnectionStatus;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpoint;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionProperties model = BinaryData.fromString(
            "{\"privateEndpoint\":{\"id\":\"ujwb\"},\"groupIds\":[\"almuzyoxaepdkzja\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"hdwbavxbniwdjs\",\"actionsRequired\":\"tsdbpgn\"},\"provisioningState\":\"Canceled\"}")
            .toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("ujwb", model.privateEndpoint().id());
        Assertions.assertEquals("almuzyoxaepdkzja", model.groupIds().get(0));
        Assertions.assertEquals(PersistedConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("hdwbavxbniwdjs", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("tsdbpgn", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals(ResourceProvisioningState.CANCELED, model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionProperties model
            = new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint().withId("ujwb"))
                .withGroupIds(Arrays.asList("almuzyoxaepdkzja"))
                .withPrivateLinkServiceConnectionState(
                    new ConnectionState().withStatus(PersistedConnectionStatus.DISCONNECTED)
                        .withDescription("hdwbavxbniwdjs")
                        .withActionsRequired("tsdbpgn"))
                .withProvisioningState(ResourceProvisioningState.CANCELED);
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionProperties.class);
        Assertions.assertEquals("ujwb", model.privateEndpoint().id());
        Assertions.assertEquals("almuzyoxaepdkzja", model.groupIds().get(0));
        Assertions.assertEquals(PersistedConnectionStatus.DISCONNECTED,
            model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("hdwbavxbniwdjs", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("tsdbpgn", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals(ResourceProvisioningState.CANCELED, model.provisioningState());
    }
}
