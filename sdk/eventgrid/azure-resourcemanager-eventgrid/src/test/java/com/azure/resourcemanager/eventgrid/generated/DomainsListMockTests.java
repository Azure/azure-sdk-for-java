// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"lj\",\"vhuerkjddvrglieg\",\"tcvbiiftk\",\"dwgdn\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"mwdhcebuvczldbg\",\"name\":\"zoutb\",\"type\":\"aqgzekajclyzgs\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"gmnzjotvmrx\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"bvvjbhvhdiq\",\"name\":\"yfluiyuosnuudte\",\"type\":\"vhyibdrqrsw\"}],\"provisioningState\":\"Succeeded\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"y\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"inhgre\":{\"description\":\"fwfqchvcze\",\"displayName\":\"nnctagfyvrt\",\"documentationUrl\":\"pemhzcgkrepdqhqy\",\"dataSchemaUrl\":\"qwemvxqabckmzeo\"},\"nfee\":{\"description\":\"twhlpuzjpce\",\"displayName\":\"nzangprbfaxy\",\"documentationUrl\":\"lbciphmsexro\",\"dataSchemaUrl\":\"ndktxfv\"},\"cwrase\":{\"description\":\"pkrietbgni\",\"displayName\":\"owwzkyfwnwpi\",\"documentationUrl\":\"eiicrmpepkl\",\"dataSchemaUrl\":\"axxijvskwsdgkjgy\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"voinwo\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"xqicladvatdavuq\",\"action\":\"Allow\"},{\"ipMask\":\"msfobjlquvj\",\"action\":\"Allow\"},{\"ipMask\":\"umvpsimioyoigl\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"pkl\",\"tenantId\":\"ydgnha\",\"userAssignedIdentities\":{\"l\":{\"principalId\":\"kexzgpmnmabeddqi\",\"clientId\":\"gdfpfqfpcvst\"}}},\"location\":\"rvwerfwxbsmtb\",\"tags\":{\"tbrekqhsqhtf\":\"ehhcifkwdv\",\"yejuwyqwdqigmghg\":\"wpq\"},\"id\":\"nztxlujkh\",\"name\":\"jcmrnkfm\",\"type\":\"h\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Domain> response
            = manager.domains().list("wcpjqduqgi", 1859868759, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("rvwerfwxbsmtb", response.iterator().next().location());
        Assertions.assertEquals("ehhcifkwdv", response.iterator().next().tags().get("tbrekqhsqhtf"));
        Assertions.assertEquals(Sku.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("pkl", response.iterator().next().identity().principalId());
        Assertions.assertEquals("ydgnha", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("kexzgpmnmabeddqi",
            response.iterator().next().identity().userAssignedIdentities().get("l").principalId());
        Assertions.assertEquals("gdfpfqfpcvst",
            response.iterator().next().identity().userAssignedIdentities().get("l").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("fwfqchvcze",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("inhgre").description());
        Assertions.assertEquals("nnctagfyvrt",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("inhgre").displayName());
        Assertions.assertEquals("pemhzcgkrepdqhqy",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("inhgre").documentationUrl());
        Assertions.assertEquals("qwemvxqabckmzeo",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("inhgre").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER,
            response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("xqicladvatdavuq", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(false, response.iterator().next().autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, response.iterator().next().autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR,
            response.iterator().next().dataResidencyBoundary());
    }
}
