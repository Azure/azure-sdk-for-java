// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"atlijjjr\",\"va\",\"caszk\",\"xk\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"etyvkunmignohi\",\"name\":\"kgqogjw\",\"type\":\"indedvabbx\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"eilbjywfcf\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"zzihvwy\",\"name\":\"usuv\",\"type\":\"slczwciidjsllf\"}],\"provisioningState\":\"Creating\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"x\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"yqgxhlus\":{\"description\":\"awba\",\"displayName\":\"fbktyjmfczlf\",\"documentationUrl\":\"qkfrbzgowoxqmj\",\"dataSchemaUrl\":\"jcx\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"i\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"agb\",\"action\":\"Allow\"},{\"ipMask\":\"sumywzashxgonoyj\",\"action\":\"Allow\"},{\"ipMask\":\"ubyzn\",\"action\":\"Allow\"},{\"ipMask\":\"ke\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinRegion\"},\"identity\":{\"type\":\"None\",\"principalId\":\"yegq\",\"tenantId\":\"nigflqqbtnyj\",\"userAssignedIdentities\":{\"lwuhvajmailfe\":{\"principalId\":\"dbfvabmv\",\"clientId\":\"xbaevwjcnkot\"},\"yeofltfnnxrkad\":{\"principalId\":\"jzakzwjiqull\",\"clientId\":\"bdmvrscmqerndbr\"},\"kfkxbbcbrwjiut\":{\"principalId\":\"ynnfmuiii\",\"clientId\":\"pfoh\"}}},\"location\":\"jizbeew\",\"tags\":{\"juyrsrziuctixg\":\"mrvz\",\"uifr\":\"d\"},\"id\":\"vka\",\"name\":\"pezkis\",\"type\":\"qjm\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Domain> response
            = manager.domains().list("tlgflwfgz", 86909569, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jizbeew", response.iterator().next().location());
        Assertions.assertEquals("mrvz", response.iterator().next().tags().get("juyrsrziuctixg"));
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("yegq", response.iterator().next().identity().principalId());
        Assertions.assertEquals("nigflqqbtnyj", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("dbfvabmv",
            response.iterator().next().identity().userAssignedIdentities().get("lwuhvajmailfe").principalId());
        Assertions.assertEquals("xbaevwjcnkot",
            response.iterator().next().identity().userAssignedIdentities().get("lwuhvajmailfe").clientId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, response.iterator().next().inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("awba",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("yqgxhlus").description());
        Assertions.assertEquals("fbktyjmfczlf",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("yqgxhlus").displayName());
        Assertions.assertEquals("qkfrbzgowoxqmj",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("yqgxhlus").documentationUrl());
        Assertions.assertEquals("jcx",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("yqgxhlus").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("agb", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(false, response.iterator().next().autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, response.iterator().next().autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
