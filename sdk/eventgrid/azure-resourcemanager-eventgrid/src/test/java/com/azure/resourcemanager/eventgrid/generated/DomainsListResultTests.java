// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.DomainInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.DomainsListResult;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"zg\",\"name\":\"yzm\",\"type\":\"txon\"}],\"provisioningState\":\"Creating\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"jcbpwxqpsrknft\",\"inputSchema\":\"EventGridSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"rwmdyvxqtay\":{},\"iwwroyqbexrmc\":{},\"ibycno\":{}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"nmefqsgzvahapj\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"qzcjrvxdj\",\"action\":\"Allow\"},{\"ipMask\":\"lxkvu\",\"action\":\"Allow\"},{\"ipMask\":\"ovawjvzunlu\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinRegion\"},\"identity\":{\"type\":\"None\",\"principalId\":\"zuaejxd\",\"tenantId\":\"tskzbbtdzumveek\",\"userAssignedIdentities\":{\"dttouwaboekqvkel\":{\"principalId\":\"zuhkfpbsjyof\",\"clientId\":\"luu\"},\"isxyawjoyaqcslyj\":{\"principalId\":\"mvb\",\"clientId\":\"yjsflhhcaalnji\"}}},\"location\":\"iidzyexzne\",\"tags\":{\"bnxknalaulppg\":\"hnrztfol\",\"gvpgy\":\"dtpnapnyiropuhp\",\"n\":\"gqgitxmedjvcsl\"},\"id\":\"wwncwzzhxgk\",\"name\":\"rmgucnap\",\"type\":\"t\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"wptfdy\",\"name\":\"pfqbuaceopzf\",\"type\":\"rhhuaopppcqeqx\"},{\"properties\":{},\"id\":\"z\",\"name\":\"ahzxctobgbk\",\"type\":\"moizpos\"}],\"provisioningState\":\"Deleting\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"bunrmfqjhhk\",\"inputSchema\":\"EventGridSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"hx\":{},\"j\":{}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"u\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"swbxqz\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"e\",\"tenantId\":\"t\",\"userAssignedIdentities\":{\"fxoblytkb\":{\"principalId\":\"tdo\",\"clientId\":\"cbxvwvxyslqbh\"},\"shqjohxcrsbf\":{\"principalId\":\"pe\",\"clientId\":\"wfbkrvrns\"},\"ybsrfbjfdtwss\":{\"principalId\":\"asrru\",\"clientId\":\"bhsqfsubcgjbirxb\"}}},\"location\":\"ftpvjzbexil\",\"tags\":{\"jmkcjhwqytj\":\"fqqnvwpmqtaruo\",\"jewgdrjerv\":\"ybn\"},\"id\":\"aen\",\"name\":\"pehindoygm\",\"type\":\"fthnzdn\"}],\"nextLink\":\"l\"}")
            .toObject(DomainsListResult.class);
        Assertions.assertEquals("iidzyexzne", model.value().get(0).location());
        Assertions.assertEquals("hnrztfol", model.value().get(0).tags().get("bnxknalaulppg"));
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("zuaejxd", model.value().get(0).identity().principalId());
        Assertions.assertEquals("tskzbbtdzumveek", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("zuhkfpbsjyof",
            model.value().get(0).identity().userAssignedIdentities().get("dttouwaboekqvkel").principalId());
        Assertions.assertEquals("luu",
            model.value().get(0).identity().userAssignedIdentities().get("dttouwaboekqvkel").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, model.value().get(0).inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("qzcjrvxdj", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(false, model.value().get(0).autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.value().get(0).autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("l", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainsListResult model
            = new DomainsListResult()
                .withValue(
                    Arrays.asList(
                        new DomainInner().withLocation("iidzyexzne")
                            .withTags(
                                mapOf("bnxknalaulppg", "hnrztfol", "gvpgy", "dtpnapnyiropuhp", "n", "gqgitxmedjvcsl"))
                            .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                                .withPrincipalId("zuaejxd")
                                .withTenantId("tskzbbtdzumveek")
                                .withUserAssignedIdentities(mapOf("dttouwaboekqvkel",
                                    new UserIdentityProperties().withPrincipalId("zuhkfpbsjyof").withClientId("luu"),
                                    "isxyawjoyaqcslyj",
                                    new UserIdentityProperties().withPrincipalId("mvb")
                                        .withClientId("yjsflhhcaalnji"))))
                            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                            .withInputSchema(InputSchema.EVENT_GRID_SCHEMA)
                            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                                .withInlineEventTypes(mapOf("rwmdyvxqtay", new InlineEventProperties(), "iwwroyqbexrmc",
                                    new InlineEventProperties(), "ibycno", new InlineEventProperties())))
                            .withInputSchemaMapping(new InputSchemaMapping())
                            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                            .withInboundIpRules(Arrays.asList(
                                new InboundIpRule().withIpMask("qzcjrvxdj").withAction(IpActionType.ALLOW),
                                new InboundIpRule()
                                    .withIpMask("lxkvu")
                                    .withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("ovawjvzunlu").withAction(IpActionType.ALLOW)))
                            .withDisableLocalAuth(true)
                            .withAutoCreateTopicWithFirstSubscription(false)
                            .withAutoDeleteTopicWithLastSubscription(false)
                            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION),
                        new DomainInner().withLocation("ftpvjzbexil")
                            .withTags(mapOf("jmkcjhwqytj", "fqqnvwpmqtaruo", "jewgdrjerv", "ybn"))
                            .withIdentity(
                                new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                                    .withPrincipalId("e")
                                    .withTenantId("t")
                                    .withUserAssignedIdentities(mapOf("fxoblytkb",
                                        new UserIdentityProperties().withPrincipalId("tdo")
                                            .withClientId("cbxvwvxyslqbh"),
                                        "shqjohxcrsbf",
                                        new UserIdentityProperties().withPrincipalId("pe").withClientId("wfbkrvrns"),
                                        "ybsrfbjfdtwss",
                                        new UserIdentityProperties().withPrincipalId("asrru")
                                            .withClientId("bhsqfsubcgjbirxb"))))
                            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                            .withInputSchema(InputSchema.EVENT_GRID_SCHEMA)
                            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                                .withInlineEventTypes(
                                    mapOf("hx", new InlineEventProperties(), "j", new InlineEventProperties())))
                            .withInputSchemaMapping(new InputSchemaMapping())
                            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                            .withInboundIpRules(
                                Arrays.asList(new InboundIpRule().withIpMask("swbxqz").withAction(IpActionType.ALLOW)))
                            .withDisableLocalAuth(true)
                            .withAutoCreateTopicWithFirstSubscription(true)
                            .withAutoDeleteTopicWithLastSubscription(false)
                            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)))
                .withNextLink("l");
        model = BinaryData.fromObject(model).toObject(DomainsListResult.class);
        Assertions.assertEquals("iidzyexzne", model.value().get(0).location());
        Assertions.assertEquals("hnrztfol", model.value().get(0).tags().get("bnxknalaulppg"));
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("zuaejxd", model.value().get(0).identity().principalId());
        Assertions.assertEquals("tskzbbtdzumveek", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("zuhkfpbsjyof",
            model.value().get(0).identity().userAssignedIdentities().get("dttouwaboekqvkel").principalId());
        Assertions.assertEquals("luu",
            model.value().get(0).identity().userAssignedIdentities().get("dttouwaboekqvkel").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, model.value().get(0).inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("qzcjrvxdj", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(false, model.value().get(0).autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.value().get(0).autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("l", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
