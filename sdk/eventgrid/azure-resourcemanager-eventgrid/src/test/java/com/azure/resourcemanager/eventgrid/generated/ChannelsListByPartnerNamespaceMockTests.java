// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Channel;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsListByPartnerNamespaceMockTests {
    @Test
    public void testListByPartnerNamespace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"channelType\":\"PartnerTopic\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"wkdcwmqs\",\"resourceGroupName\":\"ilm\",\"name\":\"dqaolfylnkk\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"ywltmfwobbjwhlwy\":{},\"fnqzocr\":{}}},\"source\":\"gczeuntgx\"},\"partnerDestinationInfo\":{\"endpointType\":\"WebHook\",\"azureSubscriptionId\":\"ttie\",\"resourceGroupName\":\"i\",\"name\":\"vnyttzgi\",\"endpointServiceContext\":\"yri\",\"resourceMoveChangeHistory\":[{\"azureSubscriptionId\":\"gbehlqtxnr\",\"resourceGroupName\":\"kndrndpgfjo\",\"changedTimeUtc\":\"2020-12-22T10:21:19Z\"}]},\"messageForActivation\":\"qotwfh\",\"provisioningState\":\"Deleting\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-09-18T16:39:02Z\"},\"id\":\"vcipo\",\"name\":\"zafczuumljci\",\"type\":\"vpefyc\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Channel> response = manager.channels()
            .listByPartnerNamespace("jpp", "laohoqkp", "t", 1966283387, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, response.iterator().next().channelType());
        Assertions.assertEquals("wkdcwmqs", response.iterator().next().partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("ilm", response.iterator().next().partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("dqaolfylnkk", response.iterator().next().partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE,
            response.iterator().next().partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("gczeuntgx", response.iterator().next().partnerTopicInfo().source());
        Assertions.assertEquals("ttie", response.iterator().next().partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("i", response.iterator().next().partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("vnyttzgi", response.iterator().next().partnerDestinationInfo().name());
        Assertions.assertEquals("yri", response.iterator().next().partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("gbehlqtxnr",
            response.iterator()
                .next()
                .partnerDestinationInfo()
                .resourceMoveChangeHistory()
                .get(0)
                .azureSubscriptionId());
        Assertions.assertEquals("kndrndpgfjo",
            response.iterator().next().partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-22T10:21:19Z"),
            response.iterator().next().partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("qotwfh", response.iterator().next().messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.DELETING, response.iterator().next().provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, response.iterator().next().readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-18T16:39:02Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
    }
}
