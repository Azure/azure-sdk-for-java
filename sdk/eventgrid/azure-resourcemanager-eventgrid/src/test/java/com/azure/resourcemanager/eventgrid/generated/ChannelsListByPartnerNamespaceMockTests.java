// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Channel;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsListByPartnerNamespaceMockTests {
    @Test
    public void testListByPartnerNamespace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"channelType\":\"PartnerDestination\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"qatiwkkvyanxkvvc\",\"resourceGroupName\":\"msvuvdjkqxetq\",\"name\":\"livrjjxnwx\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"xlehzlxpgfquwzp\":{},\"iibelwcerw\":{}}},\"source\":\"bpjxljtxbusqtb\"},\"partnerDestinationInfo\":{\"endpointType\":\"PartnerDestinationInfo\",\"azureSubscriptionId\":\"iuisdz\",\"resourceGroupName\":\"bdgzpagsecnad\",\"name\":\"wqrgxfllmqi\",\"endpointServiceContext\":\"ezoell\",\"resourceMoveChangeHistory\":[{\"azureSubscriptionId\":\"iwvmtumxpymdjfu\",\"resourceGroupName\":\"roqvqpilrgu\",\"changedTimeUtc\":\"2021-01-08T08:31:14Z\"},{\"azureSubscriptionId\":\"lduwzorxsb\",\"resourceGroupName\":\"aqklxy\",\"changedTimeUtc\":\"2021-08-03T15:44:41Z\"}]},\"messageForActivation\":\"vfqepd\",\"provisioningState\":\"Deleting\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-03-25T07:31:22Z\"},\"id\":\"yvpjbowcpjqduqg\",\"name\":\"xe\",\"type\":\"kydfbwljavhuerkj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Channel> response = manager.channels()
            .listByPartnerNamespace("alx", "d", "absr", 1350471817, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, response.iterator().next().channelType());
        Assertions.assertEquals("qatiwkkvyanxkvvc",
            response.iterator().next().partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("msvuvdjkqxetq", response.iterator().next().partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("livrjjxnwx", response.iterator().next().partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE,
            response.iterator().next().partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("bpjxljtxbusqtb", response.iterator().next().partnerTopicInfo().source());
        Assertions.assertEquals("iuisdz", response.iterator().next().partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("bdgzpagsecnad",
            response.iterator().next().partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("wqrgxfllmqi", response.iterator().next().partnerDestinationInfo().name());
        Assertions.assertEquals("ezoell", response.iterator().next().partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("iwvmtumxpymdjfu",
            response.iterator()
                .next()
                .partnerDestinationInfo()
                .resourceMoveChangeHistory()
                .get(0)
                .azureSubscriptionId());
        Assertions.assertEquals("roqvqpilrgu",
            response.iterator().next().partnerDestinationInfo().resourceMoveChangeHistory().get(0).resourceGroupName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-08T08:31:14Z"),
            response.iterator().next().partnerDestinationInfo().resourceMoveChangeHistory().get(0).changedTimeUtc());
        Assertions.assertEquals("vfqepd", response.iterator().next().messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.DELETING, response.iterator().next().provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, response.iterator().next().readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-25T07:31:22Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
    }
}
