// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Channel;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ChannelsListByPartnerNamespaceMockTests {
    @Test
    public void testListByPartnerNamespace() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"channelType\":\"PartnerTopic\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"udqll\",\"resourceGroupName\":\"auzpjlx\",\"name\":\"huxiqhzlraymez\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"mxrfdsa\":{}}},\"source\":\"ednwyyshtu\"},\"messageForActivation\":\"mevuafpwzy\",\"provisioningState\":\"Succeeded\",\"readinessState\":\"Activated\",\"expirationTimeIfNotActivatedUtc\":\"2021-11-22T11:25Z\"},\"id\":\"xeqipx\",\"name\":\"zdyi\",\"type\":\"sfayorpravkjoges\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Channel> response = manager.channels()
            .listByPartnerNamespace("meottawj", "osxw", "hnhjtfvpndpmi", 408225634, com.azure.core.util.Context.NONE);

        Assertions.assertEquals(ChannelType.PARTNER_TOPIC, response.iterator().next().channelType());
        Assertions.assertEquals("udqll", response.iterator().next().partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("auzpjlx", response.iterator().next().partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("huxiqhzlraymez", response.iterator().next().partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE,
            response.iterator().next().partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("ednwyyshtu", response.iterator().next().partnerTopicInfo().source());
        Assertions.assertEquals("mevuafpwzy", response.iterator().next().messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.SUCCEEDED, response.iterator().next().provisioningState());
        Assertions.assertEquals(ReadinessState.ACTIVATED, response.iterator().next().readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-22T11:25Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
    }
}
