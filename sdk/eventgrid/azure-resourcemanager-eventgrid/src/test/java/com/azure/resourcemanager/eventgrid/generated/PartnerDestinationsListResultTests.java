// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerDestinationInner;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationsListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerDestinationsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerDestinationsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"0fc48c78-69e3-4c23-b72e-9ab440a34ba7\",\"endpointServiceContext\":\"lqtmldgxob\",\"expirationTimeIfNotActivatedUtc\":\"2021-09-19T17:45:42Z\",\"provisioningState\":\"Canceled\",\"activationState\":\"NeverActivated\",\"endpointBaseUrl\":\"ciayzriykhya\",\"messageForActivation\":\"vjlboxqvk\"},\"location\":\"mxho\",\"tags\":{\"uzzptjazysdz\":\"nhdwdigumbnra\",\"iqyuvvfo\":\"ezwwv\",\"ikvylauya\":\"kphhq\"},\"id\":\"luwmncst\",\"name\":\"ijf\",\"type\":\"bvpoekrsgsgbdhu\"}],\"nextLink\":\"gnjdgkynscliqhz\"}")
            .toObject(PartnerDestinationsListResult.class);
        Assertions.assertEquals("mxho", model.value().get(0).location());
        Assertions.assertEquals("nhdwdigumbnra", model.value().get(0).tags().get("uzzptjazysdz"));
        Assertions.assertEquals(UUID.fromString("0fc48c78-69e3-4c23-b72e-9ab440a34ba7"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("lqtmldgxob", model.value().get(0).endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T17:45:42Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.NEVER_ACTIVATED,
            model.value().get(0).activationState());
        Assertions.assertEquals("ciayzriykhya", model.value().get(0).endpointBaseUrl());
        Assertions.assertEquals("vjlboxqvk", model.value().get(0).messageForActivation());
        Assertions.assertEquals("gnjdgkynscliqhz", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerDestinationsListResult model = new PartnerDestinationsListResult()
            .withValue(Arrays.asList(new PartnerDestinationInner().withLocation("mxho")
                .withTags(mapOf("uzzptjazysdz", "nhdwdigumbnra", "iqyuvvfo", "ezwwv", "ikvylauya", "kphhq"))
                .withPartnerRegistrationImmutableId(UUID.fromString("0fc48c78-69e3-4c23-b72e-9ab440a34ba7"))
                .withEndpointServiceContext("lqtmldgxob")
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-09-19T17:45:42Z"))
                .withActivationState(PartnerDestinationActivationState.NEVER_ACTIVATED)
                .withEndpointBaseUrl("ciayzriykhya")
                .withMessageForActivation("vjlboxqvk")))
            .withNextLink("gnjdgkynscliqhz");
        model = BinaryData.fromObject(model).toObject(PartnerDestinationsListResult.class);
        Assertions.assertEquals("mxho", model.value().get(0).location());
        Assertions.assertEquals("nhdwdigumbnra", model.value().get(0).tags().get("uzzptjazysdz"));
        Assertions.assertEquals(UUID.fromString("0fc48c78-69e3-4c23-b72e-9ab440a34ba7"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("lqtmldgxob", model.value().get(0).endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-19T17:45:42Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.NEVER_ACTIVATED,
            model.value().get(0).activationState());
        Assertions.assertEquals("ciayzriykhya", model.value().get(0).endpointBaseUrl());
        Assertions.assertEquals("vjlboxqvk", model.value().get(0).messageForActivation());
        Assertions.assertEquals("gnjdgkynscliqhz", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
