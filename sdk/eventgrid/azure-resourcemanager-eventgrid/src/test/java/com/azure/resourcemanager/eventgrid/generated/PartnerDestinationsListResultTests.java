// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerDestinationInner;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationsListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerDestinationsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerDestinationsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"979b3e8c-9410-43ec-b043-de2f2f164734\",\"endpointServiceContext\":\"plcplcwkhi\",\"expirationTimeIfNotActivatedUtc\":\"2021-04-24T13:31:24Z\",\"provisioningState\":\"IdleDueToMirroredChannelResourceDeletion\",\"activationState\":\"Activated\",\"endpointBaseUrl\":\"qtz\",\"messageForActivation\":\"rgnowcjhfgm\"},\"location\":\"cact\",\"tags\":{\"uqovekqvgqouwif\":\"oteyowc\",\"ivqikfxcvhr\":\"mpjw\"},\"id\":\"sphuagrttikteus\",\"name\":\"c\",\"type\":\"kvyklxubyjaffmm\"}],\"nextLink\":\"lcqcuubgqibrt\"}")
            .toObject(PartnerDestinationsListResult.class);
        Assertions.assertEquals("cact", model.value().get(0).location());
        Assertions.assertEquals("oteyowc", model.value().get(0).tags().get("uqovekqvgqouwif"));
        Assertions.assertEquals(UUID.fromString("979b3e8c-9410-43ec-b043-de2f2f164734"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("plcplcwkhi", model.value().get(0).endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T13:31:24Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.ACTIVATED, model.value().get(0).activationState());
        Assertions.assertEquals("qtz", model.value().get(0).endpointBaseUrl());
        Assertions.assertEquals("rgnowcjhfgm", model.value().get(0).messageForActivation());
        Assertions.assertEquals("lcqcuubgqibrt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerDestinationsListResult model
            = new PartnerDestinationsListResult().withValue(Arrays.asList(new PartnerDestinationInner()
                .withLocation("cact").withTags(mapOf("uqovekqvgqouwif", "oteyowc", "ivqikfxcvhr", "mpjw"))
                .withPartnerRegistrationImmutableId(UUID.fromString("979b3e8c-9410-43ec-b043-de2f2f164734"))
                .withEndpointServiceContext("plcplcwkhi")
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-04-24T13:31:24Z"))
                .withActivationState(PartnerDestinationActivationState.ACTIVATED).withEndpointBaseUrl("qtz")
                .withMessageForActivation("rgnowcjhfgm"))).withNextLink("lcqcuubgqibrt");
        model = BinaryData.fromObject(model).toObject(PartnerDestinationsListResult.class);
        Assertions.assertEquals("cact", model.value().get(0).location());
        Assertions.assertEquals("oteyowc", model.value().get(0).tags().get("uqovekqvgqouwif"));
        Assertions.assertEquals(UUID.fromString("979b3e8c-9410-43ec-b043-de2f2f164734"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("plcplcwkhi", model.value().get(0).endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-24T13:31:24Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.ACTIVATED, model.value().get(0).activationState());
        Assertions.assertEquals("qtz", model.value().get(0).endpointBaseUrl());
        Assertions.assertEquals("rgnowcjhfgm", model.value().get(0).messageForActivation());
        Assertions.assertEquals("lcqcuubgqibrt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
