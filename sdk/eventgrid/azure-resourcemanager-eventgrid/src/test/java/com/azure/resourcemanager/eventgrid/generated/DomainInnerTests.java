// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.DomainInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"vo\"},\"groupIds\":[\"jjugwdkcglhslaz\",\"dyggdtjixhbku\",\"fqweykhmene\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"fwhybcibvy\",\"actionsRequired\":\"c\"},\"provisioningState\":\"Canceled\"},\"id\":\"ynnaam\",\"name\":\"ectehf\",\"type\":\"qsc\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"vhezrkgqhcj\"},\"groupIds\":[\"o\",\"gm\",\"qsl\",\"yyvxyqjpkcattpn\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"czsqpjhvm\",\"actionsRequired\":\"jvnysounqe\"},\"provisioningState\":\"Deleting\"},\"id\":\"oaeupfhyhltrpmo\",\"name\":\"jmcmatuokthfu\",\"type\":\"uaodsfcpk\"}],\"provisioningState\":\"Updating\",\"minimumTlsVersionAllowed\":\"1.1\",\"endpoint\":\"ozmyzydagfu\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"kiiuxhqyudxor\":{\"description\":\"kktwhrdxw\",\"displayName\":\"wqsmbsur\",\"documentationUrl\":\"imoryocfsfksym\",\"dataSchemaUrl\":\"ys\"},\"iqzbq\":{\"description\":\"nbpoczvyifqrvkdv\",\"displayName\":\"llr\",\"documentationUrl\":\"vdfwatkpn\",\"dataSchemaUrl\":\"lexxbczwtru\"},\"iwkuofos\":{\"description\":\"sovmyokacspkwl\",\"displayName\":\"dobpxjmflbvvn\",\"documentationUrl\":\"rkcciwwzjuqk\",\"dataSchemaUrl\":\"sa\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"sauuimj\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"uugidyjrrfby\",\"action\":\"Allow\"},{\"ipMask\":\"e\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"kevle\",\"tenantId\":\"zfbuhf\",\"userAssignedIdentities\":{\"v\":{\"principalId\":\"x\",\"clientId\":\"feiithlvmez\"},\"xxjnspydptk\":{\"principalId\":\"xmzsbbzogg\",\"clientId\":\"rxwburv\"},\"cipazyxoegukgjnp\":{\"principalId\":\"nkoukn\",\"clientId\":\"dwtiukbldngkp\"}}},\"location\":\"cgygev\",\"tags\":{\"ydnfyhxdeoejz\":\"typmrbpizcdrqjsd\",\"jttgzf\":\"cwif\",\"khaj\":\"ishc\",\"p\":\"eyeam\"},\"id\":\"agalpbuxwgipwhon\",\"name\":\"wkgshwa\",\"type\":\"kix\"}")
            .toObject(DomainInner.class);
        Assertions.assertEquals("cgygev", model.location());
        Assertions.assertEquals("typmrbpizcdrqjsd", model.tags().get("ydnfyhxdeoejz"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("kevle", model.identity().principalId());
        Assertions.assertEquals("zfbuhf", model.identity().tenantId());
        Assertions.assertEquals("x", model.identity().userAssignedIdentities().get("v").principalId());
        Assertions.assertEquals("feiithlvmez", model.identity().userAssignedIdentities().get("v").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("kktwhrdxw",
            model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").description());
        Assertions.assertEquals("wqsmbsur",
            model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").displayName());
        Assertions.assertEquals("imoryocfsfksym",
            model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").documentationUrl());
        Assertions.assertEquals("ys", model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("uugidyjrrfby", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(true, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainInner model = new DomainInner().withLocation("cgygev")
            .withTags(mapOf("ydnfyhxdeoejz", "typmrbpizcdrqjsd", "jttgzf", "cwif", "khaj", "ishc", "p", "eyeam"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("kevle")
                .withTenantId("zfbuhf")
                .withUserAssignedIdentities(mapOf("v",
                    new UserIdentityProperties().withPrincipalId("x").withClientId("feiithlvmez"), "xxjnspydptk",
                    new UserIdentityProperties().withPrincipalId("xmzsbbzogg").withClientId("rxwburv"),
                    "cipazyxoegukgjnp",
                    new UserIdentityProperties().withPrincipalId("nkoukn").withClientId("dwtiukbldngkp"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
            .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("kiiuxhqyudxor",
                    new InlineEventProperties().withDescription("kktwhrdxw")
                        .withDisplayName("wqsmbsur")
                        .withDocumentationUrl("imoryocfsfksym")
                        .withDataSchemaUrl("ys"),
                    "iqzbq",
                    new InlineEventProperties().withDescription("nbpoczvyifqrvkdv")
                        .withDisplayName("llr")
                        .withDocumentationUrl("vdfwatkpn")
                        .withDataSchemaUrl("lexxbczwtru"),
                    "iwkuofos",
                    new InlineEventProperties().withDescription("sovmyokacspkwl")
                        .withDisplayName("dobpxjmflbvvn")
                        .withDocumentationUrl("rkcciwwzjuqk")
                        .withDataSchemaUrl("sa"))))
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("uugidyjrrfby").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("e").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(false)
            .withAutoCreateTopicWithFirstSubscription(true)
            .withAutoDeleteTopicWithLastSubscription(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(DomainInner.class);
        Assertions.assertEquals("cgygev", model.location());
        Assertions.assertEquals("typmrbpizcdrqjsd", model.tags().get("ydnfyhxdeoejz"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("kevle", model.identity().principalId());
        Assertions.assertEquals("zfbuhf", model.identity().tenantId());
        Assertions.assertEquals("x", model.identity().userAssignedIdentities().get("v").principalId());
        Assertions.assertEquals("feiithlvmez", model.identity().userAssignedIdentities().get("v").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("kktwhrdxw",
            model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").description());
        Assertions.assertEquals("wqsmbsur",
            model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").displayName());
        Assertions.assertEquals("imoryocfsfksym",
            model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").documentationUrl());
        Assertions.assertEquals("ys", model.eventTypeInfo().inlineEventTypes().get("kiiuxhqyudxor").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("uugidyjrrfby", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(true, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
