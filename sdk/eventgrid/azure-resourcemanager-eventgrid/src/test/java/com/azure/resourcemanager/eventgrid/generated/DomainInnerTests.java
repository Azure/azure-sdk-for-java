// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.DomainInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"f\"},\"groupIds\":[\"kpnpulexxbczwtr\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"bq\",\"actionsRequired\":\"sovmyokacspkwl\"},\"provisioningState\":\"Updating\"},\"id\":\"obpxjmflbvvn\",\"name\":\"hrk\",\"type\":\"ciwwzjuqkhr\"}],\"provisioningState\":\"Canceled\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"uo\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"csonpclhoco\":{\"description\":\"uimjmvx\",\"displayName\":\"duugidyjr\",\"documentationUrl\":\"byao\",\"dataSchemaUrl\":\"e\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"vleggzfbuhfmvfax\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"th\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"gigr\",\"tenantId\":\"burvjxxjnspy\",\"userAssignedIdentities\":{\"pazyxoegukg\":{\"principalId\":\"oenkouknvudwti\",\"clientId\":\"bldngkpoc\"}}},\"location\":\"piu\",\"tags\":{\"mrbpizcdrqj\":\"gevqznty\",\"yhxdeoejzicwi\":\"dpydn\",\"bkh\":\"sjttgzfbish\",\"alpbuxwgipwhon\":\"jdeyeamdpha\"},\"id\":\"wkgshwa\",\"name\":\"kix\",\"type\":\"bin\"}")
            .toObject(DomainInner.class);
        Assertions.assertEquals("piu", model.location());
        Assertions.assertEquals("gevqznty", model.tags().get("mrbpizcdrqj"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("gigr", model.identity().principalId());
        Assertions.assertEquals("burvjxxjnspy", model.identity().tenantId());
        Assertions.assertEquals("oenkouknvudwti",
            model.identity().userAssignedIdentities().get("pazyxoegukg").principalId());
        Assertions.assertEquals("bldngkpoc", model.identity().userAssignedIdentities().get("pazyxoegukg").clientId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("uimjmvx", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").description());
        Assertions.assertEquals("duugidyjr", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").displayName());
        Assertions.assertEquals("byao", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").documentationUrl());
        Assertions.assertEquals("e", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("th", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainInner model = new DomainInner().withLocation("piu")
            .withTags(mapOf("mrbpizcdrqj", "gevqznty", "yhxdeoejzicwi", "dpydn", "bkh", "sjttgzfbish", "alpbuxwgipwhon",
                "jdeyeamdpha"))
            .withSku(new ResourceSku().withName(Sku.BASIC))
            .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED)
                .withPrincipalId("gigr")
                .withTenantId("burvjxxjnspy")
                .withUserAssignedIdentities(mapOf("pazyxoegukg",
                    new UserIdentityProperties().withPrincipalId("oenkouknvudwti").withClientId("bldngkpoc"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
            .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("csonpclhoco",
                    new InlineEventProperties().withDescription("uimjmvx")
                        .withDisplayName("duugidyjr")
                        .withDocumentationUrl("byao")
                        .withDataSchemaUrl("e"))))
            .withInputSchemaMapping(new JsonInputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("th").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(false)
            .withAutoCreateTopicWithFirstSubscription(false)
            .withAutoDeleteTopicWithLastSubscription(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(DomainInner.class);
        Assertions.assertEquals("piu", model.location());
        Assertions.assertEquals("gevqznty", model.tags().get("mrbpizcdrqj"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("gigr", model.identity().principalId());
        Assertions.assertEquals("burvjxxjnspy", model.identity().tenantId());
        Assertions.assertEquals("oenkouknvudwti",
            model.identity().userAssignedIdentities().get("pazyxoegukg").principalId());
        Assertions.assertEquals("bldngkpoc", model.identity().userAssignedIdentities().get("pazyxoegukg").clientId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("uimjmvx", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").description());
        Assertions.assertEquals("duugidyjr", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").displayName());
        Assertions.assertEquals("byao", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").documentationUrl());
        Assertions.assertEquals("e", model.eventTypeInfo().inlineEventTypes().get("csonpclhoco").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("th", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
