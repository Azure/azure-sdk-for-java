// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.DomainInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"uzoqft\"},\"groupIds\":[\"zrnkcqvyxlwh\",\"lsicohoqqnwv\",\"ryavwhheunmmqh\",\"yxzk\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"koklya\",\"actionsRequired\":\"conuqszfkbeype\"},\"provisioningState\":\"Failed\"},\"id\":\"jmwvvj\",\"name\":\"kt\",\"type\":\"xsenhwlr\"}],\"provisioningState\":\"Failed\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"wvlqdqgb\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"phxepcyvahf\":{\"description\":\"tcktvfcivfsnky\",\"displayName\":\"ctq\",\"documentationUrl\":\"fbebrjcxer\",\"dataSchemaUrl\":\"wutttxfvjrbi\"},\"sncghkjeszz\":{\"description\":\"jky\",\"displayName\":\"j\",\"documentationUrl\":\"ujqgidok\",\"dataSchemaUrl\":\"ljyoxgvcltb\"},\"gr\":{\"description\":\"ijhtxf\",\"displayName\":\"xbf\",\"documentationUrl\":\"xnehmpvec\",\"dataSchemaUrl\":\"odebfqkkrbmpu\"},\"ynhijggme\":{\"description\":\"flz\",\"displayName\":\"bxzpuzycisp\",\"documentationUrl\":\"zahmgkbrpyydhibn\",\"dataSchemaUrl\":\"qkpikadrgvtqagnb\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"iarbutrcvpna\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"unmpxttd\",\"action\":\"Allow\"},{\"ipMask\":\"nlankxmyskpb\",\"action\":\"Allow\"},{\"ipMask\":\"tkcxywnytnrsy\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"dbabp\",\"tenantId\":\"wrqlfktsthsuco\",\"userAssignedIdentities\":{\"fey\":{\"principalId\":\"yazttbtwwrqpue\",\"clientId\":\"kzywbiex\"},\"zjancuxr\":{\"principalId\":\"axibxujw\",\"clientId\":\"qwalmuzyoxaepd\"},\"dbpgnxytxhp\":{\"principalId\":\"wbavxbniwdj\",\"clientId\":\"zt\"},\"wtctyqi\":{\"principalId\":\"bzpfzab\",\"clientId\":\"cuh\"}}},\"location\":\"bbovplwzbhvgyugu\",\"tags\":{\"sxnkjzkdeslpvlo\":\"mkfssxqukkfplgm\",\"baiuebbaumny\":\"wiyighxpkdw\",\"txp\":\"upedeojnabckhs\"},\"id\":\"ie\",\"name\":\"tfhvpesapskrdqmh\",\"type\":\"jdhtldwkyzxu\"}")
            .toObject(DomainInner.class);
        Assertions.assertEquals("bbovplwzbhvgyugu", model.location());
        Assertions.assertEquals("mkfssxqukkfplgm", model.tags().get("sxnkjzkdeslpvlo"));
        Assertions.assertEquals(Sku.PREMIUM, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("dbabp", model.identity().principalId());
        Assertions.assertEquals("wrqlfktsthsuco", model.identity().tenantId());
        Assertions.assertEquals("yazttbtwwrqpue", model.identity().userAssignedIdentities().get("fey").principalId());
        Assertions.assertEquals("kzywbiex", model.identity().userAssignedIdentities().get("fey").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("tcktvfcivfsnky",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").description());
        Assertions.assertEquals("ctq", model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").displayName());
        Assertions.assertEquals("fbebrjcxer",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").documentationUrl());
        Assertions.assertEquals("wutttxfvjrbi",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("unmpxttd", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainInner model = new DomainInner().withLocation("bbovplwzbhvgyugu")
            .withTags(
                mapOf("sxnkjzkdeslpvlo", "mkfssxqukkfplgm", "baiuebbaumny", "wiyighxpkdw", "txp", "upedeojnabckhs"))
            .withSku(new ResourceSku().withName(Sku.PREMIUM))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("dbabp")
                .withTenantId("wrqlfktsthsuco")
                .withUserAssignedIdentities(mapOf("fey",
                    new UserIdentityProperties().withPrincipalId("yazttbtwwrqpue").withClientId("kzywbiex"), "zjancuxr",
                    new UserIdentityProperties().withPrincipalId("axibxujw").withClientId("qwalmuzyoxaepd"),
                    "dbpgnxytxhp", new UserIdentityProperties().withPrincipalId("wbavxbniwdj").withClientId("zt"),
                    "wtctyqi", new UserIdentityProperties().withPrincipalId("bzpfzab").withClientId("cuh"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
            .withInputSchema(InputSchema.CLOUD_EVENT_SCHEMA_V1_0)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("phxepcyvahf",
                    new InlineEventProperties().withDescription("tcktvfcivfsnky")
                        .withDisplayName("ctq")
                        .withDocumentationUrl("fbebrjcxer")
                        .withDataSchemaUrl("wutttxfvjrbi"),
                    "sncghkjeszz",
                    new InlineEventProperties().withDescription("jky")
                        .withDisplayName("j")
                        .withDocumentationUrl("ujqgidok")
                        .withDataSchemaUrl("ljyoxgvcltb"),
                    "gr",
                    new InlineEventProperties().withDescription("ijhtxf")
                        .withDisplayName("xbf")
                        .withDocumentationUrl("xnehmpvec")
                        .withDataSchemaUrl("odebfqkkrbmpu"),
                    "ynhijggme",
                    new InlineEventProperties().withDescription("flz")
                        .withDisplayName("bxzpuzycisp")
                        .withDocumentationUrl("zahmgkbrpyydhibn")
                        .withDataSchemaUrl("qkpikadrgvtqagnb"))))
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("unmpxttd").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("nlankxmyskpb").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("tkcxywnytnrsy").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withAutoCreateTopicWithFirstSubscription(false)
            .withAutoDeleteTopicWithLastSubscription(false)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(DomainInner.class);
        Assertions.assertEquals("bbovplwzbhvgyugu", model.location());
        Assertions.assertEquals("mkfssxqukkfplgm", model.tags().get("sxnkjzkdeslpvlo"));
        Assertions.assertEquals(Sku.PREMIUM, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("dbabp", model.identity().principalId());
        Assertions.assertEquals("wrqlfktsthsuco", model.identity().tenantId());
        Assertions.assertEquals("yazttbtwwrqpue", model.identity().userAssignedIdentities().get("fey").principalId());
        Assertions.assertEquals("kzywbiex", model.identity().userAssignedIdentities().get("fey").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("tcktvfcivfsnky",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").description());
        Assertions.assertEquals("ctq", model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").displayName());
        Assertions.assertEquals("fbebrjcxer",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").documentationUrl());
        Assertions.assertEquals("wutttxfvjrbi",
            model.eventTypeInfo().inlineEventTypes().get("phxepcyvahf").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("unmpxttd", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
