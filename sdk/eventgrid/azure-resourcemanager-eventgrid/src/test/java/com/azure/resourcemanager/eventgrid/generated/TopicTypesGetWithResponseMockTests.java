// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeInfo;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicTypesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"provider\":\"qpmnu\",\"displayName\":\"hr\",\"description\":\"x\",\"resourceRegionType\":\"RegionalResource\",\"provisioningState\":\"Failed\",\"supportedLocations\":[\"vwlvivjmxmlit\",\"dsjipdviscotyxb\"],\"sourceResourceFormat\":\"ifefndslv\",\"supportedScopesForSource\":[\"ManagementGroup\",\"ManagementGroup\"],\"areRegionalAndGlobalSourcesSupported\":false,\"additionalEnforcedPermissions\":[{\"permissionName\":\"ailwdqmqfyd\",\"isDataAction\":false},{\"permissionName\":\"fxlkd\",\"isDataAction\":true}]},\"id\":\"gnamkuuyiu\",\"name\":\"uafixlxicwgp\",\"type\":\"hdcfm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        TopicTypeInfo response
            = manager.topicTypes().getWithResponse("vucgji", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("qpmnu", response.provider());
        Assertions.assertEquals("hr", response.displayName());
        Assertions.assertEquals("x", response.description());
        Assertions.assertEquals(ResourceRegionType.REGIONAL_RESOURCE, response.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.FAILED, response.provisioningState());
        Assertions.assertEquals("vwlvivjmxmlit", response.supportedLocations().get(0));
        Assertions.assertEquals("ifefndslv", response.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.MANAGEMENT_GROUP, response.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, response.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("ailwdqmqfyd", response.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, response.additionalEnforcedPermissions().get(0).isDataAction());
    }
}
