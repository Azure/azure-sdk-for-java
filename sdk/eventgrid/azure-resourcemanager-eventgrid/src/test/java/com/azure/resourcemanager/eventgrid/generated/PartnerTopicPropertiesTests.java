// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerTopicProperties;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicProperties model = BinaryData.fromString(
            "{\"partnerRegistrationImmutableId\":\"262e3c0c-1c5a-4271-bea9-06b822fc1cef\",\"source\":\"dfbzdixzmq\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"wyyu\":{\"description\":\"pqhe\",\"displayName\":\"ptmcgsbostzelnd\",\"documentationUrl\":\"tutmzl\",\"dataSchemaUrl\":\"ojlvfhrbbpneqvc\"},\"cpilj\":{\"description\":\"ochpprpr\",\"displayName\":\"mo\",\"documentationUrl\":\"yzejnhlbk\",\"dataSchemaUrl\":\"z\"},\"apjwogqqnobpudcd\":{\"description\":\"hzvechndbnwieho\",\"displayName\":\"wjwiuub\",\"documentationUrl\":\"fqsfa\",\"dataSchemaUrl\":\"qtferrqwexjkmf\"},\"jjum\":{\"description\":\"tqwpwya\",\"displayName\":\"zasqbucljgkyexao\",\"documentationUrl\":\"yaipidsda\",\"dataSchemaUrl\":\"tx\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-10-13T05:25:34Z\",\"provisioningState\":\"Deleting\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"nm\",\"messageForActivation\":\"ngz\"}")
            .toObject(PartnerTopicProperties.class);
        Assertions.assertEquals(UUID.fromString("262e3c0c-1c5a-4271-bea9-06b822fc1cef"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("dfbzdixzmq", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("pqhe", model.eventTypeInfo().inlineEventTypes().get("wyyu").description());
        Assertions.assertEquals("ptmcgsbostzelnd", model.eventTypeInfo().inlineEventTypes().get("wyyu").displayName());
        Assertions.assertEquals("tutmzl", model.eventTypeInfo().inlineEventTypes().get("wyyu").documentationUrl());
        Assertions.assertEquals("ojlvfhrbbpneqvc",
            model.eventTypeInfo().inlineEventTypes().get("wyyu").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T05:25:34Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, model.activationState());
        Assertions.assertEquals("nm", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("ngz", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicProperties model = new PartnerTopicProperties()
            .withPartnerRegistrationImmutableId(UUID.fromString("262e3c0c-1c5a-4271-bea9-06b822fc1cef"))
            .withSource("dfbzdixzmq")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("wyyu",
                    new InlineEventProperties().withDescription("pqhe")
                        .withDisplayName("ptmcgsbostzelnd")
                        .withDocumentationUrl("tutmzl")
                        .withDataSchemaUrl("ojlvfhrbbpneqvc"),
                    "cpilj",
                    new InlineEventProperties().withDescription("ochpprpr")
                        .withDisplayName("mo")
                        .withDocumentationUrl("yzejnhlbk")
                        .withDataSchemaUrl("z"),
                    "apjwogqqnobpudcd",
                    new InlineEventProperties().withDescription("hzvechndbnwieho")
                        .withDisplayName("wjwiuub")
                        .withDocumentationUrl("fqsfa")
                        .withDataSchemaUrl("qtferrqwexjkmf"),
                    "jjum",
                    new InlineEventProperties().withDescription("tqwpwya")
                        .withDisplayName("zasqbucljgkyexao")
                        .withDocumentationUrl("yaipidsda")
                        .withDataSchemaUrl("tx"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-10-13T05:25:34Z"))
            .withActivationState(PartnerTopicActivationState.DEACTIVATED)
            .withPartnerTopicFriendlyDescription("nm")
            .withMessageForActivation("ngz");
        model = BinaryData.fromObject(model).toObject(PartnerTopicProperties.class);
        Assertions.assertEquals(UUID.fromString("262e3c0c-1c5a-4271-bea9-06b822fc1cef"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("dfbzdixzmq", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("pqhe", model.eventTypeInfo().inlineEventTypes().get("wyyu").description());
        Assertions.assertEquals("ptmcgsbostzelnd", model.eventTypeInfo().inlineEventTypes().get("wyyu").displayName());
        Assertions.assertEquals("tutmzl", model.eventTypeInfo().inlineEventTypes().get("wyyu").documentationUrl());
        Assertions.assertEquals("ojlvfhrbbpneqvc",
            model.eventTypeInfo().inlineEventTypes().get("wyyu").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-13T05:25:34Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, model.activationState());
        Assertions.assertEquals("nm", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("ngz", model.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
