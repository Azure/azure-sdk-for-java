// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SystemTopicsListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"source\":\"oriobijei\",\"topicType\":\"yeuynhbokay\",\"metricResourceId\":\"wybriopdwe\"},\"identity\":{\"type\":\"None\",\"principalId\":\"w\",\"tenantId\":\"gsioc\",\"userAssignedIdentities\":{\"tfjxtvlx\":{\"principalId\":\"vjanx\",\"clientId\":\"fffhtjnwos\"}}},\"location\":\"zqfcwrriomxee\",\"tags\":{\"egmxdbsohc\":\"hjmbji\"},\"id\":\"hpyvdkgdet\",\"name\":\"z\",\"type\":\"canzb\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SystemTopic> response
            = manager.systemTopics().list("gpmillxgjs", 2123049533, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zqfcwrriomxee", response.iterator().next().location());
        Assertions.assertEquals("hjmbji", response.iterator().next().tags().get("egmxdbsohc"));
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("w", response.iterator().next().identity().principalId());
        Assertions.assertEquals("gsioc", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("vjanx",
            response.iterator().next().identity().userAssignedIdentities().get("tfjxtvlx").principalId());
        Assertions.assertEquals("fffhtjnwos",
            response.iterator().next().identity().userAssignedIdentities().get("tfjxtvlx").clientId());
        Assertions.assertEquals("oriobijei", response.iterator().next().source());
        Assertions.assertEquals("yeuynhbokay", response.iterator().next().topicType());
    }
}
