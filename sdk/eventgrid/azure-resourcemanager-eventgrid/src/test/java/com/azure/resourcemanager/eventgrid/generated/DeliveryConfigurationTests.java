// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryConfiguration;
import com.azure.resourcemanager.eventgrid.models.DeliveryMode;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class DeliveryConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeliveryConfiguration model = BinaryData.fromString(
            "{\"deliveryMode\":\"Queue\",\"queue\":{\"receiveLockDurationInSeconds\":1813944379,\"maxDeliveryCount\":122630062,\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"doamciodhkha\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"eventTimeToLive\":\"PT170H33M16S\"},\"push\":{\"maxDeliveryCount\":690663010,\"eventTimeToLive\":\"nlwntoe\",\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"whkszzcmrvexztvb\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"oyzko\"},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}}}}")
            .toObject(DeliveryConfiguration.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.deliveryMode());
        Assertions.assertEquals(1813944379, model.queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(122630062, model.queue().maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.queue().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("doamciodhkha",
            model.queue().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT170H33M16S"), model.queue().eventTimeToLive());
        Assertions.assertEquals(690663010, model.push().maxDeliveryCount());
        Assertions.assertEquals("nlwntoe", model.push().eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("whkszzcmrvexztvb",
            model.push().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("oyzko", model.push().deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeliveryConfiguration model
            = new DeliveryConfiguration().withDeliveryMode(DeliveryMode.QUEUE)
                .withQueue(
                    new QueueInfo().withReceiveLockDurationInSeconds(1813944379).withMaxDeliveryCount(122630062)
                        .withDeadLetterDestinationWithResourceIdentity(
                            new DeadLetterWithResourceIdentity().withIdentity(
                                new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                    .withUserAssignedIdentity("doamciodhkha"))
                                .withDeadLetterDestination(new DeadLetterDestination()))
                        .withEventTimeToLive(Duration.parse("PT170H33M16S")))
                .withPush(new PushInfo().withMaxDeliveryCount(690663010).withEventTimeToLive("nlwntoe")
                    .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentity("whkszzcmrvexztvb"))
                        .withDeadLetterDestination(new DeadLetterDestination()))
                    .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                        .withIdentity(new EventSubscriptionIdentity()
                            .withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED).withUserAssignedIdentity("oyzko"))
                        .withDestination(new EventSubscriptionDestination())));
        model = BinaryData.fromObject(model).toObject(DeliveryConfiguration.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.deliveryMode());
        Assertions.assertEquals(1813944379, model.queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(122630062, model.queue().maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.queue().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("doamciodhkha",
            model.queue().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT170H33M16S"), model.queue().eventTimeToLive());
        Assertions.assertEquals(690663010, model.push().maxDeliveryCount());
        Assertions.assertEquals("nlwntoe", model.push().eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("whkszzcmrvexztvb",
            model.push().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("oyzko", model.push().deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }
}
