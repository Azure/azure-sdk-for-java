// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryConfiguration;
import com.azure.resourcemanager.eventgrid.models.DeliveryMode;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class DeliveryConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeliveryConfiguration model = BinaryData.fromString(
            "{\"deliveryMode\":\"Queue\",\"queue\":{\"receiveLockDurationInSeconds\":196443624,\"maxDeliveryCount\":1452791149,\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"zxkhnzbonlwnto\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"eventTimeToLive\":\"PT65H22M18S\"},\"push\":{\"maxDeliveryCount\":542586349,\"eventTimeToLive\":\"hksz\",\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"xztvbtqgsfraoyzk\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"guxawqaldsyuuxi\"},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}}}")
            .toObject(DeliveryConfiguration.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.deliveryMode());
        Assertions.assertEquals(196443624, model.queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(1452791149, model.queue().maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.queue().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("zxkhnzbonlwnto",
            model.queue().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT65H22M18S"), model.queue().eventTimeToLive());
        Assertions.assertEquals(542586349, model.push().maxDeliveryCount());
        Assertions.assertEquals("hksz", model.push().eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.push().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("xztvbtqgsfraoyzk",
            model.push().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.push().deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("guxawqaldsyuuxi",
            model.push().deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeliveryConfiguration model = new DeliveryConfiguration().withDeliveryMode(DeliveryMode.QUEUE)
            .withQueue(new QueueInfo().withReceiveLockDurationInSeconds(196443624)
                .withMaxDeliveryCount(1452791149)
                .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                    .withIdentity(
                        new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentity("zxkhnzbonlwnto"))
                    .withDeadLetterDestination(new DeadLetterDestination()))
                .withEventTimeToLive(Duration.parse("PT65H22M18S")))
            .withPush(new PushInfo().withMaxDeliveryCount(542586349)
                .withEventTimeToLive("hksz")
                .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                    .withIdentity(new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity("xztvbtqgsfraoyzk"))
                    .withDeadLetterDestination(new DeadLetterDestination()))
                .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                    .withIdentity(new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity("guxawqaldsyuuxi"))
                    .withDestination(new EventSubscriptionDestination()))
                .withDestination(new EventSubscriptionDestination()));
        model = BinaryData.fromObject(model).toObject(DeliveryConfiguration.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.deliveryMode());
        Assertions.assertEquals(196443624, model.queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(1452791149, model.queue().maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.queue().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("zxkhnzbonlwnto",
            model.queue().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT65H22M18S"), model.queue().eventTimeToLive());
        Assertions.assertEquals(542586349, model.push().maxDeliveryCount());
        Assertions.assertEquals("hksz", model.push().eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.push().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("xztvbtqgsfraoyzk",
            model.push().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.push().deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("guxawqaldsyuuxi",
            model.push().deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }
}
