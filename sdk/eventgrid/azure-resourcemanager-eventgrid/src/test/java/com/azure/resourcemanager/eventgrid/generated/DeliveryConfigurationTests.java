// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryConfiguration;
import com.azure.resourcemanager.eventgrid.models.DeliveryMode;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class DeliveryConfigurationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DeliveryConfiguration model = BinaryData.fromString(
            "{\"deliveryMode\":\"Queue\",\"queue\":{\"receiveLockDurationInSeconds\":1447033048,\"maxDeliveryCount\":2116821034,\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"o\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"eventTimeToLive\":\"PT227H49M50S\"},\"push\":{\"maxDeliveryCount\":745673634,\"eventTimeToLive\":\"ohfwds\",\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"utiiswacf\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"wkfvhqcrailvp\"},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}}}")
            .toObject(DeliveryConfiguration.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.deliveryMode());
        Assertions.assertEquals(1447033048, model.queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(2116821034, model.queue().maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.queue().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("o",
            model.queue().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT227H49M50S"), model.queue().eventTimeToLive());
        Assertions.assertEquals(745673634, model.push().maxDeliveryCount());
        Assertions.assertEquals("ohfwds", model.push().eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("utiiswacf",
            model.push().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("wkfvhqcrailvp",
            model.push().deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DeliveryConfiguration model
            = new DeliveryConfiguration().withDeliveryMode(DeliveryMode.QUEUE)
                .withQueue(new QueueInfo().withReceiveLockDurationInSeconds(1447033048)
                    .withMaxDeliveryCount(2116821034)
                    .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentity("o"))
                        .withDeadLetterDestination(new DeadLetterDestination()))
                    .withEventTimeToLive(Duration.parse("PT227H49M50S")))
                .withPush(new PushInfo().withMaxDeliveryCount(745673634)
                    .withEventTimeToLive("ohfwds")
                    .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentity("utiiswacf"))
                        .withDeadLetterDestination(new DeadLetterDestination()))
                    .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                                .withUserAssignedIdentity("wkfvhqcrailvp"))
                        .withDestination(new EventSubscriptionDestination()))
                    .withDestination(new EventSubscriptionDestination()));
        model = BinaryData.fromObject(model).toObject(DeliveryConfiguration.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.deliveryMode());
        Assertions.assertEquals(1447033048, model.queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(2116821034, model.queue().maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.queue().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("o",
            model.queue().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT227H49M50S"), model.queue().eventTimeToLive());
        Assertions.assertEquals(745673634, model.push().maxDeliveryCount());
        Assertions.assertEquals("ohfwds", model.push().eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("utiiswacf",
            model.push().deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.push().deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("wkfvhqcrailvp",
            model.push().deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }
}
