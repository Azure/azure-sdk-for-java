// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.eventgrid.models.ConnectionState;
import com.azure.resourcemanager.eventgrid.models.PersistedConnectionStatus;
import com.azure.resourcemanager.eventgrid.models.PrivateEndpoint;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class PrivateEndpointConnectionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PrivateEndpointConnectionInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpoint\":{\"id\":\"bfs\"},\"groupIds\":[\"butr\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"zzmhjrunmpxttd\",\"actionsRequired\":\"rbnlankxmyskp\"},\"provisioningState\":\"Succeeded\"},\"id\":\"nbtkcxywnytnr\",\"name\":\"yn\",\"type\":\"qidybyx\"}")
            .toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("bfs", model.privateEndpoint().id());
        Assertions.assertEquals("butr", model.groupIds().get(0));
        Assertions.assertEquals(PersistedConnectionStatus.PENDING, model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("zzmhjrunmpxttd", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("rbnlankxmyskp", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED, model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PrivateEndpointConnectionInner model = new PrivateEndpointConnectionInner()
            .withPrivateEndpoint(new PrivateEndpoint().withId("bfs"))
            .withGroupIds(Arrays.asList("butr"))
            .withPrivateLinkServiceConnectionState(new ConnectionState().withStatus(PersistedConnectionStatus.PENDING)
                .withDescription("zzmhjrunmpxttd")
                .withActionsRequired("rbnlankxmyskp"))
            .withProvisioningState(ResourceProvisioningState.SUCCEEDED);
        model = BinaryData.fromObject(model).toObject(PrivateEndpointConnectionInner.class);
        Assertions.assertEquals("bfs", model.privateEndpoint().id());
        Assertions.assertEquals("butr", model.groupIds().get(0));
        Assertions.assertEquals(PersistedConnectionStatus.PENDING, model.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("zzmhjrunmpxttd", model.privateLinkServiceConnectionState().description());
        Assertions.assertEquals("rbnlankxmyskp", model.privateLinkServiceConnectionState().actionsRequired());
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED, model.provisioningState());
    }
}
