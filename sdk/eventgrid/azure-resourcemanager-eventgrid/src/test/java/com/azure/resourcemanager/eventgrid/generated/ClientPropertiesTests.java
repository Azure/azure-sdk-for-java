// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ClientProperties;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClientPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClientProperties model = BinaryData.fromString(
            "{\"description\":\"bxetqgtzxdpn\",\"authenticationName\":\"qqwx\",\"clientCertificateAuthentication\":{\"validationScheme\":\"IpMatchesAuthenticationName\",\"allowedThumbprints\":[\"lnwsubisn\",\"ampmngnz\"]},\"state\":\"Disabled\",\"attributes\":{\"cbonqvpk\":\"datawooc\",\"f\":\"datalrxnjeaseiphe\",\"dlwtgrhpdj\":\"dataokeyyienj\"},\"provisioningState\":\"Canceled\"}")
            .toObject(ClientProperties.class);
        Assertions.assertEquals("bxetqgtzxdpn", model.description());
        Assertions.assertEquals("qqwx", model.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME,
            model.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("lnwsubisn", model.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.DISABLED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClientProperties model = new ClientProperties().withDescription("bxetqgtzxdpn")
            .withAuthenticationName("qqwx")
            .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                .withValidationScheme(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME)
                .withAllowedThumbprints(Arrays.asList("lnwsubisn", "ampmngnz")))
            .withState(ClientState.DISABLED)
            .withAttributes(mapOf("cbonqvpk", "datawooc", "f", "datalrxnjeaseiphe", "dlwtgrhpdj", "dataokeyyienj"));
        model = BinaryData.fromObject(model).toObject(ClientProperties.class);
        Assertions.assertEquals("bxetqgtzxdpn", model.description());
        Assertions.assertEquals("qqwx", model.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME,
            model.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("lnwsubisn", model.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.DISABLED, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
