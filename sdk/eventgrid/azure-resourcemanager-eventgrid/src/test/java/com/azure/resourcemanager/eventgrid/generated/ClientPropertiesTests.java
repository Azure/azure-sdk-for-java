// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ClientProperties;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClientPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClientProperties model = BinaryData.fromString(
            "{\"description\":\"ctbqvudwx\",\"authenticationName\":\"dnvowg\",\"clientCertificateAuthentication\":{\"validationScheme\":\"ThumbprintMatch\",\"allowedThumbprints\":[\"dkcglhsl\",\"zj\",\"yggdtjixh\"]},\"state\":\"Enabled\",\"attributes\":{\"yexfwh\":\"dataqweykhmenev\",\"amdecte\":\"databcibvyvdcsitynn\",\"qsc\":\"dataf\"},\"provisioningState\":\"Updating\"}")
            .toObject(ClientProperties.class);
        Assertions.assertEquals("ctbqvudwx", model.description());
        Assertions.assertEquals("dnvowg", model.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.THUMBPRINT_MATCH,
            model.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("dkcglhsl", model.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, model.state());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClientProperties model = new ClientProperties().withDescription("ctbqvudwx")
            .withAuthenticationName("dnvowg")
            .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                .withValidationScheme(ClientCertificateValidationScheme.THUMBPRINT_MATCH)
                .withAllowedThumbprints(Arrays.asList("dkcglhsl", "zj", "yggdtjixh")))
            .withState(ClientState.ENABLED)
            .withAttributes(mapOf("yexfwh", "dataqweykhmenev", "amdecte", "databcibvyvdcsitynn", "qsc", "dataf"));
        model = BinaryData.fromObject(model).toObject(ClientProperties.class);
        Assertions.assertEquals("ctbqvudwx", model.description());
        Assertions.assertEquals("dnvowg", model.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.THUMBPRINT_MATCH,
            model.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("dkcglhsl", model.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, model.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
