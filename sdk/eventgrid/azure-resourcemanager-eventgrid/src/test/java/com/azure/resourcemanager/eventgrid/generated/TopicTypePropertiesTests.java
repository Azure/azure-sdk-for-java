// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicTypeProperties;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeAdditionalEnforcedPermission;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TopicTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicTypeProperties model = BinaryData.fromString(
            "{\"provider\":\"xhmtfhocnxzc\",\"displayName\":\"hngxnoqrxtd\",\"description\":\"njevhdlmydidw\",\"resourceRegionType\":\"RegionalResource\",\"provisioningState\":\"Succeeded\",\"supportedLocations\":[\"jfdoesxxhm\",\"cdbcky\",\"ikxkxhneg\"],\"sourceResourceFormat\":\"jzrbhtmeplv\",\"supportedScopesForSource\":[\"Resource\",\"ResourceGroup\"],\"areRegionalAndGlobalSourcesSupported\":false,\"additionalEnforcedPermissions\":[{\"permissionName\":\"snbagnchjhg\",\"isDataAction\":false}]}")
            .toObject(TopicTypeProperties.class);
        Assertions.assertEquals("xhmtfhocnxzc", model.provider());
        Assertions.assertEquals("hngxnoqrxtd", model.displayName());
        Assertions.assertEquals("njevhdlmydidw", model.description());
        Assertions.assertEquals(ResourceRegionType.REGIONAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("jfdoesxxhm", model.supportedLocations().get(0));
        Assertions.assertEquals("jzrbhtmeplv", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("snbagnchjhg", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, model.additionalEnforcedPermissions().get(0).isDataAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicTypeProperties model = new TopicTypeProperties().withProvider("xhmtfhocnxzc")
            .withDisplayName("hngxnoqrxtd")
            .withDescription("njevhdlmydidw")
            .withResourceRegionType(ResourceRegionType.REGIONAL_RESOURCE)
            .withProvisioningState(TopicTypeProvisioningState.SUCCEEDED)
            .withSupportedLocations(Arrays.asList("jfdoesxxhm", "cdbcky", "ikxkxhneg"))
            .withSourceResourceFormat("jzrbhtmeplv")
            .withSupportedScopesForSource(
                Arrays.asList(TopicTypeSourceScope.RESOURCE, TopicTypeSourceScope.RESOURCE_GROUP))
            .withAreRegionalAndGlobalSourcesSupported(false)
            .withAdditionalEnforcedPermissions(Arrays.asList(
                new TopicTypeAdditionalEnforcedPermission().withPermissionName("snbagnchjhg").withIsDataAction(false)));
        model = BinaryData.fromObject(model).toObject(TopicTypeProperties.class);
        Assertions.assertEquals("xhmtfhocnxzc", model.provider());
        Assertions.assertEquals("hngxnoqrxtd", model.displayName());
        Assertions.assertEquals("njevhdlmydidw", model.description());
        Assertions.assertEquals(ResourceRegionType.REGIONAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("jfdoesxxhm", model.supportedLocations().get(0));
        Assertions.assertEquals("jzrbhtmeplv", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("snbagnchjhg", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, model.additionalEnforcedPermissions().get(0).isDataAction());
    }
}
