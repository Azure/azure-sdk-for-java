// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicTypeProperties;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeAdditionalEnforcedPermission;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TopicTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicTypeProperties model = BinaryData.fromString(
            "{\"provider\":\"ehpavawugiqjtiog\",\"displayName\":\"dminic\",\"description\":\"eajohiyg\",\"resourceRegionType\":\"RegionalResource\",\"provisioningState\":\"Succeeded\",\"supportedLocations\":[\"pczykmktpvwxqc\",\"ehchk\",\"ufmpqumqyjgy\"],\"sourceResourceFormat\":\"ulodsaeuzanhsfnh\",\"supportedScopesForSource\":[\"AzureSubscription\"],\"areRegionalAndGlobalSourcesSupported\":false,\"additionalEnforcedPermissions\":[{\"permissionName\":\"ngqjclidf\",\"isDataAction\":false}]}")
            .toObject(TopicTypeProperties.class);
        Assertions.assertEquals("ehpavawugiqjtiog", model.provider());
        Assertions.assertEquals("dminic", model.displayName());
        Assertions.assertEquals("eajohiyg", model.description());
        Assertions.assertEquals(ResourceRegionType.REGIONAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("pczykmktpvwxqc", model.supportedLocations().get(0));
        Assertions.assertEquals("ulodsaeuzanhsfnh", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.AZURE_SUBSCRIPTION, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("ngqjclidf", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, model.additionalEnforcedPermissions().get(0).isDataAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicTypeProperties model = new TopicTypeProperties().withProvider("ehpavawugiqjtiog")
            .withDisplayName("dminic")
            .withDescription("eajohiyg")
            .withResourceRegionType(ResourceRegionType.REGIONAL_RESOURCE)
            .withProvisioningState(TopicTypeProvisioningState.SUCCEEDED)
            .withSupportedLocations(Arrays.asList("pczykmktpvwxqc", "ehchk", "ufmpqumqyjgy"))
            .withSourceResourceFormat("ulodsaeuzanhsfnh")
            .withSupportedScopesForSource(Arrays.asList(TopicTypeSourceScope.AZURE_SUBSCRIPTION))
            .withAreRegionalAndGlobalSourcesSupported(false)
            .withAdditionalEnforcedPermissions(Arrays.asList(
                new TopicTypeAdditionalEnforcedPermission().withPermissionName("ngqjclidf").withIsDataAction(false)));
        model = BinaryData.fromObject(model).toObject(TopicTypeProperties.class);
        Assertions.assertEquals("ehpavawugiqjtiog", model.provider());
        Assertions.assertEquals("dminic", model.displayName());
        Assertions.assertEquals("eajohiyg", model.description());
        Assertions.assertEquals(ResourceRegionType.REGIONAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.SUCCEEDED, model.provisioningState());
        Assertions.assertEquals("pczykmktpvwxqc", model.supportedLocations().get(0));
        Assertions.assertEquals("ulodsaeuzanhsfnh", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.AZURE_SUBSCRIPTION, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("ngqjclidf", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, model.additionalEnforcedPermissions().get(0).isDataAction());
    }
}
