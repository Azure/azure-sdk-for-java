// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicTypeProperties;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeAdditionalEnforcedPermission;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TopicTypePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicTypeProperties model = BinaryData.fromString(
            "{\"provider\":\"jpodtbl\",\"displayName\":\"kkwjdjodq\",\"description\":\"kincnremeh\",\"resourceRegionType\":\"GlobalResource\",\"provisioningState\":\"Updating\",\"supportedLocations\":[\"umoqodkad\",\"pyi\"],\"sourceResourceFormat\":\"gqladywrxwhyd\",\"supportedScopesForSource\":[\"ResourceGroup\",\"ResourceGroup\",\"ResourceGroup\"],\"areRegionalAndGlobalSourcesSupported\":true,\"additionalEnforcedPermissions\":[{\"permissionName\":\"nuyemlowuo\",\"isDataAction\":true}]}")
            .toObject(TopicTypeProperties.class);
        Assertions.assertEquals("jpodtbl", model.provider());
        Assertions.assertEquals("kkwjdjodq", model.displayName());
        Assertions.assertEquals("kincnremeh", model.description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals("umoqodkad", model.supportedLocations().get(0));
        Assertions.assertEquals("gqladywrxwhyd", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(true, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("nuyemlowuo", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(true, model.additionalEnforcedPermissions().get(0).isDataAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicTypeProperties model = new TopicTypeProperties().withProvider("jpodtbl").withDisplayName("kkwjdjodq")
            .withDescription("kincnremeh").withResourceRegionType(ResourceRegionType.GLOBAL_RESOURCE)
            .withProvisioningState(TopicTypeProvisioningState.UPDATING)
            .withSupportedLocations(Arrays.asList("umoqodkad", "pyi")).withSourceResourceFormat("gqladywrxwhyd")
            .withSupportedScopesForSource(Arrays.asList(TopicTypeSourceScope.RESOURCE_GROUP,
                TopicTypeSourceScope.RESOURCE_GROUP, TopicTypeSourceScope.RESOURCE_GROUP))
            .withAreRegionalAndGlobalSourcesSupported(true).withAdditionalEnforcedPermissions(Arrays.asList(
                new TopicTypeAdditionalEnforcedPermission().withPermissionName("nuyemlowuo").withIsDataAction(true)));
        model = BinaryData.fromObject(model).toObject(TopicTypeProperties.class);
        Assertions.assertEquals("jpodtbl", model.provider());
        Assertions.assertEquals("kkwjdjodq", model.displayName());
        Assertions.assertEquals("kincnremeh", model.description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals("umoqodkad", model.supportedLocations().get(0));
        Assertions.assertEquals("gqladywrxwhyd", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(true, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("nuyemlowuo", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(true, model.additionalEnforcedPermissions().get(0).isDataAction());
    }
}
