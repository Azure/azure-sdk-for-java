// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.AlternativeAuthenticationNameSource;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class NamespacesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"anvxuldxonckb\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"fxlupibaq\",\"name\":\"izxzpzweghl\",\"type\":\"wbogvgfklqiy\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"elsbfvd\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"zxsgtznsv\",\"name\":\"rds\",\"type\":\"o\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ndnoxaxnrqaq\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"dxolousdv\",\"name\":\"g\",\"type\":\"tqm\"}],\"provisioningState\":\"CreateFailed\",\"topicsConfiguration\":{\"hostname\":\"rp\"},\"topicSpacesConfiguration\":{\"state\":\"Enabled\",\"routeTopicResourceId\":\"gyc\",\"hostname\":\"dbtqgkujd\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{},{},{}]},\"clientAuthentication\":{\"alternativeAuthenticationNameSources\":[\"ClientCertificateUri\",\"ClientCertificateUri\",\"ClientCertificateEmail\",\"ClientCertificateDns\"]},\"maximumSessionExpiryInHours\":916144988,\"maximumClientSessionsPerAuthenticationName\":1186610180,\"routingIdentityInfo\":{\"type\":\"None\",\"userAssignedIdentity\":\"ikeej\"}},\"isZoneRedundant\":true,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"mkfqbriqulwwt\",\"action\":\"Allow\"},{\"ipMask\":\"qkvyhzokpoyuohu\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.1\"},\"sku\":{\"name\":\"Standard\",\"capacity\":1396784523},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"nglpwsada\",\"tenantId\":\"sumxpezcoioyj\",\"userAssignedIdentities\":{\"nwmywxfqzkvemy\":{\"principalId\":\"zw\",\"clientId\":\"nxkeed\"},\"trwtxzuisam\":{\"principalId\":\"pczaqpqif\",\"clientId\":\"m\"},\"mthsp\":{\"principalId\":\"at\",\"clientId\":\"zexroqsqjgh\"}}},\"location\":\"sttxs\",\"tags\":{\"aniceovxgzwh\":\"fq\"},\"id\":\"xyrujmt\",\"name\":\"kesliky\",\"type\":\"hzixyqhfnkvy\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Namespace> response = manager.namespaces().listByResourceGroup("tpjfojiunrlshxuk", "sykdtoi",
            1908714602, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("sttxs", response.iterator().next().location());
        Assertions.assertEquals("fq", response.iterator().next().tags().get("aniceovxgzwh"));
        Assertions.assertEquals(SkuName.STANDARD, response.iterator().next().sku().name());
        Assertions.assertEquals(1396784523, response.iterator().next().sku().capacity());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("nglpwsada", response.iterator().next().identity().principalId());
        Assertions.assertEquals("sumxpezcoioyj", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("zw",
            response.iterator().next().identity().userAssignedIdentities().get("nwmywxfqzkvemy").principalId());
        Assertions.assertEquals("nxkeed",
            response.iterator().next().identity().userAssignedIdentities().get("nwmywxfqzkvemy").clientId());
        Assertions.assertEquals("anvxuldxonckb",
            response.iterator().next().privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.SUCCEEDED,
            response.iterator().next().privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals(TopicSpacesConfigurationState.ENABLED,
            response.iterator().next().topicSpacesConfiguration().state());
        Assertions.assertEquals("gyc", response.iterator().next().topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(AlternativeAuthenticationNameSource.CLIENT_CERTIFICATE_URI, response.iterator().next()
            .topicSpacesConfiguration().clientAuthentication().alternativeAuthenticationNameSources().get(0));
        Assertions.assertEquals(916144988,
            response.iterator().next().topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(1186610180,
            response.iterator().next().topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.NONE,
            response.iterator().next().topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("ikeej",
            response.iterator().next().topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals(true, response.iterator().next().isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("mkfqbriqulwwt", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.iterator().next().minimumTlsVersionAllowed());
    }
}
