// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.CustomDomainValidationState;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.Namespace;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceProvisioningState;
import com.azure.resourcemanager.eventgrid.models.RoutingIdentityType;
import com.azure.resourcemanager.eventgrid.models.SkuName;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicSpacesConfigurationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class NamespacesListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"tireimse\",\"bfsx\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"ilbvzmmxcjzl\",\"name\":\"uzexokjxebjvbzin\",\"type\":\"abwmvogljsv\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"nwcehaqidoyzl\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"mqoqpepiaeapfse\",\"name\":\"gdtpe\",\"type\":\"nacyheqwb\"}],\"provisioningState\":\"Deleted\",\"topicsConfiguration\":{\"hostname\":\"jubkhjozfymcwmb\",\"customDomains\":[{\"fullyQualifiedDomainName\":\"vqyvl\",\"validationState\":\"Pending\",\"identity\":{},\"certificateUrl\":\"sejb\",\"expectedTxtRecordName\":\"si\",\"expectedTxtRecordValue\":\"eswhd\"},{\"fullyQualifiedDomainName\":\"zydisnuep\",\"validationState\":\"Pending\",\"identity\":{},\"certificateUrl\":\"nldpxottd\",\"expectedTxtRecordName\":\"aocqibzjih\",\"expectedTxtRecordValue\":\"ebiphryvcjwqwoq\"},{\"fullyQualifiedDomainName\":\"ratjhdhzybspij\",\"validationState\":\"Approved\",\"identity\":{},\"certificateUrl\":\"dkkagvwukhsusmm\",\"expectedTxtRecordName\":\"fmz\",\"expectedTxtRecordValue\":\"ilz\"}]},\"topicSpacesConfiguration\":{\"state\":\"Disabled\",\"routeTopicResourceId\":\"mriprlk\",\"hostname\":\"eyttlrcxiv\",\"routingEnrichments\":{\"static\":[{\"valueType\":\"StaticRoutingEnrichment\"},{\"valueType\":\"StaticRoutingEnrichment\"}],\"dynamic\":[{},{},{},{}]},\"maximumSessionExpiryInHours\":1972373952,\"maximumClientSessionsPerAuthenticationName\":789169678,\"routingIdentityInfo\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"uxynb\"},\"customDomains\":[{\"fullyQualifiedDomainName\":\"l\",\"validationState\":\"Pending\",\"identity\":{},\"certificateUrl\":\"y\",\"expectedTxtRecordName\":\"jckhmocgj\",\"expectedTxtRecordValue\":\"gouarhwvixqq\"},{\"fullyQualifiedDomainName\":\"gljkybsj\",\"validationState\":\"Approved\",\"identity\":{},\"certificateUrl\":\"tzqnrbctbhpjh\",\"expectedTxtRecordName\":\"cvrdnyeitaneqady\",\"expectedTxtRecordValue\":\"jahwriuomzczf\"},{\"fullyQualifiedDomainName\":\"iceevsaaxwspca\",\"validationState\":\"Approved\",\"identity\":{},\"certificateUrl\":\"jqeb\",\"expectedTxtRecordName\":\"cx\",\"expectedTxtRecordValue\":\"gzzromv\"}]},\"isZoneRedundant\":true,\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"esrfsvpinkzpatq\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.2\"},\"sku\":{\"name\":\"Standard\",\"capacity\":689179131},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"zbbgspftesubzpvp\",\"tenantId\":\"ylytcovqseusr\",\"userAssignedIdentities\":{\"kjmdihdcyy\":{\"principalId\":\"xzfxn\",\"clientId\":\"lbmuos\"},\"zuubjtvgjsxm\":{\"principalId\":\"lwhbwzjnu\",\"clientId\":\"rfgmdqgnnbzrtfte\"},\"titsf\":{\"principalId\":\"jjvavdpww\",\"clientId\":\"tdp\"},\"wgybj\":{\"principalId\":\"fwanm\",\"clientId\":\"scauwazcgwdfr\"}}},\"location\":\"zokscvg\",\"tags\":{\"gbyfgwe\":\"x\",\"xlcskltez\":\"qkjvxprwpxsoohu\",\"srtmdylperpiltt\":\"ugggzlfbgrdcgu\",\"resrgvtshuvft\":\"zgczfcmfpfbode\"},\"id\":\"ai\",\"name\":\"muqkevzgjypanhx\",\"type\":\"pdxxzetwwz\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Namespace> response = manager.namespaces()
            .listByResourceGroup("dcdjhunh", "hcgawn", 1900085182, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("zokscvg", response.iterator().next().location());
        Assertions.assertEquals("x", response.iterator().next().tags().get("gbyfgwe"));
        Assertions.assertEquals(SkuName.STANDARD, response.iterator().next().sku().name());
        Assertions.assertEquals(689179131, response.iterator().next().sku().capacity());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("zbbgspftesubzpvp", response.iterator().next().identity().principalId());
        Assertions.assertEquals("ylytcovqseusr", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("xzfxn",
            response.iterator().next().identity().userAssignedIdentities().get("kjmdihdcyy").principalId());
        Assertions.assertEquals("lbmuos",
            response.iterator().next().identity().userAssignedIdentities().get("kjmdihdcyy").clientId());
        Assertions.assertEquals("tireimse",
            response.iterator().next().privateEndpointConnections().get(0).groupIds().get(0));
        Assertions.assertEquals(ResourceProvisioningState.DELETING,
            response.iterator().next().privateEndpointConnections().get(0).provisioningState());
        Assertions.assertEquals("vqyvl",
            response.iterator().next().topicsConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(CustomDomainValidationState.PENDING,
            response.iterator().next().topicsConfiguration().customDomains().get(0).validationState());
        Assertions.assertEquals("sejb",
            response.iterator().next().topicsConfiguration().customDomains().get(0).certificateUrl());
        Assertions.assertEquals("si",
            response.iterator().next().topicsConfiguration().customDomains().get(0).expectedTxtRecordName());
        Assertions.assertEquals("eswhd",
            response.iterator().next().topicsConfiguration().customDomains().get(0).expectedTxtRecordValue());
        Assertions.assertEquals(TopicSpacesConfigurationState.DISABLED,
            response.iterator().next().topicSpacesConfiguration().state());
        Assertions.assertEquals("mriprlk",
            response.iterator().next().topicSpacesConfiguration().routeTopicResourceId());
        Assertions.assertEquals(1972373952,
            response.iterator().next().topicSpacesConfiguration().maximumSessionExpiryInHours());
        Assertions.assertEquals(789169678,
            response.iterator().next().topicSpacesConfiguration().maximumClientSessionsPerAuthenticationName());
        Assertions.assertEquals(RoutingIdentityType.SYSTEM_ASSIGNED,
            response.iterator().next().topicSpacesConfiguration().routingIdentityInfo().type());
        Assertions.assertEquals("uxynb",
            response.iterator().next().topicSpacesConfiguration().routingIdentityInfo().userAssignedIdentity());
        Assertions.assertEquals("l",
            response.iterator().next().topicSpacesConfiguration().customDomains().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(CustomDomainValidationState.PENDING,
            response.iterator().next().topicSpacesConfiguration().customDomains().get(0).validationState());
        Assertions.assertEquals("y",
            response.iterator().next().topicSpacesConfiguration().customDomains().get(0).certificateUrl());
        Assertions.assertEquals("jckhmocgj",
            response.iterator().next().topicSpacesConfiguration().customDomains().get(0).expectedTxtRecordName());
        Assertions.assertEquals("gouarhwvixqq",
            response.iterator().next().topicSpacesConfiguration().customDomains().get(0).expectedTxtRecordValue());
        Assertions.assertEquals(true, response.iterator().next().isZoneRedundant());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("esrfsvpinkzpatq", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, response.iterator().next().minimumTlsVersionAllowed());
    }
}
