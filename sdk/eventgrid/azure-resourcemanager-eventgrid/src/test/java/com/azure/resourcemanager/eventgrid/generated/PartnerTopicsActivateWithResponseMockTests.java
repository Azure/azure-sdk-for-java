// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsActivateWithResponseMockTests {
    @Test
    public void testActivateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"3565650d-eac5-47a5-a420-4b191ca7ed6a\",\"source\":\"joxtdahne\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"e\":{\"description\":\"ztivfwjl\",\"displayName\":\"zekfsrmauklajv\",\"documentationUrl\":\"oczhapejovtk\",\"dataSchemaUrl\":\"nhwhhnoyrzaao\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-10-09T20:50:13Z\",\"provisioningState\":\"Updating\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"eat\",\"messageForActivation\":\"xxcrxoxdjxld\"},\"identity\":{\"type\":\"None\",\"principalId\":\"nzkdolrndwdbvxvz\",\"tenantId\":\"edoyqxlunkft\",\"userAssignedIdentities\":{\"divznl\":{\"principalId\":\"qqxmyzklaoanpoh\",\"clientId\":\"mzrqraz\"},\"roigbsfsgsaenwld\":{\"principalId\":\"slkskhjqjpvbai\",\"clientId\":\"jtgzgtaiywbq\"},\"ryldsxeb\":{\"principalId\":\"hljqlxsp\",\"clientId\":\"jc\"},\"yckhefrbhseue\":{\"principalId\":\"sxrznmg\",\"clientId\":\"al\"}}},\"location\":\"bgpxebjlu\",\"tags\":{\"d\":\"ytujra\",\"gtnse\":\"pryj\",\"s\":\"ouxly\",\"lmpctwj\":\"vyljurkeposehqq\"},\"id\":\"dsdlzmk\",\"name\":\"erxxxoteehkhowgo\",\"type\":\"vvh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PartnerTopic response = manager.partnerTopics()
            .activateWithResponse("vxcgdhyhgoqgs", "yqyxyjrcbqpbis", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("bgpxebjlu", response.location());
        Assertions.assertEquals("ytujra", response.tags().get("d"));
        Assertions.assertEquals(IdentityType.NONE, response.identity().type());
        Assertions.assertEquals("nzkdolrndwdbvxvz", response.identity().principalId());
        Assertions.assertEquals("edoyqxlunkft", response.identity().tenantId());
        Assertions.assertEquals("qqxmyzklaoanpoh",
            response.identity().userAssignedIdentities().get("divznl").principalId());
        Assertions.assertEquals("mzrqraz", response.identity().userAssignedIdentities().get("divznl").clientId());
        Assertions.assertEquals(UUID.fromString("3565650d-eac5-47a5-a420-4b191ca7ed6a"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("joxtdahne", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("ztivfwjl", response.eventTypeInfo().inlineEventTypes().get("e").description());
        Assertions.assertEquals("zekfsrmauklajv", response.eventTypeInfo().inlineEventTypes().get("e").displayName());
        Assertions.assertEquals("oczhapejovtk",
            response.eventTypeInfo().inlineEventTypes().get("e").documentationUrl());
        Assertions.assertEquals("nhwhhnoyrzaao", response.eventTypeInfo().inlineEventTypes().get("e").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-09T20:50:13Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, response.activationState());
        Assertions.assertEquals("eat", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("xxcrxoxdjxld", response.messageForActivation());
    }
}
