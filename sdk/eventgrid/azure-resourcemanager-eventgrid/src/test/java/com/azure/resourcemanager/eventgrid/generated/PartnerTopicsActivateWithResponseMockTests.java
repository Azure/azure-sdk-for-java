// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PartnerTopicsActivateWithResponseMockTests {
    @Test
    public void testActivateWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"partnerRegistrationImmutableId\":\"5a63ffee-8a07-46ca-ab97-7134898dfe4c\",\"source\":\"xeezwyhjmbjiqe\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"vnensmuffiw\":{\"description\":\"hc\",\"displayName\":\"pyvdkgdets\",\"documentationUrl\":\"canzb\",\"dataSchemaUrl\":\"kwuyck\"},\"dxjxdu\":{\"description\":\"ctvbpzujqjtotdx\",\"displayName\":\"scsl\",\"documentationUrl\":\"uusiecktybh\",\"dataSchemaUrl\":\"xidhhxomil\"},\"qqy\":{\"description\":\"wjwi\",\"displayName\":\"qrslaate\",\"documentationUrl\":\"wuj\",\"dataSchemaUrl\":\"gxqgqwlxrhgtvhv\"},\"tyalh\":{\"description\":\"kkt\",\"displayName\":\"zejogmkorvvmvm\",\"documentationUrl\":\"fnqh\",\"dataSchemaUrl\":\"snosnqliwkmzojf\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-10-17T04:22:16Z\",\"provisioningState\":\"Creating\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"bjbhrpgiqsttc\",\"messageForActivation\":\"rcmmaixpqj\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"ksldttohqclnaih\",\"tenantId\":\"siqikvllrht\",\"userAssignedIdentities\":{\"bun\":{\"principalId\":\"xkoi\",\"clientId\":\"trawrqkza\"},\"bduxapgrcq\":{\"principalId\":\"aklwzlwee\",\"clientId\":\"nejzltkaszfjsxs\"},\"esdfedsb\":{\"principalId\":\"mvrdjomlnwsbv\",\"clientId\":\"lsflxk\"},\"i\":{\"principalId\":\"ancoinmphymcqid\",\"clientId\":\"tvdhqnufbxwe\"}}},\"location\":\"ntojovfnybydhuih\",\"tags\":{\"uaorhjk\":\"wud\",\"amqprlo\":\"hwvumosqir\",\"zcmtagelajdyolj\":\"rugejcvjkjy\"},\"id\":\"qy\",\"name\":\"qfmzsizzhravrc\",\"type\":\"kjymgqbgcxh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PartnerTopic response = manager.partnerTopics()
            .activateWithResponse("wosstfjxtvlxx", "qfcwr", com.azure.core.util.Context.NONE).getValue();

        Assertions.assertEquals("ntojovfnybydhuih", response.location());
        Assertions.assertEquals("wud", response.tags().get("uaorhjk"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, response.identity().type());
        Assertions.assertEquals("ksldttohqclnaih", response.identity().principalId());
        Assertions.assertEquals("siqikvllrht", response.identity().tenantId());
        Assertions.assertEquals("xkoi", response.identity().userAssignedIdentities().get("bun").principalId());
        Assertions.assertEquals("trawrqkza", response.identity().userAssignedIdentities().get("bun").clientId());
        Assertions.assertEquals(UUID.fromString("5a63ffee-8a07-46ca-ab97-7134898dfe4c"),
            response.partnerRegistrationImmutableId());
        Assertions.assertEquals("xeezwyhjmbjiqe", response.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.eventTypeInfo().kind());
        Assertions.assertEquals("hc", response.eventTypeInfo().inlineEventTypes().get("vnensmuffiw").description());
        Assertions.assertEquals("pyvdkgdets",
            response.eventTypeInfo().inlineEventTypes().get("vnensmuffiw").displayName());
        Assertions.assertEquals("canzb",
            response.eventTypeInfo().inlineEventTypes().get("vnensmuffiw").documentationUrl());
        Assertions.assertEquals("kwuyck",
            response.eventTypeInfo().inlineEventTypes().get("vnensmuffiw").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-17T04:22:16Z"),
            response.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, response.activationState());
        Assertions.assertEquals("bjbhrpgiqsttc", response.partnerTopicFriendlyDescription());
        Assertions.assertEquals("rcmmaixpqj", response.messageForActivation());
    }
}
