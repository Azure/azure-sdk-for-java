// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.ChannelInner;
import com.azure.resourcemanager.eventgrid.models.ChannelProvisioningState;
import com.azure.resourcemanager.eventgrid.models.ChannelsListResult;
import com.azure.resourcemanager.eventgrid.models.ChannelType;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicInfo;
import com.azure.resourcemanager.eventgrid.models.ReadinessState;
import com.azure.resourcemanager.eventgrid.models.ResourceMoveChangeHistory;
import com.azure.resourcemanager.eventgrid.models.WebhookPartnerDestinationInfo;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"channelType\":\"PartnerDestination\",\"partnerTopicInfo\":{\"azureSubscriptionId\":\"jtjaodxobnbdxkq\",\"resourceGroupName\":\"okaj\",\"name\":\"npime\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"cp\":{}}},\"source\":\"gmaajrm\"},\"partnerDestinationInfo\":{\"endpointType\":\"WebHook\",\"azureSubscriptionId\":\"rlovmclwhijcoej\",\"resourceGroupName\":\"bzaqsqsycbkbfk\",\"name\":\"kdkexxp\",\"endpointServiceContext\":\"fmxa\",\"resourceMoveChangeHistory\":[{},{},{},{}]},\"messageForActivation\":\"pg\",\"provisioningState\":\"Updating\",\"readinessState\":\"NeverActivated\",\"expirationTimeIfNotActivatedUtc\":\"2021-06-27T10:08:15Z\"},\"id\":\"hvpmoue\",\"name\":\"hd\",\"type\":\"xibqeojnx\"}],\"nextLink\":\"zvddntwndeicbtwn\"}")
            .toObject(ChannelsListResult.class);
        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, model.value().get(0).channelType());
        Assertions.assertEquals("jtjaodxobnbdxkq", model.value().get(0).partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("okaj", model.value().get(0).partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("npime", model.value().get(0).partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE,
            model.value().get(0).partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("gmaajrm", model.value().get(0).partnerTopicInfo().source());
        Assertions.assertEquals("rlovmclwhijcoej", model.value().get(0).partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("bzaqsqsycbkbfk", model.value().get(0).partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("kdkexxp", model.value().get(0).partnerDestinationInfo().name());
        Assertions.assertEquals("fmxa", model.value().get(0).partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("pg", model.value().get(0).messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.UPDATING, model.value().get(0).provisioningState());
        Assertions.assertEquals(ReadinessState.NEVER_ACTIVATED, model.value().get(0).readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-27T10:08:15Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals("zvddntwndeicbtwn", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelsListResult model = new ChannelsListResult()
            .withValue(Arrays.asList(new ChannelInner().withChannelType(ChannelType.PARTNER_DESTINATION)
                .withPartnerTopicInfo(new PartnerTopicInfo()
                    .withAzureSubscriptionId("jtjaodxobnbdxkq")
                    .withResourceGroupName("okaj")
                    .withName("npime")
                    .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                        .withInlineEventTypes(mapOf("cp", new InlineEventProperties())))
                    .withSource("gmaajrm"))
                .withPartnerDestinationInfo(
                    new WebhookPartnerDestinationInfo().withAzureSubscriptionId("rlovmclwhijcoej")
                        .withResourceGroupName("bzaqsqsycbkbfk")
                        .withName("kdkexxp")
                        .withEndpointServiceContext("fmxa")
                        .withResourceMoveChangeHistory(
                            Arrays.asList(new ResourceMoveChangeHistory(), new ResourceMoveChangeHistory(),
                                new ResourceMoveChangeHistory(), new ResourceMoveChangeHistory())))
                .withMessageForActivation("pg")
                .withProvisioningState(ChannelProvisioningState.UPDATING)
                .withReadinessState(ReadinessState.NEVER_ACTIVATED)
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-06-27T10:08:15Z"))))
            .withNextLink("zvddntwndeicbtwn");
        model = BinaryData.fromObject(model).toObject(ChannelsListResult.class);
        Assertions.assertEquals(ChannelType.PARTNER_DESTINATION, model.value().get(0).channelType());
        Assertions.assertEquals("jtjaodxobnbdxkq", model.value().get(0).partnerTopicInfo().azureSubscriptionId());
        Assertions.assertEquals("okaj", model.value().get(0).partnerTopicInfo().resourceGroupName());
        Assertions.assertEquals("npime", model.value().get(0).partnerTopicInfo().name());
        Assertions.assertEquals(EventDefinitionKind.INLINE,
            model.value().get(0).partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("gmaajrm", model.value().get(0).partnerTopicInfo().source());
        Assertions.assertEquals("rlovmclwhijcoej", model.value().get(0).partnerDestinationInfo().azureSubscriptionId());
        Assertions.assertEquals("bzaqsqsycbkbfk", model.value().get(0).partnerDestinationInfo().resourceGroupName());
        Assertions.assertEquals("kdkexxp", model.value().get(0).partnerDestinationInfo().name());
        Assertions.assertEquals("fmxa", model.value().get(0).partnerDestinationInfo().endpointServiceContext());
        Assertions.assertEquals("pg", model.value().get(0).messageForActivation());
        Assertions.assertEquals(ChannelProvisioningState.UPDATING, model.value().get(0).provisioningState());
        Assertions.assertEquals(ReadinessState.NEVER_ACTIVATED, model.value().get(0).readinessState());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-27T10:08:15Z"),
            model.value().get(0).expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals("zvddntwndeicbtwn", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
