// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespaceUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerNamespaceUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerNamespaceUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"xkyxvxevblbj\":\"idjks\"},\"properties\":{\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"geuaulx\",\"action\":\"Allow\"},{\"ipMask\":\"jbnkpp\",\"action\":\"Allow\"},{\"ipMask\":\"nlsvxeiz\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\",\"disableLocalAuth\":true}}")
            .toObject(PartnerNamespaceUpdateParameters.class);
        Assertions.assertEquals("idjks", model.tags().get("xkyxvxevblbj"));
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("geuaulx", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(true, model.disableLocalAuth());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerNamespaceUpdateParameters model = new PartnerNamespaceUpdateParameters()
            .withTags(mapOf("xkyxvxevblbj", "idjks")).withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("geuaulx").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("jbnkpp").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("nlsvxeiz").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO).withDisableLocalAuth(true);
        model = BinaryData.fromObject(model).toObject(PartnerNamespaceUpdateParameters.class);
        Assertions.assertEquals("idjks", model.tags().get("xkyxvxevblbj"));
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("geuaulx", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(true, model.disableLocalAuth());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
