// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Client;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClientsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"description\":\"py\",\"authenticationName\":\"fa\",\"clientCertificateAuthentication\":{\"validationScheme\":\"SubjectMatchesAuthenticationName\",\"allowedThumbprints\":[\"yerzrransybyl\",\"ol\",\"zrghsrleink\"]},\"state\":\"Disabled\",\"attributes\":{\"qwtltngvmreupt\":\"datancjwvuag\",\"l\":\"dataklzmijajw\"},\"provisioningState\":\"Succeeded\"},\"id\":\"aghm\",\"name\":\"ynwlslrcigtzjcv\",\"type\":\"xqlaps\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Client response = manager.clients()
            .define("utmdpvozg")
            .withExistingNamespace("pew", "c")
            .withDescription("bknlzcl")
            .withAuthenticationName("zeyowmndcovdwzqa")
            .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                .withValidationScheme(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME)
                .withAllowedThumbprints(Arrays.asList("mk", "fruwkud", "bcpftxudqyemebun", "ucmci")))
            .withState(ClientState.ENABLED)
            .withAttributes(
                mapOf("gxef", "datammjauw", "smxubvf", "dataohaitranizerwgud", "mpztraudsvhlc", "datangfcocefhpriyl"))
            .create();

        Assertions.assertEquals("py", response.description());
        Assertions.assertEquals("fa", response.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.SUBJECT_MATCHES_AUTHENTICATION_NAME,
            response.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("yerzrransybyl",
            response.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.DISABLED, response.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
