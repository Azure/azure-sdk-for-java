// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.Client;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateAuthentication;
import com.azure.resourcemanager.eventgrid.models.ClientCertificateValidationScheme;
import com.azure.resourcemanager.eventgrid.models.ClientState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClientsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"properties\":{\"description\":\"tlwljssmcts\",\"authenticationName\":\"dkpwolgisub\",\"clientCertificateAuthentication\":{\"validationScheme\":\"IpMatchesAuthenticationName\",\"allowedThumbprints\":[\"fgfiij\"]},\"state\":\"Enabled\",\"attributes\":{\"pxgnmqvzvluyqq\":\"dataefksxqceaz\",\"scyvaifppuacvf\":\"dataios\"},\"provisioningState\":\"Succeeded\"},\"id\":\"psfx\",\"name\":\"jdhsoy\",\"type\":\"hpvtyqftteh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        Client response
            = manager.clients().define("zcqypzqzufgsyf").withExistingNamespace("swgkpjhboyikebh", "hkslgwlokhueoij")
                .withDescription("vdwtfxptpqayamk").withAuthenticationName("fgybmxs")
                .withClientCertificateAuthentication(new ClientCertificateAuthentication()
                    .withValidationScheme(ClientCertificateValidationScheme.EMAIL_MATCHES_AUTHENTICATION_NAME)
                    .withAllowedThumbprints(Arrays.asList("llojkpoyhgwwdj", "xdbdljzgdyrcvu")))
                .withState(ClientState.ENABLED).withAttributes(mapOf("hbj", "datalr", "bsfp", "dataqogdx", "xojjl",
                    "dataxxtjlflecomi", "ezay", "dataxxdhilzzdzzqjm"))
                .create();

        Assertions.assertEquals("tlwljssmcts", response.description());
        Assertions.assertEquals("dkpwolgisub", response.authenticationName());
        Assertions.assertEquals(ClientCertificateValidationScheme.IP_MATCHES_AUTHENTICATION_NAME,
            response.clientCertificateAuthentication().validationScheme());
        Assertions.assertEquals("fgfiij", response.clientCertificateAuthentication().allowedThumbprints().get(0));
        Assertions.assertEquals(ClientState.ENABLED, response.state());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
