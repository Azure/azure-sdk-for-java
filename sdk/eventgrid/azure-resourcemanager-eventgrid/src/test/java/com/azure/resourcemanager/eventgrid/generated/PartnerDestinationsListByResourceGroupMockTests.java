// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.PartnerDestination;
import com.azure.resourcemanager.eventgrid.models.PartnerDestinationActivationState;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class PartnerDestinationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr
            = "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"c35e7022-c11b-4401-b70f-625fa0360f4a\",\"endpointServiceContext\":\"mcfjxokyelsy\",\"expirationTimeIfNotActivatedUtc\":\"2021-04-18T05:49:12Z\",\"provisioningState\":\"Failed\",\"activationState\":\"NeverActivated\",\"endpointBaseUrl\":\"ygjje\",\"messageForActivation\":\"knfdr\"},\"location\":\"jqy\",\"tags\":{\"otcsu\":\"txkrdtulcrcjdk\"},\"id\":\"mzoonsvobchkxfpw\",\"name\":\"dyslbklglmnn\",\"type\":\"kwayqshwy\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito.when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito.when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito.when(httpClient.send(httpRequest.capture(), Mockito.any())).thenReturn(Mono.defer(() -> {
            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
            return Mono.just(httpResponse);
        }));

        EventGridManager manager = EventGridManager.configure().withHttpClient(httpClient).authenticate(
            tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
            new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PartnerDestination> response = manager.partnerDestinations()
            .listByResourceGroup("mczfedyuepsvplt", "dajjvywe", 452970965, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("jqy", response.iterator().next().location());
        Assertions.assertEquals("txkrdtulcrcjdk", response.iterator().next().tags().get("otcsu"));
        Assertions.assertEquals(UUID.fromString("c35e7022-c11b-4401-b70f-625fa0360f4a"),
            response.iterator().next().partnerRegistrationImmutableId());
        Assertions.assertEquals("mcfjxokyelsy", response.iterator().next().endpointServiceContext());
        Assertions.assertEquals(OffsetDateTime.parse("2021-04-18T05:49:12Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerDestinationActivationState.NEVER_ACTIVATED,
            response.iterator().next().activationState());
        Assertions.assertEquals("ygjje", response.iterator().next().endpointBaseUrl());
        Assertions.assertEquals("knfdr", response.iterator().next().messageForActivation());
    }
}
