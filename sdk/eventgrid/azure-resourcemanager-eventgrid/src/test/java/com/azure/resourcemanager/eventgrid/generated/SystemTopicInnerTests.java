// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Creating\",\"source\":\"ntqpbr\",\"topicType\":\"yrduczkgofxyfsr\",\"metricResourceId\":\"vcrrpcj\"},\"identity\":{\"type\":\"None\",\"principalId\":\"jeaq\",\"tenantId\":\"mvvfko\",\"userAssignedIdentities\":{\"bhpwvqsgnyy\":{\"principalId\":\"hktuidvrma\",\"clientId\":\"pdwwexymzvlazi\"},\"gsksrfhf\":{\"principalId\":\"ziven\",\"clientId\":\"pmeyyvpkpatlbijp\"},\"kiexhajlfnthiq\":{\"principalId\":\"lmknbnxwcdom\",\"clientId\":\"vfqawzfgbrttuiac\"}}},\"location\":\"yuttdiygbpvnwswm\",\"tags\":{\"zwxjlm\":\"yctww\"},\"id\":\"cvogygzyvne\",\"name\":\"zaifghtmoqqtlff\",\"type\":\"zbkr\"}")
            .toObject(SystemTopicInner.class);
        Assertions.assertEquals("yuttdiygbpvnwswm", model.location());
        Assertions.assertEquals("yctww", model.tags().get("zwxjlm"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("jeaq", model.identity().principalId());
        Assertions.assertEquals("mvvfko", model.identity().tenantId());
        Assertions.assertEquals("hktuidvrma",
            model.identity().userAssignedIdentities().get("bhpwvqsgnyy").principalId());
        Assertions.assertEquals("pdwwexymzvlazi",
            model.identity().userAssignedIdentities().get("bhpwvqsgnyy").clientId());
        Assertions.assertEquals("ntqpbr", model.source());
        Assertions.assertEquals("yrduczkgofxyfsr", model.topicType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicInner model = new SystemTopicInner().withLocation("yuttdiygbpvnwswm")
            .withTags(mapOf("zwxjlm", "yctww"))
            .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                .withPrincipalId("jeaq")
                .withTenantId("mvvfko")
                .withUserAssignedIdentities(mapOf("bhpwvqsgnyy",
                    new UserIdentityProperties().withPrincipalId("hktuidvrma").withClientId("pdwwexymzvlazi"),
                    "gsksrfhf", new UserIdentityProperties().withPrincipalId("ziven").withClientId("pmeyyvpkpatlbijp"),
                    "kiexhajlfnthiq",
                    new UserIdentityProperties().withPrincipalId("lmknbnxwcdom").withClientId("vfqawzfgbrttuiac"))))
            .withSource("ntqpbr")
            .withTopicType("yrduczkgofxyfsr");
        model = BinaryData.fromObject(model).toObject(SystemTopicInner.class);
        Assertions.assertEquals("yuttdiygbpvnwswm", model.location());
        Assertions.assertEquals("yctww", model.tags().get("zwxjlm"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("jeaq", model.identity().principalId());
        Assertions.assertEquals("mvvfko", model.identity().tenantId());
        Assertions.assertEquals("hktuidvrma",
            model.identity().userAssignedIdentities().get("bhpwvqsgnyy").principalId());
        Assertions.assertEquals("pdwwexymzvlazi",
            model.identity().userAssignedIdentities().get("bhpwvqsgnyy").clientId());
        Assertions.assertEquals("ntqpbr", model.source());
        Assertions.assertEquals("yrduczkgofxyfsr", model.topicType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
