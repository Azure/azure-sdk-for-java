// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Creating\",\"source\":\"knapq\",\"topicType\":\"yuicdhzbdy\",\"metricResourceId\":\"wgbdvibidmhmwffp\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"pckc\",\"tenantId\":\"rv\",\"userAssignedIdentities\":{\"haim\":{\"principalId\":\"xoy\",\"clientId\":\"k\"},\"apyyrmfsvbpavbo\":{\"principalId\":\"iroqbosh\",\"clientId\":\"a\"}}},\"location\":\"fppdbwnu\",\"tags\":{\"pugmehqe\":\"hxkumasjcaacfdmm\",\"nlbqnbldxeaclg\":\"vufhbzehewhoq\"},\"id\":\"chorimkrsr\",\"name\":\"moucsofldpuviyfc\",\"type\":\"abeolhbhlvbm\"}")
            .toObject(SystemTopicInner.class);
        Assertions.assertEquals("fppdbwnu", model.location());
        Assertions.assertEquals("hxkumasjcaacfdmm", model.tags().get("pugmehqe"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("pckc", model.identity().principalId());
        Assertions.assertEquals("rv", model.identity().tenantId());
        Assertions.assertEquals("xoy", model.identity().userAssignedIdentities().get("haim").principalId());
        Assertions.assertEquals("k", model.identity().userAssignedIdentities().get("haim").clientId());
        Assertions.assertEquals("knapq", model.source());
        Assertions.assertEquals("yuicdhzbdy", model.topicType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicInner model
            = new SystemTopicInner().withLocation("fppdbwnu")
                .withTags(mapOf("pugmehqe", "hxkumasjcaacfdmm", "nlbqnbldxeaclg", "vufhbzehewhoq"))
                .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withPrincipalId("pckc")
                    .withTenantId("rv")
                    .withUserAssignedIdentities(mapOf("haim",
                        new UserIdentityProperties().withPrincipalId("xoy").withClientId("k"), "apyyrmfsvbpavbo",
                        new UserIdentityProperties().withPrincipalId("iroqbosh").withClientId("a"))))
                .withSource("knapq")
                .withTopicType("yuicdhzbdy");
        model = BinaryData.fromObject(model).toObject(SystemTopicInner.class);
        Assertions.assertEquals("fppdbwnu", model.location());
        Assertions.assertEquals("hxkumasjcaacfdmm", model.tags().get("pugmehqe"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("pckc", model.identity().principalId());
        Assertions.assertEquals("rv", model.identity().tenantId());
        Assertions.assertEquals("xoy", model.identity().userAssignedIdentities().get("haim").principalId());
        Assertions.assertEquals("k", model.identity().userAssignedIdentities().get("haim").clientId());
        Assertions.assertEquals("knapq", model.source());
        Assertions.assertEquals("yuicdhzbdy", model.topicType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
