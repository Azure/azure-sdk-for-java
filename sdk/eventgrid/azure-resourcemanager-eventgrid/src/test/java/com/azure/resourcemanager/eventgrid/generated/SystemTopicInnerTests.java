// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"source\":\"ptsoqfyiase\",\"topicType\":\"hkrttzrazis\",\"metricResourceId\":\"kiuemv\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"hmnr\",\"tenantId\":\"bsojk\",\"userAssignedIdentities\":{\"vjgp\":{\"principalId\":\"mdptys\",\"clientId\":\"qsgnzxojpsl\"},\"dzbenri\":{\"principalId\":\"ufiqwoyxqvapcohh\",\"clientId\":\"cqpqojxcxzrzdc\"},\"mzwcjjncqt\":{\"principalId\":\"awetzq\",\"clientId\":\"tjwfljhznamtua\"}}},\"location\":\"z\",\"tags\":{\"ebwgga\":\"vgbgatzuuvbxng\",\"oqza\":\"ttzlswvajqfutlx\"},\"id\":\"unwqr\",\"name\":\"zfrgqhaohcm\",\"type\":\"uocnjrohmbpyr\"}")
            .toObject(SystemTopicInner.class);
        Assertions.assertEquals("z", model.location());
        Assertions.assertEquals("vgbgatzuuvbxng", model.tags().get("ebwgga"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hmnr", model.identity().principalId());
        Assertions.assertEquals("bsojk", model.identity().tenantId());
        Assertions.assertEquals("mdptys", model.identity().userAssignedIdentities().get("vjgp").principalId());
        Assertions.assertEquals("qsgnzxojpsl", model.identity().userAssignedIdentities().get("vjgp").clientId());
        Assertions.assertEquals("ptsoqfyiase", model.source());
        Assertions.assertEquals("hkrttzrazis", model.topicType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicInner model
            = new SystemTopicInner().withLocation("z")
                .withTags(mapOf("ebwgga", "vgbgatzuuvbxng", "oqza", "ttzlswvajqfutlx"))
                .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED).withPrincipalId("hmnr")
                    .withTenantId("bsojk")
                    .withUserAssignedIdentities(mapOf("vjgp",
                        new UserIdentityProperties().withPrincipalId("mdptys").withClientId("qsgnzxojpsl"), "dzbenri",
                        new UserIdentityProperties().withPrincipalId("ufiqwoyxqvapcohh").withClientId("cqpqojxcxzrzdc"),
                        "mzwcjjncqt",
                        new UserIdentityProperties().withPrincipalId("awetzq").withClientId("tjwfljhznamtua"))))
                .withSource("ptsoqfyiase").withTopicType("hkrttzrazis");
        model = BinaryData.fromObject(model).toObject(SystemTopicInner.class);
        Assertions.assertEquals("z", model.location());
        Assertions.assertEquals("vgbgatzuuvbxng", model.tags().get("ebwgga"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hmnr", model.identity().principalId());
        Assertions.assertEquals("bsojk", model.identity().tenantId());
        Assertions.assertEquals("mdptys", model.identity().userAssignedIdentities().get("vjgp").principalId());
        Assertions.assertEquals("qsgnzxojpsl", model.identity().userAssignedIdentities().get("vjgp").clientId());
        Assertions.assertEquals("ptsoqfyiase", model.source());
        Assertions.assertEquals("hkrttzrazis", model.topicType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
