// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"source\":\"ci\",\"topicType\":\"defxrdc\",\"metricResourceId\":\"nbkkjanurnnq\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"zxqltgrdogypx\",\"tenantId\":\"vbfihwuhvctafsr\",\"userAssignedIdentities\":{\"agwwrxaom\":{\"principalId\":\"lmliowxihspnxwqa\",\"clientId\":\"epzwaklsbsbqq\"},\"jadhqoawj\":{\"principalId\":\"sgl\",\"clientId\":\"czezkhhlt\"}}},\"location\":\"oyueayfbpcmsp\",\"tags\":{\"mbscbbx\":\"rrueqthwmg\",\"d\":\"gdhxi\"},\"id\":\"opedbwdpyqyybxub\",\"name\":\"dnafcbqwre\",\"type\":\"jelaqacigele\"}")
            .toObject(SystemTopicInner.class);
        Assertions.assertEquals("oyueayfbpcmsp", model.location());
        Assertions.assertEquals("rrueqthwmg", model.tags().get("mbscbbx"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zxqltgrdogypx", model.identity().principalId());
        Assertions.assertEquals("vbfihwuhvctafsr", model.identity().tenantId());
        Assertions.assertEquals("lmliowxihspnxwqa",
            model.identity().userAssignedIdentities().get("agwwrxaom").principalId());
        Assertions.assertEquals("epzwaklsbsbqq", model.identity().userAssignedIdentities().get("agwwrxaom").clientId());
        Assertions.assertEquals("ci", model.source());
        Assertions.assertEquals("defxrdc", model.topicType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicInner model = new SystemTopicInner().withLocation("oyueayfbpcmsp")
            .withTags(mapOf("mbscbbx", "rrueqthwmg", "d", "gdhxi"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withPrincipalId("zxqltgrdogypx")
                .withTenantId("vbfihwuhvctafsr")
                .withUserAssignedIdentities(mapOf("agwwrxaom",
                    new UserIdentityProperties().withPrincipalId("lmliowxihspnxwqa").withClientId("epzwaklsbsbqq"),
                    "jadhqoawj", new UserIdentityProperties().withPrincipalId("sgl").withClientId("czezkhhlt"))))
            .withSource("ci")
            .withTopicType("defxrdc");
        model = BinaryData.fromObject(model).toObject(SystemTopicInner.class);
        Assertions.assertEquals("oyueayfbpcmsp", model.location());
        Assertions.assertEquals("rrueqthwmg", model.tags().get("mbscbbx"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("zxqltgrdogypx", model.identity().principalId());
        Assertions.assertEquals("vbfihwuhvctafsr", model.identity().tenantId());
        Assertions.assertEquals("lmliowxihspnxwqa",
            model.identity().userAssignedIdentities().get("agwwrxaom").principalId());
        Assertions.assertEquals("epzwaklsbsbqq", model.identity().userAssignedIdentities().get("agwwrxaom").clientId());
        Assertions.assertEquals("ci", model.source());
        Assertions.assertEquals("defxrdc", model.topicType());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
