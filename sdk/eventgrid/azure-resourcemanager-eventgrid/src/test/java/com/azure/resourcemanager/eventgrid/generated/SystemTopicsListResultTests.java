// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"source\":\"v\",\"topicType\":\"tod\",\"metricResourceId\":\"pyapucygvoav\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"lghieegjlgvvpase\",\"tenantId\":\"gbuxantuygdh\",\"userAssignedIdentities\":{\"mjnlexwhcb\":{\"principalId\":\"pirpiwrqof\",\"clientId\":\"o\"},\"toyint\":{\"principalId\":\"ibkeph\",\"clientId\":\"uerct\"}}},\"location\":\"pbrlcyrduczkgofx\",\"tags\":{\"vjeaqnrmvvfkoxml\":\"rucvcrrpcjttbs\",\"lpdwwexymzvlazi\":\"hktuidvrma\",\"uzivensrpmeyyvp\":\"bhpwvqsgnyy\",\"gsksrfhf\":\"patlbijp\"},\"id\":\"olmk\",\"name\":\"bnxwc\",\"type\":\"ommpvfqaw\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"source\":\"ttuiaclkiexhajl\",\"topicType\":\"t\",\"metricResourceId\":\"qfyuttd\"},\"identity\":{\"type\":\"None\",\"principalId\":\"n\",\"tenantId\":\"wmtxkyctwwgz\",\"userAssignedIdentities\":{\"moqqtlffhzbk\":{\"principalId\":\"mecvogygzyvneeza\",\"clientId\":\"gh\"},\"idbz\":{\"principalId\":\"jjjavfqnvhnq\",\"clientId\":\"wdogiyetesyp\"}}},\"location\":\"jhqt\",\"tags\":{\"etnjuhpsprkz\":\"vnynkb\",\"cxnafbwqrooh\":\"aupia\",\"mghihp\":\"uovmaonurjt\",\"jxl\":\"ecmslclbl\"},\"id\":\"bsjuscvsfx\",\"name\":\"gctmgxuupbezq\",\"type\":\"cydrtceukdqkk\"}],\"nextLink\":\"hztgeqmgqzgwld\"}")
            .toObject(SystemTopicsListResult.class);
        Assertions.assertEquals("pbrlcyrduczkgofx", model.value().get(0).location());
        Assertions.assertEquals("rucvcrrpcjttbs", model.value().get(0).tags().get("vjeaqnrmvvfkoxml"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("lghieegjlgvvpase", model.value().get(0).identity().principalId());
        Assertions.assertEquals("gbuxantuygdh", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("pirpiwrqof",
            model.value().get(0).identity().userAssignedIdentities().get("mjnlexwhcb").principalId());
        Assertions.assertEquals("o",
            model.value().get(0).identity().userAssignedIdentities().get("mjnlexwhcb").clientId());
        Assertions.assertEquals("v", model.value().get(0).source());
        Assertions.assertEquals("tod", model.value().get(0).topicType());
        Assertions.assertEquals("hztgeqmgqzgwld", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicsListResult model = new SystemTopicsListResult().withValue(Arrays.asList(
            new SystemTopicInner().withLocation("pbrlcyrduczkgofx")
                .withTags(mapOf("vjeaqnrmvvfkoxml", "rucvcrrpcjttbs", "lpdwwexymzvlazi", "hktuidvrma",
                    "uzivensrpmeyyvp", "bhpwvqsgnyy", "gsksrfhf", "patlbijp"))
                .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED)
                    .withPrincipalId("lghieegjlgvvpase")
                    .withTenantId("gbuxantuygdh")
                    .withUserAssignedIdentities(mapOf("mjnlexwhcb",
                        new UserIdentityProperties().withPrincipalId("pirpiwrqof").withClientId("o"), "toyint",
                        new UserIdentityProperties().withPrincipalId("ibkeph").withClientId("uerct"))))
                .withSource("v")
                .withTopicType("tod"),
            new SystemTopicInner().withLocation("jhqt")
                .withTags(mapOf("etnjuhpsprkz", "vnynkb", "cxnafbwqrooh", "aupia", "mghihp", "uovmaonurjt", "jxl",
                    "ecmslclbl"))
                .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                    .withPrincipalId("n")
                    .withTenantId("wmtxkyctwwgz")
                    .withUserAssignedIdentities(mapOf("moqqtlffhzbk",
                        new UserIdentityProperties().withPrincipalId("mecvogygzyvneeza").withClientId("gh"), "idbz",
                        new UserIdentityProperties().withPrincipalId("jjjavfqnvhnq").withClientId("wdogiyetesyp"))))
                .withSource("ttuiaclkiexhajl")
                .withTopicType("t")))
            .withNextLink("hztgeqmgqzgwld");
        model = BinaryData.fromObject(model).toObject(SystemTopicsListResult.class);
        Assertions.assertEquals("pbrlcyrduczkgofx", model.value().get(0).location());
        Assertions.assertEquals("rucvcrrpcjttbs", model.value().get(0).tags().get("vjeaqnrmvvfkoxml"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("lghieegjlgvvpase", model.value().get(0).identity().principalId());
        Assertions.assertEquals("gbuxantuygdh", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("pirpiwrqof",
            model.value().get(0).identity().userAssignedIdentities().get("mjnlexwhcb").principalId());
        Assertions.assertEquals("o",
            model.value().get(0).identity().userAssignedIdentities().get("mjnlexwhcb").clientId());
        Assertions.assertEquals("v", model.value().get(0).source());
        Assertions.assertEquals("tod", model.value().get(0).topicType());
        Assertions.assertEquals("hztgeqmgqzgwld", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
