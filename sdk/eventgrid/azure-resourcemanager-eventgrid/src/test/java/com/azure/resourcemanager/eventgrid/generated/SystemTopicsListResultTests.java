// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"source\":\"wrbfdpyflubh\",\"topicType\":\"glrocuy\",\"metricResourceId\":\"whhmemhooc\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"memczjkmmyk\",\"tenantId\":\"jxsglhsr\",\"userAssignedIdentities\":{\"wlpxuzzjg\":{\"principalId\":\"jylmbkzudnigr\",\"clientId\":\"hotj\"},\"rkwpzdqtvhcspod\":{\"principalId\":\"efqyhqotoihiqaky\",\"clientId\":\"wf\"},\"dlpnfpubn\":{\"principalId\":\"axsipietgb\",\"clientId\":\"jfulbmoic\"},\"attcju\":{\"principalId\":\"batzviqsows\",\"clientId\":\"el\"}}},\"location\":\"plrvkmjcwmjvlg\",\"tags\":{\"sfxsf\":\"cvkyylizrzbj\",\"ukoveofi\":\"ztlvtmvagbwidqlv\"},\"id\":\"rvjfnmjmvlw\",\"name\":\"z\",\"type\":\"iblkujr\"},{\"properties\":{\"provisioningState\":\"Updating\",\"source\":\"uidjpuuyjucej\",\"topicType\":\"zoeovvtzejet\",\"metricResourceId\":\"ln\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"zkdbqzolx\",\"tenantId\":\"vhqjwtrhtgvg\",\"userAssignedIdentities\":{\"itlhguyn\":{\"principalId\":\"rkolawjm\",\"clientId\":\"mwrokcdxfzzzwyja\"}}},\"location\":\"chl\",\"tags\":{\"hmoz\":\"txd\",\"ns\":\"sgzv\",\"fpafolpymwamxq\":\"nj\"},\"id\":\"rag\",\"name\":\"gdphtvdula\",\"type\":\"vl\"}],\"nextLink\":\"c\"}")
            .toObject(SystemTopicsListResult.class);
        Assertions.assertEquals("plrvkmjcwmjvlg", model.value().get(0).location());
        Assertions.assertEquals("cvkyylizrzbj", model.value().get(0).tags().get("sfxsf"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("memczjkmmyk", model.value().get(0).identity().principalId());
        Assertions.assertEquals("jxsglhsr", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("jylmbkzudnigr",
            model.value().get(0).identity().userAssignedIdentities().get("wlpxuzzjg").principalId());
        Assertions.assertEquals("hotj",
            model.value().get(0).identity().userAssignedIdentities().get("wlpxuzzjg").clientId());
        Assertions.assertEquals("wrbfdpyflubh", model.value().get(0).source());
        Assertions.assertEquals("glrocuy", model.value().get(0).topicType());
        Assertions.assertEquals("c", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicsListResult model
            = new SystemTopicsListResult()
                .withValue(
                    Arrays.asList(
                        new SystemTopicInner().withLocation("plrvkmjcwmjvlg")
                            .withTags(mapOf("sfxsf", "cvkyylizrzbj", "ukoveofi", "ztlvtmvagbwidqlv"))
                            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                                .withPrincipalId("memczjkmmyk")
                                .withTenantId("jxsglhsr")
                                .withUserAssignedIdentities(mapOf("wlpxuzzjg",
                                    new UserIdentityProperties().withPrincipalId("jylmbkzudnigr").withClientId("hotj"),
                                    "rkwpzdqtvhcspod",
                                    new UserIdentityProperties().withPrincipalId("efqyhqotoihiqaky").withClientId("wf"),
                                    "dlpnfpubn",
                                    new UserIdentityProperties().withPrincipalId("axsipietgb")
                                        .withClientId("jfulbmoic"),
                                    "attcju",
                                    new UserIdentityProperties().withPrincipalId("batzviqsows").withClientId("el"))))
                            .withSource("wrbfdpyflubh")
                            .withTopicType("glrocuy"),
                        new SystemTopicInner().withLocation("chl")
                            .withTags(mapOf("hmoz", "txd", "ns", "sgzv", "fpafolpymwamxq", "nj"))
                            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                                .withPrincipalId("zkdbqzolx")
                                .withTenantId("vhqjwtrhtgvg")
                                .withUserAssignedIdentities(mapOf("itlhguyn",
                                    new UserIdentityProperties().withPrincipalId("rkolawjm")
                                        .withClientId("mwrokcdxfzzzwyja"))))
                            .withSource("uidjpuuyjucej")
                            .withTopicType("zoeovvtzejet")))
                .withNextLink("c");
        model = BinaryData.fromObject(model).toObject(SystemTopicsListResult.class);
        Assertions.assertEquals("plrvkmjcwmjvlg", model.value().get(0).location());
        Assertions.assertEquals("cvkyylizrzbj", model.value().get(0).tags().get("sfxsf"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("memczjkmmyk", model.value().get(0).identity().principalId());
        Assertions.assertEquals("jxsglhsr", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("jylmbkzudnigr",
            model.value().get(0).identity().userAssignedIdentities().get("wlpxuzzjg").principalId());
        Assertions.assertEquals("hotj",
            model.value().get(0).identity().userAssignedIdentities().get("wlpxuzzjg").clientId());
        Assertions.assertEquals("wrbfdpyflubh", model.value().get(0).source());
        Assertions.assertEquals("glrocuy", model.value().get(0).topicType());
        Assertions.assertEquals("c", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
