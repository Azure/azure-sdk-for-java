// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SystemTopicInner;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.SystemTopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class SystemTopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SystemTopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Canceled\",\"source\":\"rbxrblmliowxihsp\",\"topicType\":\"wqagnepzwa\",\"metricResourceId\":\"sbs\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"wwrxaomzisgl\",\"tenantId\":\"czezkhhlt\",\"userAssignedIdentities\":{\"plby\":{\"principalId\":\"hqo\",\"clientId\":\"jqoyueayfbpcm\"},\"b\":{\"principalId\":\"ueq\",\"clientId\":\"wmgn\"}}},\"location\":\"cbbxigdhxi\",\"tags\":{\"dnafcbqwre\":\"opedbwdpyqyybxub\",\"hdbvqvwzkjop\":\"jelaqacigele\",\"bxcea\":\"beonrlkwzdq\",\"krtt\":\"xcptsoqfyiaseqc\"},\"id\":\"razisg\",\"name\":\"kiuemv\",\"type\":\"nbwzohmnrxxbso\"},{\"properties\":{\"provisioningState\":\"Updating\",\"source\":\"hmdp\",\"topicType\":\"sprqsgnzxojpslsv\",\"metricResourceId\":\"pli\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"yxq\",\"tenantId\":\"pcohhoucqpqojx\",\"userAssignedIdentities\":{\"wflj\":{\"principalId\":\"zdcgdzbenr\",\"clientId\":\"cawetzqddt\"},\"vgbgatzuuvbxng\":{\"principalId\":\"namtuatmzw\",\"clientId\":\"jncqtjzmi\"}}},\"location\":\"ebwgga\",\"tags\":{\"t\":\"zlswvajqf\",\"oqza\":\"x\"},\"id\":\"unwqr\",\"name\":\"zfrgqhaohcm\",\"type\":\"uocnjrohmbpyr\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"source\":\"blydyvkf\",\"topicType\":\"rocxnehvs\",\"metricResourceId\":\"odlfpyapucygvo\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"sxlghieegjlg\",\"tenantId\":\"paseksgb\",\"userAssignedIdentities\":{\"i\":{\"principalId\":\"tu\",\"clientId\":\"dhga\"},\"hcbjpibk\":{\"principalId\":\"rpiwrqofulo\",\"clientId\":\"jnlex\"},\"qpbrlc\":{\"principalId\":\"hu\",\"clientId\":\"erctatoyin\"},\"rrp\":{\"principalId\":\"duczkgof\",\"clientId\":\"fsrucv\"}}},\"location\":\"jttbstv\",\"tags\":{\"mlghktuidvrmazlp\":\"qnrmvvfko\",\"wvqsgny\":\"wwexymzvlazipbh\",\"patlbijp\":\"uuzivensrpmeyyvp\",\"olmk\":\"gsksrfhf\"},\"id\":\"bnxwc\",\"name\":\"ommpvfqaw\",\"type\":\"fgbrtt\"}],\"nextLink\":\"aclkiexhajlfnt\"}")
            .toObject(SystemTopicsListResult.class);
        Assertions.assertEquals("cbbxigdhxi", model.value().get(0).location());
        Assertions.assertEquals("opedbwdpyqyybxub", model.value().get(0).tags().get("dnafcbqwre"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("wwrxaomzisgl", model.value().get(0).identity().principalId());
        Assertions.assertEquals("czezkhhlt", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("hqo",
            model.value().get(0).identity().userAssignedIdentities().get("plby").principalId());
        Assertions.assertEquals("jqoyueayfbpcm",
            model.value().get(0).identity().userAssignedIdentities().get("plby").clientId());
        Assertions.assertEquals("rbxrblmliowxihsp", model.value().get(0).source());
        Assertions.assertEquals("wqagnepzwa", model.value().get(0).topicType());
        Assertions.assertEquals("aclkiexhajlfnt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SystemTopicsListResult model
            = new SystemTopicsListResult()
                .withValue(Arrays
                    .asList(
                        new SystemTopicInner().withLocation("cbbxigdhxi")
                            .withTags(mapOf("dnafcbqwre", "opedbwdpyqyybxub", "hdbvqvwzkjop", "jelaqacigele", "bxcea",
                                "beonrlkwzdq", "krtt", "xcptsoqfyiaseqc"))
                            .withIdentity(new IdentityInfo()
                                .withType(IdentityType.USER_ASSIGNED)
                                .withPrincipalId("wwrxaomzisgl")
                                .withTenantId("czezkhhlt")
                                .withUserAssignedIdentities(mapOf(
                                    "plby",
                                    new UserIdentityProperties().withPrincipalId("hqo").withClientId("jqoyueayfbpcm"),
                                    "b", new UserIdentityProperties().withPrincipalId("ueq").withClientId("wmgn"))))
                            .withSource("rbxrblmliowxihsp")
                            .withTopicType("wqagnepzwa"),
                        new SystemTopicInner()
                            .withLocation("ebwgga")
                            .withTags(mapOf("t", "zlswvajqf", "oqza", "x"))
                            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                                .withPrincipalId("yxq")
                                .withTenantId("pcohhoucqpqojx")
                                .withUserAssignedIdentities(mapOf(
                                    "wflj",
                                    new UserIdentityProperties().withPrincipalId("zdcgdzbenr")
                                        .withClientId("cawetzqddt"),
                                    "vgbgatzuuvbxng",
                                    new UserIdentityProperties().withPrincipalId("namtuatmzw")
                                        .withClientId("jncqtjzmi"))))
                            .withSource("hmdp")
                            .withTopicType("sprqsgnzxojpslsv"),
                        new SystemTopicInner().withLocation("jttbstv")
                            .withTags(mapOf("mlghktuidvrmazlp", "qnrmvvfko", "wvqsgny", "wwexymzvlazipbh", "patlbijp",
                                "uuzivensrpmeyyvp", "olmk", "gsksrfhf"))
                            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                                .withPrincipalId("sxlghieegjlg")
                                .withTenantId("paseksgb")
                                .withUserAssignedIdentities(mapOf("i",
                                    new UserIdentityProperties().withPrincipalId("tu").withClientId("dhga"), "hcbjpibk",
                                    new UserIdentityProperties().withPrincipalId("rpiwrqofulo").withClientId("jnlex"),
                                    "qpbrlc",
                                    new UserIdentityProperties().withPrincipalId("hu").withClientId("erctatoyin"),
                                    "rrp",
                                    new UserIdentityProperties().withPrincipalId("duczkgof").withClientId("fsrucv"))))
                            .withSource("blydyvkf")
                            .withTopicType("rocxnehvs")))
                .withNextLink("aclkiexhajlfnt");
        model = BinaryData.fromObject(model).toObject(SystemTopicsListResult.class);
        Assertions.assertEquals("cbbxigdhxi", model.value().get(0).location());
        Assertions.assertEquals("opedbwdpyqyybxub", model.value().get(0).tags().get("dnafcbqwre"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("wwrxaomzisgl", model.value().get(0).identity().principalId());
        Assertions.assertEquals("czezkhhlt", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("hqo",
            model.value().get(0).identity().userAssignedIdentities().get("plby").principalId());
        Assertions.assertEquals("jqoyueayfbpcm",
            model.value().get(0).identity().userAssignedIdentities().get("plby").clientId());
        Assertions.assertEquals("rbxrblmliowxihsp", model.value().get(0).source());
        Assertions.assertEquals("wqagnepzwa", model.value().get(0).topicType());
        Assertions.assertEquals("aclkiexhajlfnt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
