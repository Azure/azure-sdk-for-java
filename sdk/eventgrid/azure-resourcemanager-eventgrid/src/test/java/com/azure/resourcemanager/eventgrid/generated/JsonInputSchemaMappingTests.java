// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.JsonField;
import com.azure.resourcemanager.eventgrid.models.JsonFieldWithDefault;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import org.junit.jupiter.api.Assertions;

public final class JsonInputSchemaMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonInputSchemaMapping model = BinaryData.fromString(
            "{\"inputSchemaMappingType\":\"Json\",\"properties\":{\"id\":{\"sourceField\":\"drenxol\"},\"topic\":{\"sourceField\":\"ehqbeivdlhydwbdb\"},\"eventTime\":{\"sourceField\":\"lpu\"},\"eventType\":{\"sourceField\":\"jlkesmmpath\",\"defaultValue\":\"ta\"},\"subject\":{\"sourceField\":\"an\",\"defaultValue\":\"wllbv\"},\"dataVersion\":{\"sourceField\":\"sfftedousnktjtgr\",\"defaultValue\":\"aqo\"}}}")
            .toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("drenxol", model.id().sourceField());
        Assertions.assertEquals("ehqbeivdlhydwbdb", model.topic().sourceField());
        Assertions.assertEquals("lpu", model.eventTime().sourceField());
        Assertions.assertEquals("jlkesmmpath", model.eventType().sourceField());
        Assertions.assertEquals("ta", model.eventType().defaultValue());
        Assertions.assertEquals("an", model.subject().sourceField());
        Assertions.assertEquals("wllbv", model.subject().defaultValue());
        Assertions.assertEquals("sfftedousnktjtgr", model.dataVersion().sourceField());
        Assertions.assertEquals("aqo", model.dataVersion().defaultValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonInputSchemaMapping model = new JsonInputSchemaMapping().withId(new JsonField().withSourceField("drenxol"))
            .withTopic(new JsonField().withSourceField("ehqbeivdlhydwbdb"))
            .withEventTime(new JsonField().withSourceField("lpu"))
            .withEventType(new JsonFieldWithDefault().withSourceField("jlkesmmpath").withDefaultValue("ta"))
            .withSubject(new JsonFieldWithDefault().withSourceField("an").withDefaultValue("wllbv"))
            .withDataVersion(new JsonFieldWithDefault().withSourceField("sfftedousnktjtgr").withDefaultValue("aqo"));
        model = BinaryData.fromObject(model).toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("drenxol", model.id().sourceField());
        Assertions.assertEquals("ehqbeivdlhydwbdb", model.topic().sourceField());
        Assertions.assertEquals("lpu", model.eventTime().sourceField());
        Assertions.assertEquals("jlkesmmpath", model.eventType().sourceField());
        Assertions.assertEquals("ta", model.eventType().defaultValue());
        Assertions.assertEquals("an", model.subject().sourceField());
        Assertions.assertEquals("wllbv", model.subject().defaultValue());
        Assertions.assertEquals("sfftedousnktjtgr", model.dataVersion().sourceField());
        Assertions.assertEquals("aqo", model.dataVersion().defaultValue());
    }
}
