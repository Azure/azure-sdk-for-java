// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.JsonField;
import com.azure.resourcemanager.eventgrid.models.JsonFieldWithDefault;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import org.junit.jupiter.api.Assertions;

public final class JsonInputSchemaMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonInputSchemaMapping model = BinaryData.fromString(
            "{\"inputSchemaMappingType\":\"Json\",\"properties\":{\"id\":{\"sourceField\":\"cfrgnawbabgfbkt\"},\"topic\":{\"sourceField\":\"fczlfsyqkfrbzgow\"},\"eventTime\":{\"sourceField\":\"mj\"},\"eventType\":{\"sourceField\":\"cxn\",\"defaultValue\":\"gxhlusr\"},\"subject\":{\"sourceField\":\"simjceagbjqvlsu\",\"defaultValue\":\"wzas\"},\"dataVersion\":{\"sourceField\":\"onoyjf\",\"defaultValue\":\"puby\"}}}")
            .toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("cfrgnawbabgfbkt", model.id().sourceField());
        Assertions.assertEquals("fczlfsyqkfrbzgow", model.topic().sourceField());
        Assertions.assertEquals("mj", model.eventTime().sourceField());
        Assertions.assertEquals("cxn", model.eventType().sourceField());
        Assertions.assertEquals("gxhlusr", model.eventType().defaultValue());
        Assertions.assertEquals("simjceagbjqvlsu", model.subject().sourceField());
        Assertions.assertEquals("wzas", model.subject().defaultValue());
        Assertions.assertEquals("onoyjf", model.dataVersion().sourceField());
        Assertions.assertEquals("puby", model.dataVersion().defaultValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonInputSchemaMapping model
            = new JsonInputSchemaMapping().withId(new JsonField().withSourceField("cfrgnawbabgfbkt"))
                .withTopic(new JsonField().withSourceField("fczlfsyqkfrbzgow"))
                .withEventTime(new JsonField().withSourceField("mj"))
                .withEventType(new JsonFieldWithDefault().withSourceField("cxn").withDefaultValue("gxhlusr"))
                .withSubject(new JsonFieldWithDefault().withSourceField("simjceagbjqvlsu").withDefaultValue("wzas"))
                .withDataVersion(new JsonFieldWithDefault().withSourceField("onoyjf").withDefaultValue("puby"));
        model = BinaryData.fromObject(model).toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("cfrgnawbabgfbkt", model.id().sourceField());
        Assertions.assertEquals("fczlfsyqkfrbzgow", model.topic().sourceField());
        Assertions.assertEquals("mj", model.eventTime().sourceField());
        Assertions.assertEquals("cxn", model.eventType().sourceField());
        Assertions.assertEquals("gxhlusr", model.eventType().defaultValue());
        Assertions.assertEquals("simjceagbjqvlsu", model.subject().sourceField());
        Assertions.assertEquals("wzas", model.subject().defaultValue());
        Assertions.assertEquals("onoyjf", model.dataVersion().sourceField());
        Assertions.assertEquals("puby", model.dataVersion().defaultValue());
    }
}
