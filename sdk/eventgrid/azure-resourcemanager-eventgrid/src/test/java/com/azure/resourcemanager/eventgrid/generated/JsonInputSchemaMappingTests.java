// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.JsonField;
import com.azure.resourcemanager.eventgrid.models.JsonFieldWithDefault;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import org.junit.jupiter.api.Assertions;

public final class JsonInputSchemaMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonInputSchemaMapping model = BinaryData.fromString(
            "{\"inputSchemaMappingType\":\"Json\",\"properties\":{\"id\":{\"sourceField\":\"jkutycyarnr\"},\"topic\":{\"sourceField\":\"g\"},\"eventTime\":{\"sourceField\":\"zoghktdpyczhc\"},\"eventType\":{\"sourceField\":\"cnhz\",\"defaultValue\":\"ot\"},\"subject\":{\"sourceField\":\"cfyjzp\",\"defaultValue\":\"rl\"},\"dataVersion\":{\"sourceField\":\"pqinf\",\"defaultValue\":\"pyglqdhmrjzral\"}}}")
            .toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("jkutycyarnr", model.id().sourceField());
        Assertions.assertEquals("g", model.topic().sourceField());
        Assertions.assertEquals("zoghktdpyczhc", model.eventTime().sourceField());
        Assertions.assertEquals("cnhz", model.eventType().sourceField());
        Assertions.assertEquals("ot", model.eventType().defaultValue());
        Assertions.assertEquals("cfyjzp", model.subject().sourceField());
        Assertions.assertEquals("rl", model.subject().defaultValue());
        Assertions.assertEquals("pqinf", model.dataVersion().sourceField());
        Assertions.assertEquals("pyglqdhmrjzral", model.dataVersion().defaultValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonInputSchemaMapping model = new JsonInputSchemaMapping()
            .withId(new JsonField().withSourceField("jkutycyarnr"))
            .withTopic(new JsonField().withSourceField("g"))
            .withEventTime(new JsonField().withSourceField("zoghktdpyczhc"))
            .withEventType(new JsonFieldWithDefault().withSourceField("cnhz").withDefaultValue("ot"))
            .withSubject(new JsonFieldWithDefault().withSourceField("cfyjzp").withDefaultValue("rl"))
            .withDataVersion(new JsonFieldWithDefault().withSourceField("pqinf").withDefaultValue("pyglqdhmrjzral"));
        model = BinaryData.fromObject(model).toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("jkutycyarnr", model.id().sourceField());
        Assertions.assertEquals("g", model.topic().sourceField());
        Assertions.assertEquals("zoghktdpyczhc", model.eventTime().sourceField());
        Assertions.assertEquals("cnhz", model.eventType().sourceField());
        Assertions.assertEquals("ot", model.eventType().defaultValue());
        Assertions.assertEquals("cfyjzp", model.subject().sourceField());
        Assertions.assertEquals("rl", model.subject().defaultValue());
        Assertions.assertEquals("pqinf", model.dataVersion().sourceField());
        Assertions.assertEquals("pyglqdhmrjzral", model.dataVersion().defaultValue());
    }
}
