// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.JsonField;
import com.azure.resourcemanager.eventgrid.models.JsonFieldWithDefault;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import org.junit.jupiter.api.Assertions;

public final class JsonInputSchemaMappingTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        JsonInputSchemaMapping model = BinaryData.fromString(
            "{\"inputSchemaMappingType\":\"Json\",\"properties\":{\"id\":{\"sourceField\":\"evwjcnkottlwuhv\"},\"topic\":{\"sourceField\":\"ailfemjjzak\"},\"eventTime\":{\"sourceField\":\"iqullqxbdmvr\"},\"eventType\":{\"sourceField\":\"qern\",\"defaultValue\":\"rnyeofltfnnxrk\"},\"subject\":{\"sourceField\":\"fynn\",\"defaultValue\":\"ui\"},\"dataVersion\":{\"sourceField\":\"ipfohykfkx\",\"defaultValue\":\"cbrwjiutgnjizbe\"}}}")
            .toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("evwjcnkottlwuhv", model.id().sourceField());
        Assertions.assertEquals("ailfemjjzak", model.topic().sourceField());
        Assertions.assertEquals("iqullqxbdmvr", model.eventTime().sourceField());
        Assertions.assertEquals("qern", model.eventType().sourceField());
        Assertions.assertEquals("rnyeofltfnnxrk", model.eventType().defaultValue());
        Assertions.assertEquals("fynn", model.subject().sourceField());
        Assertions.assertEquals("ui", model.subject().defaultValue());
        Assertions.assertEquals("ipfohykfkx", model.dataVersion().sourceField());
        Assertions.assertEquals("cbrwjiutgnjizbe", model.dataVersion().defaultValue());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        JsonInputSchemaMapping model
            = new JsonInputSchemaMapping().withId(new JsonField().withSourceField("evwjcnkottlwuhv"))
                .withTopic(new JsonField().withSourceField("ailfemjjzak"))
                .withEventTime(new JsonField().withSourceField("iqullqxbdmvr"))
                .withEventType(new JsonFieldWithDefault().withSourceField("qern").withDefaultValue("rnyeofltfnnxrk"))
                .withSubject(new JsonFieldWithDefault().withSourceField("fynn").withDefaultValue("ui"))
                .withDataVersion(
                    new JsonFieldWithDefault().withSourceField("ipfohykfkx").withDefaultValue("cbrwjiutgnjizbe"));
        model = BinaryData.fromObject(model).toObject(JsonInputSchemaMapping.class);
        Assertions.assertEquals("evwjcnkottlwuhv", model.id().sourceField());
        Assertions.assertEquals("ailfemjjzak", model.topic().sourceField());
        Assertions.assertEquals("iqullqxbdmvr", model.eventTime().sourceField());
        Assertions.assertEquals("qern", model.eventType().sourceField());
        Assertions.assertEquals("rnyeofltfnnxrk", model.eventType().defaultValue());
        Assertions.assertEquals("fynn", model.subject().sourceField());
        Assertions.assertEquals("ui", model.subject().defaultValue());
        Assertions.assertEquals("ipfohykfkx", model.dataVersion().sourceField());
        Assertions.assertEquals("cbrwjiutgnjizbe", model.dataVersion().defaultValue());
    }
}
