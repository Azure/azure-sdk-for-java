// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"itoqcahfsg\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"reesrfwsszvl\",\"name\":\"wliso\",\"type\":\"ntfxxcrqmipfjwfo\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"s\",\"xxbaizabuln\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"jtoxjdzjsj\",\"name\":\"nvhxqqmqip\",\"type\":\"y\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"ocxm\",\"fshksnyzmspamwb\",\"m\",\"nlslcef\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"twtkvih\",\"name\":\"pfliwo\",\"type\":\"nguuzhwvla\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"jha\",\"sybkekymffzt\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"c\",\"name\":\"qs\",\"type\":\"eiihfymko\"}],\"provisioningState\":\"Creating\",\"endpoint\":\"eseuugci\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"izpacz\":{\"description\":\"gbvm\",\"displayName\":\"wrqbebjnfv\",\"documentationUrl\":\"labt\",\"dataSchemaUrl\":\"biwznhtfgficudy\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"EventGridSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"znhokhoitwhrjsd\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"ckidbjpglhzqpxzb\",\"action\":\"Allow\"},{\"ipMask\":\"kcdgfhbssd\",\"action\":\"Allow\"},{\"ipMask\":\"oq\",\"action\":\"Allow\"},{\"ipMask\":\"ecf\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinRegion\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"qrshzzbgullcxiq\",\"tenantId\":\"jkoxdupna\",\"userAssignedIdentities\":{\"gd\":{\"principalId\":\"ouigdmfivjqte\",\"clientId\":\"qq\"},\"yhhmvfxl\":{\"principalId\":\"kghpcv\",\"clientId\":\"qirvtk\"},\"qlujqgi\":{\"principalId\":\"jajodmkrr\",\"clientId\":\"pgqvqo\"}}},\"location\":\"bwlyvxc\",\"tags\":{\"s\":\"vctsfaeuhw\",\"lppdpgz\":\"nstvzuzhasup\"},\"id\":\"zqazvb\",\"name\":\"arkptgongruatsyi\",\"type\":\"sjqhenigbeqngu\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Topic> response = manager.topics()
            .listByResourceGroup("rlxcznnhz", "bnbmxlxm", 1892710553, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("bwlyvxc", response.iterator().next().location());
        Assertions.assertEquals("vctsfaeuhw", response.iterator().next().tags().get("s"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("qrshzzbgullcxiq", response.iterator().next().identity().principalId());
        Assertions.assertEquals("jkoxdupna", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("ouigdmfivjqte",
            response.iterator().next().identity().userAssignedIdentities().get("gd").principalId());
        Assertions.assertEquals("qq",
            response.iterator().next().identity().userAssignedIdentities().get("gd").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("gbvm",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("izpacz").description());
        Assertions.assertEquals("wrqbebjnfv",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("izpacz").displayName());
        Assertions.assertEquals("labt",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("izpacz").documentationUrl());
        Assertions.assertEquals("biwznhtfgficudy",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("izpacz").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("ckidbjpglhzqpxzb", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
