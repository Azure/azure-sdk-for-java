// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"xgvohdbthhxmoe\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Creating\"},\"id\":\"eepfh\",\"name\":\"annvwx\",\"type\":\"hpjhubohxvzga\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"hogalg\",\"nwfmzvzt\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Deleting\"},\"id\":\"pamqxfcssanybz\",\"name\":\"ghvdfeumy\",\"type\":\"svcdhlywkh\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"nzxezriwgo\",\"wapcqksaaapxjhc\",\"tibenwsd\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"aahlfr\",\"name\":\"qklpmvzp\",\"type\":\"reszyaqgom\"}],\"provisioningState\":\"Updating\",\"endpoint\":\"gge\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"tchdw\":{\"description\":\"j\",\"displayName\":\"kyeahhhut\",\"documentationUrl\":\"lnrfcqufmcih\",\"dataSchemaUrl\":\"nowrerjpx\"},\"nlowmcmcqixuanc\":{\"description\":\"qid\",\"displayName\":\"mlgbbfjmdgjv\",\"documentationUrl\":\"hmpmhef\",\"dataSchemaUrl\":\"aphqeofytl\"},\"l\":{\"description\":\"v\",\"displayName\":\"dgfqpmquxpjhcf\",\"documentationUrl\":\"radciovm\",\"dataSchemaUrl\":\"zgugrblw\"},\"wzmnobfewwpsibxo\":{\"description\":\"ssnqe\",\"displayName\":\"otbptg\",\"documentationUrl\":\"manxx\",\"dataSchemaUrl\":\"qfmdqecvtam\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"lndyclwgycv\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"yqqzhembtbwna\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"None\",\"principalId\":\"mvvlooubs\",\"tenantId\":\"ipjeo\",\"userAssignedIdentities\":{\"dhuslgdwz\":{\"principalId\":\"ocjomlup\",\"clientId\":\"zusj\"},\"qcwwsjnkiixep\":{\"principalId\":\"dqyxajclgr\",\"clientId\":\"vqcwyzoqzk\"}}},\"kind\":\"Azure\",\"extendedLocation\":{\"name\":\"wwgfgsqxilef\",\"type\":\"sewrzne\"},\"location\":\"qynttwknh\",\"tags\":{\"dijnmcvjbs\":\"sbsyogjmqjhgc\"},\"id\":\"fcriqxzix\",\"name\":\"dlxwmvc\",\"type\":\"kucpxpyafrwrg\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Topic> response = manager.topics()
            .listByResourceGroup("lkvggcmfnsffet", "kmixwewzls", 1247797493, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qynttwknh", response.iterator().next().location());
        Assertions.assertEquals("sbsyogjmqjhgc", response.iterator().next().tags().get("dijnmcvjbs"));
        Assertions.assertEquals(Sku.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("mvvlooubs", response.iterator().next().identity().principalId());
        Assertions.assertEquals("ipjeo", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("ocjomlup",
            response.iterator().next().identity().userAssignedIdentities().get("dhuslgdwz").principalId());
        Assertions.assertEquals("zusj",
            response.iterator().next().identity().userAssignedIdentities().get("dhuslgdwz").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, response.iterator().next().kind());
        Assertions.assertEquals("wwgfgsqxilef", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("sewrzne", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("j",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("tchdw").description());
        Assertions.assertEquals("kyeahhhut",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("tchdw").displayName());
        Assertions.assertEquals("lnrfcqufmcih",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("tchdw").documentationUrl());
        Assertions.assertEquals("nowrerjpx",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("tchdw").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, response.iterator().next().inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER,
            response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("yqqzhembtbwna", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR,
            response.iterator().next().dataResidencyBoundary());
    }
}
