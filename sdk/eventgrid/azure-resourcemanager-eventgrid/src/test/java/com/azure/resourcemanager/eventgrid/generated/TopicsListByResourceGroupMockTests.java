// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.Topic;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class TopicsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"vewwpzrdwcgldo\",\"gcandxfhhhtes\",\"dqtdnnc\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"jdshvv\",\"name\":\"k\",\"type\":\"xccyijjimhijzr\"}],\"provisioningState\":\"Succeeded\",\"endpoint\":\"mvvsduy\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"uqtnylquevqmvy\":{\"description\":\"hhqld\",\"displayName\":\"ymn\",\"documentationUrl\":\"xiexqwqnghxnimvy\",\"dataSchemaUrl\":\"rxgunnqgy\"},\"on\":{\"description\":\"gmmue\",\"displayName\":\"nznwgsqufmjx\",\"documentationUrl\":\"oseqcazisvb\",\"dataSchemaUrl\":\"gcyjpgawepk\"},\"mfjew\":{\"description\":\"pghlr\",\"displayName\":\"bgblxbuibrvjzta\",\"documentationUrl\":\"vs\",\"dataSchemaUrl\":\"jihvfjcqrttjfuq\"},\"kwdtlcj\":{\"description\":\"q\",\"displayName\":\"vdostwyg\",\"documentationUrl\":\"mw\",\"dataSchemaUrl\":\"vxgwz\"}}},\"minimumTlsVersionAllowed\":\"1.1\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"zrbvgw\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"xvmdr\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"hhplkhww\",\"tenantId\":\"atveqm\",\"userAssignedIdentities\":{\"vsmfas\":{\"principalId\":\"w\",\"clientId\":\"yxryearmhpwbuk\"},\"l\":{\"principalId\":\"lvhqpoilo\",\"clientId\":\"aemcezevftmh\"},\"f\":{\"principalId\":\"kjyghztms\",\"clientId\":\"wtpcflcezswwvw\"}}},\"kind\":\"Azure\",\"extendedLocation\":{\"name\":\"bfpfhruptsyq\",\"type\":\"nqswxdowumxquk\"},\"location\":\"diohclqddn\",\"tags\":{\"mkaqldqabnwvpaq\":\"nebweddpnyzcwyj\"},\"id\":\"qxfbbigcfddofx\",\"name\":\"fbmjyyrqaedwo\",\"type\":\"ocytjgoeayokrw\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Topic> response
            = manager.topics().listByResourceGroup("mwdukinhl", "hg", 1419499050, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("diohclqddn", response.iterator().next().location());
        Assertions.assertEquals("nebweddpnyzcwyj", response.iterator().next().tags().get("mkaqldqabnwvpaq"));
        Assertions.assertEquals(Sku.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("hhplkhww", response.iterator().next().identity().principalId());
        Assertions.assertEquals("atveqm", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("w",
            response.iterator().next().identity().userAssignedIdentities().get("vsmfas").principalId());
        Assertions.assertEquals("yxryearmhpwbuk",
            response.iterator().next().identity().userAssignedIdentities().get("vsmfas").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, response.iterator().next().kind());
        Assertions.assertEquals("bfpfhruptsyq", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("nqswxdowumxquk", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("hhqld",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("uqtnylquevqmvy").description());
        Assertions.assertEquals("ymn",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("uqtnylquevqmvy").displayName());
        Assertions.assertEquals("xiexqwqnghxnimvy",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("uqtnylquevqmvy").documentationUrl());
        Assertions.assertEquals("rxgunnqgy",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("uqtnylquevqmvy").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ONE, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, response.iterator().next().inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("xvmdr", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(false, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
