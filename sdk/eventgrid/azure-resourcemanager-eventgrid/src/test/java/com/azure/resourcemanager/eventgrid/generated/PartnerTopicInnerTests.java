// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerTopicInner;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"partnerRegistrationImmutableId\":\"bdb88235-6e10-4e71-9f26-69f378529554\",\"source\":\"divqi\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"acy\":{\"description\":\"bzuwfmdurag\",\"displayName\":\"izvcjfe\",\"documentationUrl\":\"sdjubggbqigkxkbs\",\"dataSchemaUrl\":\"gak\"},\"tkvnlvxbcuiiznkt\":{\"description\":\"m\",\"displayName\":\"mspofapvuhryl\",\"documentationUrl\":\"ofrzgb\",\"dataSchemaUrl\":\"edm\"},\"crpfbcunez\":{\"description\":\"ansnvp\",\"displayName\":\"bmikost\",\"documentationUrl\":\"bkiw\",\"dataSchemaUrl\":\"qnyophzfyls\"},\"sqqw\":{\"description\":\"e\",\"displayName\":\"lfwyfwlwxjwetn\",\"documentationUrl\":\"ihclafzv\",\"dataSchemaUrl\":\"lpt\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-10-08T01:02:03Z\",\"provisioningState\":\"Creating\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"hcxwaxfewzjk\",\"messageForActivation\":\"xfdeqvhpsyl\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"ffmbmxzjrg\",\"tenantId\":\"wpgj\",\"userAssignedIdentities\":{\"tdewemxswvruu\":{\"principalId\":\"tf\",\"clientId\":\"gicgaaoepttaq\"},\"jqepqwhi\":{\"principalId\":\"zjgehkfkim\",\"clientId\":\"ixokffqyin\"}}},\"location\":\"monstshiyxgve\",\"tags\":{\"ds\":\"lduccbi\",\"b\":\"uwc\"},\"id\":\"egstmninwjizci\",\"name\":\"nghgshej\",\"type\":\"tbxqmuluxlxq\"}")
            .toObject(PartnerTopicInner.class);
        Assertions.assertEquals("monstshiyxgve", model.location());
        Assertions.assertEquals("lduccbi", model.tags().get("ds"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ffmbmxzjrg", model.identity().principalId());
        Assertions.assertEquals("wpgj", model.identity().tenantId());
        Assertions.assertEquals("tf", model.identity().userAssignedIdentities().get("tdewemxswvruu").principalId());
        Assertions.assertEquals("gicgaaoepttaq",
            model.identity().userAssignedIdentities().get("tdewemxswvruu").clientId());
        Assertions.assertEquals(UUID.fromString("bdb88235-6e10-4e71-9f26-69f378529554"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("divqi", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("bzuwfmdurag", model.eventTypeInfo().inlineEventTypes().get("acy").description());
        Assertions.assertEquals("izvcjfe", model.eventTypeInfo().inlineEventTypes().get("acy").displayName());
        Assertions.assertEquals("sdjubggbqigkxkbs",
            model.eventTypeInfo().inlineEventTypes().get("acy").documentationUrl());
        Assertions.assertEquals("gak", model.eventTypeInfo().inlineEventTypes().get("acy").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-08T01:02:03Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("hcxwaxfewzjk", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("xfdeqvhpsyl", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicInner model = new PartnerTopicInner().withLocation("monstshiyxgve")
            .withTags(mapOf("ds", "lduccbi", "b", "uwc"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("ffmbmxzjrg")
                .withTenantId("wpgj")
                .withUserAssignedIdentities(mapOf("tdewemxswvruu",
                    new UserIdentityProperties().withPrincipalId("tf").withClientId("gicgaaoepttaq"), "jqepqwhi",
                    new UserIdentityProperties().withPrincipalId("zjgehkfkim").withClientId("ixokffqyin"))))
            .withPartnerRegistrationImmutableId(UUID.fromString("bdb88235-6e10-4e71-9f26-69f378529554"))
            .withSource("divqi")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("acy",
                    new InlineEventProperties().withDescription("bzuwfmdurag")
                        .withDisplayName("izvcjfe")
                        .withDocumentationUrl("sdjubggbqigkxkbs")
                        .withDataSchemaUrl("gak"),
                    "tkvnlvxbcuiiznkt",
                    new InlineEventProperties().withDescription("m")
                        .withDisplayName("mspofapvuhryl")
                        .withDocumentationUrl("ofrzgb")
                        .withDataSchemaUrl("edm"),
                    "crpfbcunez",
                    new InlineEventProperties().withDescription("ansnvp")
                        .withDisplayName("bmikost")
                        .withDocumentationUrl("bkiw")
                        .withDataSchemaUrl("qnyophzfyls"),
                    "sqqw",
                    new InlineEventProperties().withDescription("e")
                        .withDisplayName("lfwyfwlwxjwetn")
                        .withDocumentationUrl("ihclafzv")
                        .withDataSchemaUrl("lpt"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-10-08T01:02:03Z"))
            .withActivationState(PartnerTopicActivationState.ACTIVATED)
            .withPartnerTopicFriendlyDescription("hcxwaxfewzjk")
            .withMessageForActivation("xfdeqvhpsyl");
        model = BinaryData.fromObject(model).toObject(PartnerTopicInner.class);
        Assertions.assertEquals("monstshiyxgve", model.location());
        Assertions.assertEquals("lduccbi", model.tags().get("ds"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ffmbmxzjrg", model.identity().principalId());
        Assertions.assertEquals("wpgj", model.identity().tenantId());
        Assertions.assertEquals("tf", model.identity().userAssignedIdentities().get("tdewemxswvruu").principalId());
        Assertions.assertEquals("gicgaaoepttaq",
            model.identity().userAssignedIdentities().get("tdewemxswvruu").clientId());
        Assertions.assertEquals(UUID.fromString("bdb88235-6e10-4e71-9f26-69f378529554"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("divqi", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("bzuwfmdurag", model.eventTypeInfo().inlineEventTypes().get("acy").description());
        Assertions.assertEquals("izvcjfe", model.eventTypeInfo().inlineEventTypes().get("acy").displayName());
        Assertions.assertEquals("sdjubggbqigkxkbs",
            model.eventTypeInfo().inlineEventTypes().get("acy").documentationUrl());
        Assertions.assertEquals("gak", model.eventTypeInfo().inlineEventTypes().get("acy").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-08T01:02:03Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("hcxwaxfewzjk", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("xfdeqvhpsyl", model.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
