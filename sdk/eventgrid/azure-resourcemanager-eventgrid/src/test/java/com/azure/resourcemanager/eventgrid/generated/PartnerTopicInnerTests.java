// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerTopicInner;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"partnerRegistrationImmutableId\":\"64fec88f-188f-426e-ace2-2fa5fab35ba1\",\"source\":\"nc\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"gydcw\":{\"description\":\"cdqzhlctddu\",\"displayName\":\"ndy\",\"documentationUrl\":\"chrqb\",\"dataSchemaUrl\":\"jrcg\"},\"asccbiui\":{\"description\":\"xjumvq\",\"displayName\":\"lihrraiouaubr\",\"documentationUrl\":\"loqxfuojrngif\",\"dataSchemaUrl\":\"z\"},\"dgug\":{\"description\":\"dlyjdf\",\"displayName\":\"mkyoqufdvruzsl\",\"documentationUrl\":\"j\",\"dataSchemaUrl\":\"ctfnmdxotng\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-09-04T06:40:24Z\",\"provisioningState\":\"IdleDueToMirroredChannelResourceDeletion\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"yui\",\"messageForActivation\":\"bsnmfpph\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"hyhsgzfczbg\",\"tenantId\":\"fgbegl\",\"userAssignedIdentities\":{\"btijvacvbm\":{\"principalId\":\"o\",\"clientId\":\"betnluankrrfxee\"},\"uyxoaf\":{\"principalId\":\"bqqxlaj\",\"clientId\":\"wxacevehj\"},\"hriypoqeyhlqhy\":{\"principalId\":\"oqltfae\",\"clientId\":\"inmfgvxirp\"},\"iibmi\":{\"principalId\":\"rlpyznuciqdsmexi\",\"clientId\":\"dfuxtya\"}}},\"location\":\"bnn\",\"tags\":{\"vmqfoud\":\"gnljhnmgixhcm\",\"yyprotwyp\":\"rhc\",\"xhugcm\":\"ndm\",\"vlgo\":\"k\"},\"id\":\"bmftpmdt\",\"name\":\"fjltfvnzcyjtotp\",\"type\":\"opv\"}")
            .toObject(PartnerTopicInner.class);
        Assertions.assertEquals("bnn", model.location());
        Assertions.assertEquals("gnljhnmgixhcm", model.tags().get("vmqfoud"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hyhsgzfczbg", model.identity().principalId());
        Assertions.assertEquals("fgbegl", model.identity().tenantId());
        Assertions.assertEquals("o", model.identity().userAssignedIdentities().get("btijvacvbm").principalId());
        Assertions.assertEquals("betnluankrrfxee",
            model.identity().userAssignedIdentities().get("btijvacvbm").clientId());
        Assertions.assertEquals(UUID.fromString("64fec88f-188f-426e-ace2-2fa5fab35ba1"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("nc", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("cdqzhlctddu", model.eventTypeInfo().inlineEventTypes().get("gydcw").description());
        Assertions.assertEquals("ndy", model.eventTypeInfo().inlineEventTypes().get("gydcw").displayName());
        Assertions.assertEquals("chrqb", model.eventTypeInfo().inlineEventTypes().get("gydcw").documentationUrl());
        Assertions.assertEquals("jrcg", model.eventTypeInfo().inlineEventTypes().get("gydcw").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-04T06:40:24Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("yui", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("bsnmfpph", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicInner model = new PartnerTopicInner().withLocation("bnn")
            .withTags(mapOf("vmqfoud", "gnljhnmgixhcm", "yyprotwyp", "rhc", "xhugcm", "ndm", "vlgo", "k"))
            .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED).withPrincipalId("hyhsgzfczbg")
                .withTenantId("fgbegl")
                .withUserAssignedIdentities(mapOf("btijvacvbm",
                    new UserIdentityProperties().withPrincipalId("o").withClientId("betnluankrrfxee"), "uyxoaf",
                    new UserIdentityProperties().withPrincipalId("bqqxlaj").withClientId("wxacevehj"), "hriypoqeyhlqhy",
                    new UserIdentityProperties().withPrincipalId("oqltfae").withClientId("inmfgvxirp"), "iibmi",
                    new UserIdentityProperties().withPrincipalId("rlpyznuciqdsmexi").withClientId("dfuxtya"))))
            .withPartnerRegistrationImmutableId(UUID.fromString("64fec88f-188f-426e-ace2-2fa5fab35ba1"))
            .withSource("nc")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("gydcw",
                    new InlineEventProperties().withDescription("cdqzhlctddu").withDisplayName("ndy")
                        .withDocumentationUrl("chrqb").withDataSchemaUrl("jrcg"),
                    "asccbiui",
                    new InlineEventProperties().withDescription("xjumvq").withDisplayName("lihrraiouaubr")
                        .withDocumentationUrl("loqxfuojrngif").withDataSchemaUrl("z"),
                    "dgug",
                    new InlineEventProperties().withDescription("dlyjdf").withDisplayName("mkyoqufdvruzsl")
                        .withDocumentationUrl("j").withDataSchemaUrl("ctfnmdxotng"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-09-04T06:40:24Z"))
            .withActivationState(PartnerTopicActivationState.ACTIVATED).withPartnerTopicFriendlyDescription("yui")
            .withMessageForActivation("bsnmfpph");
        model = BinaryData.fromObject(model).toObject(PartnerTopicInner.class);
        Assertions.assertEquals("bnn", model.location());
        Assertions.assertEquals("gnljhnmgixhcm", model.tags().get("vmqfoud"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hyhsgzfczbg", model.identity().principalId());
        Assertions.assertEquals("fgbegl", model.identity().tenantId());
        Assertions.assertEquals("o", model.identity().userAssignedIdentities().get("btijvacvbm").principalId());
        Assertions.assertEquals("betnluankrrfxee",
            model.identity().userAssignedIdentities().get("btijvacvbm").clientId());
        Assertions.assertEquals(UUID.fromString("64fec88f-188f-426e-ace2-2fa5fab35ba1"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("nc", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("cdqzhlctddu", model.eventTypeInfo().inlineEventTypes().get("gydcw").description());
        Assertions.assertEquals("ndy", model.eventTypeInfo().inlineEventTypes().get("gydcw").displayName());
        Assertions.assertEquals("chrqb", model.eventTypeInfo().inlineEventTypes().get("gydcw").documentationUrl());
        Assertions.assertEquals("jrcg", model.eventTypeInfo().inlineEventTypes().get("gydcw").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-04T06:40:24Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("yui", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("bsnmfpph", model.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
