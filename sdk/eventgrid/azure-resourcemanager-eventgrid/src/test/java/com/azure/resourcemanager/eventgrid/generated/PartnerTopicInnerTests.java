// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerTopicInner;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"partnerRegistrationImmutableId\":\"544ec14c-b34c-439f-ab86-65f0291da90b\",\"source\":\"aglkafhon\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"zxrvxcus\":{\"description\":\"kpzvcpopmxelnwc\",\"displayName\":\"yjede\",\"documentationUrl\":\"mlfmkqs\",\"dataSchemaUrl\":\"zuawxtzxpuamwa\"},\"ljhlnymzotq\":{\"description\":\"phai\",\"displayName\":\"xyasflvgsgzw\",\"documentationUrl\":\"akoi\",\"dataSchemaUrl\":\"nsmjbl\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-08-01T01:33:07Z\",\"provisioningState\":\"Canceled\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"qqvxmvwfgtayxons\",\"messageForActivation\":\"e\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"hcvsqltnzoi\",\"tenantId\":\"sxgnx\",\"userAssignedIdentities\":{\"h\":{\"principalId\":\"nmpqoxwdofdb\",\"clientId\":\"qxeiiqbimhtmwwi\"},\"embnkbw\":{\"principalId\":\"f\",\"clientId\":\"ofvwbcb\"},\"izvcjfe\":{\"principalId\":\"vxkdivqihebwtswb\",\"clientId\":\"wfmdurage\"}}},\"location\":\"isdju\",\"tags\":{\"bsazgakg\":\"bqigkx\"},\"id\":\"cyrcmjdmspo\",\"name\":\"apvu\",\"type\":\"rylniofrzg\"}")
            .toObject(PartnerTopicInner.class);
        Assertions.assertEquals("isdju", model.location());
        Assertions.assertEquals("bqigkx", model.tags().get("bsazgakg"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hcvsqltnzoi", model.identity().principalId());
        Assertions.assertEquals("sxgnx", model.identity().tenantId());
        Assertions.assertEquals("nmpqoxwdofdb", model.identity().userAssignedIdentities().get("h").principalId());
        Assertions.assertEquals("qxeiiqbimhtmwwi", model.identity().userAssignedIdentities().get("h").clientId());
        Assertions.assertEquals(UUID.fromString("544ec14c-b34c-439f-ab86-65f0291da90b"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("aglkafhon", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("kpzvcpopmxelnwc",
            model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").description());
        Assertions.assertEquals("yjede", model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").displayName());
        Assertions.assertEquals("mlfmkqs", model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").documentationUrl());
        Assertions.assertEquals("zuawxtzxpuamwa",
            model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T01:33:07Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("qqvxmvwfgtayxons", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("e", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicInner model = new PartnerTopicInner().withLocation("isdju")
            .withTags(mapOf("bsazgakg", "bqigkx"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                .withPrincipalId("hcvsqltnzoi")
                .withTenantId("sxgnx")
                .withUserAssignedIdentities(mapOf("h",
                    new UserIdentityProperties().withPrincipalId("nmpqoxwdofdb").withClientId("qxeiiqbimhtmwwi"),
                    "embnkbw", new UserIdentityProperties().withPrincipalId("f").withClientId("ofvwbcb"), "izvcjfe",
                    new UserIdentityProperties().withPrincipalId("vxkdivqihebwtswb").withClientId("wfmdurage"))))
            .withPartnerRegistrationImmutableId(UUID.fromString("544ec14c-b34c-439f-ab86-65f0291da90b"))
            .withSource("aglkafhon")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("zxrvxcus",
                    new InlineEventProperties().withDescription("kpzvcpopmxelnwc")
                        .withDisplayName("yjede")
                        .withDocumentationUrl("mlfmkqs")
                        .withDataSchemaUrl("zuawxtzxpuamwa"),
                    "ljhlnymzotq",
                    new InlineEventProperties().withDescription("phai")
                        .withDisplayName("xyasflvgsgzw")
                        .withDocumentationUrl("akoi")
                        .withDataSchemaUrl("nsmjbl"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-08-01T01:33:07Z"))
            .withActivationState(PartnerTopicActivationState.ACTIVATED)
            .withPartnerTopicFriendlyDescription("qqvxmvwfgtayxons")
            .withMessageForActivation("e");
        model = BinaryData.fromObject(model).toObject(PartnerTopicInner.class);
        Assertions.assertEquals("isdju", model.location());
        Assertions.assertEquals("bqigkx", model.tags().get("bsazgakg"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hcvsqltnzoi", model.identity().principalId());
        Assertions.assertEquals("sxgnx", model.identity().tenantId());
        Assertions.assertEquals("nmpqoxwdofdb", model.identity().userAssignedIdentities().get("h").principalId());
        Assertions.assertEquals("qxeiiqbimhtmwwi", model.identity().userAssignedIdentities().get("h").clientId());
        Assertions.assertEquals(UUID.fromString("544ec14c-b34c-439f-ab86-65f0291da90b"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("aglkafhon", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("kpzvcpopmxelnwc",
            model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").description());
        Assertions.assertEquals("yjede", model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").displayName());
        Assertions.assertEquals("mlfmkqs", model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").documentationUrl());
        Assertions.assertEquals("zuawxtzxpuamwa",
            model.eventTypeInfo().inlineEventTypes().get("zxrvxcus").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-01T01:33:07Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, model.activationState());
        Assertions.assertEquals("qqvxmvwfgtayxons", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("e", model.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
