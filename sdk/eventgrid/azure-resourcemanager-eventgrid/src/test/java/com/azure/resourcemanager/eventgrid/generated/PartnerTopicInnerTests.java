// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerTopicInner;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicInner model = BinaryData.fromString(
            "{\"properties\":{\"partnerRegistrationImmutableId\":\"37824f85-ab48-4af8-88e5-82753fdc91d4\",\"source\":\"zmlovuanash\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"mkdasv\":{\"description\":\"rbdkelvidiz\",\"displayName\":\"sdbccxjmonfdgnwn\",\"documentationUrl\":\"puuw\",\"dataSchemaUrl\":\"tvuqjctzenkeifzz\"},\"belawumuaslzkwr\":{\"description\":\"yhbxcudchxgs\",\"displayName\":\"oldforobw\",\"documentationUrl\":\"vizbfhfo\",\"dataSchemaUrl\":\"acqpbtuodxesza\"},\"xwlalniexzsrzpg\":{\"description\":\"oycqucwy\",\"displayName\":\"hnomdrkywuh\",\"documentationUrl\":\"vfuuru\",\"dataSchemaUrl\":\"we\"},\"bn\":{\"description\":\"q\",\"displayName\":\"bb\",\"documentationUrl\":\"pgdakchzyvli\",\"dataSchemaUrl\":\"nrkcxkj\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-01-19T00:22Z\",\"provisioningState\":\"Failed\",\"activationState\":\"Deactivated\",\"partnerTopicFriendlyDescription\":\"qrntv\",\"messageForActivation\":\"ijpstte\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"cyyufmh\",\"tenantId\":\"nc\",\"userAssignedIdentities\":{\"fpch\":{\"principalId\":\"spkcdqzh\",\"clientId\":\"tddunqnd\"},\"qqoli\":{\"principalId\":\"bnjj\",\"clientId\":\"gegydcwboxjum\"},\"iflrzpasccbiu\":{\"principalId\":\"raiouaubrjtl\",\"clientId\":\"xfuojrn\"},\"lzo\":{\"principalId\":\"zdlyjdfqw\",\"clientId\":\"yoqufdvruz\"}}},\"location\":\"hpc\",\"tags\":{\"eyzihgrky\":\"mdxotngfdgu\",\"absnmfpp\":\"i\",\"yhsgz\":\"ojeevy\"},\"id\":\"czbgomfgbeg\",\"name\":\"qgleohibetnluank\",\"type\":\"rfxeeebtij\"}")
            .toObject(PartnerTopicInner.class);
        Assertions.assertEquals("hpc", model.location());
        Assertions.assertEquals("mdxotngfdgu", model.tags().get("eyzihgrky"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("cyyufmh", model.identity().principalId());
        Assertions.assertEquals("nc", model.identity().tenantId());
        Assertions.assertEquals("spkcdqzh", model.identity().userAssignedIdentities().get("fpch").principalId());
        Assertions.assertEquals("tddunqnd", model.identity().userAssignedIdentities().get("fpch").clientId());
        Assertions.assertEquals(UUID.fromString("37824f85-ab48-4af8-88e5-82753fdc91d4"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("zmlovuanash", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("rbdkelvidiz", model.eventTypeInfo().inlineEventTypes().get("mkdasv").description());
        Assertions.assertEquals("sdbccxjmonfdgnwn",
            model.eventTypeInfo().inlineEventTypes().get("mkdasv").displayName());
        Assertions.assertEquals("puuw", model.eventTypeInfo().inlineEventTypes().get("mkdasv").documentationUrl());
        Assertions.assertEquals("tvuqjctzenkeifzz",
            model.eventTypeInfo().inlineEventTypes().get("mkdasv").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T00:22Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, model.activationState());
        Assertions.assertEquals("qrntv", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("ijpstte", model.messageForActivation());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicInner model = new PartnerTopicInner().withLocation("hpc")
            .withTags(mapOf("eyzihgrky", "mdxotngfdgu", "absnmfpp", "i", "yhsgz", "ojeevy"))
            .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED)
                .withPrincipalId("cyyufmh")
                .withTenantId("nc")
                .withUserAssignedIdentities(mapOf("fpch",
                    new UserIdentityProperties().withPrincipalId("spkcdqzh").withClientId("tddunqnd"), "qqoli",
                    new UserIdentityProperties().withPrincipalId("bnjj").withClientId("gegydcwboxjum"), "iflrzpasccbiu",
                    new UserIdentityProperties().withPrincipalId("raiouaubrjtl").withClientId("xfuojrn"), "lzo",
                    new UserIdentityProperties().withPrincipalId("zdlyjdfqw").withClientId("yoqufdvruz"))))
            .withPartnerRegistrationImmutableId(UUID.fromString("37824f85-ab48-4af8-88e5-82753fdc91d4"))
            .withSource("zmlovuanash")
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("mkdasv",
                    new InlineEventProperties().withDescription("rbdkelvidiz")
                        .withDisplayName("sdbccxjmonfdgnwn")
                        .withDocumentationUrl("puuw")
                        .withDataSchemaUrl("tvuqjctzenkeifzz"),
                    "belawumuaslzkwr",
                    new InlineEventProperties().withDescription("yhbxcudchxgs")
                        .withDisplayName("oldforobw")
                        .withDocumentationUrl("vizbfhfo")
                        .withDataSchemaUrl("acqpbtuodxesza"),
                    "xwlalniexzsrzpg",
                    new InlineEventProperties().withDescription("oycqucwy")
                        .withDisplayName("hnomdrkywuh")
                        .withDocumentationUrl("vfuuru")
                        .withDataSchemaUrl("we"),
                    "bn",
                    new InlineEventProperties().withDescription("q")
                        .withDisplayName("bb")
                        .withDocumentationUrl("pgdakchzyvli")
                        .withDataSchemaUrl("nrkcxkj"))))
            .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-01-19T00:22Z"))
            .withActivationState(PartnerTopicActivationState.DEACTIVATED)
            .withPartnerTopicFriendlyDescription("qrntv")
            .withMessageForActivation("ijpstte");
        model = BinaryData.fromObject(model).toObject(PartnerTopicInner.class);
        Assertions.assertEquals("hpc", model.location());
        Assertions.assertEquals("mdxotngfdgu", model.tags().get("eyzihgrky"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("cyyufmh", model.identity().principalId());
        Assertions.assertEquals("nc", model.identity().tenantId());
        Assertions.assertEquals("spkcdqzh", model.identity().userAssignedIdentities().get("fpch").principalId());
        Assertions.assertEquals("tddunqnd", model.identity().userAssignedIdentities().get("fpch").clientId());
        Assertions.assertEquals(UUID.fromString("37824f85-ab48-4af8-88e5-82753fdc91d4"),
            model.partnerRegistrationImmutableId());
        Assertions.assertEquals("zmlovuanash", model.source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("rbdkelvidiz", model.eventTypeInfo().inlineEventTypes().get("mkdasv").description());
        Assertions.assertEquals("sdbccxjmonfdgnwn",
            model.eventTypeInfo().inlineEventTypes().get("mkdasv").displayName());
        Assertions.assertEquals("puuw", model.eventTypeInfo().inlineEventTypes().get("mkdasv").documentationUrl());
        Assertions.assertEquals("tvuqjctzenkeifzz",
            model.eventTypeInfo().inlineEventTypes().get("mkdasv").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T00:22Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.DEACTIVATED, model.activationState());
        Assertions.assertEquals("qrntv", model.partnerTopicFriendlyDescription());
        Assertions.assertEquals("ijpstte", model.messageForActivation());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
