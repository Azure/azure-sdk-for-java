// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import org.junit.jupiter.api.Assertions;

public final class PushInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PushInfo model = BinaryData.fromString(
            "{\"maxDeliveryCount\":357492176,\"eventTimeToLive\":\"tdlmkkzevd\",\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"SystemAssigned\",\"userAssignedIdentity\":\"sdsttwvog\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"ngqqmoakuf\"},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}}")
            .toObject(PushInfo.class);
        Assertions.assertEquals(357492176, model.maxDeliveryCount());
        Assertions.assertEquals("tdlmkkzevd", model.eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("sdsttwvog",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("ngqqmoakuf", model.deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PushInfo model
            = new PushInfo().withMaxDeliveryCount(357492176)
                .withEventTimeToLive("tdlmkkzevd")
                .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                    .withIdentity(
                        new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.SYSTEM_ASSIGNED)
                            .withUserAssignedIdentity("sdsttwvog"))
                    .withDeadLetterDestination(new DeadLetterDestination()))
                .withDeliveryWithResourceIdentity(
                    new DeliveryWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentity("ngqqmoakuf"))
                        .withDestination(new EventSubscriptionDestination()))
                .withDestination(new EventSubscriptionDestination());
        model = BinaryData.fromObject(model).toObject(PushInfo.class);
        Assertions.assertEquals(357492176, model.maxDeliveryCount());
        Assertions.assertEquals("tdlmkkzevd", model.eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.SYSTEM_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("sdsttwvog",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("ngqqmoakuf", model.deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }
}
