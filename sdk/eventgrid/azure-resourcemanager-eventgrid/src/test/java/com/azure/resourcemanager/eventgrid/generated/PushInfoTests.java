// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.NamespaceTopicEventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import com.azure.resourcemanager.eventgrid.models.ServiceBusQueueEventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.StorageBlobDeadLetterDestination;
import org.junit.jupiter.api.Assertions;

public final class PushInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PushInfo model = BinaryData.fromString(
            "{\"maxDeliveryCount\":972343553,\"eventTimeToLive\":\"lxgwimfnjhf\",\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"kkfoqr\"},\"deadLetterDestination\":{\"endpointType\":\"StorageBlob\"}},\"deliveryWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"aw\"},\"destination\":{\"endpointType\":\"ServiceBusQueue\"}},\"destination\":{\"endpointType\":\"NamespaceTopic\"}}")
            .toObject(PushInfo.class);
        Assertions.assertEquals(972343553, model.maxDeliveryCount());
        Assertions.assertEquals("lxgwimfnjhf", model.eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("kkfoqr",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("aw", model.deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PushInfo model = new PushInfo().withMaxDeliveryCount(972343553)
            .withEventTimeToLive("lxgwimfnjhf")
            .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                .withIdentity(new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentity("kkfoqr"))
                .withDeadLetterDestination(new StorageBlobDeadLetterDestination()))
            .withDeliveryWithResourceIdentity(
                new DeliveryWithResourceIdentity()
                    .withIdentity(new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentity("aw"))
                    .withDestination(new ServiceBusQueueEventSubscriptionDestination()))
            .withDestination(new NamespaceTopicEventSubscriptionDestination());
        model = BinaryData.fromObject(model).toObject(PushInfo.class);
        Assertions.assertEquals(972343553, model.maxDeliveryCount());
        Assertions.assertEquals("lxgwimfnjhf", model.eventTimeToLive());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("kkfoqr",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deliveryWithResourceIdentity().identity().type());
        Assertions.assertEquals("aw", model.deliveryWithResourceIdentity().identity().userAssignedIdentity());
    }
}
