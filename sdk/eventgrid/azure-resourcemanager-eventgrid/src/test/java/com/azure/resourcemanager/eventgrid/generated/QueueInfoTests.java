// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import com.azure.resourcemanager.eventgrid.models.StorageBlobDeadLetterDestination;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class QueueInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueueInfo model = BinaryData.fromString(
            "{\"receiveLockDurationInSeconds\":1951861279,\"maxDeliveryCount\":96926313,\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"aayg\"},\"deadLetterDestination\":{\"endpointType\":\"StorageBlob\"}},\"eventTimeToLive\":\"PT160H21M8S\"}")
            .toObject(QueueInfo.class);
        Assertions.assertEquals(1951861279, model.receiveLockDurationInSeconds());
        Assertions.assertEquals(96926313, model.maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("aayg",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT160H21M8S"), model.eventTimeToLive());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueueInfo model = new QueueInfo().withReceiveLockDurationInSeconds(1951861279)
            .withMaxDeliveryCount(96926313)
            .withDeadLetterDestinationWithResourceIdentity(new DeadLetterWithResourceIdentity()
                .withIdentity(new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentity("aayg"))
                .withDeadLetterDestination(new StorageBlobDeadLetterDestination()))
            .withEventTimeToLive(Duration.parse("PT160H21M8S"));
        model = BinaryData.fromObject(model).toObject(QueueInfo.class);
        Assertions.assertEquals(1951861279, model.receiveLockDurationInSeconds());
        Assertions.assertEquals(96926313, model.maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("aayg",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT160H21M8S"), model.eventTimeToLive());
    }
}
