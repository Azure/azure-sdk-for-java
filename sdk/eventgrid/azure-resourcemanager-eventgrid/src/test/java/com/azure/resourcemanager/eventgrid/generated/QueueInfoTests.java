// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DeadLetterDestination;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionIdentityType;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import java.time.Duration;
import org.junit.jupiter.api.Assertions;

public final class QueueInfoTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueueInfo model = BinaryData.fromString(
            "{\"receiveLockDurationInSeconds\":1334975440,\"maxDeliveryCount\":531629361,\"deadLetterDestinationWithResourceIdentity\":{\"identity\":{\"type\":\"UserAssigned\",\"userAssignedIdentity\":\"bykutw\"},\"deadLetterDestination\":{\"endpointType\":\"DeadLetterDestination\"}},\"eventTimeToLive\":\"PT32H3M35S\"}")
            .toObject(QueueInfo.class);
        Assertions.assertEquals(1334975440, model.receiveLockDurationInSeconds());
        Assertions.assertEquals(531629361, model.maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("bykutw",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT32H3M35S"), model.eventTimeToLive());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueueInfo model
            = new QueueInfo().withReceiveLockDurationInSeconds(1334975440)
                .withMaxDeliveryCount(531629361)
                .withDeadLetterDestinationWithResourceIdentity(
                    new DeadLetterWithResourceIdentity()
                        .withIdentity(
                            new EventSubscriptionIdentity().withType(EventSubscriptionIdentityType.USER_ASSIGNED)
                                .withUserAssignedIdentity("bykutw"))
                        .withDeadLetterDestination(new DeadLetterDestination()))
                .withEventTimeToLive(Duration.parse("PT32H3M35S"));
        model = BinaryData.fromObject(model).toObject(QueueInfo.class);
        Assertions.assertEquals(1334975440, model.receiveLockDurationInSeconds());
        Assertions.assertEquals(531629361, model.maxDeliveryCount());
        Assertions.assertEquals(EventSubscriptionIdentityType.USER_ASSIGNED,
            model.deadLetterDestinationWithResourceIdentity().identity().type());
        Assertions.assertEquals("bykutw",
            model.deadLetterDestinationWithResourceIdentity().identity().userAssignedIdentity());
        Assertions.assertEquals(Duration.parse("PT32H3M35S"), model.eventTimeToLive());
    }
}
