// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.ChannelUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.PartnerUpdateTopicInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ChannelUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ChannelUpdateParameters model = BinaryData.fromString(
            "{\"properties\":{\"expirationTimeIfNotActivatedUtc\":\"2021-07-13T23:15:24Z\",\"partnerTopicInfo\":{\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"bwjzr\":{\"description\":\"uvamiheognarxzxt\",\"displayName\":\"o\",\"documentationUrl\":\"si\",\"dataSchemaUrl\":\"evcciqihnhun\"},\"jhqjbasvmsmjqul\":{\"description\":\"ygxgispemvtz\",\"displayName\":\"ufubl\",\"documentationUrl\":\"fxqeof\",\"dataSchemaUrl\":\"e\"},\"hxbnjbiksqrg\":{\"description\":\"sntnbybkzgcw\",\"displayName\":\"clxxwrljdo\",\"documentationUrl\":\"kcqvkocrc\",\"dataSchemaUrl\":\"kwt\"}}}}}}")
            .toObject(ChannelUpdateParameters.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T23:15:24Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("uvamiheognarxzxt",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").description());
        Assertions.assertEquals("o",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").displayName());
        Assertions.assertEquals("si",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").documentationUrl());
        Assertions.assertEquals("evcciqihnhun",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ChannelUpdateParameters model
            = new ChannelUpdateParameters()
                .withExpirationTimeIfNotActivatedUtc(OffsetDateTime.parse("2021-07-13T23:15:24Z"))
                .withPartnerTopicInfo(new PartnerUpdateTopicInfo()
                    .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                        .withInlineEventTypes(mapOf("bwjzr",
                            new InlineEventProperties().withDescription("uvamiheognarxzxt")
                                .withDisplayName("o")
                                .withDocumentationUrl("si")
                                .withDataSchemaUrl("evcciqihnhun"),
                            "jhqjbasvmsmjqul",
                            new InlineEventProperties().withDescription("ygxgispemvtz")
                                .withDisplayName("ufubl")
                                .withDocumentationUrl("fxqeof")
                                .withDataSchemaUrl("e"),
                            "hxbnjbiksqrg",
                            new InlineEventProperties().withDescription("sntnbybkzgcw")
                                .withDisplayName("clxxwrljdo")
                                .withDocumentationUrl("kcqvkocrc")
                                .withDataSchemaUrl("kwt")))));
        model = BinaryData.fromObject(model).toObject(ChannelUpdateParameters.class);
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-13T23:15:24Z"), model.expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.partnerTopicInfo().eventTypeInfo().kind());
        Assertions.assertEquals("uvamiheognarxzxt",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").description());
        Assertions.assertEquals("o",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").displayName());
        Assertions.assertEquals("si",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").documentationUrl());
        Assertions.assertEquals("evcciqihnhun",
            model.partnerTopicInfo().eventTypeInfo().inlineEventTypes().get("bwjzr").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
