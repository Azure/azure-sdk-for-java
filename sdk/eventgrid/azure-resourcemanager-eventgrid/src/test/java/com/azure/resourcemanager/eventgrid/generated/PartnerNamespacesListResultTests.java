// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerNamespaceInner;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespacesListResult;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerNamespacesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerNamespacesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"h\",\"name\":\"cporxvxcjz\",\"type\":\"qizxfpxtgqscjavf\"}],\"provisioningState\":\"Updating\",\"partnerRegistrationFullyQualifiedId\":\"dqazkmtgguwpijra\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"m\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"iwrxgkn\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"partnerTopicRoutingMode\":\"ChannelNameHeader\"},\"location\":\"o\",\"tags\":{\"jtxvzflbqvgaq\":\"pgshoxgsgbpfgz\",\"nwsdtutnwlduyc\":\"lgafcqusrdve\",\"kuqgsjjxundxgket\":\"uzhyrmewipmvekdx\"},\"id\":\"zhhzjhfjmhvvmu\",\"name\":\"gpmuneqsxvmhfbuz\",\"type\":\"yihsasbhudypohyu\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"nsqyrpfoobrltt\",\"name\":\"msjnygqdnfw\",\"type\":\"zdzgtilaxhnfhqly\"},{\"properties\":{},\"id\":\"jouw\",\"name\":\"vk\",\"type\":\"oyzunbixxr\"},{\"properties\":{},\"id\":\"kvcpwpgclr\",\"name\":\"ivtsoxfrkenxpm\",\"type\":\"yefrpmpdnqqska\"}],\"provisioningState\":\"Canceled\",\"partnerRegistrationFullyQualifiedId\":\"vmm\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"fr\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"egnitg\",\"action\":\"Allow\"},{\"ipMask\":\"zyqdrfegcealzx\",\"action\":\"Allow\"},{\"ipMask\":\"nsymoyqhlwigd\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"ChannelNameHeader\"},\"location\":\"mf\",\"tags\":{\"xakjsqzhzb\":\"wasqvdaeyyg\",\"asi\":\"zkgimsid\"},\"id\":\"ddyvvjskgfmo\",\"name\":\"wa\",\"type\":\"pqg\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"ahhvjhhna\",\"name\":\"zybbj\",\"type\":\"idjks\"},{\"properties\":{},\"id\":\"kyxvxevblbjedn\",\"name\":\"jlageu\",\"type\":\"ulxunsmjbnkpp\"},{\"properties\":{},\"id\":\"nenlsvxeizzg\",\"name\":\"klnsrmffey\",\"type\":\"xcktpiymerteeamm\"}],\"provisioningState\":\"Deleting\",\"partnerRegistrationFullyQualifiedId\":\"kk\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"rtkgdojbmxvavref\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"cuijpxt\",\"action\":\"Allow\"},{\"ipMask\":\"prtujwsawdd\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"titvtzeexavox\",\"tags\":{\"ypq\":\"lecdmdqbw\",\"slhhxudbxv\":\"gsfjac\",\"tnsi\":\"d\",\"z\":\"ud\"},\"id\":\"mes\",\"name\":\"kdlpa\",\"type\":\"zrcxfailcfxwmdbo\"}],\"nextLink\":\"fgsftufqob\"}")
            .toObject(PartnerNamespacesListResult.class);
        Assertions.assertEquals("o", model.value().get(0).location());
        Assertions.assertEquals("pgshoxgsgbpfgz", model.value().get(0).tags().get("jtxvzflbqvgaq"));
        Assertions.assertEquals("dqazkmtgguwpijra", model.value().get(0).partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("iwrxgkn", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER,
            model.value().get(0).partnerTopicRoutingMode());
        Assertions.assertEquals("fgsftufqob", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerNamespacesListResult model = new PartnerNamespacesListResult()
            .withValue(Arrays.asList(
                new PartnerNamespaceInner().withLocation("o")
                    .withTags(mapOf("jtxvzflbqvgaq", "pgshoxgsgbpfgz", "nwsdtutnwlduyc", "lgafcqusrdve",
                        "kuqgsjjxundxgket", "uzhyrmewipmvekdx"))
                    .withPartnerRegistrationFullyQualifiedId("dqazkmtgguwpijra")
                    .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                    .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
                    .withInboundIpRules(
                        Arrays.asList(new InboundIpRule().withIpMask("iwrxgkn").withAction(IpActionType.ALLOW)))
                    .withDisableLocalAuth(true)
                    .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER),
                new PartnerNamespaceInner().withLocation("mf")
                    .withTags(mapOf("xakjsqzhzb", "wasqvdaeyyg", "asi", "zkgimsid"))
                    .withPartnerRegistrationFullyQualifiedId("vmm")
                    .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
                    .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                    .withInboundIpRules(
                        Arrays.asList(new InboundIpRule().withIpMask("egnitg").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("zyqdrfegcealzx").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("nsymoyqhlwigd").withAction(IpActionType.ALLOW)))
                    .withDisableLocalAuth(false)
                    .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER),
                new PartnerNamespaceInner().withLocation("titvtzeexavox")
                    .withTags(mapOf("ypq", "lecdmdqbw", "slhhxudbxv", "gsfjac", "tnsi", "d", "z", "ud"))
                    .withPartnerRegistrationFullyQualifiedId("kk")
                    .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
                    .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                    .withInboundIpRules(
                        Arrays.asList(new InboundIpRule().withIpMask("cuijpxt").withAction(IpActionType.ALLOW),
                            new InboundIpRule().withIpMask("prtujwsawdd").withAction(IpActionType.ALLOW)))
                    .withDisableLocalAuth(false)
                    .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE)))
            .withNextLink("fgsftufqob");
        model = BinaryData.fromObject(model).toObject(PartnerNamespacesListResult.class);
        Assertions.assertEquals("o", model.value().get(0).location());
        Assertions.assertEquals("pgshoxgsgbpfgz", model.value().get(0).tags().get("jtxvzflbqvgaq"));
        Assertions.assertEquals("dqazkmtgguwpijra", model.value().get(0).partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("iwrxgkn", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER,
            model.value().get(0).partnerTopicRoutingMode());
        Assertions.assertEquals("fgsftufqob", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
