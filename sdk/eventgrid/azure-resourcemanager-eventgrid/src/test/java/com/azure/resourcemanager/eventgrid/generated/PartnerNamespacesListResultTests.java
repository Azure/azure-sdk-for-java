// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerNamespaceInner;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespacesListResult;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerNamespacesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerNamespacesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"pwcyyufmhr\",\"name\":\"nc\",\"type\":\"wmqs\"},{\"properties\":{},\"id\":\"cdqzhlctddu\",\"name\":\"qn\",\"type\":\"yfp\"},{\"properties\":{},\"id\":\"rqbnjjrc\",\"name\":\"egy\",\"type\":\"cw\"}],\"provisioningState\":\"Deleting\",\"partnerRegistrationFullyQualifiedId\":\"umvq\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"hrraiouaubrj\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"uojrngiflr\",\"action\":\"Allow\"},{\"ipMask\":\"ccbiuimzdlyjdfq\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"dvruzslzojhpctf\",\"tags\":{\"zihgrkyu\":\"xotngfdguge\",\"mfp\":\"zabs\"},\"id\":\"hojeevy\",\"name\":\"yhsgz\",\"type\":\"czbgomfgbeg\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"o\",\"name\":\"i\",\"type\":\"etnluankrrfx\"},{\"properties\":{},\"id\":\"ebtijvacvbmqzbqq\",\"name\":\"lajrnwxacevehj\",\"type\":\"uyxoaf\"},{\"properties\":{},\"id\":\"oqltfae\",\"name\":\"linmfgv\",\"type\":\"irpghriypoqeyh\"},{\"properties\":{},\"id\":\"h\",\"name\":\"kprlpyznuc\",\"type\":\"qdsmexiit\"}],\"provisioningState\":\"Failed\",\"partnerRegistrationFullyQualifiedId\":\"tyasiibmiybnnust\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"hnmgixhcm\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"udorh\",\"action\":\"Allow\"},{\"ipMask\":\"prot\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"ChannelNameHeader\"},\"location\":\"xhugcm\",\"tags\":{\"bmftpmdt\":\"vlgo\"},\"id\":\"fjltfvnzcyjtotp\",\"name\":\"opv\",\"type\":\"bdb\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"ihed\",\"name\":\"vqwt\",\"type\":\"mkyi\"},{\"properties\":{},\"id\":\"ysi\",\"name\":\"sgqcwdho\",\"type\":\"sdtmcdzs\"},{\"properties\":{},\"id\":\"cohdx\",\"name\":\"zlmcmuapcvhdb\",\"type\":\"v\"},{\"properties\":{},\"id\":\"qxeysko\",\"name\":\"qzinkfkbg\",\"type\":\"z\"}],\"provisioningState\":\"Creating\",\"partnerRegistrationFullyQualifiedId\":\"eqocljmygvk\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"jeokbzefezrxccz\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"pqxbkwvzgnzvdf\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"pnodawopqhe\",\"tags\":{\"bostzel\":\"tmcg\",\"tmzlbiojlv\":\"dlat\",\"r\":\"hrbbpneqvcwwyy\",\"nmokayzejnhlbk\":\"ochpprpr\"},\"id\":\"bzpcpiljhahzvec\",\"name\":\"ndbnwieh\",\"type\":\"lewjwiuubwef\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"aqtferr\",\"name\":\"wexjkmfxapjwogq\",\"type\":\"nobpudcdabtqwpw\"}],\"provisioningState\":\"Deleting\",\"partnerRegistrationFullyQualifiedId\":\"zasqbucljgkyexao\",\"minimumTlsVersionAllowed\":\"1.1\",\"endpoint\":\"i\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"ultxijjumfq\",\"action\":\"Allow\"},{\"ipMask\":\"nqnm\",\"action\":\"Allow\"},{\"ipMask\":\"zqdqxt\",\"action\":\"Allow\"},{\"ipMask\":\"nyfusfzsvtuikzh\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"mlrqryxynqnz\",\"tags\":{\"abpfhvfs\":\"sovwxznptgoeiyb\"},\"id\":\"kvntjlrigjkskyri\",\"name\":\"ovzidsx\",\"type\":\"aabzmif\"}],\"nextLink\":\"gznmmaxrizkzob\"}")
            .toObject(PartnerNamespacesListResult.class);
        Assertions.assertEquals("dvruzslzojhpctf", model.value().get(0).location());
        Assertions.assertEquals("xotngfdguge", model.value().get(0).tags().get("zihgrkyu"));
        Assertions.assertEquals("umvq", model.value().get(0).partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("uojrngiflr", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            model.value().get(0).partnerTopicRoutingMode());
        Assertions.assertEquals("gznmmaxrizkzob", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerNamespacesListResult model
            = new PartnerNamespacesListResult()
                .withValue(
                    Arrays.asList(
                        new PartnerNamespaceInner().withLocation("dvruzslzojhpctf")
                            .withTags(mapOf("zihgrkyu", "xotngfdguge", "mfp", "zabs"))
                            .withPartnerRegistrationFullyQualifiedId("umvq")
                            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
                            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                            .withInboundIpRules(Arrays.asList(
                                new InboundIpRule().withIpMask("uojrngiflr").withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("ccbiuimzdlyjdfq").withAction(IpActionType.ALLOW)))
                            .withDisableLocalAuth(false)
                            .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE),
                        new PartnerNamespaceInner().withLocation("xhugcm")
                            .withTags(mapOf("bmftpmdt", "vlgo"))
                            .withPartnerRegistrationFullyQualifiedId("tyasiibmiybnnust")
                            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                            .withInboundIpRules(Arrays.asList(new InboundIpRule()
                                .withIpMask("udorh")
                                .withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("prot").withAction(IpActionType.ALLOW)))
                            .withDisableLocalAuth(false)
                            .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.CHANNEL_NAME_HEADER),
                        new PartnerNamespaceInner().withLocation("pnodawopqhe")
                            .withTags(mapOf("bostzel", "tmcg", "tmzlbiojlv", "dlat", "r", "hrbbpneqvcwwyy",
                                "nmokayzejnhlbk", "ochpprpr"))
                            .withPartnerRegistrationFullyQualifiedId("eqocljmygvk")
                            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
                            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                            .withInboundIpRules(Arrays.asList(
                                new InboundIpRule().withIpMask("pqxbkwvzgnzvdf").withAction(IpActionType.ALLOW)))
                            .withDisableLocalAuth(true)
                            .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE),
                        new PartnerNamespaceInner().withLocation("mlrqryxynqnz")
                            .withTags(mapOf("abpfhvfs", "sovwxznptgoeiyb"))
                            .withPartnerRegistrationFullyQualifiedId("zasqbucljgkyexao")
                            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
                            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                            .withInboundIpRules(Arrays.asList(
                                new InboundIpRule().withIpMask("ultxijjumfq").withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("nqnm").withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("zqdqxt").withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("nyfusfzsvtuikzh").withAction(IpActionType.ALLOW)))
                            .withDisableLocalAuth(true)
                            .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE)))
                .withNextLink("gznmmaxrizkzob");
        model = BinaryData.fromObject(model).toObject(PartnerNamespacesListResult.class);
        Assertions.assertEquals("dvruzslzojhpctf", model.value().get(0).location());
        Assertions.assertEquals("xotngfdguge", model.value().get(0).tags().get("zihgrkyu"));
        Assertions.assertEquals("umvq", model.value().get(0).partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("uojrngiflr", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            model.value().get(0).partnerTopicRoutingMode());
        Assertions.assertEquals("gznmmaxrizkzob", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
