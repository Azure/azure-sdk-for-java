// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerNamespaceInner;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PartnerNamespacesListResult;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicRoutingMode;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerNamespacesListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerNamespacesListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"ijpxtx\",\"name\":\"uwprtujwsawd\",\"type\":\"jibabxvititvtze\"},{\"properties\":{},\"id\":\"avoxtfg\",\"name\":\"ecdmdqbwpy\",\"type\":\"q\"}],\"provisioningState\":\"Deleting\",\"partnerRegistrationFullyQualifiedId\":\"jacbslhhxudbxvod\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"irudh\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"kdlpa\",\"action\":\"Allow\"},{\"ipMask\":\"x\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"m\",\"tags\":{\"lnacgcc\":\"xdfgsftufqobr\",\"kizvytn\":\"knh\",\"aaeranokqgukk\":\"zvulj\"},\"id\":\"qnvb\",\"name\":\"oylaxxul\",\"type\":\"disdosfjbjsvgj\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"vyc\",\"name\":\"t\",\"type\":\"c\"}],\"provisioningState\":\"Updating\",\"partnerRegistrationFullyQualifiedId\":\"cknfnwmbtmvpd\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"ttzaefed\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"phkmcrjdqnsdfz\",\"action\":\"Allow\"},{\"ipMask\":\"gkylkdghr\",\"action\":\"Allow\"},{\"ipMask\":\"tl\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"kvbwnhhtqlgeh\",\"tags\":{\"xtxj\":\"ipifhpfeoajvg\",\"tugsresmkssjh\":\"sheafid\"},\"id\":\"iftxfkf\",\"name\":\"egprhptil\",\"type\":\"ucb\"},{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"q\",\"name\":\"hm\",\"type\":\"wsldrizetpwbr\"},{\"properties\":{},\"id\":\"llibphbqzmizak\",\"name\":\"kan\",\"type\":\"jpdn\"}],\"provisioningState\":\"Updating\",\"partnerRegistrationFullyQualifiedId\":\"joylh\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"oyxprimr\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"cjmeislstvasy\",\"action\":\"Allow\"},{\"ipMask\":\"zaum\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"partnerTopicRoutingMode\":\"SourceEventAttribute\"},\"location\":\"fuzboyjathwtzolb\",\"tags\":{\"xmeb\":\"wm\",\"veabfqxnmwmqtib\":\"jscjpahl\",\"jaeukmrsieekpn\":\"yijddtvqcttad\",\"pibudqwyxebeybpm\":\"zaapmudqmeqwi\"},\"id\":\"znrtffyaqit\",\"name\":\"hheioqaqhvseuf\",\"type\":\"qyrxp\"}],\"nextLink\":\"cgq\"}")
            .toObject(PartnerNamespacesListResult.class);
        Assertions.assertEquals("m", model.value().get(0).location());
        Assertions.assertEquals("xdfgsftufqobr", model.value().get(0).tags().get("lnacgcc"));
        Assertions.assertEquals("jacbslhhxudbxvod", model.value().get(0).partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("kdlpa", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            model.value().get(0).partnerTopicRoutingMode());
        Assertions.assertEquals("cgq", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerNamespacesListResult model
            = new PartnerNamespacesListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PartnerNamespaceInner().withLocation("m")
                                .withTags(mapOf("lnacgcc", "xdfgsftufqobr", "kizvytn", "knh", "aaeranokqgukk", "zvulj"))
                                .withPartnerRegistrationFullyQualifiedId("jacbslhhxudbxvod")
                                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                                .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
                                .withInboundIpRules(Arrays.asList(
                                    new InboundIpRule().withIpMask("kdlpa").withAction(IpActionType.ALLOW),
                                    new InboundIpRule().withIpMask("x").withAction(IpActionType.ALLOW)))
                                .withDisableLocalAuth(true)
                                .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE),
                            new PartnerNamespaceInner().withLocation("kvbwnhhtqlgeh")
                                .withTags(mapOf("xtxj", "ipifhpfeoajvg", "tugsresmkssjh", "sheafid"))
                                .withPartnerRegistrationFullyQualifiedId("cknfnwmbtmvpd")
                                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                                .withInboundIpRules(Arrays.asList(
                                    new InboundIpRule().withIpMask("phkmcrjdqnsdfz").withAction(IpActionType.ALLOW),
                                    new InboundIpRule().withIpMask("gkylkdghr").withAction(IpActionType.ALLOW),
                                    new InboundIpRule().withIpMask("tl").withAction(IpActionType.ALLOW)))
                                .withDisableLocalAuth(false)
                                .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE),
                            new PartnerNamespaceInner().withLocation("fuzboyjathwtzolb")
                                .withTags(mapOf("xmeb", "wm", "veabfqxnmwmqtib", "jscjpahl", "jaeukmrsieekpn",
                                    "yijddtvqcttad", "pibudqwyxebeybpm", "zaapmudqmeqwi"))
                                .withPartnerRegistrationFullyQualifiedId("joylh")
                                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                                .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
                                .withInboundIpRules(Arrays.asList(
                                    new InboundIpRule().withIpMask("cjmeislstvasy").withAction(IpActionType.ALLOW),
                                    new InboundIpRule().withIpMask("zaum").withAction(IpActionType.ALLOW)))
                                .withDisableLocalAuth(false)
                                .withPartnerTopicRoutingMode(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE)))
                .withNextLink("cgq");
        model = BinaryData.fromObject(model).toObject(PartnerNamespacesListResult.class);
        Assertions.assertEquals("m", model.value().get(0).location());
        Assertions.assertEquals("xdfgsftufqobr", model.value().get(0).tags().get("lnacgcc"));
        Assertions.assertEquals("jacbslhhxudbxvod", model.value().get(0).partnerRegistrationFullyQualifiedId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("kdlpa", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(PartnerTopicRoutingMode.SOURCE_EVENT_ATTRIBUTE,
            model.value().get(0).partnerTopicRoutingMode());
        Assertions.assertEquals("cgq", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
