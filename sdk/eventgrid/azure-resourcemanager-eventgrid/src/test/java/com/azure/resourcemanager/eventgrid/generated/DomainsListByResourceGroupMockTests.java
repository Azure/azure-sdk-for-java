// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"bkew\",\"qynspgbvoffb\",\"kwvdxa\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Canceled\"},\"id\":\"kmyrljialzbnobr\",\"name\":\"lpbcjtrpz\",\"type\":\"yudivbxnhsqeaeo\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"gdhuruz\",\"tzarogatmoljiy\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Succeeded\"},\"id\":\"nmzvf\",\"name\":\"neerzztrknsj\",\"type\":\"lugdybnhrxlelf\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"z\",\"pihtdmiwjekpt\",\"caydbjzcqymlcfnz\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"urlgwqkpmmzps\",\"name\":\"auolawiu\",\"type\":\"momsgvvj\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"lohewjjmajnkdflq\",\"onswae\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"zqxjosho\",\"name\":\"totryegpkhxrme\",\"type\":\"znlw\"}],\"provisioningState\":\"Failed\",\"minimumTlsVersionAllowed\":\"1.2\",\"endpoint\":\"khup\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"wrczfjjnnuxxrk\":{\"description\":\"cdr\",\"displayName\":\"fcemftzgyyky\",\"documentationUrl\":\"ugekdfqn\",\"dataSchemaUrl\":\"twd\"},\"ghctxbxmolpcqyde\":{\"description\":\"hmnulwem\",\"displayName\":\"cifrhjulrsulwzpf\",\"documentationUrl\":\"snawmhhgzotfri\",\"dataSchemaUrl\":\"gkoekvzwxxyxh\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"ic\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"izikgqaboohxbm\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":true,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"ohpjhgejkbv\",\"tenantId\":\"daurgho\",\"userAssignedIdentities\":{\"lqxr\":{\"principalId\":\"xb\",\"clientId\":\"xjxjoe\"},\"cdgzseznux\":{\"principalId\":\"knkob\",\"clientId\":\"tmbozomtzamicbig\"},\"ihzbdnpxpk\":{\"principalId\":\"uairaabmdlqjb\",\"clientId\":\"pfixlhupmo\"}}},\"location\":\"pre\",\"tags\":{\"ssjyghsfx\":\"lyicghflru\",\"ammgmqfmefgv\":\"kb\"},\"id\":\"cpdwjgquxwey\",\"name\":\"landkdcdjhunhgh\",\"type\":\"gawnrrnquo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Domain> response = manager.domains()
            .listByResourceGroup("qtwmlmhjnqtqeahj", "dvragpokddxejhh", 1037150316, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("pre", response.iterator().next().location());
        Assertions.assertEquals("lyicghflru", response.iterator().next().tags().get("ssjyghsfx"));
        Assertions.assertEquals(Sku.PREMIUM, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED,
            response.iterator().next().identity().type());
        Assertions.assertEquals("ohpjhgejkbv", response.iterator().next().identity().principalId());
        Assertions.assertEquals("daurgho", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("xb",
            response.iterator().next().identity().userAssignedIdentities().get("lqxr").principalId());
        Assertions.assertEquals("xjxjoe",
            response.iterator().next().identity().userAssignedIdentities().get("lqxr").clientId());
        Assertions.assertEquals(TlsVersion.ONE_TWO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("cdr",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("wrczfjjnnuxxrk").description());
        Assertions.assertEquals("fcemftzgyyky",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("wrczfjjnnuxxrk").displayName());
        Assertions.assertEquals("ugekdfqn",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("wrczfjjnnuxxrk").documentationUrl());
        Assertions.assertEquals("twd",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("wrczfjjnnuxxrk").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER,
            response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("izikgqaboohxbm", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(true, response.iterator().next().autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
