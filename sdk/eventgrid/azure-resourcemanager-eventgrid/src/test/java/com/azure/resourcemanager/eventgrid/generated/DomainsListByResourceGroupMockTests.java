// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.Domain;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DomainsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"tbrekqhsqhtf\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Failed\"},\"id\":\"byejuwyqwdqigm\",\"name\":\"hg\",\"type\":\"nztxlujkh\"},{\"properties\":{\"privateEndpoint\":{},\"groupIds\":[\"nkfm\",\"h\"],\"privateLinkServiceConnectionState\":{},\"provisioningState\":\"Updating\"},\"id\":\"mlm\",\"name\":\"jnqtqe\",\"type\":\"hj\"}],\"provisioningState\":\"Failed\",\"minimumTlsVersionAllowed\":\"1.0\",\"endpoint\":\"pok\",\"inputSchema\":\"CustomEventSchema\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"dxaexqokmyrljia\":{\"description\":\"guavtptb\",\"displayName\":\"wkqyns\",\"documentationUrl\":\"bvoffb\",\"dataSchemaUrl\":\"w\"}}},\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"nobrqlpb\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"uyudivbxnhsq\",\"action\":\"Allow\"},{\"ipMask\":\"nqelwgdhuru\",\"action\":\"Allow\"},{\"ipMask\":\"arogatmolji\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"autoCreateTopicWithFirstSubscription\":true,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"rknsjulug\",\"tenantId\":\"bnhrxlelfjhkeiz\",\"userAssignedIdentities\":{\"surlgwq\":{\"principalId\":\"tdmiwjekptyca\",\"clientId\":\"bjzcqymlcfnzhm\"}}},\"location\":\"mmzp\",\"tags\":{\"lawiubmomsgvvjhv\":\"u\",\"q\":\"lrlohewjjmajnkdf\"},\"id\":\"onswae\",\"name\":\"kzfzqxjosho\",\"type\":\"totryegpkhxrme\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Domain> response
            = manager.domains().listByResourceGroup("jj", "h", 505679994, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mmzp", response.iterator().next().location());
        Assertions.assertEquals("u", response.iterator().next().tags().get("lawiubmomsgvvjhv"));
        Assertions.assertEquals(Sku.BASIC, response.iterator().next().sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("rknsjulug", response.iterator().next().identity().principalId());
        Assertions.assertEquals("bnhrxlelfjhkeiz", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("tdmiwjekptyca",
            response.iterator().next().identity().userAssignedIdentities().get("surlgwq").principalId());
        Assertions.assertEquals("bjzcqymlcfnzhm",
            response.iterator().next().identity().userAssignedIdentities().get("surlgwq").clientId());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, response.iterator().next().minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, response.iterator().next().inputSchema());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("guavtptb",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("dxaexqokmyrljia").description());
        Assertions.assertEquals("wkqyns",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("dxaexqokmyrljia").displayName());
        Assertions.assertEquals("bvoffb",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("dxaexqokmyrljia").documentationUrl());
        Assertions.assertEquals("w",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("dxaexqokmyrljia").dataSchemaUrl());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, response.iterator().next().publicNetworkAccess());
        Assertions.assertEquals("uyudivbxnhsq", response.iterator().next().inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, response.iterator().next().inboundIpRules().get(0).action());
        Assertions.assertEquals(true, response.iterator().next().disableLocalAuth());
        Assertions.assertEquals(true, response.iterator().next().autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, response.iterator().next().autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION,
            response.iterator().next().dataResidencyBoundary());
    }
}
