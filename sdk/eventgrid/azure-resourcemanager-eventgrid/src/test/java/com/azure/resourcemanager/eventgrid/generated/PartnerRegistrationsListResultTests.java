// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerRegistrationInner;
import com.azure.resourcemanager.eventgrid.models.PartnerRegistrationsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerRegistrationsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerRegistrationsListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"partnerRegistrationImmutableId\":\"0ecf4ce4-8055-45eb-9490-4519f8093e04\"},\"location\":\"mkdasv\",\"tags\":{\"chxgs\":\"hbxcu\",\"vizbfhfo\":\"boldforobwj\",\"bbelawumuaslzk\":\"vacqpbtuodxesz\"},\"id\":\"rrwoycqucwyhahn\",\"name\":\"mdr\",\"type\":\"ywuhpsvfuur\"},{\"properties\":{\"provisioningState\":\"Updating\",\"partnerRegistrationImmutableId\":\"74c4e699-bce5-4319-ad91-492a31026fe6\"},\"location\":\"xwlalniexzsrzpg\",\"tags\":{\"chzyvlixqnrk\":\"tybbwwpgda\"},\"id\":\"xkjibnxmy\",\"name\":\"uxswqrntvl\",\"type\":\"ijpstte\"}],\"nextLink\":\"qqpwcyyuf\"}")
                .toObject(PartnerRegistrationsListResult.class);
        Assertions.assertEquals("mkdasv", model.value().get(0).location());
        Assertions.assertEquals("hbxcu", model.value().get(0).tags().get("chxgs"));
        Assertions
            .assertEquals(
                UUID.fromString("0ecf4ce4-8055-45eb-9490-4519f8093e04"),
                model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("qqpwcyyuf", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerRegistrationsListResult model =
            new PartnerRegistrationsListResult()
                .withValue(
                    Arrays
                        .asList(
                            new PartnerRegistrationInner()
                                .withLocation("mkdasv")
                                .withTags(
                                    mapOf(
                                        "chxgs",
                                        "hbxcu",
                                        "vizbfhfo",
                                        "boldforobwj",
                                        "bbelawumuaslzk",
                                        "vacqpbtuodxesz"))
                                .withPartnerRegistrationImmutableId(
                                    UUID.fromString("0ecf4ce4-8055-45eb-9490-4519f8093e04")),
                            new PartnerRegistrationInner()
                                .withLocation("xwlalniexzsrzpg")
                                .withTags(mapOf("chzyvlixqnrk", "tybbwwpgda"))
                                .withPartnerRegistrationImmutableId(
                                    UUID.fromString("74c4e699-bce5-4319-ad91-492a31026fe6"))))
                .withNextLink("qqpwcyyuf");
        model = BinaryData.fromObject(model).toObject(PartnerRegistrationsListResult.class);
        Assertions.assertEquals("mkdasv", model.value().get(0).location());
        Assertions.assertEquals("hbxcu", model.value().get(0).tags().get("chxgs"));
        Assertions
            .assertEquals(
                UUID.fromString("0ecf4ce4-8055-45eb-9490-4519f8093e04"),
                model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("qqpwcyyuf", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
