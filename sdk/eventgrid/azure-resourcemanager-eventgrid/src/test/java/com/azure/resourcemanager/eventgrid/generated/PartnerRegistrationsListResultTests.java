// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerRegistrationInner;
import com.azure.resourcemanager.eventgrid.models.PartnerRegistrationsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerRegistrationsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerRegistrationsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Updating\",\"partnerRegistrationImmutableId\":\"9d5780a1-fac8-4194-a6a1-cf7488dec59d\"},\"location\":\"fzzhmkdasv\",\"tags\":{\"chxgs\":\"hbxcu\",\"vizbfhfo\":\"boldforobwj\",\"bbelawumuaslzk\":\"vacqpbtuodxesz\"},\"id\":\"rrwoycqucwyhahn\",\"name\":\"mdr\",\"type\":\"ywuhpsvfuur\"},{\"properties\":{\"provisioningState\":\"Updating\",\"partnerRegistrationImmutableId\":\"fd27ccbd-9552-4468-ad85-0e0eedcf2883\"},\"location\":\"xwlalniexzsrzpg\",\"tags\":{\"chzyvlixqnrk\":\"tybbwwpgda\"},\"id\":\"xkjibnxmy\",\"name\":\"uxswqrntvl\",\"type\":\"ijpstte\"},{\"properties\":{\"provisioningState\":\"Canceled\",\"partnerRegistrationImmutableId\":\"5250a29d-3710-4f22-8e9d-dd505cf743bf\"},\"location\":\"cyyufmh\",\"tags\":{\"cdqzhlctddu\":\"cuwmqsp\"},\"id\":\"qn\",\"name\":\"yfp\",\"type\":\"hrqbnjjrcg\"},{\"properties\":{\"provisioningState\":\"Creating\",\"partnerRegistrationImmutableId\":\"5c146287-85cc-4b79-a13d-99a0b517991f\"},\"location\":\"boxjumvq\",\"tags\":{\"jtlo\":\"ihrraiouaub\",\"iflrzpasccbiu\":\"xfuojrn\",\"ufdvruz\":\"mzdlyjdfqwmkyo\",\"hpc\":\"lzo\"},\"id\":\"fnmdxotn\",\"name\":\"fdgugeyzi\",\"type\":\"grkyuizabsnmfpph\"}],\"nextLink\":\"eevy\"}")
            .toObject(PartnerRegistrationsListResult.class);
        Assertions.assertEquals("fzzhmkdasv", model.value().get(0).location());
        Assertions.assertEquals("hbxcu", model.value().get(0).tags().get("chxgs"));
        Assertions.assertEquals(UUID.fromString("9d5780a1-fac8-4194-a6a1-cf7488dec59d"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("eevy", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerRegistrationsListResult model
            = new PartnerRegistrationsListResult()
                .withValue(Arrays.asList(
                    new PartnerRegistrationInner().withLocation("fzzhmkdasv")
                        .withTags(
                            mapOf("chxgs", "hbxcu", "vizbfhfo", "boldforobwj", "bbelawumuaslzk", "vacqpbtuodxesz"))
                        .withPartnerRegistrationImmutableId(UUID.fromString("9d5780a1-fac8-4194-a6a1-cf7488dec59d")),
                    new PartnerRegistrationInner().withLocation("xwlalniexzsrzpg")
                        .withTags(mapOf("chzyvlixqnrk", "tybbwwpgda"))
                        .withPartnerRegistrationImmutableId(UUID.fromString("fd27ccbd-9552-4468-ad85-0e0eedcf2883")),
                    new PartnerRegistrationInner().withLocation("cyyufmh")
                        .withTags(mapOf("cdqzhlctddu", "cuwmqsp"))
                        .withPartnerRegistrationImmutableId(UUID.fromString("5250a29d-3710-4f22-8e9d-dd505cf743bf")),
                    new PartnerRegistrationInner().withLocation("boxjumvq")
                        .withTags(mapOf("jtlo", "ihrraiouaub", "iflrzpasccbiu", "xfuojrn", "ufdvruz", "mzdlyjdfqwmkyo",
                            "hpc", "lzo"))
                        .withPartnerRegistrationImmutableId(UUID.fromString("5c146287-85cc-4b79-a13d-99a0b517991f"))))
                .withNextLink("eevy");
        model = BinaryData.fromObject(model).toObject(PartnerRegistrationsListResult.class);
        Assertions.assertEquals("fzzhmkdasv", model.value().get(0).location());
        Assertions.assertEquals("hbxcu", model.value().get(0).tags().get("chxgs"));
        Assertions.assertEquals(UUID.fromString("9d5780a1-fac8-4194-a6a1-cf7488dec59d"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("eevy", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
