// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerRegistrationInner;
import com.azure.resourcemanager.eventgrid.models.PartnerRegistrationsListResult;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerRegistrationsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerRegistrationsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"partnerRegistrationImmutableId\":\"c20d298e-645a-4e2c-a4ad-9fd3f8ca88b8\"},\"location\":\"slkvntjl\",\"tags\":{\"oov\":\"jkskyr\",\"znmmaxrizkzobgo\":\"idsxwaabzmifry\",\"ieixynllxe\":\"xlhslnel\"},\"id\":\"wcrojphslhcaw\",\"name\":\"u\",\"type\":\"i\"}],\"nextLink\":\"wfmvigorqjbt\"}")
            .toObject(PartnerRegistrationsListResult.class);
        Assertions.assertEquals("slkvntjl", model.value().get(0).location());
        Assertions.assertEquals("jkskyr", model.value().get(0).tags().get("oov"));
        Assertions.assertEquals(UUID.fromString("c20d298e-645a-4e2c-a4ad-9fd3f8ca88b8"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("wfmvigorqjbt", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerRegistrationsListResult model = new PartnerRegistrationsListResult()
            .withValue(Arrays.asList(new PartnerRegistrationInner().withLocation("slkvntjl")
                .withTags(mapOf("oov", "jkskyr", "znmmaxrizkzobgo", "idsxwaabzmifry", "ieixynllxe", "xlhslnel"))
                .withPartnerRegistrationImmutableId(UUID.fromString("c20d298e-645a-4e2c-a4ad-9fd3f8ca88b8"))))
            .withNextLink("wfmvigorqjbt");
        model = BinaryData.fromObject(model).toObject(PartnerRegistrationsListResult.class);
        Assertions.assertEquals("slkvntjl", model.value().get(0).location());
        Assertions.assertEquals("jkskyr", model.value().get(0).tags().get("oov"));
        Assertions.assertEquals(UUID.fromString("c20d298e-645a-4e2c-a4ad-9fd3f8ca88b8"),
            model.value().get(0).partnerRegistrationImmutableId());
        Assertions.assertEquals("wfmvigorqjbt", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
