// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"rqlrqffawe\":\"hychocokuleh\",\"dbrxmrgc\":\"urkphyjdxravju\",\"jbuscg\":\"bapxkiyfjjkb\",\"mclujyxkyxlzgs\":\"uusioycblev\"},\"identity\":{\"type\":\"None\",\"principalId\":\"ltafhbzffo\",\"tenantId\":\"mbj\",\"userAssignedIdentities\":{\"ptnuwjtkschgc\":{\"principalId\":\"czpgvdwnapfdq\",\"clientId\":\"wf\"},\"vyeldot\":{\"principalId\":\"y\",\"clientId\":\"eseyqr\"},\"txfkndlqvt\":{\"principalId\":\"dkwisw\",\"clientId\":\"ukjtasbvwispkxk\"},\"groeshoyg\":{\"principalId\":\"nvgmmbugtywa\",\"clientId\":\"qaqkuea\"}}},\"properties\":{\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"kfaoytehq\",\"action\":\"Allow\"},{\"ipMask\":\"mvqmtdwckygroej\",\"action\":\"Allow\"},{\"ipMask\":\"jdjusk\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.2\",\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinRegion\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"f\":{\"description\":\"egplwr\",\"displayName\":\"hwddkvbxgkq\",\"documentationUrl\":\"ybwptda\",\"dataSchemaUrl\":\"rvv\"}}}},\"sku\":{\"name\":\"Basic\"}}")
            .toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("hychocokuleh", model.tags().get("rqlrqffawe"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ltafhbzffo", model.identity().principalId());
        Assertions.assertEquals("mbj", model.identity().tenantId());
        Assertions.assertEquals("czpgvdwnapfdq",
            model.identity().userAssignedIdentities().get("ptnuwjtkschgc").principalId());
        Assertions.assertEquals("wf", model.identity().userAssignedIdentities().get("ptnuwjtkschgc").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("kfaoytehq", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("egplwr", model.eventTypeInfo().inlineEventTypes().get("f").description());
        Assertions.assertEquals("hwddkvbxgkq", model.eventTypeInfo().inlineEventTypes().get("f").displayName());
        Assertions.assertEquals("ybwptda", model.eventTypeInfo().inlineEventTypes().get("f").documentationUrl());
        Assertions.assertEquals("rvv", model.eventTypeInfo().inlineEventTypes().get("f").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicUpdateParameters model = new TopicUpdateParameters()
            .withTags(mapOf("rqlrqffawe", "hychocokuleh", "dbrxmrgc", "urkphyjdxravju", "jbuscg", "bapxkiyfjjkb",
                "mclujyxkyxlzgs", "uusioycblev"))
            .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                .withPrincipalId("ltafhbzffo")
                .withTenantId("mbj")
                .withUserAssignedIdentities(mapOf("ptnuwjtkschgc",
                    new UserIdentityProperties().withPrincipalId("czpgvdwnapfdq").withClientId("wf"), "vyeldot",
                    new UserIdentityProperties().withPrincipalId("y").withClientId("eseyqr"), "txfkndlqvt",
                    new UserIdentityProperties().withPrincipalId("dkwisw").withClientId("ukjtasbvwispkxk"), "groeshoyg",
                    new UserIdentityProperties().withPrincipalId("nvgmmbugtywa").withClientId("qaqkuea"))))
            .withSku(new ResourceSku().withName(Sku.BASIC))
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("kfaoytehq").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("mvqmtdwckygroej").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("jdjusk").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
            .withDisableLocalAuth(false)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("f",
                    new InlineEventProperties().withDescription("egplwr")
                        .withDisplayName("hwddkvbxgkq")
                        .withDocumentationUrl("ybwptda")
                        .withDataSchemaUrl("rvv"))));
        model = BinaryData.fromObject(model).toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("hychocokuleh", model.tags().get("rqlrqffawe"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("ltafhbzffo", model.identity().principalId());
        Assertions.assertEquals("mbj", model.identity().tenantId());
        Assertions.assertEquals("czpgvdwnapfdq",
            model.identity().userAssignedIdentities().get("ptnuwjtkschgc").principalId());
        Assertions.assertEquals("wf", model.identity().userAssignedIdentities().get("ptnuwjtkschgc").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("kfaoytehq", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("egplwr", model.eventTypeInfo().inlineEventTypes().get("f").description());
        Assertions.assertEquals("hwddkvbxgkq", model.eventTypeInfo().inlineEventTypes().get("f").displayName());
        Assertions.assertEquals("ybwptda", model.eventTypeInfo().inlineEventTypes().get("f").documentationUrl());
        Assertions.assertEquals("rvv", model.eventTypeInfo().inlineEventTypes().get("f").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
