// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"sybwptdaca\":\"hwddkvbxgkq\",\"iwenazero\":\"vvlfntymtp\",\"lsxkd\":\"zrsq\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"fgsdpcvessmzhhk\",\"tenantId\":\"ip\",\"userAssignedIdentities\":{\"hta\":{\"principalId\":\"ctekval\",\"clientId\":\"htjqvqyvw\"}}},\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"se\",\"action\":\"Allow\"},{\"ipMask\":\"ivzrrryveimipsk\",\"action\":\"Allow\"},{\"ipMask\":\"tv\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.1\",\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"floygbdgwumg\":{\"description\":\"gsyeipqdsmjtg\",\"displayName\":\"gdgkki\",\"documentationUrl\":\"plkcsm\",\"dataSchemaUrl\":\"hwtbbaedorvvm\"},\"jnhvlqjbekpeeks\":{\"description\":\"gdhpabgdexjddv\",\"displayName\":\"aqwotmmwl\",\"documentationUrl\":\"olsrsxapt\",\"dataSchemaUrl\":\"hexcgjokj\"},\"bztensvkzykjtj\":{\"description\":\"ksdqhjvy\",\"displayName\":\"xeslkhhustcpoqm\",\"documentationUrl\":\"nwqjwgokn\",\"dataSchemaUrl\":\"jjjkxybwfdbk\"}}}},\"sku\":{\"name\":\"Basic\"}}")
            .toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("hwddkvbxgkq", model.tags().get("sybwptdaca"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("fgsdpcvessmzhhk", model.identity().principalId());
        Assertions.assertEquals("ip", model.identity().tenantId());
        Assertions.assertEquals("ctekval", model.identity().userAssignedIdentities().get("hta").principalId());
        Assertions.assertEquals("htjqvqyvw", model.identity().userAssignedIdentities().get("hta").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("se", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("gsyeipqdsmjtg",
            model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").description());
        Assertions.assertEquals("gdgkki", model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").displayName());
        Assertions.assertEquals("plkcsm",
            model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").documentationUrl());
        Assertions.assertEquals("hwtbbaedorvvm",
            model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicUpdateParameters model
            = new TopicUpdateParameters()
                .withTags(mapOf("sybwptdaca", "hwddkvbxgkq", "iwenazero", "vvlfntymtp", "lsxkd", "zrsq"))
                .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withPrincipalId("fgsdpcvessmzhhk")
                    .withTenantId("ip")
                    .withUserAssignedIdentities(mapOf("hta",
                        new UserIdentityProperties().withPrincipalId("ctekval").withClientId("htjqvqyvw"))))
                .withSku(new ResourceSku().withName(Sku.BASIC))
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("se").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("ivzrrryveimipsk").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("tv").withAction(IpActionType.ALLOW)))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
                .withDisableLocalAuth(false)
                .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("floygbdgwumg",
                        new InlineEventProperties().withDescription("gsyeipqdsmjtg")
                            .withDisplayName("gdgkki")
                            .withDocumentationUrl("plkcsm")
                            .withDataSchemaUrl("hwtbbaedorvvm"),
                        "jnhvlqjbekpeeks",
                        new InlineEventProperties().withDescription("gdhpabgdexjddv")
                            .withDisplayName("aqwotmmwl")
                            .withDocumentationUrl("olsrsxapt")
                            .withDataSchemaUrl("hexcgjokj"),
                        "bztensvkzykjtj",
                        new InlineEventProperties().withDescription("ksdqhjvy")
                            .withDisplayName("xeslkhhustcpoqm")
                            .withDocumentationUrl("nwqjwgokn")
                            .withDataSchemaUrl("jjjkxybwfdbk"))));
        model = BinaryData.fromObject(model).toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("hwddkvbxgkq", model.tags().get("sybwptdaca"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("fgsdpcvessmzhhk", model.identity().principalId());
        Assertions.assertEquals("ip", model.identity().tenantId());
        Assertions.assertEquals("ctekval", model.identity().userAssignedIdentities().get("hta").principalId());
        Assertions.assertEquals("htjqvqyvw", model.identity().userAssignedIdentities().get("hta").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("se", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("gsyeipqdsmjtg",
            model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").description());
        Assertions.assertEquals("gdgkki", model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").displayName());
        Assertions.assertEquals("plkcsm",
            model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").documentationUrl());
        Assertions.assertEquals("hwtbbaedorvvm",
            model.eventTypeInfo().inlineEventTypes().get("floygbdgwumg").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
