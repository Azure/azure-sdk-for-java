// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"qjbek\":\"v\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"nbksd\",\"tenantId\":\"jvyklxeslkhhust\",\"userAssignedIdentities\":{\"b\":{\"principalId\":\"mavnw\",\"clientId\":\"wgoknlejjjkx\"},\"fwushcdpkupn\":{\"principalId\":\"dbkjbztensvkzykj\",\"clientId\":\"kns\"},\"cyayk\":{\"principalId\":\"mgjfbpkuwxeoio\",\"clientId\":\"izfavkjzwf\"}}},\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"wxrzxmdewsrsxkrp\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\",\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"ledynojpz\":{\"description\":\"suhbrnn\",\"displayName\":\"xs\",\"documentationUrl\":\"jhqkbiwetpozy\",\"dataSchemaUrl\":\"qiqyhgfsetzlexbs\"}}}},\"sku\":{\"name\":\"Basic\"}}")
            .toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("v", model.tags().get("qjbek"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("nbksd", model.identity().principalId());
        Assertions.assertEquals("jvyklxeslkhhust", model.identity().tenantId());
        Assertions.assertEquals("mavnw", model.identity().userAssignedIdentities().get("b").principalId());
        Assertions.assertEquals("wgoknlejjjkx", model.identity().userAssignedIdentities().get("b").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("wxrzxmdewsrsxkrp", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("suhbrnn", model.eventTypeInfo().inlineEventTypes().get("ledynojpz").description());
        Assertions.assertEquals("xs", model.eventTypeInfo().inlineEventTypes().get("ledynojpz").displayName());
        Assertions.assertEquals("jhqkbiwetpozy",
            model.eventTypeInfo().inlineEventTypes().get("ledynojpz").documentationUrl());
        Assertions.assertEquals("qiqyhgfsetzlexbs",
            model.eventTypeInfo().inlineEventTypes().get("ledynojpz").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicUpdateParameters model = new TopicUpdateParameters().withTags(mapOf("qjbek", "v"))
            .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED).withPrincipalId("nbksd")
                .withTenantId("jvyklxeslkhhust")
                .withUserAssignedIdentities(mapOf("b",
                    new UserIdentityProperties().withPrincipalId("mavnw").withClientId("wgoknlejjjkx"), "fwushcdpkupn",
                    new UserIdentityProperties().withPrincipalId("dbkjbztensvkzykj").withClientId("kns"), "cyayk",
                    new UserIdentityProperties().withPrincipalId("mgjfbpkuwxeoio").withClientId("izfavkjzwf"))))
            .withSku(new ResourceSku().withName(Sku.BASIC)).withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("wxrzxmdewsrsxkrp").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO).withDisableLocalAuth(false)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE).withInlineEventTypes(
                mapOf("ledynojpz", new InlineEventProperties().withDescription("suhbrnn").withDisplayName("xs")
                    .withDocumentationUrl("jhqkbiwetpozy").withDataSchemaUrl("qiqyhgfsetzlexbs"))));
        model = BinaryData.fromObject(model).toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("v", model.tags().get("qjbek"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("nbksd", model.identity().principalId());
        Assertions.assertEquals("jvyklxeslkhhust", model.identity().tenantId());
        Assertions.assertEquals("mavnw", model.identity().userAssignedIdentities().get("b").principalId());
        Assertions.assertEquals("wgoknlejjjkx", model.identity().userAssignedIdentities().get("b").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("wxrzxmdewsrsxkrp", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("suhbrnn", model.eventTypeInfo().inlineEventTypes().get("ledynojpz").description());
        Assertions.assertEquals("xs", model.eventTypeInfo().inlineEventTypes().get("ledynojpz").displayName());
        Assertions.assertEquals("jhqkbiwetpozy",
            model.eventTypeInfo().inlineEventTypes().get("ledynojpz").documentationUrl());
        Assertions.assertEquals("qiqyhgfsetzlexbs",
            model.eventTypeInfo().inlineEventTypes().get("ledynojpz").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
