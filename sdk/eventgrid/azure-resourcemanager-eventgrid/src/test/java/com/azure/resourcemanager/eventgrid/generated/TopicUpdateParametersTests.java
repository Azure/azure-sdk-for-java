// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"vxilcbt\":\"cvwmzhwplefa\",\"jfzqlqhycavodgg\":\"nhnzeyqxt\",\"nlrariaawiuagy\":\"dbeesmie\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"ylyrfgiagtco\",\"tenantId\":\"cqwogfnzjvusfzl\",\"userAssignedIdentities\":{\"tgkbugrjqctojc\":{\"principalId\":\"uxylfsbtkadpy\",\"clientId\":\"wn\"},\"lcplc\":{\"principalId\":\"sofieypefojyqd\",\"clientId\":\"u\"},\"cjhfgmvecactxmw\":{\"principalId\":\"hihihlhzdsqtzbsr\",\"clientId\":\"o\"},\"uwifzmpjwyiv\":{\"principalId\":\"e\",\"clientId\":\"wcluqovekqvgq\"}}},\"properties\":{\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"hrfsphuagrtti\",\"action\":\"Allow\"},{\"ipMask\":\"sqczkvyklxubyj\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.0\",\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"apzhyrpetoge\":{\"description\":\"qibrtalme\",\"displayName\":\"t\",\"documentationUrl\":\"dslqxihhrmooizqs\",\"dataSchemaUrl\":\"pxiutc\"}}}}}")
            .toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("cvwmzhwplefa", model.tags().get("vxilcbt"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ylyrfgiagtco", model.identity().principalId());
        Assertions.assertEquals("cqwogfnzjvusfzl", model.identity().tenantId());
        Assertions.assertEquals("uxylfsbtkadpy",
            model.identity().userAssignedIdentities().get("tgkbugrjqctojc").principalId());
        Assertions.assertEquals("wn", model.identity().userAssignedIdentities().get("tgkbugrjqctojc").clientId());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("hrfsphuagrtti", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("qibrtalme",
            model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").description());
        Assertions.assertEquals("t", model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").displayName());
        Assertions.assertEquals("dslqxihhrmooizqs",
            model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").documentationUrl());
        Assertions.assertEquals("pxiutc", model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicUpdateParameters model = new TopicUpdateParameters()
            .withTags(mapOf("vxilcbt", "cvwmzhwplefa", "jfzqlqhycavodgg", "nhnzeyqxt", "nlrariaawiuagy", "dbeesmie"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("ylyrfgiagtco")
                .withTenantId("cqwogfnzjvusfzl")
                .withUserAssignedIdentities(mapOf("tgkbugrjqctojc",
                    new UserIdentityProperties().withPrincipalId("uxylfsbtkadpy").withClientId("wn"), "lcplc",
                    new UserIdentityProperties().withPrincipalId("sofieypefojyqd").withClientId("u"), "cjhfgmvecactxmw",
                    new UserIdentityProperties().withPrincipalId("hihihlhzdsqtzbsr").withClientId("o"), "uwifzmpjwyiv",
                    new UserIdentityProperties().withPrincipalId("e").withClientId("wcluqovekqvgq"))))
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("hrfsphuagrtti").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("sqczkvyklxubyj").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
            .withDisableLocalAuth(false)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("apzhyrpetoge",
                    new InlineEventProperties().withDescription("qibrtalme")
                        .withDisplayName("t")
                        .withDocumentationUrl("dslqxihhrmooizqs")
                        .withDataSchemaUrl("pxiutc"))));
        model = BinaryData.fromObject(model).toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("cvwmzhwplefa", model.tags().get("vxilcbt"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("ylyrfgiagtco", model.identity().principalId());
        Assertions.assertEquals("cqwogfnzjvusfzl", model.identity().tenantId());
        Assertions.assertEquals("uxylfsbtkadpy",
            model.identity().userAssignedIdentities().get("tgkbugrjqctojc").principalId());
        Assertions.assertEquals("wn", model.identity().userAssignedIdentities().get("tgkbugrjqctojc").clientId());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("hrfsphuagrtti", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("qibrtalme",
            model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").description());
        Assertions.assertEquals("t", model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").displayName());
        Assertions.assertEquals("dslqxihhrmooizqs",
            model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").documentationUrl());
        Assertions.assertEquals("pxiutc", model.eventTypeInfo().inlineEventTypes().get("apzhyrpetoge").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
