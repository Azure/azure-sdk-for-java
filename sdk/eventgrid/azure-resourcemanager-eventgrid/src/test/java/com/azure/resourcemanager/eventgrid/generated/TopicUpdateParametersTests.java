// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"lkvec\":\"gpszngafpg\",\"dyedmzrgjfo\":\"ujcngo\",\"oitpkpztrgdgx\":\"nub\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"aswugyxpqitw\",\"tenantId\":\"alwvskbu\",\"userAssignedIdentities\":{\"jpds\":{\"principalId\":\"aq\",\"clientId\":\"ltcoqc\"},\"ofqcvovjufycsjm\":{\"principalId\":\"akuejk\",\"clientId\":\"bizt\"},\"riuxegthortuda\":{\"principalId\":\"e\",\"clientId\":\"ej\"},\"bgqnz\":{\"principalId\":\"pjfe\",\"clientId\":\"erppt\"}}},\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"alwcjgckbb\",\"action\":\"Allow\"},{\"ipMask\":\"zpraoxn\",\"action\":\"Allow\"},{\"ipMask\":\"a\",\"action\":\"Allow\"},{\"ipMask\":\"tipwcxbyubhiqd\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.2\",\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinGeopair\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"aovurexdndsbdwe\":{\"description\":\"uhiigbyl\",\"displayName\":\"igvxvatvcrk\",\"documentationUrl\":\"b\",\"dataSchemaUrl\":\"qxvhcsyhzlwxa\"},\"xitp\":{\"description\":\"e\",\"displayName\":\"mwntopagttmvmma\",\"documentationUrl\":\"aqylkjztji\",\"dataSchemaUrl\":\"zjcg\"},\"lyujlfyoump\":{\"description\":\"nzcpdltkr\",\"displayName\":\"jmtbd\",\"documentationUrl\":\"cqguef\",\"dataSchemaUrl\":\"ompheqdur\"},\"jc\":{\"description\":\"yec\",\"displayName\":\"digp\",\"documentationUrl\":\"jbrzmqxucyc\",\"dataSchemaUrl\":\"oclxiut\"}}}},\"sku\":{\"name\":\"Basic\"}}")
            .toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("gpszngafpg", model.tags().get("lkvec"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("aswugyxpqitw", model.identity().principalId());
        Assertions.assertEquals("alwvskbu", model.identity().tenantId());
        Assertions.assertEquals("aq", model.identity().userAssignedIdentities().get("jpds").principalId());
        Assertions.assertEquals("ltcoqc", model.identity().userAssignedIdentities().get("jpds").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("alwcjgckbb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertTrue(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("uhiigbyl",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").description());
        Assertions.assertEquals("igvxvatvcrk",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").displayName());
        Assertions.assertEquals("b",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").documentationUrl());
        Assertions.assertEquals("qxvhcsyhzlwxa",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicUpdateParameters model
            = new TopicUpdateParameters()
                .withTags(mapOf("lkvec", "gpszngafpg", "dyedmzrgjfo", "ujcngo", "oitpkpztrgdgx", "nub"))
                .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withPrincipalId("aswugyxpqitw")
                    .withTenantId("alwvskbu")
                    .withUserAssignedIdentities(mapOf("jpds",
                        new UserIdentityProperties().withPrincipalId("aq").withClientId("ltcoqc"), "ofqcvovjufycsjm",
                        new UserIdentityProperties().withPrincipalId("akuejk").withClientId("bizt"), "riuxegthortuda",
                        new UserIdentityProperties().withPrincipalId("e").withClientId("ej"), "bgqnz",
                        new UserIdentityProperties().withPrincipalId("pjfe").withClientId("erppt"))))
                .withSku(new ResourceSku().withName(Sku.BASIC))
                .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
                .withInboundIpRules(
                    Arrays.asList(new InboundIpRule().withIpMask("alwcjgckbb").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("zpraoxn").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("a").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("tipwcxbyubhiqd").withAction(IpActionType.ALLOW)))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
                .withDisableLocalAuth(true)
                .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("aovurexdndsbdwe",
                        new InlineEventProperties().withDescription("uhiigbyl")
                            .withDisplayName("igvxvatvcrk")
                            .withDocumentationUrl("b")
                            .withDataSchemaUrl("qxvhcsyhzlwxa"),
                        "xitp",
                        new InlineEventProperties().withDescription("e")
                            .withDisplayName("mwntopagttmvmma")
                            .withDocumentationUrl("aqylkjztji")
                            .withDataSchemaUrl("zjcg"),
                        "lyujlfyoump",
                        new InlineEventProperties().withDescription("nzcpdltkr")
                            .withDisplayName("jmtbd")
                            .withDocumentationUrl("cqguef")
                            .withDataSchemaUrl("ompheqdur"),
                        "jc",
                        new InlineEventProperties().withDescription("yec")
                            .withDisplayName("digp")
                            .withDocumentationUrl("jbrzmqxucyc")
                            .withDataSchemaUrl("oclxiut"))));
        model = BinaryData.fromObject(model).toObject(TopicUpdateParameters.class);
        Assertions.assertEquals("gpszngafpg", model.tags().get("lkvec"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("aswugyxpqitw", model.identity().principalId());
        Assertions.assertEquals("alwvskbu", model.identity().tenantId());
        Assertions.assertEquals("aq", model.identity().userAssignedIdentities().get("jpds").principalId());
        Assertions.assertEquals("ltcoqc", model.identity().userAssignedIdentities().get("jpds").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("alwcjgckbb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertTrue(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("uhiigbyl",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").description());
        Assertions.assertEquals("igvxvatvcrk",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").displayName());
        Assertions.assertEquals("b",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").documentationUrl());
        Assertions.assertEquals("qxvhcsyhzlwxa",
            model.eventTypeInfo().inlineEventTypes().get("aovurexdndsbdwe").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
