// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.PartnerRegistrationInner;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class PartnerRegistrationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerRegistrationInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"partnerRegistrationImmutableId\":\"01246b86-e9b2-4a5e-93f3-f90f7a3b601a\"},\"location\":\"hcz\",\"tags\":{\"vk\":\"xzbujrtrhqvwr\",\"zonzlrpiqywnc\":\"gnl\"},\"id\":\"jtszcof\",\"name\":\"zehtdhgb\",\"type\":\"k\"}")
            .toObject(PartnerRegistrationInner.class);
        Assertions.assertEquals("hcz", model.location());
        Assertions.assertEquals("xzbujrtrhqvwr", model.tags().get("vk"));
        Assertions.assertEquals(UUID.fromString("01246b86-e9b2-4a5e-93f3-f90f7a3b601a"),
            model.partnerRegistrationImmutableId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerRegistrationInner model = new PartnerRegistrationInner().withLocation("hcz")
            .withTags(mapOf("vk", "xzbujrtrhqvwr", "zonzlrpiqywnc", "gnl"))
            .withPartnerRegistrationImmutableId(UUID.fromString("01246b86-e9b2-4a5e-93f3-f90f7a3b601a"));
        model = BinaryData.fromObject(model).toObject(PartnerRegistrationInner.class);
        Assertions.assertEquals("hcz", model.location());
        Assertions.assertEquals("xzbujrtrhqvwr", model.tags().get("vk"));
        Assertions.assertEquals(UUID.fromString("01246b86-e9b2-4a5e-93f3-f90f7a3b601a"),
            model.partnerRegistrationImmutableId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
