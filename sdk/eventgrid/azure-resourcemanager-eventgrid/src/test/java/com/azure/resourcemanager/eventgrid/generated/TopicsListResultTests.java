// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.ExtendedLocation;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"ksnbksdqhjv\",\"name\":\"klxesl\",\"type\":\"hhus\"},{\"properties\":{},\"id\":\"poq\",\"name\":\"avnwqj\",\"type\":\"g\"},{\"properties\":{},\"id\":\"nlejjjkxybwf\",\"name\":\"bkjbz\",\"type\":\"ensvkzykjtj\"},{\"properties\":{},\"id\":\"sxfwushcdp\",\"name\":\"upnqrmgjfb\",\"type\":\"kuwxeoiojfizfavk\"}],\"provisioningState\":\"Failed\",\"endpoint\":\"bcyaykmmfzs\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"xmdewsrsxkrplbj\":{},\"zej\":{}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"uhbrnnhjxsq\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"iwetpoz\",\"action\":\"Allow\"},{\"ipMask\":\"iqyhgfse\",\"action\":\"Allow\"},{\"ipMask\":\"xbsfledynoj\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"None\",\"principalId\":\"qsyclj\",\"tenantId\":\"lpkpbafvafhl\",\"userAssignedIdentities\":{\"irrhv\":{\"principalId\":\"cbevxrhyzdfw\",\"clientId\":\"ofpltdbm\"}}},\"kind\":\"Azure\",\"extendedLocation\":{\"name\":\"cwnpqigtuujwouhd\",\"type\":\"s\"},\"location\":\"rb\",\"tags\":{\"kjyaznumtg\":\"sjybvitv\",\"wdchozfn\":\"m\",\"xn\":\"fexl\"},\"id\":\"akizvoaikna\",\"name\":\"lnuwiguy\",\"type\":\"lykwphvxz\"}],\"nextLink\":\"xhmpejtlkex\"}")
            .toObject(TopicsListResult.class);
        Assertions.assertEquals("rb", model.value().get(0).location());
        Assertions.assertEquals("sjybvitv", model.value().get(0).tags().get("kjyaznumtg"));
        Assertions.assertEquals(Sku.PREMIUM, model.value().get(0).sku().name());
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("qsyclj", model.value().get(0).identity().principalId());
        Assertions.assertEquals("lpkpbafvafhl", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("cbevxrhyzdfw",
            model.value().get(0).identity().userAssignedIdentities().get("irrhv").principalId());
        Assertions.assertEquals("ofpltdbm",
            model.value().get(0).identity().userAssignedIdentities().get("irrhv").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, model.value().get(0).kind());
        Assertions.assertEquals("cwnpqigtuujwouhd", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("s", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.value().get(0).inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("iwetpoz", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("xhmpejtlkex", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicsListResult model
            = new TopicsListResult()
                .withValue(
                    Arrays.asList(new TopicInner().withLocation("rb")
                        .withTags(mapOf("kjyaznumtg", "sjybvitv", "wdchozfn", "m", "xn", "fexl"))
                        .withSku(new ResourceSku().withName(Sku.PREMIUM))
                        .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                            .withPrincipalId("qsyclj")
                            .withTenantId("lpkpbafvafhl")
                            .withUserAssignedIdentities(mapOf("irrhv",
                                new UserIdentityProperties().withPrincipalId("cbevxrhyzdfw").withClientId("ofpltdbm"))))
                        .withKind(ResourceKind.AZURE)
                        .withExtendedLocation(new ExtendedLocation().withName("cwnpqigtuujwouhd").withType("s"))
                        .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                            .withInlineEventTypes(mapOf("xmdewsrsxkrplbj", new InlineEventProperties(), "zej",
                                new InlineEventProperties())))
                        .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                        .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
                        .withInputSchemaMapping(new JsonInputSchemaMapping())
                        .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                        .withInboundIpRules(
                            Arrays.asList(new InboundIpRule().withIpMask("iwetpoz").withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("iqyhgfse").withAction(IpActionType.ALLOW),
                                new InboundIpRule().withIpMask("xbsfledynoj").withAction(IpActionType.ALLOW)))
                        .withDisableLocalAuth(false)
                        .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)))
                .withNextLink("xhmpejtlkex");
        model = BinaryData.fromObject(model).toObject(TopicsListResult.class);
        Assertions.assertEquals("rb", model.value().get(0).location());
        Assertions.assertEquals("sjybvitv", model.value().get(0).tags().get("kjyaznumtg"));
        Assertions.assertEquals(Sku.PREMIUM, model.value().get(0).sku().name());
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("qsyclj", model.value().get(0).identity().principalId());
        Assertions.assertEquals("lpkpbafvafhl", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("cbevxrhyzdfw",
            model.value().get(0).identity().userAssignedIdentities().get("irrhv").principalId());
        Assertions.assertEquals("ofpltdbm",
            model.value().get(0).identity().userAssignedIdentities().get("irrhv").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, model.value().get(0).kind());
        Assertions.assertEquals("cwnpqigtuujwouhd", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("s", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.value().get(0).inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("iwetpoz", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("xhmpejtlkex", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
