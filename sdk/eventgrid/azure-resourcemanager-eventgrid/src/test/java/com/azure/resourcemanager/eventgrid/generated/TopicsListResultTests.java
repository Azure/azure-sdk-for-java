// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"fajnjwltlwtjjguk\",\"name\":\"alhsnvkc\",\"type\":\"mxzrpoa\"},{\"properties\":{},\"id\":\"lnwiaaomylwe\",\"name\":\"z\",\"type\":\"lcsethwwnpj\"}],\"provisioningState\":\"Failed\",\"endpoint\":\"swpchwahfbousn\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"wetwlyxgncxykxh\":{},\"jhlimmbcxfhbcpo\":{},\"xvxcjzhq\":{},\"zxfpxtgqsc\":{}}},\"minimumTlsVersionAllowed\":\"1.2\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"hdqazkmtgguwp\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"ivmmghfcfiwrxgk\",\"action\":\"Allow\"},{\"ipMask\":\"yinzqodfvpgs\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"djtxvzflbq\",\"tenantId\":\"aqvlgafcqusr\",\"userAssignedIdentities\":{\"dxukuqgsjjxundxg\":{\"principalId\":\"nwsdtutnwlduyc\",\"clientId\":\"zhyrmewipmve\"},\"uneqsxvmhf\":{\"principalId\":\"twzhhzjhfjmhv\",\"clientId\":\"uvgp\"},\"hudypohyuemsl\":{\"principalId\":\"zjyi\",\"clientId\":\"as\"}}},\"location\":\"sqy\",\"tags\":{\"nygq\":\"oobrlttyms\",\"hqlyvijo\":\"nfwqzdzgtilaxhn\",\"zunbixx\":\"wivkxo\"},\"id\":\"ti\",\"name\":\"vcpwpgclrc\",\"type\":\"vtsoxf\"}],\"nextLink\":\"enxpmyyefr\"}")
            .toObject(TopicsListResult.class);
        Assertions.assertEquals("sqy", model.value().get(0).location());
        Assertions.assertEquals("oobrlttyms", model.value().get(0).tags().get("nygq"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("djtxvzflbq", model.value().get(0).identity().principalId());
        Assertions.assertEquals("aqvlgafcqusr", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("nwsdtutnwlduyc",
            model.value().get(0).identity().userAssignedIdentities().get("dxukuqgsjjxundxg").principalId());
        Assertions.assertEquals("zhyrmewipmve",
            model.value().get(0).identity().userAssignedIdentities().get("dxukuqgsjjxundxg").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.value().get(0).inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("ivmmghfcfiwrxgk", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("enxpmyyefr", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicsListResult model = new TopicsListResult().withValue(Arrays.asList(new TopicInner().withLocation("sqy")
            .withTags(mapOf("nygq", "oobrlttyms", "hqlyvijo", "nfwqzdzgtilaxhn", "zunbixx", "wivkxo"))
            .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED)
                .withPrincipalId("djtxvzflbq")
                .withTenantId("aqvlgafcqusr")
                .withUserAssignedIdentities(mapOf("dxukuqgsjjxundxg",
                    new UserIdentityProperties().withPrincipalId("nwsdtutnwlduyc").withClientId("zhyrmewipmve"),
                    "uneqsxvmhf", new UserIdentityProperties().withPrincipalId("twzhhzjhfjmhv").withClientId("uvgp"),
                    "hudypohyuemsl", new UserIdentityProperties().withPrincipalId("zjyi").withClientId("as"))))
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("wetwlyxgncxykxh", new InlineEventProperties(), "jhlimmbcxfhbcpo",
                    new InlineEventProperties(), "xvxcjzhq", new InlineEventProperties(), "zxfpxtgqsc",
                    new InlineEventProperties())))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
            .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("ivmmghfcfiwrxgk").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("yinzqodfvpgs").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR))).withNextLink("enxpmyyefr");
        model = BinaryData.fromObject(model).toObject(TopicsListResult.class);
        Assertions.assertEquals("sqy", model.value().get(0).location());
        Assertions.assertEquals("oobrlttyms", model.value().get(0).tags().get("nygq"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals("djtxvzflbq", model.value().get(0).identity().principalId());
        Assertions.assertEquals("aqvlgafcqusr", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("nwsdtutnwlduyc",
            model.value().get(0).identity().userAssignedIdentities().get("dxukuqgsjjxundxg").principalId());
        Assertions.assertEquals("zhyrmewipmve",
            model.value().get(0).identity().userAssignedIdentities().get("dxukuqgsjjxundxg").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.value().get(0).inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("ivmmghfcfiwrxgk", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("enxpmyyefr", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
