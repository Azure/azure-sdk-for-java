// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.ExtendedLocation;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.TopicsListResult;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{},\"id\":\"nwsithuqolyahluq\",\"name\":\"qulsutrjbhxykfhy\",\"type\":\"ezvqq\"},{\"properties\":{},\"id\":\"drftbcvexreuquo\",\"name\":\"tljvfwhreagkhyx\",\"type\":\"rqtvbczsulmdgglm\"},{\"properties\":{},\"id\":\"jpfseykg\",\"name\":\"angpszngafpgyl\",\"type\":\"vecjujcn\"}],\"provisioningState\":\"Canceled\",\"endpoint\":\"yedmzrgj\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"noitpkpztr\":{},\"dgxvco\":{}}},\"minimumTlsVersionAllowed\":\"1.2\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"yxp\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"alwvskbu\",\"action\":\"Allow\"},{\"ipMask\":\"aq\",\"action\":\"Allow\"},{\"ipMask\":\"co\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"None\",\"principalId\":\"kmv\",\"tenantId\":\"ztjofqcvovjufyc\",\"userAssignedIdentities\":{\"elqerpp\":{\"principalId\":\"bemyeji\",\"clientId\":\"uxegthortudawlpj\"},\"ilialwcjgc\":{\"principalId\":\"bgqnz\",\"clientId\":\"h\"}}},\"kind\":\"AzureArc\",\"extendedLocation\":{\"name\":\"cgzpraoxnyu\",\"type\":\"a\"},\"location\":\"gftipwc\",\"tags\":{\"pnuhzafccnu\":\"ubhiqdxyur\",\"yl\":\"iig\"},\"id\":\"ui\",\"name\":\"vxva\",\"type\":\"vcrk\"}],\"nextLink\":\"b\"}")
            .toObject(TopicsListResult.class);
        Assertions.assertEquals("gftipwc", model.value().get(0).location());
        Assertions.assertEquals("ubhiqdxyur", model.value().get(0).tags().get("pnuhzafccnu"));
        Assertions.assertEquals(Sku.BASIC, model.value().get(0).sku().name());
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("kmv", model.value().get(0).identity().principalId());
        Assertions.assertEquals("ztjofqcvovjufyc", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("bemyeji",
            model.value().get(0).identity().userAssignedIdentities().get("elqerpp").principalId());
        Assertions.assertEquals("uxegthortudawlpj",
            model.value().get(0).identity().userAssignedIdentities().get("elqerpp").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.value().get(0).kind());
        Assertions.assertEquals("cgzpraoxnyu", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("a", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.value().get(0).inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("alwvskbu", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("b", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicsListResult model = new TopicsListResult().withValue(Arrays
            .asList(new TopicInner().withLocation("gftipwc").withTags(mapOf("pnuhzafccnu", "ubhiqdxyur", "yl", "iig"))
                .withSku(new ResourceSku().withName(Sku.BASIC))
                .withIdentity(new IdentityInfo().withType(IdentityType.NONE).withPrincipalId("kmv")
                    .withTenantId("ztjofqcvovjufyc")
                    .withUserAssignedIdentities(mapOf("elqerpp",
                        new UserIdentityProperties().withPrincipalId("bemyeji").withClientId("uxegthortudawlpj"),
                        "ilialwcjgc", new UserIdentityProperties().withPrincipalId("bgqnz").withClientId("h"))))
                .withKind(ResourceKind.AZURE_ARC)
                .withExtendedLocation(new ExtendedLocation().withName("cgzpraoxnyu").withType("a"))
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE).withInlineEventTypes(
                    mapOf("noitpkpztr", new InlineEventProperties(), "dgxvco", new InlineEventProperties())))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO).withInputSchema(InputSchema.CLOUD_EVENT_SCHEMA_V1_0)
                .withInputSchemaMapping(new InputSchemaMapping())
                .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
                .withInboundIpRules(
                    Arrays.asList(new InboundIpRule().withIpMask("alwvskbu").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("aq").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("co").withAction(IpActionType.ALLOW)))
                .withDisableLocalAuth(true).withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION)))
            .withNextLink("b");
        model = BinaryData.fromObject(model).toObject(TopicsListResult.class);
        Assertions.assertEquals("gftipwc", model.value().get(0).location());
        Assertions.assertEquals("ubhiqdxyur", model.value().get(0).tags().get("pnuhzafccnu"));
        Assertions.assertEquals(Sku.BASIC, model.value().get(0).sku().name());
        Assertions.assertEquals(IdentityType.NONE, model.value().get(0).identity().type());
        Assertions.assertEquals("kmv", model.value().get(0).identity().principalId());
        Assertions.assertEquals("ztjofqcvovjufyc", model.value().get(0).identity().tenantId());
        Assertions.assertEquals("bemyeji",
            model.value().get(0).identity().userAssignedIdentities().get("elqerpp").principalId());
        Assertions.assertEquals("uxegthortudawlpj",
            model.value().get(0).identity().userAssignedIdentities().get("elqerpp").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.value().get(0).kind());
        Assertions.assertEquals("cgzpraoxnyu", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("a", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.value().get(0).eventTypeInfo().kind());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.value().get(0).minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.value().get(0).inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.value().get(0).publicNetworkAccess());
        Assertions.assertEquals("alwvskbu", model.value().get(0).inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.value().get(0).inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.value().get(0).disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.value().get(0).dataResidencyBoundary());
        Assertions.assertEquals("b", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
