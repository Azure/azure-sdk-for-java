// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.ExtendedLocation;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"cecfehuwaoaguh\"},\"groupIds\":[\"llizs\",\"ac\",\"jvhrweft\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"pmvssehaep\",\"actionsRequired\":\"mcxtczhu\"},\"provisioningState\":\"Deleting\"},\"id\":\"knijduyyes\",\"name\":\"ydjfb\",\"type\":\"c\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"ulrtywikdmh\"},\"groupIds\":[\"uflgbhgauacdixm\",\"ufr\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"gdkfnoz\",\"actionsRequired\":\"oqbvjhvefgwbmqj\"},\"provisioningState\":\"Updating\"},\"id\":\"tasfaymxbulpzeal\",\"name\":\"mqkyojwyvfkmbts\",\"type\":\"ahxsgxjcmm\"}],\"provisioningState\":\"Failed\",\"endpoint\":\"cubiwsdr\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"vevboclzh\":{\"description\":\"iffjxcjrm\",\"displayName\":\"abwibvjogjo\",\"documentationUrl\":\"cyefoyzbamwine\",\"dataSchemaUrl\":\"vfkakpold\"},\"blcouqehbhbcdszi\":{\"description\":\"knyuxgvttxpn\",\"displayName\":\"pzaamrdixtreki\",\"documentationUrl\":\"wyskbruffgll\",\"dataSchemaUrl\":\"kutvlxhrpqhv\"},\"hmrnadzyqegxy\":{\"description\":\"randoypmb\",\"displayName\":\"oormkfqlwxldyka\",\"documentationUrl\":\"ygaolnjpnnb\",\"dataSchemaUrl\":\"ksibjgsjjxx\"},\"ka\":{\"description\":\"pinbmhwbjijkgqxn\",\"displayName\":\"bkezn\",\"documentationUrl\":\"ujvaannggi\",\"dataSchemaUrl\":\"wkdtaawxwf\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"zmqkratbnxwbjs\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"fpksok\",\"action\":\"Allow\"},{\"ipMask\":\"ewijymrhbguz\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"o\",\"tenantId\":\"ffjkutycyarnroo\",\"userAssignedIdentities\":{\"pyc\":{\"principalId\":\"bzog\",\"clientId\":\"t\"},\"zptwrlohap\":{\"principalId\":\"coe\",\"clientId\":\"nhzqrottjzcfy\"},\"xpjb\":{\"principalId\":\"nfszpyglqdhmrjz\",\"clientId\":\"l\"}}},\"kind\":\"AzureArc\",\"extendedLocation\":{\"name\":\"o\",\"type\":\"jenkyh\"},\"location\":\"zv\",\"tags\":{\"mpzqjhhhq\":\"fxjelg\",\"bsizus\":\"uwyvcacoyvi\",\"lzijiufehgmvflnw\":\"szlbscm\",\"kxrerlniylylyfwx\":\"v\"},\"id\":\"utgqztwh\",\"name\":\"hmupgxyjtcdxabbu\",\"type\":\"ftabenbbklqp\"}")
            .toObject(TopicInner.class);
        Assertions.assertEquals("zv", model.location());
        Assertions.assertEquals("fxjelg", model.tags().get("mpzqjhhhq"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("o", model.identity().principalId());
        Assertions.assertEquals("ffjkutycyarnroo", model.identity().tenantId());
        Assertions.assertEquals("bzog", model.identity().userAssignedIdentities().get("pyc").principalId());
        Assertions.assertEquals("t", model.identity().userAssignedIdentities().get("pyc").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.kind());
        Assertions.assertEquals("o", model.extendedLocation().name());
        Assertions.assertEquals("jenkyh", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("iffjxcjrm", model.eventTypeInfo().inlineEventTypes().get("vevboclzh").description());
        Assertions.assertEquals("abwibvjogjo", model.eventTypeInfo().inlineEventTypes().get("vevboclzh").displayName());
        Assertions.assertEquals("cyefoyzbamwine",
            model.eventTypeInfo().inlineEventTypes().get("vevboclzh").documentationUrl());
        Assertions.assertEquals("vfkakpold", model.eventTypeInfo().inlineEventTypes().get("vevboclzh").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("fpksok", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicInner model
            = new TopicInner().withLocation("zv")
                .withTags(mapOf("mpzqjhhhq", "fxjelg", "bsizus", "uwyvcacoyvi", "lzijiufehgmvflnw", "szlbscm",
                    "kxrerlniylylyfwx", "v"))
                .withSku(new ResourceSku().withName(Sku.BASIC))
                .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                    .withPrincipalId("o")
                    .withTenantId("ffjkutycyarnroo")
                    .withUserAssignedIdentities(mapOf("pyc",
                        new UserIdentityProperties().withPrincipalId("bzog").withClientId("t"), "zptwrlohap",
                        new UserIdentityProperties().withPrincipalId("coe").withClientId("nhzqrottjzcfy"), "xpjb",
                        new UserIdentityProperties().withPrincipalId("nfszpyglqdhmrjz").withClientId("l"))))
                .withKind(ResourceKind.AZURE_ARC)
                .withExtendedLocation(new ExtendedLocation().withName("o").withType("jenkyh"))
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("vevboclzh",
                        new InlineEventProperties().withDescription("iffjxcjrm")
                            .withDisplayName("abwibvjogjo")
                            .withDocumentationUrl("cyefoyzbamwine")
                            .withDataSchemaUrl("vfkakpold"),
                        "blcouqehbhbcdszi",
                        new InlineEventProperties().withDescription("knyuxgvttxpn")
                            .withDisplayName("pzaamrdixtreki")
                            .withDocumentationUrl("wyskbruffgll")
                            .withDataSchemaUrl("kutvlxhrpqhv"),
                        "hmrnadzyqegxy",
                        new InlineEventProperties().withDescription("randoypmb")
                            .withDisplayName("oormkfqlwxldyka")
                            .withDocumentationUrl("ygaolnjpnnb")
                            .withDataSchemaUrl("ksibjgsjjxx"),
                        "ka",
                        new InlineEventProperties().withDescription("pinbmhwbjijkgqxn")
                            .withDisplayName("bkezn")
                            .withDocumentationUrl("ujvaannggi")
                            .withDataSchemaUrl("wkdtaawxwf"))))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
                .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
                .withInputSchemaMapping(new InputSchemaMapping())
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withInboundIpRules(
                    Arrays.asList(new InboundIpRule().withIpMask("fpksok").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("ewijymrhbguz").withAction(IpActionType.ALLOW)))
                .withDisableLocalAuth(false)
                .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(TopicInner.class);
        Assertions.assertEquals("zv", model.location());
        Assertions.assertEquals("fxjelg", model.tags().get("mpzqjhhhq"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("o", model.identity().principalId());
        Assertions.assertEquals("ffjkutycyarnroo", model.identity().tenantId());
        Assertions.assertEquals("bzog", model.identity().userAssignedIdentities().get("pyc").principalId());
        Assertions.assertEquals("t", model.identity().userAssignedIdentities().get("pyc").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.kind());
        Assertions.assertEquals("o", model.extendedLocation().name());
        Assertions.assertEquals("jenkyh", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("iffjxcjrm", model.eventTypeInfo().inlineEventTypes().get("vevboclzh").description());
        Assertions.assertEquals("abwibvjogjo", model.eventTypeInfo().inlineEventTypes().get("vevboclzh").displayName());
        Assertions.assertEquals("cyefoyzbamwine",
            model.eventTypeInfo().inlineEventTypes().get("vevboclzh").documentationUrl());
        Assertions.assertEquals("vfkakpold", model.eventTypeInfo().inlineEventTypes().get("vevboclzh").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("fpksok", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
