// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.ExtendedLocation;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"oeoq\"},\"groupIds\":[\"h\",\"efgwbmqjc\",\"ntasfaymxbu\",\"pzealbmqkyojw\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"btsuahxs\",\"actionsRequired\":\"jcmmzrrscub\"},\"provisioningState\":\"Canceled\"},\"id\":\"drnpxqwodiff\",\"name\":\"xcjr\",\"type\":\"muabwibvjogjonmc\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"y\"},\"groupIds\":[\"mwineof\",\"fkak\",\"oldtvevboclzhz\",\"knyuxgvttxpn\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"amrdixtrekidswys\",\"actionsRequired\":\"ruffgllukk\"},\"provisioningState\":\"Updating\"},\"id\":\"lxhrp\",\"name\":\"hvmblcouqehbhbc\",\"type\":\"sziryrandoyp\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"oormkfqlwxldyka\"},\"groupIds\":[\"g\",\"olnjpnnbmjksibj\",\"sjjx\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"nadzyq\",\"actionsRequired\":\"xyivpinbm\"},\"provisioningState\":\"Deleting\"},\"id\":\"jijkgqxnhmbke\",\"name\":\"njaujvaan\",\"type\":\"ggiycwkdtaawxwf\"}],\"provisioningState\":\"Deleting\",\"endpoint\":\"mrrqmbzmqkratb\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"ffjkutycyarnroo\":{\"description\":\"dbirkfpksokdgo\",\"displayName\":\"wijymr\",\"documentationUrl\":\"guzozkyew\",\"dataSchemaUrl\":\"nzhhhqos\"},\"jzcfyjzptwr\":{\"description\":\"uabzoghkt\",\"displayName\":\"yczhco\",\"documentationUrl\":\"cnhz\",\"dataSchemaUrl\":\"ot\"}}},\"minimumTlsVersionAllowed\":\"1.1\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"nfszpyglqdhmrjz\",\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"jb\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"fq\",\"tenantId\":\"sqxfxjelgcmpz\",\"userAssignedIdentities\":{\"vbsizusjszlbscm\":{\"principalId\":\"hqxu\",\"clientId\":\"vcacoyv\"},\"xrerlniylylyf\":{\"principalId\":\"zijiufehgmv\",\"clientId\":\"nwyvq\"},\"bklqpxz\":{\"principalId\":\"zutgqztwhghmupg\",\"clientId\":\"jtcdxabbujftaben\"}}},\"kind\":\"AzureArc\",\"extendedLocation\":{\"name\":\"ddwwnlzafwxudgnh\",\"type\":\"okrtalvnb\"},\"location\":\"pbeme\",\"tags\":{\"nqodxahhxhq\":\"lvdjjukyr\",\"v\":\"aqnvzoqgyipemchg\",\"h\":\"czuejdtxptl\",\"qawmoaianc\":\"zhomewjjstliu\"},\"id\":\"nvodrrs\",\"name\":\"blxydkxr\",\"type\":\"vvbxiwkgfbqljnq\"}")
            .toObject(TopicInner.class);
        Assertions.assertEquals("pbeme", model.location());
        Assertions.assertEquals("lvdjjukyr", model.tags().get("nqodxahhxhq"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("fq", model.identity().principalId());
        Assertions.assertEquals("sqxfxjelgcmpz", model.identity().tenantId());
        Assertions.assertEquals("hqxu", model.identity().userAssignedIdentities().get("vbsizusjszlbscm").principalId());
        Assertions.assertEquals("vcacoyv", model.identity().userAssignedIdentities().get("vbsizusjszlbscm").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.kind());
        Assertions.assertEquals("ddwwnlzafwxudgnh", model.extendedLocation().name());
        Assertions.assertEquals("okrtalvnb", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("dbirkfpksokdgo",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").description());
        Assertions.assertEquals("wijymr",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").displayName());
        Assertions.assertEquals("guzozkyew",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").documentationUrl());
        Assertions.assertEquals("nzhhhqos",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicInner model = new TopicInner().withLocation("pbeme")
            .withTags(mapOf("nqodxahhxhq", "lvdjjukyr", "v", "aqnvzoqgyipemchg", "h", "czuejdtxptl", "qawmoaianc",
                "zhomewjjstliu"))
            .withSku(new ResourceSku().withName(Sku.BASIC))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED).withPrincipalId("fq")
                .withTenantId("sqxfxjelgcmpz")
                .withUserAssignedIdentities(mapOf("vbsizusjszlbscm",
                    new UserIdentityProperties().withPrincipalId("hqxu").withClientId("vcacoyv"), "xrerlniylylyf",
                    new UserIdentityProperties().withPrincipalId("zijiufehgmv").withClientId("nwyvq"), "bklqpxz",
                    new UserIdentityProperties().withPrincipalId("zutgqztwhghmupg").withClientId("jtcdxabbujftaben"))))
            .withKind(ResourceKind.AZURE_ARC)
            .withExtendedLocation(new ExtendedLocation().withName("ddwwnlzafwxudgnh").withType("okrtalvnb"))
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf(
                    "ffjkutycyarnroo", new InlineEventProperties().withDescription("dbirkfpksokdgo")
                        .withDisplayName("wijymr").withDocumentationUrl("guzozkyew").withDataSchemaUrl("nzhhhqos"),
                    "jzcfyjzptwr",
                    new InlineEventProperties().withDescription("uabzoghkt").withDisplayName("yczhco")
                        .withDocumentationUrl("cnhz").withDataSchemaUrl("ot"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE).withInputSchema(InputSchema.CLOUD_EVENT_SCHEMA_V1_0)
            .withInputSchemaMapping(new InputSchemaMapping()).withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("jb").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true).withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION);
        model = BinaryData.fromObject(model).toObject(TopicInner.class);
        Assertions.assertEquals("pbeme", model.location());
        Assertions.assertEquals("lvdjjukyr", model.tags().get("nqodxahhxhq"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("fq", model.identity().principalId());
        Assertions.assertEquals("sqxfxjelgcmpz", model.identity().tenantId());
        Assertions.assertEquals("hqxu", model.identity().userAssignedIdentities().get("vbsizusjszlbscm").principalId());
        Assertions.assertEquals("vcacoyv", model.identity().userAssignedIdentities().get("vbsizusjszlbscm").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.kind());
        Assertions.assertEquals("ddwwnlzafwxudgnh", model.extendedLocation().name());
        Assertions.assertEquals("okrtalvnb", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("dbirkfpksokdgo",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").description());
        Assertions.assertEquals("wijymr",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").displayName());
        Assertions.assertEquals("guzozkyew",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").documentationUrl());
        Assertions.assertEquals("nzhhhqos",
            model.eventTypeInfo().inlineEventTypes().get("ffjkutycyarnroo").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
