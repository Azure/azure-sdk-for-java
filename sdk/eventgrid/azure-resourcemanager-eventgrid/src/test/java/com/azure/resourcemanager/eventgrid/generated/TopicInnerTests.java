// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.ExtendedLocation;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"t\"},\"groupIds\":[\"gbpvnwswmtxkyct\",\"wgzwxjlmecvog\",\"gzyvnee\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"htmoqqtlffhzbkr\",\"actionsRequired\":\"jjavfq\"},\"provisioningState\":\"Succeeded\"},\"id\":\"nq\",\"name\":\"ewdogiyetesy\",\"type\":\"vidbztjhqtfb\"}],\"provisioningState\":\"Failed\",\"endpoint\":\"nkbw\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"tu\":{\"description\":\"sprkzyaupiac\",\"displayName\":\"n\",\"documentationUrl\":\"bwqroohtuovm\",\"dataSchemaUrl\":\"nur\"},\"cydrtceukdqkk\":{\"description\":\"hihpvecmsl\",\"displayName\":\"bl\",\"documentationUrl\":\"xltbsjuscvsf\",\"dataSchemaUrl\":\"gctmgxuupbezq\"},\"jvhrweft\":{\"description\":\"hztgeqmgqzgwld\",\"displayName\":\"chillcecf\",\"documentationUrl\":\"uwaoaguhicqlli\",\"dataSchemaUrl\":\"tac\"},\"akuflgbhgauacdix\":{\"description\":\"qejpmvssehaepwa\",\"displayName\":\"xtczhupeuknijd\",\"documentationUrl\":\"yespydjfbocyv\",\"dataSchemaUrl\":\"ulrtywikdmh\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"qg\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"oeoq\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Basic\"},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"hntasfaymx\",\"tenantId\":\"lpzealbmqkyojwyv\",\"userAssignedIdentities\":{\"ubiwsdrnpxq\":{\"principalId\":\"tsu\",\"clientId\":\"xsgxjcmmzrrs\"},\"ogjo\":{\"principalId\":\"diffjxcjrmmuab\",\"clientId\":\"bv\"},\"vevboclzh\":{\"principalId\":\"cyefoyzbamwine\",\"clientId\":\"vfkakpold\"}}},\"kind\":\"AzureArc\",\"extendedLocation\":{\"name\":\"uxgvttxpnr\",\"type\":\"zaamrdixtrekid\"},\"location\":\"yskbruff\",\"tags\":{\"hrpqhv\":\"ukkutvl\",\"yr\":\"blcouqehbhbcdszi\",\"pmbltoormkfql\":\"ndo\",\"nbmjksibjgsjjxxa\":\"xldykalsygaolnjp\"},\"id\":\"mr\",\"name\":\"ad\",\"type\":\"yqegx\"}")
            .toObject(TopicInner.class);
        Assertions.assertEquals("yskbruff", model.location());
        Assertions.assertEquals("ukkutvl", model.tags().get("hrpqhv"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hntasfaymx", model.identity().principalId());
        Assertions.assertEquals("lpzealbmqkyojwyv", model.identity().tenantId());
        Assertions.assertEquals("tsu", model.identity().userAssignedIdentities().get("ubiwsdrnpxq").principalId());
        Assertions.assertEquals("xsgxjcmmzrrs",
            model.identity().userAssignedIdentities().get("ubiwsdrnpxq").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.kind());
        Assertions.assertEquals("uxgvttxpnr", model.extendedLocation().name());
        Assertions.assertEquals("zaamrdixtrekid", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("sprkzyaupiac", model.eventTypeInfo().inlineEventTypes().get("tu").description());
        Assertions.assertEquals("n", model.eventTypeInfo().inlineEventTypes().get("tu").displayName());
        Assertions.assertEquals("bwqroohtuovm", model.eventTypeInfo().inlineEventTypes().get("tu").documentationUrl());
        Assertions.assertEquals("nur", model.eventTypeInfo().inlineEventTypes().get("tu").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("oeoq", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicInner model = new TopicInner().withLocation("yskbruff")
            .withTags(mapOf("hrpqhv", "ukkutvl", "yr", "blcouqehbhbcdszi", "pmbltoormkfql", "ndo", "nbmjksibjgsjjxxa",
                "xldykalsygaolnjp"))
            .withSku(new ResourceSku().withName(Sku.BASIC))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("hntasfaymx")
                .withTenantId("lpzealbmqkyojwyv")
                .withUserAssignedIdentities(mapOf("ubiwsdrnpxq",
                    new UserIdentityProperties().withPrincipalId("tsu").withClientId("xsgxjcmmzrrs"), "ogjo",
                    new UserIdentityProperties().withPrincipalId("diffjxcjrmmuab").withClientId("bv"), "vevboclzh",
                    new UserIdentityProperties().withPrincipalId("cyefoyzbamwine").withClientId("vfkakpold"))))
            .withKind(ResourceKind.AZURE_ARC)
            .withExtendedLocation(new ExtendedLocation().withName("uxgvttxpnr").withType("zaamrdixtrekid"))
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("tu",
                    new InlineEventProperties().withDescription("sprkzyaupiac")
                        .withDisplayName("n")
                        .withDocumentationUrl("bwqroohtuovm")
                        .withDataSchemaUrl("nur"),
                    "cydrtceukdqkk",
                    new InlineEventProperties().withDescription("hihpvecmsl")
                        .withDisplayName("bl")
                        .withDocumentationUrl("xltbsjuscvsf")
                        .withDataSchemaUrl("gctmgxuupbezq"),
                    "jvhrweft",
                    new InlineEventProperties().withDescription("hztgeqmgqzgwld")
                        .withDisplayName("chillcecf")
                        .withDocumentationUrl("uwaoaguhicqlli")
                        .withDataSchemaUrl("tac"),
                    "akuflgbhgauacdix",
                    new InlineEventProperties().withDescription("qejpmvssehaepwa")
                        .withDisplayName("xtczhupeuknijd")
                        .withDocumentationUrl("yespydjfbocyv")
                        .withDataSchemaUrl("ulrtywikdmh"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
            .withInputSchema(InputSchema.CLOUD_EVENT_SCHEMA_V1_0)
            .withInputSchemaMapping(new JsonInputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("oeoq").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(TopicInner.class);
        Assertions.assertEquals("yskbruff", model.location());
        Assertions.assertEquals("ukkutvl", model.tags().get("hrpqhv"));
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hntasfaymx", model.identity().principalId());
        Assertions.assertEquals("lpzealbmqkyojwyv", model.identity().tenantId());
        Assertions.assertEquals("tsu", model.identity().userAssignedIdentities().get("ubiwsdrnpxq").principalId());
        Assertions.assertEquals("xsgxjcmmzrrs",
            model.identity().userAssignedIdentities().get("ubiwsdrnpxq").clientId());
        Assertions.assertEquals(ResourceKind.AZURE_ARC, model.kind());
        Assertions.assertEquals("uxgvttxpnr", model.extendedLocation().name());
        Assertions.assertEquals("zaamrdixtrekid", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("sprkzyaupiac", model.eventTypeInfo().inlineEventTypes().get("tu").description());
        Assertions.assertEquals("n", model.eventTypeInfo().inlineEventTypes().get("tu").displayName());
        Assertions.assertEquals("bwqroohtuovm", model.eventTypeInfo().inlineEventTypes().get("tu").documentationUrl());
        Assertions.assertEquals("nur", model.eventTypeInfo().inlineEventTypes().get("tu").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("oeoq", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
