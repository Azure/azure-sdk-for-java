// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.ExtendedLocation;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceKind;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"eatgroeshoy\"},\"groupIds\":[\"byfqxkfaoy\",\"ehqpuvjmvqmt\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"gr\",\"actionsRequired\":\"jn\"},\"provisioningState\":\"Updating\"},\"id\":\"jdjusk\",\"name\":\"rreqynkceysfaqe\",\"type\":\"pl\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"hwddkvbxgkq\"},\"groupIds\":[\"bwptdacarvvlf\",\"tymtpoiwenazer\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"qalsxkd\",\"actionsRequired\":\"qapfgsdpc\"},\"provisioningState\":\"Deleting\"},\"id\":\"smzhhkuuipldqqct\",\"name\":\"kva\",\"type\":\"blhtjq\"}],\"provisioningState\":\"Deleting\",\"endpoint\":\"wehtaemxh\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"pq\":{\"description\":\"sxivzrrryvei\",\"displayName\":\"pskdyzatvfuzk\",\"documentationUrl\":\"tjvv\",\"dataSchemaUrl\":\"xwigsye\"},\"floygbdgwumg\":{\"description\":\"mjtgrqg\",\"displayName\":\"kkileplkc\",\"documentationUrl\":\"knh\",\"dataSchemaUrl\":\"bbaedorvvm\"}}},\"minimumTlsVersionAllowed\":\"1.2\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"bgd\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"jsaqwotmmwllcols\",\"action\":\"Allow\"}],\"disableLocalAuth\":false,\"dataResidencyBoundary\":\"WithinGeopair\"},\"sku\":{\"name\":\"Premium\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"okjljnhvlqjbekp\",\"tenantId\":\"ksnbksdqhjv\",\"userAssignedIdentities\":{\"avnwqj\":{\"principalId\":\"eslk\",\"clientId\":\"ustcpoq\"},\"wfd\":{\"principalId\":\"o\",\"clientId\":\"lejjjkxy\"}}},\"kind\":\"Azure\",\"extendedLocation\":{\"name\":\"tensvkzykj\",\"type\":\"kns\"},\"location\":\"wushcdp\",\"tags\":{\"mgjfbpkuwxeoio\":\"nq\"},\"id\":\"fiz\",\"name\":\"av\",\"type\":\"jzwfb\"}")
            .toObject(TopicInner.class);
        Assertions.assertEquals("wushcdp", model.location());
        Assertions.assertEquals("nq", model.tags().get("mgjfbpkuwxeoio"));
        Assertions.assertEquals(Sku.PREMIUM, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("okjljnhvlqjbekp", model.identity().principalId());
        Assertions.assertEquals("ksnbksdqhjv", model.identity().tenantId());
        Assertions.assertEquals("eslk", model.identity().userAssignedIdentities().get("avnwqj").principalId());
        Assertions.assertEquals("ustcpoq", model.identity().userAssignedIdentities().get("avnwqj").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, model.kind());
        Assertions.assertEquals("tensvkzykj", model.extendedLocation().name());
        Assertions.assertEquals("kns", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("sxivzrrryvei", model.eventTypeInfo().inlineEventTypes().get("pq").description());
        Assertions.assertEquals("pskdyzatvfuzk", model.eventTypeInfo().inlineEventTypes().get("pq").displayName());
        Assertions.assertEquals("tjvv", model.eventTypeInfo().inlineEventTypes().get("pq").documentationUrl());
        Assertions.assertEquals("xwigsye", model.eventTypeInfo().inlineEventTypes().get("pq").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jsaqwotmmwllcols", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertFalse(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicInner model
            = new TopicInner().withLocation("wushcdp")
                .withTags(mapOf("mgjfbpkuwxeoio", "nq"))
                .withSku(new ResourceSku().withName(Sku.PREMIUM))
                .withIdentity(
                    new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                        .withPrincipalId("okjljnhvlqjbekp")
                        .withTenantId("ksnbksdqhjv")
                        .withUserAssignedIdentities(mapOf("avnwqj",
                            new UserIdentityProperties().withPrincipalId("eslk").withClientId("ustcpoq"), "wfd",
                            new UserIdentityProperties().withPrincipalId("o").withClientId("lejjjkxy"))))
                .withKind(ResourceKind.AZURE)
                .withExtendedLocation(new ExtendedLocation().withName("tensvkzykj").withType("kns"))
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("pq",
                        new InlineEventProperties().withDescription("sxivzrrryvei")
                            .withDisplayName("pskdyzatvfuzk")
                            .withDocumentationUrl("tjvv")
                            .withDataSchemaUrl("xwigsye"),
                        "floygbdgwumg",
                        new InlineEventProperties().withDescription("mjtgrqg")
                            .withDisplayName("kkileplkc")
                            .withDocumentationUrl("knh")
                            .withDataSchemaUrl("bbaedorvvm"))))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
                .withInputSchema(InputSchema.CLOUD_EVENT_SCHEMA_V1_0)
                .withInputSchemaMapping(new InputSchemaMapping())
                .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
                .withInboundIpRules(
                    Arrays.asList(new InboundIpRule().withIpMask("jsaqwotmmwllcols").withAction(IpActionType.ALLOW)))
                .withDisableLocalAuth(false)
                .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(TopicInner.class);
        Assertions.assertEquals("wushcdp", model.location());
        Assertions.assertEquals("nq", model.tags().get("mgjfbpkuwxeoio"));
        Assertions.assertEquals(Sku.PREMIUM, model.sku().name());
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("okjljnhvlqjbekp", model.identity().principalId());
        Assertions.assertEquals("ksnbksdqhjv", model.identity().tenantId());
        Assertions.assertEquals("eslk", model.identity().userAssignedIdentities().get("avnwqj").principalId());
        Assertions.assertEquals("ustcpoq", model.identity().userAssignedIdentities().get("avnwqj").clientId());
        Assertions.assertEquals(ResourceKind.AZURE, model.kind());
        Assertions.assertEquals("tensvkzykj", model.extendedLocation().name());
        Assertions.assertEquals("kns", model.extendedLocation().type());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("sxivzrrryvei", model.eventTypeInfo().inlineEventTypes().get("pq").description());
        Assertions.assertEquals("pskdyzatvfuzk", model.eventTypeInfo().inlineEventTypes().get("pq").displayName());
        Assertions.assertEquals("tjvv", model.eventTypeInfo().inlineEventTypes().get("pq").documentationUrl());
        Assertions.assertEquals("xwigsye", model.eventTypeInfo().inlineEventTypes().get("pq").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("jsaqwotmmwllcols", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertFalse(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
