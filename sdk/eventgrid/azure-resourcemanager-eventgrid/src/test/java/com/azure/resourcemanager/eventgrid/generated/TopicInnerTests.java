// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicInner;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicInner model = BinaryData.fromString(
            "{\"properties\":{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"okqdzfvaz\"},\"groupIds\":[\"l\",\"rqttbajlkatnw\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"id\",\"actionsRequired\":\"qfkuvscxkdmli\"},\"provisioningState\":\"Canceled\"},\"id\":\"ibrxkp\",\"name\":\"loazuruocbgoo\",\"type\":\"bteoybf\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"kvvjgslordilmyww\"},\"groupIds\":[\"kxn\",\"edabgyvudtjue\",\"bcihxuuwhc\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"ybvpay\",\"actionsRequired\":\"kudzpxgwj\"},\"provisioningState\":\"Updating\"},\"id\":\"agst\",\"name\":\"yohpfkyrkdbdgiog\",\"type\":\"jkmnwq\"}],\"provisioningState\":\"Updating\",\"endpoint\":\"aiy\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"swsmys\":{\"description\":\"egfnmntfpmvmemfn\",\"displayName\":\"dwvvba\",\"documentationUrl\":\"lllchpodb\",\"dataSchemaUrl\":\"vwrdnhfukuvsj\"},\"qddrihpfhoqcaae\":{\"description\":\"luqypfcvlerch\",\"displayName\":\"bm\",\"documentationUrl\":\"jbabwidf\",\"dataSchemaUrl\":\"sspuunnoxyhkx\"},\"y\":{\"description\":\"aomdjvlpjxx\",\"displayName\":\"brm\",\"documentationUrl\":\"eivsiykzkdnc\",\"dataSchemaUrl\":\"xonbzoggculapz\"}}},\"minimumTlsVersionAllowed\":\"1.2\",\"inputSchema\":\"CloudEventSchemaV1_0\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"xepnyl\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"yjt\",\"action\":\"Allow\"},{\"ipMask\":\"qzhv\",\"action\":\"Allow\"},{\"ipMask\":\"yfm\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinGeopair\"},\"identity\":{\"type\":\"None\",\"principalId\":\"xfzwi\",\"tenantId\":\"wzjbh\",\"userAssignedIdentities\":{\"bkkd\":{\"principalId\":\"jrkambtrnegvmnv\",\"clientId\":\"eqvldspast\"},\"ilozapeewchpxlk\":{\"principalId\":\"lves\",\"clientId\":\"jlxr\"}}},\"location\":\"kuziycsle\",\"tags\":{\"gzulwmmrqzzr\":\"uztcktyhjtqed\"},\"id\":\"jvpglydzgk\",\"name\":\"vqeevtoep\",\"type\":\"yutnwytpzdmov\"}")
            .toObject(TopicInner.class);
        Assertions.assertEquals("kuziycsle", model.location());
        Assertions.assertEquals("uztcktyhjtqed", model.tags().get("gzulwmmrqzzr"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("xfzwi", model.identity().principalId());
        Assertions.assertEquals("wzjbh", model.identity().tenantId());
        Assertions.assertEquals("jrkambtrnegvmnv", model.identity().userAssignedIdentities().get("bkkd").principalId());
        Assertions.assertEquals("eqvldspast", model.identity().userAssignedIdentities().get("bkkd").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("egfnmntfpmvmemfn",
            model.eventTypeInfo().inlineEventTypes().get("swsmys").description());
        Assertions.assertEquals("dwvvba", model.eventTypeInfo().inlineEventTypes().get("swsmys").displayName());
        Assertions.assertEquals("lllchpodb", model.eventTypeInfo().inlineEventTypes().get("swsmys").documentationUrl());
        Assertions.assertEquals("vwrdnhfukuvsj",
            model.eventTypeInfo().inlineEventTypes().get("swsmys").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("yjt", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicInner model = new TopicInner().withLocation("kuziycsle")
            .withTags(mapOf("gzulwmmrqzzr", "uztcktyhjtqed"))
            .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                .withPrincipalId("xfzwi")
                .withTenantId("wzjbh")
                .withUserAssignedIdentities(mapOf("bkkd",
                    new UserIdentityProperties().withPrincipalId("jrkambtrnegvmnv").withClientId("eqvldspast"),
                    "ilozapeewchpxlk", new UserIdentityProperties().withPrincipalId("lves").withClientId("jlxr"))))
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("swsmys",
                    new InlineEventProperties().withDescription("egfnmntfpmvmemfn")
                        .withDisplayName("dwvvba")
                        .withDocumentationUrl("lllchpodb")
                        .withDataSchemaUrl("vwrdnhfukuvsj"),
                    "qddrihpfhoqcaae",
                    new InlineEventProperties().withDescription("luqypfcvlerch")
                        .withDisplayName("bm")
                        .withDocumentationUrl("jbabwidf")
                        .withDataSchemaUrl("sspuunnoxyhkx"),
                    "y",
                    new InlineEventProperties().withDescription("aomdjvlpjxx")
                        .withDisplayName("brm")
                        .withDocumentationUrl("eivsiykzkdnc")
                        .withDataSchemaUrl("xonbzoggculapz"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
            .withInputSchema(InputSchema.CLOUD_EVENT_SCHEMA_V1_0)
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("yjt").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("qzhv").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("yfm").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR);
        model = BinaryData.fromObject(model).toObject(TopicInner.class);
        Assertions.assertEquals("kuziycsle", model.location());
        Assertions.assertEquals("uztcktyhjtqed", model.tags().get("gzulwmmrqzzr"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("xfzwi", model.identity().principalId());
        Assertions.assertEquals("wzjbh", model.identity().tenantId());
        Assertions.assertEquals("jrkambtrnegvmnv", model.identity().userAssignedIdentities().get("bkkd").principalId());
        Assertions.assertEquals("eqvldspast", model.identity().userAssignedIdentities().get("bkkd").clientId());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("egfnmntfpmvmemfn",
            model.eventTypeInfo().inlineEventTypes().get("swsmys").description());
        Assertions.assertEquals("dwvvba", model.eventTypeInfo().inlineEventTypes().get("swsmys").displayName());
        Assertions.assertEquals("lllchpodb", model.eventTypeInfo().inlineEventTypes().get("swsmys").documentationUrl());
        Assertions.assertEquals("vwrdnhfukuvsj",
            model.eventTypeInfo().inlineEventTypes().get("swsmys").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CLOUD_EVENT_SCHEMA_V1_0, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("yjt", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
