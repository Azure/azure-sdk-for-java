// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"fnznth\":\"rksxwpndfc\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"aosrxuz\",\"tenantId\":\"amktcqiosmgbzah\",\"userAssignedIdentities\":{\"s\":{\"principalId\":\"lyrtltlaprlt\",\"clientId\":\"atbhjmznn\"},\"febwlnbmhyreeudz\":{\"principalId\":\"eq\",\"clientId\":\"arvlagunbt\"}}}}")
            .toObject(PartnerTopicUpdateParameters.class);
        Assertions.assertEquals("rksxwpndfc", model.tags().get("fnznth"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("aosrxuz", model.identity().principalId());
        Assertions.assertEquals("amktcqiosmgbzah", model.identity().tenantId());
        Assertions.assertEquals("lyrtltlaprlt", model.identity().userAssignedIdentities().get("s").principalId());
        Assertions.assertEquals("atbhjmznn", model.identity().userAssignedIdentities().get("s").clientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicUpdateParameters model
            = new PartnerTopicUpdateParameters().withTags(mapOf("fnznth", "rksxwpndfc"))
                .withIdentity(new IdentityInfo().withType(IdentityType.USER_ASSIGNED)
                    .withPrincipalId("aosrxuz")
                    .withTenantId("amktcqiosmgbzah")
                    .withUserAssignedIdentities(mapOf("s",
                        new UserIdentityProperties().withPrincipalId("lyrtltlaprlt").withClientId("atbhjmznn"),
                        "febwlnbmhyreeudz",
                        new UserIdentityProperties().withPrincipalId("eq").withClientId("arvlagunbt"))));
        model = BinaryData.fromObject(model).toObject(PartnerTopicUpdateParameters.class);
        Assertions.assertEquals("rksxwpndfc", model.tags().get("fnznth"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("aosrxuz", model.identity().principalId());
        Assertions.assertEquals("amktcqiosmgbzah", model.identity().tenantId());
        Assertions.assertEquals("lyrtltlaprlt", model.identity().userAssignedIdentities().get("s").principalId());
        Assertions.assertEquals("atbhjmznn", model.identity().userAssignedIdentities().get("s").clientId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
