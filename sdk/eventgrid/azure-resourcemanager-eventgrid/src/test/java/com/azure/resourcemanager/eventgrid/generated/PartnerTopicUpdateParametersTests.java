// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"mqpnoda\":\"zdix\",\"sbostzel\":\"opqhewjptmc\"},\"identity\":{\"type\":\"SystemAssigned, UserAssigned\",\"principalId\":\"utmzlbiojlvfhrbb\",\"tenantId\":\"eqvcwwyyurmoch\",\"userAssignedIdentities\":{\"cpilj\":{\"principalId\":\"rsnm\",\"clientId\":\"ayzejnhlbkpbz\"},\"efqsfapaqtferrqw\":{\"principalId\":\"hzvechndbnwieho\",\"clientId\":\"wjwiuub\"}}}}")
            .toObject(PartnerTopicUpdateParameters.class);
        Assertions.assertEquals("zdix", model.tags().get("mqpnoda"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("utmzlbiojlvfhrbb", model.identity().principalId());
        Assertions.assertEquals("eqvcwwyyurmoch", model.identity().tenantId());
        Assertions.assertEquals("rsnm", model.identity().userAssignedIdentities().get("cpilj").principalId());
        Assertions.assertEquals("ayzejnhlbkpbz", model.identity().userAssignedIdentities().get("cpilj").clientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicUpdateParameters model
            = new PartnerTopicUpdateParameters().withTags(mapOf("mqpnoda", "zdix", "sbostzel", "opqhewjptmc"))
                .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED)
                    .withPrincipalId("utmzlbiojlvfhrbb").withTenantId("eqvcwwyyurmoch")
                    .withUserAssignedIdentities(mapOf("cpilj",
                        new UserIdentityProperties().withPrincipalId("rsnm").withClientId("ayzejnhlbkpbz"),
                        "efqsfapaqtferrqw",
                        new UserIdentityProperties().withPrincipalId("hzvechndbnwieho").withClientId("wjwiuub"))));
        model = BinaryData.fromObject(model).toObject(PartnerTopicUpdateParameters.class);
        Assertions.assertEquals("zdix", model.tags().get("mqpnoda"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED_USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("utmzlbiojlvfhrbb", model.identity().principalId());
        Assertions.assertEquals("eqvcwwyyurmoch", model.identity().tenantId());
        Assertions.assertEquals("rsnm", model.identity().userAssignedIdentities().get("cpilj").principalId());
        Assertions.assertEquals("ayzejnhlbkpbz", model.identity().userAssignedIdentities().get("cpilj").clientId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
