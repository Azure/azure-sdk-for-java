// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PartnerTopicUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PartnerTopicUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"iitdfuxt\":\"ciqdsme\",\"nlj\":\"asiibmiybnnust\"},\"identity\":{\"type\":\"None\",\"principalId\":\"xhcmavmqfoudo\",\"tenantId\":\"cgyypro\",\"userAssignedIdentities\":{\"or\":{\"principalId\":\"undmbx\",\"clientId\":\"gcmjkavl\"},\"pbdbzqgqqi\":{\"principalId\":\"ftpmdtzfjltfv\",\"clientId\":\"cyjtotpvop\"},\"bcysih\":{\"principalId\":\"dsvqwt\",\"clientId\":\"ky\"}}}}")
            .toObject(PartnerTopicUpdateParameters.class);
        Assertions.assertEquals("ciqdsme", model.tags().get("iitdfuxt"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("xhcmavmqfoudo", model.identity().principalId());
        Assertions.assertEquals("cgyypro", model.identity().tenantId());
        Assertions.assertEquals("undmbx", model.identity().userAssignedIdentities().get("or").principalId());
        Assertions.assertEquals("gcmjkavl", model.identity().userAssignedIdentities().get("or").clientId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PartnerTopicUpdateParameters model
            = new PartnerTopicUpdateParameters().withTags(mapOf("iitdfuxt", "ciqdsme", "nlj", "asiibmiybnnust"))
                .withIdentity(new IdentityInfo().withType(IdentityType.NONE)
                    .withPrincipalId("xhcmavmqfoudo")
                    .withTenantId("cgyypro")
                    .withUserAssignedIdentities(mapOf("or",
                        new UserIdentityProperties().withPrincipalId("undmbx").withClientId("gcmjkavl"), "pbdbzqgqqi",
                        new UserIdentityProperties().withPrincipalId("ftpmdtzfjltfv").withClientId("cyjtotpvop"),
                        "bcysih", new UserIdentityProperties().withPrincipalId("dsvqwt").withClientId("ky"))));
        model = BinaryData.fromObject(model).toObject(PartnerTopicUpdateParameters.class);
        Assertions.assertEquals("ciqdsme", model.tags().get("iitdfuxt"));
        Assertions.assertEquals(IdentityType.NONE, model.identity().type());
        Assertions.assertEquals("xhcmavmqfoudo", model.identity().principalId());
        Assertions.assertEquals("cgyypro", model.identity().tenantId());
        Assertions.assertEquals("undmbx", model.identity().userAssignedIdentities().get("or").principalId());
        Assertions.assertEquals("gcmjkavl", model.identity().userAssignedIdentities().get("or").clientId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
