// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicTypeInfoInner;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeAdditionalEnforcedPermission;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TopicTypeInfoInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicTypeInfoInner model = BinaryData.fromString(
            "{\"properties\":{\"provider\":\"oj\",\"displayName\":\"x\",\"description\":\"zdcgdzbenr\",\"resourceRegionType\":\"GlobalResource\",\"provisioningState\":\"Canceled\",\"supportedLocations\":[\"zqddtjwfljhzn\",\"mtuatmzwcjjncqtj\"],\"sourceResourceFormat\":\"izvg\",\"supportedScopesForSource\":[\"ResourceGroup\",\"AzureSubscription\"],\"areRegionalAndGlobalSourcesSupported\":false,\"additionalEnforcedPermissions\":[{\"permissionName\":\"ngrebwg\",\"isDataAction\":true}]},\"id\":\"ttzlswvajqfutlx\",\"name\":\"oqza\",\"type\":\"unwqr\"}")
            .toObject(TopicTypeInfoInner.class);
        Assertions.assertEquals("oj", model.provider());
        Assertions.assertEquals("x", model.displayName());
        Assertions.assertEquals("zdcgdzbenr", model.description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.CANCELED, model.provisioningState());
        Assertions.assertEquals("zqddtjwfljhzn", model.supportedLocations().get(0));
        Assertions.assertEquals("izvg", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("ngrebwg", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(true, model.additionalEnforcedPermissions().get(0).isDataAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicTypeInfoInner model = new TopicTypeInfoInner().withProvider("oj")
            .withDisplayName("x")
            .withDescription("zdcgdzbenr")
            .withResourceRegionType(ResourceRegionType.GLOBAL_RESOURCE)
            .withProvisioningState(TopicTypeProvisioningState.CANCELED)
            .withSupportedLocations(Arrays.asList("zqddtjwfljhzn", "mtuatmzwcjjncqtj"))
            .withSourceResourceFormat("izvg")
            .withSupportedScopesForSource(
                Arrays.asList(TopicTypeSourceScope.RESOURCE_GROUP, TopicTypeSourceScope.AZURE_SUBSCRIPTION))
            .withAreRegionalAndGlobalSourcesSupported(false)
            .withAdditionalEnforcedPermissions(Arrays.asList(
                new TopicTypeAdditionalEnforcedPermission().withPermissionName("ngrebwg").withIsDataAction(true)));
        model = BinaryData.fromObject(model).toObject(TopicTypeInfoInner.class);
        Assertions.assertEquals("oj", model.provider());
        Assertions.assertEquals("x", model.displayName());
        Assertions.assertEquals("zdcgdzbenr", model.description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.CANCELED, model.provisioningState());
        Assertions.assertEquals("zqddtjwfljhzn", model.supportedLocations().get(0));
        Assertions.assertEquals("izvg", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("ngrebwg", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(true, model.additionalEnforcedPermissions().get(0).isDataAction());
    }
}
