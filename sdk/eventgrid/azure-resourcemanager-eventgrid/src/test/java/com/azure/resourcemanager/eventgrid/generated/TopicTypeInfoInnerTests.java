// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicTypeInfoInner;
import com.azure.resourcemanager.eventgrid.models.ResourceRegionType;
import com.azure.resourcemanager.eventgrid.models.TopicTypeAdditionalEnforcedPermission;
import com.azure.resourcemanager.eventgrid.models.TopicTypeProvisioningState;
import com.azure.resourcemanager.eventgrid.models.TopicTypeSourceScope;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TopicTypeInfoInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicTypeInfoInner model = BinaryData.fromString(
            "{\"properties\":{\"provider\":\"tmmkosz\",\"displayName\":\"blnsntrpcaqk\",\"description\":\"f\",\"resourceRegionType\":\"GlobalResource\",\"provisioningState\":\"Updating\",\"supportedLocations\":[\"lbnld\"],\"sourceResourceFormat\":\"cbhhez\",\"supportedScopesForSource\":[\"ResourceGroup\"],\"areRegionalAndGlobalSourcesSupported\":false,\"additionalEnforcedPermissions\":[{\"permissionName\":\"trpb\",\"isDataAction\":false}]},\"id\":\"yuuatvlmbjwcolbm\",\"name\":\"lbnwtpcpahp\",\"type\":\"z\"}")
            .toObject(TopicTypeInfoInner.class);
        Assertions.assertEquals("tmmkosz", model.provider());
        Assertions.assertEquals("blnsntrpcaqk", model.displayName());
        Assertions.assertEquals("f", model.description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals("lbnld", model.supportedLocations().get(0));
        Assertions.assertEquals("cbhhez", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("trpb", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, model.additionalEnforcedPermissions().get(0).isDataAction());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicTypeInfoInner model = new TopicTypeInfoInner().withProvider("tmmkosz")
            .withDisplayName("blnsntrpcaqk")
            .withDescription("f")
            .withResourceRegionType(ResourceRegionType.GLOBAL_RESOURCE)
            .withProvisioningState(TopicTypeProvisioningState.UPDATING)
            .withSupportedLocations(Arrays.asList("lbnld"))
            .withSourceResourceFormat("cbhhez")
            .withSupportedScopesForSource(Arrays.asList(TopicTypeSourceScope.RESOURCE_GROUP))
            .withAreRegionalAndGlobalSourcesSupported(false)
            .withAdditionalEnforcedPermissions(Arrays.asList(
                new TopicTypeAdditionalEnforcedPermission().withPermissionName("trpb").withIsDataAction(false)));
        model = BinaryData.fromObject(model).toObject(TopicTypeInfoInner.class);
        Assertions.assertEquals("tmmkosz", model.provider());
        Assertions.assertEquals("blnsntrpcaqk", model.displayName());
        Assertions.assertEquals("f", model.description());
        Assertions.assertEquals(ResourceRegionType.GLOBAL_RESOURCE, model.resourceRegionType());
        Assertions.assertEquals(TopicTypeProvisioningState.UPDATING, model.provisioningState());
        Assertions.assertEquals("lbnld", model.supportedLocations().get(0));
        Assertions.assertEquals("cbhhez", model.sourceResourceFormat());
        Assertions.assertEquals(TopicTypeSourceScope.RESOURCE_GROUP, model.supportedScopesForSource().get(0));
        Assertions.assertEquals(false, model.areRegionalAndGlobalSourcesSupported());
        Assertions.assertEquals("trpb", model.additionalEnforcedPermissions().get(0).permissionName());
        Assertions.assertEquals(false, model.additionalEnforcedPermissions().get(0).isDataAction());
    }
}
