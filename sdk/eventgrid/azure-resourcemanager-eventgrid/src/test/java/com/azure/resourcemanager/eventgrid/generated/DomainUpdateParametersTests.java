// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.DomainUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"a\":\"baumnyqupedeoj\",\"fhvpesaps\":\"ckhsmtxpsieb\",\"uutkncw\":\"rdqmhjjdhtldwkyz\"},\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"otogtwrupqs\",\"action\":\"Allow\"},{\"ipMask\":\"i\",\"action\":\"Allow\"},{\"ipMask\":\"ceoveilovno\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.1\",\"disableLocalAuth\":true,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinGeopair\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"qugxywpmueefjzwf\":{\"description\":\"phywpnvj\",\"displayName\":\"qnermclfplphoxu\",\"documentationUrl\":\"rpabg\",\"dataSchemaUrl\":\"psbjta\"},\"ytlmoyrxvwfud\":{\"description\":\"q\",\"displayName\":\"ids\",\"documentationUrl\":\"onobglaocqx\",\"dataSchemaUrl\":\"cmgyud\"},\"p\":{\"description\":\"zntxhdz\",\"displayName\":\"rqjbhckfrl\",\"documentationUrl\":\"xsbkyvpyca\",\"dataSchemaUrl\":\"z\"},\"mqkrhahvljuahaqu\":{\"description\":\"afkuwb\",\"displayName\":\"nwbmeh\",\"documentationUrl\":\"eyvjusrtslhspkde\",\"dataSchemaUrl\":\"aofmxagkvtme\"}}}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"duala\",\"tenantId\":\"qpv\",\"userAssignedIdentities\":{\"vxpvgomz\":{\"principalId\":\"ws\",\"clientId\":\"r\"},\"auhashsfwx\":{\"principalId\":\"misgwbnb\",\"clientId\":\"ldawkzbaliourqha\"},\"ovbvmeueciv\":{\"principalId\":\"owzxcu\",\"clientId\":\"cjooxdjebwpucwwf\"},\"it\":{\"principalId\":\"zceuojgjrw\",\"clientId\":\"eiotwmcdytdx\"}}}}")
            .toObject(DomainUpdateParameters.class);
        Assertions.assertEquals("baumnyqupedeoj", model.tags().get("a"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("duala", model.identity().principalId());
        Assertions.assertEquals("qpv", model.identity().tenantId());
        Assertions.assertEquals("ws", model.identity().userAssignedIdentities().get("vxpvgomz").principalId());
        Assertions.assertEquals("r", model.identity().userAssignedIdentities().get("vxpvgomz").clientId());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("otogtwrupqs", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("phywpnvj",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").description());
        Assertions.assertEquals("qnermclfplphoxu",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").displayName());
        Assertions.assertEquals("rpabg",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").documentationUrl());
        Assertions.assertEquals("psbjta",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainUpdateParameters model = new DomainUpdateParameters()
            .withTags(mapOf("a", "baumnyqupedeoj", "fhvpesaps", "ckhsmtxpsieb", "uutkncw", "rdqmhjjdhtldwkyz"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("duala")
                .withTenantId("qpv")
                .withUserAssignedIdentities(mapOf("vxpvgomz",
                    new UserIdentityProperties().withPrincipalId("ws").withClientId("r"), "auhashsfwx",
                    new UserIdentityProperties().withPrincipalId("misgwbnb").withClientId("ldawkzbaliourqha"),
                    "ovbvmeueciv",
                    new UserIdentityProperties().withPrincipalId("owzxcu").withClientId("cjooxdjebwpucwwf"), "it",
                    new UserIdentityProperties().withPrincipalId("zceuojgjrw").withClientId("eiotwmcdytdx"))))
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("otogtwrupqs").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("i").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("ceoveilovno").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
            .withDisableLocalAuth(true)
            .withAutoCreateTopicWithFirstSubscription(false)
            .withAutoDeleteTopicWithLastSubscription(false)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_GEOPAIR)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("qugxywpmueefjzwf",
                    new InlineEventProperties().withDescription("phywpnvj")
                        .withDisplayName("qnermclfplphoxu")
                        .withDocumentationUrl("rpabg")
                        .withDataSchemaUrl("psbjta"),
                    "ytlmoyrxvwfud",
                    new InlineEventProperties().withDescription("q")
                        .withDisplayName("ids")
                        .withDocumentationUrl("onobglaocqx")
                        .withDataSchemaUrl("cmgyud"),
                    "p",
                    new InlineEventProperties().withDescription("zntxhdz")
                        .withDisplayName("rqjbhckfrl")
                        .withDocumentationUrl("xsbkyvpyca")
                        .withDataSchemaUrl("z"),
                    "mqkrhahvljuahaqu",
                    new InlineEventProperties().withDescription("afkuwb")
                        .withDisplayName("nwbmeh")
                        .withDocumentationUrl("eyvjusrtslhspkde")
                        .withDataSchemaUrl("aofmxagkvtme"))));
        model = BinaryData.fromObject(model).toObject(DomainUpdateParameters.class);
        Assertions.assertEquals("baumnyqupedeoj", model.tags().get("a"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("duala", model.identity().principalId());
        Assertions.assertEquals("qpv", model.identity().tenantId());
        Assertions.assertEquals("ws", model.identity().userAssignedIdentities().get("vxpvgomz").principalId());
        Assertions.assertEquals("r", model.identity().userAssignedIdentities().get("vxpvgomz").clientId());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("otogtwrupqs", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_GEOPAIR, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("phywpnvj",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").description());
        Assertions.assertEquals("qnermclfplphoxu",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").displayName());
        Assertions.assertEquals("rpabg",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").documentationUrl());
        Assertions.assertEquals("psbjta",
            model.eventTypeInfo().inlineEventTypes().get("qugxywpmueefjzwf").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
