// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.DomainUpdateParameters;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityInfo;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.ResourceSku;
import com.azure.resourcemanager.eventgrid.models.Sku;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import com.azure.resourcemanager.eventgrid.models.UserIdentityProperties;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class DomainUpdateParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DomainUpdateParameters model = BinaryData.fromString(
            "{\"tags\":{\"edeojnabc\":\"aiuebbaumnyqu\",\"sapskr\":\"hsmtxpsiebtfhvp\",\"kyzxuutk\":\"qmhjjdhtld\"},\"properties\":{\"publicNetworkAccess\":\"Disabled\",\"inboundIpRules\":[{\"ipMask\":\"vlxotogtwrupqsx\",\"action\":\"Allow\"},{\"ipMask\":\"cykvceo\",\"action\":\"Allow\"},{\"ipMask\":\"ovnotyfjfcnjbkcn\",\"action\":\"Allow\"},{\"ipMask\":\"ttkphywpnvjtoqne\",\"action\":\"Allow\"}],\"minimumTlsVersionAllowed\":\"1.1\",\"disableLocalAuth\":false,\"autoCreateTopicWithFirstSubscription\":false,\"autoDeleteTopicWithLastSubscription\":false,\"dataResidencyBoundary\":\"WithinRegion\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"onobglaocqx\":{\"description\":\"ye\",\"displayName\":\"bjtazqugxywpmu\",\"documentationUrl\":\"fjz\",\"dataSchemaUrl\":\"qkqujidsu\"},\"bh\":{\"description\":\"cmgyud\",\"displayName\":\"tlmoyrx\",\"documentationUrl\":\"fudwpznt\",\"dataSchemaUrl\":\"dzhlrq\"}}}},\"identity\":{\"type\":\"SystemAssigned\",\"principalId\":\"hrxsbk\",\"tenantId\":\"pycanuzbpz\",\"userAssignedIdentities\":{\"hseyvju\":{\"principalId\":\"uwbc\",\"clientId\":\"wbme\"},\"ag\":{\"principalId\":\"tslhspkdeem\",\"clientId\":\"fm\"},\"ahaquh\":{\"principalId\":\"t\",\"clientId\":\"lmqkrhahvlj\"},\"vfadmws\":{\"principalId\":\"hmdua\",\"clientId\":\"exq\"}}},\"sku\":{\"name\":\"Basic\"}}")
            .toObject(DomainUpdateParameters.class);
        Assertions.assertEquals("aiuebbaumnyqu", model.tags().get("edeojnabc"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hrxsbk", model.identity().principalId());
        Assertions.assertEquals("pycanuzbpz", model.identity().tenantId());
        Assertions.assertEquals("uwbc", model.identity().userAssignedIdentities().get("hseyvju").principalId());
        Assertions.assertEquals("wbme", model.identity().userAssignedIdentities().get("hseyvju").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("vlxotogtwrupqsx", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("ye", model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").description());
        Assertions.assertEquals("bjtazqugxywpmu",
            model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").displayName());
        Assertions.assertEquals("fjz", model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").documentationUrl());
        Assertions.assertEquals("qkqujidsu",
            model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").dataSchemaUrl());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DomainUpdateParameters model = new DomainUpdateParameters()
            .withTags(mapOf("edeojnabc", "aiuebbaumnyqu", "sapskr", "hsmtxpsiebtfhvp", "kyzxuutk", "qmhjjdhtld"))
            .withIdentity(new IdentityInfo().withType(IdentityType.SYSTEM_ASSIGNED)
                .withPrincipalId("hrxsbk")
                .withTenantId("pycanuzbpz")
                .withUserAssignedIdentities(
                    mapOf("hseyvju", new UserIdentityProperties().withPrincipalId("uwbc").withClientId("wbme"), "ag",
                        new UserIdentityProperties().withPrincipalId("tslhspkdeem").withClientId("fm"), "ahaquh",
                        new UserIdentityProperties().withPrincipalId("t").withClientId("lmqkrhahvlj"), "vfadmws",
                        new UserIdentityProperties().withPrincipalId("hmdua").withClientId("exq"))))
            .withSku(new ResourceSku().withName(Sku.BASIC))
            .withPublicNetworkAccess(PublicNetworkAccess.DISABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("vlxotogtwrupqsx").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("cykvceo").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("ovnotyfjfcnjbkcn").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("ttkphywpnvjtoqne").withAction(IpActionType.ALLOW)))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
            .withDisableLocalAuth(false)
            .withAutoCreateTopicWithFirstSubscription(false)
            .withAutoDeleteTopicWithLastSubscription(false)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION)
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("onobglaocqx",
                    new InlineEventProperties().withDescription("ye")
                        .withDisplayName("bjtazqugxywpmu")
                        .withDocumentationUrl("fjz")
                        .withDataSchemaUrl("qkqujidsu"),
                    "bh",
                    new InlineEventProperties().withDescription("cmgyud")
                        .withDisplayName("tlmoyrx")
                        .withDocumentationUrl("fudwpznt")
                        .withDataSchemaUrl("dzhlrq"))));
        model = BinaryData.fromObject(model).toObject(DomainUpdateParameters.class);
        Assertions.assertEquals("aiuebbaumnyqu", model.tags().get("edeojnabc"));
        Assertions.assertEquals(IdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("hrxsbk", model.identity().principalId());
        Assertions.assertEquals("pycanuzbpz", model.identity().tenantId());
        Assertions.assertEquals("uwbc", model.identity().userAssignedIdentities().get("hseyvju").principalId());
        Assertions.assertEquals("wbme", model.identity().userAssignedIdentities().get("hseyvju").clientId());
        Assertions.assertEquals(Sku.BASIC, model.sku().name());
        Assertions.assertEquals(PublicNetworkAccess.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals("vlxotogtwrupqsx", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(false, model.disableLocalAuth());
        Assertions.assertEquals(false, model.autoCreateTopicWithFirstSubscription());
        Assertions.assertEquals(false, model.autoDeleteTopicWithLastSubscription());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("ye", model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").description());
        Assertions.assertEquals("bjtazqugxywpmu",
            model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").displayName());
        Assertions.assertEquals("fjz", model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").documentationUrl());
        Assertions.assertEquals("qkqujidsu",
            model.eventTypeInfo().inlineEventTypes().get("onobglaocqx").dataSchemaUrl());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
