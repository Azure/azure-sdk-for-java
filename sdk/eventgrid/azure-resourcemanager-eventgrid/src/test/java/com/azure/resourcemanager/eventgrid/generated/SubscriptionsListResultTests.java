// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SubscriptionInner;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryConfiguration;
import com.azure.resourcemanager.eventgrid.models.DeliveryMode;
import com.azure.resourcemanager.eventgrid.models.DeliverySchema;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.Filter;
import com.azure.resourcemanager.eventgrid.models.FiltersConfiguration;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import com.azure.resourcemanager.eventgrid.models.SubscriptionsListResult;
import java.time.Duration;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubscriptionsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubscriptionsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Updating\",\"deliveryConfiguration\":{\"deliveryMode\":\"Queue\",\"queue\":{\"receiveLockDurationInSeconds\":2128211402,\"maxDeliveryCount\":1425672127,\"deadLetterDestinationWithResourceIdentity\":{},\"eventTimeToLive\":\"PT186H15M9S\"},\"push\":{\"maxDeliveryCount\":992992630,\"eventTimeToLive\":\"ftswibyrcdlbhsh\",\"deadLetterDestinationWithResourceIdentity\":{},\"deliveryWithResourceIdentity\":{}}},\"eventDeliverySchema\":\"CloudEventSchemaV1_0\",\"filtersConfiguration\":{\"includedEventTypes\":[\"wity\",\"hevxcced\",\"pnmdyodnwzxltjcv\"],\"filters\":[{\"operatorType\":\"Filter\"},{\"operatorType\":\"Filter\"},{\"operatorType\":\"Filter\"}]}},\"id\":\"iugcxnavvwxq\",\"name\":\"byqunyow\",\"type\":\"wlmdjrkv\"}],\"nextLink\":\"bvfvpdbod\"}")
            .toObject(SubscriptionsListResult.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.value().get(0).deliveryConfiguration().deliveryMode());
        Assertions.assertEquals(2128211402,
            model.value().get(0).deliveryConfiguration().queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(1425672127, model.value().get(0).deliveryConfiguration().queue().maxDeliveryCount());
        Assertions.assertEquals(Duration.parse("PT186H15M9S"),
            model.value().get(0).deliveryConfiguration().queue().eventTimeToLive());
        Assertions.assertEquals(992992630, model.value().get(0).deliveryConfiguration().push().maxDeliveryCount());
        Assertions.assertEquals("ftswibyrcdlbhsh",
            model.value().get(0).deliveryConfiguration().push().eventTimeToLive());
        Assertions.assertEquals(DeliverySchema.CLOUD_EVENT_SCHEMA_V1_0, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals("wity", model.value().get(0).filtersConfiguration().includedEventTypes().get(0));
        Assertions.assertEquals("bvfvpdbod", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubscriptionsListResult model
            = new SubscriptionsListResult()
                .withValue(
                    Arrays
                        .asList(
                            new SubscriptionInner()
                                .withDeliveryConfiguration(new DeliveryConfiguration()
                                    .withDeliveryMode(DeliveryMode.QUEUE)
                                    .withQueue(new QueueInfo().withReceiveLockDurationInSeconds(2128211402)
                                        .withMaxDeliveryCount(1425672127)
                                        .withDeadLetterDestinationWithResourceIdentity(
                                            new DeadLetterWithResourceIdentity())
                                        .withEventTimeToLive(Duration.parse("PT186H15M9S")))
                                    .withPush(new PushInfo()
                                        .withMaxDeliveryCount(992992630).withEventTimeToLive("ftswibyrcdlbhsh")
                                        .withDeadLetterDestinationWithResourceIdentity(
                                            new DeadLetterWithResourceIdentity())
                                        .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity())))
                                .withEventDeliverySchema(DeliverySchema.CLOUD_EVENT_SCHEMA_V1_0)
                                .withFiltersConfiguration(new FiltersConfiguration()
                                    .withIncludedEventTypes(Arrays.asList("wity", "hevxcced", "pnmdyodnwzxltjcv"))
                                    .withFilters(Arrays.asList(new Filter(), new Filter(), new Filter())))))
                .withNextLink("bvfvpdbod");
        model = BinaryData.fromObject(model).toObject(SubscriptionsListResult.class);
        Assertions.assertEquals(DeliveryMode.QUEUE, model.value().get(0).deliveryConfiguration().deliveryMode());
        Assertions.assertEquals(2128211402,
            model.value().get(0).deliveryConfiguration().queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(1425672127, model.value().get(0).deliveryConfiguration().queue().maxDeliveryCount());
        Assertions.assertEquals(Duration.parse("PT186H15M9S"),
            model.value().get(0).deliveryConfiguration().queue().eventTimeToLive());
        Assertions.assertEquals(992992630, model.value().get(0).deliveryConfiguration().push().maxDeliveryCount());
        Assertions.assertEquals("ftswibyrcdlbhsh",
            model.value().get(0).deliveryConfiguration().push().eventTimeToLive());
        Assertions.assertEquals(DeliverySchema.CLOUD_EVENT_SCHEMA_V1_0, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals("wity", model.value().get(0).filtersConfiguration().includedEventTypes().get(0));
        Assertions.assertEquals("bvfvpdbod", model.nextLink());
    }
}
