// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.SubscriptionInner;
import com.azure.resourcemanager.eventgrid.models.DeadLetterWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.DeliveryConfiguration;
import com.azure.resourcemanager.eventgrid.models.DeliveryMode;
import com.azure.resourcemanager.eventgrid.models.DeliverySchema;
import com.azure.resourcemanager.eventgrid.models.DeliveryWithResourceIdentity;
import com.azure.resourcemanager.eventgrid.models.EventSubscriptionDestination;
import com.azure.resourcemanager.eventgrid.models.Filter;
import com.azure.resourcemanager.eventgrid.models.FiltersConfiguration;
import com.azure.resourcemanager.eventgrid.models.PushInfo;
import com.azure.resourcemanager.eventgrid.models.QueueInfo;
import com.azure.resourcemanager.eventgrid.models.SubscriptionsListResult;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SubscriptionsListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SubscriptionsListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"AwaitingManualAction\",\"deliveryConfiguration\":{\"deliveryMode\":\"Push\",\"queue\":{\"receiveLockDurationInSeconds\":1095331396,\"maxDeliveryCount\":361598801,\"deadLetterDestinationWithResourceIdentity\":{},\"eventTimeToLive\":\"PT231H48M36S\"},\"push\":{\"maxDeliveryCount\":1312962595,\"eventTimeToLive\":\"lp\",\"deadLetterDestinationWithResourceIdentity\":{},\"deliveryWithResourceIdentity\":{},\"destination\":{\"endpointType\":\"EventSubscriptionDestination\"}}},\"eventDeliverySchema\":\"CloudEventSchemaV1_0\",\"filtersConfiguration\":{\"includedEventTypes\":[\"dbutauvfbtkuwhh\",\"hykojoxafnndlpic\",\"koymkcd\"],\"filters\":[{\"operatorType\":\"Filter\"},{\"operatorType\":\"Filter\"},{\"operatorType\":\"Filter\"}]},\"expirationTimeUtc\":\"2021-05-25T06:23:15Z\"},\"id\":\"pwdreqnovvqf\",\"name\":\"vljxywsu\",\"type\":\"syrsndsytgadgvra\"}],\"nextLink\":\"en\"}")
            .toObject(SubscriptionsListResult.class);
        Assertions.assertEquals(DeliveryMode.PUSH, model.value().get(0).deliveryConfiguration().deliveryMode());
        Assertions.assertEquals(1095331396,
            model.value().get(0).deliveryConfiguration().queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(361598801, model.value().get(0).deliveryConfiguration().queue().maxDeliveryCount());
        Assertions.assertEquals(Duration.parse("PT231H48M36S"),
            model.value().get(0).deliveryConfiguration().queue().eventTimeToLive());
        Assertions.assertEquals(1312962595, model.value().get(0).deliveryConfiguration().push().maxDeliveryCount());
        Assertions.assertEquals("lp", model.value().get(0).deliveryConfiguration().push().eventTimeToLive());
        Assertions.assertEquals(DeliverySchema.CLOUD_EVENT_SCHEMA_V1_0, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals("dbutauvfbtkuwhh",
            model.value().get(0).filtersConfiguration().includedEventTypes().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T06:23:15Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals("en", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SubscriptionsListResult model
            = new SubscriptionsListResult()
                .withValue(
                    Arrays
                        .asList(
                            new SubscriptionInner()
                                .withDeliveryConfiguration(
                                    new DeliveryConfiguration().withDeliveryMode(DeliveryMode.PUSH)
                                        .withQueue(new QueueInfo().withReceiveLockDurationInSeconds(1095331396)
                                            .withMaxDeliveryCount(361598801)
                                            .withDeadLetterDestinationWithResourceIdentity(
                                                new DeadLetterWithResourceIdentity())
                                            .withEventTimeToLive(Duration.parse("PT231H48M36S")))
                                        .withPush(new PushInfo().withMaxDeliveryCount(1312962595)
                                            .withEventTimeToLive("lp")
                                            .withDeadLetterDestinationWithResourceIdentity(
                                                new DeadLetterWithResourceIdentity())
                                            .withDeliveryWithResourceIdentity(new DeliveryWithResourceIdentity())
                                            .withDestination(new EventSubscriptionDestination())))
                                .withEventDeliverySchema(DeliverySchema.CLOUD_EVENT_SCHEMA_V1_0)
                                .withFiltersConfiguration(new FiltersConfiguration()
                                    .withIncludedEventTypes(
                                        Arrays.asList("dbutauvfbtkuwhh", "hykojoxafnndlpic", "koymkcd"))
                                    .withFilters(Arrays.asList(new Filter(), new Filter(), new Filter())))
                                .withExpirationTimeUtc(OffsetDateTime.parse("2021-05-25T06:23:15Z"))))
                .withNextLink("en");
        model = BinaryData.fromObject(model).toObject(SubscriptionsListResult.class);
        Assertions.assertEquals(DeliveryMode.PUSH, model.value().get(0).deliveryConfiguration().deliveryMode());
        Assertions.assertEquals(1095331396,
            model.value().get(0).deliveryConfiguration().queue().receiveLockDurationInSeconds());
        Assertions.assertEquals(361598801, model.value().get(0).deliveryConfiguration().queue().maxDeliveryCount());
        Assertions.assertEquals(Duration.parse("PT231H48M36S"),
            model.value().get(0).deliveryConfiguration().queue().eventTimeToLive());
        Assertions.assertEquals(1312962595, model.value().get(0).deliveryConfiguration().push().maxDeliveryCount());
        Assertions.assertEquals("lp", model.value().get(0).deliveryConfiguration().push().eventTimeToLive());
        Assertions.assertEquals(DeliverySchema.CLOUD_EVENT_SCHEMA_V1_0, model.value().get(0).eventDeliverySchema());
        Assertions.assertEquals("dbutauvfbtkuwhh",
            model.value().get(0).filtersConfiguration().includedEventTypes().get(0));
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-25T06:23:15Z"), model.value().get(0).expirationTimeUtc());
        Assertions.assertEquals("en", model.nextLink());
    }
}
