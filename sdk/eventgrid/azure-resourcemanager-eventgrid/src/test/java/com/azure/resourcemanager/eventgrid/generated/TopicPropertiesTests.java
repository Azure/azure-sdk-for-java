// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicProperties model = BinaryData.fromString(
            "{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"c\"},\"groupIds\":[\"lehu\",\"qlrqffaweyurk\",\"hy\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"vjuqdbrxmrgchb\",\"actionsRequired\":\"xk\"},\"provisioningState\":\"Canceled\"},\"id\":\"jjk\",\"name\":\"ajb\",\"type\":\"scgdu\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"ycblevpmcl\"},\"groupIds\":[\"xkyxlzgs\",\"gkzz\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"bzf\",\"actionsRequired\":\"vwmbjlzqsczpg\"},\"provisioningState\":\"Succeeded\"},\"id\":\"napfdqwowftpt\",\"name\":\"uwjtks\",\"type\":\"h\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"y\"},\"groupIds\":[\"seyqrhvyeldotjv\",\"kwiswskukjtas\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"pkxkdtxfk\",\"actionsRequired\":\"lq\"},\"provisioningState\":\"Failed\"},\"id\":\"knvgmmbugtywat\",\"name\":\"qaqkuea\",\"type\":\"groeshoyg\"}],\"provisioningState\":\"Canceled\",\"endpoint\":\"fqxkfaoyteh\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"kceysfaqegplw\":{\"description\":\"qm\",\"displayName\":\"wckygr\",\"documentationUrl\":\"jn\",\"dataSchemaUrl\":\"ljdjuskbrreqy\"},\"wenaz\":{\"description\":\"shwddkvbxgk\",\"displayName\":\"sybwptdaca\",\"documentationUrl\":\"vlf\",\"dataSchemaUrl\":\"ymtpo\"},\"ctekval\":{\"description\":\"ohzrsqalsx\",\"displayName\":\"nwqapfgsdpcvess\",\"documentationUrl\":\"hhkuuip\",\"dataSchemaUrl\":\"q\"},\"atvfuzkaftj\":{\"description\":\"htjqvqyvw\",\"displayName\":\"tae\",\"documentationUrl\":\"hzzysevusxiv\",\"dataSchemaUrl\":\"rryveimipskdy\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"gsyeipqdsmjtg\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"kileplkcsmknhwtb\",\"action\":\"Allow\"},{\"ipMask\":\"orvvmqfloygbdgw\",\"action\":\"Allow\"},{\"ipMask\":\"dgdhpabgdexj\",\"action\":\"Allow\"},{\"ipMask\":\"saq\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"}")
            .toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("qm", model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").description());
        Assertions.assertEquals("wckygr", model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").displayName());
        Assertions.assertEquals("jn", model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").documentationUrl());
        Assertions.assertEquals("ljdjuskbrreqy",
            model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("kileplkcsmknhwtb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicProperties model
            = new TopicProperties()
                .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                    .withInlineEventTypes(mapOf("kceysfaqegplw", new InlineEventProperties().withDescription("qm")
                        .withDisplayName("wckygr").withDocumentationUrl("jn").withDataSchemaUrl("ljdjuskbrreqy"),
                        "wenaz", new InlineEventProperties().withDescription("shwddkvbxgk")
                            .withDisplayName("sybwptdaca").withDocumentationUrl("vlf").withDataSchemaUrl("ymtpo"),
                        "ctekval", new InlineEventProperties().withDescription("ohzrsqalsx")
                            .withDisplayName("nwqapfgsdpcvess").withDocumentationUrl("hhkuuip").withDataSchemaUrl("q"),
                        "atvfuzkaftj",
                        new InlineEventProperties().withDescription("htjqvqyvw").withDisplayName("tae")
                            .withDocumentationUrl("hzzysevusxiv").withDataSchemaUrl("rryveimipskdy"))))
                .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO).withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
                .withInputSchemaMapping(new InputSchemaMapping())
                .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
                .withInboundIpRules(
                    Arrays.asList(new InboundIpRule().withIpMask("kileplkcsmknhwtb").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("orvvmqfloygbdgw").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("dgdhpabgdexj").withAction(IpActionType.ALLOW),
                        new InboundIpRule().withIpMask("saq").withAction(IpActionType.ALLOW)))
                .withDisableLocalAuth(true).withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION);
        model = BinaryData.fromObject(model).toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("qm", model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").description());
        Assertions.assertEquals("wckygr", model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").displayName());
        Assertions.assertEquals("jn", model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").documentationUrl());
        Assertions.assertEquals("ljdjuskbrreqy",
            model.eventTypeInfo().inlineEventTypes().get("kceysfaqegplw").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("kileplkcsmknhwtb", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
