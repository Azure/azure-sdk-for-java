// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicProperties model = BinaryData.fromString(
            "{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"mfzsbf\"},\"groupIds\":[\"zxmdew\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"rplbjazejwwvi\",\"actionsRequired\":\"y\"},\"provisioningState\":\"Creating\"},\"id\":\"hbrnnhjx\",\"name\":\"qwjhqkbiwetpozyc\",\"type\":\"qiqyhgfsetzlexbs\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"ynojpziuw\"},\"groupIds\":[\"kkdtnhqsy\",\"ljselp\",\"pbafvafhlbylc\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"rhyzdf\",\"actionsRequired\":\"sofpltd\"},\"provisioningState\":\"Deleting\"},\"id\":\"irrhv\",\"name\":\"fnrac\",\"type\":\"npq\"}],\"provisioningState\":\"Creating\",\"endpoint\":\"ujwouhdawsi\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"xn\":{\"description\":\"jybvit\",\"displayName\":\"kjyaznumtg\",\"documentationUrl\":\"uwdchozf\",\"dataSchemaUrl\":\"fexl\"},\"lkexaonwivkcqh\":{\"description\":\"kizvoa\",\"displayName\":\"naqln\",\"documentationUrl\":\"iguyxlykwphv\",\"dataSchemaUrl\":\"cwxhmpej\"},\"zvyfijdkzuqnwsi\":{\"description\":\"hxknlccrmmkyupi\",\"displayName\":\"byqjfkakfqfrkem\",\"documentationUrl\":\"ldudxjascowv\",\"dataSchemaUrl\":\"jkpdxphlkksnm\"}}},\"minimumTlsVersionAllowed\":\"1.1\",\"inputSchema\":\"CustomEventSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"ah\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"lsutrjbh\",\"action\":\"Allow\"},{\"ipMask\":\"hyqezvqq\",\"action\":\"Allow\"},{\"ipMask\":\"ftbcvexreuquow\",\"action\":\"Allow\"},{\"ipMask\":\"fwhreagkhyxv\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"}")
            .toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("jybvit", model.eventTypeInfo().inlineEventTypes().get("xn").description());
        Assertions.assertEquals("kjyaznumtg", model.eventTypeInfo().inlineEventTypes().get("xn").displayName());
        Assertions.assertEquals("uwdchozf", model.eventTypeInfo().inlineEventTypes().get("xn").documentationUrl());
        Assertions.assertEquals("fexl", model.eventTypeInfo().inlineEventTypes().get("xn").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("lsutrjbh", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertTrue(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicProperties model = new TopicProperties()
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("xn",
                    new InlineEventProperties().withDescription("jybvit")
                        .withDisplayName("kjyaznumtg")
                        .withDocumentationUrl("uwdchozf")
                        .withDataSchemaUrl("fexl"),
                    "lkexaonwivkcqh",
                    new InlineEventProperties().withDescription("kizvoa")
                        .withDisplayName("naqln")
                        .withDocumentationUrl("iguyxlykwphv")
                        .withDataSchemaUrl("cwxhmpej"),
                    "zvyfijdkzuqnwsi",
                    new InlineEventProperties().withDescription("hxknlccrmmkyupi")
                        .withDisplayName("byqjfkakfqfrkem")
                        .withDocumentationUrl("ldudxjascowv")
                        .withDataSchemaUrl("jkpdxphlkksnm"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ONE)
            .withInputSchema(InputSchema.CUSTOM_EVENT_SCHEMA)
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
            .withInboundIpRules(Arrays.asList(new InboundIpRule().withIpMask("lsutrjbh").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("hyqezvqq").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("ftbcvexreuquow").withAction(IpActionType.ALLOW),
                new InboundIpRule().withIpMask("fwhreagkhyxv").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION);
        model = BinaryData.fromObject(model).toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("jybvit", model.eventTypeInfo().inlineEventTypes().get("xn").description());
        Assertions.assertEquals("kjyaznumtg", model.eventTypeInfo().inlineEventTypes().get("xn").displayName());
        Assertions.assertEquals("uwdchozf", model.eventTypeInfo().inlineEventTypes().get("xn").documentationUrl());
        Assertions.assertEquals("fexl", model.eventTypeInfo().inlineEventTypes().get("xn").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ONE, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.CUSTOM_EVENT_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("lsutrjbh", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertTrue(model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
