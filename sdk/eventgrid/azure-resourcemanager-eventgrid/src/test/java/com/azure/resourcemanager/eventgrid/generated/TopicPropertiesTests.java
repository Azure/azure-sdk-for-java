// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.JsonInputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicProperties model = BinaryData.fromString(
            "{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"bmh\"},\"groupIds\":[\"ijkgqxnhm\",\"keznjaujvaa\",\"nggiycwkdtaa\",\"xw\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"mrrqmbzmqkratb\",\"actionsRequired\":\"wbjsidbirkf\"},\"provisioningState\":\"Creating\"},\"id\":\"okdgoge\",\"name\":\"ijymrhbguzozky\",\"type\":\"wnf\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"hqosmf\"},\"groupIds\":[\"utycyarnroohguab\",\"oghktdpycz\",\"coe\",\"cnhz\"],\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"jzcfyjzptwr\",\"actionsRequired\":\"h\"},\"provisioningState\":\"Failed\"},\"id\":\"infsz\",\"name\":\"yglqdhmrjzral\",\"type\":\"xpjb\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"joqcjenkyhfqzvsq\"},\"groupIds\":[\"jelgcmpzqjhhhq\"],\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"cacoyvivbsiz\",\"actionsRequired\":\"jszlb\"},\"provisioningState\":\"Deleting\"},\"id\":\"nlzijiufe\",\"name\":\"gmvflnwyvqkx\",\"type\":\"erlniylylyfw\"}],\"provisioningState\":\"Failed\",\"endpoint\":\"gqztwhghmupgx\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"ookrtalvnbw\":{\"description\":\"bb\",\"displayName\":\"ftabenbbklqp\",\"documentationUrl\":\"ucafedd\",\"dataSchemaUrl\":\"nlzafwxudgnh\"}}},\"minimumTlsVersionAllowed\":\"1.0\",\"inputSchema\":\"EventGridSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"Json\"},\"metricResourceId\":\"lvdjjukyr\",\"publicNetworkAccess\":\"SecuredByPerimeter\",\"inboundIpRules\":[{\"ipMask\":\"ahhxhqfaqnvzoqg\",\"action\":\"Allow\"},{\"ipMask\":\"mchgavsczuej\",\"action\":\"Allow\"},{\"ipMask\":\"tlghwzhomew\",\"action\":\"Allow\"},{\"ipMask\":\"liuhqawmoaiancz\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"}")
            .toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("bb", model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").description());
        Assertions.assertEquals("ftabenbbklqp",
            model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").displayName());
        Assertions.assertEquals("ucafedd",
            model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").documentationUrl());
        Assertions.assertEquals("nlzafwxudgnh",
            model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("ahhxhqfaqnvzoqg", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicProperties model = new TopicProperties()
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("ookrtalvnbw",
                    new InlineEventProperties().withDescription("bb")
                        .withDisplayName("ftabenbbklqp")
                        .withDocumentationUrl("ucafedd")
                        .withDataSchemaUrl("nlzafwxudgnh"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_ZERO)
            .withInputSchema(InputSchema.EVENT_GRID_SCHEMA)
            .withInputSchemaMapping(new JsonInputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.SECURED_BY_PERIMETER)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("ahhxhqfaqnvzoqg").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("mchgavsczuej").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("tlghwzhomew").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("liuhqawmoaiancz").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION);
        model = BinaryData.fromObject(model).toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("bb", model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").description());
        Assertions.assertEquals("ftabenbbklqp",
            model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").displayName());
        Assertions.assertEquals("ucafedd",
            model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").documentationUrl());
        Assertions.assertEquals("nlzafwxudgnh",
            model.eventTypeInfo().inlineEventTypes().get("ookrtalvnbw").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_ZERO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.SECURED_BY_PERIMETER, model.publicNetworkAccess());
        Assertions.assertEquals("ahhxhqfaqnvzoqg", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
