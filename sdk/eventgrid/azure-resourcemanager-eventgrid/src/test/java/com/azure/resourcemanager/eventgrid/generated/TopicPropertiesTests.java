// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.TopicProperties;
import com.azure.resourcemanager.eventgrid.models.DataResidencyBoundary;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.EventTypeInfo;
import com.azure.resourcemanager.eventgrid.models.InboundIpRule;
import com.azure.resourcemanager.eventgrid.models.InlineEventProperties;
import com.azure.resourcemanager.eventgrid.models.InputSchema;
import com.azure.resourcemanager.eventgrid.models.InputSchemaMapping;
import com.azure.resourcemanager.eventgrid.models.IpActionType;
import com.azure.resourcemanager.eventgrid.models.PublicNetworkAccess;
import com.azure.resourcemanager.eventgrid.models.TlsVersion;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class TopicPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopicProperties model = BinaryData.fromString(
            "{\"privateEndpointConnections\":[{\"properties\":{\"privateEndpoint\":{\"id\":\"wzqa\"},\"groupIds\":[\"gzuriglaecxndt\",\"cokpv\"],\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"mldgxobfirc\",\"actionsRequired\":\"pkc\"},\"provisioningState\":\"Creating\"},\"id\":\"zriykhy\",\"name\":\"wf\",\"type\":\"jlb\"},{\"properties\":{\"privateEndpoint\":{\"id\":\"kjlmx\"},\"groupIds\":[\"dynhdwdigum\"],\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"uzzptjazysdz\",\"actionsRequired\":\"zwwva\"},\"provisioningState\":\"Creating\"},\"id\":\"uvvfonkp\",\"name\":\"hqyikvy\",\"type\":\"auy\"}],\"provisioningState\":\"Succeeded\",\"endpoint\":\"wmn\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"u\":{\"description\":\"y\",\"displayName\":\"poekrsgsgb\",\"documentationUrl\":\"uzqgnjdgkynsc\",\"dataSchemaUrl\":\"qhzvhxnkomt\"},\"lfkqojpy\":{\"description\":\"tppn\",\"displayName\":\"xz\",\"documentationUrl\":\"ihfrbbcevqa\",\"dataSchemaUrl\":\"ltd\"},\"m\":{\"description\":\"gtrd\",\"displayName\":\"ifmzzsd\",\"documentationUrl\":\"brn\",\"dataSchemaUrl\":\"u\"},\"hrv\":{\"description\":\"a\",\"displayName\":\"g\",\"documentationUrl\":\"hocxvdfffwafqrou\",\"dataSchemaUrl\":\"spave\"}}},\"minimumTlsVersionAllowed\":\"1.2\",\"inputSchema\":\"EventGridSchema\",\"inputSchemaMapping\":{\"inputSchemaMappingType\":\"InputSchemaMapping\"},\"metricResourceId\":\"ud\",\"publicNetworkAccess\":\"Enabled\",\"inboundIpRules\":[{\"ipMask\":\"oyxcdyuib\",\"action\":\"Allow\"},{\"ipMask\":\"nbzydvfvfcj\",\"action\":\"Allow\"},{\"ipMask\":\"isrvhm\",\"action\":\"Allow\"}],\"disableLocalAuth\":true,\"dataResidencyBoundary\":\"WithinRegion\"}")
            .toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("y", model.eventTypeInfo().inlineEventTypes().get("u").description());
        Assertions.assertEquals("poekrsgsgb", model.eventTypeInfo().inlineEventTypes().get("u").displayName());
        Assertions.assertEquals("uzqgnjdgkynsc", model.eventTypeInfo().inlineEventTypes().get("u").documentationUrl());
        Assertions.assertEquals("qhzvhxnkomt", model.eventTypeInfo().inlineEventTypes().get("u").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("oyxcdyuib", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopicProperties model = new TopicProperties()
            .withEventTypeInfo(new EventTypeInfo().withKind(EventDefinitionKind.INLINE)
                .withInlineEventTypes(mapOf("u",
                    new InlineEventProperties().withDescription("y")
                        .withDisplayName("poekrsgsgb")
                        .withDocumentationUrl("uzqgnjdgkynsc")
                        .withDataSchemaUrl("qhzvhxnkomt"),
                    "lfkqojpy",
                    new InlineEventProperties().withDescription("tppn")
                        .withDisplayName("xz")
                        .withDocumentationUrl("ihfrbbcevqa")
                        .withDataSchemaUrl("ltd"),
                    "m",
                    new InlineEventProperties().withDescription("gtrd")
                        .withDisplayName("ifmzzsd")
                        .withDocumentationUrl("brn")
                        .withDataSchemaUrl("u"),
                    "hrv",
                    new InlineEventProperties().withDescription("a")
                        .withDisplayName("g")
                        .withDocumentationUrl("hocxvdfffwafqrou")
                        .withDataSchemaUrl("spave"))))
            .withMinimumTlsVersionAllowed(TlsVersion.ONE_TWO)
            .withInputSchema(InputSchema.EVENT_GRID_SCHEMA)
            .withInputSchemaMapping(new InputSchemaMapping())
            .withPublicNetworkAccess(PublicNetworkAccess.ENABLED)
            .withInboundIpRules(
                Arrays.asList(new InboundIpRule().withIpMask("oyxcdyuib").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("nbzydvfvfcj").withAction(IpActionType.ALLOW),
                    new InboundIpRule().withIpMask("isrvhm").withAction(IpActionType.ALLOW)))
            .withDisableLocalAuth(true)
            .withDataResidencyBoundary(DataResidencyBoundary.WITHIN_REGION);
        model = BinaryData.fromObject(model).toObject(TopicProperties.class);
        Assertions.assertEquals(EventDefinitionKind.INLINE, model.eventTypeInfo().kind());
        Assertions.assertEquals("y", model.eventTypeInfo().inlineEventTypes().get("u").description());
        Assertions.assertEquals("poekrsgsgb", model.eventTypeInfo().inlineEventTypes().get("u").displayName());
        Assertions.assertEquals("uzqgnjdgkynsc", model.eventTypeInfo().inlineEventTypes().get("u").documentationUrl());
        Assertions.assertEquals("qhzvhxnkomt", model.eventTypeInfo().inlineEventTypes().get("u").dataSchemaUrl());
        Assertions.assertEquals(TlsVersion.ONE_TWO, model.minimumTlsVersionAllowed());
        Assertions.assertEquals(InputSchema.EVENT_GRID_SCHEMA, model.inputSchema());
        Assertions.assertEquals(PublicNetworkAccess.ENABLED, model.publicNetworkAccess());
        Assertions.assertEquals("oyxcdyuib", model.inboundIpRules().get(0).ipMask());
        Assertions.assertEquals(IpActionType.ALLOW, model.inboundIpRules().get(0).action());
        Assertions.assertEquals(true, model.disableLocalAuth());
        Assertions.assertEquals(DataResidencyBoundary.WITHIN_REGION, model.dataResidencyBoundary());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
