// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.eventgrid.fluent.models.NetworkSecurityPerimeterConfigurationInner;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterAssociationAccessMode;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigProvisioningState;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationIssues;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationList;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterConfigurationProfile;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterInfo;
import com.azure.resourcemanager.eventgrid.models.NetworkSecurityPerimeterProfileAccessRule;
import com.azure.resourcemanager.eventgrid.models.ResourceAssociation;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class NetworkSecurityPerimeterConfigurationListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        NetworkSecurityPerimeterConfigurationList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"provisioningIssues\":[{\"name\":\"veo\",\"properties\":{}},{\"name\":\"rvjfnmjmvlw\",\"properties\":{}}],\"networkSecurityPerimeter\":{\"id\":\"blkujrllfojuidjp\",\"perimeterGuid\":\"yjucejikzoeo\",\"location\":\"tzejetjklnt\"},\"resourceAssociation\":{\"name\":\"juzkdbqz\",\"accessMode\":\"Audit\"},\"profile\":{\"name\":\"vhqjwtrhtgvg\",\"accessRulesVersion\":\"c\",\"accessRules\":[{},{},{},{}],\"diagnosticSettingsVersion\":\"lawjmjsmwrok\",\"enabledLogCategories\":[\"fzzzwyjafitlhg\",\"ynuchlgmltxd\",\"hmoz\",\"sgzv\"]}},\"id\":\"ns\",\"name\":\"nj\",\"type\":\"fpafolpymwamxq\"}],\"nextLink\":\"agpgdph\"}")
            .toObject(NetworkSecurityPerimeterConfigurationList.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.FAILED,
            model.value().get(0).provisioningState());
        Assertions.assertEquals("veo", model.value().get(0).provisioningIssues().get(0).name());
        Assertions.assertEquals("blkujrllfojuidjp", model.value().get(0).networkSecurityPerimeter().id());
        Assertions.assertEquals("yjucejikzoeo", model.value().get(0).networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("tzejetjklnt", model.value().get(0).networkSecurityPerimeter().location());
        Assertions.assertEquals("juzkdbqz", model.value().get(0).resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.AUDIT,
            model.value().get(0).resourceAssociation().accessMode());
        Assertions.assertEquals("vhqjwtrhtgvg", model.value().get(0).profile().name());
        Assertions.assertEquals("c", model.value().get(0).profile().accessRulesVersion());
        Assertions.assertEquals("lawjmjsmwrok", model.value().get(0).profile().diagnosticSettingsVersion());
        Assertions.assertEquals("fzzzwyjafitlhg", model.value().get(0).profile().enabledLogCategories().get(0));
        Assertions.assertEquals("agpgdph", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        NetworkSecurityPerimeterConfigurationList model = new NetworkSecurityPerimeterConfigurationList()
            .withValue(Arrays.asList(new NetworkSecurityPerimeterConfigurationInner()
                .withProvisioningState(NetworkSecurityPerimeterConfigProvisioningState.FAILED)
                .withProvisioningIssues(Arrays.asList(new NetworkSecurityPerimeterConfigurationIssues().withName("veo"),
                    new NetworkSecurityPerimeterConfigurationIssues().withName("rvjfnmjmvlw")))
                .withNetworkSecurityPerimeter(new NetworkSecurityPerimeterInfo().withId("blkujrllfojuidjp")
                    .withPerimeterGuid("yjucejikzoeo")
                    .withLocation("tzejetjklnt"))
                .withResourceAssociation(new ResourceAssociation().withName("juzkdbqz")
                    .withAccessMode(NetworkSecurityPerimeterAssociationAccessMode.AUDIT))
                .withProfile(new NetworkSecurityPerimeterConfigurationProfile().withName("vhqjwtrhtgvg")
                    .withAccessRulesVersion("c")
                    .withAccessRules(Arrays.asList(new NetworkSecurityPerimeterProfileAccessRule(),
                        new NetworkSecurityPerimeterProfileAccessRule(),
                        new NetworkSecurityPerimeterProfileAccessRule(),
                        new NetworkSecurityPerimeterProfileAccessRule()))
                    .withDiagnosticSettingsVersion("lawjmjsmwrok")
                    .withEnabledLogCategories(Arrays.asList("fzzzwyjafitlhg", "ynuchlgmltxd", "hmoz", "sgzv")))))
            .withNextLink("agpgdph");
        model = BinaryData.fromObject(model).toObject(NetworkSecurityPerimeterConfigurationList.class);
        Assertions.assertEquals(NetworkSecurityPerimeterConfigProvisioningState.FAILED,
            model.value().get(0).provisioningState());
        Assertions.assertEquals("veo", model.value().get(0).provisioningIssues().get(0).name());
        Assertions.assertEquals("blkujrllfojuidjp", model.value().get(0).networkSecurityPerimeter().id());
        Assertions.assertEquals("yjucejikzoeo", model.value().get(0).networkSecurityPerimeter().perimeterGuid());
        Assertions.assertEquals("tzejetjklnt", model.value().get(0).networkSecurityPerimeter().location());
        Assertions.assertEquals("juzkdbqz", model.value().get(0).resourceAssociation().name());
        Assertions.assertEquals(NetworkSecurityPerimeterAssociationAccessMode.AUDIT,
            model.value().get(0).resourceAssociation().accessMode());
        Assertions.assertEquals("vhqjwtrhtgvg", model.value().get(0).profile().name());
        Assertions.assertEquals("c", model.value().get(0).profile().accessRulesVersion());
        Assertions.assertEquals("lawjmjsmwrok", model.value().get(0).profile().diagnosticSettingsVersion());
        Assertions.assertEquals("fzzzwyjafitlhg", model.value().get(0).profile().enabledLogCategories().get(0));
        Assertions.assertEquals("agpgdph", model.nextLink());
    }
}
