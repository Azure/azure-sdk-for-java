// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"a2acd50d-8952-4bed-b9ae-a22c3a031691\",\"source\":\"k\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"hkxfpwhdyslbklgl\":{\"description\":\"krknf\",\"displayName\":\"ugjqyckgtxkrdt\",\"documentationUrl\":\"crcjdklotcsubmz\",\"dataSchemaUrl\":\"nsvob\"},\"ylztp\":{\"description\":\"nkkw\",\"displayName\":\"qshwyqxridt\",\"documentationUrl\":\"saqjmkgx\",\"dataSchemaUrl\":\"queu\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-11-05T00:30:38Z\",\"provisioningState\":\"Creating\",\"activationState\":\"NeverActivated\",\"partnerTopicFriendlyDescription\":\"k\",\"messageForActivation\":\"vezefkhkqtwqle\"},\"identity\":{\"type\":\"None\",\"principalId\":\"as\",\"tenantId\":\"zcntogffjwajnrtw\",\"userAssignedIdentities\":{\"nhemvwfnqqw\":{\"principalId\":\"kifmxawo\",\"clientId\":\"fzknhrkmjqncfvds\"},\"muymvec\":{\"principalId\":\"vndrwbgodtg\",\"clientId\":\"ssgwjfkain\"},\"nrddclzeqoz\":{\"principalId\":\"tscbgmusai\",\"clientId\":\"dscnkzzo\"},\"pam\":{\"principalId\":\"hlbzqixbnjrqvzy\",\"clientId\":\"xozony\"}}},\"location\":\"udpabcreuwzos\",\"tags\":{\"dubewgzy\":\"xvcvasormrexz\",\"zrtdbakr\":\"baduvecovsdq\"},\"id\":\"imzfvpp\",\"name\":\"eqsifjmclngygnhr\",\"type\":\"ombcdtajdopggo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<PartnerTopic> response = manager.partnerTopics()
            .listByResourceGroup("eocfkumcfjxok", "elsy", 1811444232, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("udpabcreuwzos", response.iterator().next().location());
        Assertions.assertEquals("xvcvasormrexz", response.iterator().next().tags().get("dubewgzy"));
        Assertions.assertEquals(IdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("as", response.iterator().next().identity().principalId());
        Assertions.assertEquals("zcntogffjwajnrtw", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("kifmxawo",
            response.iterator().next().identity().userAssignedIdentities().get("nhemvwfnqqw").principalId());
        Assertions.assertEquals("fzknhrkmjqncfvds",
            response.iterator().next().identity().userAssignedIdentities().get("nhemvwfnqqw").clientId());
        Assertions.assertEquals(UUID.fromString("a2acd50d-8952-4bed-b9ae-a22c3a031691"),
            response.iterator().next().partnerRegistrationImmutableId());
        Assertions.assertEquals("k", response.iterator().next().source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("krknf",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("hkxfpwhdyslbklgl").description());
        Assertions.assertEquals("ugjqyckgtxkrdt",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("hkxfpwhdyslbklgl").displayName());
        Assertions.assertEquals("crcjdklotcsubmz",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("hkxfpwhdyslbklgl").documentationUrl());
        Assertions.assertEquals("nsvob",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("hkxfpwhdyslbklgl").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-05T00:30:38Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.NEVER_ACTIVATED,
            response.iterator().next().activationState());
        Assertions.assertEquals("k", response.iterator().next().partnerTopicFriendlyDescription());
        Assertions.assertEquals("vezefkhkqtwqle", response.iterator().next().messageForActivation());
    }
}
