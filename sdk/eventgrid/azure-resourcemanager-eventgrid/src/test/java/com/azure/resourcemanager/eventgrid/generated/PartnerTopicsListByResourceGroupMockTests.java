// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.eventgrid.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.eventgrid.EventGridManager;
import com.azure.resourcemanager.eventgrid.models.EventDefinitionKind;
import com.azure.resourcemanager.eventgrid.models.IdentityType;
import com.azure.resourcemanager.eventgrid.models.PartnerTopic;
import com.azure.resourcemanager.eventgrid.models.PartnerTopicActivationState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PartnerTopicsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"partnerRegistrationImmutableId\":\"c9741b68-23dd-4f1a-bae3-116518f67184\",\"source\":\"vcshtkut\",\"eventTypeInfo\":{\"kind\":\"Inline\",\"inlineEventTypes\":{\"aj\":{\"description\":\"dirdammtzjgc\",\"displayName\":\"fxtbwjjirmuydg\",\"documentationUrl\":\"tmdofgeoag\",\"dataSchemaUrl\":\"oftnxodwxm\"},\"vamyyznmrgcdo\":{\"description\":\"ygmgsevm\",\"displayName\":\"zenlrstgfcz\",\"documentationUrl\":\"d\",\"dataSchemaUrl\":\"idt\"}}},\"expirationTimeIfNotActivatedUtc\":\"2021-07-31T23:14:26Z\",\"provisioningState\":\"Failed\",\"activationState\":\"Activated\",\"partnerTopicFriendlyDescription\":\"oxuwhttnzqsaqm\",\"messageForActivation\":\"gszplus\"},\"identity\":{\"type\":\"UserAssigned\",\"principalId\":\"z\",\"tenantId\":\"sgpgvokyejidbd\",\"userAssignedIdentities\":{\"wfkcauxuvavcpf\":{\"principalId\":\"unycwztlvvwsnm\",\"clientId\":\"kyjtrepw\"},\"lzwilfngojf\":{\"principalId\":\"ofuckc\",\"clientId\":\"txluevs\"},\"kktpmbmxbmbr\":{\"principalId\":\"ebuuxjx\",\"clientId\":\"xfjwp\"}}},\"location\":\"gzzxljbkhxsd\",\"tags\":{\"hweqjfyxydgtok\":\"umyd\"},\"id\":\"qbvwglgw\",\"name\":\"pvxakglhpsesrfga\",\"type\":\"qiy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        EventGridManager manager = EventGridManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<PartnerTopic> response = manager.partnerTopics()
            .listByResourceGroup("toakatprytgrhz", "qfdpf", 603344976, com.azure.core.util.Context.NONE);

        Assertions.assertEquals("gzzxljbkhxsd", response.iterator().next().location());
        Assertions.assertEquals("umyd", response.iterator().next().tags().get("hweqjfyxydgtok"));
        Assertions.assertEquals(IdentityType.USER_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals("z", response.iterator().next().identity().principalId());
        Assertions.assertEquals("sgpgvokyejidbd", response.iterator().next().identity().tenantId());
        Assertions.assertEquals("unycwztlvvwsnm",
            response.iterator().next().identity().userAssignedIdentities().get("wfkcauxuvavcpf").principalId());
        Assertions.assertEquals("kyjtrepw",
            response.iterator().next().identity().userAssignedIdentities().get("wfkcauxuvavcpf").clientId());
        Assertions.assertEquals(UUID.fromString("c9741b68-23dd-4f1a-bae3-116518f67184"),
            response.iterator().next().partnerRegistrationImmutableId());
        Assertions.assertEquals("vcshtkut", response.iterator().next().source());
        Assertions.assertEquals(EventDefinitionKind.INLINE, response.iterator().next().eventTypeInfo().kind());
        Assertions.assertEquals("dirdammtzjgc",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("aj").description());
        Assertions.assertEquals("fxtbwjjirmuydg",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("aj").displayName());
        Assertions.assertEquals("tmdofgeoag",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("aj").documentationUrl());
        Assertions.assertEquals("oftnxodwxm",
            response.iterator().next().eventTypeInfo().inlineEventTypes().get("aj").dataSchemaUrl());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-31T23:14:26Z"),
            response.iterator().next().expirationTimeIfNotActivatedUtc());
        Assertions.assertEquals(PartnerTopicActivationState.ACTIVATED, response.iterator().next().activationState());
        Assertions.assertEquals("oxuwhttnzqsaqm", response.iterator().next().partnerTopicFriendlyDescription());
        Assertions.assertEquals("gszplus", response.iterator().next().messageForActivation());
    }
}
