// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Advanced Message Interactive Content.
 */
@Fluent
public final class AcsAdvancedMessageInteractiveContent
    implements JsonSerializable<AcsAdvancedMessageInteractiveContent> {
    /*
     * The Message interactive reply type
     */
    private AcsInteractiveReplyKind replyKind;

    /*
     * The Message Sent when a customer clicks a button
     */
    private AcsAdvancedMessageInteractiveButtonReplyContent buttonReply;

    /*
     * The Message Sent when a customer selects an item from a list
     */
    private AcsAdvancedMessageInteractiveListReplyContent listReply;

    /**
     * Creates an instance of AcsAdvancedMessageInteractiveContent class.
     */
    public AcsAdvancedMessageInteractiveContent() {
    }

    /**
     * Get the replyKind property: The Message interactive reply type.
     * 
     * @return the replyKind value.
     */
    public AcsInteractiveReplyKind getReplyKind() {
        return this.replyKind;
    }

    /**
     * Set the replyKind property: The Message interactive reply type.
     * 
     * @param replyKind the replyKind value to set.
     * @return the AcsAdvancedMessageInteractiveContent object itself.
     */
    public AcsAdvancedMessageInteractiveContent setReplyKind(AcsInteractiveReplyKind replyKind) {
        this.replyKind = replyKind;
        return this;
    }

    /**
     * Get the buttonReply property: The Message Sent when a customer clicks a button.
     * 
     * @return the buttonReply value.
     */
    public AcsAdvancedMessageInteractiveButtonReplyContent getButtonReply() {
        return this.buttonReply;
    }

    /**
     * Set the buttonReply property: The Message Sent when a customer clicks a button.
     * 
     * @param buttonReply the buttonReply value to set.
     * @return the AcsAdvancedMessageInteractiveContent object itself.
     */
    public AcsAdvancedMessageInteractiveContent
        setButtonReply(AcsAdvancedMessageInteractiveButtonReplyContent buttonReply) {
        this.buttonReply = buttonReply;
        return this;
    }

    /**
     * Get the listReply property: The Message Sent when a customer selects an item from a list.
     * 
     * @return the listReply value.
     */
    public AcsAdvancedMessageInteractiveListReplyContent getListReply() {
        return this.listReply;
    }

    /**
     * Set the listReply property: The Message Sent when a customer selects an item from a list.
     * 
     * @param listReply the listReply value to set.
     * @return the AcsAdvancedMessageInteractiveContent object itself.
     */
    public AcsAdvancedMessageInteractiveContent setListReply(AcsAdvancedMessageInteractiveListReplyContent listReply) {
        this.listReply = listReply;
        return this;
    }

    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.replyKind == null ? null : this.replyKind.toString());
        jsonWriter.writeJsonField("buttonReply", this.buttonReply);
        jsonWriter.writeJsonField("listReply", this.listReply);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AcsAdvancedMessageInteractiveContent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AcsAdvancedMessageInteractiveContent if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AcsAdvancedMessageInteractiveContent.
     */
    public static AcsAdvancedMessageInteractiveContent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AcsAdvancedMessageInteractiveContent deserializedAcsAdvancedMessageInteractiveContent
                = new AcsAdvancedMessageInteractiveContent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedAcsAdvancedMessageInteractiveContent.replyKind
                        = AcsInteractiveReplyKind.fromString(reader.getString());
                } else if ("buttonReply".equals(fieldName)) {
                    deserializedAcsAdvancedMessageInteractiveContent.buttonReply
                        = AcsAdvancedMessageInteractiveButtonReplyContent.fromJson(reader);
                } else if ("listReply".equals(fieldName)) {
                    deserializedAcsAdvancedMessageInteractiveContent.listReply
                        = AcsAdvancedMessageInteractiveListReplyContent.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAcsAdvancedMessageInteractiveContent;
        });
    }
}
