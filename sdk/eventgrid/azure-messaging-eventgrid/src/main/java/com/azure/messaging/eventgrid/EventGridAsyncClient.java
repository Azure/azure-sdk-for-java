// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.eventgrid;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.messaging.eventgrid.implementation.EventGridClientImpl;
import com.azure.messaging.eventgrid.models.LockToken;
import com.azure.messaging.eventgrid.models.LockTokenInput;
import com.azure.messaging.eventgrid.models.LockTokensResponse;
import java.util.List;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous EventGridClient type. */
@ServiceClient(builder = EventGridClientBuilder.class, isAsync = true)
public final class EventGridAsyncClient {
    @Generated private final EventGridClientImpl serviceClient;

    /**
     * Initializes an instance of EventGridAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    EventGridAsyncClient(EventGridClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Publish Single Cloud Event to namespace topic.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> publishCloudEventWithResponse(
            String topicName, BinaryData event, RequestOptions requestOptions) {
        return this.serviceClient.publishCloudEventWithResponseAsync(topicName, event, requestOptions);
    }

    /**
     * Publish Batch of Cloud Events to namespace topic.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<Void>> publishBatchOfCloudEventsWithResponse(
            String topicName, BinaryData events, RequestOptions requestOptions) {
        return this.serviceClient.publishBatchOfCloudEventsWithResponseAsync(topicName, events, requestOptions);
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received.</td></tr>
     *     <tr><td>timeout</td><td>Integer</td><td>No</td><td>Timeout value for receive operation in Seconds. Default is 60 seconds.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken (Required): {
     *                     lockToken: String (Required)
     *                 }
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> receiveBatchOfCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, RequestOptions requestOptions) {
        return this.serviceClient.receiveBatchOfCloudEventsWithResponseAsync(
                topicName, eventSubscriptionName, requestOptions);
    }

    /**
     * Acknowledge Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken (Required): {
     *                 lockToken: String (Required)
     *             }
     *             errorCode: int (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the LockTokens information along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> acknowledgeBatchOfCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions) {
        return this.serviceClient.acknowledgeBatchOfCloudEventsWithResponseAsync(
                topicName, eventSubscriptionName, lockTokens, requestOptions);
    }

    /**
     * Release Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         lockToken: String (Required)
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken (Required): {
     *                 lockToken: String (Required)
     *             }
     *             errorCode: int (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param tokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the LockTokens information along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> releaseBatchOfCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, BinaryData tokens, RequestOptions requestOptions) {
        return this.serviceClient.releaseBatchOfCloudEventsWithResponseAsync(
                topicName, eventSubscriptionName, tokens, requestOptions);
    }

    /**
     * Acknowledge Cloud Events.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the LockTokens information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LockTokensResponse> acknowledgeBatchOfCloudEvents(
            String topicName, String eventSubscriptionName, LockTokenInput lockTokens) {
        // Generated convenience method for acknowledgeBatchOfCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acknowledgeBatchOfCloudEventsWithResponse(
                        topicName, eventSubscriptionName, BinaryData.fromObject(lockTokens), requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(LockTokensResponse.class));
    }

    /**
     * Release Cloud Events.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param tokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the LockTokens information on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LockTokensResponse> releaseBatchOfCloudEvents(
            String topicName, String eventSubscriptionName, List<LockToken> tokens) {
        // Generated convenience method for releaseBatchOfCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return releaseBatchOfCloudEventsWithResponse(
                        topicName, eventSubscriptionName, BinaryData.fromObject(tokens), requestOptions)
                .flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(LockTokensResponse.class));
    }
}
