// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.
package com.azure.messaging.eventgrid.systemevents;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Schema of the Data property of an EventGridEvent for a Microsoft.Storage.BlobTierChanged event.
 */
@Fluent
public final class StorageBlobTierChangedEventData implements JsonSerializable<StorageBlobTierChangedEventData> {

    /*
     * The name of the API/operation that triggered this event.
     */
    @Generated
    private String api;

    /*
     * A request id provided by the client of the storage API operation that triggered this event.
     */
    @Generated
    private String clientRequestId;

    /*
     * The request id generated by the Storage service for the storage API operation that triggered this event.
     */
    @Generated
    private String requestId;

    /*
     * The content type of the blob. This is the same as what would be returned in the Content-Type header from the
     * blob.
     */
    @Generated
    private String contentType;

    /*
     * The size of the blob in bytes. This is the same as what would be returned in the Content-Length header from the
     * blob.
     */
    @Generated
    private Long contentLength;

    /*
     * The type of blob.
     */
    @Generated
    private String blobType;

    /*
     * The current tier of the blob.
     */
    @Generated
    private StorageBlobAccessTier accessTier;

    /*
     * The previous tier of the blob.
     */
    @Generated
    private StorageBlobAccessTier previousTier;

    /*
     * The path to the blob.
     */
    @Generated
    private String url;

    /*
     * An opaque string value representing the logical sequence of events for any particular blob name. Users can use
     * standard string comparison to understand the relative sequence of two events on the same blob name.
     */
    @Generated
    private String sequencer;

    /*
     * The identity of the requester that triggered this event.
     */
    @Generated
    private String identity;

    /*
     * For service use only. Diagnostic data occasionally included by the Azure Storage service. This property should be
     * ignored by event consumers.
     */
    @Generated
    private Object storageDiagnostics;

    /**
     * Creates an instance of StorageBlobTierChangedEventData class.
     */
    @Generated
    public StorageBlobTierChangedEventData() {
    }

    /**
     * Get the api property: The name of the API/operation that triggered this event.
     *
     * @return the api value.
     */
    @Generated
    public String getApi() {
        return this.api;
    }

    /**
     * Set the api property: The name of the API/operation that triggered this event.
     *
     * @param api the api value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setApi(String api) {
        this.api = api;
        return this;
    }

    /**
     * Get the clientRequestId property: A request id provided by the client of the storage API operation that triggered
     * this event.
     *
     * @return the clientRequestId value.
     */
    @Generated
    public String getClientRequestId() {
        return this.clientRequestId;
    }

    /**
     * Set the clientRequestId property: A request id provided by the client of the storage API operation that triggered
     * this event.
     *
     * @param clientRequestId the clientRequestId value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setClientRequestId(String clientRequestId) {
        this.clientRequestId = clientRequestId;
        return this;
    }

    /**
     * Get the requestId property: The request id generated by the Storage service for the storage API operation that
     * triggered this event.
     *
     * @return the requestId value.
     */
    @Generated
    public String getRequestId() {
        return this.requestId;
    }

    /**
     * Set the requestId property: The request id generated by the Storage service for the storage API operation that
     * triggered this event.
     *
     * @param requestId the requestId value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setRequestId(String requestId) {
        this.requestId = requestId;
        return this;
    }

    /**
     * Get the contentType property: The content type of the blob. This is the same as what would be returned in the
     * Content-Type header from the blob.
     *
     * @return the contentType value.
     */
    @Generated
    public String getContentType() {
        return this.contentType;
    }

    /**
     * Set the contentType property: The content type of the blob. This is the same as what would be returned in the
     * Content-Type header from the blob.
     *
     * @param contentType the contentType value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setContentType(String contentType) {
        this.contentType = contentType;
        return this;
    }

    /**
     * Get the contentLength property: The size of the blob in bytes. This is the same as what would be returned in the
     * Content-Length header from the blob.
     *
     * @return the contentLength value.
     */
    @Generated
    public Long getContentLength() {
        return this.contentLength;
    }

    /**
     * Set the contentLength property: The size of the blob in bytes. This is the same as what would be returned in the
     * Content-Length header from the blob.
     *
     * @param contentLength the contentLength value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setContentLength(Long contentLength) {
        this.contentLength = contentLength;
        return this;
    }

    /**
     * Get the blobType property: The type of blob.
     *
     * @return the blobType value.
     */
    @Generated
    public String getBlobType() {
        return this.blobType;
    }

    /**
     * Set the blobType property: The type of blob.
     *
     * @param blobType the blobType value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setBlobType(String blobType) {
        this.blobType = blobType;
        return this;
    }

    /**
     * Get the accessTier property: The current tier of the blob.
     *
     * @return the accessTier value.
     */
    @Generated
    public StorageBlobAccessTier getAccessTier() {
        return this.accessTier;
    }

    /**
     * Set the accessTier property: The current tier of the blob.
     *
     * @param accessTier the accessTier value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setAccessTier(StorageBlobAccessTier accessTier) {
        this.accessTier = accessTier;
        return this;
    }

    /**
     * Get the previousTier property: The previous tier of the blob.
     *
     * @return the previousTier value.
     */
    @Generated
    public StorageBlobAccessTier getPreviousTier() {
        return this.previousTier;
    }

    /**
     * Set the previousTier property: The previous tier of the blob.
     *
     * @param previousTier the previousTier value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setPreviousTier(StorageBlobAccessTier previousTier) {
        this.previousTier = previousTier;
        return this;
    }

    /**
     * Get the url property: The path to the blob.
     *
     * @return the url value.
     */
    @Generated
    public String getUrl() {
        return this.url;
    }

    /**
     * Set the url property: The path to the blob.
     *
     * @param url the url value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the sequencer property: An opaque string value representing the logical sequence of events for any particular
     * blob name. Users can use standard string comparison to understand the relative sequence of two events on the same
     * blob name.
     *
     * @return the sequencer value.
     */
    @Generated
    public String getSequencer() {
        return this.sequencer;
    }

    /**
     * Set the sequencer property: An opaque string value representing the logical sequence of events for any particular
     * blob name. Users can use standard string comparison to understand the relative sequence of two events on the same
     * blob name.
     *
     * @param sequencer the sequencer value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setSequencer(String sequencer) {
        this.sequencer = sequencer;
        return this;
    }

    /**
     * Get the identity property: The identity of the requester that triggered this event.
     *
     * @return the identity value.
     */
    @Generated
    public String getIdentity() {
        return this.identity;
    }

    /**
     * Set the identity property: The identity of the requester that triggered this event.
     *
     * @param identity the identity value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setIdentity(String identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the storageDiagnostics property: For service use only. Diagnostic data occasionally included by the Azure
     * Storage service. This property should be ignored by event consumers.
     *
     * @return the storageDiagnostics value.
     */
    @Generated
    public Object getStorageDiagnostics() {
        return this.storageDiagnostics;
    }

    /**
     * Set the storageDiagnostics property: For service use only. Diagnostic data occasionally included by the Azure
     * Storage service. This property should be ignored by event consumers.
     *
     * @param storageDiagnostics the storageDiagnostics value to set.
     * @return the StorageBlobTierChangedEventData object itself.
     */
    @Generated
    public StorageBlobTierChangedEventData setStorageDiagnostics(Object storageDiagnostics) {
        this.storageDiagnostics = storageDiagnostics;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("accessTier", this.accessTier == null ? null : this.accessTier.toString());
        jsonWriter.writeStringField("previousTier", this.previousTier == null ? null : this.previousTier.toString());
        jsonWriter.writeStringField("api", this.api);
        jsonWriter.writeStringField("clientRequestId", this.clientRequestId);
        jsonWriter.writeStringField("requestId", this.requestId);
        jsonWriter.writeStringField("contentType", this.contentType);
        jsonWriter.writeNumberField("contentLength", this.contentLength);
        jsonWriter.writeStringField("blobType", this.blobType);
        jsonWriter.writeStringField("url", this.url);
        jsonWriter.writeStringField("sequencer", this.sequencer);
        jsonWriter.writeStringField("identity", this.identity);
        if (this.storageDiagnostics != null) {
            jsonWriter.writeUntypedField("storageDiagnostics", this.storageDiagnostics);
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageBlobTierChangedEventData from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageBlobTierChangedEventData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the StorageBlobTierChangedEventData.
     */
    @Generated
    public static StorageBlobTierChangedEventData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageBlobTierChangedEventData deserializedStorageBlobTierChangedEventData
                = new StorageBlobTierChangedEventData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("accessTier".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.accessTier
                        = StorageBlobAccessTier.fromString(reader.getString());
                } else if ("previousTier".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.previousTier
                        = StorageBlobAccessTier.fromString(reader.getString());
                } else if ("api".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.api = reader.getString();
                } else if ("clientRequestId".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.clientRequestId = reader.getString();
                } else if ("requestId".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.requestId = reader.getString();
                } else if ("contentType".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.contentType = reader.getString();
                } else if ("contentLength".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.contentLength = reader.getNullable(JsonReader::getLong);
                } else if ("blobType".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.blobType = reader.getString();
                } else if ("url".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.url = reader.getString();
                } else if ("sequencer".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.sequencer = reader.getString();
                } else if ("identity".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.identity = reader.getString();
                } else if ("storageDiagnostics".equals(fieldName)) {
                    deserializedStorageBlobTierChangedEventData.storageDiagnostics = reader.readUntyped();
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedStorageBlobTierChangedEventData;
        });
    }
}
