// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.eventgrid.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.models.CloudEvent;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.messaging.eventgrid.EventGridMessagingServiceVersion;
import com.azure.messaging.eventgrid.models.AcknowledgeOptions;
import com.azure.messaging.eventgrid.models.AcknowledgeResult;
import com.azure.messaging.eventgrid.models.PublishResult;
import com.azure.messaging.eventgrid.models.ReceiveResult;
import com.azure.messaging.eventgrid.models.RejectOptions;
import com.azure.messaging.eventgrid.models.RejectResult;
import com.azure.messaging.eventgrid.models.ReleaseOptions;
import com.azure.messaging.eventgrid.models.ReleaseResult;
import reactor.core.publisher.Mono;

import java.io.IOException;
import java.util.List;

/** Initializes a new instance of the EventGridClient type. */
public final class EventGridClientImpl {
    /** The proxy service used to perform REST calls. */
    private final EventGridClientService service;

    /** The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. */
    private final String endpoint;

    /**
     * Gets The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final EventGridMessagingServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public EventGridMessagingServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of EventGridClient client.
     *
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(String endpoint, EventGridMessagingServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of EventGridClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(
            HttpPipeline httpPipeline, String endpoint, EventGridMessagingServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of EventGridClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            EventGridMessagingServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(EventGridClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for EventGridClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "EventGridClient")
    public interface EventGridClientService {
        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> publishCloudEvent(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/cloudevents+json; charset=utf-8") BinaryData event,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> publishCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/cloudevents-batch+json; charset=utf-8") BinaryData events,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> receiveCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> acknowledgeCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json; charset=utf-8") BinaryData lockTokens,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> releaseCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json; charset=utf-8") BinaryData lockTokens,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> rejectCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json; charset=utf-8") BinaryData lockTokens,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PublishResult>> publishCloudEventWithResponseAsync(
        String topicName, CloudEvent event, RequestOptions requestOptions) {
        final String contentType = "application/cloudevents+json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.publishCloudEvent(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                accept,
                                removeExtraFields(event),
                                requestOptions,
                                context)
                            .map(resp -> new SimpleResponse<>(resp, resp.getValue().toObject(PublishResult.class))));
    }

    BinaryData removeExtraFields(CloudEvent event) {
        try {
            String json = getSerializerAdapter().serialize(event, SerializerEncoding.JSON);
            return BinaryData.fromString(json);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    BinaryData removeExtraFields(List<CloudEvent> events) {
        try {
            String json = getSerializerAdapter().serialize(events, SerializerEncoding.JSON);
            return BinaryData.fromString(json);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
    }


    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PublishResult> publishCloudEventWithResponse(
            String topicName, CloudEvent event, RequestOptions requestOptions) {
        return publishCloudEventWithResponseAsync(topicName, event, requestOptions).block();
    }

    /**
     * Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<PublishResult>> publishCloudEventsWithResponseAsync(
        String topicName, List<CloudEvent> events, RequestOptions requestOptions) {
        final String contentType = "application/cloudevents-batch+json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        Mono.from(service.publishCloudEvents(
                        this.getEndpoint(),
                        this.getServiceVersion().getVersion(),
                        contentType,
                        topicName,
                        accept,
                        removeExtraFields(events),
                        requestOptions,
                        context)
                        .map(resp -> new SimpleResponse<>(resp, resp.getValue().toObject(PublishResult.class))))
                );
    }

    /**
     * Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * Object
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<PublishResult> publishCloudEventsWithResponse(
            String topicName, List<CloudEvent> events, RequestOptions requestOptions) {
        return publishCloudEventsWithResponseAsync(topicName, events, requestOptions).block();
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1.</td></tr>
     *     <tr><td>maxWaitTime</td><td>Integer</td><td>No</td><td>Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken: String (Required)
     *                 deliveryAttemptCount: int (Required)
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReceiveResult>> receiveCloudEventsWithResponseAsync(
            String topicName, String eventSubscriptionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.receiveCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                topicName,
                                eventSubscriptionName,
                                accept,
                                requestOptions,
                                context)
                            .map(resp -> new SimpleResponse<>(resp, resp.getValue().toObject(ReceiveResult.class))));
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not specified, the default value is 1.</td></tr>
     *     <tr><td>maxWaitTime</td><td>Integer</td><td>No</td><td>Max wait time value for receive operation in Seconds. It is the time in seconds that the server approximately waits for the availability of an event and responds to the request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120 seconds. If not specified, the default value is 60 seconds.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken: String (Required)
     *                 deliveryAttemptCount: int (Required)
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReceiveResult> receiveCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, RequestOptions requestOptions) {
        return receiveCloudEventsWithResponseAsync(topicName, eventSubscriptionName, requestOptions).block();
    }

    /**
     * Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is
     * successfully acknowledged. The response body will include the set of successfully acknowledged lockTokens, along
     * with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no
     * longer be available to any consumer.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             errorCode: String (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens AcknowledgeOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Acknowledge operation along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<AcknowledgeResult>> acknowledgeCloudEventsWithResponseAsync(
        String topicName, String eventSubscriptionName, AcknowledgeOptions lockTokens, RequestOptions requestOptions) {
        final String contentType = "application/json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.acknowledgeCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                eventSubscriptionName,
                                accept,
                                BinaryData.fromObject(lockTokens),
                                requestOptions,
                                context)
                            .map(resp -> new SimpleResponse<>(resp, resp.getValue().toObject(AcknowledgeResult.class))));
    }

    /**
     * Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is
     * successfully acknowledged. The response body will include the set of successfully acknowledged lockTokens, along
     * with other failed lockTokens with their corresponding error information. Successfully acknowledged events will no
     * longer be available to any consumer.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             errorCode: String (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens AcknowledgeOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Acknowledge operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<AcknowledgeResult> acknowledgeCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, AcknowledgeOptions lockTokens, RequestOptions requestOptions) {
        return acknowledgeCloudEventsWithResponseAsync(topicName, eventSubscriptionName, lockTokens, requestOptions)
                .block();
    }

    /**
     * Release batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is
     * successfully released. The response body will include the set of successfully released lockTokens, along with
     * other failed lockTokens with their corresponding error information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             errorCode: String (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens ReleaseOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Release operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<ReleaseResult>> releaseCloudEventsWithResponseAsync(
        String topicName, String eventSubscriptionName, ReleaseOptions lockTokens, RequestOptions requestOptions) {
        final String contentType = "application/json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.releaseCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                eventSubscriptionName,
                                accept,
                                BinaryData.fromObject(lockTokens),
                                requestOptions,
                                context)
                            .map(resp -> new SimpleResponse<>(resp, resp.getValue().toObject(ReleaseResult.class))));
    }

    /**
     * Release batch of Cloud Events. The server responds with an HTTP 200 status code if at least one event is
     * successfully released. The response body will include the set of successfully released lockTokens, along with
     * other failed lockTokens with their corresponding error information.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             errorCode: String (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens ReleaseOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Release operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ReleaseResult> releaseCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, ReleaseOptions lockTokens, RequestOptions requestOptions) {
        return releaseCloudEventsWithResponseAsync(topicName, eventSubscriptionName, lockTokens, requestOptions)
                .block();
    }

    /**
     * Reject batch of Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             errorCode: String (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens RejectOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Reject operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<RejectResult>> rejectCloudEventsWithResponseAsync(
        String topicName, String eventSubscriptionName, RejectOptions lockTokens, RequestOptions requestOptions) {
        final String contentType = "application/json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.rejectCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                eventSubscriptionName,
                                accept,
                                BinaryData.fromObject(lockTokens),
                                requestOptions,
                                context)
                            .map(resp -> new SimpleResponse<>(resp, resp.getValue().toObject(RejectResult.class))));
    }

    /**
     * Reject batch of Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             errorCode: String (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens RejectOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Reject operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RejectResult> rejectCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, RejectOptions lockTokens, RequestOptions requestOptions) {
        return rejectCloudEventsWithResponseAsync(topicName, eventSubscriptionName, lockTokens, requestOptions).block();
    }
}
