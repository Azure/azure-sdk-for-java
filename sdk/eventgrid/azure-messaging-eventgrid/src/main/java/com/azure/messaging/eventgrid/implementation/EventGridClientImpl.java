// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.eventgrid.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.messaging.eventgrid.EventGridServiceVersion;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the EventGridClient type. */
public final class EventGridClientImpl {
    /** The proxy service used to perform REST calls. */
    private final EventGridClientService service;

    /** The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net. */
    private final String endpoint;

    /**
     * Gets The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     *
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /** Service version. */
    private final EventGridServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public EventGridServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of EventGridClient client.
     *
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(String endpoint, EventGridServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder()
                        .policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy())
                        .build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                endpoint,
                serviceVersion);
    }

    /**
     * Initializes an instance of EventGridClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(HttpPipeline httpPipeline, String endpoint, EventGridServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of EventGridClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String endpoint,
            EventGridServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(EventGridClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for EventGridClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "EventGridClient")
    public interface EventGridClientService {
        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> publishCloudEvent(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/cloudevents+json; charset=utf-8") BinaryData event,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> publishBatchOfCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/cloudevents-batch+json; charset=utf-8") BinaryData events,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive")
        @ExpectedResponses({201})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> receiveBatchOfCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> acknowledgeBatchOfCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json; charset=utf-8") BinaryData lockTokens,
                RequestOptions requestOptions,
                Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> releaseBatchOfCloudEvents(
                @HostParam("endpoint") String endpoint,
                @QueryParam("api-version") String apiVersion,
                @HeaderParam("content-type") String contentType,
                @PathParam("topicName") String topicName,
                @PathParam("eventSubscriptionName") String eventSubscriptionName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json; charset=utf-8") BinaryData tokens,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Publish Single Cloud Event to namespace topic.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> publishCloudEventWithResponseAsync(
            String topicName, BinaryData event, RequestOptions requestOptions) {
        final String contentType = "application/cloudevents+json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.publishCloudEvent(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                accept,
                                event,
                                requestOptions,
                                context));
    }

    /**
     * Publish Single Cloud Event to namespace topic.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> publishCloudEventWithResponse(
            String topicName, BinaryData event, RequestOptions requestOptions) {
        return publishCloudEventWithResponseAsync(topicName, event, requestOptions).block();
    }

    /**
     * Publish Batch of Cloud Events to namespace topic.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> publishBatchOfCloudEventsWithResponseAsync(
            String topicName, BinaryData events, RequestOptions requestOptions) {
        final String contentType = "application/cloudevents-batch+json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.publishBatchOfCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                accept,
                                events,
                                requestOptions,
                                context));
    }

    /**
     * Publish Batch of Cloud Events to namespace topic.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> publishBatchOfCloudEventsWithResponse(
            String topicName, BinaryData events, RequestOptions requestOptions) {
        return publishBatchOfCloudEventsWithResponseAsync(topicName, events, requestOptions).block();
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received.</td></tr>
     *     <tr><td>timeout</td><td>Integer</td><td>No</td><td>Timeout value for receive operation in Seconds. Default is 60 seconds.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken (Required): {
     *                     lockToken: String (Required)
     *                 }
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> receiveBatchOfCloudEventsWithResponseAsync(
            String topicName, String eventSubscriptionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.receiveBatchOfCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                topicName,
                                eventSubscriptionName,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * <p><strong>Query Parameters</strong>
     *
     * <table border="1">
     *     <caption>Query Parameters</caption>
     *     <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     *     <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received.</td></tr>
     *     <tr><td>timeout</td><td>Integer</td><td>No</td><td>Timeout value for receive operation in Seconds. Default is 60 seconds.</td></tr>
     * </table>
     *
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken (Required): {
     *                     lockToken: String (Required)
     *                 }
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> receiveBatchOfCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, RequestOptions requestOptions) {
        return receiveBatchOfCloudEventsWithResponseAsync(topicName, eventSubscriptionName, requestOptions).block();
    }

    /**
     * Acknowledge Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken (Required): {
     *                 lockToken: String (Required)
     *             }
     *             errorCode: int (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the LockTokens information along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> acknowledgeBatchOfCloudEventsWithResponseAsync(
            String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions) {
        final String contentType = "application/json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.acknowledgeBatchOfCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                eventSubscriptionName,
                                accept,
                                lockTokens,
                                requestOptions,
                                context));
    }

    /**
     * Acknowledge Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken (Required): {
     *                 lockToken: String (Required)
     *             }
     *             errorCode: int (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param lockTokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the LockTokens information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acknowledgeBatchOfCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, BinaryData lockTokens, RequestOptions requestOptions) {
        return acknowledgeBatchOfCloudEventsWithResponseAsync(
                        topicName, eventSubscriptionName, lockTokens, requestOptions)
                .block();
    }

    /**
     * Release Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         lockToken: String (Required)
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken (Required): {
     *                 lockToken: String (Required)
     *             }
     *             errorCode: int (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param tokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the LockTokens information along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> releaseBatchOfCloudEventsWithResponseAsync(
            String topicName, String eventSubscriptionName, BinaryData tokens, RequestOptions requestOptions) {
        final String contentType = "application/json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.releaseBatchOfCloudEvents(
                                this.getEndpoint(),
                                this.getServiceVersion().getVersion(),
                                contentType,
                                topicName,
                                eventSubscriptionName,
                                accept,
                                tokens,
                                requestOptions,
                                context));
    }

    /**
     * Release Cloud Events.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * [
     *      (Required){
     *         lockToken: String (Required)
     *     }
     * ]
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken (Required): {
     *                 lockToken: String (Required)
     *             }
     *             errorCode: int (Required)
     *             errorDescription: String (Required)
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param tokens Array of LockTokens for the corresponding received Cloud Events to be acknowledged.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the LockTokens information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> releaseBatchOfCloudEventsWithResponse(
            String topicName, String eventSubscriptionName, BinaryData tokens, RequestOptions requestOptions) {
        return releaseBatchOfCloudEventsWithResponseAsync(topicName, eventSubscriptionName, tokens, requestOptions)
                .block();
    }
}
