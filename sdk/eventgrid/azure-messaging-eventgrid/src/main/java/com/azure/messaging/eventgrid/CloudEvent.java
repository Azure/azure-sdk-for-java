// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.messaging.eventgrid;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;

import java.time.OffsetDateTime;
import java.util.*;

/**
 * The CloudEvent model. This represents a cloud event as specified by the CNCF, for sending event based data.
 * @see EventGridPublisherAsyncClient
 * @see EventGridPublisherClient
 **/
@Fluent
public class CloudEvent {

    private static final String SPEC_VERSION = "1.0";

    private static final String JSON_TYPE = "application/json";

    private final com.azure.messaging.eventgrid.implementation.models.CloudEvent cloudEvent;

    CloudEvent(com.azure.messaging.eventgrid.implementation.models.CloudEvent cloudEvent) {
        this.cloudEvent = cloudEvent;
    }

    com.azure.messaging.eventgrid.implementation.models.CloudEvent toImpl() {
        return this.cloudEvent;
    }

    /**
     * Create an instance of a CloudEvent. The source and type are required fields to publish.
     * @param source a URI identifying the origin of the event.
     * @param type   the type of event, e.g. "Contoso.Items.ItemReceived".
     */
    public CloudEvent(String source, String type) {
        if (CoreUtils.isNullOrEmpty(source)) {
            throw new IllegalArgumentException("Source cannot be null or empty");
        } else if (CoreUtils.isNullOrEmpty(type)) {
            throw new IllegalArgumentException("type cannot be null or empty");
        }

        this.cloudEvent = new com.azure.messaging.eventgrid.implementation.models.CloudEvent()
            .setId(UUID.randomUUID().toString())
            .setSource(source)
            .setType(type)
            .setSpecversion(SPEC_VERSION);
    }

    /**
     * Get the id of the cloud event.
     * @return the id.
     */
    public String getId() {
        return this.cloudEvent.getId();
    }

    /**
     * Set a custom id. Note that a random id is already set by default.
     * @param id the id to set.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setId(String id) {
        if (CoreUtils.isNullOrEmpty(id)) {
            throw new IllegalArgumentException("id cannot be null or empty");
        }
        this.cloudEvent.setId(id);
        return this;
    }

    /**
     * Get the URI source of the event.
     * @return the source.
     */
    public String getSource() {
        return this.cloudEvent.getSource();
    }

    /**
     * Get the object data encapsulated within this event.
     * @return the data associated with this event, or null if this event type does not contain object data.
     */
    public Object getData() {
        return cloudEvent.getData();
    }

    /**
     * Gets the binary data if it was set.
     * @return return the binary data that was set, or null if there was no binary data set.
     */
    public byte[] getBinaryData() {
        if (this.cloudEvent.getDataBase64() != null) {
            return Base64.getDecoder().decode(this.cloudEvent.getDataBase64());
        }
        return null;
    }

    /**
     * Set the data associated with this event, to be serialized by the serializer set on the Publisher Client.
     * @param data the data to set.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setData(Object data) {
        this.cloudEvent.setData(data);
        return this;
    }

    /**
     * Set binary data associated with this event, as well as the content type of the binary data. The
     * {@link CloudEvent#setDataContentType(String)} should be used alongside this, as the binary data is no longer
     * in application/json format.
     * @param data the data to set.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setBinaryData(byte[] data) {
        this.cloudEvent.setDataBase64(Base64.getEncoder().encodeToString(data));
        return this;
    }

    /**
     * Get the type of event, e.g. "Contoso.Items.ItemReceived".
     * @return the type of the event.
     */
    public String getType() {
        return this.cloudEvent.getType();
    }

    /**
     * Get the time associated with the occurrence of the event.
     * @return the event time, or null if the time is not set.
     */
    public OffsetDateTime getTime() {
        return this.cloudEvent.getTime();
    }

    /**
     * Set the time associated with the occurrence of the event.
     * @param time the time to set.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setTime(OffsetDateTime time) {
        this.cloudEvent.setTime(time);
        return this;
    }

    /**
     * Get the content type that the data is in. A null value indicates that the data is either nonexistent or in the
     * "application/json" type. Note that "application/json" is still a possible value for this field.
     * @return the content type the data is in, or null if the data is nonexistent or in "application/json" format.
     */
    public String getDataContentType() {
        return this.cloudEvent.getDatacontenttype();
    }

    /**
     * Set the content type of the data field. An unset value will be interpreted as the data being in the
     * "application/json" content type. Note that the envelope will still be serialized as a JSON regardless
     * of this property, as this property only applies to the data and binaryData properties.
     * @param dataContentType the data content type identifying string, such as "text/xml" for data serialized as
     *                        an xml string.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setDataContentType(String dataContentType) {
        this.cloudEvent.setDatacontenttype(dataContentType);
        return this;
    }

    /**
     * Get the schema that the data adheres to.
     * @return a URI of the data schema, or null if it is not set.
     */
    public String getDataSchema() {
        return this.cloudEvent.getDataschema();
    }

    /**
     * Set the schema that the data adheres to.
     * @param dataSchema a URI identifying the schema of the data.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setDataSchema(String dataSchema) {
        this.cloudEvent.setDataschema(dataSchema);
        return this;
    }

    /**
     * Get the subject associated with this event.
     * @return the subject, or null if the subject was not set.
     */
    public String getSubject() {
        return this.cloudEvent.getSubject();
    }

    /**
     * Set the subject of the event.
     * @param subject the subject to set.
     *
     * @return the cloud event itself.
     */
    public CloudEvent setSubject(String subject) {
        this.cloudEvent.setSubject(subject);
        return this;
    }

    /**
     * Get a map of the additional user-defined attributes associated with this event.
     * @return the extension attributes as an unmodifiable map.
     */
    public Map<String, Object> getExtensionAttributes() {
        return Collections.unmodifiableMap(this.cloudEvent.getAdditionalProperties());
    }

    /**
     * Add/Overwrite a single extension attribute to the cloud event envelope. The property name will be transformed
     * to lowercase and must not share a name with any reserved cloud event properties.
     * @param name  the name of the attribute.
     * @param value the value to associate with the name.
     *
     * @return the cloud event itself.
     */
    public CloudEvent addExtensionAttribute(String name, Object value) {
        this.cloudEvent.getAdditionalProperties().put(name.toLowerCase(Locale.ENGLISH), value);
        return this;
    }
}
