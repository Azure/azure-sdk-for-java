// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.namespaces.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of the Event Broker operation.
 */
@Immutable
public final class BrokerProperties implements JsonSerializable<BrokerProperties> {

    /*
     * The token of the lock on the event.
     */
    @Generated
    private final String lockToken;

    /*
     * The attempt count for delivering the event.
     */
    @Generated
    private final int deliveryCount;

    /**
     * Creates an instance of BrokerProperties class.
     *
     * @param lockToken the lockToken value to set.
     * @param deliveryCount the deliveryCount value to set.
     */
    @Generated
    private BrokerProperties(String lockToken, int deliveryCount) {
        this.lockToken = lockToken;
        this.deliveryCount = deliveryCount;
    }

    /**
     * Get the lockToken property: The token of the lock on the event.
     *
     * @return the lockToken value.
     */
    @Generated
    public String getLockToken() {
        return this.lockToken;
    }

    /**
     * Get the deliveryCount property: The attempt count for delivering the event.
     *
     * @return the deliveryCount value.
     */
    @Generated
    public int getDeliveryCount() {
        return this.deliveryCount;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("lockToken", this.lockToken);
        jsonWriter.writeIntField("deliveryCount", this.deliveryCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BrokerProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BrokerProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BrokerProperties.
     */
    @Generated
    public static BrokerProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String lockToken = null;
            int deliveryCount = 0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("lockToken".equals(fieldName)) {
                    lockToken = reader.getString();
                } else if ("deliveryCount".equals(fieldName)) {
                    deliveryCount = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }
            return new BrokerProperties(lockToken, deliveryCount);
        });
    }
}
