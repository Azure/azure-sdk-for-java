// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.namespaces.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.messaging.eventgrid.namespaces.EventGridServiceVersion;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the EventGridClient type.
 */
public final class EventGridClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final EventGridClientService service;

    /**
     * The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     */
    private final String endpoint;

    /**
     * Gets The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final EventGridServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public EventGridServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of EventGridClient client.
     * 
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(String endpoint, EventGridServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of EventGridClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(HttpPipeline httpPipeline, String endpoint, EventGridServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of EventGridClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint The host name of the namespace, e.g. namespaceName1.westus-1.eventgrid.azure.net.
     * @param serviceVersion Service version.
     */
    public EventGridClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        EventGridServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(EventGridClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for EventGridClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "EventGridClient")
    public interface EventGridClientService {
        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> publishCloudEvent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/cloudevents+json; charset=utf-8") BinaryData event, RequestOptions requestOptions,
            Context context);

        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> publishCloudEventSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/cloudevents+json; charset=utf-8") BinaryData event, RequestOptions requestOptions,
            Context context);

        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> publishCloudEvents(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/cloudevents-batch+json; charset=utf-8") BinaryData events,
            RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}:publish")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> publishCloudEventsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @HeaderParam("Content-Type") String contentType, @HeaderParam("accept") String accept,
            @BodyParam("application/cloudevents-batch+json; charset=utf-8") BinaryData events,
            RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> receiveCloudEvents(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:receive")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> receiveCloudEventsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> acknowledgeCloudEvents(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData acknowledgeOptions, RequestOptions requestOptions,
            Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:acknowledge")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> acknowledgeCloudEventsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData acknowledgeOptions, RequestOptions requestOptions,
            Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> releaseCloudEvents(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData releaseOptions, RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:release")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> releaseCloudEventsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData releaseOptions, RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> rejectCloudEvents(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData rejectOptions, RequestOptions requestOptions, Context context);

        @Post("/topics/{topicName}/eventsubscriptions/{eventSubscriptionName}:reject")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> rejectCloudEventsSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("topicName") String topicName,
            @PathParam("eventSubscriptionName") String eventSubscriptionName, @HeaderParam("accept") String accept,
            @BodyParam("application/json") BinaryData rejectOptions, RequestOptions requestOptions, Context context);
    }

    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> publishCloudEventWithResponseAsync(String topicName, BinaryData event,
        RequestOptions requestOptions) {
        final String contentType = "application/cloudevents+json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.publishCloudEvent(this.getEndpoint(),
            this.getServiceVersion().getVersion(), topicName, contentType, accept, event, requestOptions, context));
    }

    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> publishCloudEventWithResponse(String topicName, BinaryData event,
        RequestOptions requestOptions) {
        final String contentType = "application/cloudevents+json; charset=utf-8";
        final String accept = "application/json";
        return service.publishCloudEventSync(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
            contentType, accept, event, requestOptions, Context.NONE);
    }

    /**
     * Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> publishCloudEventsWithResponseAsync(String topicName, BinaryData events,
        RequestOptions requestOptions) {
        final String contentType = "application/cloudevents-batch+json; charset=utf-8";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.publishCloudEvents(this.getEndpoint(),
            this.getServiceVersion().getVersion(), topicName, contentType, accept, events, requestOptions, context));
    }

    /**
     * Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> publishCloudEventsWithResponse(String topicName, BinaryData events,
        RequestOptions requestOptions) {
        final String contentType = "application/cloudevents-batch+json; charset=utf-8";
        final String accept = "application/json";
        return service.publishCloudEventsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
            contentType, accept, events, requestOptions, Context.NONE);
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received. Minimum value is 1, while
     * maximum value is 100 events. If not specified, the default value is 1.</td></tr>
     * <tr><td>maxWaitTime</td><td>Duration</td><td>No</td><td>Max wait time value for receive operation in Seconds. It
     * is the time in seconds that the server approximately waits for the availability of an event and responds to the
     * request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds,
     * while maximum value is 120 seconds. If not specified, the default value is 60 seconds.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken: String (Required)
     *                 deliveryCount: int (Required)
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> receiveCloudEventsWithResponseAsync(String topicName,
        String eventSubscriptionName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.receiveCloudEvents(this.getEndpoint(),
            this.getServiceVersion().getVersion(), topicName, eventSubscriptionName, accept, requestOptions, context));
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received. Minimum value is 1, while
     * maximum value is 100 events. If not specified, the default value is 1.</td></tr>
     * <tr><td>maxWaitTime</td><td>Duration</td><td>No</td><td>Max wait time value for receive operation in Seconds. It
     * is the time in seconds that the server approximately waits for the availability of an event and responds to the
     * request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds,
     * while maximum value is 120 seconds. If not specified, the default value is 60 seconds.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken: String (Required)
     *                 deliveryCount: int (Required)
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> receiveCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.receiveCloudEventsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
            eventSubscriptionName, accept, requestOptions, Context.NONE);
    }

    /**
     * Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is
     * successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with
     * other failed lockTokens with their corresponding error information. Successfully acknowledged events will no
     * longer be available to any consumer.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param acknowledgeOptions AcknowledgeOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Acknowledge operation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> acknowledgeCloudEventsWithResponseAsync(String topicName,
        String eventSubscriptionName, BinaryData acknowledgeOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.acknowledgeCloudEvents(this.getEndpoint(), this.getServiceVersion().getVersion(),
                topicName, eventSubscriptionName, accept, acknowledgeOptions, requestOptions, context));
    }

    /**
     * Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is
     * successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with
     * other failed lockTokens with their corresponding error information. Successfully acknowledged events will no
     * longer be available to any consumer.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param acknowledgeOptions AcknowledgeOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Acknowledge operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acknowledgeCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        BinaryData acknowledgeOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.acknowledgeCloudEventsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
            eventSubscriptionName, accept, acknowledgeOptions, requestOptions, Context.NONE);
    }

    /**
     * Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully released lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param releaseOptions ReleaseOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Release operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> releaseCloudEventsWithResponseAsync(String topicName,
        String eventSubscriptionName, BinaryData releaseOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.releaseCloudEvents(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
                eventSubscriptionName, accept, releaseOptions, requestOptions, context));
    }

    /**
     * Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully released lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param releaseOptions ReleaseOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Release operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> releaseCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        BinaryData releaseOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.releaseCloudEventsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
            eventSubscriptionName, accept, releaseOptions, requestOptions, Context.NONE);
    }

    /**
     * Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully rejected lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param rejectOptions RejectOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Reject operation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> rejectCloudEventsWithResponseAsync(String topicName, String eventSubscriptionName,
        BinaryData rejectOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.rejectCloudEvents(this.getEndpoint(), this.getServiceVersion().getVersion(),
                topicName, eventSubscriptionName, accept, rejectOptions, requestOptions, context));
    }

    /**
     * Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully rejected lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param rejectOptions RejectOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Reject operation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> rejectCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        BinaryData rejectOptions, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.rejectCloudEventsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), topicName,
            eventSubscriptionName, accept, rejectOptions, requestOptions, Context.NONE);
    }
}
