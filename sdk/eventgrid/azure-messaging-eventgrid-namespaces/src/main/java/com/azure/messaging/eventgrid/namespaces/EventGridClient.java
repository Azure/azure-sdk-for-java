// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.messaging.eventgrid.namespaces;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.messaging.eventgrid.namespaces.implementation.EventGridClientImpl;
import com.azure.messaging.eventgrid.namespaces.models.AcknowledgeOptions;
import com.azure.messaging.eventgrid.namespaces.models.AcknowledgeResult;
import com.azure.messaging.eventgrid.namespaces.models.ReceiveResult;
import com.azure.messaging.eventgrid.namespaces.models.RejectOptions;
import com.azure.messaging.eventgrid.namespaces.models.RejectResult;
import com.azure.messaging.eventgrid.namespaces.models.ReleaseOptions;
import com.azure.messaging.eventgrid.namespaces.models.ReleaseResult;
import java.time.Duration;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import com.azure.core.models.CloudEvent;
import com.azure.core.util.serializer.SerializerEncoding;
import java.io.IOException;
import java.io.UncheckedIOException;
import java.net.URI;
import java.util.Base64;

/**
 * Initializes a new instance of the synchronous EventGridClient type.
 */
@ServiceClient(builder = EventGridClientBuilder.class)
public final class EventGridClient {

    @Generated
    private final EventGridClientImpl serviceClient;

    private static final SerializerAdapter SERIALIZER = JacksonAdapter.createDefaultSerializerAdapter();

    private final ClientLogger logger = new ClientLogger(EventGridClient.class);

    /**
     * Initializes an instance of EventGridClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    EventGridClient(EventGridClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     source: String (Required)
     *     data: Object (Optional)
     *     data_base64: byte[] (Optional)
     *     type: String (Required)
     *     time: OffsetDateTime (Optional)
     *     specversion: String (Required)
     *     dataschema: String (Optional)
     *     datacontenttype: String (Optional)
     *     subject: String (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> publishCloudEventWithResponse(String topicName, BinaryData event,
        RequestOptions requestOptions) {
        return this.serviceClient.publishCloudEventWithResponse(topicName, event, requestOptions);
    }

    /**
     * Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         source: String (Required)
     *         data: Object (Optional)
     *         data_base64: byte[] (Optional)
     *         type: String (Required)
     *         time: OffsetDateTime (Optional)
     *         specversion: String (Required)
     *         dataschema: String (Optional)
     *         datacontenttype: String (Optional)
     *         subject: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * { }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param events Array of Cloud Events being published.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Publish operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> publishCloudEventsWithResponse(String topicName, BinaryData events,
        RequestOptions requestOptions) {
        return this.serviceClient.publishCloudEventsWithResponse(topicName, events, requestOptions);
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>maxEvents</td><td>Integer</td><td>No</td><td>Max Events count to be received. Minimum value is 1, while
     * maximum value is 100 events. If not specified, the default value is 1.</td></tr>
     * <tr><td>maxWaitTime</td><td>Duration</td><td>No</td><td>Max wait time value for receive operation in Seconds. It
     * is the time in seconds that the server approximately waits for the availability of an event and responds to the
     * request. If an event is available, the broker responds immediately to the client. Minimum value is 10 seconds,
     * while maximum value is 120 seconds. If not specified, the default value is 60 seconds.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     value (Required): [
     *          (Required){
     *             brokerProperties (Required): {
     *                 lockToken: String (Required)
     *                 deliveryCount: int (Required)
     *             }
     *             event (Required): {
     *                 id: String (Required)
     *                 source: String (Required)
     *                 data: Object (Optional)
     *                 data_base64: byte[] (Optional)
     *                 type: String (Required)
     *                 time: OffsetDateTime (Optional)
     *                 specversion: String (Required)
     *                 dataschema: String (Optional)
     *                 datacontenttype: String (Optional)
     *                 subject: String (Optional)
     *             }
     *         }
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return details of the Receive operation response along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> receiveCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        RequestOptions requestOptions) {
        return this.serviceClient.receiveCloudEventsWithResponse(topicName, eventSubscriptionName, requestOptions);
    }

    /**
     * Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is
     * successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with
     * other failed lockTokens with their corresponding error information. Successfully acknowledged events will no
     * longer be available to any consumer.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param acknowledgeOptions AcknowledgeOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Acknowledge operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> acknowledgeCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        BinaryData acknowledgeOptions, RequestOptions requestOptions) {
        return this.serviceClient.acknowledgeCloudEventsWithResponse(topicName, eventSubscriptionName,
            acknowledgeOptions, requestOptions);
    }

    /**
     * Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully released lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param releaseOptions ReleaseOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Release operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> releaseCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        BinaryData releaseOptions, RequestOptions requestOptions) {
        return this.serviceClient.releaseCloudEventsWithResponse(topicName, eventSubscriptionName, releaseOptions,
            requestOptions);
    }

    /**
     * Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully rejected lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     lockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     failedLockTokens (Required): [
     *          (Required){
     *             lockToken: String (Required)
     *             error (Required): {
     *                 code: String (Required)
     *                 message: String (Required)
     *                 target: String (Optional)
     *                 details (Optional): [
     *                     (recursive schema, see above)
     *                 ]
     *                 innererror (Optional): {
     *                     code: String (Optional)
     *                     innererror (Optional): (recursive schema, see innererror above)
     *                 }
     *             }
     *         }
     *     ]
     *     succeededLockTokens (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param rejectOptions RejectOptions.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the result of the Reject operation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> rejectCloudEventsWithResponse(String topicName, String eventSubscriptionName,
        BinaryData rejectOptions, RequestOptions requestOptions) {
        return this.serviceClient.rejectCloudEventsWithResponse(topicName, eventSubscriptionName, rejectOptions,
            requestOptions);
    }

    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws UncheckedIOException failed to format the event properly.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void publishCloudEvent(String topicName, CloudEvent event) {
        publishCloudEvent(topicName, event, false);
    }

    /**
     * Publish Single Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * @param topicName Topic Name.
     * @param event Single Cloud Event being published.
     * @param binaryMode If true, the event will be published in binary mode.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws UncheckedIOException failed to format the event properly.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void publishCloudEvent(String topicName, CloudEvent event, boolean binaryMode) {
        RequestOptions requestOptions = new RequestOptions();
        if (binaryMode) {
            if (event.getDataContentType() != null) {
                requestOptions.setHeader(HttpHeaderName.fromString("content-type"), event.getDataContentType());
            }
            requestOptions.setHeader(HttpHeaderName.fromString("ce-id"), event.getId());
            requestOptions.setHeader(HttpHeaderName.fromString("ce-specversion"), "1.0");
            if (event.getTime() != null) {
                requestOptions.setHeader(HttpHeaderName.fromString("ce-time"),
                    event.getTime().format(DateTimeFormatter.ISO_DATE_TIME));
            }
            requestOptions.setHeader(HttpHeaderName.fromString("ce-source"), event.getSource());
            if (event.getSubject() != null) {
                requestOptions.setHeader(HttpHeaderName.fromString("ce-subject"), event.getSubject());
            }
            requestOptions.setHeader(HttpHeaderName.fromString("ce-type"), event.getType());
            if (event.getDataSchema() != null) {
                requestOptions.setHeader(HttpHeaderName.fromString("ce-dataschema"), event.getDataSchema());
            }
            event.getExtensionAttributes().forEach((key, value) -> {
                Class<?> clazz = value.getClass();
                HttpHeaderName headerName = HttpHeaderName.fromString("ce-" + key);
                String headerValue = null;
                if (clazz == String.class) {
                    headerValue = (String) value;
                } else if (clazz == Integer.class) {
                    headerValue = ((Integer) value).toString();
                } else if (clazz == Boolean.class) {
                    headerValue = ((Boolean) value).toString();
                } else if (clazz == URI.class) {
                    headerValue = ((URI) value).toString();
                } else if (clazz == OffsetDateTime.class) {
                    headerValue = ((OffsetDateTime) value).toString();
                } else if (clazz == byte[].class) {
                    headerValue = Base64.getEncoder().encodeToString((byte[]) value);
                }
                requestOptions.setHeader(headerName, headerValue);
            });
            publishCloudEventWithResponse(topicName, event.getData(), requestOptions);
        } else {
            try {
                BinaryData binaryEvent = BinaryData.fromString(SERIALIZER
                    .serialize(BinaryData.fromObject(event).toObject(CloudEvent.class), SerializerEncoding.JSON));
                publishCloudEventWithResponse(topicName, binaryEvent, requestOptions);
            } catch (IOException e) {
                throw logger.logThrowableAsError(new UncheckedIOException(e));
            }
        }
    }

    /**
     * Publish Batch Cloud Event to namespace topic. In case of success, the server responds with an HTTP 200 status
     * code with an empty JSON object in response. Otherwise, the server can return various error codes. For example,
     * 401: which indicates authorization failure, 403: which indicates quota exceeded or message is too large, 410:
     * which indicates that specific topic is not found, 400: for bad request, and 500: for internal server error.
     *
     * @param topicName Topic Name.
     * @param events Batch of Cloud Events being published.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws UncheckedIOException failed to format the event properly.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void publishCloudEvents(String topicName, List<CloudEvent> events) {
        // Generated convenience method for publishCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        publishCloudEventsWithResponse(topicName, BinaryData.fromObject(events), requestOptions);
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param maxEvents Max Events count to be received. Minimum value is 1, while maximum value is 100 events. If not
     * specified, the default value is 1.
     * @param maxWaitTime Max wait time value for receive operation in Seconds. It is the time in seconds that the
     * server approximately waits for the availability of an event and responds to the request. If an event is
     * available, the broker responds immediately to the client. Minimum value is 10 seconds, while maximum value is 120
     * seconds. If not specified, the default value is 60 seconds.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Receive operation response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReceiveResult receiveCloudEvents(String topicName, String eventSubscriptionName, Integer maxEvents,
        Duration maxWaitTime) {
        // Generated convenience method for receiveCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (maxEvents != null) {
            requestOptions.addQueryParam("maxEvents", String.valueOf(maxEvents), false);
        }
        if (maxWaitTime != null) {
            requestOptions.addQueryParam("maxWaitTime", String.valueOf(maxWaitTime.getSeconds()), false);
        }
        return receiveCloudEventsWithResponse(topicName, eventSubscriptionName, requestOptions).getValue()
            .toObject(ReceiveResult.class);
    }

    /**
     * Receive Batch of Cloud Events from the Event Subscription.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return details of the Receive operation response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReceiveResult receiveCloudEvents(String topicName, String eventSubscriptionName) {
        // Generated convenience method for receiveCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return receiveCloudEventsWithResponse(topicName, eventSubscriptionName, requestOptions).getValue()
            .toObject(ReceiveResult.class);
    }

    /**
     * Acknowledge batch of Cloud Events. The server responds with an HTTP 200 status code if the request is
     * successfully accepted. The response body will include the set of successfully acknowledged lockTokens, along with
     * other failed lockTokens with their corresponding error information. Successfully acknowledged events will no
     * longer be available to any consumer.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param acknowledgeOptions AcknowledgeOptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of the Acknowledge operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public AcknowledgeResult acknowledgeCloudEvents(String topicName, String eventSubscriptionName,
        AcknowledgeOptions acknowledgeOptions) {
        // Generated convenience method for acknowledgeCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return acknowledgeCloudEventsWithResponse(topicName, eventSubscriptionName,
            BinaryData.fromObject(acknowledgeOptions), requestOptions).getValue().toObject(AcknowledgeResult.class);
    }

    /**
     * Release batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully released lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param releaseOptions ReleaseOptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of the Release operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ReleaseResult releaseCloudEvents(String topicName, String eventSubscriptionName,
        ReleaseOptions releaseOptions) {
        // Generated convenience method for releaseCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return releaseCloudEventsWithResponse(topicName, eventSubscriptionName, BinaryData.fromObject(releaseOptions),
            requestOptions).getValue().toObject(ReleaseResult.class);
    }

    /**
     * Reject batch of Cloud Events. The server responds with an HTTP 200 status code if the request is successfully
     * accepted. The response body will include the set of successfully rejected lockTokens, along with other failed
     * lockTokens with their corresponding error information.
     *
     * @param topicName Topic Name.
     * @param eventSubscriptionName Event Subscription Name.
     * @param rejectOptions RejectOptions.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the result of the Reject operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RejectResult rejectCloudEvents(String topicName, String eventSubscriptionName, RejectOptions rejectOptions) {
        // Generated convenience method for rejectCloudEventsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return rejectCloudEventsWithResponse(topicName, eventSubscriptionName, BinaryData.fromObject(rejectOptions),
            requestOptions).getValue().toObject(RejectResult.class);
    }
}
