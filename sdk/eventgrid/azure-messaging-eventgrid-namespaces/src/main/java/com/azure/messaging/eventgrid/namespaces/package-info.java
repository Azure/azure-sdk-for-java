// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
/**
 * <!-- @formatter:off -->
 * Azure Event Grid allows you to easily build applications with event-based architectures. The Event Grid service fully
 * manages all routing of events from any source, to any destination, for any application. Azure service events and
 * custom events can be published directly to the service, where the events can then be filtered and sent to various
 * recipients, such as built-in handlers or custom webhooks. To learn more about Azure Event Grid: <a
 * href="https://docs.microsoft.com/azure/event-grid/overview">What is Event Grid?</a>
 *
 * <p>
 * Use the client library for Azure Event Grid Namespaces to:
 * <ul>
 * <li>Publish events to Event Grid topics using the Cloud Event schema</li>
 * <li>Consume and settle Cloud Events.</li>
 * </ul>
 *
 * <h2>Authentication</h2>
 *
 * In order to send events, we need an endpoint to send to and authentication for the endpoint. The authentication can
 * be
 * a key credential or an Entra ID credential. The endpoint and key can both be obtained through the <a
 * href="https://ms.portal.azure.com/">Azure Portal</a> or <a href="https://docs.microsoft.com/cli/azure">Azure CLI</a>.
 *
 * <h3>Endpoint</h3>
 *
 * The endpoint is listed on the dashboard of the topic or domain in the <a href="https://ms.portal.azure.com/">Azure
 * Portal</a>,
 * or can be obtained using the following command in <a href="https://docs.microsoft.com/cli/azure">Azure CLI</a>:
 *
 * <pre>
 * az eventgrid topic show --name &lt;your-resource-name&gt; --resource-group &lt;your-resource-group-name&gt; --query &quot;endpoint&quot;
 * </pre>
 *
 * <h2>Entra ID Token authentication</h2>
 * Azure Event Grid provides integration with Entra ID for identity-based authentication of requests.
 * With Entra ID, you can use role-based access control (RBAC) to grant access to your Azure Event Grid resources to
 * users, groups, or applications.
 * To send events to a topic or domain with a `TokenCredential`, the authenticated identity should have the "EventGrid
 * Data Sender" role assigned.
 *
 * This authentication method is preferred.
 *
 * <!-- src_embed java com.azure.messaging.eventgrid.namespaces.TokenCredentialExample -->
 * <!-- end com.azure.messaging.eventgrid.namespaces.TokenCredentialExample -->
 *
 * <h2>Access Key</h2>
 *
 * The keys are listed in the "Access Keys" tab of the <a href="https://ms.portal.azure.com/">Azure Portal</a>, or can
 * be
 * obtained
 * using the following command in <a href="https://docs.microsoft.com/cli/azure">Azure CLI</a>. Anyone of the keys
 * listed will work.
 *
 * <pre>
 * az eventgrid topic key list --name &lt;your-resource-name&gt; --resource-group &lt;your-resource-group-name&gt;
 * </pre>
 *
 * <!-- src_embed com.azure.messaging.eventgrid.namespaces.AccessKeyExample -->
 * <pre>
 * EventGridSenderClient client = new EventGridSenderClientBuilder&#40;&#41;.endpoint&#40;&quot;your endpoint&quot;&#41;
 *     .topicName&#40;&quot;your topic&quot;&#41;
 *     .credential&#40;new AzureKeyCredential&#40;&quot;your access key&quot;&#41;&#41;
 *     .buildClient&#40;&#41;;
 * </pre>
 * <!-- end com.azure.messaging.eventgrid.namespaces.AccessKeyExample -->
 *
 * <h2>Key concepts</h2>
 * <h3>Event Grid Namespace</h3>
 * A <a href="https://learn.microsoft.com/azure/event-grid/concepts-event-grid-namespaces#namespaces">namespace</a> is a
 * management container for other resources. It allows for grouping of related resources in order to manage them under
 * one subscription.
 * <h3>Namespace Topic</h3>
 * A <a href="https://learn.microsoft.com/azure/event-grid/concepts-event-grid-namespaces#namespace-topics">namespace
 * topic</a> is a topic that is created within an Event Grid namespace. The client publishes events to an HTTP namespace
 * endpoint specifying a namespace topic where published events are logically contained. A namespace topic only supports
 * the CloudEvent v1.0 schema.
 * <h3>Event Subscription</h3>
 * An <a href="https://learn.microsoft.com/azure/event-grid/concepts-event-grid-namespaces#event-subscriptions">event
 * subscription</a> is a configuration resource associated with a single topic.
 *
 * <h2>Examples</h2>
 * <h3>Sending an event</h3>
 * <!-- src_embed com.azure.messaging.eventgrid.namespaces.TokenCredentialExample -->
 * <pre>
 * EventGridSenderClient client = new EventGridSenderClientBuilder&#40;&#41;.endpoint&#40;&quot;your endpoint&quot;&#41;
 *     .topicName&#40;&quot;your topic&quot;&#41;
 *     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;
 *     .buildClient&#40;&#41;;
 * </pre>
 * <!-- end com.azure.messaging.eventgrid.namespaces.TokenCredentialExample -->
 * <!-- src_embed com.azure.messaging.eventgrid.namespaces.SendEventExample -->
 * <pre>
 * User user = new User&#40;&quot;John&quot;, &quot;Doe&quot;&#41;;
 * CloudEvent cloudEvent
 *     = new CloudEvent&#40;&quot;source&quot;, &quot;type&quot;, BinaryData.fromObject&#40;user&#41;, CloudEventDataFormat.JSON, &quot;application&#47;json&quot;&#41;;
 * client.send&#40;cloudEvent&#41;;
 * </pre>
 * <!-- end com.azure.messaging.eventgrid.namespaces.SendEventExample -->
 *
 * <h3>Receiving and Settling events</h3>
 * <!-- src_embed com.azure.messaging.eventgrid.namespaces.ReceiveEventExample -->
 * <pre>
 *
 * EventGridReceiverClient client = new EventGridReceiverClientBuilder&#40;&#41;.endpoint&#40;&quot;your endpoint&quot;&#41;
 *     .topicName&#40;&quot;your topic&quot;&#41;
 *     .subscriptionName&#40;&quot;your subscription&quot;&#41;
 *     .credential&#40;new DefaultAzureCredentialBuilder&#40;&#41;.build&#40;&#41;&#41;
 *     .buildClient&#40;&#41;;
 *
 * &#47;&#47; Receive optionally takes a maximum number of events and a duration to wait. The defaults are
 * &#47;&#47; 1 event and 60 seconds.
 * ReceiveResult result = client.receive&#40;2, Duration.ofSeconds&#40;10&#41;&#41;;
 *
 * &#47;&#47; The result contains the received events and the details of the operation. Use the details to obtain
 * &#47;&#47; lock tokens for settling the event. Lock tokens are opaque strings that are used to acknowledge,
 * &#47;&#47; release, or reject the event.
 *
 * result.getDetails&#40;&#41;.forEach&#40;details -&gt; &#123;
 *     CloudEvent event = details.getEvent&#40;&#41;;
 *     &#47;&#47; Based on some examination of the event, it might be acknowledged, released, or rejected.
 *     User user = event.getData&#40;&#41;.toObject&#40;User.class&#41;;
 *     if &#40;user.getFirstName&#40;&#41;.equals&#40;&quot;John&quot;&#41;&#41; &#123;
 *         &#47;&#47; Acknowledge the event.
 *         client.acknowledge&#40;Arrays.asList&#40;details.getBrokerProperties&#40;&#41;.getLockToken&#40;&#41;&#41;&#41;;
 *     &#125; else if &#40;user.getFirstName&#40;&#41;.equals&#40;&quot;Jane&quot;&#41;&#41; &#123;
 *         &#47;&#47; Release the event.
 *         client.release&#40;Arrays.asList&#40;details.getBrokerProperties&#40;&#41;.getLockToken&#40;&#41;&#41;&#41;;
 *     &#125; else &#123;
 *         &#47;&#47; Reject the event.
 *         client.reject&#40;Arrays.asList&#40;details.getBrokerProperties&#40;&#41;.getLockToken&#40;&#41;&#41;&#41;;
 *     &#125;
 * &#125;&#41;;
 *
 * </pre>
 * <!-- end com.azure.messaging.eventgrid.namespaces.ReceiveEventExample -->
 * <!-- @formatter:on -->
 */
package com.azure.messaging.eventgrid.namespaces;
