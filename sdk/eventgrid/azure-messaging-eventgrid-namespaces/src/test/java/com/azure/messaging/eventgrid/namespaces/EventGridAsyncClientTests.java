// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.messaging.eventgrid.namespaces;

import com.azure.identity.DefaultAzureCredentialBuilder;
import com.azure.messaging.eventgrid.namespaces.models.ReleaseDelay;
import org.junit.jupiter.api.Test;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class EventGridAsyncClientTests extends EventGridClientTestBase {

    @Override
    protected void beforeTest() {
        makeBuilders(false);
    }

    EventGridReceiverAsyncClient buildReceiverAsyncClient() {
        if (interceptorManager.isLiveMode()) {
            return receiverBuilder.credential(new DefaultAzureCredentialBuilder().build()).buildAsyncClient();
        }
        return receiverBuilder.credential(getKey(EVENTGRID_KEY)).buildAsyncClient();
    }

    EventGridSenderAsyncClient buildSenderAsyncClient() {
        if (interceptorManager.isLiveMode()) {
            return senderBuilder.credential(new DefaultAzureCredentialBuilder().build()).buildAsyncClient();
        }
        return senderBuilder.credential(getKey(EVENTGRID_KEY)).buildAsyncClient();
    }

    @Test
    void send() {

        EventGridSenderAsyncClient client = buildSenderAsyncClient();

        client.send(getCloudEvent()).as(StepVerifier::create).verifyComplete();
    }

    @Test
    void sendBatch() {
        EventGridSenderAsyncClient client = buildSenderAsyncClient();

        client.send(Arrays.asList(getCloudEvent(), getCloudEvent())).as(StepVerifier::create).verifyComplete();
    }

    @Test
    void receiveBatch() {

        EventGridReceiverAsyncClient client = buildReceiverAsyncClient();
        EventGridSenderAsyncClient senderClient = buildSenderAsyncClient();

        senderClient.send(getCloudEvent())
            .then(client.receive(1, Duration.ofSeconds(10)))
            .as(StepVerifier::create)
            .assertNext(receiveResult -> {
                assertNotNull(receiveResult);
                assertFalse(receiveResult.getDetails().isEmpty());
            })
            .verifyComplete();
    }

    @Test
    void acknowledgeBatch() {

        EventGridReceiverAsyncClient client = buildReceiverAsyncClient();
        EventGridSenderAsyncClient senderClient = buildSenderAsyncClient();

        senderClient.send(getCloudEvent()).then(client.receive(1, Duration.ofSeconds(10))).flatMap(receiveResult -> {
            return client
                .acknowledge(Arrays.asList(receiveResult.getDetails().get(0).getBrokerProperties().getLockToken()));
        }).as(StepVerifier::create).assertNext(receiveResult -> {
            assertNotNull(receiveResult);
            assertTrue(receiveResult.getFailedLockTokens().isEmpty());
            assertFalse(receiveResult.getSucceededLockTokens().isEmpty());
        }).verifyComplete();
    }

    @Test
    void releaseBatch() {

        EventGridReceiverAsyncClient client = buildReceiverAsyncClient();
        EventGridSenderAsyncClient senderClient = buildSenderAsyncClient();

        senderClient.send(getCloudEvent()).then(client.receive(1, Duration.ofSeconds(10))).flatMap(receiveResult -> {
            return client
                .release(Arrays.asList(receiveResult.getDetails().get(0).getBrokerProperties().getLockToken()));
        }).as(StepVerifier::create).assertNext(result -> {
            assertNotNull(result);
            assertTrue(result.getFailedLockTokens().isEmpty());
            assertFalse(result.getSucceededLockTokens().isEmpty());
        }).verifyComplete();
    }

    @Test
    void releaseBatchWithDelay() {

        EventGridReceiverAsyncClient client = buildReceiverAsyncClient();
        EventGridSenderAsyncClient senderClient = buildSenderAsyncClient();

        senderClient.send(getCloudEvent()).then(client.receive(1, Duration.ofSeconds(10))).flatMap(receiveResult -> {
            return client.release(Arrays.asList(receiveResult.getDetails().get(0).getBrokerProperties().getLockToken()),
                ReleaseDelay.TEN_SECONDS);
        }).as(StepVerifier::create).assertNext(result -> {
            assertNotNull(result);
            assertTrue(result.getFailedLockTokens().isEmpty());
            assertFalse(result.getSucceededLockTokens().isEmpty());
        }).verifyComplete();

    }

    @Test
    void rejectBatch() {

        EventGridReceiverAsyncClient client = buildReceiverAsyncClient();
        EventGridSenderAsyncClient senderClient = buildSenderAsyncClient();

        senderClient.send(getCloudEvent()).then(client.receive(1, Duration.ofSeconds(10))).flatMap(receiveResult -> {
            return client.reject(Arrays.asList(receiveResult.getDetails().get(0).getBrokerProperties().getLockToken()));
        }).as(StepVerifier::create).assertNext(result -> {
            assertNotNull(result);
            assertTrue(result.getFailedLockTokens().isEmpty());
            assertFalse(result.getSucceededLockTokens().isEmpty());
        }).verifyComplete();
    }

    @Test
    void renewBatch() {

        EventGridReceiverAsyncClient client = buildReceiverAsyncClient();
        EventGridSenderAsyncClient senderClient = buildSenderAsyncClient();

        senderClient.send(getCloudEvent()).then(client.receive(1, Duration.ofSeconds(10))).flatMap(receiveResult -> {
            return client
                .renewLocks(Arrays.asList(receiveResult.getDetails().get(0).getBrokerProperties().getLockToken()));
        }).as(StepVerifier::create).assertNext(result -> {
            assertNotNull(result);
            assertTrue(result.getFailedLockTokens().isEmpty());
            assertFalse(result.getSucceededLockTokens().isEmpty());
        }).verifyComplete();
    }
}
