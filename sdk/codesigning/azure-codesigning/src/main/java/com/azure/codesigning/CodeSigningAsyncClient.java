// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.codesigning;

import com.azure.codesigning.implementation.CodeSigningClientImpl;
import com.azure.codesigning.models.CodeSignOperationStatus;
import com.azure.codesigning.models.CodeSigningSubmissionOptions;
import com.azure.codesigning.models.ExtendedKeyUsage;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.experimental.models.PollResult;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import java.util.stream.Collectors;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the asynchronous CodeSigningClient type. */
@ServiceClient(builder = CodeSigningClientBuilder.class, isAsync = true)
public final class CodeSigningAsyncClient {
    @Generated private final CodeSigningClientImpl serviceClient;

    /**
     * Initializes an instance of CodeSigningAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    CodeSigningAsyncClient(CodeSigningClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Gets the codesigning root certificate on the certificate chain for that account and profile name.
     *
     * <p>The root certificate is generated as part of the initial account creation and it is used to sign the bits for
     * the profile provided.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param codeSigningAccountName CodeSigning account name.
     * @param certificateProfileName Certificate profile name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSignRootCertificateWithResponse(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        return this.serviceClient.getSignRootCertificateWithResponseAsync(
                codeSigningAccountName, certificateProfileName, requestOptions);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>The list of extended key usages are used to determine the purpose of the certificate usage as part of the
     * codesigning operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listSignEkus(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        return this.serviceClient.listSignEkusAsync(codeSigningAccountName, certificateProfileName, requestOptions);
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSign(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        return this.serviceClient.beginSignAsync(
                codeSigningAccountName, certificateProfileName, codeSigningSubmissionOptions, requestOptions);
    }

    /**
     * Gets the codesigning root certificate on the certificate chain for that account and profile name.
     *
     * <p>The root certificate is generated as part of the initial account creation and it is used to sign the bits for
     * the profile provided.
     *
     * @param codeSigningAccountName CodeSigning account name.
     * @param certificateProfileName Certificate profile name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getSignRootCertificate(String codeSigningAccountName, String certificateProfileName) {
        // Generated convenience method for getSignRootCertificateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSignRootCertificateWithResponse(codeSigningAccountName, certificateProfileName, requestOptions)
                .flatMap(FluxUtil::toMono);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>The list of extended key usages are used to determine the purpose of the certificate usage as part of the
     * codesigning operation.
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedFlux}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<ExtendedKeyUsage> listSignEkus(String codeSigningAccountName, String certificateProfileName) {
        // Generated convenience method for listSignEkus
        RequestOptions requestOptions = new RequestOptions();
        PagedFlux<BinaryData> pagedFluxResponse =
                listSignEkus(codeSigningAccountName, certificateProfileName, requestOptions);
        return PagedFlux.create(
                () ->
                        (continuationToken, pageSize) -> {
                            Flux<PagedResponse<BinaryData>> flux =
                                    (continuationToken == null)
                                            ? pagedFluxResponse.byPage().take(1)
                                            : pagedFluxResponse.byPage(continuationToken).take(1);
                            return flux.map(
                                    pagedResponse ->
                                            new PagedResponseBase<Void, ExtendedKeyUsage>(
                                                    pagedResponse.getRequest(),
                                                    pagedResponse.getStatusCode(),
                                                    pagedResponse.getHeaders(),
                                                    pagedResponse.getValue().stream()
                                                            .map(
                                                                    protocolMethodData ->
                                                                            protocolMethodData.toObject(
                                                                                    ExtendedKeyUsage.class))
                                                            .collect(Collectors.toList()),
                                                    pagedResponse.getContinuationToken(),
                                                    null));
                        });
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of status details for long running operations.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult, CodeSignOperationStatus> beginSign(
            String codeSigningAccountName,
            String certificateProfileName,
            CodeSigningSubmissionOptions codeSigningSubmissionOptions) {
        // Generated convenience method for beginSignWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginSignWithModelAsync(
                codeSigningAccountName,
                certificateProfileName,
                BinaryData.fromObject(codeSigningSubmissionOptions),
                requestOptions);
    }
}
