// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.codesigning.implementation;

import com.azure.codesigning.CodeSigningServiceVersion;
import com.azure.codesigning.models.CodeSignOperationStatus;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.experimental.models.PollResult;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.PollingStrategyOptions;
import com.azure.core.util.polling.SyncPoller;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.TypeReference;
import java.time.Duration;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/** Initializes a new instance of the CodeSigningClient type. */
public final class CodeSigningClientImpl {
    /** The proxy service used to perform REST calls. */
    private final CodeSigningClientService service;

    /** The Azure region wherein requests for signing will be sent. */
    private final String region;

    /**
     * Gets The Azure region wherein requests for signing will be sent.
     *
     * @return the region value.
     */
    public String getRegion() {
        return this.region;
    }

    /** Service version. */
    private final CodeSigningServiceVersion serviceVersion;

    /**
     * Gets Service version.
     *
     * @return the serviceVersion value.
     */
    public CodeSigningServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /** The HTTP pipeline to send requests through. */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     *
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /** The serializer to serialize an object into a string. */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     *
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of CodeSigningClient client.
     *
     * @param region The Azure region wherein requests for signing will be sent.
     * @param serviceVersion Service version.
     */
    public CodeSigningClientImpl(String region, CodeSigningServiceVersion serviceVersion) {
        this(
                new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
                JacksonAdapter.createDefaultSerializerAdapter(),
                region,
                serviceVersion);
    }

    /**
     * Initializes an instance of CodeSigningClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param region The Azure region wherein requests for signing will be sent.
     * @param serviceVersion Service version.
     */
    public CodeSigningClientImpl(HttpPipeline httpPipeline, String region, CodeSigningServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), region, serviceVersion);
    }

    /**
     * Initializes an instance of CodeSigningClient client.
     *
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param region The Azure region wherein requests for signing will be sent.
     * @param serviceVersion Service version.
     */
    public CodeSigningClientImpl(
            HttpPipeline httpPipeline,
            SerializerAdapter serializerAdapter,
            String region,
            CodeSigningServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.region = region;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(CodeSigningClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for CodeSigningClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("https://{region}.codesigning.azure.net/")
    @ServiceInterface(name = "CodeSigningClient")
    public interface CodeSigningClientService {
        @Get("/codesigningaccounts/{codeSigningAccountName}/certificateprofiles/{certificateProfileName}/sign/rootcert")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSignRootCertificate(
                @HostParam("region") String region,
                @QueryParam("api-version") String apiVersion,
                @PathParam("codeSigningAccountName") String codeSigningAccountName,
                @PathParam("certificateProfileName") String certificateProfileName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/codesigningaccounts/{codeSigningAccountName}/certificateprofiles/{certificateProfileName}/sign/rootcert")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSignRootCertificateSync(
                @HostParam("region") String region,
                @QueryParam("api-version") String apiVersion,
                @PathParam("codeSigningAccountName") String codeSigningAccountName,
                @PathParam("certificateProfileName") String certificateProfileName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/codesigningaccounts/{codeSigningAccountName}/certificateprofiles/{certificateProfileName}/sign/eku")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSignEkus(
                @HostParam("region") String region,
                @QueryParam("api-version") String apiVersion,
                @PathParam("codeSigningAccountName") String codeSigningAccountName,
                @PathParam("certificateProfileName") String certificateProfileName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("/codesigningaccounts/{codeSigningAccountName}/certificateprofiles/{certificateProfileName}/sign/eku")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSignEkusSync(
                @HostParam("region") String region,
                @QueryParam("api-version") String apiVersion,
                @PathParam("codeSigningAccountName") String codeSigningAccountName,
                @PathParam("certificateProfileName") String certificateProfileName,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Post("/codesigningaccounts/{codeSigningAccountName}/certificateprofiles/{certificateProfileName}:sign")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> sign(
                @HostParam("region") String region,
                @QueryParam("api-version") String apiVersion,
                @PathParam("codeSigningAccountName") String codeSigningAccountName,
                @PathParam("certificateProfileName") String certificateProfileName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData codeSigningSubmissionOptions,
                RequestOptions requestOptions,
                Context context);

        @Post("/codesigningaccounts/{codeSigningAccountName}/certificateprofiles/{certificateProfileName}:sign")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> signSync(
                @HostParam("region") String region,
                @QueryParam("api-version") String apiVersion,
                @PathParam("codeSigningAccountName") String codeSigningAccountName,
                @PathParam("certificateProfileName") String certificateProfileName,
                @HeaderParam("accept") String accept,
                @BodyParam("application/json") BinaryData codeSigningSubmissionOptions,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> listSignEkusNext(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("region") String region,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);

        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(
                value = ClientAuthenticationException.class,
                code = {401})
        @UnexpectedResponseExceptionType(
                value = ResourceNotFoundException.class,
                code = {404})
        @UnexpectedResponseExceptionType(
                value = ResourceModifiedException.class,
                code = {409})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> listSignEkusNextSync(
                @PathParam(value = "nextLink", encoded = true) String nextLink,
                @HostParam("region") String region,
                @HeaderParam("accept") String accept,
                RequestOptions requestOptions,
                Context context);
    }

    /**
     * Gets the codesigning root certificate on the certificate chain for that account and profile name.
     *
     * <p>The root certificate is generated as part of the initial account creation and it is used to sign the bits for
     * the profile provided.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param codeSigningAccountName CodeSigning account name.
     * @param certificateProfileName Certificate profile name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSignRootCertificateWithResponseAsync(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        final String accept = "application/json, application/x-x509-ca-cert";
        return FluxUtil.withContext(
                context ->
                        service.getSignRootCertificate(
                                this.getRegion(),
                                this.getServiceVersion().getVersion(),
                                codeSigningAccountName,
                                certificateProfileName,
                                accept,
                                requestOptions,
                                context));
    }

    /**
     * Gets the codesigning root certificate on the certificate chain for that account and profile name.
     *
     * <p>The root certificate is generated as part of the initial account creation and it is used to sign the bits for
     * the profile provided.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * BinaryData
     * }</pre>
     *
     * @param codeSigningAccountName CodeSigning account name.
     * @param certificateProfileName Certificate profile name.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSignRootCertificateWithResponse(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        final String accept = "application/json, application/x-x509-ca-cert";
        return service.getSignRootCertificateSync(
                this.getRegion(),
                this.getServiceVersion().getVersion(),
                codeSigningAccountName,
                certificateProfileName,
                accept,
                requestOptions,
                Context.NONE);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>The list of extended key usages are used to determine the purpose of the certificate usage as part of the
     * codesigning operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSignEkusSinglePageAsync(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listSignEkus(
                                        this.getRegion(),
                                        this.getServiceVersion().getVersion(),
                                        codeSigningAccountName,
                                        certificateProfileName,
                                        accept,
                                        requestOptions,
                                        context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>The list of extended key usages are used to determine the purpose of the certificate usage as part of the
     * codesigning operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedFlux<BinaryData> listSignEkusAsync(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedFlux<>(
                () -> listSignEkusSinglePageAsync(codeSigningAccountName, certificateProfileName, requestOptions),
                nextLink -> listSignEkusNextSinglePageAsync(nextLink, requestOptionsForNextPage));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>The list of extended key usages are used to determine the purpose of the certificate usage as part of the
     * codesigning operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSignEkusSinglePage(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listSignEkusSync(
                        this.getRegion(),
                        this.getServiceVersion().getVersion(),
                        codeSigningAccountName,
                        certificateProfileName,
                        accept,
                        requestOptions,
                        Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>The list of extended key usages are used to determine the purpose of the certificate usage as part of the
     * codesigning operation.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<BinaryData> listSignEkus(
            String codeSigningAccountName, String certificateProfileName, RequestOptions requestOptions) {
        RequestOptions requestOptionsForNextPage = new RequestOptions();
        requestOptionsForNextPage.setContext(
                requestOptions != null && requestOptions.getContext() != null
                        ? requestOptions.getContext()
                        : Context.NONE);
        return new PagedIterable<>(
                () -> listSignEkusSinglePage(codeSigningAccountName, certificateProfileName, requestOptions),
                nextLink -> listSignEkusNextSinglePage(nextLink, requestOptionsForNextPage));
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status details for long running operations along with {@link Response} on successful completion of {@link
     *     Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BinaryData>> signWithResponseAsync(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                context ->
                        service.sign(
                                this.getRegion(),
                                this.getServiceVersion().getVersion(),
                                codeSigningAccountName,
                                certificateProfileName,
                                accept,
                                codeSigningSubmissionOptions,
                                requestOptions,
                                context));
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return status details for long running operations along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> signWithResponse(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.signSync(
                this.getRegion(),
                this.getServiceVersion().getVersion(),
                codeSigningAccountName,
                certificateProfileName,
                accept,
                codeSigningSubmissionOptions,
                requestOptions,
                Context.NONE);
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginSignAsync(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () ->
                        this.signWithResponseAsync(
                                codeSigningAccountName,
                                certificateProfileName,
                                codeSigningSubmissionOptions,
                                requestOptions),
                new com.azure.core.experimental.util.polling.OperationLocationPollingStrategy<>(
                        new PollingStrategyOptions(this.getHttpPipeline())
                                .setEndpoint(null)
                                .setContext(
                                        requestOptions != null && requestOptions.getContext() != null
                                                ? requestOptions.getContext()
                                                : Context.NONE)),
                TypeReference.createInstance(BinaryData.class),
                TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<BinaryData, BinaryData> beginSign(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        return SyncPoller.createPoller(
                Duration.ofSeconds(1),
                () ->
                        this.signWithResponse(
                                codeSigningAccountName,
                                certificateProfileName,
                                codeSigningSubmissionOptions,
                                requestOptions),
                new com.azure.core.experimental.util.polling.SyncOperationLocationPollingStrategy<>(
                        new PollingStrategyOptions(this.getHttpPipeline())
                                .setEndpoint(null)
                                .setContext(
                                        requestOptions != null && requestOptions.getContext() != null
                                                ? requestOptions.getContext()
                                                : Context.NONE)),
                TypeReference.createInstance(BinaryData.class),
                TypeReference.createInstance(BinaryData.class));
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<PollResult, CodeSignOperationStatus> beginSignWithModelAsync(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        return PollerFlux.create(
                Duration.ofSeconds(1),
                () ->
                        this.signWithResponseAsync(
                                codeSigningAccountName,
                                certificateProfileName,
                                codeSigningSubmissionOptions,
                                requestOptions),
                new com.azure.core.experimental.util.polling.OperationLocationPollingStrategy<>(
                        new PollingStrategyOptions(this.getHttpPipeline())
                                .setEndpoint(null)
                                .setContext(
                                        requestOptions != null && requestOptions.getContext() != null
                                                ? requestOptions.getContext()
                                                : Context.NONE)),
                TypeReference.createInstance(PollResult.class),
                TypeReference.createInstance(CodeSignOperationStatus.class));
    }

    /**
     * Submit a codesign operation.
     *
     * <p>Submit a codesign operation under the created codesign account and profile name provided.
     *
     * <p><strong>Request Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     signatureAlgorithm: String(RS256/RS384/RS512/PS256/PS384/PS512/ES256/ES384/ES512/ES256K) (Required)
     *     digest: byte[] (Required)
     *     fileHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     *     authenticodeHashList (Optional): [
     *         byte[] (Optional)
     *     ]
     * }
     * }</pre>
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     id: String (Required)
     *     status: String (Required)
     *     error (Optional): {
     *         code: String (Required)
     *         message: String (Required)
     *         target: String (Optional)
     *         details (Optional): [
     *             (recursive schema, see above)
     *         ]
     *         innererror (Optional): {
     *             code: String (Optional)
     *             innererror (Optional): (recursive schema, see innererror above)
     *         }
     *     }
     * }
     * }</pre>
     *
     * @param codeSigningAccountName Azure CodeSigning account name.
     * @param certificateProfileName Azure Codesigning certificate profile name under a codesign account.
     * @param codeSigningSubmissionOptions The codesign request information to be signed by the service.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link SyncPoller} for polling of status details for long running operations.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult, CodeSignOperationStatus> beginSignWithModel(
            String codeSigningAccountName,
            String certificateProfileName,
            BinaryData codeSigningSubmissionOptions,
            RequestOptions requestOptions) {
        return SyncPoller.createPoller(
                Duration.ofSeconds(1),
                () ->
                        this.signWithResponse(
                                codeSigningAccountName,
                                certificateProfileName,
                                codeSigningSubmissionOptions,
                                requestOptions),
                new com.azure.core.experimental.util.polling.SyncOperationLocationPollingStrategy<>(
                        new PollingStrategyOptions(this.getHttpPipeline())
                                .setEndpoint(null)
                                .setContext(
                                        requestOptions != null && requestOptions.getContext() != null
                                                ? requestOptions.getContext()
                                                : Context.NONE)),
                TypeReference.createInstance(PollResult.class),
                TypeReference.createInstance(CodeSignOperationStatus.class));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse} on successful completion of
     *     {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<BinaryData>> listSignEkusNextSinglePageAsync(
            String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(
                        context ->
                                service.listSignEkusNext(nextLink, this.getRegion(), accept, requestOptions, context))
                .map(
                        res ->
                                new PagedResponseBase<>(
                                        res.getRequest(),
                                        res.getStatusCode(),
                                        res.getHeaders(),
                                        getValues(res.getValue(), "value"),
                                        getNextLink(res.getValue(), "nextLink"),
                                        null));
    }

    /**
     * Gets a list of extended key usage object identifiers that are allowed for this account and profile combination.
     *
     * <p>Get the next page of items.
     *
     * <p><strong>Response Body Schema</strong>
     *
     * <pre>{@code
     * {
     *     ekus (Required): [
     *         String (Required)
     *     ]
     * }
     * }</pre>
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return paged collection of ExtendedKeyUsage items along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<BinaryData> listSignEkusNextSinglePage(String nextLink, RequestOptions requestOptions) {
        final String accept = "application/json";
        Response<BinaryData> res =
                service.listSignEkusNextSync(nextLink, this.getRegion(), accept, requestOptions, Context.NONE);
        return new PagedResponseBase<>(
                res.getRequest(),
                res.getStatusCode(),
                res.getHeaders(),
                getValues(res.getValue(), "value"),
                getNextLink(res.getValue(), "nextLink"),
                null);
    }

    private List<BinaryData> getValues(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            List<?> values = (List<?>) obj.get(path);
            return values.stream().map(BinaryData::fromObject).collect(Collectors.toList());
        } catch (RuntimeException e) {
            return null;
        }
    }

    private String getNextLink(BinaryData binaryData, String path) {
        try {
            Map<?, ?> obj = binaryData.toObject(Map.class);
            return (String) obj.get(path);
        } catch (RuntimeException e) {
            return null;
        }
    }
}
