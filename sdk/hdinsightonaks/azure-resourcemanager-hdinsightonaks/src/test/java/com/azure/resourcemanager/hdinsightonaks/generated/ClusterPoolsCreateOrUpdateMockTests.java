// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsightonaks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsightonaks.HDInsightOnAksManager;
import com.azure.resourcemanager.hdinsightonaks.models.ClusterPool;
import com.azure.resourcemanager.hdinsightonaks.models.ClusterPoolResourcePropertiesClusterPoolProfile;
import com.azure.resourcemanager.hdinsightonaks.models.ClusterPoolResourcePropertiesComputeProfile;
import com.azure.resourcemanager.hdinsightonaks.models.ClusterPoolResourcePropertiesLogAnalyticsProfile;
import com.azure.resourcemanager.hdinsightonaks.models.ClusterPoolResourcePropertiesNetworkProfile;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"deploymentId\":\"rwrbi\",\"managedResourceGroupName\":\"ktalywjhhgdnhxms\",\"aksManagedResourceGroupName\":\"fomiloxgg\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"fi\"},\"computeProfile\":{\"vmSize\":\"ndieuzaofj\",\"count\":1025987002},\"aksClusterProfile\":{\"aksClusterResourceId\":\"yysfgdot\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"biipuip\",\"msiClientId\":\"oqonma\",\"msiObjectId\":\"jeknizshq\"},\"aksVersion\":\"impevf\"},\"networkProfile\":{\"subnetId\":\"b\"},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"lbywdxsm\"},\"status\":\"cwrwfs\"},\"location\":\"fnynszqujizdvoqy\",\"tags\":{\"bblgyavut\":\"yo\",\"ksbpimlqoljx\":\"thjoxoism\",\"fgcviz\":\"cgxxlxs\",\"jub\":\"zdwlvwlyoupfgfb\"},\"id\":\"yhgk\",\"name\":\"minsgowzf\",\"type\":\"tsttktlahbq\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HDInsightOnAksManager manager =
            HDInsightOnAksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response =
            manager
                .clusterPools()
                .define("bqgzslesjcbhern")
                .withRegion("vwpklvxwmygdxp")
                .withExistingResourceGroup("kq")
                .withTags(mapOf("nnbj", "chisze", "xconfozauors", "rxgibbd"))
                .withManagedResourceGroupName("quwrbehwag")
                .withClusterPoolProfile(
                    new ClusterPoolResourcePropertiesClusterPoolProfile().withClusterPoolVersion("drjf"))
                .withComputeProfile(new ClusterPoolResourcePropertiesComputeProfile().withVmSize("tac"))
                .withNetworkProfile(new ClusterPoolResourcePropertiesNetworkProfile().withSubnetId("enr"))
                .withLogAnalyticsProfile(
                    new ClusterPoolResourcePropertiesLogAnalyticsProfile()
                        .withEnabled(false)
                        .withWorkspaceId("ujbazpjuohminyfl"))
                .create();

        Assertions.assertEquals("fnynszqujizdvoqy", response.location());
        Assertions.assertEquals("yo", response.tags().get("bblgyavut"));
        Assertions.assertEquals("ktalywjhhgdnhxms", response.managedResourceGroupName());
        Assertions.assertEquals("fi", response.clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("ndieuzaofj", response.computeProfile().vmSize());
        Assertions.assertEquals("b", response.networkProfile().subnetId());
        Assertions.assertEquals(false, response.logAnalyticsProfile().enabled());
        Assertions.assertEquals("lbywdxsm", response.logAnalyticsProfile().workspaceId());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
