// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsightonaks.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.hdinsightonaks.HDInsightOnAksManager;
import com.azure.resourcemanager.hdinsightonaks.models.ClusterPool;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClusterPoolsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"provisioningState\":\"Canceled\",\"deploymentId\":\"ycnunvjsrtk\",\"managedResourceGroupName\":\"wnopqgikyzirtx\",\"aksManagedResourceGroupName\":\"uxzejntpsew\",\"clusterPoolProfile\":{\"clusterPoolVersion\":\"oi\"},\"computeProfile\":{\"vmSize\":\"qukrydxt\",\"count\":2118513593},\"aksClusterProfile\":{\"aksClusterResourceId\":\"xorgg\",\"aksClusterAgentPoolIdentityProfile\":{\"msiResourceId\":\"hyaomtbghhavgr\",\"msiClientId\":\"kffovjzhpjbibgjm\",\"msiObjectId\":\"xumvfcluyovw\"},\"aksVersion\":\"bkfezzxscyhwzdgi\"},\"networkProfile\":{\"subnetId\":\"jbzbomvzzbtdcq\"},\"logAnalyticsProfile\":{\"enabled\":false,\"workspaceId\":\"yujviylwdshfssn\"},\"status\":\"gy\"},\"location\":\"rymsgaojfmw\",\"tags\":{\"hirctymoxoftpipi\":\"tmr\",\"lihhyuspskasdvlm\":\"yczuhxacpq\"},\"id\":\"wdgzxulucv\",\"name\":\"amrsreuzv\",\"type\":\"urisjnhnytxifqj\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        HDInsightOnAksManager manager =
            HDInsightOnAksManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ClusterPool response =
            manager
                .clusterPools()
                .getByResourceGroupWithResponse("pdso", "bshrnsvbuswd", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("rymsgaojfmw", response.location());
        Assertions.assertEquals("tmr", response.tags().get("hirctymoxoftpipi"));
        Assertions.assertEquals("wnopqgikyzirtx", response.managedResourceGroupName());
        Assertions.assertEquals("oi", response.clusterPoolProfile().clusterPoolVersion());
        Assertions.assertEquals("qukrydxt", response.computeProfile().vmSize());
        Assertions.assertEquals("jbzbomvzzbtdcq", response.networkProfile().subnetId());
        Assertions.assertEquals(false, response.logAnalyticsProfile().enabled());
        Assertions.assertEquals("yujviylwdshfssn", response.logAnalyticsProfile().workspaceId());
    }
}
