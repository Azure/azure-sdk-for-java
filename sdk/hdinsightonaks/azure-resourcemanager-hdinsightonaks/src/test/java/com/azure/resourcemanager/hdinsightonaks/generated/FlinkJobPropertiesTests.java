// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.hdinsightonaks.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.hdinsightonaks.models.Action;
import com.azure.resourcemanager.hdinsightonaks.models.FlinkJobProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class FlinkJobPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        FlinkJobProperties model =
            BinaryData
                .fromString(
                    "{\"jobType\":\"FlinkJob\",\"jobName\":\"tsbwtovvtgse\",\"jobJarDirectory\":\"qfi\",\"jarName\":\"x\",\"entryClass\":\"npirgnepttw\",\"args\":\"sniffc\",\"savePointName\":\"qnrojlpijnkrxfrd\",\"action\":\"CANCEL\",\"flinkConfiguration\":{\"ozqyzh\":\"tizzronasxif\"},\"jobId\":\"wesgogczh\",\"status\":\"nxkrlgnyhmossxkk\",\"jobOutput\":\"h\",\"actionResult\":\"gh\",\"lastSavePoint\":\"bdhqxvcxgf\"}")
                .toObject(FlinkJobProperties.class);
        Assertions.assertEquals("tsbwtovvtgse", model.jobName());
        Assertions.assertEquals("qfi", model.jobJarDirectory());
        Assertions.assertEquals("x", model.jarName());
        Assertions.assertEquals("npirgnepttw", model.entryClass());
        Assertions.assertEquals("sniffc", model.args());
        Assertions.assertEquals("qnrojlpijnkrxfrd", model.savePointName());
        Assertions.assertEquals(Action.CANCEL, model.action());
        Assertions.assertEquals("tizzronasxif", model.flinkConfiguration().get("ozqyzh"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        FlinkJobProperties model =
            new FlinkJobProperties()
                .withJobName("tsbwtovvtgse")
                .withJobJarDirectory("qfi")
                .withJarName("x")
                .withEntryClass("npirgnepttw")
                .withArgs("sniffc")
                .withSavePointName("qnrojlpijnkrxfrd")
                .withAction(Action.CANCEL)
                .withFlinkConfiguration(mapOf("ozqyzh", "tizzronasxif"));
        model = BinaryData.fromObject(model).toObject(FlinkJobProperties.class);
        Assertions.assertEquals("tsbwtovvtgse", model.jobName());
        Assertions.assertEquals("qfi", model.jobJarDirectory());
        Assertions.assertEquals("x", model.jarName());
        Assertions.assertEquals("npirgnepttw", model.entryClass());
        Assertions.assertEquals("sniffc", model.args());
        Assertions.assertEquals("qnrojlpijnkrxfrd", model.savePointName());
        Assertions.assertEquals(Action.CANCEL, model.action());
        Assertions.assertEquals("tizzronasxif", model.flinkConfiguration().get("ozqyzh"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
