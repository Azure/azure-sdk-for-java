// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.extendedlocation.fluent.models.CustomLocationInner;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationPropertiesAuthentication;
import com.azure.resourcemanager.extendedlocation.models.HostType;
import com.azure.resourcemanager.extendedlocation.models.Identity;
import com.azure.resourcemanager.extendedlocation.models.ResourceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class CustomLocationInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomLocationInner model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"f\",\"tenantId\":\"rwzoxxjtfelluwf\",\"type\":\"SystemAssigned\"},\"properties\":{\"authentication\":{\"type\":\"eqfpj\",\"value\":\"lxofpdvhpfxxypin\"},\"clusterExtensionIds\":[\"ayhuy\",\"bkpodepooginuv\",\"mihe\",\"gnarxzxtheo\"],\"displayName\":\"si\",\"hostResourceId\":\"evcciqihnhun\",\"hostType\":\"Kubernetes\",\"namespace\":\"zrnf\",\"provisioningState\":\"xgispemvtzfkufu\"},\"location\":\"jofxqe\",\"tags\":{\"jqul\":\"aeqjhqjbasvms\"},\"id\":\"gsntnbybkzgcwr\",\"name\":\"clxxwrljdo\",\"type\":\"skcqvkocrcjd\"}")
            .toObject(CustomLocationInner.class);
        Assertions.assertEquals("jofxqe", model.location());
        Assertions.assertEquals("aeqjhqjbasvms", model.tags().get("jqul"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("eqfpj", model.authentication().type());
        Assertions.assertEquals("lxofpdvhpfxxypin", model.authentication().value());
        Assertions.assertEquals("ayhuy", model.clusterExtensionIds().get(0));
        Assertions.assertEquals("si", model.displayName());
        Assertions.assertEquals("evcciqihnhun", model.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, model.hostType());
        Assertions.assertEquals("zrnf", model.namespace());
        Assertions.assertEquals("xgispemvtzfkufu", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomLocationInner model = new CustomLocationInner().withLocation("jofxqe")
            .withTags(mapOf("jqul", "aeqjhqjbasvms"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withAuthentication(
                new CustomLocationPropertiesAuthentication().withType("eqfpj").withValue("lxofpdvhpfxxypin"))
            .withClusterExtensionIds(Arrays.asList("ayhuy", "bkpodepooginuv", "mihe", "gnarxzxtheo"))
            .withDisplayName("si")
            .withHostResourceId("evcciqihnhun")
            .withHostType(HostType.KUBERNETES)
            .withNamespace("zrnf")
            .withProvisioningState("xgispemvtzfkufu");
        model = BinaryData.fromObject(model).toObject(CustomLocationInner.class);
        Assertions.assertEquals("jofxqe", model.location());
        Assertions.assertEquals("aeqjhqjbasvms", model.tags().get("jqul"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, model.identity().type());
        Assertions.assertEquals("eqfpj", model.authentication().type());
        Assertions.assertEquals("lxofpdvhpfxxypin", model.authentication().value());
        Assertions.assertEquals("ayhuy", model.clusterExtensionIds().get(0));
        Assertions.assertEquals("si", model.displayName());
        Assertions.assertEquals("evcciqihnhun", model.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, model.hostType());
        Assertions.assertEquals("zrnf", model.namespace());
        Assertions.assertEquals("xgispemvtzfkufu", model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
