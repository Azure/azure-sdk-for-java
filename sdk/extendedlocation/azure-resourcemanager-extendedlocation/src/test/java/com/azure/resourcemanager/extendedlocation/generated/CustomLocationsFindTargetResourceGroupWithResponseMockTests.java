// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.extendedlocation.CustomLocationsManager;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationFindTargetResourceGroupProperties;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationFindTargetResourceGroupResult;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CustomLocationsFindTargetResourceGroupWithResponseMockTests {
    @Test
    public void testFindTargetResourceGroupWithResponse() throws Exception {
        String responseStr = "{\"matchedResourceSyncRule\":\"dckzywbiexz\",\"targetResourceGroup\":\"yueaxibxujwb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomLocationsManager manager = CustomLocationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomLocationFindTargetResourceGroupResult response = manager.customLocations()
            .findTargetResourceGroupWithResponse("qidybyx", "zfcl",
                new CustomLocationFindTargetResourceGroupProperties().withLabels(
                    mapOf("lfktsths", "xdbabphlwr", "twwrqp", "cocmnyyaztt")),
                com.azure.core.util.Context.NONE)
            .getValue();

    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
