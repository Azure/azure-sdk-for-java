// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.extendedlocation.CustomLocationsManager;
import com.azure.resourcemanager.extendedlocation.models.CustomLocation;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationPropertiesAuthentication;
import com.azure.resourcemanager.extendedlocation.models.HostType;
import com.azure.resourcemanager.extendedlocation.models.Identity;
import com.azure.resourcemanager.extendedlocation.models.ResourceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CustomLocationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"njbkcnxdhbttkph\",\"tenantId\":\"pnvjtoqnermclf\",\"type\":\"SystemAssigned\"},\"properties\":{\"authentication\":{\"type\":\"uscrpabgyepsb\",\"value\":\"azqugxywpmueefj\"},\"clusterExtensionIds\":[\"qkqujidsu\",\"onobglaocqx\"],\"displayName\":\"cmgyud\",\"hostResourceId\":\"tlmoyrx\",\"hostType\":\"Kubernetes\",\"namespace\":\"dw\",\"provisioningState\":\"Succeeded\"},\"location\":\"lhrxsbkyvpyc\",\"tags\":{\"p\":\"z\",\"hhseyv\":\"kafkuwbcrnwbm\",\"tslhspkdeem\":\"us\"},\"id\":\"ofmxagkvtmelmqkr\",\"name\":\"ahvljuaha\",\"type\":\"uhcdhm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomLocationsManager manager = CustomLocationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomLocation response = manager.customLocations()
            .define("zjancuxr")
            .withRegion("nyqupedeojnabck")
            .withExistingResourceGroup("qwalmuzyoxaepd")
            .withTags(mapOf("ie", "txp", "jdhtldwkyzxu", "tfhvpesapskrdqmh", "svlxotogtwrup", "tkncwsc"))
            .withIdentity(new Identity().withType(ResourceIdentityType.SYSTEM_ASSIGNED))
            .withAuthentication(new CustomLocationPropertiesAuthentication().withType("pzxbz").withValue("zabglcuhxwt"))
            .withClusterExtensionIds(Arrays.asList("qik", "bbovplwzbhvgyugu", "svmkfssxquk", "fpl"))
            .withDisplayName("gsxnkjzkdeslpv")
            .withHostResourceId("pwiyig")
            .withHostType(HostType.KUBERNETES)
            .withNamespace("dwzbaiue")
            .withProvisioningState("a")
            .create();

        Assertions.assertEquals("lhrxsbkyvpyc", response.location());
        Assertions.assertEquals("z", response.tags().get("p"));
        Assertions.assertEquals(ResourceIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals("uscrpabgyepsb", response.authentication().type());
        Assertions.assertEquals("azqugxywpmueefj", response.authentication().value());
        Assertions.assertEquals("qkqujidsu", response.clusterExtensionIds().get(0));
        Assertions.assertEquals("cmgyud", response.displayName());
        Assertions.assertEquals("tlmoyrx", response.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, response.hostType());
        Assertions.assertEquals("dw", response.namespace());
        Assertions.assertEquals("Succeeded", response.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
