// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.extendedlocation.CustomLocationsManager;
import com.azure.resourcemanager.extendedlocation.models.CustomLocation;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationPropertiesAuthentication;
import com.azure.resourcemanager.extendedlocation.models.HostType;
import com.azure.resourcemanager.extendedlocation.models.Identity;
import com.azure.resourcemanager.extendedlocation.models.ResourceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CustomLocationsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"identity\":{\"principalId\":\"ivfsnk\",\"tenantId\":\"uctqhjfbe\",\"type\":\"None\"},\"properties\":{\"authentication\":{\"type\":\"rfuwutt\",\"value\":\"fvjrbirphxepcy\"},\"clusterExtensionIds\":[\"fnljky\",\"xjvuujqgidokg\"],\"displayName\":\"jyoxgvclt\",\"hostResourceId\":\"sncghkjeszz\",\"hostType\":\"Kubernetes\",\"namespace\":\"htxfvgxbfsmxnehm\",\"provisioningState\":\"Succeeded\"},\"location\":\"odebfqkkrbmpu\",\"tags\":{\"lzlfbxzpuz\":\"iw\",\"yydhibnuqqk\":\"cispnqzahmgkbr\",\"drgvtqagn\":\"ik\"},\"id\":\"uynhijg\",\"name\":\"mebf\",\"type\":\"iarbutrcvpna\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomLocationsManager manager = CustomLocationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        CustomLocation response = manager.customLocations()
            .define("wburvjxxjnspydpt")
            .withRegion("ixzbinjeputtmryw")
            .withExistingResourceGroup("gigr")
            .withTags(mapOf("yx", "oqftiyqzrnkcq", "nwvlryavwhheunmm", "whzlsicohoq", "koklya", "hgyxzkonoc",
                "ewrmjmwvvjektc", "uconuqszfkbey"))
            .withIdentity(new Identity().withType(ResourceIdentityType.NONE))
            .withAuthentication(
                new CustomLocationPropertiesAuthentication().withType("yxoegukgjnp").withValue("cgygev"))
            .withClusterExtensionIds(Arrays.asList("typmrbpizcdrqjsd", "ydnfyhxdeoejz", "cwif", "jttgzf"))
            .withDisplayName("shcbkhajdeyeamdp")
            .withHostResourceId("g")
            .withHostType(HostType.KUBERNETES)
            .withNamespace("uxwgipwho")
            .withProvisioningState("wkgshwa")
            .create();

        Assertions.assertEquals("odebfqkkrbmpu", response.location());
        Assertions.assertEquals("iw", response.tags().get("lzlfbxzpuz"));
        Assertions.assertEquals(ResourceIdentityType.NONE, response.identity().type());
        Assertions.assertEquals("rfuwutt", response.authentication().type());
        Assertions.assertEquals("fvjrbirphxepcy", response.authentication().value());
        Assertions.assertEquals("fnljky", response.clusterExtensionIds().get(0));
        Assertions.assertEquals("jyoxgvclt", response.displayName());
        Assertions.assertEquals("sncghkjeszz", response.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, response.hostType());
        Assertions.assertEquals("htxfvgxbfsmxnehm", response.namespace());
        Assertions.assertEquals("Succeeded", response.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
