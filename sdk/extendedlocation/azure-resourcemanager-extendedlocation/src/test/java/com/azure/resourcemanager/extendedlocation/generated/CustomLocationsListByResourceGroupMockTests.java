// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.extendedlocation.CustomLocationsManager;
import com.azure.resourcemanager.extendedlocation.models.CustomLocation;
import com.azure.resourcemanager.extendedlocation.models.HostType;
import com.azure.resourcemanager.extendedlocation.models.ResourceIdentityType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CustomLocationsListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"identity\":{\"principalId\":\"bzoggigrx\",\"tenantId\":\"ur\",\"type\":\"None\"},\"properties\":{\"authentication\":{\"type\":\"spyd\",\"value\":\"koen\"},\"clusterExtensionIds\":[\"knvudwtiukb\",\"dng\",\"pocipazyxoegu\"],\"displayName\":\"jnpiucgyg\",\"hostResourceId\":\"qzntypm\",\"hostType\":\"Kubernetes\",\"namespace\":\"zcdrqjsdpydnfyhx\",\"provisioningState\":\"oejzi\"},\"location\":\"ifsjttgzfbishcb\",\"tags\":{\"alpbuxwgipwhon\":\"jdeyeamdpha\",\"kix\":\"wkgshwa\",\"eputtmrywnuzoqf\":\"bin\",\"qvyxlwhzlsicoho\":\"iyqzrnk\"},\"id\":\"qnwvlrya\",\"name\":\"w\",\"type\":\"heun\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomLocationsManager manager = CustomLocationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<CustomLocation> response
            = manager.customLocations().listByResourceGroup("ithlvmezyvshxm", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ifsjttgzfbishcb", response.iterator().next().location());
        Assertions.assertEquals("jdeyeamdpha", response.iterator().next().tags().get("alpbuxwgipwhon"));
        Assertions.assertEquals(ResourceIdentityType.NONE, response.iterator().next().identity().type());
        Assertions.assertEquals("spyd", response.iterator().next().authentication().type());
        Assertions.assertEquals("koen", response.iterator().next().authentication().value());
        Assertions.assertEquals("knvudwtiukb", response.iterator().next().clusterExtensionIds().get(0));
        Assertions.assertEquals("jnpiucgyg", response.iterator().next().displayName());
        Assertions.assertEquals("qzntypm", response.iterator().next().hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, response.iterator().next().hostType());
        Assertions.assertEquals("zcdrqjsdpydnfyhx", response.iterator().next().namespace());
        Assertions.assertEquals("oejzi", response.iterator().next().provisioningState());
    }
}
