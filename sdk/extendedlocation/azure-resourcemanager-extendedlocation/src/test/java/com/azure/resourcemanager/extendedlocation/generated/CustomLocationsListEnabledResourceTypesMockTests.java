// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.extendedlocation.CustomLocationsManager;
import com.azure.resourcemanager.extendedlocation.models.EnabledResourceType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class CustomLocationsListEnabledResourceTypesMockTests {
    @Test
    public void testListEnabledResourceTypes() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"clusterExtensionId\":\"kg\",\"extensionType\":\"auu\",\"typesMetadata\":[{\"apiVersion\":\"vxieduugidyj\",\"resourceProviderNamespace\":\"f\",\"resourceType\":\"aos\"},{\"apiVersion\":\"xc\",\"resourceProviderNamespace\":\"npc\",\"resourceType\":\"ocohslkevleg\"}]},\"id\":\"fbuhfmvfaxkffe\",\"name\":\"ithlvmezyvshxm\",\"type\":\"sbbzo\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        CustomLocationsManager manager = CustomLocationsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<EnabledResourceType> response = manager.customLocations()
            .listEnabledResourceTypes("kcciwwzjuqkhr", "ajiwkuo", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("kg", response.iterator().next().clusterExtensionId());
        Assertions.assertEquals("auu", response.iterator().next().extensionType());
        Assertions.assertEquals("vxieduugidyj", response.iterator().next().typesMetadata().get(0).apiVersion());
        Assertions.assertEquals("f", response.iterator().next().typesMetadata().get(0).resourceProviderNamespace());
        Assertions.assertEquals("aos", response.iterator().next().typesMetadata().get(0).resourceType());
    }
}
