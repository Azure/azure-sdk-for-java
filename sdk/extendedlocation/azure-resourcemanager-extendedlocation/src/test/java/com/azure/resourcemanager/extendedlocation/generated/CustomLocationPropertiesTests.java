// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.extendedlocation.fluent.models.CustomLocationProperties;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationPropertiesAuthentication;
import com.azure.resourcemanager.extendedlocation.models.HostType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class CustomLocationPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CustomLocationProperties model = BinaryData.fromString(
            "{\"authentication\":{\"type\":\"inqpjwnzll\",\"value\":\"mppeebvmgxs\"},\"clusterExtensionIds\":[\"yqduujit\",\"jczdzevndh\",\"rwpdappdsbdkvwrw\"],\"displayName\":\"eusnhutj\",\"hostResourceId\":\"tmrldhugjzzdatq\",\"hostType\":\"Kubernetes\",\"namespace\":\"dgeablgphu\",\"provisioningState\":\"cndvkaozwyiftyhx\"}")
            .toObject(CustomLocationProperties.class);
        Assertions.assertEquals("inqpjwnzll", model.authentication().type());
        Assertions.assertEquals("mppeebvmgxs", model.authentication().value());
        Assertions.assertEquals("yqduujit", model.clusterExtensionIds().get(0));
        Assertions.assertEquals("eusnhutj", model.displayName());
        Assertions.assertEquals("tmrldhugjzzdatq", model.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, model.hostType());
        Assertions.assertEquals("dgeablgphu", model.namespace());
        Assertions.assertEquals("cndvkaozwyiftyhx", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CustomLocationProperties model = new CustomLocationProperties()
            .withAuthentication(
                new CustomLocationPropertiesAuthentication().withType("inqpjwnzll").withValue("mppeebvmgxs"))
            .withClusterExtensionIds(Arrays.asList("yqduujit", "jczdzevndh", "rwpdappdsbdkvwrw"))
            .withDisplayName("eusnhutj")
            .withHostResourceId("tmrldhugjzzdatq")
            .withHostType(HostType.KUBERNETES)
            .withNamespace("dgeablgphu")
            .withProvisioningState("cndvkaozwyiftyhx");
        model = BinaryData.fromObject(model).toObject(CustomLocationProperties.class);
        Assertions.assertEquals("inqpjwnzll", model.authentication().type());
        Assertions.assertEquals("mppeebvmgxs", model.authentication().value());
        Assertions.assertEquals("yqduujit", model.clusterExtensionIds().get(0));
        Assertions.assertEquals("eusnhutj", model.displayName());
        Assertions.assertEquals("tmrldhugjzzdatq", model.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, model.hostType());
        Assertions.assertEquals("dgeablgphu", model.namespace());
        Assertions.assertEquals("cndvkaozwyiftyhx", model.provisioningState());
    }
}
