// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.extendedlocation.models.CustomLocationPropertiesAuthentication;
import com.azure.resourcemanager.extendedlocation.models.HostType;
import com.azure.resourcemanager.extendedlocation.models.Identity;
import com.azure.resourcemanager.extendedlocation.models.PatchableCustomLocations;
import com.azure.resourcemanager.extendedlocation.models.ResourceIdentityType;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class PatchableCustomLocationsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        PatchableCustomLocations model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"awxklr\",\"tenantId\":\"lwckbasyypnddhs\",\"type\":\"None\"},\"properties\":{\"authentication\":{\"type\":\"hejkotynqgou\",\"value\":\"ndlik\"},\"clusterExtensionIds\":[\"kgfg\",\"bmadgak\",\"qsrxybzqqed\"],\"displayName\":\"tbciqfouflmm\",\"hostResourceId\":\"zsm\",\"hostType\":\"Kubernetes\",\"namespace\":\"lougpbkw\",\"provisioningState\":\"utduqktapspwgcu\"},\"tags\":{\"bbjfddgmbmbexp\":\"umkdosvqwhbmd\",\"gbquxigj\":\"bhtqqrolfpfpsa\",\"lnerkujysvleju\":\"jgzjaoyfhrtx\",\"kcprbnw\":\"fqawrlyxw\"}}")
            .toObject(PatchableCustomLocations.class);
        Assertions.assertEquals(ResourceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("umkdosvqwhbmd", model.tags().get("bbjfddgmbmbexp"));
        Assertions.assertEquals("hejkotynqgou", model.authentication().type());
        Assertions.assertEquals("ndlik", model.authentication().value());
        Assertions.assertEquals("kgfg", model.clusterExtensionIds().get(0));
        Assertions.assertEquals("tbciqfouflmm", model.displayName());
        Assertions.assertEquals("zsm", model.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, model.hostType());
        Assertions.assertEquals("lougpbkw", model.namespace());
        Assertions.assertEquals("utduqktapspwgcu", model.provisioningState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        PatchableCustomLocations model
            = new PatchableCustomLocations().withIdentity(new Identity().withType(ResourceIdentityType.NONE))
                .withTags(mapOf("bbjfddgmbmbexp", "umkdosvqwhbmd", "gbquxigj", "bhtqqrolfpfpsa", "lnerkujysvleju",
                    "jgzjaoyfhrtx", "kcprbnw", "fqawrlyxw"))
                .withAuthentication(
                    new CustomLocationPropertiesAuthentication().withType("hejkotynqgou").withValue("ndlik"))
                .withClusterExtensionIds(Arrays.asList("kgfg", "bmadgak", "qsrxybzqqed"))
                .withDisplayName("tbciqfouflmm")
                .withHostResourceId("zsm")
                .withHostType(HostType.KUBERNETES)
                .withNamespace("lougpbkw")
                .withProvisioningState("utduqktapspwgcu");
        model = BinaryData.fromObject(model).toObject(PatchableCustomLocations.class);
        Assertions.assertEquals(ResourceIdentityType.NONE, model.identity().type());
        Assertions.assertEquals("umkdosvqwhbmd", model.tags().get("bbjfddgmbmbexp"));
        Assertions.assertEquals("hejkotynqgou", model.authentication().type());
        Assertions.assertEquals("ndlik", model.authentication().value());
        Assertions.assertEquals("kgfg", model.clusterExtensionIds().get(0));
        Assertions.assertEquals("tbciqfouflmm", model.displayName());
        Assertions.assertEquals("zsm", model.hostResourceId());
        Assertions.assertEquals(HostType.KUBERNETES, model.hostType());
        Assertions.assertEquals("lougpbkw", model.namespace());
        Assertions.assertEquals("utduqktapspwgcu", model.provisioningState());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
