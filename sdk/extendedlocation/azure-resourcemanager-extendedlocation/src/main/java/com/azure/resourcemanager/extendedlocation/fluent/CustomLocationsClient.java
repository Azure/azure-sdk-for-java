// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.extendedlocation.fluent.models.CustomLocationInner;
import com.azure.resourcemanager.extendedlocation.fluent.models.CustomLocationOperationInner;
import com.azure.resourcemanager.extendedlocation.fluent.models.EnabledResourceTypeInner;
import com.azure.resourcemanager.extendedlocation.models.PatchableCustomLocations;

/** An instance of this class provides access to all the operations defined in CustomLocationsClient. */
public interface CustomLocationsClient {
    /**
     * Lists all available Custom Locations operations.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists of Custom Locations operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomLocationOperationInner> listOperations();

    /**
     * Lists all available Custom Locations operations.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return lists of Custom Locations operations.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomLocationOperationInner> listOperations(Context context);

    /**
     * Gets a list of Custom Locations in the specified subscription. The operation returns properties of each Custom
     * Location.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Custom Locations in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomLocationInner> list();

    /**
     * Gets a list of Custom Locations in the specified subscription. The operation returns properties of each Custom
     * Location.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Custom Locations in the specified subscription.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomLocationInner> list(Context context);

    /**
     * Gets a list of Custom Locations in the specified subscription and resource group. The operation returns
     * properties of each Custom Location.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Custom Locations in the specified subscription and resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomLocationInner> listByResourceGroup(String resourceGroupName);

    /**
     * Gets a list of Custom Locations in the specified subscription and resource group. The operation returns
     * properties of each Custom Location.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of Custom Locations in the specified subscription and resource group.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<CustomLocationInner> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Gets the details of the customLocation with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the customLocation with a specified resource group and name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomLocationInner getByResourceGroup(String resourceGroupName, String resourceName);

    /**
     * Gets the details of the customLocation with a specified resource group and name.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the customLocation with a specified resource group and name.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CustomLocationInner> getByResourceGroupWithResponse(
        String resourceGroupName, String resourceName, Context context);

    /**
     * Creates or updates a Custom Location in the specified Subscription and Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param parameters Parameters supplied to create or update a Custom Location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return custom Locations definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<CustomLocationInner>, CustomLocationInner> beginCreateOrUpdate(
        String resourceGroupName, String resourceName, CustomLocationInner parameters);

    /**
     * Creates or updates a Custom Location in the specified Subscription and Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param parameters Parameters supplied to create or update a Custom Location.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return custom Locations definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<CustomLocationInner>, CustomLocationInner> beginCreateOrUpdate(
        String resourceGroupName, String resourceName, CustomLocationInner parameters, Context context);

    /**
     * Creates or updates a Custom Location in the specified Subscription and Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param parameters Parameters supplied to create or update a Custom Location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return custom Locations definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomLocationInner createOrUpdate(String resourceGroupName, String resourceName, CustomLocationInner parameters);

    /**
     * Creates or updates a Custom Location in the specified Subscription and Resource Group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param parameters Parameters supplied to create or update a Custom Location.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return custom Locations definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomLocationInner createOrUpdate(
        String resourceGroupName, String resourceName, CustomLocationInner parameters, Context context);

    /**
     * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription Id.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName);

    /**
     * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription Id.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(String resourceGroupName, String resourceName, Context context);

    /**
     * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription Id.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String resourceName);

    /**
     * Deletes the Custom Location with the specified Resource Name, Resource Group, and Subscription Id.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String resourceName, Context context);

    /**
     * Updates a Custom Location with the specified Resource Name in the specified Resource Group and Subscription.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param parameters The updatable fields of an existing Custom Location.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return custom Locations definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    CustomLocationInner update(String resourceGroupName, String resourceName, PatchableCustomLocations parameters);

    /**
     * Updates a Custom Location with the specified Resource Name in the specified Resource Group and Subscription.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param parameters The updatable fields of an existing Custom Location.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return custom Locations definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<CustomLocationInner> updateWithResponse(
        String resourceGroupName, String resourceName, PatchableCustomLocations parameters, Context context);

    /**
     * Gets the list of the Enabled Resource Types.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the Enabled Resource Types.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EnabledResourceTypeInner> listEnabledResourceTypes(String resourceGroupName, String resourceName);

    /**
     * Gets the list of the Enabled Resource Types.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the list of the Enabled Resource Types.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<EnabledResourceTypeInner> listEnabledResourceTypes(
        String resourceGroupName, String resourceName, Context context);

    /**
     * Gets the details of the Enabled Resource Type.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param enabledResourceTypeName Custom Locations Enabled Resource Type name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the Enabled Resource Type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    EnabledResourceTypeInner getEnabledResourceType(
        String resourceGroupName, String resourceName, String enabledResourceTypeName);

    /**
     * Gets the details of the Enabled Resource Type.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param resourceName Custom Locations name.
     * @param enabledResourceTypeName Custom Locations Enabled Resource Type name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the details of the Enabled Resource Type.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<EnabledResourceTypeInner> getEnabledResourceTypeWithResponse(
        String resourceGroupName, String resourceName, String enabledResourceTypeName, Context context);
}
