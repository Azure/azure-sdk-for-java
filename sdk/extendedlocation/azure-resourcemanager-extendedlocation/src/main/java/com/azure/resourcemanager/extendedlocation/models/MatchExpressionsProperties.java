// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Resource Sync Rules matchExpression property definition.
 */
@Fluent
public final class MatchExpressionsProperties implements JsonSerializable<MatchExpressionsProperties> {
    /*
     * Key is the label key that the selector applies to.
     */
    private String key;

    /*
     * The Operator field represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and
     * DoesNotExist.
     */
    private String operator;

    /*
     * The label value
     */
    private List<String> values;

    /**
     * Creates an instance of MatchExpressionsProperties class.
     */
    public MatchExpressionsProperties() {
    }

    /**
     * Get the key property: Key is the label key that the selector applies to.
     * 
     * @return the key value.
     */
    public String key() {
        return this.key;
    }

    /**
     * Set the key property: Key is the label key that the selector applies to.
     * 
     * @param key the key value to set.
     * @return the MatchExpressionsProperties object itself.
     */
    public MatchExpressionsProperties withKey(String key) {
        this.key = key;
        return this;
    }

    /**
     * Get the operator property: The Operator field represents a key's relationship to a set of values. Valid operators
     * are In, NotIn, Exists and DoesNotExist.
     * 
     * @return the operator value.
     */
    public String operator() {
        return this.operator;
    }

    /**
     * Set the operator property: The Operator field represents a key's relationship to a set of values. Valid operators
     * are In, NotIn, Exists and DoesNotExist.
     * 
     * @param operator the operator value to set.
     * @return the MatchExpressionsProperties object itself.
     */
    public MatchExpressionsProperties withOperator(String operator) {
        this.operator = operator;
        return this;
    }

    /**
     * Get the values property: The label value.
     * 
     * @return the values value.
     */
    public List<String> values() {
        return this.values;
    }

    /**
     * Set the values property: The label value.
     * 
     * @param values the values value to set.
     * @return the MatchExpressionsProperties object itself.
     */
    public MatchExpressionsProperties withValues(List<String> values) {
        this.values = values;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("key", this.key);
        jsonWriter.writeStringField("operator", this.operator);
        jsonWriter.writeArrayField("values", this.values, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MatchExpressionsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MatchExpressionsProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MatchExpressionsProperties.
     */
    public static MatchExpressionsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MatchExpressionsProperties deserializedMatchExpressionsProperties = new MatchExpressionsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("key".equals(fieldName)) {
                    deserializedMatchExpressionsProperties.key = reader.getString();
                } else if ("operator".equals(fieldName)) {
                    deserializedMatchExpressionsProperties.operator = reader.getString();
                } else if ("values".equals(fieldName)) {
                    List<String> values = reader.readArray(reader1 -> reader1.getString());
                    deserializedMatchExpressionsProperties.values = values;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMatchExpressionsProperties;
        });
    }
}
