// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.extendedlocation.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * The Find Target Resource Group operation request.
 */
@Fluent
public final class CustomLocationFindTargetResourceGroupProperties
    implements JsonSerializable<CustomLocationFindTargetResourceGroupProperties> {
    /*
     * Labels of the custom resource, this is a map of {key,value} pairs.
     */
    private Map<String, String> labels;

    /**
     * Creates an instance of CustomLocationFindTargetResourceGroupProperties class.
     */
    public CustomLocationFindTargetResourceGroupProperties() {
    }

    /**
     * Get the labels property: Labels of the custom resource, this is a map of {key,value} pairs.
     * 
     * @return the labels value.
     */
    public Map<String, String> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Labels of the custom resource, this is a map of {key,value} pairs.
     * 
     * @param labels the labels value to set.
     * @return the CustomLocationFindTargetResourceGroupProperties object itself.
     */
    public CustomLocationFindTargetResourceGroupProperties withLabels(Map<String, String> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("labels", this.labels, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CustomLocationFindTargetResourceGroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CustomLocationFindTargetResourceGroupProperties if the JsonReader was pointing to an
     * instance of it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CustomLocationFindTargetResourceGroupProperties.
     */
    public static CustomLocationFindTargetResourceGroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CustomLocationFindTargetResourceGroupProperties deserializedCustomLocationFindTargetResourceGroupProperties
                = new CustomLocationFindTargetResourceGroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("labels".equals(fieldName)) {
                    Map<String, String> labels = reader.readMap(reader1 -> reader1.getString());
                    deserializedCustomLocationFindTargetResourceGroupProperties.labels = labels;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCustomLocationFindTargetResourceGroupProperties;
        });
    }
}
