// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentSpnPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorPropertiesBaseWithAgent;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import com.azure.resourcemanager.migration.assessment.models.SqlCollector;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlCollectorOperationsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"agentProperties\":{\"id\":\"oanpohrvm\",\"version\":\"qr\",\"lastHeartbeatUtc\":\"2021-07-03T12:21:15Z\",\"spnDetails\":{\"authority\":\"vznllaslkskhjqj\",\"applicationId\":\"baihxjtgzg\",\"audience\":\"iywbqgro\",\"objectId\":\"bsfsgsae\",\"tenantId\":\"ldfmhljq\"}},\"discoverySiteId\":\"spmrjct\",\"createdTimestamp\":\"2021-11-03T18:45:02Z\",\"updatedTimestamp\":\"2021-11-06T12:27:19Z\",\"provisioningState\":\"Succeeded\"},\"id\":\"uhsx\",\"name\":\"znmgsdaluyckhefr\",\"type\":\"hs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SqlCollector response = manager.sqlCollectorOperations()
            .define("glqjoxtdahneaoov")
            .withExistingAssessmentProject("vxcgdhyhgoqgs", "yqyxyjrcbqpbis")
            .withProperties(new CollectorPropertiesBaseWithAgent().withProvisioningState(ProvisioningState.UPDATING)
                .withAgentProperties(new CollectorAgentPropertiesBase().withId("tivfwjlo")
                    .withVersion("ekfsrm")
                    .withLastHeartbeatUtc(OffsetDateTime.parse("2021-10-04T04:38:24Z"))
                    .withSpnDetails(new CollectorAgentSpnPropertiesBase().withAuthority("jvcfoczh")
                        .withApplicationId("ejov")
                        .withAudience("wxn")
                        .withObjectId("hhnoyrzaaoee")
                        .withTenantId("mjenvjeatea")))
                .withDiscoverySiteId("crxoxdj"))
            .create();

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("oanpohrvm", response.properties().agentProperties().id());
        Assertions.assertEquals("qr", response.properties().agentProperties().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T12:21:15Z"),
            response.properties().agentProperties().lastHeartbeatUtc());
        Assertions.assertEquals("vznllaslkskhjqj", response.properties().agentProperties().spnDetails().authority());
        Assertions.assertEquals("baihxjtgzg", response.properties().agentProperties().spnDetails().applicationId());
        Assertions.assertEquals("iywbqgro", response.properties().agentProperties().spnDetails().audience());
        Assertions.assertEquals("bsfsgsae", response.properties().agentProperties().spnDetails().objectId());
        Assertions.assertEquals("ldfmhljq", response.properties().agentProperties().spnDetails().tenantId());
        Assertions.assertEquals("spmrjct", response.properties().discoverySiteId());
    }
}
