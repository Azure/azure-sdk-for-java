// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentSpnPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorPropertiesBaseWithAgent;
import com.azure.resourcemanager.migration.assessment.models.HypervCollector;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class HypervCollectorsOperationsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"agentProperties\":{\"id\":\"mnoiicsudy\",\"version\":\"rjjtalxrdsjrho\",\"lastHeartbeatUtc\":\"2021-12-05T02:21:08Z\",\"spnDetails\":{\"authority\":\"usxxhdodpjwybl\",\"applicationId\":\"bdmvsby\",\"audience\":\"aelqpvekmkwjf\",\"objectId\":\"tlo\",\"tenantId\":\"dusxurs\"}},\"discoverySiteId\":\"v\",\"createdTimestamp\":\"2021-08-13T13:47:43Z\",\"updatedTimestamp\":\"2021-06-18T04:59:27Z\",\"provisioningState\":\"Succeeded\"},\"id\":\"w\",\"name\":\"z\",\"type\":\"yiqrizf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        HypervCollector response = manager.hypervCollectorsOperations()
            .define("mbtple")
            .withExistingAssessmentProject("vrdmvxyrxdh", "vqojbxaotcgbz")
            .withProperties(new CollectorPropertiesBaseWithAgent().withProvisioningState(ProvisioningState.SUCCEEDED)
                .withAgentProperties(new CollectorAgentPropertiesBase().withId("yidoxznvg")
                    .withVersion("tmuuvdawsx")
                    .withLastHeartbeatUtc(OffsetDateTime.parse("2021-02-17T03:12:37Z"))
                    .withSpnDetails(new CollectorAgentSpnPropertiesBase().withAuthority("knimxlp")
                        .withApplicationId("rxrzutylcur")
                        .withAudience("q")
                        .withObjectId("b")
                        .withTenantId("aehtd")))
                .withDiscoverySiteId("mbnvynfaooeacted"))
            .create();

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("mnoiicsudy", response.properties().agentProperties().id());
        Assertions.assertEquals("rjjtalxrdsjrho", response.properties().agentProperties().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-05T02:21:08Z"),
            response.properties().agentProperties().lastHeartbeatUtc());
        Assertions.assertEquals("usxxhdodpjwybl", response.properties().agentProperties().spnDetails().authority());
        Assertions.assertEquals("bdmvsby", response.properties().agentProperties().spnDetails().applicationId());
        Assertions.assertEquals("aelqpvekmkwjf", response.properties().agentProperties().spnDetails().audience());
        Assertions.assertEquals("tlo", response.properties().agentProperties().spnDetails().objectId());
        Assertions.assertEquals("dusxurs", response.properties().agentProperties().spnDetails().tenantId());
        Assertions.assertEquals("v", response.properties().discoverySiteId());
    }
}
