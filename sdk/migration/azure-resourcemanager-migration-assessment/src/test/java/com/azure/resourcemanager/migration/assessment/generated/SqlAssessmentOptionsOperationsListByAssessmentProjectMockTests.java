// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.models.AzureCurrency;
import com.azure.resourcemanager.migration.assessment.models.AzureLocation;
import com.azure.resourcemanager.migration.assessment.models.AzureOfferCode;
import com.azure.resourcemanager.migration.assessment.models.AzureSqlServiceTier;
import com.azure.resourcemanager.migration.assessment.models.AzureVmFamily;
import com.azure.resourcemanager.migration.assessment.models.ComputeTier;
import com.azure.resourcemanager.migration.assessment.models.HardwareGeneration;
import com.azure.resourcemanager.migration.assessment.models.SqlAssessmentOptions;
import com.azure.resourcemanager.migration.assessment.models.TargetType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SqlAssessmentOptionsOperationsListByAssessmentProjectMockTests {
    @Test
    public void testListByAssessmentProject() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"vmFamilies\":[{\"familyName\":\"ofuworimmovzwde\",\"targetLocations\":[\"mvhzfovanyrvaprt\",\"elgwewi\"],\"category\":[\"aq\",\"ndmymnqoqjumov\",\"fbpbvzopaxmfmvsm\",\"woxfaxdtnqifbsa\"]},{\"familyName\":\"oiauesugmocpcj\",\"targetLocations\":[\"oelrgttwfl\"],\"category\":[\"uorinikcedpk\",\"riwmmtmqrxrzqv\",\"yczyayubtgm\"]}],\"reservedInstanceVmFamilies\":[\"Eav4_series\",\"Dv3_series\",\"Unknown\"],\"premiumDiskVmFamilies\":[\"Unknown\"],\"savingsPlanVmFamilies\":[\"Ev4_series\",\"Dv5_series\"],\"savingsPlanSupportedLocations\":[\"BrazilSouth\",\"UsSecEast\",\"ChinaNorth\"],\"savingsPlanSupportedLocationsForPaas\":[\"NorwayWest\"],\"reservedInstanceSupportedLocationsForIaas\":[\"WestCentralUs\",\"SwitzerlandWest\",\"ChinaNorth\"],\"savingsPlanSupportedOffers\":[\"MSAZR0122P\"],\"sqlSkus\":[{\"computeTier\":\"Unknown\",\"hardwareGeneration\":\"DC_series\",\"targetType\":\"AzureVirtualMachine\",\"serviceTier\":\"Unknown\",\"targetLocations\":[\"USGovIowa\",\"QatarCentral\"]},{\"computeTier\":\"Serverless\",\"hardwareGeneration\":\"Gen5\",\"targetType\":\"AzureSqlVirtualMachine\",\"serviceTier\":\"BusinessCritical\",\"targetLocations\":[\"USGovVirginia\",\"AustraliaSoutheast\",\"WestUs2\",\"SwitzerlandNorth\"]}],\"reservedInstanceSqlTargets\":[\"AzureVirtualMachine\",\"AzureVirtualMachine\"],\"reservedInstanceSupportedLocations\":[\"FranceSouth\",\"UsSecEast\",\"EastUs\"],\"reservedInstanceSupportedCurrencies\":[\"NZD\",\"BRL\"],\"reservedInstanceSupportedOffers\":[\"MSAZR0063P\",\"MSAZR0149P\",\"MSAZR0063P\"],\"supportedOffers\":[\"MSAZR0124P\",\"MSAZR0127P\"]},\"id\":\"faryrvjlg\",\"name\":\"ezvjq\",\"type\":\"ahoyiyaxqvj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SqlAssessmentOptions> response = manager.sqlAssessmentOptionsOperations()
            .listByAssessmentProject("dvatlzmgschn", "rsbkkzovlzdmnfmf", com.azure.core.util.Context.NONE);

        Assertions.assertEquals(AzureVmFamily.EV4_SERIES,
            response.iterator().next().properties().savingsPlanVmFamilies().get(0));
        Assertions.assertEquals(AzureLocation.BRAZIL_SOUTH,
            response.iterator().next().properties().savingsPlanSupportedLocations().get(0));
        Assertions.assertEquals(AzureLocation.NORWAY_WEST,
            response.iterator().next().properties().savingsPlanSupportedLocationsForPaas().get(0));
        Assertions.assertEquals(AzureLocation.WEST_CENTRAL_US,
            response.iterator().next().properties().reservedInstanceSupportedLocationsForIaas().get(0));
        Assertions.assertEquals(AzureOfferCode.MSAZR0122P,
            response.iterator().next().properties().savingsPlanSupportedOffers().get(0));
        Assertions.assertEquals(ComputeTier.UNKNOWN,
            response.iterator().next().properties().sqlSkus().get(0).computeTier());
        Assertions.assertEquals(HardwareGeneration.DC_SERIES,
            response.iterator().next().properties().sqlSkus().get(0).hardwareGeneration());
        Assertions.assertEquals(TargetType.AZURE_VIRTUAL_MACHINE,
            response.iterator().next().properties().sqlSkus().get(0).targetType());
        Assertions.assertEquals(AzureSqlServiceTier.UNKNOWN,
            response.iterator().next().properties().sqlSkus().get(0).serviceTier());
        Assertions.assertEquals(AzureLocation.USGOV_IOWA,
            response.iterator().next().properties().sqlSkus().get(0).targetLocations().get(0));
        Assertions.assertEquals(TargetType.AZURE_VIRTUAL_MACHINE,
            response.iterator().next().properties().reservedInstanceSqlTargets().get(0));
        Assertions.assertEquals(AzureLocation.FRANCE_SOUTH,
            response.iterator().next().properties().reservedInstanceSupportedLocations().get(0));
        Assertions.assertEquals(AzureCurrency.NZD,
            response.iterator().next().properties().reservedInstanceSupportedCurrencies().get(0));
        Assertions.assertEquals(AzureOfferCode.MSAZR0063P,
            response.iterator().next().properties().reservedInstanceSupportedOffers().get(0));
        Assertions.assertEquals(AzureOfferCode.MSAZR0124P,
            response.iterator().next().properties().supportedOffers().get(0));
    }
}
