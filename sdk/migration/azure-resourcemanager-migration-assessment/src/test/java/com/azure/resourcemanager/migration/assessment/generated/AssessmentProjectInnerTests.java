// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.migration.assessment.fluent.models.AssessmentProjectInner;
import com.azure.resourcemanager.migration.assessment.models.ProjectProperties;
import com.azure.resourcemanager.migration.assessment.models.ProjectStatus;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssessmentProjectInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssessmentProjectInner model = BinaryData.fromString(
            "{\"properties\":{\"createdTimestamp\":\"2021-11-09T02:37:57Z\",\"updatedTimestamp\":\"2021-01-31T22:20:23Z\",\"serviceEndpoint\":\"aolthqtrg\",\"assessmentSolutionId\":\"bpf\",\"projectStatus\":\"Active\",\"customerWorkspaceId\":\"n\",\"customerWorkspaceLocation\":\"v\",\"publicNetworkAccess\":\"jrwzox\",\"privateEndpointConnections\":[{\"properties\":{\"groupIds\":[\"luwfzitonpeqfpjk\",\"lxofpdvhpfxxypin\",\"nmayhuybb\",\"podepoo\"],\"privateEndpoint\":{\"id\":\"uvamiheognarxzxt\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"usivye\",\"actionsRequired\":\"ciqihnhung\"},\"provisioningState\":\"Creating\"},\"id\":\"rnfygxgispem\",\"name\":\"tzfkufubl\",\"type\":\"ofx\"},{\"properties\":{\"groupIds\":[\"jaeq\",\"hqjbasvmsmj\"],\"privateEndpoint\":{\"id\":\"ngsntnbybk\"},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"rwclxxwrljdo\",\"actionsRequired\":\"kcqvkocrc\"},\"provisioningState\":\"Succeeded\"},\"id\":\"tnhxbn\",\"name\":\"biksq\",\"type\":\"gls\"}],\"customerStorageAccountArmId\":\"inqpjwnzll\",\"provisioningState\":\"Updating\"},\"location\":\"pee\",\"tags\":{\"uujitcjc\":\"gxsabkyq\",\"d\":\"dzevndhkrw\"},\"id\":\"ppdsbdkvwrwj\",\"name\":\"eusnhutj\",\"type\":\"ltmrldh\"}")
            .toObject(AssessmentProjectInner.class);
        Assertions.assertEquals("pee", model.location());
        Assertions.assertEquals("gxsabkyq", model.tags().get("uujitcjc"));
        Assertions.assertEquals(ProvisioningState.UPDATING, model.properties().provisioningState());
        Assertions.assertEquals("bpf", model.properties().assessmentSolutionId());
        Assertions.assertEquals(ProjectStatus.ACTIVE, model.properties().projectStatus());
        Assertions.assertEquals("n", model.properties().customerWorkspaceId());
        Assertions.assertEquals("v", model.properties().customerWorkspaceLocation());
        Assertions.assertEquals("jrwzox", model.properties().publicNetworkAccess());
        Assertions.assertEquals("inqpjwnzll", model.properties().customerStorageAccountArmId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssessmentProjectInner model = new AssessmentProjectInner().withLocation("pee")
            .withTags(mapOf("uujitcjc", "gxsabkyq", "d", "dzevndhkrw"))
            .withProperties(new ProjectProperties().withProvisioningState(ProvisioningState.UPDATING)
                .withAssessmentSolutionId("bpf")
                .withProjectStatus(ProjectStatus.ACTIVE)
                .withCustomerWorkspaceId("n")
                .withCustomerWorkspaceLocation("v")
                .withPublicNetworkAccess("jrwzox")
                .withCustomerStorageAccountArmId("inqpjwnzll"));
        model = BinaryData.fromObject(model).toObject(AssessmentProjectInner.class);
        Assertions.assertEquals("pee", model.location());
        Assertions.assertEquals("gxsabkyq", model.tags().get("uujitcjc"));
        Assertions.assertEquals(ProvisioningState.UPDATING, model.properties().provisioningState());
        Assertions.assertEquals("bpf", model.properties().assessmentSolutionId());
        Assertions.assertEquals(ProjectStatus.ACTIVE, model.properties().projectStatus());
        Assertions.assertEquals("n", model.properties().customerWorkspaceId());
        Assertions.assertEquals("v", model.properties().customerWorkspaceLocation());
        Assertions.assertEquals("jrwzox", model.properties().publicNetworkAccess());
        Assertions.assertEquals("inqpjwnzll", model.properties().customerStorageAccountArmId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
