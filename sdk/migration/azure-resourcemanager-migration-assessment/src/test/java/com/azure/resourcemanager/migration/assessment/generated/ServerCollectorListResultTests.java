// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.migration.assessment.fluent.models.ServerCollectorInner;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentSpnPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorPropertiesBaseWithAgent;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import com.azure.resourcemanager.migration.assessment.models.ServerCollectorListResult;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class ServerCollectorListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerCollectorListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"agentProperties\":{\"id\":\"nq\",\"version\":\"gjfbpkuwxeoi\",\"lastHeartbeatUtc\":\"2021-05-31T08:53:37Z\",\"spnDetails\":{\"authority\":\"fa\",\"applicationId\":\"jzwfb\",\"audience\":\"aykmmf\",\"objectId\":\"bfw\",\"tenantId\":\"zxmdew\"}},\"discoverySiteId\":\"sxkrpl\",\"createdTimestamp\":\"2021-10-04T01:54:23Z\",\"updatedTimestamp\":\"2021-08-18T20:19:59Z\",\"provisioningState\":\"Failed\"},\"id\":\"viyoypsuhbrnnhjx\",\"name\":\"qwjhqkbiwetpozyc\",\"type\":\"qiqyhgfsetzlexbs\"},{\"properties\":{\"agentProperties\":{\"id\":\"ynojpziuw\",\"version\":\"zkkdtnhqs\",\"lastHeartbeatUtc\":\"2021-06-07T11:46:36Z\",\"spnDetails\":{\"authority\":\"elpkpbafvafhlbyl\",\"applicationId\":\"bevxrhyzd\",\"audience\":\"rsofpltdbmairrh\",\"objectId\":\"fnrac\",\"tenantId\":\"pqigtuujwouhd\"}},\"discoverySiteId\":\"s\",\"createdTimestamp\":\"2021-09-12T08:30:14Z\",\"updatedTimestamp\":\"2021-03-06T17:38:31Z\",\"provisioningState\":\"Updating\"},\"id\":\"jybvit\",\"name\":\"qkj\",\"type\":\"az\"}],\"nextLink\":\"mtggmu\"}")
            .toObject(ServerCollectorListResult.class);
        Assertions.assertEquals(ProvisioningState.FAILED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("nq", model.value().get(0).properties().agentProperties().id());
        Assertions.assertEquals("gjfbpkuwxeoi", model.value().get(0).properties().agentProperties().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T08:53:37Z"),
            model.value().get(0).properties().agentProperties().lastHeartbeatUtc());
        Assertions.assertEquals("fa", model.value().get(0).properties().agentProperties().spnDetails().authority());
        Assertions.assertEquals("jzwfb",
            model.value().get(0).properties().agentProperties().spnDetails().applicationId());
        Assertions.assertEquals("aykmmf", model.value().get(0).properties().agentProperties().spnDetails().audience());
        Assertions.assertEquals("bfw", model.value().get(0).properties().agentProperties().spnDetails().objectId());
        Assertions.assertEquals("zxmdew", model.value().get(0).properties().agentProperties().spnDetails().tenantId());
        Assertions.assertEquals("sxkrpl", model.value().get(0).properties().discoverySiteId());
        Assertions.assertEquals("mtggmu", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerCollectorListResult model = new ServerCollectorListResult().withValue(Arrays.asList(
            new ServerCollectorInner()
                .withProperties(new CollectorPropertiesBaseWithAgent().withProvisioningState(ProvisioningState.FAILED)
                    .withAgentProperties(new CollectorAgentPropertiesBase().withId("nq")
                        .withVersion("gjfbpkuwxeoi")
                        .withLastHeartbeatUtc(OffsetDateTime.parse("2021-05-31T08:53:37Z"))
                        .withSpnDetails(new CollectorAgentSpnPropertiesBase().withAuthority("fa")
                            .withApplicationId("jzwfb")
                            .withAudience("aykmmf")
                            .withObjectId("bfw")
                            .withTenantId("zxmdew")))
                    .withDiscoverySiteId("sxkrpl")),
            new ServerCollectorInner()
                .withProperties(new CollectorPropertiesBaseWithAgent().withProvisioningState(ProvisioningState.UPDATING)
                    .withAgentProperties(new CollectorAgentPropertiesBase().withId("ynojpziuw")
                        .withVersion("zkkdtnhqs")
                        .withLastHeartbeatUtc(OffsetDateTime.parse("2021-06-07T11:46:36Z"))
                        .withSpnDetails(new CollectorAgentSpnPropertiesBase().withAuthority("elpkpbafvafhlbyl")
                            .withApplicationId("bevxrhyzd")
                            .withAudience("rsofpltdbmairrh")
                            .withObjectId("fnrac")
                            .withTenantId("pqigtuujwouhd")))
                    .withDiscoverySiteId("s"))))
            .withNextLink("mtggmu");
        model = BinaryData.fromObject(model).toObject(ServerCollectorListResult.class);
        Assertions.assertEquals(ProvisioningState.FAILED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("nq", model.value().get(0).properties().agentProperties().id());
        Assertions.assertEquals("gjfbpkuwxeoi", model.value().get(0).properties().agentProperties().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-31T08:53:37Z"),
            model.value().get(0).properties().agentProperties().lastHeartbeatUtc());
        Assertions.assertEquals("fa", model.value().get(0).properties().agentProperties().spnDetails().authority());
        Assertions.assertEquals("jzwfb",
            model.value().get(0).properties().agentProperties().spnDetails().applicationId());
        Assertions.assertEquals("aykmmf", model.value().get(0).properties().agentProperties().spnDetails().audience());
        Assertions.assertEquals("bfw", model.value().get(0).properties().agentProperties().spnDetails().objectId());
        Assertions.assertEquals("zxmdew", model.value().get(0).properties().agentProperties().spnDetails().tenantId());
        Assertions.assertEquals("sxkrpl", model.value().get(0).properties().discoverySiteId());
        Assertions.assertEquals("mtggmu", model.nextLink());
    }
}
