// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentSpnPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorPropertiesBaseWithAgent;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import com.azure.resourcemanager.migration.assessment.models.ServerCollector;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServerCollectorsOperationsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"agentProperties\":{\"id\":\"ekivycpzcvdizulr\",\"version\":\"bhtrezpzlpryfm\",\"lastHeartbeatUtc\":\"2021-03-29T10:22:50Z\",\"spnDetails\":{\"authority\":\"zf\",\"applicationId\":\"il\",\"audience\":\"udccgndjgdprig\",\"objectId\":\"qyeqfcbuulpyuflq\",\"tenantId\":\"shtujcyoh\"}},\"discoverySiteId\":\"imwdcsklkqnqvki\",\"createdTimestamp\":\"2021-01-31T20:14:53Z\",\"updatedTimestamp\":\"2021-09-14T00:51:35Z\",\"provisioningState\":\"Succeeded\"},\"id\":\"uyrzw\",\"name\":\"mbzayspzvrietv\",\"type\":\"phmdzxplgtp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ServerCollector response = manager.serverCollectorsOperations()
            .define("woykdnonaaxwm")
            .withExistingAssessmentProject("zbkuckgkdsksw", "iiqqcqikclsmalns")
            .withProperties(new CollectorPropertiesBaseWithAgent().withProvisioningState(ProvisioningState.FAILED)
                .withAgentProperties(new CollectorAgentPropertiesBase().withId("jlqcwny")
                    .withVersion("lei")
                    .withLastHeartbeatUtc(OffsetDateTime.parse("2021-10-19T04:53:11Z"))
                    .withSpnDetails(new CollectorAgentSpnPropertiesBase().withAuthority("vs")
                        .withApplicationId("sertoxadhxuvjh")
                        .withAudience("nrqstjcmetwmlg")
                        .withObjectId("vnpvvd")
                        .withTenantId("jnaqyq")))
                .withDiscoverySiteId("slz"))
            .create();

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("ekivycpzcvdizulr", response.properties().agentProperties().id());
        Assertions.assertEquals("bhtrezpzlpryfm", response.properties().agentProperties().version());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-29T10:22:50Z"),
            response.properties().agentProperties().lastHeartbeatUtc());
        Assertions.assertEquals("zf", response.properties().agentProperties().spnDetails().authority());
        Assertions.assertEquals("il", response.properties().agentProperties().spnDetails().applicationId());
        Assertions.assertEquals("udccgndjgdprig", response.properties().agentProperties().spnDetails().audience());
        Assertions.assertEquals("qyeqfcbuulpyuflq", response.properties().agentProperties().spnDetails().objectId());
        Assertions.assertEquals("shtujcyoh", response.properties().agentProperties().spnDetails().tenantId());
        Assertions.assertEquals("imwdcsklkqnqvki", response.properties().discoverySiteId());
    }
}
