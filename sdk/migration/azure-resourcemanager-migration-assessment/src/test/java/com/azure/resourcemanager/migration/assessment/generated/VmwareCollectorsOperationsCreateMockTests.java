// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorAgentSpnPropertiesBase;
import com.azure.resourcemanager.migration.assessment.models.CollectorPropertiesBaseWithAgent;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import com.azure.resourcemanager.migration.assessment.models.VmwareCollector;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VmwareCollectorsOperationsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"agentProperties\":{\"id\":\"mcofn\",\"version\":\"lbsnosnqliw\",\"lastHeartbeatUtc\":\"2020-12-31T14:56:04Z\",\"spnDetails\":{\"authority\":\"fetya\",\"applicationId\":\"tg\",\"audience\":\"nazgbjbhrpgiq\",\"objectId\":\"tcucrcmmai\",\"tenantId\":\"qjiwifhbksldttoh\"}},\"discoverySiteId\":\"lna\",\"createdTimestamp\":\"2021-01-30T09:04:29Z\",\"updatedTimestamp\":\"2021-10-03T11:41:04Z\",\"provisioningState\":\"Succeeded\"},\"id\":\"kvllrhtpmglxkoi\",\"name\":\"mtrawrqkza\",\"type\":\"bun\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        VmwareCollector response = manager.vmwareCollectorsOperations()
            .define("ekwuyckyvn")
            .withExistingAssessmentProject("z", "canzb")
            .withProperties(new CollectorPropertiesBaseWithAgent().withProvisioningState(ProvisioningState.UPDATING)
                .withAgentProperties(new CollectorAgentPropertiesBase().withId("uffiwjbctvbpzu")
                    .withVersion("jtotdxposcs")
                    .withLastHeartbeatUtc(OffsetDateTime.parse("2021-06-08T17:25:47Z"))
                    .withSpnDetails(new CollectorAgentSpnPropertiesBase().withAuthority("siecktybhj")
                        .withApplicationId("idhhxomild")
                        .withAudience("jxdugxwj")
                        .withObjectId("l")
                        .withTenantId("rslaatep")))
                .withDiscoverySiteId("ujjzgxq"))
            .create();

        Assertions.assertEquals(ProvisioningState.SUCCEEDED, response.properties().provisioningState());
        Assertions.assertEquals("mcofn", response.properties().agentProperties().id());
        Assertions.assertEquals("lbsnosnqliw", response.properties().agentProperties().version());
        Assertions.assertEquals(OffsetDateTime.parse("2020-12-31T14:56:04Z"),
            response.properties().agentProperties().lastHeartbeatUtc());
        Assertions.assertEquals("fetya", response.properties().agentProperties().spnDetails().authority());
        Assertions.assertEquals("tg", response.properties().agentProperties().spnDetails().applicationId());
        Assertions.assertEquals("nazgbjbhrpgiq", response.properties().agentProperties().spnDetails().audience());
        Assertions.assertEquals("tcucrcmmai", response.properties().agentProperties().spnDetails().objectId());
        Assertions.assertEquals("qjiwifhbksldttoh", response.properties().agentProperties().spnDetails().tenantId());
        Assertions.assertEquals("lna", response.properties().discoverySiteId());
    }
}
