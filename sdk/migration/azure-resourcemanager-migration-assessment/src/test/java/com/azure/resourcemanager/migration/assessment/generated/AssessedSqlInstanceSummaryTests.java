// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.migration.assessment.models.AssessedSqlInstanceSummary;
import com.azure.resourcemanager.migration.assessment.models.SqlFciState;
import org.junit.jupiter.api.Assertions;

public final class AssessedSqlInstanceSummaryTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssessedSqlInstanceSummary model = BinaryData.fromString(
            "{\"instanceId\":\"yi\",\"instanceName\":\"sharujtj\",\"sqlInstanceSdsArmId\":\"xfz\",\"sqlInstanceEntityId\":\"qttv\",\"sqlEdition\":\"pqhjpenuygbqeqq\",\"sqlVersion\":\"ewvnqvcdlgu\",\"isClustered\":true,\"isHighAvailabilityEnabled\":false,\"sqlFciState\":\"Active\"}")
            .toObject(AssessedSqlInstanceSummary.class);
        Assertions.assertEquals("yi", model.instanceId());
        Assertions.assertEquals("sharujtj", model.instanceName());
        Assertions.assertEquals("xfz", model.sqlInstanceSdsArmId());
        Assertions.assertEquals("qttv", model.sqlInstanceEntityId());
        Assertions.assertEquals("pqhjpenuygbqeqq", model.sqlEdition());
        Assertions.assertEquals("ewvnqvcdlgu", model.sqlVersion());
        Assertions.assertEquals(true, model.isClustered());
        Assertions.assertEquals(false, model.isHighAvailabilityEnabled());
        Assertions.assertEquals(SqlFciState.ACTIVE, model.sqlFciState());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssessedSqlInstanceSummary model = new AssessedSqlInstanceSummary().withInstanceId("yi")
            .withInstanceName("sharujtj")
            .withSqlInstanceSdsArmId("xfz")
            .withSqlInstanceEntityId("qttv")
            .withSqlEdition("pqhjpenuygbqeqq")
            .withSqlVersion("ewvnqvcdlgu")
            .withIsClustered(true)
            .withIsHighAvailabilityEnabled(false)
            .withSqlFciState(SqlFciState.ACTIVE);
        model = BinaryData.fromObject(model).toObject(AssessedSqlInstanceSummary.class);
        Assertions.assertEquals("yi", model.instanceId());
        Assertions.assertEquals("sharujtj", model.instanceName());
        Assertions.assertEquals("xfz", model.sqlInstanceSdsArmId());
        Assertions.assertEquals("qttv", model.sqlInstanceEntityId());
        Assertions.assertEquals("pqhjpenuygbqeqq", model.sqlEdition());
        Assertions.assertEquals("ewvnqvcdlgu", model.sqlVersion());
        Assertions.assertEquals(true, model.isClustered());
        Assertions.assertEquals(false, model.isHighAvailabilityEnabled());
        Assertions.assertEquals(SqlFciState.ACTIVE, model.sqlFciState());
    }
}
