// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.migration.assessment.models.AzureLocation;
import com.azure.resourcemanager.migration.assessment.models.AzureSqlServiceTier;
import com.azure.resourcemanager.migration.assessment.models.ComputeTier;
import com.azure.resourcemanager.migration.assessment.models.HardwareGeneration;
import com.azure.resourcemanager.migration.assessment.models.SqlPaaSTargetOptions;
import com.azure.resourcemanager.migration.assessment.models.TargetType;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class SqlPaaSTargetOptionsTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        SqlPaaSTargetOptions model = BinaryData.fromString(
            "{\"computeTier\":\"Unknown\",\"hardwareGeneration\":\"Automatic\",\"targetType\":\"AzureVirtualMachine\",\"serviceTier\":\"HyperScale\",\"targetLocations\":[\"USDoDEast\",\"SouthCentralUs\"]}")
            .toObject(SqlPaaSTargetOptions.class);
        Assertions.assertEquals(ComputeTier.UNKNOWN, model.computeTier());
        Assertions.assertEquals(HardwareGeneration.AUTOMATIC, model.hardwareGeneration());
        Assertions.assertEquals(TargetType.AZURE_VIRTUAL_MACHINE, model.targetType());
        Assertions.assertEquals(AzureSqlServiceTier.HYPER_SCALE, model.serviceTier());
        Assertions.assertEquals(AzureLocation.USDO_DEAST, model.targetLocations().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        SqlPaaSTargetOptions model = new SqlPaaSTargetOptions().withComputeTier(ComputeTier.UNKNOWN)
            .withHardwareGeneration(HardwareGeneration.AUTOMATIC)
            .withTargetType(TargetType.AZURE_VIRTUAL_MACHINE)
            .withServiceTier(AzureSqlServiceTier.HYPER_SCALE)
            .withTargetLocations(Arrays.asList(AzureLocation.USDO_DEAST, AzureLocation.SOUTH_CENTRAL_US));
        model = BinaryData.fromObject(model).toObject(SqlPaaSTargetOptions.class);
        Assertions.assertEquals(ComputeTier.UNKNOWN, model.computeTier());
        Assertions.assertEquals(HardwareGeneration.AUTOMATIC, model.hardwareGeneration());
        Assertions.assertEquals(TargetType.AZURE_VIRTUAL_MACHINE, model.targetType());
        Assertions.assertEquals(AzureSqlServiceTier.HYPER_SCALE, model.serviceTier());
        Assertions.assertEquals(AzureLocation.USDO_DEAST, model.targetLocations().get(0));
    }
}
