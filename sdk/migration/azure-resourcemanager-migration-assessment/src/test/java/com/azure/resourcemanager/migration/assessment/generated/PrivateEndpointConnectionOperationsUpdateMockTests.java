// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.migration.assessment.models.PrivateEndpoint;
import com.azure.resourcemanager.migration.assessment.models.PrivateEndpointConnection;
import com.azure.resourcemanager.migration.assessment.models.PrivateEndpointConnectionProperties;
import com.azure.resourcemanager.migration.assessment.models.PrivateEndpointServiceConnectionStatus;
import com.azure.resourcemanager.migration.assessment.models.PrivateLinkServiceConnectionState;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionOperationsUpdateMockTests {
    @Test
    public void testUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"groupIds\":[\"audgjtfbclakkucd\",\"wnhczbutou\",\"gjtirjwayhic\",\"qwwvgwkslvl\"],\"privateEndpoint\":{\"id\":\"dvbiabvnsrg\"},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"qx\",\"actionsRequired\":\"yfhbmwkh\"},\"provisioningState\":\"Succeeded\"},\"id\":\"tbspvkhglaqjs\",\"name\":\"yzstujrzxrkns\",\"type\":\"d\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PrivateEndpointConnection response = manager.privateEndpointConnectionOperations()
            .update("nsmy", "jow", "yeyzm",
                new PrivateEndpointConnectionInner()
                    .withProperties(new PrivateEndpointConnectionProperties().withPrivateEndpoint(new PrivateEndpoint())
                        .withPrivateLinkServiceConnectionState(new PrivateLinkServiceConnectionState()
                            .withStatus(PrivateEndpointServiceConnectionStatus.PENDING)
                            .withDescription("stcivrak")
                            .withActionsRequired("ry"))),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(PrivateEndpointServiceConnectionStatus.APPROVED,
            response.properties().privateLinkServiceConnectionState().status());
        Assertions.assertEquals("qx", response.properties().privateLinkServiceConnectionState().description());
        Assertions.assertEquals("yfhbmwkh",
            response.properties().privateLinkServiceConnectionState().actionsRequired());
    }
}
