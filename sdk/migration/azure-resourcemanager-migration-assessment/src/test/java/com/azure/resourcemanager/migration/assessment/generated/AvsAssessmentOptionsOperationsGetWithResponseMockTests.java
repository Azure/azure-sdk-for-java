// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager;
import com.azure.resourcemanager.migration.assessment.models.AvsAssessmentOptions;
import com.azure.resourcemanager.migration.assessment.models.AzureAvsNodeType;
import com.azure.resourcemanager.migration.assessment.models.AzureCurrency;
import com.azure.resourcemanager.migration.assessment.models.AzureLocation;
import com.azure.resourcemanager.migration.assessment.models.AzureOfferCode;
import com.azure.resourcemanager.migration.assessment.models.FttAndRaidLevel;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class AvsAssessmentOptionsOperationsGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"avsNodes\":[{\"nodeType\":\"AV36\",\"targetLocations\":[\"USGovVirginia\",\"SouthCentralUs\",\"EastUs2\"]}],\"failuresToTolerateAndRaidLevelValues\":[\"Ftt3Raid1\"],\"reservedInstanceAvsNodes\":[\"Unknown\",\"AV36\"],\"reservedInstanceSupportedLocations\":[\"SouthAfricaWest\",\"CanadaEast\"],\"reservedInstanceSupportedCurrencies\":[\"JPY\",\"SAR\"],\"reservedInstanceSupportedOffers\":[\"MSMCAZR0044P\",\"SavingsPlan3Year\",\"MSAZR0120P\"]},\"id\":\"ko\",\"name\":\"r\",\"type\":\"awn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MigrationAssessmentManager manager = MigrationAssessmentManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        AvsAssessmentOptions response = manager.avsAssessmentOptionsOperations()
            .getWithResponse("fwbivqvo", "fuy", "wvbhlimbyq", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals(AzureAvsNodeType.AV36, response.properties().avsNodes().get(0).nodeType());
        Assertions.assertEquals(AzureLocation.USGOV_VIRGINIA,
            response.properties().avsNodes().get(0).targetLocations().get(0));
        Assertions.assertEquals(FttAndRaidLevel.FTT3RAID1,
            response.properties().failuresToTolerateAndRaidLevelValues().get(0));
        Assertions.assertEquals(AzureAvsNodeType.UNKNOWN, response.properties().reservedInstanceAvsNodes().get(0));
        Assertions.assertEquals(AzureLocation.SOUTH_AFRICA_WEST,
            response.properties().reservedInstanceSupportedLocations().get(0));
        Assertions.assertEquals(AzureCurrency.JPY, response.properties().reservedInstanceSupportedCurrencies().get(0));
        Assertions.assertEquals(AzureOfferCode.MSMCAZR0044P,
            response.properties().reservedInstanceSupportedOffers().get(0));
    }
}
