// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.migration.assessment.fluent.models.AssessmentProjectInner;
import com.azure.resourcemanager.migration.assessment.models.AssessmentProjectListResult;
import com.azure.resourcemanager.migration.assessment.models.ProjectProperties;
import com.azure.resourcemanager.migration.assessment.models.ProjectStatus;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class AssessmentProjectListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        AssessmentProjectListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"createdTimestamp\":\"2021-11-25T18:32:18Z\",\"updatedTimestamp\":\"2021-08-11T05:57:13Z\",\"serviceEndpoint\":\"qhabifpikxwcz\",\"assessmentSolutionId\":\"scnpqxuhivy\",\"projectStatus\":\"Inactive\",\"customerWorkspaceId\":\"b\",\"customerWorkspaceLocation\":\"rkxvdum\",\"publicNetworkAccess\":\"rtfw\",\"privateEndpointConnections\":[{\"properties\":{\"privateLinkServiceConnectionState\":{}},\"id\":\"audccsnhs\",\"name\":\"cnyejhkryhtnapcz\",\"type\":\"lokjyemkk\"}],\"customerStorageAccountArmId\":\"ipjoxzjnchgejs\",\"provisioningState\":\"Failed\"},\"location\":\"ailzydehojwyahu\",\"tags\":{\"wixjsprozvcp\":\"pmqnja\",\"atscmd\":\"tegjvwmf\",\"zkrwfn\":\"pjhulsuuvmkj\",\"lwejdpv\":\"iodjp\"},\"id\":\"ryo\",\"name\":\"psoacctazakljl\",\"type\":\"hbcryffdfdosyge\"}],\"nextLink\":\"aojakhmsbzjhcrz\"}")
            .toObject(AssessmentProjectListResult.class);
        Assertions.assertEquals("ailzydehojwyahu", model.value().get(0).location());
        Assertions.assertEquals("pmqnja", model.value().get(0).tags().get("wixjsprozvcp"));
        Assertions.assertEquals(ProvisioningState.FAILED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).properties().assessmentSolutionId());
        Assertions.assertEquals(ProjectStatus.INACTIVE, model.value().get(0).properties().projectStatus());
        Assertions.assertEquals("b", model.value().get(0).properties().customerWorkspaceId());
        Assertions.assertEquals("rkxvdum", model.value().get(0).properties().customerWorkspaceLocation());
        Assertions.assertEquals("rtfw", model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("ipjoxzjnchgejs", model.value().get(0).properties().customerStorageAccountArmId());
        Assertions.assertEquals("aojakhmsbzjhcrz", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        AssessmentProjectListResult model = new AssessmentProjectListResult()
            .withValue(Arrays.asList(new AssessmentProjectInner().withLocation("ailzydehojwyahu")
                .withTags(
                    mapOf("wixjsprozvcp", "pmqnja", "atscmd", "tegjvwmf", "zkrwfn", "pjhulsuuvmkj", "lwejdpv", "iodjp"))
                .withProperties(new ProjectProperties().withProvisioningState(ProvisioningState.FAILED)
                    .withAssessmentSolutionId("scnpqxuhivy")
                    .withProjectStatus(ProjectStatus.INACTIVE)
                    .withCustomerWorkspaceId("b")
                    .withCustomerWorkspaceLocation("rkxvdum")
                    .withPublicNetworkAccess("rtfw")
                    .withCustomerStorageAccountArmId("ipjoxzjnchgejs"))))
            .withNextLink("aojakhmsbzjhcrz");
        model = BinaryData.fromObject(model).toObject(AssessmentProjectListResult.class);
        Assertions.assertEquals("ailzydehojwyahu", model.value().get(0).location());
        Assertions.assertEquals("pmqnja", model.value().get(0).tags().get("wixjsprozvcp"));
        Assertions.assertEquals(ProvisioningState.FAILED, model.value().get(0).properties().provisioningState());
        Assertions.assertEquals("scnpqxuhivy", model.value().get(0).properties().assessmentSolutionId());
        Assertions.assertEquals(ProjectStatus.INACTIVE, model.value().get(0).properties().projectStatus());
        Assertions.assertEquals("b", model.value().get(0).properties().customerWorkspaceId());
        Assertions.assertEquals("rkxvdum", model.value().get(0).properties().customerWorkspaceLocation());
        Assertions.assertEquals("rtfw", model.value().get(0).properties().publicNetworkAccess());
        Assertions.assertEquals("ipjoxzjnchgejs", model.value().get(0).properties().customerStorageAccountArmId());
        Assertions.assertEquals("aojakhmsbzjhcrz", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
