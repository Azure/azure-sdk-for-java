// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.generated;

import com.azure.resourcemanager.migration.assessment.models.ProjectProperties;
import com.azure.resourcemanager.migration.assessment.models.ProjectStatus;
import com.azure.resourcemanager.migration.assessment.models.ProvisioningState;
import java.util.HashMap;
import java.util.Map;

/**
 * Samples for AssessmentProjectsOperations Create.
 */
public final class AssessmentProjectsOperationsCreateSamples {
    /*
     * x-ms-original-file:
     * specification/migrate/resource-manager/Microsoft.Migrate/AssessmentProjects/stable/2023-03-15/examples/
     * AssessmentProjectsOperations_Create_MaximumSet_Gen.json
     */
    /**
     * Sample code: AssessmentProjectsOperations_Create_MaximumSet_Gen.
     * 
     * @param manager Entry point to MigrationAssessmentManager.
     */
    public static void assessmentProjectsOperationsCreateMaximumSetGen(
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager) {
        manager.assessmentProjectsOperations()
            .define("sakanwar1204project")
            .withRegion("southeastasia")
            .withExistingResourceGroup("sakanwar")
            .withTags(mapOf("Migrate Project", "sakanwar-PE-SEA"))
            .withProperties(new ProjectProperties().withProvisioningState(ProvisioningState.SUCCEEDED)
                .withAssessmentSolutionId(
                    "/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/sakanwar/providers/Microsoft.Storage/storageAccounts/sakanwar1204usa")
                .withProjectStatus(ProjectStatus.ACTIVE)
                .withPublicNetworkAccess("Disabled")
                .withCustomerStorageAccountArmId(
                    "/subscriptions/4bd2aa0f-2bd2-4d67-91a8-5a4533d58600/resourceGroups/sakanwar/providers/Microsoft.Storage/storageAccounts/sakanwar1204usa"))
            .create();
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
