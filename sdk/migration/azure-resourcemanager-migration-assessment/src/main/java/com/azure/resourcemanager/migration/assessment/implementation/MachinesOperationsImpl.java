// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migration.assessment.fluent.MachinesOperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.MachineInner;
import com.azure.resourcemanager.migration.assessment.models.Machine;
import com.azure.resourcemanager.migration.assessment.models.MachinesOperations;

public final class MachinesOperationsImpl implements MachinesOperations {
    private static final ClientLogger LOGGER = new ClientLogger(MachinesOperationsImpl.class);

    private final MachinesOperationsClient innerClient;

    private final com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager;

    public MachinesOperationsImpl(MachinesOperationsClient innerClient,
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Machine> listByAssessmentProject(String resourceGroupName, String projectName) {
        PagedIterable<MachineInner> inner
            = this.serviceClient().listByAssessmentProject(resourceGroupName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MachineImpl(inner1, this.manager()));
    }

    public PagedIterable<Machine> listByAssessmentProject(String resourceGroupName, String projectName, String filter,
        Integer pageSize, String continuationToken, Integer totalRecordCount, Context context) {
        PagedIterable<MachineInner> inner = this.serviceClient()
            .listByAssessmentProject(resourceGroupName, projectName, filter, pageSize, continuationToken,
                totalRecordCount, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MachineImpl(inner1, this.manager()));
    }

    public Response<Machine> getWithResponse(String resourceGroupName, String projectName, String machineName,
        Context context) {
        Response<MachineInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, projectName, machineName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MachineImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Machine get(String resourceGroupName, String projectName, String machineName) {
        MachineInner inner = this.serviceClient().get(resourceGroupName, projectName, machineName);
        if (inner != null) {
            return new MachineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private MachinesOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager() {
        return this.serviceManager;
    }
}
