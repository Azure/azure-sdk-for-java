// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Class representing Azure SQL Recommendation Reasoning.
 */
@Fluent
public final class SqlRecommendationReasoning implements JsonSerializable<SqlRecommendationReasoning> {
    /*
     * Gets the reasoning id.
     */
    private String reasoningId;

    /*
     * Gets the reasoning status.
     */
    private String reasoningString;

    /*
     * Gets the reasoning category.
     */
    private String reasoningCategory;

    /*
     * Gets the Sql recommended reasoning parameters.
     */
    private List<SqlRecommendationReasoningContext> contextParameters;

    /**
     * Creates an instance of SqlRecommendationReasoning class.
     */
    public SqlRecommendationReasoning() {
    }

    /**
     * Get the reasoningId property: Gets the reasoning id.
     * 
     * @return the reasoningId value.
     */
    public String reasoningId() {
        return this.reasoningId;
    }

    /**
     * Set the reasoningId property: Gets the reasoning id.
     * 
     * @param reasoningId the reasoningId value to set.
     * @return the SqlRecommendationReasoning object itself.
     */
    public SqlRecommendationReasoning withReasoningId(String reasoningId) {
        this.reasoningId = reasoningId;
        return this;
    }

    /**
     * Get the reasoningString property: Gets the reasoning status.
     * 
     * @return the reasoningString value.
     */
    public String reasoningString() {
        return this.reasoningString;
    }

    /**
     * Set the reasoningString property: Gets the reasoning status.
     * 
     * @param reasoningString the reasoningString value to set.
     * @return the SqlRecommendationReasoning object itself.
     */
    public SqlRecommendationReasoning withReasoningString(String reasoningString) {
        this.reasoningString = reasoningString;
        return this;
    }

    /**
     * Get the reasoningCategory property: Gets the reasoning category.
     * 
     * @return the reasoningCategory value.
     */
    public String reasoningCategory() {
        return this.reasoningCategory;
    }

    /**
     * Set the reasoningCategory property: Gets the reasoning category.
     * 
     * @param reasoningCategory the reasoningCategory value to set.
     * @return the SqlRecommendationReasoning object itself.
     */
    public SqlRecommendationReasoning withReasoningCategory(String reasoningCategory) {
        this.reasoningCategory = reasoningCategory;
        return this;
    }

    /**
     * Get the contextParameters property: Gets the Sql recommended reasoning parameters.
     * 
     * @return the contextParameters value.
     */
    public List<SqlRecommendationReasoningContext> contextParameters() {
        return this.contextParameters;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (contextParameters() != null) {
            contextParameters().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("reasoningId", this.reasoningId);
        jsonWriter.writeStringField("reasoningString", this.reasoningString);
        jsonWriter.writeStringField("reasoningCategory", this.reasoningCategory);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlRecommendationReasoning from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlRecommendationReasoning if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlRecommendationReasoning.
     */
    public static SqlRecommendationReasoning fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlRecommendationReasoning deserializedSqlRecommendationReasoning = new SqlRecommendationReasoning();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("reasoningId".equals(fieldName)) {
                    deserializedSqlRecommendationReasoning.reasoningId = reader.getString();
                } else if ("reasoningString".equals(fieldName)) {
                    deserializedSqlRecommendationReasoning.reasoningString = reader.getString();
                } else if ("reasoningCategory".equals(fieldName)) {
                    deserializedSqlRecommendationReasoning.reasoningCategory = reader.getString();
                } else if ("contextParameters".equals(fieldName)) {
                    List<SqlRecommendationReasoningContext> contextParameters
                        = reader.readArray(reader1 -> SqlRecommendationReasoningContext.fromJson(reader1));
                    deserializedSqlRecommendationReasoning.contextParameters = contextParameters;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlRecommendationReasoning;
        });
    }
}
