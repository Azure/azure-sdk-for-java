// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Collector agent SPN details class.
 */
@Fluent
public final class CollectorAgentSpnPropertiesBase implements JsonSerializable<CollectorAgentSpnPropertiesBase> {
    /*
     * Gets the AAD authority endpoint.
     */
    private String authority;

    /*
     * Gets the AAD application id.
     */
    private String applicationId;

    /*
     * Gets the AAD audience url.
     */
    private String audience;

    /*
     * Gets the object id of the AAD application.
     */
    private String objectId;

    /*
     * Gets the tenant id of the AAD application.
     */
    private String tenantId;

    /**
     * Creates an instance of CollectorAgentSpnPropertiesBase class.
     */
    public CollectorAgentSpnPropertiesBase() {
    }

    /**
     * Get the authority property: Gets the AAD authority endpoint.
     * 
     * @return the authority value.
     */
    public String authority() {
        return this.authority;
    }

    /**
     * Set the authority property: Gets the AAD authority endpoint.
     * 
     * @param authority the authority value to set.
     * @return the CollectorAgentSpnPropertiesBase object itself.
     */
    public CollectorAgentSpnPropertiesBase withAuthority(String authority) {
        this.authority = authority;
        return this;
    }

    /**
     * Get the applicationId property: Gets the AAD application id.
     * 
     * @return the applicationId value.
     */
    public String applicationId() {
        return this.applicationId;
    }

    /**
     * Set the applicationId property: Gets the AAD application id.
     * 
     * @param applicationId the applicationId value to set.
     * @return the CollectorAgentSpnPropertiesBase object itself.
     */
    public CollectorAgentSpnPropertiesBase withApplicationId(String applicationId) {
        this.applicationId = applicationId;
        return this;
    }

    /**
     * Get the audience property: Gets the AAD audience url.
     * 
     * @return the audience value.
     */
    public String audience() {
        return this.audience;
    }

    /**
     * Set the audience property: Gets the AAD audience url.
     * 
     * @param audience the audience value to set.
     * @return the CollectorAgentSpnPropertiesBase object itself.
     */
    public CollectorAgentSpnPropertiesBase withAudience(String audience) {
        this.audience = audience;
        return this;
    }

    /**
     * Get the objectId property: Gets the object id of the AAD application.
     * 
     * @return the objectId value.
     */
    public String objectId() {
        return this.objectId;
    }

    /**
     * Set the objectId property: Gets the object id of the AAD application.
     * 
     * @param objectId the objectId value to set.
     * @return the CollectorAgentSpnPropertiesBase object itself.
     */
    public CollectorAgentSpnPropertiesBase withObjectId(String objectId) {
        this.objectId = objectId;
        return this;
    }

    /**
     * Get the tenantId property: Gets the tenant id of the AAD application.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Gets the tenant id of the AAD application.
     * 
     * @param tenantId the tenantId value to set.
     * @return the CollectorAgentSpnPropertiesBase object itself.
     */
    public CollectorAgentSpnPropertiesBase withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authority", this.authority);
        jsonWriter.writeStringField("applicationId", this.applicationId);
        jsonWriter.writeStringField("audience", this.audience);
        jsonWriter.writeStringField("objectId", this.objectId);
        jsonWriter.writeStringField("tenantId", this.tenantId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectorAgentSpnPropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectorAgentSpnPropertiesBase if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CollectorAgentSpnPropertiesBase.
     */
    public static CollectorAgentSpnPropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectorAgentSpnPropertiesBase deserializedCollectorAgentSpnPropertiesBase
                = new CollectorAgentSpnPropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("authority".equals(fieldName)) {
                    deserializedCollectorAgentSpnPropertiesBase.authority = reader.getString();
                } else if ("applicationId".equals(fieldName)) {
                    deserializedCollectorAgentSpnPropertiesBase.applicationId = reader.getString();
                } else if ("audience".equals(fieldName)) {
                    deserializedCollectorAgentSpnPropertiesBase.audience = reader.getString();
                } else if ("objectId".equals(fieldName)) {
                    deserializedCollectorAgentSpnPropertiesBase.objectId = reader.getString();
                } else if ("tenantId".equals(fieldName)) {
                    deserializedCollectorAgentSpnPropertiesBase.tenantId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCollectorAgentSpnPropertiesBase;
        });
    }
}
