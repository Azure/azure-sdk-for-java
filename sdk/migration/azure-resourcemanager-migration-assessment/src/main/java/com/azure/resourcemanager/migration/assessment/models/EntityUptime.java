// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Entity Uptime.
 */
@Fluent
public final class EntityUptime implements JsonSerializable<EntityUptime> {
    /*
     * Gets the days per month.
     */
    private Integer daysPerMonth;

    /*
     * Gets the hours per day.
     */
    private Integer hoursPerDay;

    /**
     * Creates an instance of EntityUptime class.
     */
    public EntityUptime() {
    }

    /**
     * Get the daysPerMonth property: Gets the days per month.
     * 
     * @return the daysPerMonth value.
     */
    public Integer daysPerMonth() {
        return this.daysPerMonth;
    }

    /**
     * Set the daysPerMonth property: Gets the days per month.
     * 
     * @param daysPerMonth the daysPerMonth value to set.
     * @return the EntityUptime object itself.
     */
    public EntityUptime withDaysPerMonth(Integer daysPerMonth) {
        this.daysPerMonth = daysPerMonth;
        return this;
    }

    /**
     * Get the hoursPerDay property: Gets the hours per day.
     * 
     * @return the hoursPerDay value.
     */
    public Integer hoursPerDay() {
        return this.hoursPerDay;
    }

    /**
     * Set the hoursPerDay property: Gets the hours per day.
     * 
     * @param hoursPerDay the hoursPerDay value to set.
     * @return the EntityUptime object itself.
     */
    public EntityUptime withHoursPerDay(Integer hoursPerDay) {
        this.hoursPerDay = hoursPerDay;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("daysPerMonth", this.daysPerMonth);
        jsonWriter.writeNumberField("hoursPerDay", this.hoursPerDay);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EntityUptime from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EntityUptime if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the EntityUptime.
     */
    public static EntityUptime fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EntityUptime deserializedEntityUptime = new EntityUptime();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("daysPerMonth".equals(fieldName)) {
                    deserializedEntityUptime.daysPerMonth = reader.getNullable(JsonReader::getInt);
                } else if ("hoursPerDay".equals(fieldName)) {
                    deserializedEntityUptime.hoursPerDay = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEntityUptime;
        });
    }
}
