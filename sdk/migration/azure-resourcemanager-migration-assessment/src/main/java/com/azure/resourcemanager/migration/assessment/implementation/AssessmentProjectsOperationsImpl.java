// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migration.assessment.fluent.AssessmentProjectsOperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.AssessmentProjectInner;
import com.azure.resourcemanager.migration.assessment.models.AssessmentProject;
import com.azure.resourcemanager.migration.assessment.models.AssessmentProjectsOperations;

public final class AssessmentProjectsOperationsImpl implements AssessmentProjectsOperations {
    private static final ClientLogger LOGGER = new ClientLogger(AssessmentProjectsOperationsImpl.class);

    private final AssessmentProjectsOperationsClient innerClient;

    private final com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager;

    public AssessmentProjectsOperationsImpl(AssessmentProjectsOperationsClient innerClient,
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<AssessmentProject> list() {
        PagedIterable<AssessmentProjectInner> inner = this.serviceClient().list();
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssessmentProjectImpl(inner1, this.manager()));
    }

    public PagedIterable<AssessmentProject> list(Context context) {
        PagedIterable<AssessmentProjectInner> inner = this.serviceClient().list(context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssessmentProjectImpl(inner1, this.manager()));
    }

    public PagedIterable<AssessmentProject> listByResourceGroup(String resourceGroupName) {
        PagedIterable<AssessmentProjectInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssessmentProjectImpl(inner1, this.manager()));
    }

    public PagedIterable<AssessmentProject> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<AssessmentProjectInner> inner
            = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AssessmentProjectImpl(inner1, this.manager()));
    }

    public Response<AssessmentProject> getByResourceGroupWithResponse(String resourceGroupName, String projectName,
        Context context) {
        Response<AssessmentProjectInner> inner
            = this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, projectName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AssessmentProjectImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AssessmentProject getByResourceGroup(String resourceGroupName, String projectName) {
        AssessmentProjectInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, projectName);
        if (inner != null) {
            return new AssessmentProjectImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteByResourceGroupWithResponse(String resourceGroupName, String projectName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, projectName, context);
    }

    public void deleteByResourceGroup(String resourceGroupName, String projectName) {
        this.serviceClient().delete(resourceGroupName, projectName);
    }

    public AssessmentProject getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, projectName, Context.NONE).getValue();
    }

    public Response<AssessmentProject> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, projectName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        this.deleteByResourceGroupWithResponse(resourceGroupName, projectName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        return this.deleteByResourceGroupWithResponse(resourceGroupName, projectName, context);
    }

    private AssessmentProjectsOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager() {
        return this.serviceManager;
    }

    public AssessmentProjectImpl define(String name) {
        return new AssessmentProjectImpl(name, this.manager());
    }
}
