// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Assessment options properties.
 */
@Immutable
public final class AssessmentOptionsProperties implements JsonSerializable<AssessmentOptionsProperties> {
    /*
     * Dictionary of VM families grouped by vm family name describing the targeted
     * azure locations of VM family and the category of the family.
     */
    private List<VmFamilyOptions> vmFamilies;

    /*
     * List of supported VM Families.
     */
    private List<String> reservedInstanceVmFamilies;

    /*
     * List of supported Azure regions for reserved instances.
     */
    private List<String> reservedInstanceSupportedLocations;

    /*
     * List of supported currencies for reserved instances.
     */
    private List<String> reservedInstanceSupportedCurrencies;

    /*
     * List of supported Azure offer codes for reserved instances.
     */
    private List<String> reservedInstanceSupportedOffers;

    /*
     * Ultra disk related assessment options.
     */
    private List<UltraDiskAssessmentOptions> ultraDiskVmFamilies;

    /*
     * List of VM Families that support premium disks for assessments.
     */
    private List<String> premiumDiskVmFamilies;

    /*
     * List of VM Families that support Savings plan offer for assessments.
     */
    private List<String> savingsPlanVmFamilies;

    /*
     * List of Azure locations that support Savings plan offer for assessments.
     */
    private List<String> savingsPlanSupportedLocations;

    /**
     * Creates an instance of AssessmentOptionsProperties class.
     */
    public AssessmentOptionsProperties() {
    }

    /**
     * Get the vmFamilies property: Dictionary of VM families grouped by vm family name describing the targeted
     * azure locations of VM family and the category of the family.
     * 
     * @return the vmFamilies value.
     */
    public List<VmFamilyOptions> vmFamilies() {
        return this.vmFamilies;
    }

    /**
     * Get the reservedInstanceVmFamilies property: List of supported VM Families.
     * 
     * @return the reservedInstanceVmFamilies value.
     */
    public List<String> reservedInstanceVmFamilies() {
        return this.reservedInstanceVmFamilies;
    }

    /**
     * Get the reservedInstanceSupportedLocations property: List of supported Azure regions for reserved instances.
     * 
     * @return the reservedInstanceSupportedLocations value.
     */
    public List<String> reservedInstanceSupportedLocations() {
        return this.reservedInstanceSupportedLocations;
    }

    /**
     * Get the reservedInstanceSupportedCurrencies property: List of supported currencies for reserved instances.
     * 
     * @return the reservedInstanceSupportedCurrencies value.
     */
    public List<String> reservedInstanceSupportedCurrencies() {
        return this.reservedInstanceSupportedCurrencies;
    }

    /**
     * Get the reservedInstanceSupportedOffers property: List of supported Azure offer codes for reserved instances.
     * 
     * @return the reservedInstanceSupportedOffers value.
     */
    public List<String> reservedInstanceSupportedOffers() {
        return this.reservedInstanceSupportedOffers;
    }

    /**
     * Get the ultraDiskVmFamilies property: Ultra disk related assessment options.
     * 
     * @return the ultraDiskVmFamilies value.
     */
    public List<UltraDiskAssessmentOptions> ultraDiskVmFamilies() {
        return this.ultraDiskVmFamilies;
    }

    /**
     * Get the premiumDiskVmFamilies property: List of VM Families that support premium disks for assessments.
     * 
     * @return the premiumDiskVmFamilies value.
     */
    public List<String> premiumDiskVmFamilies() {
        return this.premiumDiskVmFamilies;
    }

    /**
     * Get the savingsPlanVmFamilies property: List of VM Families that support Savings plan offer for assessments.
     * 
     * @return the savingsPlanVmFamilies value.
     */
    public List<String> savingsPlanVmFamilies() {
        return this.savingsPlanVmFamilies;
    }

    /**
     * Get the savingsPlanSupportedLocations property: List of Azure locations that support Savings plan offer for
     * assessments.
     * 
     * @return the savingsPlanSupportedLocations value.
     */
    public List<String> savingsPlanSupportedLocations() {
        return this.savingsPlanSupportedLocations;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (vmFamilies() != null) {
            vmFamilies().forEach(e -> e.validate());
        }
        if (ultraDiskVmFamilies() != null) {
            ultraDiskVmFamilies().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentOptionsProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentOptionsProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentOptionsProperties.
     */
    public static AssessmentOptionsProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentOptionsProperties deserializedAssessmentOptionsProperties = new AssessmentOptionsProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("vmFamilies".equals(fieldName)) {
                    List<VmFamilyOptions> vmFamilies = reader.readArray(reader1 -> VmFamilyOptions.fromJson(reader1));
                    deserializedAssessmentOptionsProperties.vmFamilies = vmFamilies;
                } else if ("reservedInstanceVmFamilies".equals(fieldName)) {
                    List<String> reservedInstanceVmFamilies = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.reservedInstanceVmFamilies = reservedInstanceVmFamilies;
                } else if ("reservedInstanceSupportedLocations".equals(fieldName)) {
                    List<String> reservedInstanceSupportedLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.reservedInstanceSupportedLocations
                        = reservedInstanceSupportedLocations;
                } else if ("reservedInstanceSupportedCurrencies".equals(fieldName)) {
                    List<String> reservedInstanceSupportedCurrencies = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.reservedInstanceSupportedCurrencies
                        = reservedInstanceSupportedCurrencies;
                } else if ("reservedInstanceSupportedOffers".equals(fieldName)) {
                    List<String> reservedInstanceSupportedOffers = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.reservedInstanceSupportedOffers
                        = reservedInstanceSupportedOffers;
                } else if ("ultraDiskVmFamilies".equals(fieldName)) {
                    List<UltraDiskAssessmentOptions> ultraDiskVmFamilies
                        = reader.readArray(reader1 -> UltraDiskAssessmentOptions.fromJson(reader1));
                    deserializedAssessmentOptionsProperties.ultraDiskVmFamilies = ultraDiskVmFamilies;
                } else if ("premiumDiskVmFamilies".equals(fieldName)) {
                    List<String> premiumDiskVmFamilies = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.premiumDiskVmFamilies = premiumDiskVmFamilies;
                } else if ("savingsPlanVmFamilies".equals(fieldName)) {
                    List<String> savingsPlanVmFamilies = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.savingsPlanVmFamilies = savingsPlanVmFamilies;
                } else if ("savingsPlanSupportedLocations".equals(fieldName)) {
                    List<String> savingsPlanSupportedLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedAssessmentOptionsProperties.savingsPlanSupportedLocations
                        = savingsPlanSupportedLocations;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentOptionsProperties;
        });
    }
}
