// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed Sql Instance Database Summary.
 */
@Fluent
public final class AssessedSqlInstanceDatabaseSummary implements JsonSerializable<AssessedSqlInstanceDatabaseSummary> {
    /*
     * Gets the number of user databases.
     */
    private Integer numberOfUserDatabases;

    /*
     * Gets the total database size in MB.
     */
    private Float totalDatabaseSizeInMB;

    /*
     * Gets the largest database size in MB.
     */
    private Float largestDatabaseSizeInMB;

    /*
     * Gets the total discovered user databases.
     */
    private Integer totalDiscoveredUserDatabases;

    /**
     * Creates an instance of AssessedSqlInstanceDatabaseSummary class.
     */
    public AssessedSqlInstanceDatabaseSummary() {
    }

    /**
     * Get the numberOfUserDatabases property: Gets the number of user databases.
     * 
     * @return the numberOfUserDatabases value.
     */
    public Integer numberOfUserDatabases() {
        return this.numberOfUserDatabases;
    }

    /**
     * Set the numberOfUserDatabases property: Gets the number of user databases.
     * 
     * @param numberOfUserDatabases the numberOfUserDatabases value to set.
     * @return the AssessedSqlInstanceDatabaseSummary object itself.
     */
    public AssessedSqlInstanceDatabaseSummary withNumberOfUserDatabases(Integer numberOfUserDatabases) {
        this.numberOfUserDatabases = numberOfUserDatabases;
        return this;
    }

    /**
     * Get the totalDatabaseSizeInMB property: Gets the total database size in MB.
     * 
     * @return the totalDatabaseSizeInMB value.
     */
    public Float totalDatabaseSizeInMB() {
        return this.totalDatabaseSizeInMB;
    }

    /**
     * Set the totalDatabaseSizeInMB property: Gets the total database size in MB.
     * 
     * @param totalDatabaseSizeInMB the totalDatabaseSizeInMB value to set.
     * @return the AssessedSqlInstanceDatabaseSummary object itself.
     */
    public AssessedSqlInstanceDatabaseSummary withTotalDatabaseSizeInMB(Float totalDatabaseSizeInMB) {
        this.totalDatabaseSizeInMB = totalDatabaseSizeInMB;
        return this;
    }

    /**
     * Get the largestDatabaseSizeInMB property: Gets the largest database size in MB.
     * 
     * @return the largestDatabaseSizeInMB value.
     */
    public Float largestDatabaseSizeInMB() {
        return this.largestDatabaseSizeInMB;
    }

    /**
     * Set the largestDatabaseSizeInMB property: Gets the largest database size in MB.
     * 
     * @param largestDatabaseSizeInMB the largestDatabaseSizeInMB value to set.
     * @return the AssessedSqlInstanceDatabaseSummary object itself.
     */
    public AssessedSqlInstanceDatabaseSummary withLargestDatabaseSizeInMB(Float largestDatabaseSizeInMB) {
        this.largestDatabaseSizeInMB = largestDatabaseSizeInMB;
        return this;
    }

    /**
     * Get the totalDiscoveredUserDatabases property: Gets the total discovered user databases.
     * 
     * @return the totalDiscoveredUserDatabases value.
     */
    public Integer totalDiscoveredUserDatabases() {
        return this.totalDiscoveredUserDatabases;
    }

    /**
     * Set the totalDiscoveredUserDatabases property: Gets the total discovered user databases.
     * 
     * @param totalDiscoveredUserDatabases the totalDiscoveredUserDatabases value to set.
     * @return the AssessedSqlInstanceDatabaseSummary object itself.
     */
    public AssessedSqlInstanceDatabaseSummary withTotalDiscoveredUserDatabases(Integer totalDiscoveredUserDatabases) {
        this.totalDiscoveredUserDatabases = totalDiscoveredUserDatabases;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("numberOfUserDatabases", this.numberOfUserDatabases);
        jsonWriter.writeNumberField("totalDatabaseSizeInMB", this.totalDatabaseSizeInMB);
        jsonWriter.writeNumberField("largestDatabaseSizeInMB", this.largestDatabaseSizeInMB);
        jsonWriter.writeNumberField("totalDiscoveredUserDatabases", this.totalDiscoveredUserDatabases);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlInstanceDatabaseSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlInstanceDatabaseSummary if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlInstanceDatabaseSummary.
     */
    public static AssessedSqlInstanceDatabaseSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlInstanceDatabaseSummary deserializedAssessedSqlInstanceDatabaseSummary
                = new AssessedSqlInstanceDatabaseSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfUserDatabases".equals(fieldName)) {
                    deserializedAssessedSqlInstanceDatabaseSummary.numberOfUserDatabases
                        = reader.getNullable(JsonReader::getInt);
                } else if ("totalDatabaseSizeInMB".equals(fieldName)) {
                    deserializedAssessedSqlInstanceDatabaseSummary.totalDatabaseSizeInMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("largestDatabaseSizeInMB".equals(fieldName)) {
                    deserializedAssessedSqlInstanceDatabaseSummary.largestDatabaseSizeInMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("totalDiscoveredUserDatabases".equals(fieldName)) {
                    deserializedAssessedSqlInstanceDatabaseSummary.totalDiscoveredUserDatabases
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlInstanceDatabaseSummary;
        });
    }
}
