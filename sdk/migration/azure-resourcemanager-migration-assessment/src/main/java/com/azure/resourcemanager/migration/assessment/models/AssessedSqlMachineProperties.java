// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Assessed SQL machine properties.
 */
@Fluent
public final class AssessedSqlMachineProperties implements JsonSerializable<AssessedSqlMachineProperties> {
    /*
     * Gets or sets the BIOS GUID for the machine.
     */
    private String biosGuid;

    /*
     * Gets or sets the FQDN for the machine.
     */
    private String fqdn;

    /*
     * Gets the list of SQL instances discovered on the machine.
     */
    private List<AssessedSqlInstanceSummary> sqlInstances;

    /*
     * Gets or sets the detailed messages that were set on the machine during
     * evaluation.
     */
    private AzureVmSuitabilityDetail suitabilityDetail;

    /*
     * Gets or sets the explanation if machine is not suitable for cloud.
     */
    private AzureVmSuitabilityExplanation suitabilityExplanation;

    /*
     * Gets or sets the Recommended Azure Size for the machine.
     */
    private AzureVmSize recommendedVmSize;

    /*
     * Gets or sets the Recommended Azure VM Family for the machine.
     */
    private AzureVmFamily recommendedVmFamily;

    /*
     * Gets the product support status related details.
     */
    private ProductSupportStatus productSupportStatus;

    /*
     * Gets or sets the Number of cores for recommended size.
     */
    private Integer recommendedVmSizeNumberOfCores;

    /*
     * Gets or sets the Megabytes of memory for recommended size.
     */
    private Float recommendedVmSizeMegabytesOfMemory;

    /*
     * Gets or sets the monthly compute cost calculated for recommended size.
     */
    private Float monthlyComputeCost;

    /*
     * Gets the list of data disks that were assessed as part of this assessment.
     */
    private Map<String, AssessedDiskData> disks;

    /*
     * Gets the list of network adapters that were assessed as part of this assessment.
     */
    private Map<String, SqlAssessedNetworkAdapter> networkAdapters;

    /*
     * Gets or sets the monthly networking cost.
     */
    private Float monthlyBandwidthCost;

    /*
     * Gets or sets the monthly total storage cost.
     */
    private Float monthlyStorageCost;

    /*
     * Gets the collection of cost components.
     */
    private List<CostComponent> costComponents;

    /*
     * Gets the suitability for Microsoft cloud defender.
     */
    private CloudSuitability securitySuitability;

    /*
     * Gets the list of migration guidelines applicable.
     */
    private List<SqlMigrationGuideline> migrationGuidelines;

    /*
     * Boot type of machine discovered in private data center.
     */
    private MachineBootType bootType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemName;

    /*
     * Operating system version as reported by datacenter management solution.
     */
    private String operatingSystemVersion;

    /*
     * Operating system architecture as reported by datacenter management solution.
     */
    private GuestOperatingSystemArchitecture operatingSystemArchitecture;

    /*
     * When was machine first created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * When was machine last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /*
     * Assessed machine type.
     */
    private AssessedMachineType type;

    /*
     * Description for the machine.
     */
    private String description;

    /*
     * Data center machine ARM id.
     */
    private String datacenterMachineArmId;

    /*
     * Data center management server ARM id.
     */
    private String datacenterManagementServerArmId;

    /*
     * Data center management server name.
     */
    private String datacenterManagementServerName;

    /*
     * Megabytes of memory found allocated for the machine in private data center.
     */
    private Float megabytesOfMemory;

    /*
     * Number of CPU cores found on the machine.
     */
    private Integer numberOfCores;

    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Percentile of Percentage of Cores Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageCoresUtilization;

    /*
     * Percentile of Percentage of Memory Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageMemoryUtilization;

    /*
     * Gets a value indicating whether machine is suitable for the cloud platform
     * selected.
     */
    private CloudSuitability suitability;

    /*
     * Assessment sizing criterion.
     */
    private AssessmentSizingCriterion sizingCriterion;

    /**
     * Creates an instance of AssessedSqlMachineProperties class.
     */
    public AssessedSqlMachineProperties() {
    }

    /**
     * Get the biosGuid property: Gets or sets the BIOS GUID for the machine.
     * 
     * @return the biosGuid value.
     */
    public String biosGuid() {
        return this.biosGuid;
    }

    /**
     * Get the fqdn property: Gets or sets the FQDN for the machine.
     * 
     * @return the fqdn value.
     */
    public String fqdn() {
        return this.fqdn;
    }

    /**
     * Get the sqlInstances property: Gets the list of SQL instances discovered on the machine.
     * 
     * @return the sqlInstances value.
     */
    public List<AssessedSqlInstanceSummary> sqlInstances() {
        return this.sqlInstances;
    }

    /**
     * Get the suitabilityDetail property: Gets or sets the detailed messages that were set on the machine during
     * evaluation.
     * 
     * @return the suitabilityDetail value.
     */
    public AzureVmSuitabilityDetail suitabilityDetail() {
        return this.suitabilityDetail;
    }

    /**
     * Get the suitabilityExplanation property: Gets or sets the explanation if machine is not suitable for cloud.
     * 
     * @return the suitabilityExplanation value.
     */
    public AzureVmSuitabilityExplanation suitabilityExplanation() {
        return this.suitabilityExplanation;
    }

    /**
     * Get the recommendedVmSize property: Gets or sets the Recommended Azure Size for the machine.
     * 
     * @return the recommendedVmSize value.
     */
    public AzureVmSize recommendedVmSize() {
        return this.recommendedVmSize;
    }

    /**
     * Get the recommendedVmFamily property: Gets or sets the Recommended Azure VM Family for the machine.
     * 
     * @return the recommendedVmFamily value.
     */
    public AzureVmFamily recommendedVmFamily() {
        return this.recommendedVmFamily;
    }

    /**
     * Get the productSupportStatus property: Gets the product support status related details.
     * 
     * @return the productSupportStatus value.
     */
    public ProductSupportStatus productSupportStatus() {
        return this.productSupportStatus;
    }

    /**
     * Get the recommendedVmSizeNumberOfCores property: Gets or sets the Number of cores for recommended size.
     * 
     * @return the recommendedVmSizeNumberOfCores value.
     */
    public Integer recommendedVmSizeNumberOfCores() {
        return this.recommendedVmSizeNumberOfCores;
    }

    /**
     * Get the recommendedVmSizeMegabytesOfMemory property: Gets or sets the Megabytes of memory for recommended size.
     * 
     * @return the recommendedVmSizeMegabytesOfMemory value.
     */
    public Float recommendedVmSizeMegabytesOfMemory() {
        return this.recommendedVmSizeMegabytesOfMemory;
    }

    /**
     * Get the monthlyComputeCost property: Gets or sets the monthly compute cost calculated for recommended size.
     * 
     * @return the monthlyComputeCost value.
     */
    public Float monthlyComputeCost() {
        return this.monthlyComputeCost;
    }

    /**
     * Get the disks property: Gets the list of data disks that were assessed as part of this assessment.
     * 
     * @return the disks value.
     */
    public Map<String, AssessedDiskData> disks() {
        return this.disks;
    }

    /**
     * Get the networkAdapters property: Gets the list of network adapters that were assessed as part of this
     * assessment.
     * 
     * @return the networkAdapters value.
     */
    public Map<String, SqlAssessedNetworkAdapter> networkAdapters() {
        return this.networkAdapters;
    }

    /**
     * Get the monthlyBandwidthCost property: Gets or sets the monthly networking cost.
     * 
     * @return the monthlyBandwidthCost value.
     */
    public Float monthlyBandwidthCost() {
        return this.monthlyBandwidthCost;
    }

    /**
     * Get the monthlyStorageCost property: Gets or sets the monthly total storage cost.
     * 
     * @return the monthlyStorageCost value.
     */
    public Float monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Get the costComponents property: Gets the collection of cost components.
     * 
     * @return the costComponents value.
     */
    public List<CostComponent> costComponents() {
        return this.costComponents;
    }

    /**
     * Set the costComponents property: Gets the collection of cost components.
     * 
     * @param costComponents the costComponents value to set.
     * @return the AssessedSqlMachineProperties object itself.
     */
    public AssessedSqlMachineProperties withCostComponents(List<CostComponent> costComponents) {
        this.costComponents = costComponents;
        return this;
    }

    /**
     * Get the securitySuitability property: Gets the suitability for Microsoft cloud defender.
     * 
     * @return the securitySuitability value.
     */
    public CloudSuitability securitySuitability() {
        return this.securitySuitability;
    }

    /**
     * Get the migrationGuidelines property: Gets the list of migration guidelines applicable.
     * 
     * @return the migrationGuidelines value.
     */
    public List<SqlMigrationGuideline> migrationGuidelines() {
        return this.migrationGuidelines;
    }

    /**
     * Get the bootType property: Boot type of machine discovered in private data center.
     * 
     * @return the bootType value.
     */
    public MachineBootType bootType() {
        return this.bootType;
    }

    /**
     * Get the operatingSystemType property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemType value.
     */
    public String operatingSystemType() {
        return this.operatingSystemType;
    }

    /**
     * Get the operatingSystemName property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemName value.
     */
    public String operatingSystemName() {
        return this.operatingSystemName;
    }

    /**
     * Get the operatingSystemVersion property: Operating system version as reported by datacenter management solution.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Get the operatingSystemArchitecture property: Operating system architecture as reported by datacenter management
     * solution.
     * 
     * @return the operatingSystemArchitecture value.
     */
    public GuestOperatingSystemArchitecture operatingSystemArchitecture() {
        return this.operatingSystemArchitecture;
    }

    /**
     * Get the createdTimestamp property: When was machine first created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: When was machine last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the type property: Assessed machine type.
     * 
     * @return the type value.
     */
    public AssessedMachineType type() {
        return this.type;
    }

    /**
     * Get the description property: Description for the machine.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the datacenterMachineArmId property: Data center machine ARM id.
     * 
     * @return the datacenterMachineArmId value.
     */
    public String datacenterMachineArmId() {
        return this.datacenterMachineArmId;
    }

    /**
     * Get the datacenterManagementServerArmId property: Data center management server ARM id.
     * 
     * @return the datacenterManagementServerArmId value.
     */
    public String datacenterManagementServerArmId() {
        return this.datacenterManagementServerArmId;
    }

    /**
     * Get the datacenterManagementServerName property: Data center management server name.
     * 
     * @return the datacenterManagementServerName value.
     */
    public String datacenterManagementServerName() {
        return this.datacenterManagementServerName;
    }

    /**
     * Get the megabytesOfMemory property: Megabytes of memory found allocated for the machine in private data center.
     * 
     * @return the megabytesOfMemory value.
     */
    public Float megabytesOfMemory() {
        return this.megabytesOfMemory;
    }

    /**
     * Get the numberOfCores property: Number of CPU cores found on the machine.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the percentageCoresUtilization property: Percentile of Percentage of Cores Utilized noted during time period
     * T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the percentageMemoryUtilization property: Percentile of Percentage of Memory Utilized noted during time
     * period T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageMemoryUtilization value.
     */
    public Float percentageMemoryUtilization() {
        return this.percentageMemoryUtilization;
    }

    /**
     * Get the suitability property: Gets a value indicating whether machine is suitable for the cloud platform
     * selected.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Get the sizingCriterion property: Assessment sizing criterion.
     * 
     * @return the sizingCriterion value.
     */
    public AssessmentSizingCriterion sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sqlInstances() != null) {
            sqlInstances().forEach(e -> e.validate());
        }
        if (productSupportStatus() != null) {
            productSupportStatus().validate();
        }
        if (disks() != null) {
            disks().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (networkAdapters() != null) {
            networkAdapters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
        if (migrationGuidelines() != null) {
            migrationGuidelines().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("costComponents", this.costComponents,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlMachineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlMachineProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlMachineProperties.
     */
    public static AssessedSqlMachineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlMachineProperties deserializedAssessedSqlMachineProperties = new AssessedSqlMachineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("biosGuid".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.biosGuid = reader.getString();
                } else if ("fqdn".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.fqdn = reader.getString();
                } else if ("sqlInstances".equals(fieldName)) {
                    List<AssessedSqlInstanceSummary> sqlInstances
                        = reader.readArray(reader1 -> AssessedSqlInstanceSummary.fromJson(reader1));
                    deserializedAssessedSqlMachineProperties.sqlInstances = sqlInstances;
                } else if ("suitabilityDetail".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.suitabilityDetail
                        = AzureVmSuitabilityDetail.fromString(reader.getString());
                } else if ("suitabilityExplanation".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.suitabilityExplanation
                        = AzureVmSuitabilityExplanation.fromString(reader.getString());
                } else if ("recommendedVmSize".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.recommendedVmSize
                        = AzureVmSize.fromString(reader.getString());
                } else if ("recommendedVmFamily".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.recommendedVmFamily
                        = AzureVmFamily.fromString(reader.getString());
                } else if ("productSupportStatus".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.productSupportStatus
                        = ProductSupportStatus.fromJson(reader);
                } else if ("recommendedVmSizeNumberOfCores".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.recommendedVmSizeNumberOfCores
                        = reader.getNullable(JsonReader::getInt);
                } else if ("recommendedVmSizeMegabytesOfMemory".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.recommendedVmSizeMegabytesOfMemory
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyComputeCost".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.monthlyComputeCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("disks".equals(fieldName)) {
                    Map<String, AssessedDiskData> disks = reader.readMap(reader1 -> AssessedDiskData.fromJson(reader1));
                    deserializedAssessedSqlMachineProperties.disks = disks;
                } else if ("networkAdapters".equals(fieldName)) {
                    Map<String, SqlAssessedNetworkAdapter> networkAdapters
                        = reader.readMap(reader1 -> SqlAssessedNetworkAdapter.fromJson(reader1));
                    deserializedAssessedSqlMachineProperties.networkAdapters = networkAdapters;
                } else if ("monthlyBandwidthCost".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.monthlyBandwidthCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyStorageCost".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.monthlyStorageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("costComponents".equals(fieldName)) {
                    List<CostComponent> costComponents = reader.readArray(reader1 -> CostComponent.fromJson(reader1));
                    deserializedAssessedSqlMachineProperties.costComponents = costComponents;
                } else if ("securitySuitability".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.securitySuitability
                        = CloudSuitability.fromString(reader.getString());
                } else if ("migrationGuidelines".equals(fieldName)) {
                    List<SqlMigrationGuideline> migrationGuidelines
                        = reader.readArray(reader1 -> SqlMigrationGuideline.fromJson(reader1));
                    deserializedAssessedSqlMachineProperties.migrationGuidelines = migrationGuidelines;
                } else if ("bootType".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.bootType = MachineBootType.fromString(reader.getString());
                } else if ("operatingSystemType".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.operatingSystemType = reader.getString();
                } else if ("operatingSystemName".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.operatingSystemName = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.operatingSystemVersion = reader.getString();
                } else if ("operatingSystemArchitecture".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.operatingSystemArchitecture
                        = GuestOperatingSystemArchitecture.fromString(reader.getString());
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.displayName = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.type = AssessedMachineType.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.description = reader.getString();
                } else if ("datacenterMachineArmId".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.datacenterMachineArmId = reader.getString();
                } else if ("datacenterManagementServerArmId".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.datacenterManagementServerArmId = reader.getString();
                } else if ("datacenterManagementServerName".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.datacenterManagementServerName = reader.getString();
                } else if ("megabytesOfMemory".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.megabytesOfMemory
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.numberOfCores = reader.getNullable(JsonReader::getInt);
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageMemoryUtilization".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.percentageMemoryUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("suitability".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.suitability
                        = CloudSuitability.fromString(reader.getString());
                } else if ("sizingCriterion".equals(fieldName)) {
                    deserializedAssessedSqlMachineProperties.sizingCriterion
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlMachineProperties;
        });
    }
}
