// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migration.assessment.fluent.ServerCollectorsOperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.ServerCollectorInner;
import com.azure.resourcemanager.migration.assessment.models.ServerCollector;
import com.azure.resourcemanager.migration.assessment.models.ServerCollectorsOperations;

public final class ServerCollectorsOperationsImpl implements ServerCollectorsOperations {
    private static final ClientLogger LOGGER = new ClientLogger(ServerCollectorsOperationsImpl.class);

    private final ServerCollectorsOperationsClient innerClient;

    private final com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager;

    public ServerCollectorsOperationsImpl(ServerCollectorsOperationsClient innerClient,
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<ServerCollector> listByAssessmentProject(String resourceGroupName, String projectName) {
        PagedIterable<ServerCollectorInner> inner
            = this.serviceClient().listByAssessmentProject(resourceGroupName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ServerCollectorImpl(inner1, this.manager()));
    }

    public PagedIterable<ServerCollector> listByAssessmentProject(String resourceGroupName, String projectName,
        Context context) {
        PagedIterable<ServerCollectorInner> inner
            = this.serviceClient().listByAssessmentProject(resourceGroupName, projectName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new ServerCollectorImpl(inner1, this.manager()));
    }

    public Response<ServerCollector> getWithResponse(String resourceGroupName, String projectName,
        String serverCollectorName, Context context) {
        Response<ServerCollectorInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, projectName, serverCollectorName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new ServerCollectorImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public ServerCollector get(String resourceGroupName, String projectName, String serverCollectorName) {
        ServerCollectorInner inner = this.serviceClient().get(resourceGroupName, projectName, serverCollectorName);
        if (inner != null) {
            return new ServerCollectorImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String projectName, String serverCollectorName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, projectName, serverCollectorName, context);
    }

    public void delete(String resourceGroupName, String projectName, String serverCollectorName) {
        this.serviceClient().delete(resourceGroupName, projectName, serverCollectorName);
    }

    public ServerCollector getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String serverCollectorName = ResourceManagerUtils.getValueFromIdByName(id, "servercollectors");
        if (serverCollectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servercollectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, serverCollectorName, Context.NONE).getValue();
    }

    public Response<ServerCollector> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String serverCollectorName = ResourceManagerUtils.getValueFromIdByName(id, "servercollectors");
        if (serverCollectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servercollectors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, projectName, serverCollectorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String serverCollectorName = ResourceManagerUtils.getValueFromIdByName(id, "servercollectors");
        if (serverCollectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servercollectors'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, projectName, serverCollectorName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String projectName = ResourceManagerUtils.getValueFromIdByName(id, "assessmentProjects");
        if (projectName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'assessmentProjects'.", id)));
        }
        String serverCollectorName = ResourceManagerUtils.getValueFromIdByName(id, "servercollectors");
        if (serverCollectorName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'servercollectors'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, projectName, serverCollectorName, context);
    }

    private ServerCollectorsOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager() {
        return this.serviceManager;
    }

    public ServerCollectorImpl define(String name) {
        return new ServerCollectorImpl(name, this.manager());
    }
}
