// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Assessed machine properties class.
 */
@Fluent
public final class AssessedMachineProperties implements JsonSerializable<AssessedMachineProperties> {
    /*
     * List of errors for this machine.
     */
    private List<Error> errors;

    /*
     * Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.
     */
    private Map<String, AssessedDisk> disks;

    /*
     * Monthly ultra storage cost.
     */
    private Float monthlyUltraStorageCost;

    /*
     * Gets or sets the processor details of the host.
     */
    private ProcessorInfo hostProcessor;

    /*
     * Gets or sets the collection of cost components.
     */
    private List<CostComponent> costComponents;

    /*
     * Gets the product support status related details.
     */
    private ProductSupportStatus productSupportStatus;

    /*
     * Monthly networking cost.
     */
    private Float monthlyBandwidthCost;

    /*
     * Monthly storage cost.
     */
    private Float monthlyStorageCost;

    /*
     * Monthly premium storage cost.
     */
    private Float monthlyPremiumStorageCost;

    /*
     * Monthly standard SSD storage cost.
     */
    private Float monthlyStandardSsdStorageCost;

    /*
     * List of Network Adapters that were assessed as part of this machine's
     * assessment.
     */
    private Map<String, AssessedNetworkAdapter> networkAdapters;

    /*
     * Recommended Azure Size for the machine.
     */
    private AzureVmSize recommendedSize;

    /*
     * Number of cores for recommended size. Read Only.
     */
    private Integer numberOfCoresForRecommendedSize;

    /*
     * Megabytes of memory for recommended size. Read Only.
     */
    private Float megabytesOfMemoryForRecommendedSize;

    /*
     * Monthly Compute cost calculated for Recommended size, for a 31-day month.
     */
    private Float monthlyComputeCostForRecommendedSize;

    /*
     * Gets the explanation if machine is not suitable for cloud.
     */
    private AzureVmSuitabilityExplanation suitabilityExplanation;

    /*
     * Gets the details if machine is not suitable for cloud.
     */
    private AzureVmSuitabilityDetail suitabilityDetail;

    /*
     * Assessed machine type.
     */
    private AssessedMachineType type;

    /*
     * Boot type of machine discovered in private data center.
     */
    private MachineBootType bootType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemName;

    /*
     * Operating system version as reported by datacenter management solution.
     */
    private String operatingSystemVersion;

    /*
     * Operating system architecture as reported by datacenter management solution.
     */
    private GuestOperatingSystemArchitecture operatingSystemArchitecture;

    /*
     * When was machine first created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * When was machine last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /*
     * Description for the machine.
     */
    private String description;

    /*
     * Data center machine ARM id.
     */
    private String datacenterMachineArmId;

    /*
     * Data center management server ARM id.
     */
    private String datacenterManagementServerArmId;

    /*
     * Data center management server name.
     */
    private String datacenterManagementServerName;

    /*
     * Megabytes of memory found allocated for the machine in private data center.
     */
    private Float megabytesOfMemory;

    /*
     * Number of CPU cores found on the machine.
     */
    private Integer numberOfCores;

    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Percentile of Percentage of Cores Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageCoresUtilization;

    /*
     * Percentile of Percentage of Memory Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageMemoryUtilization;

    /*
     * Gets a value indicating whether machine is suitable for the cloud platform
     * selected.
     */
    private CloudSuitability suitability;

    /**
     * Creates an instance of AssessedMachineProperties class.
     */
    public AssessedMachineProperties() {
    }

    /**
     * Get the errors property: List of errors for this machine.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Get the disks property: Dictionary of disks attached to the machine. Key is ID of disk. Value is a disk object.
     * 
     * @return the disks value.
     */
    public Map<String, AssessedDisk> disks() {
        return this.disks;
    }

    /**
     * Get the monthlyUltraStorageCost property: Monthly ultra storage cost.
     * 
     * @return the monthlyUltraStorageCost value.
     */
    public Float monthlyUltraStorageCost() {
        return this.monthlyUltraStorageCost;
    }

    /**
     * Get the hostProcessor property: Gets or sets the processor details of the host.
     * 
     * @return the hostProcessor value.
     */
    public ProcessorInfo hostProcessor() {
        return this.hostProcessor;
    }

    /**
     * Set the hostProcessor property: Gets or sets the processor details of the host.
     * 
     * @param hostProcessor the hostProcessor value to set.
     * @return the AssessedMachineProperties object itself.
     */
    public AssessedMachineProperties withHostProcessor(ProcessorInfo hostProcessor) {
        this.hostProcessor = hostProcessor;
        return this;
    }

    /**
     * Get the costComponents property: Gets or sets the collection of cost components.
     * 
     * @return the costComponents value.
     */
    public List<CostComponent> costComponents() {
        return this.costComponents;
    }

    /**
     * Set the costComponents property: Gets or sets the collection of cost components.
     * 
     * @param costComponents the costComponents value to set.
     * @return the AssessedMachineProperties object itself.
     */
    public AssessedMachineProperties withCostComponents(List<CostComponent> costComponents) {
        this.costComponents = costComponents;
        return this;
    }

    /**
     * Get the productSupportStatus property: Gets the product support status related details.
     * 
     * @return the productSupportStatus value.
     */
    public ProductSupportStatus productSupportStatus() {
        return this.productSupportStatus;
    }

    /**
     * Get the monthlyBandwidthCost property: Monthly networking cost.
     * 
     * @return the monthlyBandwidthCost value.
     */
    public Float monthlyBandwidthCost() {
        return this.monthlyBandwidthCost;
    }

    /**
     * Get the monthlyStorageCost property: Monthly storage cost.
     * 
     * @return the monthlyStorageCost value.
     */
    public Float monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Get the monthlyPremiumStorageCost property: Monthly premium storage cost.
     * 
     * @return the monthlyPremiumStorageCost value.
     */
    public Float monthlyPremiumStorageCost() {
        return this.monthlyPremiumStorageCost;
    }

    /**
     * Get the monthlyStandardSsdStorageCost property: Monthly standard SSD storage cost.
     * 
     * @return the monthlyStandardSsdStorageCost value.
     */
    public Float monthlyStandardSsdStorageCost() {
        return this.monthlyStandardSsdStorageCost;
    }

    /**
     * Get the networkAdapters property: List of Network Adapters that were assessed as part of this machine's
     * assessment.
     * 
     * @return the networkAdapters value.
     */
    public Map<String, AssessedNetworkAdapter> networkAdapters() {
        return this.networkAdapters;
    }

    /**
     * Get the recommendedSize property: Recommended Azure Size for the machine.
     * 
     * @return the recommendedSize value.
     */
    public AzureVmSize recommendedSize() {
        return this.recommendedSize;
    }

    /**
     * Get the numberOfCoresForRecommendedSize property: Number of cores for recommended size. Read Only.
     * 
     * @return the numberOfCoresForRecommendedSize value.
     */
    public Integer numberOfCoresForRecommendedSize() {
        return this.numberOfCoresForRecommendedSize;
    }

    /**
     * Get the megabytesOfMemoryForRecommendedSize property: Megabytes of memory for recommended size. Read Only.
     * 
     * @return the megabytesOfMemoryForRecommendedSize value.
     */
    public Float megabytesOfMemoryForRecommendedSize() {
        return this.megabytesOfMemoryForRecommendedSize;
    }

    /**
     * Get the monthlyComputeCostForRecommendedSize property: Monthly Compute cost calculated for Recommended size, for
     * a 31-day month.
     * 
     * @return the monthlyComputeCostForRecommendedSize value.
     */
    public Float monthlyComputeCostForRecommendedSize() {
        return this.monthlyComputeCostForRecommendedSize;
    }

    /**
     * Get the suitabilityExplanation property: Gets the explanation if machine is not suitable for cloud.
     * 
     * @return the suitabilityExplanation value.
     */
    public AzureVmSuitabilityExplanation suitabilityExplanation() {
        return this.suitabilityExplanation;
    }

    /**
     * Get the suitabilityDetail property: Gets the details if machine is not suitable for cloud.
     * 
     * @return the suitabilityDetail value.
     */
    public AzureVmSuitabilityDetail suitabilityDetail() {
        return this.suitabilityDetail;
    }

    /**
     * Get the type property: Assessed machine type.
     * 
     * @return the type value.
     */
    public AssessedMachineType type() {
        return this.type;
    }

    /**
     * Get the bootType property: Boot type of machine discovered in private data center.
     * 
     * @return the bootType value.
     */
    public MachineBootType bootType() {
        return this.bootType;
    }

    /**
     * Get the operatingSystemType property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemType value.
     */
    public String operatingSystemType() {
        return this.operatingSystemType;
    }

    /**
     * Get the operatingSystemName property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemName value.
     */
    public String operatingSystemName() {
        return this.operatingSystemName;
    }

    /**
     * Get the operatingSystemVersion property: Operating system version as reported by datacenter management solution.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Get the operatingSystemArchitecture property: Operating system architecture as reported by datacenter management
     * solution.
     * 
     * @return the operatingSystemArchitecture value.
     */
    public GuestOperatingSystemArchitecture operatingSystemArchitecture() {
        return this.operatingSystemArchitecture;
    }

    /**
     * Get the createdTimestamp property: When was machine first created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: When was machine last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Description for the machine.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the datacenterMachineArmId property: Data center machine ARM id.
     * 
     * @return the datacenterMachineArmId value.
     */
    public String datacenterMachineArmId() {
        return this.datacenterMachineArmId;
    }

    /**
     * Get the datacenterManagementServerArmId property: Data center management server ARM id.
     * 
     * @return the datacenterManagementServerArmId value.
     */
    public String datacenterManagementServerArmId() {
        return this.datacenterManagementServerArmId;
    }

    /**
     * Get the datacenterManagementServerName property: Data center management server name.
     * 
     * @return the datacenterManagementServerName value.
     */
    public String datacenterManagementServerName() {
        return this.datacenterManagementServerName;
    }

    /**
     * Get the megabytesOfMemory property: Megabytes of memory found allocated for the machine in private data center.
     * 
     * @return the megabytesOfMemory value.
     */
    public Float megabytesOfMemory() {
        return this.megabytesOfMemory;
    }

    /**
     * Get the numberOfCores property: Number of CPU cores found on the machine.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the percentageCoresUtilization property: Percentile of Percentage of Cores Utilized noted during time period
     * T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the percentageMemoryUtilization property: Percentile of Percentage of Memory Utilized noted during time
     * period T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageMemoryUtilization value.
     */
    public Float percentageMemoryUtilization() {
        return this.percentageMemoryUtilization;
    }

    /**
     * Get the suitability property: Gets a value indicating whether machine is suitable for the cloud platform
     * selected.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (hostProcessor() != null) {
            hostProcessor().validate();
        }
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
        if (productSupportStatus() != null) {
            productSupportStatus().validate();
        }
        if (networkAdapters() != null) {
            networkAdapters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("hostProcessor", this.hostProcessor);
        jsonWriter.writeArrayField("costComponents", this.costComponents,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedMachineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedMachineProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedMachineProperties.
     */
    public static AssessedMachineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedMachineProperties deserializedAssessedMachineProperties = new AssessedMachineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedAssessedMachineProperties.errors = errors;
                } else if ("disks".equals(fieldName)) {
                    Map<String, AssessedDisk> disks = reader.readMap(reader1 -> AssessedDisk.fromJson(reader1));
                    deserializedAssessedMachineProperties.disks = disks;
                } else if ("monthlyUltraStorageCost".equals(fieldName)) {
                    deserializedAssessedMachineProperties.monthlyUltraStorageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("hostProcessor".equals(fieldName)) {
                    deserializedAssessedMachineProperties.hostProcessor = ProcessorInfo.fromJson(reader);
                } else if ("costComponents".equals(fieldName)) {
                    List<CostComponent> costComponents = reader.readArray(reader1 -> CostComponent.fromJson(reader1));
                    deserializedAssessedMachineProperties.costComponents = costComponents;
                } else if ("productSupportStatus".equals(fieldName)) {
                    deserializedAssessedMachineProperties.productSupportStatus = ProductSupportStatus.fromJson(reader);
                } else if ("monthlyBandwidthCost".equals(fieldName)) {
                    deserializedAssessedMachineProperties.monthlyBandwidthCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyStorageCost".equals(fieldName)) {
                    deserializedAssessedMachineProperties.monthlyStorageCost = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyPremiumStorageCost".equals(fieldName)) {
                    deserializedAssessedMachineProperties.monthlyPremiumStorageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyStandardSsdStorageCost".equals(fieldName)) {
                    deserializedAssessedMachineProperties.monthlyStandardSsdStorageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("networkAdapters".equals(fieldName)) {
                    Map<String, AssessedNetworkAdapter> networkAdapters
                        = reader.readMap(reader1 -> AssessedNetworkAdapter.fromJson(reader1));
                    deserializedAssessedMachineProperties.networkAdapters = networkAdapters;
                } else if ("recommendedSize".equals(fieldName)) {
                    deserializedAssessedMachineProperties.recommendedSize = AzureVmSize.fromString(reader.getString());
                } else if ("numberOfCoresForRecommendedSize".equals(fieldName)) {
                    deserializedAssessedMachineProperties.numberOfCoresForRecommendedSize
                        = reader.getNullable(JsonReader::getInt);
                } else if ("megabytesOfMemoryForRecommendedSize".equals(fieldName)) {
                    deserializedAssessedMachineProperties.megabytesOfMemoryForRecommendedSize
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyComputeCostForRecommendedSize".equals(fieldName)) {
                    deserializedAssessedMachineProperties.monthlyComputeCostForRecommendedSize
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("suitabilityExplanation".equals(fieldName)) {
                    deserializedAssessedMachineProperties.suitabilityExplanation
                        = AzureVmSuitabilityExplanation.fromString(reader.getString());
                } else if ("suitabilityDetail".equals(fieldName)) {
                    deserializedAssessedMachineProperties.suitabilityDetail
                        = AzureVmSuitabilityDetail.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedAssessedMachineProperties.type = AssessedMachineType.fromString(reader.getString());
                } else if ("bootType".equals(fieldName)) {
                    deserializedAssessedMachineProperties.bootType = MachineBootType.fromString(reader.getString());
                } else if ("operatingSystemType".equals(fieldName)) {
                    deserializedAssessedMachineProperties.operatingSystemType = reader.getString();
                } else if ("operatingSystemName".equals(fieldName)) {
                    deserializedAssessedMachineProperties.operatingSystemName = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedAssessedMachineProperties.operatingSystemVersion = reader.getString();
                } else if ("operatingSystemArchitecture".equals(fieldName)) {
                    deserializedAssessedMachineProperties.operatingSystemArchitecture
                        = GuestOperatingSystemArchitecture.fromString(reader.getString());
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessedMachineProperties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessedMachineProperties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedMachineProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAssessedMachineProperties.description = reader.getString();
                } else if ("datacenterMachineArmId".equals(fieldName)) {
                    deserializedAssessedMachineProperties.datacenterMachineArmId = reader.getString();
                } else if ("datacenterManagementServerArmId".equals(fieldName)) {
                    deserializedAssessedMachineProperties.datacenterManagementServerArmId = reader.getString();
                } else if ("datacenterManagementServerName".equals(fieldName)) {
                    deserializedAssessedMachineProperties.datacenterManagementServerName = reader.getString();
                } else if ("megabytesOfMemory".equals(fieldName)) {
                    deserializedAssessedMachineProperties.megabytesOfMemory = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedAssessedMachineProperties.numberOfCores = reader.getNullable(JsonReader::getInt);
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAssessedMachineProperties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedAssessedMachineProperties.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageMemoryUtilization".equals(fieldName)) {
                    deserializedAssessedMachineProperties.percentageMemoryUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("suitability".equals(fieldName)) {
                    deserializedAssessedMachineProperties.suitability = CloudSuitability.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedMachineProperties;
        });
    }
}
