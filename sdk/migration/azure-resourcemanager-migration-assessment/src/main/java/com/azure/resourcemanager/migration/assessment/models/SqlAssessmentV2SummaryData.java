// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * SQL Assessment V2 summary data.
 */
@Immutable
public final class SqlAssessmentV2SummaryData implements JsonSerializable<SqlAssessmentV2SummaryData> {
    /*
     * Sql assessment summary data
     */
    private Map<String, Integer> suitabilitySummary;

    /*
     * Monthly compute cost
     */
    private Float monthlyComputeCost;

    /*
     * Monthly storage cost
     */
    private Float monthlyStorageCost;

    /*
     * Monthly license cost
     */
    private Float monthlyLicenseCost;

    /*
     * Confidence Rating
     */
    private Float confidenceScore;

    /*
     * Monthly security cost
     */
    private Float monthlySecurityCost;

    /**
     * Creates an instance of SqlAssessmentV2SummaryData class.
     */
    public SqlAssessmentV2SummaryData() {
    }

    /**
     * Get the suitabilitySummary property: Sql assessment summary data.
     * 
     * @return the suitabilitySummary value.
     */
    public Map<String, Integer> suitabilitySummary() {
        return this.suitabilitySummary;
    }

    /**
     * Get the monthlyComputeCost property: Monthly compute cost.
     * 
     * @return the monthlyComputeCost value.
     */
    public Float monthlyComputeCost() {
        return this.monthlyComputeCost;
    }

    /**
     * Get the monthlyStorageCost property: Monthly storage cost.
     * 
     * @return the monthlyStorageCost value.
     */
    public Float monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Get the monthlyLicenseCost property: Monthly license cost.
     * 
     * @return the monthlyLicenseCost value.
     */
    public Float monthlyLicenseCost() {
        return this.monthlyLicenseCost;
    }

    /**
     * Get the confidenceScore property: Confidence Rating.
     * 
     * @return the confidenceScore value.
     */
    public Float confidenceScore() {
        return this.confidenceScore;
    }

    /**
     * Get the monthlySecurityCost property: Monthly security cost.
     * 
     * @return the monthlySecurityCost value.
     */
    public Float monthlySecurityCost() {
        return this.monthlySecurityCost;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessmentV2SummaryData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessmentV2SummaryData if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessmentV2SummaryData.
     */
    public static SqlAssessmentV2SummaryData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessmentV2SummaryData deserializedSqlAssessmentV2SummaryData = new SqlAssessmentV2SummaryData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suitabilitySummary".equals(fieldName)) {
                    Map<String, Integer> suitabilitySummary = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryData.suitabilitySummary = suitabilitySummary;
                } else if ("monthlyComputeCost".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryData.monthlyComputeCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyStorageCost".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryData.monthlyStorageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyLicenseCost".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryData.monthlyLicenseCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("confidenceScore".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryData.confidenceScore = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlySecurityCost".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryData.monthlySecurityCost
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessmentV2SummaryData;
        });
    }
}
