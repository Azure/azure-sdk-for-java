// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Azure Virtual Machine SKU.
 */
@Immutable
public final class AzureVirtualMachineSkuDto implements JsonSerializable<AzureVirtualMachineSkuDto> {
    /*
     * Gets the Virtual Machine Family, for example : standardMSFamily.
     */
    private AzureVmFamily azureVmFamily;

    /*
     * Gets the Compute Size in vCores.
     */
    private Integer cores;

    /*
     * Gets the Virtual Machine SKU name,: E.g. : Standard_F16s.
     */
    private AzureVmSize azureSkuName;

    /*
     * Gets the Available vCores. This can be less than the vCores in the Constrained
     * vCPU VM Sizes.
     */
    private Integer availableCores;

    /*
     * Gets the Max network interfaces.
     */
    private Integer maxNetworkInterfaces;

    /**
     * Creates an instance of AzureVirtualMachineSkuDto class.
     */
    public AzureVirtualMachineSkuDto() {
    }

    /**
     * Get the azureVmFamily property: Gets the Virtual Machine Family, for example : standardMSFamily.
     * 
     * @return the azureVmFamily value.
     */
    public AzureVmFamily azureVmFamily() {
        return this.azureVmFamily;
    }

    /**
     * Get the cores property: Gets the Compute Size in vCores.
     * 
     * @return the cores value.
     */
    public Integer cores() {
        return this.cores;
    }

    /**
     * Get the azureSkuName property: Gets the Virtual Machine SKU name,: E.g. : Standard_F16s.
     * 
     * @return the azureSkuName value.
     */
    public AzureVmSize azureSkuName() {
        return this.azureSkuName;
    }

    /**
     * Get the availableCores property: Gets the Available vCores. This can be less than the vCores in the Constrained
     * vCPU VM Sizes.
     * 
     * @return the availableCores value.
     */
    public Integer availableCores() {
        return this.availableCores;
    }

    /**
     * Get the maxNetworkInterfaces property: Gets the Max network interfaces.
     * 
     * @return the maxNetworkInterfaces value.
     */
    public Integer maxNetworkInterfaces() {
        return this.maxNetworkInterfaces;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AzureVirtualMachineSkuDto from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AzureVirtualMachineSkuDto if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AzureVirtualMachineSkuDto.
     */
    public static AzureVirtualMachineSkuDto fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AzureVirtualMachineSkuDto deserializedAzureVirtualMachineSkuDto = new AzureVirtualMachineSkuDto();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureVmFamily".equals(fieldName)) {
                    deserializedAzureVirtualMachineSkuDto.azureVmFamily = AzureVmFamily.fromString(reader.getString());
                } else if ("cores".equals(fieldName)) {
                    deserializedAzureVirtualMachineSkuDto.cores = reader.getNullable(JsonReader::getInt);
                } else if ("azureSkuName".equals(fieldName)) {
                    deserializedAzureVirtualMachineSkuDto.azureSkuName = AzureVmSize.fromString(reader.getString());
                } else if ("availableCores".equals(fieldName)) {
                    deserializedAzureVirtualMachineSkuDto.availableCores = reader.getNullable(JsonReader::getInt);
                } else if ("maxNetworkInterfaces".equals(fieldName)) {
                    deserializedAzureVirtualMachineSkuDto.maxNetworkInterfaces = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAzureVirtualMachineSkuDto;
        });
    }
}
