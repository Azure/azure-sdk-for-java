// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed Sql Availability Replica Summary.
 */
@Fluent
public final class SqlAvailabilityReplicaSummary implements JsonSerializable<SqlAvailabilityReplicaSummary> {
    /*
     * Gets the number Of synchronous read replicas.
     */
    private Integer numberOfSynchronousReadReplicas;

    /*
     * Gets the number Of synchronous non read replicas.
     */
    private Integer numberOfSynchronousNonReadReplicas;

    /*
     * Gets the number Of asynchronous read replicas.
     */
    private Integer numberOfAsynchronousReadReplicas;

    /*
     * Gets the number Of asynchronous non read replicas.
     */
    private Integer numberOfAsynchronousNonReadReplicas;

    /*
     * Gets the number Of primary replicas.
     */
    private Integer numberOfPrimaryReplicas;

    /**
     * Creates an instance of SqlAvailabilityReplicaSummary class.
     */
    public SqlAvailabilityReplicaSummary() {
    }

    /**
     * Get the numberOfSynchronousReadReplicas property: Gets the number Of synchronous read replicas.
     * 
     * @return the numberOfSynchronousReadReplicas value.
     */
    public Integer numberOfSynchronousReadReplicas() {
        return this.numberOfSynchronousReadReplicas;
    }

    /**
     * Set the numberOfSynchronousReadReplicas property: Gets the number Of synchronous read replicas.
     * 
     * @param numberOfSynchronousReadReplicas the numberOfSynchronousReadReplicas value to set.
     * @return the SqlAvailabilityReplicaSummary object itself.
     */
    public SqlAvailabilityReplicaSummary withNumberOfSynchronousReadReplicas(Integer numberOfSynchronousReadReplicas) {
        this.numberOfSynchronousReadReplicas = numberOfSynchronousReadReplicas;
        return this;
    }

    /**
     * Get the numberOfSynchronousNonReadReplicas property: Gets the number Of synchronous non read replicas.
     * 
     * @return the numberOfSynchronousNonReadReplicas value.
     */
    public Integer numberOfSynchronousNonReadReplicas() {
        return this.numberOfSynchronousNonReadReplicas;
    }

    /**
     * Set the numberOfSynchronousNonReadReplicas property: Gets the number Of synchronous non read replicas.
     * 
     * @param numberOfSynchronousNonReadReplicas the numberOfSynchronousNonReadReplicas value to set.
     * @return the SqlAvailabilityReplicaSummary object itself.
     */
    public SqlAvailabilityReplicaSummary
        withNumberOfSynchronousNonReadReplicas(Integer numberOfSynchronousNonReadReplicas) {
        this.numberOfSynchronousNonReadReplicas = numberOfSynchronousNonReadReplicas;
        return this;
    }

    /**
     * Get the numberOfAsynchronousReadReplicas property: Gets the number Of asynchronous read replicas.
     * 
     * @return the numberOfAsynchronousReadReplicas value.
     */
    public Integer numberOfAsynchronousReadReplicas() {
        return this.numberOfAsynchronousReadReplicas;
    }

    /**
     * Set the numberOfAsynchronousReadReplicas property: Gets the number Of asynchronous read replicas.
     * 
     * @param numberOfAsynchronousReadReplicas the numberOfAsynchronousReadReplicas value to set.
     * @return the SqlAvailabilityReplicaSummary object itself.
     */
    public SqlAvailabilityReplicaSummary
        withNumberOfAsynchronousReadReplicas(Integer numberOfAsynchronousReadReplicas) {
        this.numberOfAsynchronousReadReplicas = numberOfAsynchronousReadReplicas;
        return this;
    }

    /**
     * Get the numberOfAsynchronousNonReadReplicas property: Gets the number Of asynchronous non read replicas.
     * 
     * @return the numberOfAsynchronousNonReadReplicas value.
     */
    public Integer numberOfAsynchronousNonReadReplicas() {
        return this.numberOfAsynchronousNonReadReplicas;
    }

    /**
     * Set the numberOfAsynchronousNonReadReplicas property: Gets the number Of asynchronous non read replicas.
     * 
     * @param numberOfAsynchronousNonReadReplicas the numberOfAsynchronousNonReadReplicas value to set.
     * @return the SqlAvailabilityReplicaSummary object itself.
     */
    public SqlAvailabilityReplicaSummary
        withNumberOfAsynchronousNonReadReplicas(Integer numberOfAsynchronousNonReadReplicas) {
        this.numberOfAsynchronousNonReadReplicas = numberOfAsynchronousNonReadReplicas;
        return this;
    }

    /**
     * Get the numberOfPrimaryReplicas property: Gets the number Of primary replicas.
     * 
     * @return the numberOfPrimaryReplicas value.
     */
    public Integer numberOfPrimaryReplicas() {
        return this.numberOfPrimaryReplicas;
    }

    /**
     * Set the numberOfPrimaryReplicas property: Gets the number Of primary replicas.
     * 
     * @param numberOfPrimaryReplicas the numberOfPrimaryReplicas value to set.
     * @return the SqlAvailabilityReplicaSummary object itself.
     */
    public SqlAvailabilityReplicaSummary withNumberOfPrimaryReplicas(Integer numberOfPrimaryReplicas) {
        this.numberOfPrimaryReplicas = numberOfPrimaryReplicas;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("numberOfSynchronousReadReplicas", this.numberOfSynchronousReadReplicas);
        jsonWriter.writeNumberField("numberOfSynchronousNonReadReplicas", this.numberOfSynchronousNonReadReplicas);
        jsonWriter.writeNumberField("numberOfAsynchronousReadReplicas", this.numberOfAsynchronousReadReplicas);
        jsonWriter.writeNumberField("numberOfAsynchronousNonReadReplicas", this.numberOfAsynchronousNonReadReplicas);
        jsonWriter.writeNumberField("numberOfPrimaryReplicas", this.numberOfPrimaryReplicas);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAvailabilityReplicaSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAvailabilityReplicaSummary if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAvailabilityReplicaSummary.
     */
    public static SqlAvailabilityReplicaSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAvailabilityReplicaSummary deserializedSqlAvailabilityReplicaSummary
                = new SqlAvailabilityReplicaSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("numberOfSynchronousReadReplicas".equals(fieldName)) {
                    deserializedSqlAvailabilityReplicaSummary.numberOfSynchronousReadReplicas
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfSynchronousNonReadReplicas".equals(fieldName)) {
                    deserializedSqlAvailabilityReplicaSummary.numberOfSynchronousNonReadReplicas
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfAsynchronousReadReplicas".equals(fieldName)) {
                    deserializedSqlAvailabilityReplicaSummary.numberOfAsynchronousReadReplicas
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfAsynchronousNonReadReplicas".equals(fieldName)) {
                    deserializedSqlAvailabilityReplicaSummary.numberOfAsynchronousNonReadReplicas
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfPrimaryReplicas".equals(fieldName)) {
                    deserializedSqlAvailabilityReplicaSummary.numberOfPrimaryReplicas
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAvailabilityReplicaSummary;
        });
    }
}
