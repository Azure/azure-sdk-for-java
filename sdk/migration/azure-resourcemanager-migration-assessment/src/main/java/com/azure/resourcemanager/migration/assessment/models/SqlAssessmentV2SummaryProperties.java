// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.Map;

/**
 * SQL Assessment V2 summary properties.
 */
@Immutable
public final class SqlAssessmentV2SummaryProperties implements JsonSerializable<SqlAssessmentV2SummaryProperties> {
    /*
     * Gets or sets the Assessment summary.
     */
    private Map<String, SqlAssessmentV2SummaryData> assessmentSummary;

    /*
     * Gets the distribution of sqlInstances by support status.
     */
    private Map<String, Integer> distributionBySupportStatus;

    /*
     * Gets the distribution distribution of sqlInstances by service pack insight.
     */
    private Map<String, Integer> distributionByServicePackInsight;

    /*
     * Gets the distribution of sqlInstances by sql version.
     */
    private Map<String, Integer> distributionBySqlVersion;

    /*
     * Gets the distribution of sqlInstances by sql edition.
     */
    private Map<String, Integer> distributionBySqlEdition;

    /*
     * Gets the instance distribution by sizing criterion.
     */
    private Map<String, Integer> instanceDistributionBySizingCriterion;

    /*
     * Gets the database distribution by sizing criterion.
     */
    private Map<String, Integer> databaseDistributionBySizingCriterion;

    /*
     * Number of machines part of the assessment.
     */
    private Integer numberOfMachines;

    /*
     * Number of sql instances part of the assessment.
     */
    private Integer numberOfSqlInstances;

    /*
     * Number of successfully discovered sql instances part of the assessment.
     */
    private Integer numberOfSuccessfullyDiscoveredSqlInstances;

    /*
     * Number of sql databases part of the assessment.
     */
    private Integer numberOfSqlDatabases;

    /*
     * Number of sql failover cluster instances part of the assessment.
     */
    private Integer numberOfFciInstances;

    /*
     * Number of sql availability groups part of the assessment.
     */
    private Integer numberOfSqlAvailabilityGroups;

    /**
     * Creates an instance of SqlAssessmentV2SummaryProperties class.
     */
    public SqlAssessmentV2SummaryProperties() {
    }

    /**
     * Get the assessmentSummary property: Gets or sets the Assessment summary.
     * 
     * @return the assessmentSummary value.
     */
    public Map<String, SqlAssessmentV2SummaryData> assessmentSummary() {
        return this.assessmentSummary;
    }

    /**
     * Get the distributionBySupportStatus property: Gets the distribution of sqlInstances by support status.
     * 
     * @return the distributionBySupportStatus value.
     */
    public Map<String, Integer> distributionBySupportStatus() {
        return this.distributionBySupportStatus;
    }

    /**
     * Get the distributionByServicePackInsight property: Gets the distribution distribution of sqlInstances by service
     * pack insight.
     * 
     * @return the distributionByServicePackInsight value.
     */
    public Map<String, Integer> distributionByServicePackInsight() {
        return this.distributionByServicePackInsight;
    }

    /**
     * Get the distributionBySqlVersion property: Gets the distribution of sqlInstances by sql version.
     * 
     * @return the distributionBySqlVersion value.
     */
    public Map<String, Integer> distributionBySqlVersion() {
        return this.distributionBySqlVersion;
    }

    /**
     * Get the distributionBySqlEdition property: Gets the distribution of sqlInstances by sql edition.
     * 
     * @return the distributionBySqlEdition value.
     */
    public Map<String, Integer> distributionBySqlEdition() {
        return this.distributionBySqlEdition;
    }

    /**
     * Get the instanceDistributionBySizingCriterion property: Gets the instance distribution by sizing criterion.
     * 
     * @return the instanceDistributionBySizingCriterion value.
     */
    public Map<String, Integer> instanceDistributionBySizingCriterion() {
        return this.instanceDistributionBySizingCriterion;
    }

    /**
     * Get the databaseDistributionBySizingCriterion property: Gets the database distribution by sizing criterion.
     * 
     * @return the databaseDistributionBySizingCriterion value.
     */
    public Map<String, Integer> databaseDistributionBySizingCriterion() {
        return this.databaseDistributionBySizingCriterion;
    }

    /**
     * Get the numberOfMachines property: Number of machines part of the assessment.
     * 
     * @return the numberOfMachines value.
     */
    public Integer numberOfMachines() {
        return this.numberOfMachines;
    }

    /**
     * Get the numberOfSqlInstances property: Number of sql instances part of the assessment.
     * 
     * @return the numberOfSqlInstances value.
     */
    public Integer numberOfSqlInstances() {
        return this.numberOfSqlInstances;
    }

    /**
     * Get the numberOfSuccessfullyDiscoveredSqlInstances property: Number of successfully discovered sql instances part
     * of the assessment.
     * 
     * @return the numberOfSuccessfullyDiscoveredSqlInstances value.
     */
    public Integer numberOfSuccessfullyDiscoveredSqlInstances() {
        return this.numberOfSuccessfullyDiscoveredSqlInstances;
    }

    /**
     * Get the numberOfSqlDatabases property: Number of sql databases part of the assessment.
     * 
     * @return the numberOfSqlDatabases value.
     */
    public Integer numberOfSqlDatabases() {
        return this.numberOfSqlDatabases;
    }

    /**
     * Get the numberOfFciInstances property: Number of sql failover cluster instances part of the assessment.
     * 
     * @return the numberOfFciInstances value.
     */
    public Integer numberOfFciInstances() {
        return this.numberOfFciInstances;
    }

    /**
     * Get the numberOfSqlAvailabilityGroups property: Number of sql availability groups part of the assessment.
     * 
     * @return the numberOfSqlAvailabilityGroups value.
     */
    public Integer numberOfSqlAvailabilityGroups() {
        return this.numberOfSqlAvailabilityGroups;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (assessmentSummary() != null) {
            assessmentSummary().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessmentV2SummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessmentV2SummaryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessmentV2SummaryProperties.
     */
    public static SqlAssessmentV2SummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessmentV2SummaryProperties deserializedSqlAssessmentV2SummaryProperties
                = new SqlAssessmentV2SummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessmentSummary".equals(fieldName)) {
                    Map<String, SqlAssessmentV2SummaryData> assessmentSummary
                        = reader.readMap(reader1 -> SqlAssessmentV2SummaryData.fromJson(reader1));
                    deserializedSqlAssessmentV2SummaryProperties.assessmentSummary = assessmentSummary;
                } else if ("distributionBySupportStatus".equals(fieldName)) {
                    Map<String, Integer> distributionBySupportStatus = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryProperties.distributionBySupportStatus
                        = distributionBySupportStatus;
                } else if ("distributionByServicePackInsight".equals(fieldName)) {
                    Map<String, Integer> distributionByServicePackInsight = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryProperties.distributionByServicePackInsight
                        = distributionByServicePackInsight;
                } else if ("distributionBySqlVersion".equals(fieldName)) {
                    Map<String, Integer> distributionBySqlVersion = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryProperties.distributionBySqlVersion = distributionBySqlVersion;
                } else if ("distributionBySqlEdition".equals(fieldName)) {
                    Map<String, Integer> distributionBySqlEdition = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryProperties.distributionBySqlEdition = distributionBySqlEdition;
                } else if ("instanceDistributionBySizingCriterion".equals(fieldName)) {
                    Map<String, Integer> instanceDistributionBySizingCriterion
                        = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryProperties.instanceDistributionBySizingCriterion
                        = instanceDistributionBySizingCriterion;
                } else if ("databaseDistributionBySizingCriterion".equals(fieldName)) {
                    Map<String, Integer> databaseDistributionBySizingCriterion
                        = reader.readMap(reader1 -> reader1.getInt());
                    deserializedSqlAssessmentV2SummaryProperties.databaseDistributionBySizingCriterion
                        = databaseDistributionBySizingCriterion;
                } else if ("numberOfMachines".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryProperties.numberOfMachines
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfSqlInstances".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryProperties.numberOfSqlInstances
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfSuccessfullyDiscoveredSqlInstances".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryProperties.numberOfSuccessfullyDiscoveredSqlInstances
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfSqlDatabases".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryProperties.numberOfSqlDatabases
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfFciInstances".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryProperties.numberOfFciInstances
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfSqlAvailabilityGroups".equals(fieldName)) {
                    deserializedSqlAssessmentV2SummaryProperties.numberOfSqlAvailabilityGroups
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessmentV2SummaryProperties;
        });
    }
}
