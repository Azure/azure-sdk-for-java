// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Collector properties class.
 */
@Fluent
public final class CollectorPropertiesBaseWithAgent extends AzureResourceProperties {
    /*
     * Gets or sets the collector agent properties.
     */
    private CollectorAgentPropertiesBase agentProperties;

    /*
     * Gets the discovery site id.
     */
    private String discoverySiteId;

    /*
     * Gets the Timestamp when collector was created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Timestamp when collector was last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /**
     * Creates an instance of CollectorPropertiesBaseWithAgent class.
     */
    public CollectorPropertiesBaseWithAgent() {
    }

    /**
     * Get the agentProperties property: Gets or sets the collector agent properties.
     * 
     * @return the agentProperties value.
     */
    public CollectorAgentPropertiesBase agentProperties() {
        return this.agentProperties;
    }

    /**
     * Set the agentProperties property: Gets or sets the collector agent properties.
     * 
     * @param agentProperties the agentProperties value to set.
     * @return the CollectorPropertiesBaseWithAgent object itself.
     */
    public CollectorPropertiesBaseWithAgent withAgentProperties(CollectorAgentPropertiesBase agentProperties) {
        this.agentProperties = agentProperties;
        return this;
    }

    /**
     * Get the discoverySiteId property: Gets the discovery site id.
     * 
     * @return the discoverySiteId value.
     */
    public String discoverySiteId() {
        return this.discoverySiteId;
    }

    /**
     * Set the discoverySiteId property: Gets the discovery site id.
     * 
     * @param discoverySiteId the discoverySiteId value to set.
     * @return the CollectorPropertiesBaseWithAgent object itself.
     */
    public CollectorPropertiesBaseWithAgent withDiscoverySiteId(String discoverySiteId) {
        this.discoverySiteId = discoverySiteId;
        return this;
    }

    /**
     * Get the createdTimestamp property: Gets the Timestamp when collector was created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Timestamp when collector was last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CollectorPropertiesBaseWithAgent withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (agentProperties() != null) {
            agentProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        jsonWriter.writeJsonField("agentProperties", this.agentProperties);
        jsonWriter.writeStringField("discoverySiteId", this.discoverySiteId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectorPropertiesBaseWithAgent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectorPropertiesBaseWithAgent if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CollectorPropertiesBaseWithAgent.
     */
    public static CollectorPropertiesBaseWithAgent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectorPropertiesBaseWithAgent deserializedCollectorPropertiesBaseWithAgent
                = new CollectorPropertiesBaseWithAgent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedCollectorPropertiesBaseWithAgent
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("agentProperties".equals(fieldName)) {
                    deserializedCollectorPropertiesBaseWithAgent.agentProperties
                        = CollectorAgentPropertiesBase.fromJson(reader);
                } else if ("discoverySiteId".equals(fieldName)) {
                    deserializedCollectorPropertiesBaseWithAgent.discoverySiteId = reader.getString();
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedCollectorPropertiesBaseWithAgent.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedCollectorPropertiesBaseWithAgent.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCollectorPropertiesBaseWithAgent;
        });
    }
}
