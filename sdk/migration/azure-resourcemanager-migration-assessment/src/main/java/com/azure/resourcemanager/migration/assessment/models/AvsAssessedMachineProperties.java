// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * AVS assessed machine properties web model.
 */
@Immutable
public final class AvsAssessedMachineProperties implements JsonSerializable<AvsAssessedMachineProperties> {
    /*
     * List of errors for this machine.
     */
    private List<Error> errors;

    /*
     * List of Disks that were assessed as part of this machine's assessment.
     */
    private Map<String, AvsAssessedDisk> disks;

    /*
     * List of Network Adapters that were assessed as part of this machine's
     * assessment.
     */
    private Map<String, AvsAssessedNetworkAdapter> networkAdapters;

    /*
     * Gets the storage in use.
     */
    private Float storageInUseGB;

    /*
     * Gets the explanation if machine is not suitable for cloud.
     */
    private AzureAvsVmSuitabilityExplanation suitabilityExplanation;

    /*
     * Gets the details if machine is not suitable for cloud.
     */
    private AzureAvsVmSuitabilityDetail suitabilityDetail;

    /*
     * Assessed machine type.
     */
    private AssessedMachineType type;

    /*
     * Boot type of machine discovered in private data center.
     */
    private MachineBootType bootType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemType;

    /*
     * Operating system as reported by datacenter management solution.
     */
    private String operatingSystemName;

    /*
     * Operating system version as reported by datacenter management solution.
     */
    private String operatingSystemVersion;

    /*
     * Operating system architecture as reported by datacenter management solution.
     */
    private GuestOperatingSystemArchitecture operatingSystemArchitecture;

    /*
     * When was machine first created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * When was machine last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Display Name of the Machine.
     */
    private String displayName;

    /*
     * Description for the machine.
     */
    private String description;

    /*
     * Data center machine ARM id.
     */
    private String datacenterMachineArmId;

    /*
     * Data center management server ARM id.
     */
    private String datacenterManagementServerArmId;

    /*
     * Data center management server name.
     */
    private String datacenterManagementServerName;

    /*
     * Megabytes of memory found allocated for the machine in private data center.
     */
    private Float megabytesOfMemory;

    /*
     * Number of CPU cores found on the machine.
     */
    private Integer numberOfCores;

    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Percentile of Percentage of Cores Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageCoresUtilization;

    /*
     * Percentile of Percentage of Memory Utilized noted during time period T.
     * 
     * Here N and T are settings on Assessment.
     */
    private Float percentageMemoryUtilization;

    /*
     * Gets a value indicating whether machine is suitable for the cloud platform
     * selected.
     */
    private CloudSuitability suitability;

    /**
     * Creates an instance of AvsAssessedMachineProperties class.
     */
    public AvsAssessedMachineProperties() {
    }

    /**
     * Get the errors property: List of errors for this machine.
     * 
     * @return the errors value.
     */
    public List<Error> errors() {
        return this.errors;
    }

    /**
     * Get the disks property: List of Disks that were assessed as part of this machine's assessment.
     * 
     * @return the disks value.
     */
    public Map<String, AvsAssessedDisk> disks() {
        return this.disks;
    }

    /**
     * Get the networkAdapters property: List of Network Adapters that were assessed as part of this machine's
     * assessment.
     * 
     * @return the networkAdapters value.
     */
    public Map<String, AvsAssessedNetworkAdapter> networkAdapters() {
        return this.networkAdapters;
    }

    /**
     * Get the storageInUseGB property: Gets the storage in use.
     * 
     * @return the storageInUseGB value.
     */
    public Float storageInUseGB() {
        return this.storageInUseGB;
    }

    /**
     * Get the suitabilityExplanation property: Gets the explanation if machine is not suitable for cloud.
     * 
     * @return the suitabilityExplanation value.
     */
    public AzureAvsVmSuitabilityExplanation suitabilityExplanation() {
        return this.suitabilityExplanation;
    }

    /**
     * Get the suitabilityDetail property: Gets the details if machine is not suitable for cloud.
     * 
     * @return the suitabilityDetail value.
     */
    public AzureAvsVmSuitabilityDetail suitabilityDetail() {
        return this.suitabilityDetail;
    }

    /**
     * Get the type property: Assessed machine type.
     * 
     * @return the type value.
     */
    public AssessedMachineType type() {
        return this.type;
    }

    /**
     * Get the bootType property: Boot type of machine discovered in private data center.
     * 
     * @return the bootType value.
     */
    public MachineBootType bootType() {
        return this.bootType;
    }

    /**
     * Get the operatingSystemType property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemType value.
     */
    public String operatingSystemType() {
        return this.operatingSystemType;
    }

    /**
     * Get the operatingSystemName property: Operating system as reported by datacenter management solution.
     * 
     * @return the operatingSystemName value.
     */
    public String operatingSystemName() {
        return this.operatingSystemName;
    }

    /**
     * Get the operatingSystemVersion property: Operating system version as reported by datacenter management solution.
     * 
     * @return the operatingSystemVersion value.
     */
    public String operatingSystemVersion() {
        return this.operatingSystemVersion;
    }

    /**
     * Get the operatingSystemArchitecture property: Operating system architecture as reported by datacenter management
     * solution.
     * 
     * @return the operatingSystemArchitecture value.
     */
    public GuestOperatingSystemArchitecture operatingSystemArchitecture() {
        return this.operatingSystemArchitecture;
    }

    /**
     * Get the createdTimestamp property: When was machine first created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: When was machine last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the displayName property: Display Name of the Machine.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the description property: Description for the machine.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the datacenterMachineArmId property: Data center machine ARM id.
     * 
     * @return the datacenterMachineArmId value.
     */
    public String datacenterMachineArmId() {
        return this.datacenterMachineArmId;
    }

    /**
     * Get the datacenterManagementServerArmId property: Data center management server ARM id.
     * 
     * @return the datacenterManagementServerArmId value.
     */
    public String datacenterManagementServerArmId() {
        return this.datacenterManagementServerArmId;
    }

    /**
     * Get the datacenterManagementServerName property: Data center management server name.
     * 
     * @return the datacenterManagementServerName value.
     */
    public String datacenterManagementServerName() {
        return this.datacenterManagementServerName;
    }

    /**
     * Get the megabytesOfMemory property: Megabytes of memory found allocated for the machine in private data center.
     * 
     * @return the megabytesOfMemory value.
     */
    public Float megabytesOfMemory() {
        return this.megabytesOfMemory;
    }

    /**
     * Get the numberOfCores property: Number of CPU cores found on the machine.
     * 
     * @return the numberOfCores value.
     */
    public Integer numberOfCores() {
        return this.numberOfCores;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the percentageCoresUtilization property: Percentile of Percentage of Cores Utilized noted during time period
     * T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the percentageMemoryUtilization property: Percentile of Percentage of Memory Utilized noted during time
     * period T.
     * 
     * Here N and T are settings on Assessment.
     * 
     * @return the percentageMemoryUtilization value.
     */
    public Float percentageMemoryUtilization() {
        return this.percentageMemoryUtilization;
    }

    /**
     * Get the suitability property: Gets a value indicating whether machine is suitable for the cloud platform
     * selected.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errors() != null) {
            errors().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (networkAdapters() != null) {
            networkAdapters().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AvsAssessedMachineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AvsAssessedMachineProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AvsAssessedMachineProperties.
     */
    public static AvsAssessedMachineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AvsAssessedMachineProperties deserializedAvsAssessedMachineProperties = new AvsAssessedMachineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errors".equals(fieldName)) {
                    List<Error> errors = reader.readArray(reader1 -> Error.fromJson(reader1));
                    deserializedAvsAssessedMachineProperties.errors = errors;
                } else if ("disks".equals(fieldName)) {
                    Map<String, AvsAssessedDisk> disks = reader.readMap(reader1 -> AvsAssessedDisk.fromJson(reader1));
                    deserializedAvsAssessedMachineProperties.disks = disks;
                } else if ("networkAdapters".equals(fieldName)) {
                    Map<String, AvsAssessedNetworkAdapter> networkAdapters
                        = reader.readMap(reader1 -> AvsAssessedNetworkAdapter.fromJson(reader1));
                    deserializedAvsAssessedMachineProperties.networkAdapters = networkAdapters;
                } else if ("storageInUseGB".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.storageInUseGB = reader.getNullable(JsonReader::getFloat);
                } else if ("suitabilityExplanation".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.suitabilityExplanation
                        = AzureAvsVmSuitabilityExplanation.fromString(reader.getString());
                } else if ("suitabilityDetail".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.suitabilityDetail
                        = AzureAvsVmSuitabilityDetail.fromString(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.type = AssessedMachineType.fromString(reader.getString());
                } else if ("bootType".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.bootType = MachineBootType.fromString(reader.getString());
                } else if ("operatingSystemType".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.operatingSystemType = reader.getString();
                } else if ("operatingSystemName".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.operatingSystemName = reader.getString();
                } else if ("operatingSystemVersion".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.operatingSystemVersion = reader.getString();
                } else if ("operatingSystemArchitecture".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.operatingSystemArchitecture
                        = GuestOperatingSystemArchitecture.fromString(reader.getString());
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.displayName = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.description = reader.getString();
                } else if ("datacenterMachineArmId".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.datacenterMachineArmId = reader.getString();
                } else if ("datacenterManagementServerArmId".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.datacenterManagementServerArmId = reader.getString();
                } else if ("datacenterManagementServerName".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.datacenterManagementServerName = reader.getString();
                } else if ("megabytesOfMemory".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.megabytesOfMemory
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfCores".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.numberOfCores = reader.getNullable(JsonReader::getInt);
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("percentageMemoryUtilization".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.percentageMemoryUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("suitability".equals(fieldName)) {
                    deserializedAvsAssessedMachineProperties.suitability
                        = CloudSuitability.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAvsAssessedMachineProperties;
        });
    }
}
