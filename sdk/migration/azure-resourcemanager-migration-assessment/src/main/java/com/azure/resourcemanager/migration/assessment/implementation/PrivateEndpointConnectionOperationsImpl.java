// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.migration.assessment.fluent.PrivateEndpointConnectionOperationsClient;
import com.azure.resourcemanager.migration.assessment.fluent.models.PrivateEndpointConnectionInner;
import com.azure.resourcemanager.migration.assessment.models.PrivateEndpointConnection;
import com.azure.resourcemanager.migration.assessment.models.PrivateEndpointConnectionOperations;

public final class PrivateEndpointConnectionOperationsImpl implements PrivateEndpointConnectionOperations {
    private static final ClientLogger LOGGER = new ClientLogger(PrivateEndpointConnectionOperationsImpl.class);

    private final PrivateEndpointConnectionOperationsClient innerClient;

    private final com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager;

    public PrivateEndpointConnectionOperationsImpl(PrivateEndpointConnectionOperationsClient innerClient,
        com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<PrivateEndpointConnection> listByAssessmentProject(String resourceGroupName,
        String projectName) {
        PagedIterable<PrivateEndpointConnectionInner> inner
            = this.serviceClient().listByAssessmentProject(resourceGroupName, projectName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<PrivateEndpointConnection> listByAssessmentProject(String resourceGroupName,
        String projectName, Context context) {
        PagedIterable<PrivateEndpointConnectionInner> inner
            = this.serviceClient().listByAssessmentProject(resourceGroupName, projectName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new PrivateEndpointConnectionImpl(inner1, this.manager()));
    }

    public Response<PrivateEndpointConnection> getWithResponse(String resourceGroupName, String projectName,
        String privateEndpointConnectionName, Context context) {
        Response<PrivateEndpointConnectionInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, projectName, privateEndpointConnectionName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PrivateEndpointConnectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection get(String resourceGroupName, String projectName,
        String privateEndpointConnectionName) {
        PrivateEndpointConnectionInner inner
            = this.serviceClient().get(resourceGroupName, projectName, privateEndpointConnectionName);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection update(String resourceGroupName, String projectName,
        String privateEndpointConnectionName, PrivateEndpointConnectionInner resource) {
        PrivateEndpointConnectionInner inner
            = this.serviceClient().update(resourceGroupName, projectName, privateEndpointConnectionName, resource);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PrivateEndpointConnection update(String resourceGroupName, String projectName,
        String privateEndpointConnectionName, PrivateEndpointConnectionInner resource, Context context) {
        PrivateEndpointConnectionInner inner = this.serviceClient()
            .update(resourceGroupName, projectName, privateEndpointConnectionName, resource, context);
        if (inner != null) {
            return new PrivateEndpointConnectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String projectName,
        String privateEndpointConnectionName, Context context) {
        return this.serviceClient()
            .deleteWithResponse(resourceGroupName, projectName, privateEndpointConnectionName, context);
    }

    public void delete(String resourceGroupName, String projectName, String privateEndpointConnectionName) {
        this.serviceClient().delete(resourceGroupName, projectName, privateEndpointConnectionName);
    }

    private PrivateEndpointConnectionOperationsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.migration.assessment.MigrationAssessmentManager manager() {
        return this.serviceManager;
    }
}
