// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Map;

/**
 * Error web model class.
 */
@Immutable
public final class Error implements JsonSerializable<Error> {
    /*
     * Gets the error ID.
     */
    private Integer id;

    /*
     * Gets the error code.
     */
    private String code;

    /*
     * Gets the Run as account ID.
     */
    private String runAsAccountId;

    /*
     * Gets the Appliance name.
     */
    private String applianceName;

    /*
     * Gets the error message.
     */
    private String message;

    /*
     * Gets the error summary message.
     */
    private String summaryMessage;

    /*
     * Gets the agent scenario where this error occurred.
     */
    private String agentScenario;

    /*
     * Gets the error possible causes.
     */
    private String possibleCauses;

    /*
     * Gets the recommended action for the error.
     */
    private String recommendedAction;

    /*
     * Gets the error severity.
     */
    private String severity;

    /*
     * Gets the error message parameters.
     */
    private Map<String, String> messageParameters;

    /*
     * Gets the time stamp when the error was updated.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Gets the type of assessment impacted by this error.
     */
    private String impactedAssessmentType;

    /**
     * Creates an instance of Error class.
     */
    public Error() {
    }

    /**
     * Get the id property: Gets the error ID.
     * 
     * @return the id value.
     */
    public Integer id() {
        return this.id;
    }

    /**
     * Get the code property: Gets the error code.
     * 
     * @return the code value.
     */
    public String code() {
        return this.code;
    }

    /**
     * Get the runAsAccountId property: Gets the Run as account ID.
     * 
     * @return the runAsAccountId value.
     */
    public String runAsAccountId() {
        return this.runAsAccountId;
    }

    /**
     * Get the applianceName property: Gets the Appliance name.
     * 
     * @return the applianceName value.
     */
    public String applianceName() {
        return this.applianceName;
    }

    /**
     * Get the message property: Gets the error message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the summaryMessage property: Gets the error summary message.
     * 
     * @return the summaryMessage value.
     */
    public String summaryMessage() {
        return this.summaryMessage;
    }

    /**
     * Get the agentScenario property: Gets the agent scenario where this error occurred.
     * 
     * @return the agentScenario value.
     */
    public String agentScenario() {
        return this.agentScenario;
    }

    /**
     * Get the possibleCauses property: Gets the error possible causes.
     * 
     * @return the possibleCauses value.
     */
    public String possibleCauses() {
        return this.possibleCauses;
    }

    /**
     * Get the recommendedAction property: Gets the recommended action for the error.
     * 
     * @return the recommendedAction value.
     */
    public String recommendedAction() {
        return this.recommendedAction;
    }

    /**
     * Get the severity property: Gets the error severity.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Get the messageParameters property: Gets the error message parameters.
     * 
     * @return the messageParameters value.
     */
    public Map<String, String> messageParameters() {
        return this.messageParameters;
    }

    /**
     * Get the updatedTimestamp property: Gets the time stamp when the error was updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the impactedAssessmentType property: Gets the type of assessment impacted by this error.
     * 
     * @return the impactedAssessmentType value.
     */
    public String impactedAssessmentType() {
        return this.impactedAssessmentType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Error from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Error if the JsonReader was pointing to an instance of it, or null if it was pointing to
     * JSON null.
     * @throws IOException If an error occurs while reading the Error.
     */
    public static Error fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Error deserializedError = new Error();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedError.id = reader.getNullable(JsonReader::getInt);
                } else if ("code".equals(fieldName)) {
                    deserializedError.code = reader.getString();
                } else if ("runAsAccountId".equals(fieldName)) {
                    deserializedError.runAsAccountId = reader.getString();
                } else if ("applianceName".equals(fieldName)) {
                    deserializedError.applianceName = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedError.message = reader.getString();
                } else if ("summaryMessage".equals(fieldName)) {
                    deserializedError.summaryMessage = reader.getString();
                } else if ("agentScenario".equals(fieldName)) {
                    deserializedError.agentScenario = reader.getString();
                } else if ("possibleCauses".equals(fieldName)) {
                    deserializedError.possibleCauses = reader.getString();
                } else if ("recommendedAction".equals(fieldName)) {
                    deserializedError.recommendedAction = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedError.severity = reader.getString();
                } else if ("messageParameters".equals(fieldName)) {
                    Map<String, String> messageParameters = reader.readMap(reader1 -> reader1.getString());
                    deserializedError.messageParameters = messageParameters;
                } else if ("updatedTimeStamp".equals(fieldName)) {
                    deserializedError.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("impactedAssessmentType".equals(fieldName)) {
                    deserializedError.impactedAssessmentType = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedError;
        });
    }
}
