// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SQL Assessed Network Adapter.
 */
@Fluent
public final class SqlAssessedNetworkAdapter implements JsonSerializable<SqlAssessedNetworkAdapter> {
    /*
     * Gets the suitability.
     */
    private CloudSuitability suitability;

    /*
     * Gets the suitability detail.
     */
    private AzureNetworkAdapterSuitabilityDetail suitabilityDetail;

    /*
     * Gets the suitability explanation.
     */
    private AzureNetworkAdapterSuitabilityExplanation suitabilityExplanation;

    /*
     * Gets the monthly bandwidth costs.
     */
    private Float monthlyBandwidthCosts;

    /*
     * Gets the net gigabytes transmitted per month.
     */
    private Float netGigabytesTransmittedPerMonth;

    /*
     * Gets the name.
     */
    private String name;

    /*
     * Gets the display name.
     */
    private String displayName;

    /*
     * Gets the mac address.
     */
    private String macAddress;

    /*
     * Gets the ip addresses.
     */
    private List<String> ipAddresses;

    /*
     * Gets the megabytes per second received.
     */
    private Float megabytesPerSecondReceived;

    /*
     * Gets the megabytes per second transmitted.
     */
    private Float megabytesPerSecondTransmitted;

    /**
     * Creates an instance of SqlAssessedNetworkAdapter class.
     */
    public SqlAssessedNetworkAdapter() {
    }

    /**
     * Get the suitability property: Gets the suitability.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Set the suitability property: Gets the suitability.
     * 
     * @param suitability the suitability value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withSuitability(CloudSuitability suitability) {
        this.suitability = suitability;
        return this;
    }

    /**
     * Get the suitabilityDetail property: Gets the suitability detail.
     * 
     * @return the suitabilityDetail value.
     */
    public AzureNetworkAdapterSuitabilityDetail suitabilityDetail() {
        return this.suitabilityDetail;
    }

    /**
     * Set the suitabilityDetail property: Gets the suitability detail.
     * 
     * @param suitabilityDetail the suitabilityDetail value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withSuitabilityDetail(AzureNetworkAdapterSuitabilityDetail suitabilityDetail) {
        this.suitabilityDetail = suitabilityDetail;
        return this;
    }

    /**
     * Get the suitabilityExplanation property: Gets the suitability explanation.
     * 
     * @return the suitabilityExplanation value.
     */
    public AzureNetworkAdapterSuitabilityExplanation suitabilityExplanation() {
        return this.suitabilityExplanation;
    }

    /**
     * Set the suitabilityExplanation property: Gets the suitability explanation.
     * 
     * @param suitabilityExplanation the suitabilityExplanation value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter
        withSuitabilityExplanation(AzureNetworkAdapterSuitabilityExplanation suitabilityExplanation) {
        this.suitabilityExplanation = suitabilityExplanation;
        return this;
    }

    /**
     * Get the monthlyBandwidthCosts property: Gets the monthly bandwidth costs.
     * 
     * @return the monthlyBandwidthCosts value.
     */
    public Float monthlyBandwidthCosts() {
        return this.monthlyBandwidthCosts;
    }

    /**
     * Set the monthlyBandwidthCosts property: Gets the monthly bandwidth costs.
     * 
     * @param monthlyBandwidthCosts the monthlyBandwidthCosts value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withMonthlyBandwidthCosts(Float monthlyBandwidthCosts) {
        this.monthlyBandwidthCosts = monthlyBandwidthCosts;
        return this;
    }

    /**
     * Get the netGigabytesTransmittedPerMonth property: Gets the net gigabytes transmitted per month.
     * 
     * @return the netGigabytesTransmittedPerMonth value.
     */
    public Float netGigabytesTransmittedPerMonth() {
        return this.netGigabytesTransmittedPerMonth;
    }

    /**
     * Set the netGigabytesTransmittedPerMonth property: Gets the net gigabytes transmitted per month.
     * 
     * @param netGigabytesTransmittedPerMonth the netGigabytesTransmittedPerMonth value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withNetGigabytesTransmittedPerMonth(Float netGigabytesTransmittedPerMonth) {
        this.netGigabytesTransmittedPerMonth = netGigabytesTransmittedPerMonth;
        return this;
    }

    /**
     * Get the name property: Gets the name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets the name.
     * 
     * @param name the name value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: Gets the display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Gets the display name.
     * 
     * @param displayName the displayName value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the macAddress property: Gets the mac address.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Set the macAddress property: Gets the mac address.
     * 
     * @param macAddress the macAddress value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withMacAddress(String macAddress) {
        this.macAddress = macAddress;
        return this;
    }

    /**
     * Get the ipAddresses property: Gets the ip addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the megabytesPerSecondReceived property: Gets the megabytes per second received.
     * 
     * @return the megabytesPerSecondReceived value.
     */
    public Float megabytesPerSecondReceived() {
        return this.megabytesPerSecondReceived;
    }

    /**
     * Set the megabytesPerSecondReceived property: Gets the megabytes per second received.
     * 
     * @param megabytesPerSecondReceived the megabytesPerSecondReceived value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withMegabytesPerSecondReceived(Float megabytesPerSecondReceived) {
        this.megabytesPerSecondReceived = megabytesPerSecondReceived;
        return this;
    }

    /**
     * Get the megabytesPerSecondTransmitted property: Gets the megabytes per second transmitted.
     * 
     * @return the megabytesPerSecondTransmitted value.
     */
    public Float megabytesPerSecondTransmitted() {
        return this.megabytesPerSecondTransmitted;
    }

    /**
     * Set the megabytesPerSecondTransmitted property: Gets the megabytes per second transmitted.
     * 
     * @param megabytesPerSecondTransmitted the megabytesPerSecondTransmitted value to set.
     * @return the SqlAssessedNetworkAdapter object itself.
     */
    public SqlAssessedNetworkAdapter withMegabytesPerSecondTransmitted(Float megabytesPerSecondTransmitted) {
        this.megabytesPerSecondTransmitted = megabytesPerSecondTransmitted;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("suitability", this.suitability == null ? null : this.suitability.toString());
        jsonWriter.writeStringField("suitabilityDetail",
            this.suitabilityDetail == null ? null : this.suitabilityDetail.toString());
        jsonWriter.writeStringField("suitabilityExplanation",
            this.suitabilityExplanation == null ? null : this.suitabilityExplanation.toString());
        jsonWriter.writeNumberField("monthlyBandwidthCosts", this.monthlyBandwidthCosts);
        jsonWriter.writeNumberField("netGigabytesTransmittedPerMonth", this.netGigabytesTransmittedPerMonth);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("macAddress", this.macAddress);
        jsonWriter.writeNumberField("megabytesPerSecondReceived", this.megabytesPerSecondReceived);
        jsonWriter.writeNumberField("megabytesPerSecondTransmitted", this.megabytesPerSecondTransmitted);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessedNetworkAdapter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessedNetworkAdapter if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessedNetworkAdapter.
     */
    public static SqlAssessedNetworkAdapter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessedNetworkAdapter deserializedSqlAssessedNetworkAdapter = new SqlAssessedNetworkAdapter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suitability".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.suitability = CloudSuitability.fromString(reader.getString());
                } else if ("suitabilityDetail".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.suitabilityDetail
                        = AzureNetworkAdapterSuitabilityDetail.fromString(reader.getString());
                } else if ("suitabilityExplanation".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.suitabilityExplanation
                        = AzureNetworkAdapterSuitabilityExplanation.fromString(reader.getString());
                } else if ("monthlyBandwidthCosts".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.monthlyBandwidthCosts
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("netGigabytesTransmittedPerMonth".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.netGigabytesTransmittedPerMonth
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("name".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.displayName = reader.getString();
                } else if ("macAddress".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.macAddress = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedSqlAssessedNetworkAdapter.ipAddresses = ipAddresses;
                } else if ("megabytesPerSecondReceived".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.megabytesPerSecondReceived
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondTransmitted".equals(fieldName)) {
                    deserializedSqlAssessedNetworkAdapter.megabytesPerSecondTransmitted
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessedNetworkAdapter;
        });
    }
}
