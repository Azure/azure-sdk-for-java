// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Class to represent the component of the cost.
 */
@Fluent
public final class CostComponent implements JsonSerializable<CostComponent> {
    /*
     * Gets the name of the component.
     */
    private CostComponentName name;

    /*
     * The value of the component.
     */
    private Float value;

    /*
     * The textual description of the component.
     */
    private String description;

    /**
     * Creates an instance of CostComponent class.
     */
    public CostComponent() {
    }

    /**
     * Get the name property: Gets the name of the component.
     * 
     * @return the name value.
     */
    public CostComponentName name() {
        return this.name;
    }

    /**
     * Get the value property: The value of the component.
     * 
     * @return the value value.
     */
    public Float value() {
        return this.value;
    }

    /**
     * Set the value property: The value of the component.
     * 
     * @param value the value value to set.
     * @return the CostComponent object itself.
     */
    public CostComponent withValue(Float value) {
        this.value = value;
        return this;
    }

    /**
     * Get the description property: The textual description of the component.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The textual description of the component.
     * 
     * @param description the description value to set.
     * @return the CostComponent object itself.
     */
    public CostComponent withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("value", this.value);
        jsonWriter.writeStringField("description", this.description);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CostComponent from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CostComponent if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the CostComponent.
     */
    public static CostComponent fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CostComponent deserializedCostComponent = new CostComponent();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedCostComponent.name = CostComponentName.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    deserializedCostComponent.value = reader.getNullable(JsonReader::getFloat);
                } else if ("description".equals(fieldName)) {
                    deserializedCostComponent.description = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCostComponent;
        });
    }
}
