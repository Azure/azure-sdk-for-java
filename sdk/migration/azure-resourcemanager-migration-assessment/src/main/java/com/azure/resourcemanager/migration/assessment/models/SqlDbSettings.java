// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * SQL database assessment settings.
 */
@Fluent
public final class SqlDbSettings implements JsonSerializable<SqlDbSettings> {
    /*
     * Gets or sets the azure SQL service tier.
     */
    private AzureSqlServiceTier azureSqlServiceTier;

    /*
     * Gets or sets the azure PAAS SQL instance type.
     */
    private AzureSqlDataBaseType azureSqlDataBaseType;

    /*
     * Gets or sets the azure SQL compute tier.
     */
    private ComputeTier azureSqlComputeTier;

    /*
     * Gets or sets the azure SQL purchase model.
     */
    private AzureSqlPurchaseModel azureSqlPurchaseModel;

    /**
     * Creates an instance of SqlDbSettings class.
     */
    public SqlDbSettings() {
    }

    /**
     * Get the azureSqlServiceTier property: Gets or sets the azure SQL service tier.
     * 
     * @return the azureSqlServiceTier value.
     */
    public AzureSqlServiceTier azureSqlServiceTier() {
        return this.azureSqlServiceTier;
    }

    /**
     * Set the azureSqlServiceTier property: Gets or sets the azure SQL service tier.
     * 
     * @param azureSqlServiceTier the azureSqlServiceTier value to set.
     * @return the SqlDbSettings object itself.
     */
    public SqlDbSettings withAzureSqlServiceTier(AzureSqlServiceTier azureSqlServiceTier) {
        this.azureSqlServiceTier = azureSqlServiceTier;
        return this;
    }

    /**
     * Get the azureSqlDataBaseType property: Gets or sets the azure PAAS SQL instance type.
     * 
     * @return the azureSqlDataBaseType value.
     */
    public AzureSqlDataBaseType azureSqlDataBaseType() {
        return this.azureSqlDataBaseType;
    }

    /**
     * Set the azureSqlDataBaseType property: Gets or sets the azure PAAS SQL instance type.
     * 
     * @param azureSqlDataBaseType the azureSqlDataBaseType value to set.
     * @return the SqlDbSettings object itself.
     */
    public SqlDbSettings withAzureSqlDataBaseType(AzureSqlDataBaseType azureSqlDataBaseType) {
        this.azureSqlDataBaseType = azureSqlDataBaseType;
        return this;
    }

    /**
     * Get the azureSqlComputeTier property: Gets or sets the azure SQL compute tier.
     * 
     * @return the azureSqlComputeTier value.
     */
    public ComputeTier azureSqlComputeTier() {
        return this.azureSqlComputeTier;
    }

    /**
     * Set the azureSqlComputeTier property: Gets or sets the azure SQL compute tier.
     * 
     * @param azureSqlComputeTier the azureSqlComputeTier value to set.
     * @return the SqlDbSettings object itself.
     */
    public SqlDbSettings withAzureSqlComputeTier(ComputeTier azureSqlComputeTier) {
        this.azureSqlComputeTier = azureSqlComputeTier;
        return this;
    }

    /**
     * Get the azureSqlPurchaseModel property: Gets or sets the azure SQL purchase model.
     * 
     * @return the azureSqlPurchaseModel value.
     */
    public AzureSqlPurchaseModel azureSqlPurchaseModel() {
        return this.azureSqlPurchaseModel;
    }

    /**
     * Set the azureSqlPurchaseModel property: Gets or sets the azure SQL purchase model.
     * 
     * @param azureSqlPurchaseModel the azureSqlPurchaseModel value to set.
     * @return the SqlDbSettings object itself.
     */
    public SqlDbSettings withAzureSqlPurchaseModel(AzureSqlPurchaseModel azureSqlPurchaseModel) {
        this.azureSqlPurchaseModel = azureSqlPurchaseModel;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("azureSqlServiceTier",
            this.azureSqlServiceTier == null ? null : this.azureSqlServiceTier.toString());
        jsonWriter.writeStringField("azureSqlDataBaseType",
            this.azureSqlDataBaseType == null ? null : this.azureSqlDataBaseType.toString());
        jsonWriter.writeStringField("azureSqlComputeTier",
            this.azureSqlComputeTier == null ? null : this.azureSqlComputeTier.toString());
        jsonWriter.writeStringField("azureSqlPurchaseModel",
            this.azureSqlPurchaseModel == null ? null : this.azureSqlPurchaseModel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDbSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDbSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlDbSettings.
     */
    public static SqlDbSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDbSettings deserializedSqlDbSettings = new SqlDbSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureSqlServiceTier".equals(fieldName)) {
                    deserializedSqlDbSettings.azureSqlServiceTier = AzureSqlServiceTier.fromString(reader.getString());
                } else if ("azureSqlDataBaseType".equals(fieldName)) {
                    deserializedSqlDbSettings.azureSqlDataBaseType
                        = AzureSqlDataBaseType.fromString(reader.getString());
                } else if ("azureSqlComputeTier".equals(fieldName)) {
                    deserializedSqlDbSettings.azureSqlComputeTier = ComputeTier.fromString(reader.getString());
                } else if ("azureSqlPurchaseModel".equals(fieldName)) {
                    deserializedSqlDbSettings.azureSqlPurchaseModel
                        = AzureSqlPurchaseModel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDbSettings;
        });
    }
}
