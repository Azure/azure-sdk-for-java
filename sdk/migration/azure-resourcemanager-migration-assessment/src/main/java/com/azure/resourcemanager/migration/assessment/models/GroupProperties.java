// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of group resource.
 */
@Fluent
public final class GroupProperties extends AzureResourceProperties {
    /*
     * Whether the group has been created and is valid.
     */
    private GroupStatus groupStatus;

    /*
     * Number of machines part of this group.
     */
    private Integer machineCount;

    /*
     * List of References to Assessments created on this group.
     */
    private List<String> assessments;

    /*
     * List of assessment types supported on this group.
     */
    private List<AssessmentType> supportedAssessmentTypes;

    /*
     * If the assessments are in running state.
     */
    private Boolean areAssessmentsRunning;

    /*
     * Time when this group was created. Date-Time represented in ISO-8601 format.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Time when this group was last updated. Date-Time represented in ISO-8601 format.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * The type of group.
     */
    private GroupType groupType;

    /**
     * Creates an instance of GroupProperties class.
     */
    public GroupProperties() {
    }

    /**
     * Get the groupStatus property: Whether the group has been created and is valid.
     * 
     * @return the groupStatus value.
     */
    public GroupStatus groupStatus() {
        return this.groupStatus;
    }

    /**
     * Get the machineCount property: Number of machines part of this group.
     * 
     * @return the machineCount value.
     */
    public Integer machineCount() {
        return this.machineCount;
    }

    /**
     * Get the assessments property: List of References to Assessments created on this group.
     * 
     * @return the assessments value.
     */
    public List<String> assessments() {
        return this.assessments;
    }

    /**
     * Get the supportedAssessmentTypes property: List of assessment types supported on this group.
     * 
     * @return the supportedAssessmentTypes value.
     */
    public List<AssessmentType> supportedAssessmentTypes() {
        return this.supportedAssessmentTypes;
    }

    /**
     * Set the supportedAssessmentTypes property: List of assessment types supported on this group.
     * 
     * @param supportedAssessmentTypes the supportedAssessmentTypes value to set.
     * @return the GroupProperties object itself.
     */
    public GroupProperties withSupportedAssessmentTypes(List<AssessmentType> supportedAssessmentTypes) {
        this.supportedAssessmentTypes = supportedAssessmentTypes;
        return this;
    }

    /**
     * Get the areAssessmentsRunning property: If the assessments are in running state.
     * 
     * @return the areAssessmentsRunning value.
     */
    public Boolean areAssessmentsRunning() {
        return this.areAssessmentsRunning;
    }

    /**
     * Get the createdTimestamp property: Time when this group was created. Date-Time represented in ISO-8601 format.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Time when this group was last updated. Date-Time represented in ISO-8601
     * format.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the groupType property: The type of group.
     * 
     * @return the groupType value.
     */
    public GroupType groupType() {
        return this.groupType;
    }

    /**
     * Set the groupType property: The type of group.
     * 
     * @param groupType the groupType value to set.
     * @return the GroupProperties object itself.
     */
    public GroupProperties withGroupType(GroupType groupType) {
        this.groupType = groupType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GroupProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        jsonWriter.writeArrayField("supportedAssessmentTypes", this.supportedAssessmentTypes,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        jsonWriter.writeStringField("groupType", this.groupType == null ? null : this.groupType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupProperties.
     */
    public static GroupProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupProperties deserializedGroupProperties = new GroupProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedGroupProperties.withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("groupStatus".equals(fieldName)) {
                    deserializedGroupProperties.groupStatus = GroupStatus.fromString(reader.getString());
                } else if ("machineCount".equals(fieldName)) {
                    deserializedGroupProperties.machineCount = reader.getNullable(JsonReader::getInt);
                } else if ("assessments".equals(fieldName)) {
                    List<String> assessments = reader.readArray(reader1 -> reader1.getString());
                    deserializedGroupProperties.assessments = assessments;
                } else if ("supportedAssessmentTypes".equals(fieldName)) {
                    List<AssessmentType> supportedAssessmentTypes
                        = reader.readArray(reader1 -> AssessmentType.fromString(reader1.getString()));
                    deserializedGroupProperties.supportedAssessmentTypes = supportedAssessmentTypes;
                } else if ("areAssessmentsRunning".equals(fieldName)) {
                    deserializedGroupProperties.areAssessmentsRunning = reader.getNullable(JsonReader::getBoolean);
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedGroupProperties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedGroupProperties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("groupType".equals(fieldName)) {
                    deserializedGroupProperties.groupType = GroupType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupProperties;
        });
    }
}
