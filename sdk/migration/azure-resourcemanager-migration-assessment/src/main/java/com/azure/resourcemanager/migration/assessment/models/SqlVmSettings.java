// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * SQL VM assessment settings.
 */
@Fluent
public final class SqlVmSettings implements JsonSerializable<SqlVmSettings> {
    /*
     * Gets or sets the Azure VM families (calling instance series to keep it
     * consistent with other targets).
     */
    private List<AzureVmFamily> instanceSeries;

    /**
     * Creates an instance of SqlVmSettings class.
     */
    public SqlVmSettings() {
    }

    /**
     * Get the instanceSeries property: Gets or sets the Azure VM families (calling instance series to keep it
     * consistent with other targets).
     * 
     * @return the instanceSeries value.
     */
    public List<AzureVmFamily> instanceSeries() {
        return this.instanceSeries;
    }

    /**
     * Set the instanceSeries property: Gets or sets the Azure VM families (calling instance series to keep it
     * consistent with other targets).
     * 
     * @param instanceSeries the instanceSeries value to set.
     * @return the SqlVmSettings object itself.
     */
    public SqlVmSettings withInstanceSeries(List<AzureVmFamily> instanceSeries) {
        this.instanceSeries = instanceSeries;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("instanceSeries", this.instanceSeries,
            (writer, element) -> writer.writeString(element == null ? null : element.toString()));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlVmSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlVmSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlVmSettings.
     */
    public static SqlVmSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlVmSettings deserializedSqlVmSettings = new SqlVmSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceSeries".equals(fieldName)) {
                    List<AzureVmFamily> instanceSeries
                        = reader.readArray(reader1 -> AzureVmFamily.fromString(reader1.getString()));
                    deserializedSqlVmSettings.instanceSeries = instanceSeries;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlVmSettings;
        });
    }
}
