// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Body properties of group update.
 */
@Fluent
public final class GroupBodyProperties implements JsonSerializable<GroupBodyProperties> {
    /*
     * Whether to add or remove the machines.
     */
    private GroupUpdateOperation operationType;

    /*
     * List of machine names that are part of this group.
     */
    private List<String> machines;

    /**
     * Creates an instance of GroupBodyProperties class.
     */
    public GroupBodyProperties() {
    }

    /**
     * Get the operationType property: Whether to add or remove the machines.
     * 
     * @return the operationType value.
     */
    public GroupUpdateOperation operationType() {
        return this.operationType;
    }

    /**
     * Set the operationType property: Whether to add or remove the machines.
     * 
     * @param operationType the operationType value to set.
     * @return the GroupBodyProperties object itself.
     */
    public GroupBodyProperties withOperationType(GroupUpdateOperation operationType) {
        this.operationType = operationType;
        return this;
    }

    /**
     * Get the machines property: List of machine names that are part of this group.
     * 
     * @return the machines value.
     */
    public List<String> machines() {
        return this.machines;
    }

    /**
     * Set the machines property: List of machine names that are part of this group.
     * 
     * @param machines the machines value to set.
     * @return the GroupBodyProperties object itself.
     */
    public GroupBodyProperties withMachines(List<String> machines) {
        this.machines = machines;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("operationType", this.operationType == null ? null : this.operationType.toString());
        jsonWriter.writeArrayField("machines", this.machines, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GroupBodyProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GroupBodyProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the GroupBodyProperties.
     */
    public static GroupBodyProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GroupBodyProperties deserializedGroupBodyProperties = new GroupBodyProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationType".equals(fieldName)) {
                    deserializedGroupBodyProperties.operationType = GroupUpdateOperation.fromString(reader.getString());
                } else if ("machines".equals(fieldName)) {
                    List<String> machines = reader.readArray(reader1 -> reader1.getString());
                    deserializedGroupBodyProperties.machines = machines;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGroupBodyProperties;
        });
    }
}
