// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Class representing Azure SQL IAAS suitability details.
 */
@Fluent
public final class SqlAssessmentV2IaasSuitabilityData implements JsonSerializable<SqlAssessmentV2IaasSuitabilityData> {
    /*
     * Gets the azure SQL IAAS SKU.
     */
    private AzureSqlIaasSkuDto azureSqlSku;

    /*
     * Gets the replica azure SQL IAAS SKU.
     */
    private List<AzureSqlIaasSkuDto> replicaAzureSqlSku;

    /*
     * Gets the shared resources.
     */
    private SharedResourcesDto sharedResources;

    /*
     * Gets the monthly compute cost.
     */
    private Float monthlyComputeCost;

    /*
     * Gets the monthly storage cost.
     */
    private Float monthlyStorageCost;

    /*
     * Gets the collection of cost components.
     */
    private List<CostComponent> costComponents;

    /*
     * Gets the suitability for Microsoft cloud defender.
     */
    private CloudSuitability securitySuitability;

    /*
     * Gets a value indicating whether replicas should be provisioned.
     */
    private Boolean shouldProvisionReplicas;

    /*
     * Gets the replication mode.
     */
    private SkuReplicationMode skuReplicationMode;

    /*
     * Gets the list of migration guidelines applicable to this target.
     */
    private List<SqlMigrationGuideline> migrationGuidelines;

    /*
     * Gets the list of SQL recommendation Reasoning.
     */
    private List<SqlRecommendationReasoning> recommendationReasonings;

    /*
     * Gets the migration target platform.
     */
    private TargetType migrationTargetPlatform;

    /*
     * Gets the azure suitability.
     */
    private CloudSuitability suitability;

    /*
     * Gets the list of migrations issues.
     */
    private List<SqlAssessmentMigrationIssue> migrationIssues;

    /**
     * Creates an instance of SqlAssessmentV2IaasSuitabilityData class.
     */
    public SqlAssessmentV2IaasSuitabilityData() {
    }

    /**
     * Get the azureSqlSku property: Gets the azure SQL IAAS SKU.
     * 
     * @return the azureSqlSku value.
     */
    public AzureSqlIaasSkuDto azureSqlSku() {
        return this.azureSqlSku;
    }

    /**
     * Get the replicaAzureSqlSku property: Gets the replica azure SQL IAAS SKU.
     * 
     * @return the replicaAzureSqlSku value.
     */
    public List<AzureSqlIaasSkuDto> replicaAzureSqlSku() {
        return this.replicaAzureSqlSku;
    }

    /**
     * Get the sharedResources property: Gets the shared resources.
     * 
     * @return the sharedResources value.
     */
    public SharedResourcesDto sharedResources() {
        return this.sharedResources;
    }

    /**
     * Get the monthlyComputeCost property: Gets the monthly compute cost.
     * 
     * @return the monthlyComputeCost value.
     */
    public Float monthlyComputeCost() {
        return this.monthlyComputeCost;
    }

    /**
     * Get the monthlyStorageCost property: Gets the monthly storage cost.
     * 
     * @return the monthlyStorageCost value.
     */
    public Float monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Get the costComponents property: Gets the collection of cost components.
     * 
     * @return the costComponents value.
     */
    public List<CostComponent> costComponents() {
        return this.costComponents;
    }

    /**
     * Set the costComponents property: Gets the collection of cost components.
     * 
     * @param costComponents the costComponents value to set.
     * @return the SqlAssessmentV2IaasSuitabilityData object itself.
     */
    public SqlAssessmentV2IaasSuitabilityData withCostComponents(List<CostComponent> costComponents) {
        this.costComponents = costComponents;
        return this;
    }

    /**
     * Get the securitySuitability property: Gets the suitability for Microsoft cloud defender.
     * 
     * @return the securitySuitability value.
     */
    public CloudSuitability securitySuitability() {
        return this.securitySuitability;
    }

    /**
     * Get the shouldProvisionReplicas property: Gets a value indicating whether replicas should be provisioned.
     * 
     * @return the shouldProvisionReplicas value.
     */
    public Boolean shouldProvisionReplicas() {
        return this.shouldProvisionReplicas;
    }

    /**
     * Get the skuReplicationMode property: Gets the replication mode.
     * 
     * @return the skuReplicationMode value.
     */
    public SkuReplicationMode skuReplicationMode() {
        return this.skuReplicationMode;
    }

    /**
     * Get the migrationGuidelines property: Gets the list of migration guidelines applicable to this target.
     * 
     * @return the migrationGuidelines value.
     */
    public List<SqlMigrationGuideline> migrationGuidelines() {
        return this.migrationGuidelines;
    }

    /**
     * Get the recommendationReasonings property: Gets the list of SQL recommendation Reasoning.
     * 
     * @return the recommendationReasonings value.
     */
    public List<SqlRecommendationReasoning> recommendationReasonings() {
        return this.recommendationReasonings;
    }

    /**
     * Get the migrationTargetPlatform property: Gets the migration target platform.
     * 
     * @return the migrationTargetPlatform value.
     */
    public TargetType migrationTargetPlatform() {
        return this.migrationTargetPlatform;
    }

    /**
     * Get the suitability property: Gets the azure suitability.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Get the migrationIssues property: Gets the list of migrations issues.
     * 
     * @return the migrationIssues value.
     */
    public List<SqlAssessmentMigrationIssue> migrationIssues() {
        return this.migrationIssues;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (azureSqlSku() != null) {
            azureSqlSku().validate();
        }
        if (replicaAzureSqlSku() != null) {
            replicaAzureSqlSku().forEach(e -> e.validate());
        }
        if (sharedResources() != null) {
            sharedResources().validate();
        }
        if (costComponents() != null) {
            costComponents().forEach(e -> e.validate());
        }
        if (migrationGuidelines() != null) {
            migrationGuidelines().forEach(e -> e.validate());
        }
        if (recommendationReasonings() != null) {
            recommendationReasonings().forEach(e -> e.validate());
        }
        if (migrationIssues() != null) {
            migrationIssues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("costComponents", this.costComponents,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessmentV2IaasSuitabilityData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessmentV2IaasSuitabilityData if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessmentV2IaasSuitabilityData.
     */
    public static SqlAssessmentV2IaasSuitabilityData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessmentV2IaasSuitabilityData deserializedSqlAssessmentV2IaasSuitabilityData
                = new SqlAssessmentV2IaasSuitabilityData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("azureSqlSku".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.azureSqlSku = AzureSqlIaasSkuDto.fromJson(reader);
                } else if ("replicaAzureSqlSku".equals(fieldName)) {
                    List<AzureSqlIaasSkuDto> replicaAzureSqlSku
                        = reader.readArray(reader1 -> AzureSqlIaasSkuDto.fromJson(reader1));
                    deserializedSqlAssessmentV2IaasSuitabilityData.replicaAzureSqlSku = replicaAzureSqlSku;
                } else if ("sharedResources".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.sharedResources
                        = SharedResourcesDto.fromJson(reader);
                } else if ("monthlyComputeCost".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.monthlyComputeCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyStorageCost".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.monthlyStorageCost
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("costComponents".equals(fieldName)) {
                    List<CostComponent> costComponents = reader.readArray(reader1 -> CostComponent.fromJson(reader1));
                    deserializedSqlAssessmentV2IaasSuitabilityData.costComponents = costComponents;
                } else if ("securitySuitability".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.securitySuitability
                        = CloudSuitability.fromString(reader.getString());
                } else if ("shouldProvisionReplicas".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.shouldProvisionReplicas
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("skuReplicationMode".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.skuReplicationMode
                        = SkuReplicationMode.fromString(reader.getString());
                } else if ("migrationGuidelines".equals(fieldName)) {
                    List<SqlMigrationGuideline> migrationGuidelines
                        = reader.readArray(reader1 -> SqlMigrationGuideline.fromJson(reader1));
                    deserializedSqlAssessmentV2IaasSuitabilityData.migrationGuidelines = migrationGuidelines;
                } else if ("recommendationReasonings".equals(fieldName)) {
                    List<SqlRecommendationReasoning> recommendationReasonings
                        = reader.readArray(reader1 -> SqlRecommendationReasoning.fromJson(reader1));
                    deserializedSqlAssessmentV2IaasSuitabilityData.recommendationReasonings = recommendationReasonings;
                } else if ("migrationTargetPlatform".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.migrationTargetPlatform
                        = TargetType.fromString(reader.getString());
                } else if ("suitability".equals(fieldName)) {
                    deserializedSqlAssessmentV2IaasSuitabilityData.suitability
                        = CloudSuitability.fromString(reader.getString());
                } else if ("migrationIssues".equals(fieldName)) {
                    List<SqlAssessmentMigrationIssue> migrationIssues
                        = reader.readArray(reader1 -> SqlAssessmentMigrationIssue.fromJson(reader1));
                    deserializedSqlAssessmentV2IaasSuitabilityData.migrationIssues = migrationIssues;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessmentV2IaasSuitabilityData;
        });
    }
}
