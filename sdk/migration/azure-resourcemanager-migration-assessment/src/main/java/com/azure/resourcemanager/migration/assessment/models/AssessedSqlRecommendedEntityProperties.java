// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed SQL recommended entity properties.
 */
@Fluent
public final class AssessedSqlRecommendedEntityProperties
    implements JsonSerializable<AssessedSqlRecommendedEntityProperties> {
    /*
     * Gets or sets machine name.
     */
    private String machineName;

    /*
     * Gets or sets SQL instance name.
     */
    private String instanceName;

    /*
     * Gets the product support status related details.
     */
    private ProductSupportStatus productSupportStatus;

    /*
     * Gets or sets assessed database count.
     */
    private Integer dbCount;

    /*
     * Gets or sets the total discovered database count.
     */
    private Integer discoveredDBCount;

    /*
     * Gets or sets a value indicating whether instance deep discovery has occurred or
     * not.
     */
    private Boolean hasScanOccurred;

    /*
     * Gets or sets the recommended azure SQL target type.
     */
    private TargetType recommendedAzureSqlTargetType;

    /*
     * Gets or sets the recommended azure SQL suitability.
     */
    private RecommendedSuitability recommendedSuitability;

    /*
     * SQL instance azure SQL MI suitability details.
     */
    private SqlAssessmentV2PaasSuitabilityData azureSqlMISuitabilityDetails;

    /*
     * SQL instance azure SQL DB suitability details.
     */
    private SqlAssessmentV2PaasSuitabilityData azureSqlDBSuitabilityDetails;

    /*
     * SQL instance azure SQL VM suitability details.
     */
    private SqlAssessmentV2IaasSuitabilityData azureSqlVMSuitabilityDetails;

    /*
     * Gets or sets Arm id of assessed entity.
     */
    private String assessedSqlEntityArmId;

    /*
     * Gets or sets a value indicating whether the SQL instance is clustered or not.
     */
    private Boolean isClustered;

    /*
     * Gets or sets a value indicating whether the high availability is enabled or not.
     */
    private Boolean isHighAvailabilityEnabled;

    /*
     * Gets the SQL edition from the recommended entity if applicable.
     */
    private String sqlEdition;

    /*
     * Gets the SQL version from the recommended entity if applicable.
     */
    private String sqlVersion;

    /*
     * Assessment sizing criterion.
     */
    private AssessmentSizingCriterion sizingCriterion;

    /**
     * Creates an instance of AssessedSqlRecommendedEntityProperties class.
     */
    public AssessedSqlRecommendedEntityProperties() {
    }

    /**
     * Get the machineName property: Gets or sets machine name.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Get the instanceName property: Gets or sets SQL instance name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Get the productSupportStatus property: Gets the product support status related details.
     * 
     * @return the productSupportStatus value.
     */
    public ProductSupportStatus productSupportStatus() {
        return this.productSupportStatus;
    }

    /**
     * Get the dbCount property: Gets or sets assessed database count.
     * 
     * @return the dbCount value.
     */
    public Integer dbCount() {
        return this.dbCount;
    }

    /**
     * Get the discoveredDBCount property: Gets or sets the total discovered database count.
     * 
     * @return the discoveredDBCount value.
     */
    public Integer discoveredDBCount() {
        return this.discoveredDBCount;
    }

    /**
     * Get the hasScanOccurred property: Gets or sets a value indicating whether instance deep discovery has occurred or
     * not.
     * 
     * @return the hasScanOccurred value.
     */
    public Boolean hasScanOccurred() {
        return this.hasScanOccurred;
    }

    /**
     * Get the recommendedAzureSqlTargetType property: Gets or sets the recommended azure SQL target type.
     * 
     * @return the recommendedAzureSqlTargetType value.
     */
    public TargetType recommendedAzureSqlTargetType() {
        return this.recommendedAzureSqlTargetType;
    }

    /**
     * Get the recommendedSuitability property: Gets or sets the recommended azure SQL suitability.
     * 
     * @return the recommendedSuitability value.
     */
    public RecommendedSuitability recommendedSuitability() {
        return this.recommendedSuitability;
    }

    /**
     * Get the azureSqlMISuitabilityDetails property: SQL instance azure SQL MI suitability details.
     * 
     * @return the azureSqlMISuitabilityDetails value.
     */
    public SqlAssessmentV2PaasSuitabilityData azureSqlMISuitabilityDetails() {
        return this.azureSqlMISuitabilityDetails;
    }

    /**
     * Get the azureSqlDBSuitabilityDetails property: SQL instance azure SQL DB suitability details.
     * 
     * @return the azureSqlDBSuitabilityDetails value.
     */
    public SqlAssessmentV2PaasSuitabilityData azureSqlDBSuitabilityDetails() {
        return this.azureSqlDBSuitabilityDetails;
    }

    /**
     * Get the azureSqlVMSuitabilityDetails property: SQL instance azure SQL VM suitability details.
     * 
     * @return the azureSqlVMSuitabilityDetails value.
     */
    public SqlAssessmentV2IaasSuitabilityData azureSqlVMSuitabilityDetails() {
        return this.azureSqlVMSuitabilityDetails;
    }

    /**
     * Get the assessedSqlEntityArmId property: Gets or sets Arm id of assessed entity.
     * 
     * @return the assessedSqlEntityArmId value.
     */
    public String assessedSqlEntityArmId() {
        return this.assessedSqlEntityArmId;
    }

    /**
     * Set the assessedSqlEntityArmId property: Gets or sets Arm id of assessed entity.
     * 
     * @param assessedSqlEntityArmId the assessedSqlEntityArmId value to set.
     * @return the AssessedSqlRecommendedEntityProperties object itself.
     */
    public AssessedSqlRecommendedEntityProperties withAssessedSqlEntityArmId(String assessedSqlEntityArmId) {
        this.assessedSqlEntityArmId = assessedSqlEntityArmId;
        return this;
    }

    /**
     * Get the isClustered property: Gets or sets a value indicating whether the SQL instance is clustered or not.
     * 
     * @return the isClustered value.
     */
    public Boolean isClustered() {
        return this.isClustered;
    }

    /**
     * Get the isHighAvailabilityEnabled property: Gets or sets a value indicating whether the high availability is
     * enabled or not.
     * 
     * @return the isHighAvailabilityEnabled value.
     */
    public Boolean isHighAvailabilityEnabled() {
        return this.isHighAvailabilityEnabled;
    }

    /**
     * Get the sqlEdition property: Gets the SQL edition from the recommended entity if applicable.
     * 
     * @return the sqlEdition value.
     */
    public String sqlEdition() {
        return this.sqlEdition;
    }

    /**
     * Get the sqlVersion property: Gets the SQL version from the recommended entity if applicable.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.sqlVersion;
    }

    /**
     * Get the sizingCriterion property: Assessment sizing criterion.
     * 
     * @return the sizingCriterion value.
     */
    public AssessmentSizingCriterion sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productSupportStatus() != null) {
            productSupportStatus().validate();
        }
        if (azureSqlMISuitabilityDetails() != null) {
            azureSqlMISuitabilityDetails().validate();
        }
        if (azureSqlDBSuitabilityDetails() != null) {
            azureSqlDBSuitabilityDetails().validate();
        }
        if (azureSqlVMSuitabilityDetails() != null) {
            azureSqlVMSuitabilityDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assessedSqlEntityArmId", this.assessedSqlEntityArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlRecommendedEntityProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlRecommendedEntityProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlRecommendedEntityProperties.
     */
    public static AssessedSqlRecommendedEntityProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlRecommendedEntityProperties deserializedAssessedSqlRecommendedEntityProperties
                = new AssessedSqlRecommendedEntityProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("machineName".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.machineName = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.instanceName = reader.getString();
                } else if ("productSupportStatus".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.productSupportStatus
                        = ProductSupportStatus.fromJson(reader);
                } else if ("dbCount".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.dbCount = reader.getNullable(JsonReader::getInt);
                } else if ("discoveredDBCount".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.discoveredDBCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("hasScanOccurred".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.hasScanOccurred
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("recommendedAzureSqlTargetType".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.recommendedAzureSqlTargetType
                        = TargetType.fromString(reader.getString());
                } else if ("recommendedSuitability".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.recommendedSuitability
                        = RecommendedSuitability.fromString(reader.getString());
                } else if ("azureSqlMISuitabilityDetails".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.azureSqlMISuitabilityDetails
                        = SqlAssessmentV2PaasSuitabilityData.fromJson(reader);
                } else if ("azureSqlDBSuitabilityDetails".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.azureSqlDBSuitabilityDetails
                        = SqlAssessmentV2PaasSuitabilityData.fromJson(reader);
                } else if ("azureSqlVMSuitabilityDetails".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.azureSqlVMSuitabilityDetails
                        = SqlAssessmentV2IaasSuitabilityData.fromJson(reader);
                } else if ("assessedSqlEntityArmId".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.assessedSqlEntityArmId = reader.getString();
                } else if ("isClustered".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.isClustered
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("isHighAvailabilityEnabled".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.isHighAvailabilityEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("sqlEdition".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.sqlEdition = reader.getString();
                } else if ("sqlVersion".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.sqlVersion = reader.getString();
                } else if ("sizingCriterion".equals(fieldName)) {
                    deserializedAssessedSqlRecommendedEntityProperties.sizingCriterion
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlRecommendedEntityProperties;
        });
    }
}
