// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Assessment project summary properties class.
 */
@Immutable
public final class AssessmentProjectSummaryProperties implements JsonSerializable<AssessmentProjectSummaryProperties> {
    /*
     * Gets the Error summary by feature. Contains number of affected Entities per
     * feature.
     */
    private List<ErrorSummary> errorSummaryAffectedEntities;

    /*
     * Gets the number of private endpoint connections.
     */
    private Integer numberOfPrivateEndpointConnections;

    /*
     * Gets the number of groups created in this project.
     */
    private Integer numberOfGroups;

    /*
     * Gets the number of machines part of this project.
     */
    private Integer numberOfMachines;

    /*
     * Gets the number of import machines part of this project.
     */
    private Integer numberOfImportMachines;

    /*
     * Gets the number of assessments created in this project.
     */
    private Integer numberOfAssessments;

    /*
     * Gets the last assessment timestamp.
     */
    private OffsetDateTime lastAssessmentTimestamp;

    /**
     * Creates an instance of AssessmentProjectSummaryProperties class.
     */
    public AssessmentProjectSummaryProperties() {
    }

    /**
     * Get the errorSummaryAffectedEntities property: Gets the Error summary by feature. Contains number of affected
     * Entities per
     * feature.
     * 
     * @return the errorSummaryAffectedEntities value.
     */
    public List<ErrorSummary> errorSummaryAffectedEntities() {
        return this.errorSummaryAffectedEntities;
    }

    /**
     * Get the numberOfPrivateEndpointConnections property: Gets the number of private endpoint connections.
     * 
     * @return the numberOfPrivateEndpointConnections value.
     */
    public Integer numberOfPrivateEndpointConnections() {
        return this.numberOfPrivateEndpointConnections;
    }

    /**
     * Get the numberOfGroups property: Gets the number of groups created in this project.
     * 
     * @return the numberOfGroups value.
     */
    public Integer numberOfGroups() {
        return this.numberOfGroups;
    }

    /**
     * Get the numberOfMachines property: Gets the number of machines part of this project.
     * 
     * @return the numberOfMachines value.
     */
    public Integer numberOfMachines() {
        return this.numberOfMachines;
    }

    /**
     * Get the numberOfImportMachines property: Gets the number of import machines part of this project.
     * 
     * @return the numberOfImportMachines value.
     */
    public Integer numberOfImportMachines() {
        return this.numberOfImportMachines;
    }

    /**
     * Get the numberOfAssessments property: Gets the number of assessments created in this project.
     * 
     * @return the numberOfAssessments value.
     */
    public Integer numberOfAssessments() {
        return this.numberOfAssessments;
    }

    /**
     * Get the lastAssessmentTimestamp property: Gets the last assessment timestamp.
     * 
     * @return the lastAssessmentTimestamp value.
     */
    public OffsetDateTime lastAssessmentTimestamp() {
        return this.lastAssessmentTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (errorSummaryAffectedEntities() != null) {
            errorSummaryAffectedEntities().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentProjectSummaryProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentProjectSummaryProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentProjectSummaryProperties.
     */
    public static AssessmentProjectSummaryProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentProjectSummaryProperties deserializedAssessmentProjectSummaryProperties
                = new AssessmentProjectSummaryProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("errorSummaryAffectedEntities".equals(fieldName)) {
                    List<ErrorSummary> errorSummaryAffectedEntities
                        = reader.readArray(reader1 -> ErrorSummary.fromJson(reader1));
                    deserializedAssessmentProjectSummaryProperties.errorSummaryAffectedEntities
                        = errorSummaryAffectedEntities;
                } else if ("numberOfPrivateEndpointConnections".equals(fieldName)) {
                    deserializedAssessmentProjectSummaryProperties.numberOfPrivateEndpointConnections
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfGroups".equals(fieldName)) {
                    deserializedAssessmentProjectSummaryProperties.numberOfGroups
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfMachines".equals(fieldName)) {
                    deserializedAssessmentProjectSummaryProperties.numberOfMachines
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfImportMachines".equals(fieldName)) {
                    deserializedAssessmentProjectSummaryProperties.numberOfImportMachines
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfAssessments".equals(fieldName)) {
                    deserializedAssessmentProjectSummaryProperties.numberOfAssessments
                        = reader.getNullable(JsonReader::getInt);
                } else if ("lastAssessmentTimestamp".equals(fieldName)) {
                    deserializedAssessmentProjectSummaryProperties.lastAssessmentTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentProjectSummaryProperties;
        });
    }
}
