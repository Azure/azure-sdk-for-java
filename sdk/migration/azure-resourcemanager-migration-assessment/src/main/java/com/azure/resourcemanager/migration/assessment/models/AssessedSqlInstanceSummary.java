// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed Sql Instance Summary.
 */
@Fluent
public final class AssessedSqlInstanceSummary implements JsonSerializable<AssessedSqlInstanceSummary> {
    /*
     * Gets the instance id.
     */
    private String instanceId;

    /*
     * Gets the instance name.
     */
    private String instanceName;

    /*
     * Gets the instance arm id.
     */
    private String sqlInstanceSdsArmId;

    /*
     * Gets the instance entity id.
     */
    private String sqlInstanceEntityId;

    /*
     * Gets the Sql edition.
     */
    private String sqlEdition;

    /*
     * Gets the Sql version.
     */
    private String sqlVersion;

    /*
     * Gets whether Sql is clustered.
     */
    private Boolean isClustered;

    /*
     * Gets whether Sql is highly available.
     */
    private Boolean isHighAvailabilityEnabled;

    /*
     * Gets the Sql Fci state.
     */
    private SqlFciState sqlFciState;

    /**
     * Creates an instance of AssessedSqlInstanceSummary class.
     */
    public AssessedSqlInstanceSummary() {
    }

    /**
     * Get the instanceId property: Gets the instance id.
     * 
     * @return the instanceId value.
     */
    public String instanceId() {
        return this.instanceId;
    }

    /**
     * Set the instanceId property: Gets the instance id.
     * 
     * @param instanceId the instanceId value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withInstanceId(String instanceId) {
        this.instanceId = instanceId;
        return this;
    }

    /**
     * Get the instanceName property: Gets the instance name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Set the instanceName property: Gets the instance name.
     * 
     * @param instanceName the instanceName value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withInstanceName(String instanceName) {
        this.instanceName = instanceName;
        return this;
    }

    /**
     * Get the sqlInstanceSdsArmId property: Gets the instance arm id.
     * 
     * @return the sqlInstanceSdsArmId value.
     */
    public String sqlInstanceSdsArmId() {
        return this.sqlInstanceSdsArmId;
    }

    /**
     * Set the sqlInstanceSdsArmId property: Gets the instance arm id.
     * 
     * @param sqlInstanceSdsArmId the sqlInstanceSdsArmId value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withSqlInstanceSdsArmId(String sqlInstanceSdsArmId) {
        this.sqlInstanceSdsArmId = sqlInstanceSdsArmId;
        return this;
    }

    /**
     * Get the sqlInstanceEntityId property: Gets the instance entity id.
     * 
     * @return the sqlInstanceEntityId value.
     */
    public String sqlInstanceEntityId() {
        return this.sqlInstanceEntityId;
    }

    /**
     * Set the sqlInstanceEntityId property: Gets the instance entity id.
     * 
     * @param sqlInstanceEntityId the sqlInstanceEntityId value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withSqlInstanceEntityId(String sqlInstanceEntityId) {
        this.sqlInstanceEntityId = sqlInstanceEntityId;
        return this;
    }

    /**
     * Get the sqlEdition property: Gets the Sql edition.
     * 
     * @return the sqlEdition value.
     */
    public String sqlEdition() {
        return this.sqlEdition;
    }

    /**
     * Set the sqlEdition property: Gets the Sql edition.
     * 
     * @param sqlEdition the sqlEdition value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withSqlEdition(String sqlEdition) {
        this.sqlEdition = sqlEdition;
        return this;
    }

    /**
     * Get the sqlVersion property: Gets the Sql version.
     * 
     * @return the sqlVersion value.
     */
    public String sqlVersion() {
        return this.sqlVersion;
    }

    /**
     * Set the sqlVersion property: Gets the Sql version.
     * 
     * @param sqlVersion the sqlVersion value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withSqlVersion(String sqlVersion) {
        this.sqlVersion = sqlVersion;
        return this;
    }

    /**
     * Get the isClustered property: Gets whether Sql is clustered.
     * 
     * @return the isClustered value.
     */
    public Boolean isClustered() {
        return this.isClustered;
    }

    /**
     * Set the isClustered property: Gets whether Sql is clustered.
     * 
     * @param isClustered the isClustered value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withIsClustered(Boolean isClustered) {
        this.isClustered = isClustered;
        return this;
    }

    /**
     * Get the isHighAvailabilityEnabled property: Gets whether Sql is highly available.
     * 
     * @return the isHighAvailabilityEnabled value.
     */
    public Boolean isHighAvailabilityEnabled() {
        return this.isHighAvailabilityEnabled;
    }

    /**
     * Set the isHighAvailabilityEnabled property: Gets whether Sql is highly available.
     * 
     * @param isHighAvailabilityEnabled the isHighAvailabilityEnabled value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withIsHighAvailabilityEnabled(Boolean isHighAvailabilityEnabled) {
        this.isHighAvailabilityEnabled = isHighAvailabilityEnabled;
        return this;
    }

    /**
     * Get the sqlFciState property: Gets the Sql Fci state.
     * 
     * @return the sqlFciState value.
     */
    public SqlFciState sqlFciState() {
        return this.sqlFciState;
    }

    /**
     * Set the sqlFciState property: Gets the Sql Fci state.
     * 
     * @param sqlFciState the sqlFciState value to set.
     * @return the AssessedSqlInstanceSummary object itself.
     */
    public AssessedSqlInstanceSummary withSqlFciState(SqlFciState sqlFciState) {
        this.sqlFciState = sqlFciState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("instanceId", this.instanceId);
        jsonWriter.writeStringField("instanceName", this.instanceName);
        jsonWriter.writeStringField("sqlInstanceSdsArmId", this.sqlInstanceSdsArmId);
        jsonWriter.writeStringField("sqlInstanceEntityId", this.sqlInstanceEntityId);
        jsonWriter.writeStringField("sqlEdition", this.sqlEdition);
        jsonWriter.writeStringField("sqlVersion", this.sqlVersion);
        jsonWriter.writeBooleanField("isClustered", this.isClustered);
        jsonWriter.writeBooleanField("isHighAvailabilityEnabled", this.isHighAvailabilityEnabled);
        jsonWriter.writeStringField("sqlFciState", this.sqlFciState == null ? null : this.sqlFciState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlInstanceSummary from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlInstanceSummary if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlInstanceSummary.
     */
    public static AssessedSqlInstanceSummary fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlInstanceSummary deserializedAssessedSqlInstanceSummary = new AssessedSqlInstanceSummary();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("instanceId".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.instanceId = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.instanceName = reader.getString();
                } else if ("sqlInstanceSdsArmId".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.sqlInstanceSdsArmId = reader.getString();
                } else if ("sqlInstanceEntityId".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.sqlInstanceEntityId = reader.getString();
                } else if ("sqlEdition".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.sqlEdition = reader.getString();
                } else if ("sqlVersion".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.sqlVersion = reader.getString();
                } else if ("isClustered".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.isClustered = reader.getNullable(JsonReader::getBoolean);
                } else if ("isHighAvailabilityEnabled".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.isHighAvailabilityEnabled
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("sqlFciState".equals(fieldName)) {
                    deserializedAssessedSqlInstanceSummary.sqlFciState = SqlFciState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlInstanceSummary;
        });
    }
}
