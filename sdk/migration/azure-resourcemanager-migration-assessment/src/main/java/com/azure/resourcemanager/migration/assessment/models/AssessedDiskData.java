// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed Disk data. Used in Assessed SQL machine DTO.
 */
@Fluent
public final class AssessedDiskData implements JsonSerializable<AssessedDiskData> {
    /*
     * Gets the suitability.
     */
    private CloudSuitability suitability;

    /*
     * Gets the suitability explanation.
     */
    private AzureDiskSuitabilityExplanation suitabilityExplanation;

    /*
     * Gets the suitability detail.
     */
    private AzureDiskSuitabilityDetail suitabilityDetail;

    /*
     * Gets the recommended disk size.
     */
    private AzureDiskSize recommendedDiskSize;

    /*
     * Gets the recommended disk type.
     */
    private AzureDiskType recommendedDiskType;

    /*
     * Gets the recommended disk size.
     */
    private Integer recommendedDiskSizeGigabytes;

    /*
     * Gets the recommended disk throughput.
     */
    private Float recommendDiskThroughputInMbps;

    /*
     * Gets the recommended disk iops.
     */
    private Float recommendedDiskIops;

    /*
     * Gets the monthly storage cost.
     */
    private Float monthlyStorageCost;

    /*
     * Gets the name.
     */
    private String name;

    /*
     * Gets the machine display name.
     */
    private String displayName;

    /*
     * Gets the gigabytes provisioned.
     */
    private Float gigabytesProvisioned;

    /*
     * Gets the megabytes per second of read.
     */
    private Float megabytesPerSecondOfRead;

    /*
     * Gets the megabytes per second of write.
     */
    private Float megabytesPerSecondOfWrite;

    /*
     * Gets the number of read operations per second.
     */
    private Float numberOfReadOperationsPerSecond;

    /*
     * Gets the number of write operations per second.
     */
    private Float numberOfWriteOperationsPerSecond;

    /**
     * Creates an instance of AssessedDiskData class.
     */
    public AssessedDiskData() {
    }

    /**
     * Get the suitability property: Gets the suitability.
     * 
     * @return the suitability value.
     */
    public CloudSuitability suitability() {
        return this.suitability;
    }

    /**
     * Set the suitability property: Gets the suitability.
     * 
     * @param suitability the suitability value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withSuitability(CloudSuitability suitability) {
        this.suitability = suitability;
        return this;
    }

    /**
     * Get the suitabilityExplanation property: Gets the suitability explanation.
     * 
     * @return the suitabilityExplanation value.
     */
    public AzureDiskSuitabilityExplanation suitabilityExplanation() {
        return this.suitabilityExplanation;
    }

    /**
     * Set the suitabilityExplanation property: Gets the suitability explanation.
     * 
     * @param suitabilityExplanation the suitabilityExplanation value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withSuitabilityExplanation(AzureDiskSuitabilityExplanation suitabilityExplanation) {
        this.suitabilityExplanation = suitabilityExplanation;
        return this;
    }

    /**
     * Get the suitabilityDetail property: Gets the suitability detail.
     * 
     * @return the suitabilityDetail value.
     */
    public AzureDiskSuitabilityDetail suitabilityDetail() {
        return this.suitabilityDetail;
    }

    /**
     * Set the suitabilityDetail property: Gets the suitability detail.
     * 
     * @param suitabilityDetail the suitabilityDetail value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withSuitabilityDetail(AzureDiskSuitabilityDetail suitabilityDetail) {
        this.suitabilityDetail = suitabilityDetail;
        return this;
    }

    /**
     * Get the recommendedDiskSize property: Gets the recommended disk size.
     * 
     * @return the recommendedDiskSize value.
     */
    public AzureDiskSize recommendedDiskSize() {
        return this.recommendedDiskSize;
    }

    /**
     * Set the recommendedDiskSize property: Gets the recommended disk size.
     * 
     * @param recommendedDiskSize the recommendedDiskSize value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withRecommendedDiskSize(AzureDiskSize recommendedDiskSize) {
        this.recommendedDiskSize = recommendedDiskSize;
        return this;
    }

    /**
     * Get the recommendedDiskType property: Gets the recommended disk type.
     * 
     * @return the recommendedDiskType value.
     */
    public AzureDiskType recommendedDiskType() {
        return this.recommendedDiskType;
    }

    /**
     * Set the recommendedDiskType property: Gets the recommended disk type.
     * 
     * @param recommendedDiskType the recommendedDiskType value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withRecommendedDiskType(AzureDiskType recommendedDiskType) {
        this.recommendedDiskType = recommendedDiskType;
        return this;
    }

    /**
     * Get the recommendedDiskSizeGigabytes property: Gets the recommended disk size.
     * 
     * @return the recommendedDiskSizeGigabytes value.
     */
    public Integer recommendedDiskSizeGigabytes() {
        return this.recommendedDiskSizeGigabytes;
    }

    /**
     * Set the recommendedDiskSizeGigabytes property: Gets the recommended disk size.
     * 
     * @param recommendedDiskSizeGigabytes the recommendedDiskSizeGigabytes value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withRecommendedDiskSizeGigabytes(Integer recommendedDiskSizeGigabytes) {
        this.recommendedDiskSizeGigabytes = recommendedDiskSizeGigabytes;
        return this;
    }

    /**
     * Get the recommendDiskThroughputInMbps property: Gets the recommended disk throughput.
     * 
     * @return the recommendDiskThroughputInMbps value.
     */
    public Float recommendDiskThroughputInMbps() {
        return this.recommendDiskThroughputInMbps;
    }

    /**
     * Set the recommendDiskThroughputInMbps property: Gets the recommended disk throughput.
     * 
     * @param recommendDiskThroughputInMbps the recommendDiskThroughputInMbps value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withRecommendDiskThroughputInMbps(Float recommendDiskThroughputInMbps) {
        this.recommendDiskThroughputInMbps = recommendDiskThroughputInMbps;
        return this;
    }

    /**
     * Get the recommendedDiskIops property: Gets the recommended disk iops.
     * 
     * @return the recommendedDiskIops value.
     */
    public Float recommendedDiskIops() {
        return this.recommendedDiskIops;
    }

    /**
     * Set the recommendedDiskIops property: Gets the recommended disk iops.
     * 
     * @param recommendedDiskIops the recommendedDiskIops value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withRecommendedDiskIops(Float recommendedDiskIops) {
        this.recommendedDiskIops = recommendedDiskIops;
        return this;
    }

    /**
     * Get the monthlyStorageCost property: Gets the monthly storage cost.
     * 
     * @return the monthlyStorageCost value.
     */
    public Float monthlyStorageCost() {
        return this.monthlyStorageCost;
    }

    /**
     * Set the monthlyStorageCost property: Gets the monthly storage cost.
     * 
     * @param monthlyStorageCost the monthlyStorageCost value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withMonthlyStorageCost(Float monthlyStorageCost) {
        this.monthlyStorageCost = monthlyStorageCost;
        return this;
    }

    /**
     * Get the name property: Gets the name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets the name.
     * 
     * @param name the name value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the displayName property: Gets the machine display name.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Gets the machine display name.
     * 
     * @param displayName the displayName value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the gigabytesProvisioned property: Gets the gigabytes provisioned.
     * 
     * @return the gigabytesProvisioned value.
     */
    public Float gigabytesProvisioned() {
        return this.gigabytesProvisioned;
    }

    /**
     * Set the gigabytesProvisioned property: Gets the gigabytes provisioned.
     * 
     * @param gigabytesProvisioned the gigabytesProvisioned value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withGigabytesProvisioned(Float gigabytesProvisioned) {
        this.gigabytesProvisioned = gigabytesProvisioned;
        return this;
    }

    /**
     * Get the megabytesPerSecondOfRead property: Gets the megabytes per second of read.
     * 
     * @return the megabytesPerSecondOfRead value.
     */
    public Float megabytesPerSecondOfRead() {
        return this.megabytesPerSecondOfRead;
    }

    /**
     * Set the megabytesPerSecondOfRead property: Gets the megabytes per second of read.
     * 
     * @param megabytesPerSecondOfRead the megabytesPerSecondOfRead value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withMegabytesPerSecondOfRead(Float megabytesPerSecondOfRead) {
        this.megabytesPerSecondOfRead = megabytesPerSecondOfRead;
        return this;
    }

    /**
     * Get the megabytesPerSecondOfWrite property: Gets the megabytes per second of write.
     * 
     * @return the megabytesPerSecondOfWrite value.
     */
    public Float megabytesPerSecondOfWrite() {
        return this.megabytesPerSecondOfWrite;
    }

    /**
     * Set the megabytesPerSecondOfWrite property: Gets the megabytes per second of write.
     * 
     * @param megabytesPerSecondOfWrite the megabytesPerSecondOfWrite value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withMegabytesPerSecondOfWrite(Float megabytesPerSecondOfWrite) {
        this.megabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
        return this;
    }

    /**
     * Get the numberOfReadOperationsPerSecond property: Gets the number of read operations per second.
     * 
     * @return the numberOfReadOperationsPerSecond value.
     */
    public Float numberOfReadOperationsPerSecond() {
        return this.numberOfReadOperationsPerSecond;
    }

    /**
     * Set the numberOfReadOperationsPerSecond property: Gets the number of read operations per second.
     * 
     * @param numberOfReadOperationsPerSecond the numberOfReadOperationsPerSecond value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withNumberOfReadOperationsPerSecond(Float numberOfReadOperationsPerSecond) {
        this.numberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
        return this;
    }

    /**
     * Get the numberOfWriteOperationsPerSecond property: Gets the number of write operations per second.
     * 
     * @return the numberOfWriteOperationsPerSecond value.
     */
    public Float numberOfWriteOperationsPerSecond() {
        return this.numberOfWriteOperationsPerSecond;
    }

    /**
     * Set the numberOfWriteOperationsPerSecond property: Gets the number of write operations per second.
     * 
     * @param numberOfWriteOperationsPerSecond the numberOfWriteOperationsPerSecond value to set.
     * @return the AssessedDiskData object itself.
     */
    public AssessedDiskData withNumberOfWriteOperationsPerSecond(Float numberOfWriteOperationsPerSecond) {
        this.numberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("suitability", this.suitability == null ? null : this.suitability.toString());
        jsonWriter.writeStringField("suitabilityExplanation",
            this.suitabilityExplanation == null ? null : this.suitabilityExplanation.toString());
        jsonWriter.writeStringField("suitabilityDetail",
            this.suitabilityDetail == null ? null : this.suitabilityDetail.toString());
        jsonWriter.writeStringField("recommendedDiskSize",
            this.recommendedDiskSize == null ? null : this.recommendedDiskSize.toString());
        jsonWriter.writeStringField("recommendedDiskType",
            this.recommendedDiskType == null ? null : this.recommendedDiskType.toString());
        jsonWriter.writeNumberField("recommendedDiskSizeGigabytes", this.recommendedDiskSizeGigabytes);
        jsonWriter.writeNumberField("recommendDiskThroughputInMbps", this.recommendDiskThroughputInMbps);
        jsonWriter.writeNumberField("recommendedDiskIops", this.recommendedDiskIops);
        jsonWriter.writeNumberField("monthlyStorageCost", this.monthlyStorageCost);
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeNumberField("gigabytesProvisioned", this.gigabytesProvisioned);
        jsonWriter.writeNumberField("megabytesPerSecondOfRead", this.megabytesPerSecondOfRead);
        jsonWriter.writeNumberField("megabytesPerSecondOfWrite", this.megabytesPerSecondOfWrite);
        jsonWriter.writeNumberField("numberOfReadOperationsPerSecond", this.numberOfReadOperationsPerSecond);
        jsonWriter.writeNumberField("numberOfWriteOperationsPerSecond", this.numberOfWriteOperationsPerSecond);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedDiskData from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedDiskData if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedDiskData.
     */
    public static AssessedDiskData fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedDiskData deserializedAssessedDiskData = new AssessedDiskData();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suitability".equals(fieldName)) {
                    deserializedAssessedDiskData.suitability = CloudSuitability.fromString(reader.getString());
                } else if ("suitabilityExplanation".equals(fieldName)) {
                    deserializedAssessedDiskData.suitabilityExplanation
                        = AzureDiskSuitabilityExplanation.fromString(reader.getString());
                } else if ("suitabilityDetail".equals(fieldName)) {
                    deserializedAssessedDiskData.suitabilityDetail
                        = AzureDiskSuitabilityDetail.fromString(reader.getString());
                } else if ("recommendedDiskSize".equals(fieldName)) {
                    deserializedAssessedDiskData.recommendedDiskSize = AzureDiskSize.fromString(reader.getString());
                } else if ("recommendedDiskType".equals(fieldName)) {
                    deserializedAssessedDiskData.recommendedDiskType = AzureDiskType.fromString(reader.getString());
                } else if ("recommendedDiskSizeGigabytes".equals(fieldName)) {
                    deserializedAssessedDiskData.recommendedDiskSizeGigabytes = reader.getNullable(JsonReader::getInt);
                } else if ("recommendDiskThroughputInMbps".equals(fieldName)) {
                    deserializedAssessedDiskData.recommendDiskThroughputInMbps
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("recommendedDiskIops".equals(fieldName)) {
                    deserializedAssessedDiskData.recommendedDiskIops = reader.getNullable(JsonReader::getFloat);
                } else if ("monthlyStorageCost".equals(fieldName)) {
                    deserializedAssessedDiskData.monthlyStorageCost = reader.getNullable(JsonReader::getFloat);
                } else if ("name".equals(fieldName)) {
                    deserializedAssessedDiskData.name = reader.getString();
                } else if ("displayName".equals(fieldName)) {
                    deserializedAssessedDiskData.displayName = reader.getString();
                } else if ("gigabytesProvisioned".equals(fieldName)) {
                    deserializedAssessedDiskData.gigabytesProvisioned = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfRead".equals(fieldName)) {
                    deserializedAssessedDiskData.megabytesPerSecondOfRead = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfWrite".equals(fieldName)) {
                    deserializedAssessedDiskData.megabytesPerSecondOfWrite = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfReadOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedDiskData.numberOfReadOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfWriteOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedDiskData.numberOfWriteOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedDiskData;
        });
    }
}
