// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Represents a information \ details of a processor.
 */
@Fluent
public final class ProcessorInfo implements JsonSerializable<ProcessorInfo> {
    /*
     * Gets or sets the name \ model of a processor.
     */
    private String name;

    /*
     * Gets or sets the number of sockets.
     */
    private Integer numberOfSockets;

    /*
     * Gets or sets the number of cores in a socket.
     */
    private Integer numberOfCoresPerSocket;

    /**
     * Creates an instance of ProcessorInfo class.
     */
    public ProcessorInfo() {
    }

    /**
     * Get the name property: Gets or sets the name \ model of a processor.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the name \ model of a processor.
     * 
     * @param name the name value to set.
     * @return the ProcessorInfo object itself.
     */
    public ProcessorInfo withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the numberOfSockets property: Gets or sets the number of sockets.
     * 
     * @return the numberOfSockets value.
     */
    public Integer numberOfSockets() {
        return this.numberOfSockets;
    }

    /**
     * Set the numberOfSockets property: Gets or sets the number of sockets.
     * 
     * @param numberOfSockets the numberOfSockets value to set.
     * @return the ProcessorInfo object itself.
     */
    public ProcessorInfo withNumberOfSockets(Integer numberOfSockets) {
        this.numberOfSockets = numberOfSockets;
        return this;
    }

    /**
     * Get the numberOfCoresPerSocket property: Gets or sets the number of cores in a socket.
     * 
     * @return the numberOfCoresPerSocket value.
     */
    public Integer numberOfCoresPerSocket() {
        return this.numberOfCoresPerSocket;
    }

    /**
     * Set the numberOfCoresPerSocket property: Gets or sets the number of cores in a socket.
     * 
     * @param numberOfCoresPerSocket the numberOfCoresPerSocket value to set.
     * @return the ProcessorInfo object itself.
     */
    public ProcessorInfo withNumberOfCoresPerSocket(Integer numberOfCoresPerSocket) {
        this.numberOfCoresPerSocket = numberOfCoresPerSocket;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("numberOfSockets", this.numberOfSockets);
        jsonWriter.writeNumberField("numberOfCoresPerSocket", this.numberOfCoresPerSocket);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProcessorInfo from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProcessorInfo if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProcessorInfo.
     */
    public static ProcessorInfo fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProcessorInfo deserializedProcessorInfo = new ProcessorInfo();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedProcessorInfo.name = reader.getString();
                } else if ("numberOfSockets".equals(fieldName)) {
                    deserializedProcessorInfo.numberOfSockets = reader.getNullable(JsonReader::getInt);
                } else if ("numberOfCoresPerSocket".equals(fieldName)) {
                    deserializedProcessorInfo.numberOfCoresPerSocket = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProcessorInfo;
        });
    }
}
