// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Sql Migration Guideline.
 */
@Fluent
public final class SqlMigrationGuideline implements JsonSerializable<SqlMigrationGuideline> {
    /*
     * Gets the guideline id.
     */
    private String guidelineId;

    /*
     * Gets the migration guideline category.
     */
    private SqlMigrationGuidelineCategory migrationGuidelineCategory;

    /*
     * Gets the migration guideline context.
     */
    private List<MigrationGuidelineContext> migrationGuidelineContext;

    /**
     * Creates an instance of SqlMigrationGuideline class.
     */
    public SqlMigrationGuideline() {
    }

    /**
     * Get the guidelineId property: Gets the guideline id.
     * 
     * @return the guidelineId value.
     */
    public String guidelineId() {
        return this.guidelineId;
    }

    /**
     * Set the guidelineId property: Gets the guideline id.
     * 
     * @param guidelineId the guidelineId value to set.
     * @return the SqlMigrationGuideline object itself.
     */
    public SqlMigrationGuideline withGuidelineId(String guidelineId) {
        this.guidelineId = guidelineId;
        return this;
    }

    /**
     * Get the migrationGuidelineCategory property: Gets the migration guideline category.
     * 
     * @return the migrationGuidelineCategory value.
     */
    public SqlMigrationGuidelineCategory migrationGuidelineCategory() {
        return this.migrationGuidelineCategory;
    }

    /**
     * Set the migrationGuidelineCategory property: Gets the migration guideline category.
     * 
     * @param migrationGuidelineCategory the migrationGuidelineCategory value to set.
     * @return the SqlMigrationGuideline object itself.
     */
    public SqlMigrationGuideline
        withMigrationGuidelineCategory(SqlMigrationGuidelineCategory migrationGuidelineCategory) {
        this.migrationGuidelineCategory = migrationGuidelineCategory;
        return this;
    }

    /**
     * Get the migrationGuidelineContext property: Gets the migration guideline context.
     * 
     * @return the migrationGuidelineContext value.
     */
    public List<MigrationGuidelineContext> migrationGuidelineContext() {
        return this.migrationGuidelineContext;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (migrationGuidelineContext() != null) {
            migrationGuidelineContext().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("guidelineId", this.guidelineId);
        jsonWriter.writeStringField("migrationGuidelineCategory",
            this.migrationGuidelineCategory == null ? null : this.migrationGuidelineCategory.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlMigrationGuideline from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlMigrationGuideline if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlMigrationGuideline.
     */
    public static SqlMigrationGuideline fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlMigrationGuideline deserializedSqlMigrationGuideline = new SqlMigrationGuideline();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("guidelineId".equals(fieldName)) {
                    deserializedSqlMigrationGuideline.guidelineId = reader.getString();
                } else if ("migrationGuidelineCategory".equals(fieldName)) {
                    deserializedSqlMigrationGuideline.migrationGuidelineCategory
                        = SqlMigrationGuidelineCategory.fromString(reader.getString());
                } else if ("migrationGuidelineContext".equals(fieldName)) {
                    List<MigrationGuidelineContext> migrationGuidelineContext
                        = reader.readArray(reader1 -> MigrationGuidelineContext.fromJson(reader1));
                    deserializedSqlMigrationGuideline.migrationGuidelineContext = migrationGuidelineContext;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlMigrationGuideline;
        });
    }
}
