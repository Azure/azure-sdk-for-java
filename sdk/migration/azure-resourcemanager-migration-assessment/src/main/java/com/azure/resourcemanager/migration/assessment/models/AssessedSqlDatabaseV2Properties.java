// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Assessed SQL database properties web model.
 */
@Immutable
public final class AssessedSqlDatabaseV2Properties implements JsonSerializable<AssessedSqlDatabaseV2Properties> {
    /*
     * Gets or sets the recommended azure SQL target type.
     */
    private TargetType recommendedAzureSqlTargetType;

    /*
     * Gets or sets the recommended azure SQL suitability.
     */
    private RecommendedSuitability recommendedSuitability;

    /*
     * Gets or sets the aggregated cache size of this database. This is a performance
     * data metric for this DB.
     */
    private Float bufferCacheSizeInMB;

    /*
     * Gets the product support status related details.
     */
    private ProductSupportStatus productSupportStatus;

    /*
     * Gets or sets the azure SQL MI suitability details.
     */
    private SqlAssessmentV2PaasSuitabilityData azureSqlMISuitabilityDetails;

    /*
     * Gets or sets the azure SQL DB suitability details.
     */
    private SqlAssessmentV2PaasSuitabilityData azureSqlDBSuitabilityDetails;

    /*
     * Gets a value indicating whether the assessed SQL database is highly available
     * or not.
     */
    private Boolean isDatabaseHighlyAvailable;

    /*
     * Gets the linked availability group overview if the database being assessed is
     * highly available.
     */
    private SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview;

    /*
     * Machine arm id.
     */
    private String machineArmId;

    /*
     * Assessed SQL instance arm id.
     */
    private String assessedSqlInstanceArmId;

    /*
     * Machine display name.
     */
    private String machineName;

    /*
     * SQL instance name.
     */
    private String instanceName;

    /*
     * SQL database name.
     */
    private String databaseName;

    /*
     * SQL database size in megabytes.
     */
    private Float databaseSizeInMB;

    /*
     * Database compatibility level.
     */
    private CompatibilityLevel compatibilityLevel;

    /*
     * SQL database SDS arm id.
     */
    private String sqlDatabaseSdsArmId;

    /*
     * The percentage of the total number of cores being utilized by the SQL database.
     */
    private Float percentageCoresUtilization;

    /*
     * The read throughput of the SQL database.
     */
    private Float megabytesPerSecondOfRead;

    /*
     * The write throughput of the SQL database.
     */
    private Float megabytesPerSecondOfWrite;

    /*
     * The read operations per second of the SQL database.
     */
    private Float numberOfReadOperationsPerSecond;

    /*
     * The write operations per second of the SQL database.
     */
    private Float numberOfWriteOperationsPerSecond;

    /*
     * Confidence Rating in Percentage.
     */
    private Float confidenceRatingInPercentage;

    /*
     * Assessment sizing criterion.
     */
    private AssessmentSizingCriterion sizingCriterion;

    /*
     * When was assessed SQL database first created.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * When was assessed SQL database last updated.
     */
    private OffsetDateTime updatedTimestamp;

    /**
     * Creates an instance of AssessedSqlDatabaseV2Properties class.
     */
    public AssessedSqlDatabaseV2Properties() {
    }

    /**
     * Get the recommendedAzureSqlTargetType property: Gets or sets the recommended azure SQL target type.
     * 
     * @return the recommendedAzureSqlTargetType value.
     */
    public TargetType recommendedAzureSqlTargetType() {
        return this.recommendedAzureSqlTargetType;
    }

    /**
     * Get the recommendedSuitability property: Gets or sets the recommended azure SQL suitability.
     * 
     * @return the recommendedSuitability value.
     */
    public RecommendedSuitability recommendedSuitability() {
        return this.recommendedSuitability;
    }

    /**
     * Get the bufferCacheSizeInMB property: Gets or sets the aggregated cache size of this database. This is a
     * performance
     * data metric for this DB.
     * 
     * @return the bufferCacheSizeInMB value.
     */
    public Float bufferCacheSizeInMB() {
        return this.bufferCacheSizeInMB;
    }

    /**
     * Get the productSupportStatus property: Gets the product support status related details.
     * 
     * @return the productSupportStatus value.
     */
    public ProductSupportStatus productSupportStatus() {
        return this.productSupportStatus;
    }

    /**
     * Get the azureSqlMISuitabilityDetails property: Gets or sets the azure SQL MI suitability details.
     * 
     * @return the azureSqlMISuitabilityDetails value.
     */
    public SqlAssessmentV2PaasSuitabilityData azureSqlMISuitabilityDetails() {
        return this.azureSqlMISuitabilityDetails;
    }

    /**
     * Get the azureSqlDBSuitabilityDetails property: Gets or sets the azure SQL DB suitability details.
     * 
     * @return the azureSqlDBSuitabilityDetails value.
     */
    public SqlAssessmentV2PaasSuitabilityData azureSqlDBSuitabilityDetails() {
        return this.azureSqlDBSuitabilityDetails;
    }

    /**
     * Get the isDatabaseHighlyAvailable property: Gets a value indicating whether the assessed SQL database is highly
     * available
     * or not.
     * 
     * @return the isDatabaseHighlyAvailable value.
     */
    public Boolean isDatabaseHighlyAvailable() {
        return this.isDatabaseHighlyAvailable;
    }

    /**
     * Get the linkedAvailabilityGroupOverview property: Gets the linked availability group overview if the database
     * being assessed is
     * highly available.
     * 
     * @return the linkedAvailabilityGroupOverview value.
     */
    public SqlAvailabilityGroupDataOverview linkedAvailabilityGroupOverview() {
        return this.linkedAvailabilityGroupOverview;
    }

    /**
     * Get the machineArmId property: Machine arm id.
     * 
     * @return the machineArmId value.
     */
    public String machineArmId() {
        return this.machineArmId;
    }

    /**
     * Get the assessedSqlInstanceArmId property: Assessed SQL instance arm id.
     * 
     * @return the assessedSqlInstanceArmId value.
     */
    public String assessedSqlInstanceArmId() {
        return this.assessedSqlInstanceArmId;
    }

    /**
     * Get the machineName property: Machine display name.
     * 
     * @return the machineName value.
     */
    public String machineName() {
        return this.machineName;
    }

    /**
     * Get the instanceName property: SQL instance name.
     * 
     * @return the instanceName value.
     */
    public String instanceName() {
        return this.instanceName;
    }

    /**
     * Get the databaseName property: SQL database name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the databaseSizeInMB property: SQL database size in megabytes.
     * 
     * @return the databaseSizeInMB value.
     */
    public Float databaseSizeInMB() {
        return this.databaseSizeInMB;
    }

    /**
     * Get the compatibilityLevel property: Database compatibility level.
     * 
     * @return the compatibilityLevel value.
     */
    public CompatibilityLevel compatibilityLevel() {
        return this.compatibilityLevel;
    }

    /**
     * Get the sqlDatabaseSdsArmId property: SQL database SDS arm id.
     * 
     * @return the sqlDatabaseSdsArmId value.
     */
    public String sqlDatabaseSdsArmId() {
        return this.sqlDatabaseSdsArmId;
    }

    /**
     * Get the percentageCoresUtilization property: The percentage of the total number of cores being utilized by the
     * SQL database.
     * 
     * @return the percentageCoresUtilization value.
     */
    public Float percentageCoresUtilization() {
        return this.percentageCoresUtilization;
    }

    /**
     * Get the megabytesPerSecondOfRead property: The read throughput of the SQL database.
     * 
     * @return the megabytesPerSecondOfRead value.
     */
    public Float megabytesPerSecondOfRead() {
        return this.megabytesPerSecondOfRead;
    }

    /**
     * Get the megabytesPerSecondOfWrite property: The write throughput of the SQL database.
     * 
     * @return the megabytesPerSecondOfWrite value.
     */
    public Float megabytesPerSecondOfWrite() {
        return this.megabytesPerSecondOfWrite;
    }

    /**
     * Get the numberOfReadOperationsPerSecond property: The read operations per second of the SQL database.
     * 
     * @return the numberOfReadOperationsPerSecond value.
     */
    public Float numberOfReadOperationsPerSecond() {
        return this.numberOfReadOperationsPerSecond;
    }

    /**
     * Get the numberOfWriteOperationsPerSecond property: The write operations per second of the SQL database.
     * 
     * @return the numberOfWriteOperationsPerSecond value.
     */
    public Float numberOfWriteOperationsPerSecond() {
        return this.numberOfWriteOperationsPerSecond;
    }

    /**
     * Get the confidenceRatingInPercentage property: Confidence Rating in Percentage.
     * 
     * @return the confidenceRatingInPercentage value.
     */
    public Float confidenceRatingInPercentage() {
        return this.confidenceRatingInPercentage;
    }

    /**
     * Get the sizingCriterion property: Assessment sizing criterion.
     * 
     * @return the sizingCriterion value.
     */
    public AssessmentSizingCriterion sizingCriterion() {
        return this.sizingCriterion;
    }

    /**
     * Get the createdTimestamp property: When was assessed SQL database first created.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: When was assessed SQL database last updated.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (productSupportStatus() != null) {
            productSupportStatus().validate();
        }
        if (azureSqlMISuitabilityDetails() != null) {
            azureSqlMISuitabilityDetails().validate();
        }
        if (azureSqlDBSuitabilityDetails() != null) {
            azureSqlDBSuitabilityDetails().validate();
        }
        if (linkedAvailabilityGroupOverview() != null) {
            linkedAvailabilityGroupOverview().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlDatabaseV2Properties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlDatabaseV2Properties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlDatabaseV2Properties.
     */
    public static AssessedSqlDatabaseV2Properties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlDatabaseV2Properties deserializedAssessedSqlDatabaseV2Properties
                = new AssessedSqlDatabaseV2Properties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("recommendedAzureSqlTargetType".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.recommendedAzureSqlTargetType
                        = TargetType.fromString(reader.getString());
                } else if ("recommendedSuitability".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.recommendedSuitability
                        = RecommendedSuitability.fromString(reader.getString());
                } else if ("bufferCacheSizeInMB".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.bufferCacheSizeInMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("productSupportStatus".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.productSupportStatus
                        = ProductSupportStatus.fromJson(reader);
                } else if ("azureSqlMISuitabilityDetails".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.azureSqlMISuitabilityDetails
                        = SqlAssessmentV2PaasSuitabilityData.fromJson(reader);
                } else if ("azureSqlDBSuitabilityDetails".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.azureSqlDBSuitabilityDetails
                        = SqlAssessmentV2PaasSuitabilityData.fromJson(reader);
                } else if ("isDatabaseHighlyAvailable".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.isDatabaseHighlyAvailable
                        = reader.getNullable(JsonReader::getBoolean);
                } else if ("linkedAvailabilityGroupOverview".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.linkedAvailabilityGroupOverview
                        = SqlAvailabilityGroupDataOverview.fromJson(reader);
                } else if ("machineArmId".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.machineArmId = reader.getString();
                } else if ("assessedSqlInstanceArmId".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.assessedSqlInstanceArmId = reader.getString();
                } else if ("machineName".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.machineName = reader.getString();
                } else if ("instanceName".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.instanceName = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.databaseName = reader.getString();
                } else if ("databaseSizeInMB".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.databaseSizeInMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("compatibilityLevel".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.compatibilityLevel
                        = CompatibilityLevel.fromString(reader.getString());
                } else if ("sqlDatabaseSdsArmId".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.sqlDatabaseSdsArmId = reader.getString();
                } else if ("percentageCoresUtilization".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.percentageCoresUtilization
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfRead".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.megabytesPerSecondOfRead
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfWrite".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.megabytesPerSecondOfWrite
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfReadOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.numberOfReadOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfWriteOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.numberOfWriteOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("confidenceRatingInPercentage".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.confidenceRatingInPercentage
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("sizingCriterion".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.sizingCriterion
                        = AssessmentSizingCriterion.fromString(reader.getString());
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedAssessedSqlDatabaseV2Properties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlDatabaseV2Properties;
        });
    }
}
