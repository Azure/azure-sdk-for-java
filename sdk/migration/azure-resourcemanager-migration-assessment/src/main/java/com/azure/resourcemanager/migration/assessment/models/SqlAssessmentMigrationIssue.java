// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Class representing the SQL migration issues.
 */
@Immutable
public final class SqlAssessmentMigrationIssue implements JsonSerializable<SqlAssessmentMigrationIssue> {
    /*
     * Gets the issue id.
     */
    private String issueId;

    /*
     * Gets the issue category.
     */
    private SqlAssessmentMigrationIssueCategory issueCategory;

    /*
     * Gets the list of impacted objects.
     */
    private List<ImpactedAssessmentObject> impactedObjects;

    /**
     * Creates an instance of SqlAssessmentMigrationIssue class.
     */
    public SqlAssessmentMigrationIssue() {
    }

    /**
     * Get the issueId property: Gets the issue id.
     * 
     * @return the issueId value.
     */
    public String issueId() {
        return this.issueId;
    }

    /**
     * Get the issueCategory property: Gets the issue category.
     * 
     * @return the issueCategory value.
     */
    public SqlAssessmentMigrationIssueCategory issueCategory() {
        return this.issueCategory;
    }

    /**
     * Get the impactedObjects property: Gets the list of impacted objects.
     * 
     * @return the impactedObjects value.
     */
    public List<ImpactedAssessmentObject> impactedObjects() {
        return this.impactedObjects;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (impactedObjects() != null) {
            impactedObjects().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlAssessmentMigrationIssue from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlAssessmentMigrationIssue if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlAssessmentMigrationIssue.
     */
    public static SqlAssessmentMigrationIssue fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlAssessmentMigrationIssue deserializedSqlAssessmentMigrationIssue = new SqlAssessmentMigrationIssue();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("issueId".equals(fieldName)) {
                    deserializedSqlAssessmentMigrationIssue.issueId = reader.getString();
                } else if ("issueCategory".equals(fieldName)) {
                    deserializedSqlAssessmentMigrationIssue.issueCategory
                        = SqlAssessmentMigrationIssueCategory.fromString(reader.getString());
                } else if ("impactedObjects".equals(fieldName)) {
                    List<ImpactedAssessmentObject> impactedObjects
                        = reader.readArray(reader1 -> ImpactedAssessmentObject.fromJson(reader1));
                    deserializedSqlAssessmentMigrationIssue.impactedObjects = impactedObjects;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlAssessmentMigrationIssue;
        });
    }
}
