// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.migration.assessment.fluent.models.PrivateEndpointConnectionInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Properties of a project.
 */
@Fluent
public final class ProjectProperties extends AzureResourceProperties {
    /*
     * Time when this project was created. Date-Time represented in ISO-8601 format.
     */
    private OffsetDateTime createdTimestamp;

    /*
     * Time when this project was last updated. Date-Time represented in ISO-8601
     * format.
     */
    private OffsetDateTime updatedTimestamp;

    /*
     * Endpoint at which the collector agent can call agent REST API.
     */
    private String serviceEndpoint;

    /*
     * Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
     */
    private String assessmentSolutionId;

    /*
     * Assessment project status.
     */
    private ProjectStatus projectStatus;

    /*
     * The ARM id of service map workspace created by customer.
     */
    private String customerWorkspaceId;

    /*
     * Location of service map workspace created by customer.
     */
    private String customerWorkspaceLocation;

    /*
     * This value can be set to 'enabled' to avoid breaking changes on existing
     * customer resources and templates. If set to 'disabled', traffic over public
     * interface is not allowed, and private endpoint connections would be the
     * exclusive access method.
     */
    private String publicNetworkAccess;

    /*
     * The list of private endpoint connections to the project.
     */
    private List<PrivateEndpointConnectionInner> privateEndpointConnections;

    /*
     * The ARM id of the storage account used for interactions when public access is
     * disabled.
     */
    private String customerStorageAccountArmId;

    /**
     * Creates an instance of ProjectProperties class.
     */
    public ProjectProperties() {
    }

    /**
     * Get the createdTimestamp property: Time when this project was created. Date-Time represented in ISO-8601 format.
     * 
     * @return the createdTimestamp value.
     */
    public OffsetDateTime createdTimestamp() {
        return this.createdTimestamp;
    }

    /**
     * Get the updatedTimestamp property: Time when this project was last updated. Date-Time represented in ISO-8601
     * format.
     * 
     * @return the updatedTimestamp value.
     */
    public OffsetDateTime updatedTimestamp() {
        return this.updatedTimestamp;
    }

    /**
     * Get the serviceEndpoint property: Endpoint at which the collector agent can call agent REST API.
     * 
     * @return the serviceEndpoint value.
     */
    public String serviceEndpoint() {
        return this.serviceEndpoint;
    }

    /**
     * Get the assessmentSolutionId property: Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
     * 
     * @return the assessmentSolutionId value.
     */
    public String assessmentSolutionId() {
        return this.assessmentSolutionId;
    }

    /**
     * Set the assessmentSolutionId property: Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
     * 
     * @param assessmentSolutionId the assessmentSolutionId value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withAssessmentSolutionId(String assessmentSolutionId) {
        this.assessmentSolutionId = assessmentSolutionId;
        return this;
    }

    /**
     * Get the projectStatus property: Assessment project status.
     * 
     * @return the projectStatus value.
     */
    public ProjectStatus projectStatus() {
        return this.projectStatus;
    }

    /**
     * Set the projectStatus property: Assessment project status.
     * 
     * @param projectStatus the projectStatus value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withProjectStatus(ProjectStatus projectStatus) {
        this.projectStatus = projectStatus;
        return this;
    }

    /**
     * Get the customerWorkspaceId property: The ARM id of service map workspace created by customer.
     * 
     * @return the customerWorkspaceId value.
     */
    public String customerWorkspaceId() {
        return this.customerWorkspaceId;
    }

    /**
     * Set the customerWorkspaceId property: The ARM id of service map workspace created by customer.
     * 
     * @param customerWorkspaceId the customerWorkspaceId value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withCustomerWorkspaceId(String customerWorkspaceId) {
        this.customerWorkspaceId = customerWorkspaceId;
        return this;
    }

    /**
     * Get the customerWorkspaceLocation property: Location of service map workspace created by customer.
     * 
     * @return the customerWorkspaceLocation value.
     */
    public String customerWorkspaceLocation() {
        return this.customerWorkspaceLocation;
    }

    /**
     * Set the customerWorkspaceLocation property: Location of service map workspace created by customer.
     * 
     * @param customerWorkspaceLocation the customerWorkspaceLocation value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withCustomerWorkspaceLocation(String customerWorkspaceLocation) {
        this.customerWorkspaceLocation = customerWorkspaceLocation;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: This value can be set to 'enabled' to avoid breaking changes on existing
     * customer resources and templates. If set to 'disabled', traffic over public
     * interface is not allowed, and private endpoint connections would be the
     * exclusive access method.
     * 
     * @return the publicNetworkAccess value.
     */
    public String publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: This value can be set to 'enabled' to avoid breaking changes on existing
     * customer resources and templates. If set to 'disabled', traffic over public
     * interface is not allowed, and private endpoint connections would be the
     * exclusive access method.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withPublicNetworkAccess(String publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the privateEndpointConnections property: The list of private endpoint connections to the project.
     * 
     * @return the privateEndpointConnections value.
     */
    public List<PrivateEndpointConnectionInner> privateEndpointConnections() {
        return this.privateEndpointConnections;
    }

    /**
     * Get the customerStorageAccountArmId property: The ARM id of the storage account used for interactions when public
     * access is
     * disabled.
     * 
     * @return the customerStorageAccountArmId value.
     */
    public String customerStorageAccountArmId() {
        return this.customerStorageAccountArmId;
    }

    /**
     * Set the customerStorageAccountArmId property: The ARM id of the storage account used for interactions when public
     * access is
     * disabled.
     * 
     * @param customerStorageAccountArmId the customerStorageAccountArmId value to set.
     * @return the ProjectProperties object itself.
     */
    public ProjectProperties withCustomerStorageAccountArmId(String customerStorageAccountArmId) {
        this.customerStorageAccountArmId = customerStorageAccountArmId;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProjectProperties withProvisioningState(ProvisioningState provisioningState) {
        super.withProvisioningState(provisioningState);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (privateEndpointConnections() != null) {
            privateEndpointConnections().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("provisioningState",
            provisioningState() == null ? null : provisioningState().toString());
        jsonWriter.writeStringField("assessmentSolutionId", this.assessmentSolutionId);
        jsonWriter.writeStringField("projectStatus", this.projectStatus == null ? null : this.projectStatus.toString());
        jsonWriter.writeStringField("customerWorkspaceId", this.customerWorkspaceId);
        jsonWriter.writeStringField("customerWorkspaceLocation", this.customerWorkspaceLocation);
        jsonWriter.writeStringField("publicNetworkAccess", this.publicNetworkAccess);
        jsonWriter.writeStringField("customerStorageAccountArmId", this.customerStorageAccountArmId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ProjectProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ProjectProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ProjectProperties.
     */
    public static ProjectProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ProjectProperties deserializedProjectProperties = new ProjectProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedProjectProperties
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("createdTimestamp".equals(fieldName)) {
                    deserializedProjectProperties.createdTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("updatedTimestamp".equals(fieldName)) {
                    deserializedProjectProperties.updatedTimestamp = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("serviceEndpoint".equals(fieldName)) {
                    deserializedProjectProperties.serviceEndpoint = reader.getString();
                } else if ("assessmentSolutionId".equals(fieldName)) {
                    deserializedProjectProperties.assessmentSolutionId = reader.getString();
                } else if ("projectStatus".equals(fieldName)) {
                    deserializedProjectProperties.projectStatus = ProjectStatus.fromString(reader.getString());
                } else if ("customerWorkspaceId".equals(fieldName)) {
                    deserializedProjectProperties.customerWorkspaceId = reader.getString();
                } else if ("customerWorkspaceLocation".equals(fieldName)) {
                    deserializedProjectProperties.customerWorkspaceLocation = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedProjectProperties.publicNetworkAccess = reader.getString();
                } else if ("privateEndpointConnections".equals(fieldName)) {
                    List<PrivateEndpointConnectionInner> privateEndpointConnections
                        = reader.readArray(reader1 -> PrivateEndpointConnectionInner.fromJson(reader1));
                    deserializedProjectProperties.privateEndpointConnections = privateEndpointConnections;
                } else if ("customerStorageAccountArmId".equals(fieldName)) {
                    deserializedProjectProperties.customerStorageAccountArmId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedProjectProperties;
        });
    }
}
