// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties of group update.
 */
@Fluent
public final class UpdateGroupBody implements JsonSerializable<UpdateGroupBody> {
    /*
     * For optimistic concurrency control.
     */
    private String etag;

    /*
     * Properties of the group.
     */
    private GroupBodyProperties properties;

    /**
     * Creates an instance of UpdateGroupBody class.
     */
    public UpdateGroupBody() {
    }

    /**
     * Get the etag property: For optimistic concurrency control.
     * 
     * @return the etag value.
     */
    public String etag() {
        return this.etag;
    }

    /**
     * Set the etag property: For optimistic concurrency control.
     * 
     * @param etag the etag value to set.
     * @return the UpdateGroupBody object itself.
     */
    public UpdateGroupBody withEtag(String etag) {
        this.etag = etag;
        return this;
    }

    /**
     * Get the properties property: Properties of the group.
     * 
     * @return the properties value.
     */
    public GroupBodyProperties properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Properties of the group.
     * 
     * @param properties the properties value to set.
     * @return the UpdateGroupBody object itself.
     */
    public UpdateGroupBody withProperties(GroupBodyProperties properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (properties() != null) {
            properties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("eTag", this.etag);
        jsonWriter.writeJsonField("properties", this.properties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateGroupBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateGroupBody if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateGroupBody.
     */
    public static UpdateGroupBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateGroupBody deserializedUpdateGroupBody = new UpdateGroupBody();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("eTag".equals(fieldName)) {
                    deserializedUpdateGroupBody.etag = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedUpdateGroupBody.properties = GroupBodyProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateGroupBody;
        });
    }
}
