// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Sql fci meta data.
 */
@Fluent
public final class SqlFciMetadata implements JsonSerializable<SqlFciMetadata> {
    /*
     * Gets the Sql fci meta data state.
     */
    private SqlFciMetadataState state;

    /*
     * Gets whether fci is multi subnet.
     */
    private Boolean isMultiSubnet;

    /*
     * Gets the fci shared disk count.
     */
    private Integer fciSharedDiskCount;

    /**
     * Creates an instance of SqlFciMetadata class.
     */
    public SqlFciMetadata() {
    }

    /**
     * Get the state property: Gets the Sql fci meta data state.
     * 
     * @return the state value.
     */
    public SqlFciMetadataState state() {
        return this.state;
    }

    /**
     * Set the state property: Gets the Sql fci meta data state.
     * 
     * @param state the state value to set.
     * @return the SqlFciMetadata object itself.
     */
    public SqlFciMetadata withState(SqlFciMetadataState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the isMultiSubnet property: Gets whether fci is multi subnet.
     * 
     * @return the isMultiSubnet value.
     */
    public Boolean isMultiSubnet() {
        return this.isMultiSubnet;
    }

    /**
     * Set the isMultiSubnet property: Gets whether fci is multi subnet.
     * 
     * @param isMultiSubnet the isMultiSubnet value to set.
     * @return the SqlFciMetadata object itself.
     */
    public SqlFciMetadata withIsMultiSubnet(Boolean isMultiSubnet) {
        this.isMultiSubnet = isMultiSubnet;
        return this;
    }

    /**
     * Get the fciSharedDiskCount property: Gets the fci shared disk count.
     * 
     * @return the fciSharedDiskCount value.
     */
    public Integer fciSharedDiskCount() {
        return this.fciSharedDiskCount;
    }

    /**
     * Set the fciSharedDiskCount property: Gets the fci shared disk count.
     * 
     * @param fciSharedDiskCount the fciSharedDiskCount value to set.
     * @return the SqlFciMetadata object itself.
     */
    public SqlFciMetadata withFciSharedDiskCount(Integer fciSharedDiskCount) {
        this.fciSharedDiskCount = fciSharedDiskCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeBooleanField("isMultiSubnet", this.isMultiSubnet);
        jsonWriter.writeNumberField("fciSharedDiskCount", this.fciSharedDiskCount);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlFciMetadata from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlFciMetadata if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SqlFciMetadata.
     */
    public static SqlFciMetadata fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlFciMetadata deserializedSqlFciMetadata = new SqlFciMetadata();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedSqlFciMetadata.state = SqlFciMetadataState.fromString(reader.getString());
                } else if ("isMultiSubnet".equals(fieldName)) {
                    deserializedSqlFciMetadata.isMultiSubnet = reader.getNullable(JsonReader::getBoolean);
                } else if ("fciSharedDiskCount".equals(fieldName)) {
                    deserializedSqlFciMetadata.fciSharedDiskCount = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlFciMetadata;
        });
    }
}
