// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * VM family name, the list of targeted azure locations and the category of the
 * family.
 */
@Immutable
public final class VmFamilyOptions implements JsonSerializable<VmFamilyOptions> {
    /*
     * Name of the VM family.
     */
    private String familyName;

    /*
     * List of Azure regions.
     */
    private List<String> targetLocations;

    /*
     * Category of the VM family.
     */
    private List<String> category;

    /**
     * Creates an instance of VmFamilyOptions class.
     */
    public VmFamilyOptions() {
    }

    /**
     * Get the familyName property: Name of the VM family.
     * 
     * @return the familyName value.
     */
    public String familyName() {
        return this.familyName;
    }

    /**
     * Get the targetLocations property: List of Azure regions.
     * 
     * @return the targetLocations value.
     */
    public List<String> targetLocations() {
        return this.targetLocations;
    }

    /**
     * Get the category property: Category of the VM family.
     * 
     * @return the category value.
     */
    public List<String> category() {
        return this.category;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmFamilyOptions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmFamilyOptions if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VmFamilyOptions.
     */
    public static VmFamilyOptions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmFamilyOptions deserializedVmFamilyOptions = new VmFamilyOptions();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("familyName".equals(fieldName)) {
                    deserializedVmFamilyOptions.familyName = reader.getString();
                } else if ("targetLocations".equals(fieldName)) {
                    List<String> targetLocations = reader.readArray(reader1 -> reader1.getString());
                    deserializedVmFamilyOptions.targetLocations = targetLocations;
                } else if ("category".equals(fieldName)) {
                    List<String> category = reader.readArray(reader1 -> reader1.getString());
                    deserializedVmFamilyOptions.category = category;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmFamilyOptions;
        });
    }
}
