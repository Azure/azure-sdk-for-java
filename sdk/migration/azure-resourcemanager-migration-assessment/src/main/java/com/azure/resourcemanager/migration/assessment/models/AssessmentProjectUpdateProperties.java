// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The updatable properties of the AssessmentProject.
 */
@Fluent
public final class AssessmentProjectUpdateProperties implements JsonSerializable<AssessmentProjectUpdateProperties> {
    /*
     * Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
     */
    private String assessmentSolutionId;

    /*
     * Assessment project status.
     */
    private ProjectStatus projectStatus;

    /*
     * The ARM id of service map workspace created by customer.
     */
    private String customerWorkspaceId;

    /*
     * Location of service map workspace created by customer.
     */
    private String customerWorkspaceLocation;

    /*
     * This value can be set to 'enabled' to avoid breaking changes on existing
     * customer resources and templates. If set to 'disabled', traffic over public
     * interface is not allowed, and private endpoint connections would be the
     * exclusive access method.
     */
    private String publicNetworkAccess;

    /*
     * The ARM id of the storage account used for interactions when public access is
     * disabled.
     */
    private String customerStorageAccountArmId;

    /*
     * The status of the last operation.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of AssessmentProjectUpdateProperties class.
     */
    public AssessmentProjectUpdateProperties() {
    }

    /**
     * Get the assessmentSolutionId property: Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
     * 
     * @return the assessmentSolutionId value.
     */
    public String assessmentSolutionId() {
        return this.assessmentSolutionId;
    }

    /**
     * Set the assessmentSolutionId property: Assessment solution ARM id tracked by Microsoft.Migrate/migrateProjects.
     * 
     * @param assessmentSolutionId the assessmentSolutionId value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withAssessmentSolutionId(String assessmentSolutionId) {
        this.assessmentSolutionId = assessmentSolutionId;
        return this;
    }

    /**
     * Get the projectStatus property: Assessment project status.
     * 
     * @return the projectStatus value.
     */
    public ProjectStatus projectStatus() {
        return this.projectStatus;
    }

    /**
     * Set the projectStatus property: Assessment project status.
     * 
     * @param projectStatus the projectStatus value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withProjectStatus(ProjectStatus projectStatus) {
        this.projectStatus = projectStatus;
        return this;
    }

    /**
     * Get the customerWorkspaceId property: The ARM id of service map workspace created by customer.
     * 
     * @return the customerWorkspaceId value.
     */
    public String customerWorkspaceId() {
        return this.customerWorkspaceId;
    }

    /**
     * Set the customerWorkspaceId property: The ARM id of service map workspace created by customer.
     * 
     * @param customerWorkspaceId the customerWorkspaceId value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withCustomerWorkspaceId(String customerWorkspaceId) {
        this.customerWorkspaceId = customerWorkspaceId;
        return this;
    }

    /**
     * Get the customerWorkspaceLocation property: Location of service map workspace created by customer.
     * 
     * @return the customerWorkspaceLocation value.
     */
    public String customerWorkspaceLocation() {
        return this.customerWorkspaceLocation;
    }

    /**
     * Set the customerWorkspaceLocation property: Location of service map workspace created by customer.
     * 
     * @param customerWorkspaceLocation the customerWorkspaceLocation value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withCustomerWorkspaceLocation(String customerWorkspaceLocation) {
        this.customerWorkspaceLocation = customerWorkspaceLocation;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: This value can be set to 'enabled' to avoid breaking changes on existing
     * customer resources and templates. If set to 'disabled', traffic over public
     * interface is not allowed, and private endpoint connections would be the
     * exclusive access method.
     * 
     * @return the publicNetworkAccess value.
     */
    public String publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: This value can be set to 'enabled' to avoid breaking changes on existing
     * customer resources and templates. If set to 'disabled', traffic over public
     * interface is not allowed, and private endpoint connections would be the
     * exclusive access method.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withPublicNetworkAccess(String publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the customerStorageAccountArmId property: The ARM id of the storage account used for interactions when public
     * access is
     * disabled.
     * 
     * @return the customerStorageAccountArmId value.
     */
    public String customerStorageAccountArmId() {
        return this.customerStorageAccountArmId;
    }

    /**
     * Set the customerStorageAccountArmId property: The ARM id of the storage account used for interactions when public
     * access is
     * disabled.
     * 
     * @param customerStorageAccountArmId the customerStorageAccountArmId value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withCustomerStorageAccountArmId(String customerStorageAccountArmId) {
        this.customerStorageAccountArmId = customerStorageAccountArmId;
        return this;
    }

    /**
     * Get the provisioningState property: The status of the last operation.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The status of the last operation.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the AssessmentProjectUpdateProperties object itself.
     */
    public AssessmentProjectUpdateProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("assessmentSolutionId", this.assessmentSolutionId);
        jsonWriter.writeStringField("projectStatus", this.projectStatus == null ? null : this.projectStatus.toString());
        jsonWriter.writeStringField("customerWorkspaceId", this.customerWorkspaceId);
        jsonWriter.writeStringField("customerWorkspaceLocation", this.customerWorkspaceLocation);
        jsonWriter.writeStringField("publicNetworkAccess", this.publicNetworkAccess);
        jsonWriter.writeStringField("customerStorageAccountArmId", this.customerStorageAccountArmId);
        jsonWriter.writeStringField("provisioningState",
            this.provisioningState == null ? null : this.provisioningState.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessmentProjectUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessmentProjectUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessmentProjectUpdateProperties.
     */
    public static AssessmentProjectUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessmentProjectUpdateProperties deserializedAssessmentProjectUpdateProperties
                = new AssessmentProjectUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("assessmentSolutionId".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.assessmentSolutionId = reader.getString();
                } else if ("projectStatus".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.projectStatus
                        = ProjectStatus.fromString(reader.getString());
                } else if ("customerWorkspaceId".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.customerWorkspaceId = reader.getString();
                } else if ("customerWorkspaceLocation".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.customerWorkspaceLocation = reader.getString();
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.publicNetworkAccess = reader.getString();
                } else if ("customerStorageAccountArmId".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.customerStorageAccountArmId = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedAssessmentProjectUpdateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessmentProjectUpdateProperties;
        });
    }
}
