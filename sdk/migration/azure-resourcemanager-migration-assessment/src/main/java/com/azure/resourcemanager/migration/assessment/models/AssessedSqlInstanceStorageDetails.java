// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Assessed Sql Instance Storage Details.
 */
@Fluent
public final class AssessedSqlInstanceStorageDetails implements JsonSerializable<AssessedSqlInstanceStorageDetails> {
    /*
     * Gets the storage type.
     */
    private String storageType;

    /*
     * Gets the disk size in mb.
     */
    private Float diskSizeInMB;

    /*
     * Gets the megabytes per second of read.
     */
    private Float megabytesPerSecondOfRead;

    /*
     * Gets the megabytes per second of read.
     */
    private Float megabytesPerSecondOfWrite;

    /*
     * Gets the number of read operations per second.
     */
    private Float numberOfReadOperationsPerSecond;

    /*
     * Gets the number of write operations per second.
     */
    private Float numberOfWriteOperationsPerSecond;

    /**
     * Creates an instance of AssessedSqlInstanceStorageDetails class.
     */
    public AssessedSqlInstanceStorageDetails() {
    }

    /**
     * Get the storageType property: Gets the storage type.
     * 
     * @return the storageType value.
     */
    public String storageType() {
        return this.storageType;
    }

    /**
     * Set the storageType property: Gets the storage type.
     * 
     * @param storageType the storageType value to set.
     * @return the AssessedSqlInstanceStorageDetails object itself.
     */
    public AssessedSqlInstanceStorageDetails withStorageType(String storageType) {
        this.storageType = storageType;
        return this;
    }

    /**
     * Get the diskSizeInMB property: Gets the disk size in mb.
     * 
     * @return the diskSizeInMB value.
     */
    public Float diskSizeInMB() {
        return this.diskSizeInMB;
    }

    /**
     * Set the diskSizeInMB property: Gets the disk size in mb.
     * 
     * @param diskSizeInMB the diskSizeInMB value to set.
     * @return the AssessedSqlInstanceStorageDetails object itself.
     */
    public AssessedSqlInstanceStorageDetails withDiskSizeInMB(Float diskSizeInMB) {
        this.diskSizeInMB = diskSizeInMB;
        return this;
    }

    /**
     * Get the megabytesPerSecondOfRead property: Gets the megabytes per second of read.
     * 
     * @return the megabytesPerSecondOfRead value.
     */
    public Float megabytesPerSecondOfRead() {
        return this.megabytesPerSecondOfRead;
    }

    /**
     * Set the megabytesPerSecondOfRead property: Gets the megabytes per second of read.
     * 
     * @param megabytesPerSecondOfRead the megabytesPerSecondOfRead value to set.
     * @return the AssessedSqlInstanceStorageDetails object itself.
     */
    public AssessedSqlInstanceStorageDetails withMegabytesPerSecondOfRead(Float megabytesPerSecondOfRead) {
        this.megabytesPerSecondOfRead = megabytesPerSecondOfRead;
        return this;
    }

    /**
     * Get the megabytesPerSecondOfWrite property: Gets the megabytes per second of read.
     * 
     * @return the megabytesPerSecondOfWrite value.
     */
    public Float megabytesPerSecondOfWrite() {
        return this.megabytesPerSecondOfWrite;
    }

    /**
     * Set the megabytesPerSecondOfWrite property: Gets the megabytes per second of read.
     * 
     * @param megabytesPerSecondOfWrite the megabytesPerSecondOfWrite value to set.
     * @return the AssessedSqlInstanceStorageDetails object itself.
     */
    public AssessedSqlInstanceStorageDetails withMegabytesPerSecondOfWrite(Float megabytesPerSecondOfWrite) {
        this.megabytesPerSecondOfWrite = megabytesPerSecondOfWrite;
        return this;
    }

    /**
     * Get the numberOfReadOperationsPerSecond property: Gets the number of read operations per second.
     * 
     * @return the numberOfReadOperationsPerSecond value.
     */
    public Float numberOfReadOperationsPerSecond() {
        return this.numberOfReadOperationsPerSecond;
    }

    /**
     * Set the numberOfReadOperationsPerSecond property: Gets the number of read operations per second.
     * 
     * @param numberOfReadOperationsPerSecond the numberOfReadOperationsPerSecond value to set.
     * @return the AssessedSqlInstanceStorageDetails object itself.
     */
    public AssessedSqlInstanceStorageDetails
        withNumberOfReadOperationsPerSecond(Float numberOfReadOperationsPerSecond) {
        this.numberOfReadOperationsPerSecond = numberOfReadOperationsPerSecond;
        return this;
    }

    /**
     * Get the numberOfWriteOperationsPerSecond property: Gets the number of write operations per second.
     * 
     * @return the numberOfWriteOperationsPerSecond value.
     */
    public Float numberOfWriteOperationsPerSecond() {
        return this.numberOfWriteOperationsPerSecond;
    }

    /**
     * Set the numberOfWriteOperationsPerSecond property: Gets the number of write operations per second.
     * 
     * @param numberOfWriteOperationsPerSecond the numberOfWriteOperationsPerSecond value to set.
     * @return the AssessedSqlInstanceStorageDetails object itself.
     */
    public AssessedSqlInstanceStorageDetails
        withNumberOfWriteOperationsPerSecond(Float numberOfWriteOperationsPerSecond) {
        this.numberOfWriteOperationsPerSecond = numberOfWriteOperationsPerSecond;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storageType", this.storageType);
        jsonWriter.writeNumberField("diskSizeInMB", this.diskSizeInMB);
        jsonWriter.writeNumberField("megabytesPerSecondOfRead", this.megabytesPerSecondOfRead);
        jsonWriter.writeNumberField("megabytesPerSecondOfWrite", this.megabytesPerSecondOfWrite);
        jsonWriter.writeNumberField("numberOfReadOperationsPerSecond", this.numberOfReadOperationsPerSecond);
        jsonWriter.writeNumberField("numberOfWriteOperationsPerSecond", this.numberOfWriteOperationsPerSecond);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AssessedSqlInstanceStorageDetails from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AssessedSqlInstanceStorageDetails if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AssessedSqlInstanceStorageDetails.
     */
    public static AssessedSqlInstanceStorageDetails fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AssessedSqlInstanceStorageDetails deserializedAssessedSqlInstanceStorageDetails
                = new AssessedSqlInstanceStorageDetails();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageType".equals(fieldName)) {
                    deserializedAssessedSqlInstanceStorageDetails.storageType = reader.getString();
                } else if ("diskSizeInMB".equals(fieldName)) {
                    deserializedAssessedSqlInstanceStorageDetails.diskSizeInMB
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfRead".equals(fieldName)) {
                    deserializedAssessedSqlInstanceStorageDetails.megabytesPerSecondOfRead
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("megabytesPerSecondOfWrite".equals(fieldName)) {
                    deserializedAssessedSqlInstanceStorageDetails.megabytesPerSecondOfWrite
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfReadOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedSqlInstanceStorageDetails.numberOfReadOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else if ("numberOfWriteOperationsPerSecond".equals(fieldName)) {
                    deserializedAssessedSqlInstanceStorageDetails.numberOfWriteOperationsPerSecond
                        = reader.getNullable(JsonReader::getFloat);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAssessedSqlInstanceStorageDetails;
        });
    }
}
