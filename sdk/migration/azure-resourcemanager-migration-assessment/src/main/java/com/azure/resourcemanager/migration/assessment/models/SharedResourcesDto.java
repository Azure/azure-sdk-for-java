// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Shared Resources.
 */
@Immutable
public final class SharedResourcesDto implements JsonSerializable<SharedResourcesDto> {
    /*
     * Gets the list of shared data disks.
     */
    private List<AzureManagedDiskSkuDto> sharedDataDisks;

    /*
     * Gets the list of shared log disks.
     */
    private List<AzureManagedDiskSkuDto> sharedLogDisks;

    /*
     * Gets the list of shared Temporary database disks.
     */
    private List<AzureManagedDiskSkuDto> sharedTempDbDisks;

    /*
     * Gets number of mounts of shared disks.
     */
    private Integer numberOfMounts;

    /*
     * Gets quorum witness.
     */
    private AzureQuorumWitnessDto quorumWitness;

    /**
     * Creates an instance of SharedResourcesDto class.
     */
    public SharedResourcesDto() {
    }

    /**
     * Get the sharedDataDisks property: Gets the list of shared data disks.
     * 
     * @return the sharedDataDisks value.
     */
    public List<AzureManagedDiskSkuDto> sharedDataDisks() {
        return this.sharedDataDisks;
    }

    /**
     * Get the sharedLogDisks property: Gets the list of shared log disks.
     * 
     * @return the sharedLogDisks value.
     */
    public List<AzureManagedDiskSkuDto> sharedLogDisks() {
        return this.sharedLogDisks;
    }

    /**
     * Get the sharedTempDbDisks property: Gets the list of shared Temporary database disks.
     * 
     * @return the sharedTempDbDisks value.
     */
    public List<AzureManagedDiskSkuDto> sharedTempDbDisks() {
        return this.sharedTempDbDisks;
    }

    /**
     * Get the numberOfMounts property: Gets number of mounts of shared disks.
     * 
     * @return the numberOfMounts value.
     */
    public Integer numberOfMounts() {
        return this.numberOfMounts;
    }

    /**
     * Get the quorumWitness property: Gets quorum witness.
     * 
     * @return the quorumWitness value.
     */
    public AzureQuorumWitnessDto quorumWitness() {
        return this.quorumWitness;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sharedDataDisks() != null) {
            sharedDataDisks().forEach(e -> e.validate());
        }
        if (sharedLogDisks() != null) {
            sharedLogDisks().forEach(e -> e.validate());
        }
        if (sharedTempDbDisks() != null) {
            sharedTempDbDisks().forEach(e -> e.validate());
        }
        if (quorumWitness() != null) {
            quorumWitness().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedResourcesDto from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedResourcesDto if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the SharedResourcesDto.
     */
    public static SharedResourcesDto fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SharedResourcesDto deserializedSharedResourcesDto = new SharedResourcesDto();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sharedDataDisks".equals(fieldName)) {
                    List<AzureManagedDiskSkuDto> sharedDataDisks
                        = reader.readArray(reader1 -> AzureManagedDiskSkuDto.fromJson(reader1));
                    deserializedSharedResourcesDto.sharedDataDisks = sharedDataDisks;
                } else if ("sharedLogDisks".equals(fieldName)) {
                    List<AzureManagedDiskSkuDto> sharedLogDisks
                        = reader.readArray(reader1 -> AzureManagedDiskSkuDto.fromJson(reader1));
                    deserializedSharedResourcesDto.sharedLogDisks = sharedLogDisks;
                } else if ("sharedTempDbDisks".equals(fieldName)) {
                    List<AzureManagedDiskSkuDto> sharedTempDbDisks
                        = reader.readArray(reader1 -> AzureManagedDiskSkuDto.fromJson(reader1));
                    deserializedSharedResourcesDto.sharedTempDbDisks = sharedTempDbDisks;
                } else if ("numberOfMounts".equals(fieldName)) {
                    deserializedSharedResourcesDto.numberOfMounts = reader.getNullable(JsonReader::getInt);
                } else if ("quorumWitness".equals(fieldName)) {
                    deserializedSharedResourcesDto.quorumWitness = AzureQuorumWitnessDto.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedResourcesDto;
        });
    }
}
