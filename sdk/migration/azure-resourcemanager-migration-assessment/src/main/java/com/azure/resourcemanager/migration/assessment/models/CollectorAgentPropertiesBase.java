// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Collector agent property class.
 */
@Fluent
public final class CollectorAgentPropertiesBase implements JsonSerializable<CollectorAgentPropertiesBase> {
    /*
     * Gets the collector agent id.
     */
    private String id;

    /*
     * Gets the collector agent version.
     */
    private String version;

    /*
     * Gets the collector last heartbeat time.
     */
    private OffsetDateTime lastHeartbeatUtc;

    /*
     * Gets or sets the SPN details.
     */
    private CollectorAgentSpnPropertiesBase spnDetails;

    /**
     * Creates an instance of CollectorAgentPropertiesBase class.
     */
    public CollectorAgentPropertiesBase() {
    }

    /**
     * Get the id property: Gets the collector agent id.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: Gets the collector agent id.
     * 
     * @param id the id value to set.
     * @return the CollectorAgentPropertiesBase object itself.
     */
    public CollectorAgentPropertiesBase withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the version property: Gets the collector agent version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Set the version property: Gets the collector agent version.
     * 
     * @param version the version value to set.
     * @return the CollectorAgentPropertiesBase object itself.
     */
    public CollectorAgentPropertiesBase withVersion(String version) {
        this.version = version;
        return this;
    }

    /**
     * Get the lastHeartbeatUtc property: Gets the collector last heartbeat time.
     * 
     * @return the lastHeartbeatUtc value.
     */
    public OffsetDateTime lastHeartbeatUtc() {
        return this.lastHeartbeatUtc;
    }

    /**
     * Set the lastHeartbeatUtc property: Gets the collector last heartbeat time.
     * 
     * @param lastHeartbeatUtc the lastHeartbeatUtc value to set.
     * @return the CollectorAgentPropertiesBase object itself.
     */
    public CollectorAgentPropertiesBase withLastHeartbeatUtc(OffsetDateTime lastHeartbeatUtc) {
        this.lastHeartbeatUtc = lastHeartbeatUtc;
        return this;
    }

    /**
     * Get the spnDetails property: Gets or sets the SPN details.
     * 
     * @return the spnDetails value.
     */
    public CollectorAgentSpnPropertiesBase spnDetails() {
        return this.spnDetails;
    }

    /**
     * Set the spnDetails property: Gets or sets the SPN details.
     * 
     * @param spnDetails the spnDetails value to set.
     * @return the CollectorAgentPropertiesBase object itself.
     */
    public CollectorAgentPropertiesBase withSpnDetails(CollectorAgentSpnPropertiesBase spnDetails) {
        this.spnDetails = spnDetails;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (spnDetails() != null) {
            spnDetails().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("version", this.version);
        jsonWriter.writeStringField("lastHeartbeatUtc",
            this.lastHeartbeatUtc == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastHeartbeatUtc));
        jsonWriter.writeJsonField("spnDetails", this.spnDetails);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CollectorAgentPropertiesBase from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CollectorAgentPropertiesBase if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CollectorAgentPropertiesBase.
     */
    public static CollectorAgentPropertiesBase fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CollectorAgentPropertiesBase deserializedCollectorAgentPropertiesBase = new CollectorAgentPropertiesBase();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedCollectorAgentPropertiesBase.id = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedCollectorAgentPropertiesBase.version = reader.getString();
                } else if ("lastHeartbeatUtc".equals(fieldName)) {
                    deserializedCollectorAgentPropertiesBase.lastHeartbeatUtc = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("spnDetails".equals(fieldName)) {
                    deserializedCollectorAgentPropertiesBase.spnDetails
                        = CollectorAgentSpnPropertiesBase.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCollectorAgentPropertiesBase;
        });
    }
}
