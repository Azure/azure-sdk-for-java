// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.migration.assessment.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * A network adapter discovered on a machine.
 */
@Immutable
public final class NetworkAdapter implements JsonSerializable<NetworkAdapter> {
    /*
     * MAC Address of the network adapter.
     */
    private String macAddress;

    /*
     * List of IP Addresses on the network adapter.
     */
    private List<String> ipAddresses;

    /*
     * User friendly name of the network adapter.
     */
    private String displayName;

    /**
     * Creates an instance of NetworkAdapter class.
     */
    public NetworkAdapter() {
    }

    /**
     * Get the macAddress property: MAC Address of the network adapter.
     * 
     * @return the macAddress value.
     */
    public String macAddress() {
        return this.macAddress;
    }

    /**
     * Get the ipAddresses property: List of IP Addresses on the network adapter.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Get the displayName property: User friendly name of the network adapter.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NetworkAdapter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NetworkAdapter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NetworkAdapter.
     */
    public static NetworkAdapter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NetworkAdapter deserializedNetworkAdapter = new NetworkAdapter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("macAddress".equals(fieldName)) {
                    deserializedNetworkAdapter.macAddress = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedNetworkAdapter.ipAddresses = ipAddresses;
                } else if ("displayName".equals(fieldName)) {
                    deserializedNetworkAdapter.displayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNetworkAdapter;
        });
    }
}
