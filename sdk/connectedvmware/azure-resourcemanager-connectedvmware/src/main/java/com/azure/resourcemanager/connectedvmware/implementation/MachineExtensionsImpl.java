// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedvmware.fluent.MachineExtensionsClient;
import com.azure.resourcemanager.connectedvmware.fluent.models.MachineExtensionInner;
import com.azure.resourcemanager.connectedvmware.models.MachineExtension;
import com.azure.resourcemanager.connectedvmware.models.MachineExtensions;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class MachineExtensionsImpl implements MachineExtensions {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(MachineExtensionsImpl.class);

    private final MachineExtensionsClient innerClient;

    private final com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager serviceManager;

    public MachineExtensionsImpl(
        MachineExtensionsClient innerClient,
        com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(String resourceGroupName, String name, String extensionName) {
        this.serviceClient().delete(resourceGroupName, name, extensionName);
    }

    public void delete(String resourceGroupName, String name, String extensionName, Context context) {
        this.serviceClient().delete(resourceGroupName, name, extensionName, context);
    }

    public MachineExtension get(String resourceGroupName, String name, String extensionName) {
        MachineExtensionInner inner = this.serviceClient().get(resourceGroupName, name, extensionName);
        if (inner != null) {
            return new MachineExtensionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<MachineExtension> getWithResponse(
        String resourceGroupName, String name, String extensionName, Context context) {
        Response<MachineExtensionInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, name, extensionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new MachineExtensionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<MachineExtension> list(String resourceGroupName, String name) {
        PagedIterable<MachineExtensionInner> inner = this.serviceClient().list(resourceGroupName, name);
        return Utils.mapPage(inner, inner1 -> new MachineExtensionImpl(inner1, this.manager()));
    }

    public PagedIterable<MachineExtension> list(String resourceGroupName, String name, String expand, Context context) {
        PagedIterable<MachineExtensionInner> inner =
            this.serviceClient().list(resourceGroupName, name, expand, context);
        return Utils.mapPage(inner, inner1 -> new MachineExtensionImpl(inner1, this.manager()));
    }

    public MachineExtension getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualMachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String extensionName = Utils.getValueFromIdByName(id, "extensions");
        if (extensionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'extensions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, extensionName, Context.NONE).getValue();
    }

    public Response<MachineExtension> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualMachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String extensionName = Utils.getValueFromIdByName(id, "extensions");
        if (extensionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'extensions'.", id)));
        }
        return this.getWithResponse(resourceGroupName, name, extensionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualMachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String extensionName = Utils.getValueFromIdByName(id, "extensions");
        if (extensionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'extensions'.", id)));
        }
        this.delete(resourceGroupName, name, extensionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String name = Utils.getValueFromIdByName(id, "virtualMachines");
        if (name == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'virtualMachines'.", id)));
        }
        String extensionName = Utils.getValueFromIdByName(id, "extensions");
        if (extensionName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'extensions'.", id)));
        }
        this.delete(resourceGroupName, name, extensionName, context);
    }

    private MachineExtensionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager manager() {
        return this.serviceManager;
    }

    public MachineExtensionImpl define(String name) {
        return new MachineExtensionImpl(name, this.manager());
    }
}
