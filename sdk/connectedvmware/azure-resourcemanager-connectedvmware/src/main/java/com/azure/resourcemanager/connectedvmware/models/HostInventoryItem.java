// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The host inventory item.
 */
@Fluent
public final class HostInventoryItem extends InventoryItemProperties {
    /*
     * They inventory type.
     */
    private InventoryType inventoryType = InventoryType.HOST;

    /*
     * Parent host inventory resource details.
     */
    private InventoryItemDetails parent;

    /**
     * Creates an instance of HostInventoryItem class.
     */
    public HostInventoryItem() {
    }

    /**
     * Get the inventoryType property: They inventory type.
     * 
     * @return the inventoryType value.
     */
    @Override
    public InventoryType inventoryType() {
        return this.inventoryType;
    }

    /**
     * Get the parent property: Parent host inventory resource details.
     * 
     * @return the parent value.
     */
    public InventoryItemDetails parent() {
        return this.parent;
    }

    /**
     * Set the parent property: Parent host inventory resource details.
     * 
     * @param parent the parent value to set.
     * @return the HostInventoryItem object itself.
     */
    public HostInventoryItem withParent(InventoryItemDetails parent) {
        this.parent = parent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HostInventoryItem withManagedResourceId(String managedResourceId) {
        super.withManagedResourceId(managedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HostInventoryItem withMoRefId(String moRefId) {
        super.withMoRefId(moRefId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public HostInventoryItem withMoName(String moName) {
        super.withMoName(moName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (parent() != null) {
            parent().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedResourceId", managedResourceId());
        jsonWriter.writeStringField("moRefId", moRefId());
        jsonWriter.writeStringField("moName", moName());
        jsonWriter.writeStringField("inventoryType", this.inventoryType == null ? null : this.inventoryType.toString());
        jsonWriter.writeJsonField("parent", this.parent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HostInventoryItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HostInventoryItem if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HostInventoryItem.
     */
    public static HostInventoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HostInventoryItem deserializedHostInventoryItem = new HostInventoryItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedResourceId".equals(fieldName)) {
                    deserializedHostInventoryItem.withManagedResourceId(reader.getString());
                } else if ("moRefId".equals(fieldName)) {
                    deserializedHostInventoryItem.withMoRefId(reader.getString());
                } else if ("moName".equals(fieldName)) {
                    deserializedHostInventoryItem.withMoName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHostInventoryItem
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("inventoryType".equals(fieldName)) {
                    deserializedHostInventoryItem.inventoryType = InventoryType.fromString(reader.getString());
                } else if ("parent".equals(fieldName)) {
                    deserializedHostInventoryItem.parent = InventoryItemDetails.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHostInventoryItem;
        });
    }
}
