// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Defines the network interface ip settings.
 */
@Fluent
public final class NicIpSettings implements JsonSerializable<NicIpSettings> {
    /*
     * Gets or sets the nic allocation method.
     */
    private IpAddressAllocationMethod allocationMethod;

    /*
     * Gets or sets the dns servers.
     */
    private List<String> dnsServers;

    /*
     * Gets or sets the gateway.
     */
    private List<String> gateway;

    /*
     * Gets or sets the ip address for the nic.
     */
    private String ipAddress;

    /*
     * Gets or sets the mask.
     */
    private String subnetMask;

    /*
     * Gets or sets the primary server.
     */
    private String primaryWinsServer;

    /*
     * Gets or sets the secondary server.
     */
    private String secondaryWinsServer;

    /*
     * Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information
     * above plus IPV6 information.
     */
    private List<NicIpAddressSettings> ipAddressInfo;

    /**
     * Creates an instance of NicIpSettings class.
     */
    public NicIpSettings() {
    }

    /**
     * Get the allocationMethod property: Gets or sets the nic allocation method.
     * 
     * @return the allocationMethod value.
     */
    public IpAddressAllocationMethod allocationMethod() {
        return this.allocationMethod;
    }

    /**
     * Set the allocationMethod property: Gets or sets the nic allocation method.
     * 
     * @param allocationMethod the allocationMethod value to set.
     * @return the NicIpSettings object itself.
     */
    public NicIpSettings withAllocationMethod(IpAddressAllocationMethod allocationMethod) {
        this.allocationMethod = allocationMethod;
        return this;
    }

    /**
     * Get the dnsServers property: Gets or sets the dns servers.
     * 
     * @return the dnsServers value.
     */
    public List<String> dnsServers() {
        return this.dnsServers;
    }

    /**
     * Set the dnsServers property: Gets or sets the dns servers.
     * 
     * @param dnsServers the dnsServers value to set.
     * @return the NicIpSettings object itself.
     */
    public NicIpSettings withDnsServers(List<String> dnsServers) {
        this.dnsServers = dnsServers;
        return this;
    }

    /**
     * Get the gateway property: Gets or sets the gateway.
     * 
     * @return the gateway value.
     */
    public List<String> gateway() {
        return this.gateway;
    }

    /**
     * Set the gateway property: Gets or sets the gateway.
     * 
     * @param gateway the gateway value to set.
     * @return the NicIpSettings object itself.
     */
    public NicIpSettings withGateway(List<String> gateway) {
        this.gateway = gateway;
        return this;
    }

    /**
     * Get the ipAddress property: Gets or sets the ip address for the nic.
     * 
     * @return the ipAddress value.
     */
    public String ipAddress() {
        return this.ipAddress;
    }

    /**
     * Set the ipAddress property: Gets or sets the ip address for the nic.
     * 
     * @param ipAddress the ipAddress value to set.
     * @return the NicIpSettings object itself.
     */
    public NicIpSettings withIpAddress(String ipAddress) {
        this.ipAddress = ipAddress;
        return this;
    }

    /**
     * Get the subnetMask property: Gets or sets the mask.
     * 
     * @return the subnetMask value.
     */
    public String subnetMask() {
        return this.subnetMask;
    }

    /**
     * Set the subnetMask property: Gets or sets the mask.
     * 
     * @param subnetMask the subnetMask value to set.
     * @return the NicIpSettings object itself.
     */
    public NicIpSettings withSubnetMask(String subnetMask) {
        this.subnetMask = subnetMask;
        return this;
    }

    /**
     * Get the primaryWinsServer property: Gets or sets the primary server.
     * 
     * @return the primaryWinsServer value.
     */
    public String primaryWinsServer() {
        return this.primaryWinsServer;
    }

    /**
     * Get the secondaryWinsServer property: Gets or sets the secondary server.
     * 
     * @return the secondaryWinsServer value.
     */
    public String secondaryWinsServer() {
        return this.secondaryWinsServer;
    }

    /**
     * Get the ipAddressInfo property: Gets or sets the IP address information being reported for this NIC. This
     * contains the same IPv4 information above plus IPV6 information.
     * 
     * @return the ipAddressInfo value.
     */
    public List<NicIpAddressSettings> ipAddressInfo() {
        return this.ipAddressInfo;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (ipAddressInfo() != null) {
            ipAddressInfo().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("allocationMethod",
            this.allocationMethod == null ? null : this.allocationMethod.toString());
        jsonWriter.writeArrayField("dnsServers", this.dnsServers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("gateway", this.gateway, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("ipAddress", this.ipAddress);
        jsonWriter.writeStringField("subnetMask", this.subnetMask);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of NicIpSettings from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of NicIpSettings if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the NicIpSettings.
     */
    public static NicIpSettings fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            NicIpSettings deserializedNicIpSettings = new NicIpSettings();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("allocationMethod".equals(fieldName)) {
                    deserializedNicIpSettings.allocationMethod
                        = IpAddressAllocationMethod.fromString(reader.getString());
                } else if ("dnsServers".equals(fieldName)) {
                    List<String> dnsServers = reader.readArray(reader1 -> reader1.getString());
                    deserializedNicIpSettings.dnsServers = dnsServers;
                } else if ("gateway".equals(fieldName)) {
                    List<String> gateway = reader.readArray(reader1 -> reader1.getString());
                    deserializedNicIpSettings.gateway = gateway;
                } else if ("ipAddress".equals(fieldName)) {
                    deserializedNicIpSettings.ipAddress = reader.getString();
                } else if ("subnetMask".equals(fieldName)) {
                    deserializedNicIpSettings.subnetMask = reader.getString();
                } else if ("primaryWinsServer".equals(fieldName)) {
                    deserializedNicIpSettings.primaryWinsServer = reader.getString();
                } else if ("secondaryWinsServer".equals(fieldName)) {
                    deserializedNicIpSettings.secondaryWinsServer = reader.getString();
                } else if ("ipAddressInfo".equals(fieldName)) {
                    List<NicIpAddressSettings> ipAddressInfo
                        = reader.readArray(reader1 -> NicIpAddressSettings.fromJson(reader1));
                    deserializedNicIpSettings.ipAddressInfo = ipAddressInfo;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedNicIpSettings;
        });
    }
}
