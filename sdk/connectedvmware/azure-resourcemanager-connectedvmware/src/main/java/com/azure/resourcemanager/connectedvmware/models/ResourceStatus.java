// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * The resource status information.
 */
@Immutable
public final class ResourceStatus implements JsonSerializable<ResourceStatus> {
    /*
     * The type of the condition.
     */
    private String type;

    /*
     * Status of the condition.
     */
    private String status;

    /*
     * The reason for the condition's status.
     */
    private String reason;

    /*
     * A human readable message indicating details about the status.
     */
    private String message;

    /*
     * Severity with which to treat failures of this type of condition.
     */
    private String severity;

    /*
     * The last update time for this condition.
     */
    private OffsetDateTime lastUpdatedAt;

    /**
     * Creates an instance of ResourceStatus class.
     */
    public ResourceStatus() {
    }

    /**
     * Get the type property: The type of the condition.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Get the status property: Status of the condition.
     * 
     * @return the status value.
     */
    public String status() {
        return this.status;
    }

    /**
     * Get the reason property: The reason for the condition's status.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Get the message property: A human readable message indicating details about the status.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the severity property: Severity with which to treat failures of this type of condition.
     * 
     * @return the severity value.
     */
    public String severity() {
        return this.severity;
    }

    /**
     * Get the lastUpdatedAt property: The last update time for this condition.
     * 
     * @return the lastUpdatedAt value.
     */
    public OffsetDateTime lastUpdatedAt() {
        return this.lastUpdatedAt;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceStatus from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceStatus if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ResourceStatus.
     */
    public static ResourceStatus fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceStatus deserializedResourceStatus = new ResourceStatus();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedResourceStatus.type = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedResourceStatus.status = reader.getString();
                } else if ("reason".equals(fieldName)) {
                    deserializedResourceStatus.reason = reader.getString();
                } else if ("message".equals(fieldName)) {
                    deserializedResourceStatus.message = reader.getString();
                } else if ("severity".equals(fieldName)) {
                    deserializedResourceStatus.severity = reader.getString();
                } else if ("lastUpdatedAt".equals(fieldName)) {
                    deserializedResourceStatus.lastUpdatedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceStatus;
        });
    }
}
