// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the hardware settings for the virtual machine.
 */
@Fluent
public final class HardwareProfile implements JsonSerializable<HardwareProfile> {
    /*
     * Gets or sets memory size in MBs for the vm.
     */
    private Integer memorySizeMB;

    /*
     * Gets or sets the number of vCPUs for the vm.
     */
    private Integer numCPUs;

    /*
     * Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
     */
    private Integer numCoresPerSocket;

    /*
     * Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
     */
    private Boolean cpuHotAddEnabled;

    /*
     * Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
     */
    private Boolean cpuHotRemoveEnabled;

    /*
     * Gets or sets a value indicating whether memory can be added while this virtual machine is running.
     */
    private Boolean memoryHotAddEnabled;

    /**
     * Creates an instance of HardwareProfile class.
     */
    public HardwareProfile() {
    }

    /**
     * Get the memorySizeMB property: Gets or sets memory size in MBs for the vm.
     * 
     * @return the memorySizeMB value.
     */
    public Integer memorySizeMB() {
        return this.memorySizeMB;
    }

    /**
     * Set the memorySizeMB property: Gets or sets memory size in MBs for the vm.
     * 
     * @param memorySizeMB the memorySizeMB value to set.
     * @return the HardwareProfile object itself.
     */
    public HardwareProfile withMemorySizeMB(Integer memorySizeMB) {
        this.memorySizeMB = memorySizeMB;
        return this;
    }

    /**
     * Get the numCPUs property: Gets or sets the number of vCPUs for the vm.
     * 
     * @return the numCPUs value.
     */
    public Integer numCPUs() {
        return this.numCPUs;
    }

    /**
     * Set the numCPUs property: Gets or sets the number of vCPUs for the vm.
     * 
     * @param numCPUs the numCPUs value to set.
     * @return the HardwareProfile object itself.
     */
    public HardwareProfile withNumCPUs(Integer numCPUs) {
        this.numCPUs = numCPUs;
        return this;
    }

    /**
     * Get the numCoresPerSocket property: Gets or sets the number of cores per socket for the vm. Defaults to 1 if
     * unspecified.
     * 
     * @return the numCoresPerSocket value.
     */
    public Integer numCoresPerSocket() {
        return this.numCoresPerSocket;
    }

    /**
     * Set the numCoresPerSocket property: Gets or sets the number of cores per socket for the vm. Defaults to 1 if
     * unspecified.
     * 
     * @param numCoresPerSocket the numCoresPerSocket value to set.
     * @return the HardwareProfile object itself.
     */
    public HardwareProfile withNumCoresPerSocket(Integer numCoresPerSocket) {
        this.numCoresPerSocket = numCoresPerSocket;
        return this;
    }

    /**
     * Get the cpuHotAddEnabled property: Gets or sets a value indicating whether virtual processors can be added while
     * this virtual machine is running.
     * 
     * @return the cpuHotAddEnabled value.
     */
    public Boolean cpuHotAddEnabled() {
        return this.cpuHotAddEnabled;
    }

    /**
     * Get the cpuHotRemoveEnabled property: Gets or sets a value indicating whether virtual processors can be removed
     * while this virtual machine is running.
     * 
     * @return the cpuHotRemoveEnabled value.
     */
    public Boolean cpuHotRemoveEnabled() {
        return this.cpuHotRemoveEnabled;
    }

    /**
     * Get the memoryHotAddEnabled property: Gets or sets a value indicating whether memory can be added while this
     * virtual machine is running.
     * 
     * @return the memoryHotAddEnabled value.
     */
    public Boolean memoryHotAddEnabled() {
        return this.memoryHotAddEnabled;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("memorySizeMB", this.memorySizeMB);
        jsonWriter.writeNumberField("numCPUs", this.numCPUs);
        jsonWriter.writeNumberField("numCoresPerSocket", this.numCoresPerSocket);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HardwareProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HardwareProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the HardwareProfile.
     */
    public static HardwareProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HardwareProfile deserializedHardwareProfile = new HardwareProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("memorySizeMB".equals(fieldName)) {
                    deserializedHardwareProfile.memorySizeMB = reader.getNullable(JsonReader::getInt);
                } else if ("numCPUs".equals(fieldName)) {
                    deserializedHardwareProfile.numCPUs = reader.getNullable(JsonReader::getInt);
                } else if ("numCoresPerSocket".equals(fieldName)) {
                    deserializedHardwareProfile.numCoresPerSocket = reader.getNullable(JsonReader::getInt);
                } else if ("cpuHotAddEnabled".equals(fieldName)) {
                    deserializedHardwareProfile.cpuHotAddEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("cpuHotRemoveEnabled".equals(fieldName)) {
                    deserializedHardwareProfile.cpuHotRemoveEnabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("memoryHotAddEnabled".equals(fieldName)) {
                    deserializedHardwareProfile.memoryHotAddEnabled = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHardwareProfile;
        });
    }
}
