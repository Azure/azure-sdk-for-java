// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedvmware.fluent.ConnectedVMwareClient;
import com.azure.resourcemanager.connectedvmware.implementation.ClustersImpl;
import com.azure.resourcemanager.connectedvmware.implementation.ConnectedVMwareClientBuilder;
import com.azure.resourcemanager.connectedvmware.implementation.DatastoresImpl;
import com.azure.resourcemanager.connectedvmware.implementation.GuestAgentsImpl;
import com.azure.resourcemanager.connectedvmware.implementation.HostsImpl;
import com.azure.resourcemanager.connectedvmware.implementation.HybridIdentityMetadatasImpl;
import com.azure.resourcemanager.connectedvmware.implementation.InventoryItemsImpl;
import com.azure.resourcemanager.connectedvmware.implementation.MachineExtensionsImpl;
import com.azure.resourcemanager.connectedvmware.implementation.OperationsImpl;
import com.azure.resourcemanager.connectedvmware.implementation.ResourcePoolsImpl;
import com.azure.resourcemanager.connectedvmware.implementation.VCentersImpl;
import com.azure.resourcemanager.connectedvmware.implementation.VirtualMachineTemplatesImpl;
import com.azure.resourcemanager.connectedvmware.implementation.VirtualMachinesImpl;
import com.azure.resourcemanager.connectedvmware.implementation.VirtualNetworksImpl;
import com.azure.resourcemanager.connectedvmware.models.Clusters;
import com.azure.resourcemanager.connectedvmware.models.Datastores;
import com.azure.resourcemanager.connectedvmware.models.GuestAgents;
import com.azure.resourcemanager.connectedvmware.models.Hosts;
import com.azure.resourcemanager.connectedvmware.models.HybridIdentityMetadatas;
import com.azure.resourcemanager.connectedvmware.models.InventoryItems;
import com.azure.resourcemanager.connectedvmware.models.MachineExtensions;
import com.azure.resourcemanager.connectedvmware.models.Operations;
import com.azure.resourcemanager.connectedvmware.models.ResourcePools;
import com.azure.resourcemanager.connectedvmware.models.VCenters;
import com.azure.resourcemanager.connectedvmware.models.VirtualMachineTemplates;
import com.azure.resourcemanager.connectedvmware.models.VirtualMachines;
import com.azure.resourcemanager.connectedvmware.models.VirtualNetworks;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/** Entry point to ConnectedVMwareManager. Connected VMware Client. */
public final class ConnectedVMwareManager {
    private Operations operations;

    private VirtualMachines virtualMachines;

    private ResourcePools resourcePools;

    private Clusters clusters;

    private Hosts hosts;

    private Datastores datastores;

    private VCenters vCenters;

    private VirtualMachineTemplates virtualMachineTemplates;

    private VirtualNetworks virtualNetworks;

    private InventoryItems inventoryItems;

    private HybridIdentityMetadatas hybridIdentityMetadatas;

    private MachineExtensions machineExtensions;

    private GuestAgents guestAgents;

    private final ConnectedVMwareClient clientObject;

    private ConnectedVMwareManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new ConnectedVMwareClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of ConnectedVMware service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the ConnectedVMware service API instance.
     */
    public static ConnectedVMwareManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of ConnectedVMware service API entry point.
     *
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the ConnectedVMware service API instance.
     */
    public static ConnectedVMwareManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new ConnectedVMwareManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create ConnectedVMwareManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new ConnectedVMwareManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         *
         * <p>This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval =
                Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of ConnectedVMware service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the ConnectedVMware service API instance.
         */
        public ConnectedVMwareManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.connectedvmware")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies
                .addAll(
                    this
                        .policies
                        .stream()
                        .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                        .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new ConnectedVMwareManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     *
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of VirtualMachines. It manages VirtualMachine.
     *
     * @return Resource collection API of VirtualMachines.
     */
    public VirtualMachines virtualMachines() {
        if (this.virtualMachines == null) {
            this.virtualMachines = new VirtualMachinesImpl(clientObject.getVirtualMachines(), this);
        }
        return virtualMachines;
    }

    /**
     * Gets the resource collection API of ResourcePools. It manages ResourcePool.
     *
     * @return Resource collection API of ResourcePools.
     */
    public ResourcePools resourcePools() {
        if (this.resourcePools == null) {
            this.resourcePools = new ResourcePoolsImpl(clientObject.getResourcePools(), this);
        }
        return resourcePools;
    }

    /**
     * Gets the resource collection API of Clusters. It manages Cluster.
     *
     * @return Resource collection API of Clusters.
     */
    public Clusters clusters() {
        if (this.clusters == null) {
            this.clusters = new ClustersImpl(clientObject.getClusters(), this);
        }
        return clusters;
    }

    /**
     * Gets the resource collection API of Hosts. It manages HostModel.
     *
     * @return Resource collection API of Hosts.
     */
    public Hosts hosts() {
        if (this.hosts == null) {
            this.hosts = new HostsImpl(clientObject.getHosts(), this);
        }
        return hosts;
    }

    /**
     * Gets the resource collection API of Datastores. It manages Datastore.
     *
     * @return Resource collection API of Datastores.
     */
    public Datastores datastores() {
        if (this.datastores == null) {
            this.datastores = new DatastoresImpl(clientObject.getDatastores(), this);
        }
        return datastores;
    }

    /**
     * Gets the resource collection API of VCenters. It manages VCenter.
     *
     * @return Resource collection API of VCenters.
     */
    public VCenters vCenters() {
        if (this.vCenters == null) {
            this.vCenters = new VCentersImpl(clientObject.getVCenters(), this);
        }
        return vCenters;
    }

    /**
     * Gets the resource collection API of VirtualMachineTemplates. It manages VirtualMachineTemplate.
     *
     * @return Resource collection API of VirtualMachineTemplates.
     */
    public VirtualMachineTemplates virtualMachineTemplates() {
        if (this.virtualMachineTemplates == null) {
            this.virtualMachineTemplates =
                new VirtualMachineTemplatesImpl(clientObject.getVirtualMachineTemplates(), this);
        }
        return virtualMachineTemplates;
    }

    /**
     * Gets the resource collection API of VirtualNetworks. It manages VirtualNetwork.
     *
     * @return Resource collection API of VirtualNetworks.
     */
    public VirtualNetworks virtualNetworks() {
        if (this.virtualNetworks == null) {
            this.virtualNetworks = new VirtualNetworksImpl(clientObject.getVirtualNetworks(), this);
        }
        return virtualNetworks;
    }

    /**
     * Gets the resource collection API of InventoryItems. It manages InventoryItem.
     *
     * @return Resource collection API of InventoryItems.
     */
    public InventoryItems inventoryItems() {
        if (this.inventoryItems == null) {
            this.inventoryItems = new InventoryItemsImpl(clientObject.getInventoryItems(), this);
        }
        return inventoryItems;
    }

    /**
     * Gets the resource collection API of HybridIdentityMetadatas. It manages HybridIdentityMetadata.
     *
     * @return Resource collection API of HybridIdentityMetadatas.
     */
    public HybridIdentityMetadatas hybridIdentityMetadatas() {
        if (this.hybridIdentityMetadatas == null) {
            this.hybridIdentityMetadatas =
                new HybridIdentityMetadatasImpl(clientObject.getHybridIdentityMetadatas(), this);
        }
        return hybridIdentityMetadatas;
    }

    /**
     * Gets the resource collection API of MachineExtensions. It manages MachineExtension.
     *
     * @return Resource collection API of MachineExtensions.
     */
    public MachineExtensions machineExtensions() {
        if (this.machineExtensions == null) {
            this.machineExtensions = new MachineExtensionsImpl(clientObject.getMachineExtensions(), this);
        }
        return machineExtensions;
    }

    /**
     * Gets the resource collection API of GuestAgents. It manages GuestAgent.
     *
     * @return Resource collection API of GuestAgents.
     */
    public GuestAgents guestAgents() {
        if (this.guestAgents == null) {
            this.guestAgents = new GuestAgentsImpl(clientObject.getGuestAgents(), this);
        }
        return guestAgents;
    }

    /**
     * @return Wrapped service client ConnectedVMwareClient providing direct access to the underlying auto-generated API
     *     implementation, based on Azure REST API.
     */
    public ConnectedVMwareClient serviceClient() {
        return this.clientObject;
    }
}
