// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.connectedvmware.models.FirmwareType;
import com.azure.resourcemanager.connectedvmware.models.NetworkInterface;
import com.azure.resourcemanager.connectedvmware.models.OsType;
import com.azure.resourcemanager.connectedvmware.models.ProvisioningState;
import com.azure.resourcemanager.connectedvmware.models.ResourceStatus;
import com.azure.resourcemanager.connectedvmware.models.VirtualDisk;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of a Virtual Machine Template.
 */
@Fluent
public final class VirtualMachineTemplateProperties implements JsonSerializable<VirtualMachineTemplateProperties> {
    /*
     * Gets or sets a unique identifier for this resource.
     */
    private String uuid;

    /*
     * Gets or sets the ARM Id of the vCenter resource in which this template resides.
     */
    private String vCenterId;

    /*
     * Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
     * template.
     */
    private String moRefId;

    /*
     * Gets or sets the inventory Item ID for the virtual machine template.
     */
    private String inventoryItemId;

    /*
     * Gets or sets the vCenter Managed Object name for the virtual machine template.
     */
    private String moName;

    /*
     * Gets or sets memory size in MBs for the template.
     */
    private Integer memorySizeMB;

    /*
     * Gets or sets the number of vCPUs for the template.
     */
    private Integer numCPUs;

    /*
     * Gets or sets the number of cores per socket for the template.
     * Defaults to 1 if unspecified.
     */
    private Integer numCoresPerSocket;

    /*
     * Gets or sets the type of the os.
     */
    private OsType osType;

    /*
     * Gets or sets os name.
     */
    private String osName;

    /*
     * Gets or sets the folder path of the template.
     */
    private String folderPath;

    /*
     * Gets or sets the network interfaces of the template.
     */
    private List<NetworkInterface> networkInterfaces;

    /*
     * Gets or sets the disks the template.
     */
    private List<VirtualDisk> disks;

    /*
     * Gets the name of the corresponding resource in Kubernetes.
     */
    private String customResourceName;

    /*
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     */
    private String toolsVersionStatus;

    /*
     * Gets or sets the current version of VMware Tools.
     */
    private String toolsVersion;

    /*
     * Firmware type
     */
    private FirmwareType firmwareType;

    /*
     * The resource status information.
     */
    private List<ResourceStatus> statuses;

    /*
     * Gets the provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of VirtualMachineTemplateProperties class.
     */
    public VirtualMachineTemplateProperties() {
    }

    /**
     * Get the uuid property: Gets or sets a unique identifier for this resource.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the vCenterId property: Gets or sets the ARM Id of the vCenter resource in which this template resides.
     * 
     * @return the vCenterId value.
     */
    public String vCenterId() {
        return this.vCenterId;
    }

    /**
     * Set the vCenterId property: Gets or sets the ARM Id of the vCenter resource in which this template resides.
     * 
     * @param vCenterId the vCenterId value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withVCenterId(String vCenterId) {
        this.vCenterId = vCenterId;
        return this;
    }

    /**
     * Get the moRefId property: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
     * template.
     * 
     * @return the moRefId value.
     */
    public String moRefId() {
        return this.moRefId;
    }

    /**
     * Set the moRefId property: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
     * template.
     * 
     * @param moRefId the moRefId value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withMoRefId(String moRefId) {
        this.moRefId = moRefId;
        return this;
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the virtual machine template.
     * 
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the virtual machine template.
     * 
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the VirtualMachineTemplateProperties object itself.
     */
    public VirtualMachineTemplateProperties withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the moName property: Gets or sets the vCenter Managed Object name for the virtual machine template.
     * 
     * @return the moName value.
     */
    public String moName() {
        return this.moName;
    }

    /**
     * Get the memorySizeMB property: Gets or sets memory size in MBs for the template.
     * 
     * @return the memorySizeMB value.
     */
    public Integer memorySizeMB() {
        return this.memorySizeMB;
    }

    /**
     * Get the numCPUs property: Gets or sets the number of vCPUs for the template.
     * 
     * @return the numCPUs value.
     */
    public Integer numCPUs() {
        return this.numCPUs;
    }

    /**
     * Get the numCoresPerSocket property: Gets or sets the number of cores per socket for the template.
     * Defaults to 1 if unspecified.
     * 
     * @return the numCoresPerSocket value.
     */
    public Integer numCoresPerSocket() {
        return this.numCoresPerSocket;
    }

    /**
     * Get the osType property: Gets or sets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the osName property: Gets or sets os name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get the folderPath property: Gets or sets the folder path of the template.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Get the networkInterfaces property: Gets or sets the network interfaces of the template.
     * 
     * @return the networkInterfaces value.
     */
    public List<NetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Get the disks property: Gets or sets the disks the template.
     * 
     * @return the disks value.
     */
    public List<VirtualDisk> disks() {
        return this.disks;
    }

    /**
     * Get the customResourceName property: Gets the name of the corresponding resource in Kubernetes.
     * 
     * @return the customResourceName value.
     */
    public String customResourceName() {
        return this.customResourceName;
    }

    /**
     * Get the toolsVersionStatus property: Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     * 
     * @return the toolsVersionStatus value.
     */
    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    /**
     * Get the toolsVersion property: Gets or sets the current version of VMware Tools.
     * 
     * @return the toolsVersion value.
     */
    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * Get the firmwareType property: Firmware type.
     * 
     * @return the firmwareType value.
     */
    public FirmwareType firmwareType() {
        return this.firmwareType;
    }

    /**
     * Get the statuses property: The resource status information.
     * 
     * @return the statuses value.
     */
    public List<ResourceStatus> statuses() {
        return this.statuses;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("vCenterId", this.vCenterId);
        jsonWriter.writeStringField("moRefId", this.moRefId);
        jsonWriter.writeStringField("inventoryItemId", this.inventoryItemId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineTemplateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineTemplateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineTemplateProperties.
     */
    public static VirtualMachineTemplateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineTemplateProperties deserializedVirtualMachineTemplateProperties
                = new VirtualMachineTemplateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("uuid".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.uuid = reader.getString();
                } else if ("vCenterId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.vCenterId = reader.getString();
                } else if ("moRefId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.moRefId = reader.getString();
                } else if ("inventoryItemId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.inventoryItemId = reader.getString();
                } else if ("moName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.moName = reader.getString();
                } else if ("memorySizeMB".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.memorySizeMB = reader.getNullable(JsonReader::getInt);
                } else if ("numCPUs".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.numCPUs = reader.getNullable(JsonReader::getInt);
                } else if ("numCoresPerSocket".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.numCoresPerSocket
                        = reader.getNullable(JsonReader::getInt);
                } else if ("osType".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.osType = OsType.fromString(reader.getString());
                } else if ("osName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.osName = reader.getString();
                } else if ("folderPath".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.folderPath = reader.getString();
                } else if ("networkInterfaces".equals(fieldName)) {
                    List<NetworkInterface> networkInterfaces
                        = reader.readArray(reader1 -> NetworkInterface.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.networkInterfaces = networkInterfaces;
                } else if ("disks".equals(fieldName)) {
                    List<VirtualDisk> disks = reader.readArray(reader1 -> VirtualDisk.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.disks = disks;
                } else if ("customResourceName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.customResourceName = reader.getString();
                } else if ("toolsVersionStatus".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.toolsVersionStatus = reader.getString();
                } else if ("toolsVersion".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.toolsVersion = reader.getString();
                } else if ("firmwareType".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.firmwareType
                        = FirmwareType.fromString(reader.getString());
                } else if ("statuses".equals(fieldName)) {
                    List<ResourceStatus> statuses = reader.readArray(reader1 -> ResourceStatus.fromJson(reader1));
                    deserializedVirtualMachineTemplateProperties.statuses = statuses;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineTemplateProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineTemplateProperties;
        });
    }
}
