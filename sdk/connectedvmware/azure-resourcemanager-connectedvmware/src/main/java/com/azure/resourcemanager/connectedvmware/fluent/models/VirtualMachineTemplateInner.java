// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import com.azure.resourcemanager.connectedvmware.models.FirmwareType;
import com.azure.resourcemanager.connectedvmware.models.NetworkInterface;
import com.azure.resourcemanager.connectedvmware.models.OsType;
import com.azure.resourcemanager.connectedvmware.models.ResourceStatus;
import com.azure.resourcemanager.connectedvmware.models.VirtualDisk;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/** Define the virtualMachineTemplate. */
@JsonFlatten
@Fluent
public class VirtualMachineTemplateInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VirtualMachineTemplateInner.class);

    /*
     * Gets or sets the extended location.
     */
    @JsonProperty(value = "extendedLocation")
    private ExtendedLocation extendedLocation;

    /*
     * The system data.
     */
    @JsonProperty(value = "systemData", access = JsonProperty.Access.WRITE_ONLY)
    private SystemData systemData;

    /*
     * Metadata used by portal/tooling/etc to render different UX experiences
     * for resources of the same type; e.g. ApiApps are a kind of
     * Microsoft.Web/sites type.  If supported, the resource provider must
     * validate and persist this value.
     */
    @JsonProperty(value = "kind")
    private String kind;

    /*
     * Gets or sets a unique identifier for this resource.
     */
    @JsonProperty(value = "properties.uuid", access = JsonProperty.Access.WRITE_ONLY)
    private String uuid;

    /*
     * Gets or sets the ARM Id of the vCenter resource in which this template
     * resides.
     */
    @JsonProperty(value = "properties.vCenterId")
    private String vCenterId;

    /*
     * Gets or sets the vCenter MoRef (Managed Object Reference) ID for the
     * virtual machine
     * template.
     */
    @JsonProperty(value = "properties.moRefId")
    private String moRefId;

    /*
     * Gets or sets the inventory Item ID for the virtual machine template.
     */
    @JsonProperty(value = "properties.inventoryItemId")
    private String inventoryItemId;

    /*
     * Gets or sets the vCenter Managed Object name for the virtual machine
     * template.
     */
    @JsonProperty(value = "properties.moName", access = JsonProperty.Access.WRITE_ONLY)
    private String moName;

    /*
     * Gets or sets memory size in MBs for the template.
     */
    @JsonProperty(value = "properties.memorySizeMB", access = JsonProperty.Access.WRITE_ONLY)
    private Integer memorySizeMB;

    /*
     * Gets or sets the number of vCPUs for the template.
     */
    @JsonProperty(value = "properties.numCPUs", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numCPUs;

    /*
     * Gets or sets the number of cores per socket for the template.
     * Defaults to 1 if unspecified.
     */
    @JsonProperty(value = "properties.numCoresPerSocket", access = JsonProperty.Access.WRITE_ONLY)
    private Integer numCoresPerSocket;

    /*
     * Gets or sets the type of the os.
     */
    @JsonProperty(value = "properties.osType", access = JsonProperty.Access.WRITE_ONLY)
    private OsType osType;

    /*
     * Gets or sets os name.
     */
    @JsonProperty(value = "properties.osName", access = JsonProperty.Access.WRITE_ONLY)
    private String osName;

    /*
     * Gets or sets the folder path of the template.
     */
    @JsonProperty(value = "properties.folderPath", access = JsonProperty.Access.WRITE_ONLY)
    private String folderPath;

    /*
     * Gets or sets the network interfaces of the template.
     */
    @JsonProperty(value = "properties.networkInterfaces", access = JsonProperty.Access.WRITE_ONLY)
    private List<NetworkInterface> networkInterfaces;

    /*
     * Gets or sets the disks the template.
     */
    @JsonProperty(value = "properties.disks", access = JsonProperty.Access.WRITE_ONLY)
    private List<VirtualDisk> disks;

    /*
     * Gets the name of the corresponding resource in Kubernetes.
     */
    @JsonProperty(value = "properties.customResourceName", access = JsonProperty.Access.WRITE_ONLY)
    private String customResourceName;

    /*
     * Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     */
    @JsonProperty(value = "properties.toolsVersionStatus", access = JsonProperty.Access.WRITE_ONLY)
    private String toolsVersionStatus;

    /*
     * Gets or sets the current version of VMware Tools.
     */
    @JsonProperty(value = "properties.toolsVersion", access = JsonProperty.Access.WRITE_ONLY)
    private String toolsVersion;

    /*
     * Firmware type
     */
    @JsonProperty(value = "properties.firmwareType", access = JsonProperty.Access.WRITE_ONLY)
    private FirmwareType firmwareType;

    /*
     * The resource status information.
     */
    @JsonProperty(value = "properties.statuses", access = JsonProperty.Access.WRITE_ONLY)
    private List<ResourceStatus> statuses;

    /*
     * Gets or sets the provisioning state.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningState;

    /**
     * Get the extendedLocation property: Gets or sets the extended location.
     *
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: Gets or sets the extended location.
     *
     * @param extendedLocation the extendedLocation value to set.
     * @return the VirtualMachineTemplateInner object itself.
     */
    public VirtualMachineTemplateInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: The system data.
     *
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the kind property: Metadata used by portal/tooling/etc to render different UX experiences for resources of
     * the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type. If supported, the resource provider must
     * validate and persist this value.
     *
     * @return the kind value.
     */
    public String kind() {
        return this.kind;
    }

    /**
     * Set the kind property: Metadata used by portal/tooling/etc to render different UX experiences for resources of
     * the same type; e.g. ApiApps are a kind of Microsoft.Web/sites type. If supported, the resource provider must
     * validate and persist this value.
     *
     * @param kind the kind value to set.
     * @return the VirtualMachineTemplateInner object itself.
     */
    public VirtualMachineTemplateInner withKind(String kind) {
        this.kind = kind;
        return this;
    }

    /**
     * Get the uuid property: Gets or sets a unique identifier for this resource.
     *
     * @return the uuid value.
     */
    public String uuid() {
        return this.uuid;
    }

    /**
     * Get the vCenterId property: Gets or sets the ARM Id of the vCenter resource in which this template resides.
     *
     * @return the vCenterId value.
     */
    public String vCenterId() {
        return this.vCenterId;
    }

    /**
     * Set the vCenterId property: Gets or sets the ARM Id of the vCenter resource in which this template resides.
     *
     * @param vCenterId the vCenterId value to set.
     * @return the VirtualMachineTemplateInner object itself.
     */
    public VirtualMachineTemplateInner withVCenterId(String vCenterId) {
        this.vCenterId = vCenterId;
        return this;
    }

    /**
     * Get the moRefId property: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
     * template.
     *
     * @return the moRefId value.
     */
    public String moRefId() {
        return this.moRefId;
    }

    /**
     * Set the moRefId property: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine
     * template.
     *
     * @param moRefId the moRefId value to set.
     * @return the VirtualMachineTemplateInner object itself.
     */
    public VirtualMachineTemplateInner withMoRefId(String moRefId) {
        this.moRefId = moRefId;
        return this;
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the virtual machine template.
     *
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the virtual machine template.
     *
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the VirtualMachineTemplateInner object itself.
     */
    public VirtualMachineTemplateInner withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the moName property: Gets or sets the vCenter Managed Object name for the virtual machine template.
     *
     * @return the moName value.
     */
    public String moName() {
        return this.moName;
    }

    /**
     * Get the memorySizeMB property: Gets or sets memory size in MBs for the template.
     *
     * @return the memorySizeMB value.
     */
    public Integer memorySizeMB() {
        return this.memorySizeMB;
    }

    /**
     * Get the numCPUs property: Gets or sets the number of vCPUs for the template.
     *
     * @return the numCPUs value.
     */
    public Integer numCPUs() {
        return this.numCPUs;
    }

    /**
     * Get the numCoresPerSocket property: Gets or sets the number of cores per socket for the template. Defaults to 1
     * if unspecified.
     *
     * @return the numCoresPerSocket value.
     */
    public Integer numCoresPerSocket() {
        return this.numCoresPerSocket;
    }

    /**
     * Get the osType property: Gets or sets the type of the os.
     *
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Get the osName property: Gets or sets os name.
     *
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Get the folderPath property: Gets or sets the folder path of the template.
     *
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Get the networkInterfaces property: Gets or sets the network interfaces of the template.
     *
     * @return the networkInterfaces value.
     */
    public List<NetworkInterface> networkInterfaces() {
        return this.networkInterfaces;
    }

    /**
     * Get the disks property: Gets or sets the disks the template.
     *
     * @return the disks value.
     */
    public List<VirtualDisk> disks() {
        return this.disks;
    }

    /**
     * Get the customResourceName property: Gets the name of the corresponding resource in Kubernetes.
     *
     * @return the customResourceName value.
     */
    public String customResourceName() {
        return this.customResourceName;
    }

    /**
     * Get the toolsVersionStatus property: Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     *
     * @return the toolsVersionStatus value.
     */
    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    /**
     * Get the toolsVersion property: Gets or sets the current version of VMware Tools.
     *
     * @return the toolsVersion value.
     */
    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * Get the firmwareType property: Firmware type.
     *
     * @return the firmwareType value.
     */
    public FirmwareType firmwareType() {
        return this.firmwareType;
    }

    /**
     * Get the statuses property: The resource status information.
     *
     * @return the statuses value.
     */
    public List<ResourceStatus> statuses() {
        return this.statuses;
    }

    /**
     * Get the provisioningState property: Gets or sets the provisioning state.
     *
     * @return the provisioningState value.
     */
    public String provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public VirtualMachineTemplateInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public VirtualMachineTemplateInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
        if (networkInterfaces() != null) {
            networkInterfaces().forEach(e -> e.validate());
        }
        if (disks() != null) {
            disks().forEach(e -> e.validate());
        }
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
    }
}
