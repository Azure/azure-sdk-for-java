// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The VM Template inventory item.
 */
@Fluent
public final class VirtualMachineTemplateInventoryItem extends InventoryItemProperties {
    /*
     * They inventory type.
     */
    private InventoryType inventoryType = InventoryType.VIRTUAL_MACHINE_TEMPLATE;

    /*
     * Gets or sets memory size in MBs for the template.
     */
    private Integer memorySizeMB;

    /*
     * Gets or sets the number of vCPUs for the template.
     */
    private Integer numCPUs;

    /*
     * Gets or sets the number of cores per socket for the template.
     * Defaults to 1 if unspecified.
     */
    private Integer numCoresPerSocket;

    /*
     * Gets or sets the type of the os.
     */
    private OsType osType;

    /*
     * Gets or sets os name.
     */
    private String osName;

    /*
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     */
    private String toolsVersionStatus;

    /*
     * Gets or sets the current version of VMware Tools.
     */
    private String toolsVersion;

    /*
     * Gets or sets the folder path of the template.
     */
    private String folderPath;

    /**
     * Creates an instance of VirtualMachineTemplateInventoryItem class.
     */
    public VirtualMachineTemplateInventoryItem() {
    }

    /**
     * Get the inventoryType property: They inventory type.
     * 
     * @return the inventoryType value.
     */
    @Override
    public InventoryType inventoryType() {
        return this.inventoryType;
    }

    /**
     * Get the memorySizeMB property: Gets or sets memory size in MBs for the template.
     * 
     * @return the memorySizeMB value.
     */
    public Integer memorySizeMB() {
        return this.memorySizeMB;
    }

    /**
     * Set the memorySizeMB property: Gets or sets memory size in MBs for the template.
     * 
     * @param memorySizeMB the memorySizeMB value to set.
     * @return the VirtualMachineTemplateInventoryItem object itself.
     */
    public VirtualMachineTemplateInventoryItem withMemorySizeMB(Integer memorySizeMB) {
        this.memorySizeMB = memorySizeMB;
        return this;
    }

    /**
     * Get the numCPUs property: Gets or sets the number of vCPUs for the template.
     * 
     * @return the numCPUs value.
     */
    public Integer numCPUs() {
        return this.numCPUs;
    }

    /**
     * Set the numCPUs property: Gets or sets the number of vCPUs for the template.
     * 
     * @param numCPUs the numCPUs value to set.
     * @return the VirtualMachineTemplateInventoryItem object itself.
     */
    public VirtualMachineTemplateInventoryItem withNumCPUs(Integer numCPUs) {
        this.numCPUs = numCPUs;
        return this;
    }

    /**
     * Get the numCoresPerSocket property: Gets or sets the number of cores per socket for the template.
     * Defaults to 1 if unspecified.
     * 
     * @return the numCoresPerSocket value.
     */
    public Integer numCoresPerSocket() {
        return this.numCoresPerSocket;
    }

    /**
     * Set the numCoresPerSocket property: Gets or sets the number of cores per socket for the template.
     * Defaults to 1 if unspecified.
     * 
     * @param numCoresPerSocket the numCoresPerSocket value to set.
     * @return the VirtualMachineTemplateInventoryItem object itself.
     */
    public VirtualMachineTemplateInventoryItem withNumCoresPerSocket(Integer numCoresPerSocket) {
        this.numCoresPerSocket = numCoresPerSocket;
        return this;
    }

    /**
     * Get the osType property: Gets or sets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Gets or sets the type of the os.
     * 
     * @param osType the osType value to set.
     * @return the VirtualMachineTemplateInventoryItem object itself.
     */
    public VirtualMachineTemplateInventoryItem withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osName property: Gets or sets os name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: Gets or sets os name.
     * 
     * @param osName the osName value to set.
     * @return the VirtualMachineTemplateInventoryItem object itself.
     */
    public VirtualMachineTemplateInventoryItem withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the toolsVersionStatus property: Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     * 
     * @return the toolsVersionStatus value.
     */
    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    /**
     * Get the toolsVersion property: Gets or sets the current version of VMware Tools.
     * 
     * @return the toolsVersion value.
     */
    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * Get the folderPath property: Gets or sets the folder path of the template.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath property: Gets or sets the folder path of the template.
     * 
     * @param folderPath the folderPath value to set.
     * @return the VirtualMachineTemplateInventoryItem object itself.
     */
    public VirtualMachineTemplateInventoryItem withFolderPath(String folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineTemplateInventoryItem withManagedResourceId(String managedResourceId) {
        super.withManagedResourceId(managedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineTemplateInventoryItem withMoRefId(String moRefId) {
        super.withMoRefId(moRefId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineTemplateInventoryItem withMoName(String moName) {
        super.withMoName(moName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedResourceId", managedResourceId());
        jsonWriter.writeStringField("moRefId", moRefId());
        jsonWriter.writeStringField("moName", moName());
        jsonWriter.writeStringField("inventoryType", this.inventoryType == null ? null : this.inventoryType.toString());
        jsonWriter.writeNumberField("memorySizeMB", this.memorySizeMB);
        jsonWriter.writeNumberField("numCPUs", this.numCPUs);
        jsonWriter.writeNumberField("numCoresPerSocket", this.numCoresPerSocket);
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeStringField("osName", this.osName);
        jsonWriter.writeStringField("folderPath", this.folderPath);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineTemplateInventoryItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineTemplateInventoryItem if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineTemplateInventoryItem.
     */
    public static VirtualMachineTemplateInventoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineTemplateInventoryItem deserializedVirtualMachineTemplateInventoryItem
                = new VirtualMachineTemplateInventoryItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedResourceId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.withManagedResourceId(reader.getString());
                } else if ("moRefId".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.withMoRefId(reader.getString());
                } else if ("moName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.withMoName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("inventoryType".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.inventoryType
                        = InventoryType.fromString(reader.getString());
                } else if ("memorySizeMB".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.memorySizeMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("numCPUs".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.numCPUs = reader.getNullable(JsonReader::getInt);
                } else if ("numCoresPerSocket".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.numCoresPerSocket
                        = reader.getNullable(JsonReader::getInt);
                } else if ("osType".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.osType = OsType.fromString(reader.getString());
                } else if ("osName".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.osName = reader.getString();
                } else if ("toolsVersionStatus".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.toolsVersionStatus = reader.getString();
                } else if ("toolsVersion".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.toolsVersion = reader.getString();
                } else if ("folderPath".equals(fieldName)) {
                    deserializedVirtualMachineTemplateInventoryItem.folderPath = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineTemplateInventoryItem;
        });
    }
}
