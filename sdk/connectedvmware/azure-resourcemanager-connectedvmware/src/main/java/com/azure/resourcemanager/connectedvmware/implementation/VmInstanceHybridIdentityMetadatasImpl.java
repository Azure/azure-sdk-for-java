// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedvmware.fluent.VmInstanceHybridIdentityMetadatasClient;
import com.azure.resourcemanager.connectedvmware.fluent.models.VmInstanceHybridIdentityMetadataInner;
import com.azure.resourcemanager.connectedvmware.models.VmInstanceHybridIdentityMetadata;
import com.azure.resourcemanager.connectedvmware.models.VmInstanceHybridIdentityMetadatas;

public final class VmInstanceHybridIdentityMetadatasImpl implements VmInstanceHybridIdentityMetadatas {
    private static final ClientLogger LOGGER = new ClientLogger(VmInstanceHybridIdentityMetadatasImpl.class);

    private final VmInstanceHybridIdentityMetadatasClient innerClient;

    private final com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager serviceManager;

    public VmInstanceHybridIdentityMetadatasImpl(
        VmInstanceHybridIdentityMetadatasClient innerClient,
        com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<VmInstanceHybridIdentityMetadata> getWithResponse(String resourceUri, Context context) {
        Response<VmInstanceHybridIdentityMetadataInner> inner =
            this.serviceClient().getWithResponse(resourceUri, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VmInstanceHybridIdentityMetadataImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public VmInstanceHybridIdentityMetadata get(String resourceUri) {
        VmInstanceHybridIdentityMetadataInner inner = this.serviceClient().get(resourceUri);
        if (inner != null) {
            return new VmInstanceHybridIdentityMetadataImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<VmInstanceHybridIdentityMetadata> list(String resourceUri) {
        PagedIterable<VmInstanceHybridIdentityMetadataInner> inner = this.serviceClient().list(resourceUri);
        return Utils.mapPage(inner, inner1 -> new VmInstanceHybridIdentityMetadataImpl(inner1, this.manager()));
    }

    public PagedIterable<VmInstanceHybridIdentityMetadata> list(String resourceUri, Context context) {
        PagedIterable<VmInstanceHybridIdentityMetadataInner> inner = this.serviceClient().list(resourceUri, context);
        return Utils.mapPage(inner, inner1 -> new VmInstanceHybridIdentityMetadataImpl(inner1, this.manager()));
    }

    private VmInstanceHybridIdentityMetadatasClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager manager() {
        return this.serviceManager;
    }
}
