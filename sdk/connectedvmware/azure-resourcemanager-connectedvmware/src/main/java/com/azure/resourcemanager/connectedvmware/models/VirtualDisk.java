// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Virtual disk model.
 */
@Fluent
public final class VirtualDisk implements JsonSerializable<VirtualDisk> {
    /*
     * Gets or sets the name of the virtual disk.
     */
    private String name;

    /*
     * Gets or sets the label of the virtual disk in vCenter.
     */
    private String label;

    /*
     * Gets or sets the disk object id.
     */
    private String diskObjectId;

    /*
     * Gets or sets the disk total size.
     */
    private Integer diskSizeGB;

    /*
     * Gets or sets the device key value.
     */
    private Integer deviceKey;

    /*
     * Gets or sets the disk mode.
     */
    private DiskMode diskMode;

    /*
     * Gets or sets the controller id.
     */
    private Integer controllerKey;

    /*
     * Gets or sets the unit number of the disk on the controller.
     */
    private Integer unitNumber;

    /*
     * Gets or sets the device name.
     */
    private String deviceName;

    /*
     * Gets or sets the disk backing type.
     */
    private DiskType diskType;

    /**
     * Creates an instance of VirtualDisk class.
     */
    public VirtualDisk() {
    }

    /**
     * Get the name property: Gets or sets the name of the virtual disk.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: Gets or sets the name of the virtual disk.
     * 
     * @param name the name value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the label property: Gets or sets the label of the virtual disk in vCenter.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Get the diskObjectId property: Gets or sets the disk object id.
     * 
     * @return the diskObjectId value.
     */
    public String diskObjectId() {
        return this.diskObjectId;
    }

    /**
     * Get the diskSizeGB property: Gets or sets the disk total size.
     * 
     * @return the diskSizeGB value.
     */
    public Integer diskSizeGB() {
        return this.diskSizeGB;
    }

    /**
     * Set the diskSizeGB property: Gets or sets the disk total size.
     * 
     * @param diskSizeGB the diskSizeGB value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withDiskSizeGB(Integer diskSizeGB) {
        this.diskSizeGB = diskSizeGB;
        return this;
    }

    /**
     * Get the deviceKey property: Gets or sets the device key value.
     * 
     * @return the deviceKey value.
     */
    public Integer deviceKey() {
        return this.deviceKey;
    }

    /**
     * Set the deviceKey property: Gets or sets the device key value.
     * 
     * @param deviceKey the deviceKey value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withDeviceKey(Integer deviceKey) {
        this.deviceKey = deviceKey;
        return this;
    }

    /**
     * Get the diskMode property: Gets or sets the disk mode.
     * 
     * @return the diskMode value.
     */
    public DiskMode diskMode() {
        return this.diskMode;
    }

    /**
     * Set the diskMode property: Gets or sets the disk mode.
     * 
     * @param diskMode the diskMode value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withDiskMode(DiskMode diskMode) {
        this.diskMode = diskMode;
        return this;
    }

    /**
     * Get the controllerKey property: Gets or sets the controller id.
     * 
     * @return the controllerKey value.
     */
    public Integer controllerKey() {
        return this.controllerKey;
    }

    /**
     * Set the controllerKey property: Gets or sets the controller id.
     * 
     * @param controllerKey the controllerKey value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withControllerKey(Integer controllerKey) {
        this.controllerKey = controllerKey;
        return this;
    }

    /**
     * Get the unitNumber property: Gets or sets the unit number of the disk on the controller.
     * 
     * @return the unitNumber value.
     */
    public Integer unitNumber() {
        return this.unitNumber;
    }

    /**
     * Set the unitNumber property: Gets or sets the unit number of the disk on the controller.
     * 
     * @param unitNumber the unitNumber value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withUnitNumber(Integer unitNumber) {
        this.unitNumber = unitNumber;
        return this;
    }

    /**
     * Get the deviceName property: Gets or sets the device name.
     * 
     * @return the deviceName value.
     */
    public String deviceName() {
        return this.deviceName;
    }

    /**
     * Set the deviceName property: Gets or sets the device name.
     * 
     * @param deviceName the deviceName value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withDeviceName(String deviceName) {
        this.deviceName = deviceName;
        return this;
    }

    /**
     * Get the diskType property: Gets or sets the disk backing type.
     * 
     * @return the diskType value.
     */
    public DiskType diskType() {
        return this.diskType;
    }

    /**
     * Set the diskType property: Gets or sets the disk backing type.
     * 
     * @param diskType the diskType value to set.
     * @return the VirtualDisk object itself.
     */
    public VirtualDisk withDiskType(DiskType diskType) {
        this.diskType = diskType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeNumberField("diskSizeGB", this.diskSizeGB);
        jsonWriter.writeNumberField("deviceKey", this.deviceKey);
        jsonWriter.writeStringField("diskMode", this.diskMode == null ? null : this.diskMode.toString());
        jsonWriter.writeNumberField("controllerKey", this.controllerKey);
        jsonWriter.writeNumberField("unitNumber", this.unitNumber);
        jsonWriter.writeStringField("deviceName", this.deviceName);
        jsonWriter.writeStringField("diskType", this.diskType == null ? null : this.diskType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualDisk from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualDisk if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualDisk.
     */
    public static VirtualDisk fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualDisk deserializedVirtualDisk = new VirtualDisk();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedVirtualDisk.name = reader.getString();
                } else if ("label".equals(fieldName)) {
                    deserializedVirtualDisk.label = reader.getString();
                } else if ("diskObjectId".equals(fieldName)) {
                    deserializedVirtualDisk.diskObjectId = reader.getString();
                } else if ("diskSizeGB".equals(fieldName)) {
                    deserializedVirtualDisk.diskSizeGB = reader.getNullable(JsonReader::getInt);
                } else if ("deviceKey".equals(fieldName)) {
                    deserializedVirtualDisk.deviceKey = reader.getNullable(JsonReader::getInt);
                } else if ("diskMode".equals(fieldName)) {
                    deserializedVirtualDisk.diskMode = DiskMode.fromString(reader.getString());
                } else if ("controllerKey".equals(fieldName)) {
                    deserializedVirtualDisk.controllerKey = reader.getNullable(JsonReader::getInt);
                } else if ("unitNumber".equals(fieldName)) {
                    deserializedVirtualDisk.unitNumber = reader.getNullable(JsonReader::getInt);
                } else if ("deviceName".equals(fieldName)) {
                    deserializedVirtualDisk.deviceName = reader.getString();
                } else if ("diskType".equals(fieldName)) {
                    deserializedVirtualDisk.diskType = DiskType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualDisk;
        });
    }
}
