// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.connectedvmware.models.GuestCredential;
import com.azure.resourcemanager.connectedvmware.models.HttpProxyConfiguration;
import com.azure.resourcemanager.connectedvmware.models.ProvisioningAction;
import com.azure.resourcemanager.connectedvmware.models.ProvisioningState;
import com.azure.resourcemanager.connectedvmware.models.ResourceStatus;
import java.io.IOException;
import java.util.List;

/**
 * Defines the GuestAgent.
 */
@Fluent
public final class GuestAgentInner extends ProxyResource {
    /*
     * Resource properties.
     */
    private GuestAgentProperties innerProperties = new GuestAgentProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of GuestAgentInner class.
     */
    public GuestAgentInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private GuestAgentProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the uuid property: Gets or sets a unique identifier for this resource.
     * 
     * @return the uuid value.
     */
    public String uuid() {
        return this.innerProperties() == null ? null : this.innerProperties().uuid();
    }

    /**
     * Get the credentials property: Username / Password Credentials to provision guest agent.
     * 
     * @return the credentials value.
     */
    public GuestCredential credentials() {
        return this.innerProperties() == null ? null : this.innerProperties().credentials();
    }

    /**
     * Set the credentials property: Username / Password Credentials to provision guest agent.
     * 
     * @param credentials the credentials value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withCredentials(GuestCredential credentials) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withCredentials(credentials);
        return this;
    }

    /**
     * Get the privateLinkScopeResourceId property: The resource id of the private link scope this machine is assigned
     * to, if any.
     * 
     * @return the privateLinkScopeResourceId value.
     */
    public String privateLinkScopeResourceId() {
        return this.innerProperties() == null ? null : this.innerProperties().privateLinkScopeResourceId();
    }

    /**
     * Set the privateLinkScopeResourceId property: The resource id of the private link scope this machine is assigned
     * to, if any.
     * 
     * @param privateLinkScopeResourceId the privateLinkScopeResourceId value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withPrivateLinkScopeResourceId(String privateLinkScopeResourceId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withPrivateLinkScopeResourceId(privateLinkScopeResourceId);
        return this;
    }

    /**
     * Get the httpProxyConfig property: HTTP Proxy configuration for the VM.
     * 
     * @return the httpProxyConfig value.
     */
    public HttpProxyConfiguration httpProxyConfig() {
        return this.innerProperties() == null ? null : this.innerProperties().httpProxyConfig();
    }

    /**
     * Set the httpProxyConfig property: HTTP Proxy configuration for the VM.
     * 
     * @param httpProxyConfig the httpProxyConfig value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withHttpProxyConfig(HttpProxyConfiguration httpProxyConfig) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withHttpProxyConfig(httpProxyConfig);
        return this;
    }

    /**
     * Get the provisioningAction property: Gets or sets the guest agent provisioning action.
     * 
     * @return the provisioningAction value.
     */
    public ProvisioningAction provisioningAction() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningAction();
    }

    /**
     * Set the provisioningAction property: Gets or sets the guest agent provisioning action.
     * 
     * @param provisioningAction the provisioningAction value to set.
     * @return the GuestAgentInner object itself.
     */
    public GuestAgentInner withProvisioningAction(ProvisioningAction provisioningAction) {
        if (this.innerProperties() == null) {
            this.innerProperties = new GuestAgentProperties();
        }
        this.innerProperties().withProvisioningAction(provisioningAction);
        return this;
    }

    /**
     * Get the status property: Gets or sets the guest agent status.
     * 
     * @return the status value.
     */
    public String status() {
        return this.innerProperties() == null ? null : this.innerProperties().status();
    }

    /**
     * Get the customResourceName property: Gets the name of the corresponding resource in Kubernetes.
     * 
     * @return the customResourceName value.
     */
    public String customResourceName() {
        return this.innerProperties() == null ? null : this.innerProperties().customResourceName();
    }

    /**
     * Get the statuses property: The resource status information.
     * 
     * @return the statuses value.
     */
    public List<ResourceStatus> statuses() {
        return this.innerProperties() == null ? null : this.innerProperties().statuses();
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property innerProperties in model GuestAgentInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(GuestAgentInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GuestAgentInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GuestAgentInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the GuestAgentInner.
     */
    public static GuestAgentInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GuestAgentInner deserializedGuestAgentInner = new GuestAgentInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedGuestAgentInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedGuestAgentInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedGuestAgentInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedGuestAgentInner.innerProperties = GuestAgentProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedGuestAgentInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGuestAgentInner;
        });
    }
}
