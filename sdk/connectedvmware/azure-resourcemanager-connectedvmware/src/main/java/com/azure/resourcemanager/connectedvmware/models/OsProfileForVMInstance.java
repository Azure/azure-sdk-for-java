// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the operating system settings for the virtual machine.
 */
@Fluent
public final class OsProfileForVMInstance implements JsonSerializable<OsProfileForVMInstance> {
    /*
     * Gets or sets computer name.
     */
    private String computerName;

    /*
     * Gets or sets administrator username.
     */
    private String adminUsername;

    /*
     * Sets administrator password.
     */
    private String adminPassword;

    /*
     * Gets or sets the guestId.
     */
    private String guestId;

    /*
     * Gets or sets the type of the os.
     */
    private OsType osType;

    /*
     * Gets or sets os sku.
     */
    private String osSku;

    /*
     * Gets or sets the current running status of VMware Tools running in the guest operating system.
     */
    private String toolsRunningStatus;

    /*
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     */
    private String toolsVersionStatus;

    /*
     * Gets or sets the current version of VMware Tools.
     */
    private String toolsVersion;

    /**
     * Creates an instance of OsProfileForVMInstance class.
     */
    public OsProfileForVMInstance() {
    }

    /**
     * Get the computerName property: Gets or sets computer name.
     * 
     * @return the computerName value.
     */
    public String computerName() {
        return this.computerName;
    }

    /**
     * Set the computerName property: Gets or sets computer name.
     * 
     * @param computerName the computerName value to set.
     * @return the OsProfileForVMInstance object itself.
     */
    public OsProfileForVMInstance withComputerName(String computerName) {
        this.computerName = computerName;
        return this;
    }

    /**
     * Get the adminUsername property: Gets or sets administrator username.
     * 
     * @return the adminUsername value.
     */
    public String adminUsername() {
        return this.adminUsername;
    }

    /**
     * Set the adminUsername property: Gets or sets administrator username.
     * 
     * @param adminUsername the adminUsername value to set.
     * @return the OsProfileForVMInstance object itself.
     */
    public OsProfileForVMInstance withAdminUsername(String adminUsername) {
        this.adminUsername = adminUsername;
        return this;
    }

    /**
     * Get the adminPassword property: Sets administrator password.
     * 
     * @return the adminPassword value.
     */
    public String adminPassword() {
        return this.adminPassword;
    }

    /**
     * Set the adminPassword property: Sets administrator password.
     * 
     * @param adminPassword the adminPassword value to set.
     * @return the OsProfileForVMInstance object itself.
     */
    public OsProfileForVMInstance withAdminPassword(String adminPassword) {
        this.adminPassword = adminPassword;
        return this;
    }

    /**
     * Get the guestId property: Gets or sets the guestId.
     * 
     * @return the guestId value.
     */
    public String guestId() {
        return this.guestId;
    }

    /**
     * Set the guestId property: Gets or sets the guestId.
     * 
     * @param guestId the guestId value to set.
     * @return the OsProfileForVMInstance object itself.
     */
    public OsProfileForVMInstance withGuestId(String guestId) {
        this.guestId = guestId;
        return this;
    }

    /**
     * Get the osType property: Gets or sets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Gets or sets the type of the os.
     * 
     * @param osType the osType value to set.
     * @return the OsProfileForVMInstance object itself.
     */
    public OsProfileForVMInstance withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osSku property: Gets or sets os sku.
     * 
     * @return the osSku value.
     */
    public String osSku() {
        return this.osSku;
    }

    /**
     * Get the toolsRunningStatus property: Gets or sets the current running status of VMware Tools running in the guest
     * operating system.
     * 
     * @return the toolsRunningStatus value.
     */
    public String toolsRunningStatus() {
        return this.toolsRunningStatus;
    }

    /**
     * Get the toolsVersionStatus property: Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     * 
     * @return the toolsVersionStatus value.
     */
    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    /**
     * Get the toolsVersion property: Gets or sets the current version of VMware Tools.
     * 
     * @return the toolsVersion value.
     */
    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("computerName", this.computerName);
        jsonWriter.writeStringField("adminUsername", this.adminUsername);
        jsonWriter.writeStringField("adminPassword", this.adminPassword);
        jsonWriter.writeStringField("guestId", this.guestId);
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OsProfileForVMInstance from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OsProfileForVMInstance if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the OsProfileForVMInstance.
     */
    public static OsProfileForVMInstance fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            OsProfileForVMInstance deserializedOsProfileForVMInstance = new OsProfileForVMInstance();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("computerName".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.computerName = reader.getString();
                } else if ("adminUsername".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.adminUsername = reader.getString();
                } else if ("adminPassword".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.adminPassword = reader.getString();
                } else if ("guestId".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.guestId = reader.getString();
                } else if ("osType".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.osType = OsType.fromString(reader.getString());
                } else if ("osSku".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.osSku = reader.getString();
                } else if ("toolsRunningStatus".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.toolsRunningStatus = reader.getString();
                } else if ("toolsVersionStatus".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.toolsVersionStatus = reader.getString();
                } else if ("toolsVersion".equals(fieldName)) {
                    deserializedOsProfileForVMInstance.toolsVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedOsProfileForVMInstance;
        });
    }
}
