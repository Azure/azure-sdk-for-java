// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The datastore inventory item.
 */
@Fluent
public final class DatastoreInventoryItem extends InventoryItemProperties {
    /*
     * They inventory type.
     */
    private InventoryType inventoryType = InventoryType.DATASTORE;

    /*
     * Gets or sets Maximum capacity of this datastore, in GBs.
     */
    private Long capacityGB;

    /*
     * Gets or sets Available space of this datastore, in GBs.
     */
    private Long freeSpaceGB;

    /**
     * Creates an instance of DatastoreInventoryItem class.
     */
    public DatastoreInventoryItem() {
    }

    /**
     * Get the inventoryType property: They inventory type.
     * 
     * @return the inventoryType value.
     */
    @Override
    public InventoryType inventoryType() {
        return this.inventoryType;
    }

    /**
     * Get the capacityGB property: Gets or sets Maximum capacity of this datastore, in GBs.
     * 
     * @return the capacityGB value.
     */
    public Long capacityGB() {
        return this.capacityGB;
    }

    /**
     * Set the capacityGB property: Gets or sets Maximum capacity of this datastore, in GBs.
     * 
     * @param capacityGB the capacityGB value to set.
     * @return the DatastoreInventoryItem object itself.
     */
    public DatastoreInventoryItem withCapacityGB(Long capacityGB) {
        this.capacityGB = capacityGB;
        return this;
    }

    /**
     * Get the freeSpaceGB property: Gets or sets Available space of this datastore, in GBs.
     * 
     * @return the freeSpaceGB value.
     */
    public Long freeSpaceGB() {
        return this.freeSpaceGB;
    }

    /**
     * Set the freeSpaceGB property: Gets or sets Available space of this datastore, in GBs.
     * 
     * @param freeSpaceGB the freeSpaceGB value to set.
     * @return the DatastoreInventoryItem object itself.
     */
    public DatastoreInventoryItem withFreeSpaceGB(Long freeSpaceGB) {
        this.freeSpaceGB = freeSpaceGB;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatastoreInventoryItem withManagedResourceId(String managedResourceId) {
        super.withManagedResourceId(managedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatastoreInventoryItem withMoRefId(String moRefId) {
        super.withMoRefId(moRefId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DatastoreInventoryItem withMoName(String moName) {
        super.withMoName(moName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedResourceId", managedResourceId());
        jsonWriter.writeStringField("moRefId", moRefId());
        jsonWriter.writeStringField("moName", moName());
        jsonWriter.writeStringField("inventoryType", this.inventoryType == null ? null : this.inventoryType.toString());
        jsonWriter.writeNumberField("capacityGB", this.capacityGB);
        jsonWriter.writeNumberField("freeSpaceGB", this.freeSpaceGB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DatastoreInventoryItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DatastoreInventoryItem if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DatastoreInventoryItem.
     */
    public static DatastoreInventoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DatastoreInventoryItem deserializedDatastoreInventoryItem = new DatastoreInventoryItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedResourceId".equals(fieldName)) {
                    deserializedDatastoreInventoryItem.withManagedResourceId(reader.getString());
                } else if ("moRefId".equals(fieldName)) {
                    deserializedDatastoreInventoryItem.withMoRefId(reader.getString());
                } else if ("moName".equals(fieldName)) {
                    deserializedDatastoreInventoryItem.withMoName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedDatastoreInventoryItem
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("inventoryType".equals(fieldName)) {
                    deserializedDatastoreInventoryItem.inventoryType = InventoryType.fromString(reader.getString());
                } else if ("capacityGB".equals(fieldName)) {
                    deserializedDatastoreInventoryItem.capacityGB = reader.getNullable(JsonReader::getLong);
                } else if ("freeSpaceGB".equals(fieldName)) {
                    deserializedDatastoreInventoryItem.freeSpaceGB = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatastoreInventoryItem;
        });
    }
}
