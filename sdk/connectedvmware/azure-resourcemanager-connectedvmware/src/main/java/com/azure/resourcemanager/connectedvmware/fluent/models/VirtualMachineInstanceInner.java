// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import com.azure.resourcemanager.connectedvmware.models.HardwareProfile;
import com.azure.resourcemanager.connectedvmware.models.InfrastructureProfile;
import com.azure.resourcemanager.connectedvmware.models.NetworkProfile;
import com.azure.resourcemanager.connectedvmware.models.OsProfileForVMInstance;
import com.azure.resourcemanager.connectedvmware.models.PlacementProfile;
import com.azure.resourcemanager.connectedvmware.models.ProvisioningState;
import com.azure.resourcemanager.connectedvmware.models.ResourceStatus;
import com.azure.resourcemanager.connectedvmware.models.SecurityProfile;
import com.azure.resourcemanager.connectedvmware.models.StorageProfile;
import java.io.IOException;
import java.util.List;

/**
 * Define the virtualMachineInstance.
 */
@Fluent
public final class VirtualMachineInstanceInner extends ProxyResource {
    /*
     * Resource properties.
     */
    private VirtualMachineInstanceProperties innerProperties = new VirtualMachineInstanceProperties();

    /*
     * Gets or sets the extended location.
     */
    private ExtendedLocation extendedLocation;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of VirtualMachineInstanceInner class.
     */
    public VirtualMachineInstanceInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private VirtualMachineInstanceProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the extendedLocation property: Gets or sets the extended location.
     * 
     * @return the extendedLocation value.
     */
    public ExtendedLocation extendedLocation() {
        return this.extendedLocation;
    }

    /**
     * Set the extendedLocation property: Gets or sets the extended location.
     * 
     * @param extendedLocation the extendedLocation value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withExtendedLocation(ExtendedLocation extendedLocation) {
        this.extendedLocation = extendedLocation;
        return this;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the placementProfile property: Placement properties.
     * 
     * @return the placementProfile value.
     */
    public PlacementProfile placementProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().placementProfile();
    }

    /**
     * Set the placementProfile property: Placement properties.
     * 
     * @param placementProfile the placementProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withPlacementProfile(PlacementProfile placementProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withPlacementProfile(placementProfile);
        return this;
    }

    /**
     * Get the osProfile property: OS properties.
     * 
     * @return the osProfile value.
     */
    public OsProfileForVMInstance osProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().osProfile();
    }

    /**
     * Set the osProfile property: OS properties.
     * 
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withOsProfile(OsProfileForVMInstance osProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withOsProfile(osProfile);
        return this;
    }

    /**
     * Get the hardwareProfile property: Hardware properties.
     * 
     * @return the hardwareProfile value.
     */
    public HardwareProfile hardwareProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().hardwareProfile();
    }

    /**
     * Set the hardwareProfile property: Hardware properties.
     * 
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withHardwareProfile(HardwareProfile hardwareProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withHardwareProfile(hardwareProfile);
        return this;
    }

    /**
     * Get the networkProfile property: Network properties.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().networkProfile();
    }

    /**
     * Set the networkProfile property: Network properties.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withNetworkProfile(NetworkProfile networkProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withNetworkProfile(networkProfile);
        return this;
    }

    /**
     * Get the storageProfile property: Storage properties.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().storageProfile();
    }

    /**
     * Set the storageProfile property: Storage properties.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withStorageProfile(StorageProfile storageProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withStorageProfile(storageProfile);
        return this;
    }

    /**
     * Get the securityProfile property: Gets the security profile.
     * 
     * @return the securityProfile value.
     */
    public SecurityProfile securityProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().securityProfile();
    }

    /**
     * Set the securityProfile property: Gets the security profile.
     * 
     * @param securityProfile the securityProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withSecurityProfile(SecurityProfile securityProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withSecurityProfile(securityProfile);
        return this;
    }

    /**
     * Get the infrastructureProfile property: Gets the infrastructure profile.
     * 
     * @return the infrastructureProfile value.
     */
    public InfrastructureProfile infrastructureProfile() {
        return this.innerProperties() == null ? null : this.innerProperties().infrastructureProfile();
    }

    /**
     * Set the infrastructureProfile property: Gets the infrastructure profile.
     * 
     * @param infrastructureProfile the infrastructureProfile value to set.
     * @return the VirtualMachineInstanceInner object itself.
     */
    public VirtualMachineInstanceInner withInfrastructureProfile(InfrastructureProfile infrastructureProfile) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VirtualMachineInstanceProperties();
        }
        this.innerProperties().withInfrastructureProfile(infrastructureProfile);
        return this;
    }

    /**
     * Get the powerState property: Gets the power state of the virtual machine.
     * 
     * @return the powerState value.
     */
    public String powerState() {
        return this.innerProperties() == null ? null : this.innerProperties().powerState();
    }

    /**
     * Get the statuses property: The resource status information.
     * 
     * @return the statuses value.
     */
    public List<ResourceStatus> statuses() {
        return this.innerProperties() == null ? null : this.innerProperties().statuses();
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the resourceUid property: Gets or sets a unique identifier for the vm resource.
     * 
     * @return the resourceUid value.
     */
    public String resourceUid() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceUid();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model VirtualMachineInstanceInner"));
        } else {
            innerProperties().validate();
        }
        if (extendedLocation() != null) {
            extendedLocation().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VirtualMachineInstanceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("extendedLocation", this.extendedLocation);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceInner.
     */
    public static VirtualMachineInstanceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceInner deserializedVirtualMachineInstanceInner = new VirtualMachineInstanceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.innerProperties
                        = VirtualMachineInstanceProperties.fromJson(reader);
                } else if ("extendedLocation".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.extendedLocation = ExtendedLocation.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedVirtualMachineInstanceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceInner;
        });
    }
}
