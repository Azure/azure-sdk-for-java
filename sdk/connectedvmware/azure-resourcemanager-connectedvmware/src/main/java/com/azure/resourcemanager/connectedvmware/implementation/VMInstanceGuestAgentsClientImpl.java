// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Put;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.connectedvmware.fluent.VMInstanceGuestAgentsClient;
import com.azure.resourcemanager.connectedvmware.fluent.models.GuestAgentInner;
import com.azure.resourcemanager.connectedvmware.models.GuestAgentList;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/** An instance of this class provides access to all the operations defined in VMInstanceGuestAgentsClient. */
public final class VMInstanceGuestAgentsClientImpl implements VMInstanceGuestAgentsClient {
    /** The proxy service used to perform REST calls. */
    private final VMInstanceGuestAgentsService service;

    /** The service client containing this operation class. */
    private final ConnectedVMwareClientImpl client;

    /**
     * Initializes an instance of VMInstanceGuestAgentsClientImpl.
     *
     * @param client the instance of the service client containing this operation class.
     */
    VMInstanceGuestAgentsClientImpl(ConnectedVMwareClientImpl client) {
        this.service =
            RestProxy
                .create(VMInstanceGuestAgentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for ConnectedVMwareClientVMInstanceGuestAgents to be used by the proxy
     * service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "ConnectedVMwareClien")
    public interface VMInstanceGuestAgentsService {
        @Headers({"Content-Type: application/json"})
        @Put(
            "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents/default")
        @ExpectedResponses({200, 201})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> create(
            @HostParam("$host") String endpoint,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") GuestAgentInner body,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get(
            "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents/default")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GuestAgentInner>> get(
            @HostParam("$host") String endpoint,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Delete(
            "/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents/default")
        @ExpectedResponses({202, 204})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> delete(
            @HostParam("$host") String endpoint,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("/{resourceUri}/providers/Microsoft.ConnectedVMwarevSphere/virtualMachineInstances/default/guestAgents")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GuestAgentList>> list(
            @HostParam("$host") String endpoint,
            @PathParam(value = "resourceUri", encoded = true) String resourceUri,
            @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept,
            Context context);

        @Headers({"Content-Type: application/json"})
        @Get("{nextLink}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<GuestAgentList>> listNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink,
            @HostParam("$host") String endpoint,
            @HeaderParam("Accept") String accept,
            Context context);
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(String resourceUri, GuestAgentInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .create(
                            this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> createWithResponseAsync(
        String resourceUri, GuestAgentInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        if (body != null) {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .create(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GuestAgentInner>, GuestAgentInner> beginCreateAsync(
        String resourceUri, GuestAgentInner body) {
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceUri, body);
        return this
            .client
            .<GuestAgentInner, GuestAgentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GuestAgentInner.class,
                GuestAgentInner.class,
                this.client.getContext());
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GuestAgentInner>, GuestAgentInner> beginCreateAsync(String resourceUri) {
        final GuestAgentInner body = null;
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceUri, body);
        return this
            .client
            .<GuestAgentInner, GuestAgentInner>getLroResult(
                mono,
                this.client.getHttpPipeline(),
                GuestAgentInner.class,
                GuestAgentInner.class,
                this.client.getContext());
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<GuestAgentInner>, GuestAgentInner> beginCreateAsync(
        String resourceUri, GuestAgentInner body, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = createWithResponseAsync(resourceUri, body, context);
        return this
            .client
            .<GuestAgentInner, GuestAgentInner>getLroResult(
                mono, this.client.getHttpPipeline(), GuestAgentInner.class, GuestAgentInner.class, context);
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GuestAgentInner>, GuestAgentInner> beginCreate(String resourceUri) {
        final GuestAgentInner body = null;
        return this.beginCreateAsync(resourceUri, body).getSyncPoller();
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<GuestAgentInner>, GuestAgentInner> beginCreate(
        String resourceUri, GuestAgentInner body, Context context) {
        return this.beginCreateAsync(resourceUri, body, context).getSyncPoller();
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GuestAgentInner> createAsync(String resourceUri, GuestAgentInner body) {
        return beginCreateAsync(resourceUri, body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GuestAgentInner> createAsync(String resourceUri) {
        final GuestAgentInner body = null;
        return beginCreateAsync(resourceUri, body).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GuestAgentInner> createAsync(String resourceUri, GuestAgentInner body, Context context) {
        return beginCreateAsync(resourceUri, body, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GuestAgentInner create(String resourceUri) {
        final GuestAgentInner body = null;
        return createAsync(resourceUri, body).block();
    }

    /**
     * Implements GuestAgent PUT method.
     *
     * <p>Create Or Update GuestAgent.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param body Request payload.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GuestAgentInner create(String resourceUri, GuestAgentInner body, Context context) {
        return createAsync(resourceUri, body, context).block();
    }

    /**
     * Gets GuestAgent.
     *
     * <p>Implements GuestAgent GET method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GuestAgentInner>> getWithResponseAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.get(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets GuestAgent.
     *
     * <p>Implements GuestAgent GET method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<GuestAgentInner>> getWithResponseAsync(String resourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets GuestAgent.
     *
     * <p>Implements GuestAgent GET method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<GuestAgentInner> getAsync(String resourceUri) {
        return getWithResponseAsync(resourceUri).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets GuestAgent.
     *
     * <p>Implements GuestAgent GET method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<GuestAgentInner> getWithResponse(String resourceUri, Context context) {
        return getWithResponseAsync(resourceUri, context).block();
    }

    /**
     * Gets GuestAgent.
     *
     * <p>Implements GuestAgent GET method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return defines the GuestAgent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public GuestAgentInner get(String resourceUri) {
        return getWithResponse(resourceUri, Context.NONE).getValue();
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service
                        .delete(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> deleteWithResponseAsync(String resourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), accept, context);
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri) {
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri);
        return this
            .client
            .<Void, Void>getLroResult(
                mono, this.client.getHttpPipeline(), Void.class, Void.class, this.client.getContext());
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginDeleteAsync(String resourceUri, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono = deleteWithResponseAsync(resourceUri, context);
        return this
            .client
            .<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class, context);
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri) {
        return this.beginDeleteAsync(resourceUri).getSyncPoller();
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginDelete(String resourceUri, Context context) {
        return this.beginDeleteAsync(resourceUri, context).getSyncPoller();
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri) {
        return beginDeleteAsync(resourceUri).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String resourceUri, Context context) {
        return beginDeleteAsync(resourceUri, context).last().flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri) {
        deleteAsync(resourceUri).block();
    }

    /**
     * Deletes an GuestAgent.
     *
     * <p>Implements GuestAgent DELETE method.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String resourceUri, Context context) {
        deleteAsync(resourceUri, context).block();
    }

    /**
     * Implements GET GuestAgent in a vm.
     *
     * <p>Returns the list of GuestAgent of the given vm.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GuestAgentInner>> listSinglePageAsync(String resourceUri) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context ->
                    service.list(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), accept, context))
            .<PagedResponse<GuestAgentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Implements GET GuestAgent in a vm.
     *
     * <p>Returns the list of GuestAgent of the given vm.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GuestAgentInner>> listSinglePageAsync(String resourceUri, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (resourceUri == null) {
            return Mono.error(new IllegalArgumentException("Parameter resourceUri is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .list(this.client.getEndpoint(), resourceUri, this.client.getApiVersion(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }

    /**
     * Implements GET GuestAgent in a vm.
     *
     * <p>Returns the list of GuestAgent of the given vm.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GuestAgentInner> listAsync(String resourceUri) {
        return new PagedFlux<>(() -> listSinglePageAsync(resourceUri), nextLink -> listNextSinglePageAsync(nextLink));
    }

    /**
     * Implements GET GuestAgent in a vm.
     *
     * <p>Returns the list of GuestAgent of the given vm.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<GuestAgentInner> listAsync(String resourceUri, Context context) {
        return new PagedFlux<>(
            () -> listSinglePageAsync(resourceUri, context), nextLink -> listNextSinglePageAsync(nextLink, context));
    }

    /**
     * Implements GET GuestAgent in a vm.
     *
     * <p>Returns the list of GuestAgent of the given vm.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GuestAgentInner> list(String resourceUri) {
        return new PagedIterable<>(listAsync(resourceUri));
    }

    /**
     * Implements GET GuestAgent in a vm.
     *
     * <p>Returns the list of GuestAgent of the given vm.
     *
     * @param resourceUri The fully qualified Azure Resource manager identifier of the Hybrid Compute machine resource
     *     to be extended.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<GuestAgentInner> list(String resourceUri, Context context) {
        return new PagedIterable<>(listAsync(resourceUri, context));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GuestAgentInner>> listNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<GuestAgentInner>>map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     *
     * @param nextLink The URL to get the next list of items
     *     <p>The nextLink parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of GuestAgent along with {@link PagedResponse} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<GuestAgentInner>> listNextSinglePageAsync(String nextLink, Context context) {
        if (nextLink == null) {
            return Mono.error(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            return Mono
                .error(
                    new IllegalArgumentException(
                        "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(
                res ->
                    new PagedResponseBase<>(
                        res.getRequest(),
                        res.getStatusCode(),
                        res.getHeaders(),
                        res.getValue().value(),
                        res.getValue().nextLink(),
                        null));
    }
}
