// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.connectedvmware.fluent.InventoryItemsClient;
import com.azure.resourcemanager.connectedvmware.fluent.models.InventoryItemInner;
import com.azure.resourcemanager.connectedvmware.models.InventoryItem;
import com.azure.resourcemanager.connectedvmware.models.InventoryItems;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class InventoryItemsImpl implements InventoryItems {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InventoryItemsImpl.class);

    private final InventoryItemsClient innerClient;

    private final com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager serviceManager;

    public InventoryItemsImpl(
        InventoryItemsClient innerClient,
        com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public InventoryItem get(String resourceGroupName, String vcenterName, String inventoryItemName) {
        InventoryItemInner inner = this.serviceClient().get(resourceGroupName, vcenterName, inventoryItemName);
        if (inner != null) {
            return new InventoryItemImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<InventoryItem> getWithResponse(
        String resourceGroupName, String vcenterName, String inventoryItemName, Context context) {
        Response<InventoryItemInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, vcenterName, inventoryItemName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InventoryItemImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String vcenterName, String inventoryItemName) {
        this.serviceClient().delete(resourceGroupName, vcenterName, inventoryItemName);
    }

    public Response<Void> deleteWithResponse(
        String resourceGroupName, String vcenterName, String inventoryItemName, Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, vcenterName, inventoryItemName, context);
    }

    public PagedIterable<InventoryItem> listByVCenter(String resourceGroupName, String vcenterName) {
        PagedIterable<InventoryItemInner> inner = this.serviceClient().listByVCenter(resourceGroupName, vcenterName);
        return Utils.mapPage(inner, inner1 -> new InventoryItemImpl(inner1, this.manager()));
    }

    public PagedIterable<InventoryItem> listByVCenter(String resourceGroupName, String vcenterName, Context context) {
        PagedIterable<InventoryItemInner> inner =
            this.serviceClient().listByVCenter(resourceGroupName, vcenterName, context);
        return Utils.mapPage(inner, inner1 -> new InventoryItemImpl(inner1, this.manager()));
    }

    public InventoryItem getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vcenterName = Utils.getValueFromIdByName(id, "vcenters");
        if (vcenterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'vcenters'.", id)));
        }
        String inventoryItemName = Utils.getValueFromIdByName(id, "inventoryItems");
        if (inventoryItemName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inventoryItems'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vcenterName, inventoryItemName, Context.NONE).getValue();
    }

    public Response<InventoryItem> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vcenterName = Utils.getValueFromIdByName(id, "vcenters");
        if (vcenterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'vcenters'.", id)));
        }
        String inventoryItemName = Utils.getValueFromIdByName(id, "inventoryItems");
        if (inventoryItemName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inventoryItems'.", id)));
        }
        return this.getWithResponse(resourceGroupName, vcenterName, inventoryItemName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vcenterName = Utils.getValueFromIdByName(id, "vcenters");
        if (vcenterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'vcenters'.", id)));
        }
        String inventoryItemName = Utils.getValueFromIdByName(id, "inventoryItems");
        if (inventoryItemName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inventoryItems'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, vcenterName, inventoryItemName, Context.NONE).getValue();
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String vcenterName = Utils.getValueFromIdByName(id, "vcenters");
        if (vcenterName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'vcenters'.", id)));
        }
        String inventoryItemName = Utils.getValueFromIdByName(id, "inventoryItems");
        if (inventoryItemName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inventoryItems'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, vcenterName, inventoryItemName, context);
    }

    private InventoryItemsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager manager() {
        return this.serviceManager;
    }

    public InventoryItemImpl define(String name) {
        return new InventoryItemImpl(name, this.manager());
    }
}
