// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.connectedvmware.models.ProvisioningState;
import java.io.IOException;

/**
 * Defines the HybridIdentityMetadata.
 */
@Fluent
public final class VmInstanceHybridIdentityMetadataInner extends ProxyResource {
    /*
     * Resource properties.
     */
    private VmInstanceHybridIdentityMetadataProperties innerProperties
        = new VmInstanceHybridIdentityMetadataProperties();

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of VmInstanceHybridIdentityMetadataInner class.
     */
    public VmInstanceHybridIdentityMetadataInner() {
    }

    /**
     * Get the innerProperties property: Resource properties.
     * 
     * @return the innerProperties value.
     */
    private VmInstanceHybridIdentityMetadataProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the resourceUid property: The unique identifier for the resource.
     * 
     * @return the resourceUid value.
     */
    public String resourceUid() {
        return this.innerProperties() == null ? null : this.innerProperties().resourceUid();
    }

    /**
     * Set the resourceUid property: The unique identifier for the resource.
     * 
     * @param resourceUid the resourceUid value to set.
     * @return the VmInstanceHybridIdentityMetadataInner object itself.
     */
    public VmInstanceHybridIdentityMetadataInner withResourceUid(String resourceUid) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VmInstanceHybridIdentityMetadataProperties();
        }
        this.innerProperties().withResourceUid(resourceUid);
        return this;
    }

    /**
     * Get the publicKey property: Gets or sets the Public Key.
     * 
     * @return the publicKey value.
     */
    public String publicKey() {
        return this.innerProperties() == null ? null : this.innerProperties().publicKey();
    }

    /**
     * Set the publicKey property: Gets or sets the Public Key.
     * 
     * @param publicKey the publicKey value to set.
     * @return the VmInstanceHybridIdentityMetadataInner object itself.
     */
    public VmInstanceHybridIdentityMetadataInner withPublicKey(String publicKey) {
        if (this.innerProperties() == null) {
            this.innerProperties = new VmInstanceHybridIdentityMetadataProperties();
        }
        this.innerProperties().withPublicKey(publicKey);
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model VmInstanceHybridIdentityMetadataInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(VmInstanceHybridIdentityMetadataInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmInstanceHybridIdentityMetadataInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmInstanceHybridIdentityMetadataInner if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VmInstanceHybridIdentityMetadataInner.
     */
    public static VmInstanceHybridIdentityMetadataInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmInstanceHybridIdentityMetadataInner deserializedVmInstanceHybridIdentityMetadataInner
                = new VmInstanceHybridIdentityMetadataInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedVmInstanceHybridIdentityMetadataInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedVmInstanceHybridIdentityMetadataInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedVmInstanceHybridIdentityMetadataInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedVmInstanceHybridIdentityMetadataInner.innerProperties
                        = VmInstanceHybridIdentityMetadataProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedVmInstanceHybridIdentityMetadataInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmInstanceHybridIdentityMetadataInner;
        });
    }
}
