// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The VM inventory item.
 */
@Fluent
public final class VirtualMachineInventoryItem extends InventoryItemProperties {
    /*
     * They inventory type.
     */
    private InventoryType inventoryType = InventoryType.VIRTUAL_MACHINE;

    /*
     * Gets or sets the type of the os.
     */
    private OsType osType;

    /*
     * Gets or sets os name.
     */
    private String osName;

    /*
     * Gets or sets the nic ip addresses.
     */
    private List<String> ipAddresses;

    /*
     * Gets or sets the folder path of the vm.
     */
    private String folderPath;

    /*
     * Host inventory resource details.
     */
    private InventoryItemDetails host;

    /*
     * ResourcePool inventory resource details.
     */
    private InventoryItemDetails resourcePool;

    /*
     * Cluster inventory resource details.
     */
    private InventoryItemDetails cluster;

    /*
     * Gets or sets the instance uuid of the vm.
     */
    private String instanceUuid;

    /*
     * Gets or sets the SMBIOS UUID of the vm.
     */
    private String smbiosUuid;

    /*
     * Gets the power state of the virtual machine.
     */
    private String powerState;

    /*
     * Gets or sets the current running status of VMware Tools running in the guest operating system.
     */
    private String toolsRunningStatus;

    /*
     * Gets or sets the current version status of VMware Tools installed in the guest operating system.
     */
    private String toolsVersionStatus;

    /*
     * Gets or sets the current version of VMware Tools.
     */
    private String toolsVersion;

    /**
     * Creates an instance of VirtualMachineInventoryItem class.
     */
    public VirtualMachineInventoryItem() {
    }

    /**
     * Get the inventoryType property: They inventory type.
     * 
     * @return the inventoryType value.
     */
    @Override
    public InventoryType inventoryType() {
        return this.inventoryType;
    }

    /**
     * Get the osType property: Gets or sets the type of the os.
     * 
     * @return the osType value.
     */
    public OsType osType() {
        return this.osType;
    }

    /**
     * Set the osType property: Gets or sets the type of the os.
     * 
     * @param osType the osType value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withOsType(OsType osType) {
        this.osType = osType;
        return this;
    }

    /**
     * Get the osName property: Gets or sets os name.
     * 
     * @return the osName value.
     */
    public String osName() {
        return this.osName;
    }

    /**
     * Set the osName property: Gets or sets os name.
     * 
     * @param osName the osName value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withOsName(String osName) {
        this.osName = osName;
        return this;
    }

    /**
     * Get the ipAddresses property: Gets or sets the nic ip addresses.
     * 
     * @return the ipAddresses value.
     */
    public List<String> ipAddresses() {
        return this.ipAddresses;
    }

    /**
     * Set the ipAddresses property: Gets or sets the nic ip addresses.
     * 
     * @param ipAddresses the ipAddresses value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withIpAddresses(List<String> ipAddresses) {
        this.ipAddresses = ipAddresses;
        return this;
    }

    /**
     * Get the folderPath property: Gets or sets the folder path of the vm.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Set the folderPath property: Gets or sets the folder path of the vm.
     * 
     * @param folderPath the folderPath value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withFolderPath(String folderPath) {
        this.folderPath = folderPath;
        return this;
    }

    /**
     * Get the host property: Host inventory resource details.
     * 
     * @return the host value.
     */
    public InventoryItemDetails host() {
        return this.host;
    }

    /**
     * Set the host property: Host inventory resource details.
     * 
     * @param host the host value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withHost(InventoryItemDetails host) {
        this.host = host;
        return this;
    }

    /**
     * Get the resourcePool property: ResourcePool inventory resource details.
     * 
     * @return the resourcePool value.
     */
    public InventoryItemDetails resourcePool() {
        return this.resourcePool;
    }

    /**
     * Set the resourcePool property: ResourcePool inventory resource details.
     * 
     * @param resourcePool the resourcePool value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withResourcePool(InventoryItemDetails resourcePool) {
        this.resourcePool = resourcePool;
        return this;
    }

    /**
     * Get the cluster property: Cluster inventory resource details.
     * 
     * @return the cluster value.
     */
    public InventoryItemDetails cluster() {
        return this.cluster;
    }

    /**
     * Set the cluster property: Cluster inventory resource details.
     * 
     * @param cluster the cluster value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withCluster(InventoryItemDetails cluster) {
        this.cluster = cluster;
        return this;
    }

    /**
     * Get the instanceUuid property: Gets or sets the instance uuid of the vm.
     * 
     * @return the instanceUuid value.
     */
    public String instanceUuid() {
        return this.instanceUuid;
    }

    /**
     * Set the instanceUuid property: Gets or sets the instance uuid of the vm.
     * 
     * @param instanceUuid the instanceUuid value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withInstanceUuid(String instanceUuid) {
        this.instanceUuid = instanceUuid;
        return this;
    }

    /**
     * Get the smbiosUuid property: Gets or sets the SMBIOS UUID of the vm.
     * 
     * @return the smbiosUuid value.
     */
    public String smbiosUuid() {
        return this.smbiosUuid;
    }

    /**
     * Set the smbiosUuid property: Gets or sets the SMBIOS UUID of the vm.
     * 
     * @param smbiosUuid the smbiosUuid value to set.
     * @return the VirtualMachineInventoryItem object itself.
     */
    public VirtualMachineInventoryItem withSmbiosUuid(String smbiosUuid) {
        this.smbiosUuid = smbiosUuid;
        return this;
    }

    /**
     * Get the powerState property: Gets the power state of the virtual machine.
     * 
     * @return the powerState value.
     */
    public String powerState() {
        return this.powerState;
    }

    /**
     * Get the toolsRunningStatus property: Gets or sets the current running status of VMware Tools running in the guest
     * operating system.
     * 
     * @return the toolsRunningStatus value.
     */
    public String toolsRunningStatus() {
        return this.toolsRunningStatus;
    }

    /**
     * Get the toolsVersionStatus property: Gets or sets the current version status of VMware Tools installed in the
     * guest operating system.
     * 
     * @return the toolsVersionStatus value.
     */
    public String toolsVersionStatus() {
        return this.toolsVersionStatus;
    }

    /**
     * Get the toolsVersion property: Gets or sets the current version of VMware Tools.
     * 
     * @return the toolsVersion value.
     */
    public String toolsVersion() {
        return this.toolsVersion;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineInventoryItem withManagedResourceId(String managedResourceId) {
        super.withManagedResourceId(managedResourceId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineInventoryItem withMoRefId(String moRefId) {
        super.withMoRefId(moRefId);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public VirtualMachineInventoryItem withMoName(String moName) {
        super.withMoName(moName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (host() != null) {
            host().validate();
        }
        if (resourcePool() != null) {
            resourcePool().validate();
        }
        if (cluster() != null) {
            cluster().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("managedResourceId", managedResourceId());
        jsonWriter.writeStringField("moRefId", moRefId());
        jsonWriter.writeStringField("moName", moName());
        jsonWriter.writeStringField("inventoryType", this.inventoryType == null ? null : this.inventoryType.toString());
        jsonWriter.writeStringField("osType", this.osType == null ? null : this.osType.toString());
        jsonWriter.writeStringField("osName", this.osName);
        jsonWriter.writeArrayField("ipAddresses", this.ipAddresses, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("folderPath", this.folderPath);
        jsonWriter.writeJsonField("host", this.host);
        jsonWriter.writeJsonField("resourcePool", this.resourcePool);
        jsonWriter.writeJsonField("cluster", this.cluster);
        jsonWriter.writeStringField("instanceUuid", this.instanceUuid);
        jsonWriter.writeStringField("smbiosUuid", this.smbiosUuid);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInventoryItem from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInventoryItem if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInventoryItem.
     */
    public static VirtualMachineInventoryItem fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInventoryItem deserializedVirtualMachineInventoryItem = new VirtualMachineInventoryItem();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("managedResourceId".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.withManagedResourceId(reader.getString());
                } else if ("moRefId".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.withMoRefId(reader.getString());
                } else if ("moName".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.withMoName(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem
                        .withProvisioningState(ProvisioningState.fromString(reader.getString()));
                } else if ("inventoryType".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.inventoryType
                        = InventoryType.fromString(reader.getString());
                } else if ("osType".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.osType = OsType.fromString(reader.getString());
                } else if ("osName".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.osName = reader.getString();
                } else if ("ipAddresses".equals(fieldName)) {
                    List<String> ipAddresses = reader.readArray(reader1 -> reader1.getString());
                    deserializedVirtualMachineInventoryItem.ipAddresses = ipAddresses;
                } else if ("folderPath".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.folderPath = reader.getString();
                } else if ("host".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.host = InventoryItemDetails.fromJson(reader);
                } else if ("resourcePool".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.resourcePool = InventoryItemDetails.fromJson(reader);
                } else if ("cluster".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.cluster = InventoryItemDetails.fromJson(reader);
                } else if ("instanceUuid".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.instanceUuid = reader.getString();
                } else if ("smbiosUuid".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.smbiosUuid = reader.getString();
                } else if ("powerState".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.powerState = reader.getString();
                } else if ("toolsRunningStatus".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.toolsRunningStatus = reader.getString();
                } else if ("toolsVersionStatus".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.toolsVersionStatus = reader.getString();
                } else if ("toolsVersion".equals(fieldName)) {
                    deserializedVirtualMachineInventoryItem.toolsVersion = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInventoryItem;
        });
    }
}
