// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the vCenter infrastructure specific settings for the virtual machine.
 */
@Fluent
public final class InfrastructureProfile implements JsonSerializable<InfrastructureProfile> {
    /*
     * Gets or sets the ARM Id of the template resource to deploy the virtual machine.
     */
    private String templateId;

    /*
     * Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
     */
    private String vCenterId;

    /*
     * Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
     */
    private String moRefId;

    /*
     * Gets or sets the inventory Item ID for the virtual machine.
     */
    private String inventoryItemId;

    /*
     * Gets or sets the vCenter Managed Object name for the virtual machine.
     */
    private String moName;

    /*
     * Gets or sets the folder path of the vm.
     */
    private String folderPath;

    /*
     * Gets or sets the instance uuid of the vm.
     */
    private String instanceUuid;

    /*
     * Gets or sets the SMBIOS UUID of the vm.
     */
    private String smbiosUuid;

    /*
     * Firmware type
     */
    private FirmwareType firmwareType;

    /*
     * Gets the name of the corresponding resource in Kubernetes.
     */
    private String customResourceName;

    /**
     * Creates an instance of InfrastructureProfile class.
     */
    public InfrastructureProfile() {
    }

    /**
     * Get the templateId property: Gets or sets the ARM Id of the template resource to deploy the virtual machine.
     * 
     * @return the templateId value.
     */
    public String templateId() {
        return this.templateId;
    }

    /**
     * Set the templateId property: Gets or sets the ARM Id of the template resource to deploy the virtual machine.
     * 
     * @param templateId the templateId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withTemplateId(String templateId) {
        this.templateId = templateId;
        return this;
    }

    /**
     * Get the vCenterId property: Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
     * 
     * @return the vCenterId value.
     */
    public String vCenterId() {
        return this.vCenterId;
    }

    /**
     * Set the vCenterId property: Gets or sets the ARM Id of the vCenter resource in which this resource pool resides.
     * 
     * @param vCenterId the vCenterId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withVCenterId(String vCenterId) {
        this.vCenterId = vCenterId;
        return this;
    }

    /**
     * Get the moRefId property: Gets or sets the vCenter MoRef (Managed Object Reference) ID for the virtual machine.
     * 
     * @return the moRefId value.
     */
    public String moRefId() {
        return this.moRefId;
    }

    /**
     * Get the inventoryItemId property: Gets or sets the inventory Item ID for the virtual machine.
     * 
     * @return the inventoryItemId value.
     */
    public String inventoryItemId() {
        return this.inventoryItemId;
    }

    /**
     * Set the inventoryItemId property: Gets or sets the inventory Item ID for the virtual machine.
     * 
     * @param inventoryItemId the inventoryItemId value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
        return this;
    }

    /**
     * Get the moName property: Gets or sets the vCenter Managed Object name for the virtual machine.
     * 
     * @return the moName value.
     */
    public String moName() {
        return this.moName;
    }

    /**
     * Get the folderPath property: Gets or sets the folder path of the vm.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Get the instanceUuid property: Gets or sets the instance uuid of the vm.
     * 
     * @return the instanceUuid value.
     */
    public String instanceUuid() {
        return this.instanceUuid;
    }

    /**
     * Get the smbiosUuid property: Gets or sets the SMBIOS UUID of the vm.
     * 
     * @return the smbiosUuid value.
     */
    public String smbiosUuid() {
        return this.smbiosUuid;
    }

    /**
     * Set the smbiosUuid property: Gets or sets the SMBIOS UUID of the vm.
     * 
     * @param smbiosUuid the smbiosUuid value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withSmbiosUuid(String smbiosUuid) {
        this.smbiosUuid = smbiosUuid;
        return this;
    }

    /**
     * Get the firmwareType property: Firmware type.
     * 
     * @return the firmwareType value.
     */
    public FirmwareType firmwareType() {
        return this.firmwareType;
    }

    /**
     * Set the firmwareType property: Firmware type.
     * 
     * @param firmwareType the firmwareType value to set.
     * @return the InfrastructureProfile object itself.
     */
    public InfrastructureProfile withFirmwareType(FirmwareType firmwareType) {
        this.firmwareType = firmwareType;
        return this;
    }

    /**
     * Get the customResourceName property: Gets the name of the corresponding resource in Kubernetes.
     * 
     * @return the customResourceName value.
     */
    public String customResourceName() {
        return this.customResourceName;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("templateId", this.templateId);
        jsonWriter.writeStringField("vCenterId", this.vCenterId);
        jsonWriter.writeStringField("inventoryItemId", this.inventoryItemId);
        jsonWriter.writeStringField("smbiosUuid", this.smbiosUuid);
        jsonWriter.writeStringField("firmwareType", this.firmwareType == null ? null : this.firmwareType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InfrastructureProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InfrastructureProfile if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InfrastructureProfile.
     */
    public static InfrastructureProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InfrastructureProfile deserializedInfrastructureProfile = new InfrastructureProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("templateId".equals(fieldName)) {
                    deserializedInfrastructureProfile.templateId = reader.getString();
                } else if ("vCenterId".equals(fieldName)) {
                    deserializedInfrastructureProfile.vCenterId = reader.getString();
                } else if ("moRefId".equals(fieldName)) {
                    deserializedInfrastructureProfile.moRefId = reader.getString();
                } else if ("inventoryItemId".equals(fieldName)) {
                    deserializedInfrastructureProfile.inventoryItemId = reader.getString();
                } else if ("moName".equals(fieldName)) {
                    deserializedInfrastructureProfile.moName = reader.getString();
                } else if ("folderPath".equals(fieldName)) {
                    deserializedInfrastructureProfile.folderPath = reader.getString();
                } else if ("instanceUuid".equals(fieldName)) {
                    deserializedInfrastructureProfile.instanceUuid = reader.getString();
                } else if ("smbiosUuid".equals(fieldName)) {
                    deserializedInfrastructureProfile.smbiosUuid = reader.getString();
                } else if ("firmwareType".equals(fieldName)) {
                    deserializedInfrastructureProfile.firmwareType = FirmwareType.fromString(reader.getString());
                } else if ("customResourceName".equals(fieldName)) {
                    deserializedInfrastructureProfile.customResourceName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInfrastructureProfile;
        });
    }
}
