// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.connectedvmware.models.HardwareProfile;
import com.azure.resourcemanager.connectedvmware.models.InfrastructureProfile;
import com.azure.resourcemanager.connectedvmware.models.NetworkProfile;
import com.azure.resourcemanager.connectedvmware.models.OsProfileForVMInstance;
import com.azure.resourcemanager.connectedvmware.models.PlacementProfile;
import com.azure.resourcemanager.connectedvmware.models.ProvisioningState;
import com.azure.resourcemanager.connectedvmware.models.ResourceStatus;
import com.azure.resourcemanager.connectedvmware.models.SecurityProfile;
import com.azure.resourcemanager.connectedvmware.models.StorageProfile;
import java.io.IOException;
import java.util.List;

/**
 * Describes the properties of a Virtual Machine Instance.
 */
@Fluent
public final class VirtualMachineInstanceProperties implements JsonSerializable<VirtualMachineInstanceProperties> {
    /*
     * Placement properties.
     */
    private PlacementProfile placementProfile;

    /*
     * OS properties.
     */
    private OsProfileForVMInstance osProfile;

    /*
     * Hardware properties.
     */
    private HardwareProfile hardwareProfile;

    /*
     * Network properties.
     */
    private NetworkProfile networkProfile;

    /*
     * Storage properties.
     */
    private StorageProfile storageProfile;

    /*
     * Gets the security profile.
     */
    private SecurityProfile securityProfile;

    /*
     * Gets the infrastructure profile.
     */
    private InfrastructureProfile infrastructureProfile;

    /*
     * Gets the power state of the virtual machine.
     */
    private String powerState;

    /*
     * The resource status information.
     */
    private List<ResourceStatus> statuses;

    /*
     * Gets the provisioning state.
     */
    private ProvisioningState provisioningState;

    /*
     * Gets or sets a unique identifier for the vm resource.
     */
    private String resourceUid;

    /**
     * Creates an instance of VirtualMachineInstanceProperties class.
     */
    public VirtualMachineInstanceProperties() {
    }

    /**
     * Get the placementProfile property: Placement properties.
     * 
     * @return the placementProfile value.
     */
    public PlacementProfile placementProfile() {
        return this.placementProfile;
    }

    /**
     * Set the placementProfile property: Placement properties.
     * 
     * @param placementProfile the placementProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withPlacementProfile(PlacementProfile placementProfile) {
        this.placementProfile = placementProfile;
        return this;
    }

    /**
     * Get the osProfile property: OS properties.
     * 
     * @return the osProfile value.
     */
    public OsProfileForVMInstance osProfile() {
        return this.osProfile;
    }

    /**
     * Set the osProfile property: OS properties.
     * 
     * @param osProfile the osProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withOsProfile(OsProfileForVMInstance osProfile) {
        this.osProfile = osProfile;
        return this;
    }

    /**
     * Get the hardwareProfile property: Hardware properties.
     * 
     * @return the hardwareProfile value.
     */
    public HardwareProfile hardwareProfile() {
        return this.hardwareProfile;
    }

    /**
     * Set the hardwareProfile property: Hardware properties.
     * 
     * @param hardwareProfile the hardwareProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withHardwareProfile(HardwareProfile hardwareProfile) {
        this.hardwareProfile = hardwareProfile;
        return this;
    }

    /**
     * Get the networkProfile property: Network properties.
     * 
     * @return the networkProfile value.
     */
    public NetworkProfile networkProfile() {
        return this.networkProfile;
    }

    /**
     * Set the networkProfile property: Network properties.
     * 
     * @param networkProfile the networkProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withNetworkProfile(NetworkProfile networkProfile) {
        this.networkProfile = networkProfile;
        return this;
    }

    /**
     * Get the storageProfile property: Storage properties.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: Storage properties.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withStorageProfile(StorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the securityProfile property: Gets the security profile.
     * 
     * @return the securityProfile value.
     */
    public SecurityProfile securityProfile() {
        return this.securityProfile;
    }

    /**
     * Set the securityProfile property: Gets the security profile.
     * 
     * @param securityProfile the securityProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withSecurityProfile(SecurityProfile securityProfile) {
        this.securityProfile = securityProfile;
        return this;
    }

    /**
     * Get the infrastructureProfile property: Gets the infrastructure profile.
     * 
     * @return the infrastructureProfile value.
     */
    public InfrastructureProfile infrastructureProfile() {
        return this.infrastructureProfile;
    }

    /**
     * Set the infrastructureProfile property: Gets the infrastructure profile.
     * 
     * @param infrastructureProfile the infrastructureProfile value to set.
     * @return the VirtualMachineInstanceProperties object itself.
     */
    public VirtualMachineInstanceProperties withInfrastructureProfile(InfrastructureProfile infrastructureProfile) {
        this.infrastructureProfile = infrastructureProfile;
        return this;
    }

    /**
     * Get the powerState property: Gets the power state of the virtual machine.
     * 
     * @return the powerState value.
     */
    public String powerState() {
        return this.powerState;
    }

    /**
     * Get the statuses property: The resource status information.
     * 
     * @return the statuses value.
     */
    public List<ResourceStatus> statuses() {
        return this.statuses;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the resourceUid property: Gets or sets a unique identifier for the vm resource.
     * 
     * @return the resourceUid value.
     */
    public String resourceUid() {
        return this.resourceUid;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (placementProfile() != null) {
            placementProfile().validate();
        }
        if (osProfile() != null) {
            osProfile().validate();
        }
        if (hardwareProfile() != null) {
            hardwareProfile().validate();
        }
        if (networkProfile() != null) {
            networkProfile().validate();
        }
        if (storageProfile() != null) {
            storageProfile().validate();
        }
        if (securityProfile() != null) {
            securityProfile().validate();
        }
        if (infrastructureProfile() != null) {
            infrastructureProfile().validate();
        }
        if (statuses() != null) {
            statuses().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("placementProfile", this.placementProfile);
        jsonWriter.writeJsonField("osProfile", this.osProfile);
        jsonWriter.writeJsonField("hardwareProfile", this.hardwareProfile);
        jsonWriter.writeJsonField("networkProfile", this.networkProfile);
        jsonWriter.writeJsonField("storageProfile", this.storageProfile);
        jsonWriter.writeJsonField("securityProfile", this.securityProfile);
        jsonWriter.writeJsonField("infrastructureProfile", this.infrastructureProfile);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineInstanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineInstanceProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineInstanceProperties.
     */
    public static VirtualMachineInstanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineInstanceProperties deserializedVirtualMachineInstanceProperties
                = new VirtualMachineInstanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("placementProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.placementProfile = PlacementProfile.fromJson(reader);
                } else if ("osProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.osProfile = OsProfileForVMInstance.fromJson(reader);
                } else if ("hardwareProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.hardwareProfile = HardwareProfile.fromJson(reader);
                } else if ("networkProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.networkProfile = NetworkProfile.fromJson(reader);
                } else if ("storageProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.storageProfile = StorageProfile.fromJson(reader);
                } else if ("securityProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.securityProfile = SecurityProfile.fromJson(reader);
                } else if ("infrastructureProfile".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.infrastructureProfile
                        = InfrastructureProfile.fromJson(reader);
                } else if ("powerState".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.powerState = reader.getString();
                } else if ("statuses".equals(fieldName)) {
                    List<ResourceStatus> statuses = reader.readArray(reader1 -> ResourceStatus.fromJson(reader1));
                    deserializedVirtualMachineInstanceProperties.statuses = statuses;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else if ("resourceUid".equals(fieldName)) {
                    deserializedVirtualMachineInstanceProperties.resourceUid = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineInstanceProperties;
        });
    }
}
