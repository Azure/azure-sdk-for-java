// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Specifies the compute and storage placement settings for the virtual machine.
 */
@Fluent
public final class PlacementProfile implements JsonSerializable<PlacementProfile> {
    /*
     * Gets or sets the ARM Id of the resourcePool resource on which this virtual machine will deploy.
     */
    private String resourcePoolId;

    /*
     * Gets or sets the ARM Id of the cluster resource on which this virtual machine will deploy.
     */
    private String clusterId;

    /*
     * Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
     */
    private String hostId;

    /*
     * Gets or sets the ARM Id of the datastore resource on which the data for the virtual machine will be kept.
     */
    private String datastoreId;

    /**
     * Creates an instance of PlacementProfile class.
     */
    public PlacementProfile() {
    }

    /**
     * Get the resourcePoolId property: Gets or sets the ARM Id of the resourcePool resource on which this virtual
     * machine will deploy.
     * 
     * @return the resourcePoolId value.
     */
    public String resourcePoolId() {
        return this.resourcePoolId;
    }

    /**
     * Set the resourcePoolId property: Gets or sets the ARM Id of the resourcePool resource on which this virtual
     * machine will deploy.
     * 
     * @param resourcePoolId the resourcePoolId value to set.
     * @return the PlacementProfile object itself.
     */
    public PlacementProfile withResourcePoolId(String resourcePoolId) {
        this.resourcePoolId = resourcePoolId;
        return this;
    }

    /**
     * Get the clusterId property: Gets or sets the ARM Id of the cluster resource on which this virtual machine will
     * deploy.
     * 
     * @return the clusterId value.
     */
    public String clusterId() {
        return this.clusterId;
    }

    /**
     * Set the clusterId property: Gets or sets the ARM Id of the cluster resource on which this virtual machine will
     * deploy.
     * 
     * @param clusterId the clusterId value to set.
     * @return the PlacementProfile object itself.
     */
    public PlacementProfile withClusterId(String clusterId) {
        this.clusterId = clusterId;
        return this;
    }

    /**
     * Get the hostId property: Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
     * 
     * @return the hostId value.
     */
    public String hostId() {
        return this.hostId;
    }

    /**
     * Set the hostId property: Gets or sets the ARM Id of the host resource on which this virtual machine will deploy.
     * 
     * @param hostId the hostId value to set.
     * @return the PlacementProfile object itself.
     */
    public PlacementProfile withHostId(String hostId) {
        this.hostId = hostId;
        return this;
    }

    /**
     * Get the datastoreId property: Gets or sets the ARM Id of the datastore resource on which the data for the virtual
     * machine will be kept.
     * 
     * @return the datastoreId value.
     */
    public String datastoreId() {
        return this.datastoreId;
    }

    /**
     * Set the datastoreId property: Gets or sets the ARM Id of the datastore resource on which the data for the virtual
     * machine will be kept.
     * 
     * @param datastoreId the datastoreId value to set.
     * @return the PlacementProfile object itself.
     */
    public PlacementProfile withDatastoreId(String datastoreId) {
        this.datastoreId = datastoreId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourcePoolId", this.resourcePoolId);
        jsonWriter.writeStringField("clusterId", this.clusterId);
        jsonWriter.writeStringField("hostId", this.hostId);
        jsonWriter.writeStringField("datastoreId", this.datastoreId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementProfile.
     */
    public static PlacementProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementProfile deserializedPlacementProfile = new PlacementProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourcePoolId".equals(fieldName)) {
                    deserializedPlacementProfile.resourcePoolId = reader.getString();
                } else if ("clusterId".equals(fieldName)) {
                    deserializedPlacementProfile.clusterId = reader.getString();
                } else if ("hostId".equals(fieldName)) {
                    deserializedPlacementProfile.hostId = reader.getString();
                } else if ("datastoreId".equals(fieldName)) {
                    deserializedPlacementProfile.datastoreId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementProfile;
        });
    }
}
