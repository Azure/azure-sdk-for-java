// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * This data object type contains the properties of a SCSI controller device attached to a virtual machine that is
 * reported by the controller.
 */
@Fluent
public final class VirtualScsiController implements JsonSerializable<VirtualScsiController> {
    /*
     * Gets or sets the controller type.
     */
    private ScsiControllerType type;

    /*
     * Gets or sets the key of the controller.
     */
    private Integer controllerKey;

    /*
     * Gets or sets the bus number of the controller.
     */
    private Integer busNumber;

    /*
     * Gets or sets the SCSI controller unit number.
     */
    private Integer scsiCtlrUnitNumber;

    /*
     * Gets or sets the sharing mode.
     */
    private VirtualScsiSharing sharing;

    /**
     * Creates an instance of VirtualScsiController class.
     */
    public VirtualScsiController() {
    }

    /**
     * Get the type property: Gets or sets the controller type.
     * 
     * @return the type value.
     */
    public ScsiControllerType type() {
        return this.type;
    }

    /**
     * Set the type property: Gets or sets the controller type.
     * 
     * @param type the type value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withType(ScsiControllerType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the controllerKey property: Gets or sets the key of the controller.
     * 
     * @return the controllerKey value.
     */
    public Integer controllerKey() {
        return this.controllerKey;
    }

    /**
     * Set the controllerKey property: Gets or sets the key of the controller.
     * 
     * @param controllerKey the controllerKey value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withControllerKey(Integer controllerKey) {
        this.controllerKey = controllerKey;
        return this;
    }

    /**
     * Get the busNumber property: Gets or sets the bus number of the controller.
     * 
     * @return the busNumber value.
     */
    public Integer busNumber() {
        return this.busNumber;
    }

    /**
     * Set the busNumber property: Gets or sets the bus number of the controller.
     * 
     * @param busNumber the busNumber value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withBusNumber(Integer busNumber) {
        this.busNumber = busNumber;
        return this;
    }

    /**
     * Get the scsiCtlrUnitNumber property: Gets or sets the SCSI controller unit number.
     * 
     * @return the scsiCtlrUnitNumber value.
     */
    public Integer scsiCtlrUnitNumber() {
        return this.scsiCtlrUnitNumber;
    }

    /**
     * Set the scsiCtlrUnitNumber property: Gets or sets the SCSI controller unit number.
     * 
     * @param scsiCtlrUnitNumber the scsiCtlrUnitNumber value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withScsiCtlrUnitNumber(Integer scsiCtlrUnitNumber) {
        this.scsiCtlrUnitNumber = scsiCtlrUnitNumber;
        return this;
    }

    /**
     * Get the sharing property: Gets or sets the sharing mode.
     * 
     * @return the sharing value.
     */
    public VirtualScsiSharing sharing() {
        return this.sharing;
    }

    /**
     * Set the sharing property: Gets or sets the sharing mode.
     * 
     * @param sharing the sharing value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withSharing(VirtualScsiSharing sharing) {
        this.sharing = sharing;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeNumberField("controllerKey", this.controllerKey);
        jsonWriter.writeNumberField("busNumber", this.busNumber);
        jsonWriter.writeNumberField("scsiCtlrUnitNumber", this.scsiCtlrUnitNumber);
        jsonWriter.writeStringField("sharing", this.sharing == null ? null : this.sharing.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualScsiController from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualScsiController if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualScsiController.
     */
    public static VirtualScsiController fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualScsiController deserializedVirtualScsiController = new VirtualScsiController();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedVirtualScsiController.type = ScsiControllerType.fromString(reader.getString());
                } else if ("controllerKey".equals(fieldName)) {
                    deserializedVirtualScsiController.controllerKey = reader.getNullable(JsonReader::getInt);
                } else if ("busNumber".equals(fieldName)) {
                    deserializedVirtualScsiController.busNumber = reader.getNullable(JsonReader::getInt);
                } else if ("scsiCtlrUnitNumber".equals(fieldName)) {
                    deserializedVirtualScsiController.scsiCtlrUnitNumber = reader.getNullable(JsonReader::getInt);
                } else if ("sharing".equals(fieldName)) {
                    deserializedVirtualScsiController.sharing = VirtualScsiSharing.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualScsiController;
        });
    }
}
