// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * This data object type contains the properties of a SCSI controller device attached to a virtual machine that is
 * reported by the controller.
 */
@Fluent
public final class VirtualScsiController {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VirtualScsiController.class);

    /*
     * Gets or sets the controller type.
     */
    @JsonProperty(value = "type")
    private ScsiControllerType type;

    /*
     * Gets or sets the key of the controller.
     */
    @JsonProperty(value = "controllerKey")
    private Integer controllerKey;

    /*
     * Gets or sets the bus number of the controller.
     */
    @JsonProperty(value = "busNumber")
    private Integer busNumber;

    /*
     * Gets or sets the SCSI controller unit number.
     */
    @JsonProperty(value = "scsiCtlrUnitNumber")
    private Integer scsiCtlrUnitNumber;

    /*
     * Gets or sets the sharing mode.
     */
    @JsonProperty(value = "sharing")
    private VirtualScsiSharing sharing;

    /**
     * Get the type property: Gets or sets the controller type.
     *
     * @return the type value.
     */
    public ScsiControllerType type() {
        return this.type;
    }

    /**
     * Set the type property: Gets or sets the controller type.
     *
     * @param type the type value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withType(ScsiControllerType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the controllerKey property: Gets or sets the key of the controller.
     *
     * @return the controllerKey value.
     */
    public Integer controllerKey() {
        return this.controllerKey;
    }

    /**
     * Set the controllerKey property: Gets or sets the key of the controller.
     *
     * @param controllerKey the controllerKey value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withControllerKey(Integer controllerKey) {
        this.controllerKey = controllerKey;
        return this;
    }

    /**
     * Get the busNumber property: Gets or sets the bus number of the controller.
     *
     * @return the busNumber value.
     */
    public Integer busNumber() {
        return this.busNumber;
    }

    /**
     * Set the busNumber property: Gets or sets the bus number of the controller.
     *
     * @param busNumber the busNumber value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withBusNumber(Integer busNumber) {
        this.busNumber = busNumber;
        return this;
    }

    /**
     * Get the scsiCtlrUnitNumber property: Gets or sets the SCSI controller unit number.
     *
     * @return the scsiCtlrUnitNumber value.
     */
    public Integer scsiCtlrUnitNumber() {
        return this.scsiCtlrUnitNumber;
    }

    /**
     * Set the scsiCtlrUnitNumber property: Gets or sets the SCSI controller unit number.
     *
     * @param scsiCtlrUnitNumber the scsiCtlrUnitNumber value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withScsiCtlrUnitNumber(Integer scsiCtlrUnitNumber) {
        this.scsiCtlrUnitNumber = scsiCtlrUnitNumber;
        return this;
    }

    /**
     * Get the sharing property: Gets or sets the sharing mode.
     *
     * @return the sharing value.
     */
    public VirtualScsiSharing sharing() {
        return this.sharing;
    }

    /**
     * Set the sharing property: Gets or sets the sharing mode.
     *
     * @param sharing the sharing value to set.
     * @return the VirtualScsiController object itself.
     */
    public VirtualScsiController withSharing(VirtualScsiSharing sharing) {
        this.sharing = sharing;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
