// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Describes the properties of an Inventory Item.
 */
@Fluent
public class InventoryItemProperties implements JsonSerializable<InventoryItemProperties> {
    /*
     * They inventory type.
     */
    private InventoryType inventoryType = InventoryType.fromString("InventoryItemProperties");

    /*
     * Gets or sets the tracked resource id corresponding to the inventory resource.
     */
    private String managedResourceId;

    /*
     * Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
     */
    private String moRefId;

    /*
     * Gets or sets the vCenter Managed Object name for the inventory item.
     */
    private String moName;

    /*
     * Gets the provisioning state.
     */
    private ProvisioningState provisioningState;

    /**
     * Creates an instance of InventoryItemProperties class.
     */
    public InventoryItemProperties() {
    }

    /**
     * Get the inventoryType property: They inventory type.
     * 
     * @return the inventoryType value.
     */
    public InventoryType inventoryType() {
        return this.inventoryType;
    }

    /**
     * Get the managedResourceId property: Gets or sets the tracked resource id corresponding to the inventory resource.
     * 
     * @return the managedResourceId value.
     */
    public String managedResourceId() {
        return this.managedResourceId;
    }

    /**
     * Set the managedResourceId property: Gets or sets the tracked resource id corresponding to the inventory resource.
     * 
     * @param managedResourceId the managedResourceId value to set.
     * @return the InventoryItemProperties object itself.
     */
    public InventoryItemProperties withManagedResourceId(String managedResourceId) {
        this.managedResourceId = managedResourceId;
        return this;
    }

    /**
     * Get the moRefId property: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
     * 
     * @return the moRefId value.
     */
    public String moRefId() {
        return this.moRefId;
    }

    /**
     * Set the moRefId property: Gets or sets the MoRef (Managed Object Reference) ID for the inventory item.
     * 
     * @param moRefId the moRefId value to set.
     * @return the InventoryItemProperties object itself.
     */
    public InventoryItemProperties withMoRefId(String moRefId) {
        this.moRefId = moRefId;
        return this;
    }

    /**
     * Get the moName property: Gets or sets the vCenter Managed Object name for the inventory item.
     * 
     * @return the moName value.
     */
    public String moName() {
        return this.moName;
    }

    /**
     * Set the moName property: Gets or sets the vCenter Managed Object name for the inventory item.
     * 
     * @param moName the moName value to set.
     * @return the InventoryItemProperties object itself.
     */
    public InventoryItemProperties withMoName(String moName) {
        this.moName = moName;
        return this;
    }

    /**
     * Get the provisioningState property: Gets the provisioning state.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: Gets the provisioning state.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the InventoryItemProperties object itself.
     */
    InventoryItemProperties withProvisioningState(ProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("inventoryType", this.inventoryType == null ? null : this.inventoryType.toString());
        jsonWriter.writeStringField("managedResourceId", this.managedResourceId);
        jsonWriter.writeStringField("moRefId", this.moRefId);
        jsonWriter.writeStringField("moName", this.moName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of InventoryItemProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of InventoryItemProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the InventoryItemProperties.
     */
    public static InventoryItemProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("inventoryType".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("ResourcePool".equals(discriminatorValue)) {
                    return ResourcePoolInventoryItem.fromJson(readerToUse.reset());
                } else if ("VirtualMachine".equals(discriminatorValue)) {
                    return VirtualMachineInventoryItem.fromJson(readerToUse.reset());
                } else if ("VirtualMachineTemplate".equals(discriminatorValue)) {
                    return VirtualMachineTemplateInventoryItem.fromJson(readerToUse.reset());
                } else if ("VirtualNetwork".equals(discriminatorValue)) {
                    return VirtualNetworkInventoryItem.fromJson(readerToUse.reset());
                } else if ("Cluster".equals(discriminatorValue)) {
                    return ClusterInventoryItem.fromJson(readerToUse.reset());
                } else if ("Datastore".equals(discriminatorValue)) {
                    return DatastoreInventoryItem.fromJson(readerToUse.reset());
                } else if ("Host".equals(discriminatorValue)) {
                    return HostInventoryItem.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static InventoryItemProperties fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            InventoryItemProperties deserializedInventoryItemProperties = new InventoryItemProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("inventoryType".equals(fieldName)) {
                    deserializedInventoryItemProperties.inventoryType = InventoryType.fromString(reader.getString());
                } else if ("managedResourceId".equals(fieldName)) {
                    deserializedInventoryItemProperties.managedResourceId = reader.getString();
                } else if ("moRefId".equals(fieldName)) {
                    deserializedInventoryItemProperties.moRefId = reader.getString();
                } else if ("moName".equals(fieldName)) {
                    deserializedInventoryItemProperties.moName = reader.getString();
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedInventoryItemProperties.provisioningState
                        = ProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedInventoryItemProperties;
        });
    }
}
