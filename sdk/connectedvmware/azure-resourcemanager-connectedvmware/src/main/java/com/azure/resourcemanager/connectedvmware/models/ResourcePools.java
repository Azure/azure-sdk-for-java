// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;

/** Resource collection API of ResourcePools. */
public interface ResourcePools {
    /**
     * Implements resourcePool GET method.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param resourcePoolName Name of the resourcePool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the resourcePool.
     */
    ResourcePool getByResourceGroup(String resourceGroupName, String resourcePoolName);

    /**
     * Implements resourcePool GET method.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param resourcePoolName Name of the resourcePool.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the resourcePool.
     */
    Response<ResourcePool> getByResourceGroupWithResponse(
        String resourceGroupName, String resourcePoolName, Context context);

    /**
     * Implements resourcePool DELETE method.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param resourcePoolName Name of the resourcePool.
     * @param force Whether force delete was specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String resourcePoolName, Boolean force);

    /**
     * Implements resourcePool DELETE method.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param resourcePoolName Name of the resourcePool.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String resourcePoolName);

    /**
     * Implements resourcePool DELETE method.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param resourcePoolName Name of the resourcePool.
     * @param force Whether force delete was specified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String resourceGroupName, String resourcePoolName, Boolean force, Context context);

    /**
     * List of resourcePools in a subscription.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourcePools.
     */
    PagedIterable<ResourcePool> list();

    /**
     * List of resourcePools in a subscription.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourcePools.
     */
    PagedIterable<ResourcePool> list(Context context);

    /**
     * List of resourcePools in a resource group.
     *
     * @param resourceGroupName The Resource Group Name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourcePools.
     */
    PagedIterable<ResourcePool> listByResourceGroup(String resourceGroupName);

    /**
     * List of resourcePools in a resource group.
     *
     * @param resourceGroupName The Resource Group Name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return list of ResourcePools.
     */
    PagedIterable<ResourcePool> listByResourceGroup(String resourceGroupName, Context context);

    /**
     * Implements resourcePool GET method.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the resourcePool.
     */
    ResourcePool getById(String id);

    /**
     * Implements resourcePool GET method.
     *
     * @param id the resource ID.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return define the resourcePool.
     */
    Response<ResourcePool> getByIdWithResponse(String id, Context context);

    /**
     * Implements resourcePool DELETE method.
     *
     * @param id the resource ID.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteById(String id);

    /**
     * Implements resourcePool DELETE method.
     *
     * @param id the resource ID.
     * @param force Whether force delete was specified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void deleteByIdWithResponse(String id, Boolean force, Context context);

    /**
     * Begins definition for a new ResourcePool resource.
     *
     * @param name resource name.
     * @return the first stage of the new ResourcePool definition.
     */
    ResourcePool.DefinitionStages.Blank define(String name);
}
