// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.ResourcePool;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourcePoolsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"uuid\":\"nmwmqtibx\",\"vCenterId\":\"jddtvqct\",\"moRefId\":\"dija\",\"inventoryItemId\":\"kmr\",\"moName\":\"eekpndz\",\"cpuSharesLevel\":\"pmudqmeqwig\",\"cpuReservationMHz\":1602038748333470502,\"cpuLimitMHz\":2895883377575243380,\"memSharesLevel\":\"xebeybpmz\",\"memReservationMB\":2659167645361302478,\"memLimitMB\":7788648309029183931,\"memOverallUsageGB\":6216202256317875925,\"memCapacityGB\":2351276297783847180,\"cpuOverallUsageMHz\":2269669619896016049,\"cpuCapacityMHz\":1564244716535718272,\"customResourceName\":\"hvseufuqyrx\",\"datastoreIds\":[\"cgq\",\"sismjqfrddga\",\"quhiosrsjuivf\"],\"networkIds\":[\"syirnx\"],\"statuses\":[{\"type\":\"exrxzbujrtrhq\",\"status\":\"revkhgnlnzo\",\"reason\":\"lrpiqywnc\",\"message\":\"tszcofizehtdhgb\",\"severity\":\"vreljea\",\"lastUpdatedAt\":\"2021-11-11T12:18:44Z\"},{\"type\":\"zmlovuanash\",\"status\":\"lpmjerb\",\"reason\":\"elvidizozsdbccx\",\"message\":\"on\",\"severity\":\"gnwncypuuwwlt\",\"lastUpdatedAt\":\"2021-11-20T18:00Z\"},{\"type\":\"ctzenkeifzzhmkd\",\"status\":\"vflyhbxcu\",\"reason\":\"hxgsrboldfor\",\"message\":\"wjlvizbfhfov\",\"severity\":\"cqpbtuo\",\"lastUpdatedAt\":\"2021-01-13T00:41:11Z\"},{\"type\":\"zab\",\"status\":\"l\",\"reason\":\"umuaslzkwrrwoycq\",\"message\":\"wyh\",\"severity\":\"nomdrkywuhpsv\",\"lastUpdatedAt\":\"2021-05-26T05:35:58Z\"}],\"provisioningState\":\"Updating\"},\"extendedLocation\":{\"type\":\"we\",\"name\":\"wlalniexzsrzp\"},\"kind\":\"q\",\"location\":\"yb\",\"tags\":{\"q\":\"pgdakchzyvli\",\"bn\":\"rkcxkj\"},\"id\":\"mysu\",\"name\":\"swqrntvlwijp\",\"type\":\"ttexoqqpwcyyufmh\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ConnectedVMwareManager manager =
            ConnectedVMwareManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ResourcePool response =
            manager
                .resourcePools()
                .getByResourceGroupWithResponse("hlxvea", "f", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("yb", response.location());
        Assertions.assertEquals("pgdakchzyvli", response.tags().get("q"));
        Assertions.assertEquals("we", response.extendedLocation().type());
        Assertions.assertEquals("wlalniexzsrzp", response.extendedLocation().name());
        Assertions.assertEquals("q", response.kind());
        Assertions.assertEquals("jddtvqct", response.vCenterId());
        Assertions.assertEquals("dija", response.moRefId());
        Assertions.assertEquals("kmr", response.inventoryItemId());
    }
}
