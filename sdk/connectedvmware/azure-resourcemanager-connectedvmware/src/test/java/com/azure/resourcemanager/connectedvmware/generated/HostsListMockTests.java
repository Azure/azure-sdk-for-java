// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.HostModel;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class HostsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"uuid\":\"rmfsvbpav\",\"vCenterId\":\"pfppd\",\"moRefId\":\"nupgahxku\",\"inventoryItemId\":\"sjcaacfdmmcpugm\",\"moName\":\"qepvufhbzeh\",\"statuses\":[{\"type\":\"qhnlbqnbld\",\"status\":\"aclgschorimk\",\"reason\":\"r\",\"message\":\"oucs\",\"severity\":\"ldpuviy\",\"lastUpdatedAt\":\"2021-12-05T00:02:56Z\"},{\"type\":\"beolh\",\"status\":\"lvbmxuqibsxtkcu\",\"reason\":\"b\",\"message\":\"arfsi\",\"severity\":\"lkjxnqpvwgf\",\"lastUpdatedAt\":\"2021-04-12T06:32:21Z\"}],\"customResourceName\":\"qyki\",\"overallMemoryUsageGB\":293283490118699723,\"memorySizeGB\":3998193682786371340,\"overallCpuUsageMHz\":7863098536449541482,\"cpuMhz\":6674248213519143445,\"datastoreIds\":[\"xmycjimryvwgcw\",\"pbmz\",\"w\"],\"networkIds\":[\"dsxwefoh\"],\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"type\":\"pwndyqlea\",\"name\":\"klmtkhlowkx\"},\"kind\":\"br\",\"location\":\"fjmzsyzfho\",\"tags\":{\"unsjlpjrtwszhvvu\":\"ikcyyc\"},\"id\":\"c\",\"name\":\"hvtrrmhwrbfdpyf\",\"type\":\"ubhvj\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ConnectedVMwareManager manager =
            ConnectedVMwareManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<HostModel> response = manager.hosts().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("fjmzsyzfho", response.iterator().next().location());
        Assertions.assertEquals("ikcyyc", response.iterator().next().tags().get("unsjlpjrtwszhvvu"));
        Assertions.assertEquals("pwndyqlea", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("klmtkhlowkx", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("br", response.iterator().next().kind());
        Assertions.assertEquals("pfppd", response.iterator().next().vCenterId());
        Assertions.assertEquals("nupgahxku", response.iterator().next().moRefId());
        Assertions.assertEquals("sjcaacfdmmcpugm", response.iterator().next().inventoryItemId());
    }
}
