// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.connectedvmware.fluent.models.ClusterInner;
import com.azure.resourcemanager.connectedvmware.models.ClustersList;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClustersListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClustersList model =
            BinaryData
                .fromString(
                    "{\"nextLink\":\"bpxjmfl\",\"value\":[{\"properties\":{\"uuid\":\"nchrkcciww\",\"vCenterId\":\"uqkhrsajiwku\",\"moRefId\":\"oskg\",\"inventoryItemId\":\"auu\",\"moName\":\"jmvxie\",\"statuses\":[{\"type\":\"idyjrrfbyaosvexc\",\"status\":\"npc\",\"reason\":\"ocohslkevleg\",\"message\":\"fbuhfmvfaxkffe\",\"severity\":\"th\",\"lastUpdatedAt\":\"2021-01-03T07:04:49Z\"},{\"type\":\"zy\",\"status\":\"hxmzsbbzoggig\",\"reason\":\"wburvjxxjnspydpt\",\"message\":\"enkouknvudw\",\"severity\":\"ukbldngkpo\",\"lastUpdatedAt\":\"2021-07-10T00:22:18Z\"}],\"customResourceName\":\"z\",\"usedMemoryGB\":911296392791855673,\"totalMemoryGB\":7699505413324678544,\"usedCpuMHz\":675318684186893935,\"totalCpuMHz\":3433542965011428197,\"datastoreIds\":[\"ygevqzntypmrbpiz\",\"drqjsdpy\"],\"networkIds\":[\"yhxdeoejzicwi\",\"sjttgzfbish\"],\"provisioningState\":\"Failed\"},\"extendedLocation\":{\"type\":\"jdeyeamdpha\",\"name\":\"lpbuxwgipwhonowk\"},\"kind\":\"wankixzbi\",\"location\":\"jeputtmrywn\",\"tags\":{\"zrnkcqvyxlwh\":\"qftiy\",\"ryavwhheunmmqh\":\"lsicohoqqnwv\",\"noc\":\"yxzk\",\"uconuqszfkbey\":\"koklya\"},\"id\":\"ewrmjmwvvjektc\",\"name\":\"senhwlrs\",\"type\":\"frzpwvlqdqgb\"},{\"properties\":{\"uuid\":\"ylihkaetckt\",\"vCenterId\":\"civfsnkymuctq\",\"moRefId\":\"fbebrjcxer\",\"inventoryItemId\":\"wutttxfvjrbi\",\"moName\":\"hxepcyvahfnlj\",\"statuses\":[{\"type\":\"j\",\"status\":\"ujqgidok\",\"reason\":\"ljyoxgvcltb\",\"message\":\"ncghkje\",\"severity\":\"zhbijhtxfv\",\"lastUpdatedAt\":\"2021-10-21T07:58:39Z\"}],\"customResourceName\":\"smx\",\"usedMemoryGB\":7314853513832438482,\"totalMemoryGB\":5279138530813051963,\"usedCpuMHz\":6726437827425904455,\"totalCpuMHz\":8488647462806528566,\"datastoreIds\":[\"qkkrb\",\"pukgriwflzlfb\"],\"networkIds\":[\"uzycispnqza\"],\"provisioningState\":\"Provisioning\"},\"extendedLocation\":{\"type\":\"rp\",\"name\":\"dhibnuq\"},\"kind\":\"ik\",\"location\":\"drgvtqagn\",\"tags\":{\"rbu\":\"nhijggmebfsi\",\"ttdbhrbnl\":\"rcvpnazzmhjrunmp\",\"xywnytnrsynlqidy\":\"nkxmyskpbhenbtk\"},\"id\":\"yxczfclh\",\"name\":\"axdbabph\",\"type\":\"wrqlfktsthsuco\"},{\"properties\":{\"uuid\":\"nyyazttbtwwrqpue\",\"vCenterId\":\"kzywbiex\",\"moRefId\":\"eyueaxibxujwb\",\"inventoryItemId\":\"walm\",\"moName\":\"yoxa\",\"statuses\":[{\"type\":\"zjancuxr\",\"status\":\"wbavxbniwdj\",\"reason\":\"zt\",\"message\":\"bpg\",\"severity\":\"ytxhp\",\"lastUpdatedAt\":\"2021-04-28T02:43:47Z\"},{\"type\":\"pfza\",\"status\":\"lcuhxwtctyqiklb\",\"reason\":\"vplwzbhv\",\"message\":\"u\",\"severity\":\"osvmk\",\"lastUpdatedAt\":\"2021-11-15T07:00:08Z\"},{\"type\":\"qukkfp\",\"status\":\"mg\",\"reason\":\"nkjzkdeslpvlop\",\"message\":\"yighxpk\",\"severity\":\"zb\",\"lastUpdatedAt\":\"2021-04-02T11:03:50Z\"}],\"customResourceName\":\"bbaumnyquped\",\"usedMemoryGB\":2245881351334058994,\"totalMemoryGB\":3205247320582775463,\"usedCpuMHz\":7090482226070156086,\"totalCpuMHz\":2627046552628012319,\"datastoreIds\":[\"ie\",\"tfhvpesapskrdqmh\",\"jdhtldwkyzxu\",\"tkncwsc\"],\"networkIds\":[\"lxotogtwrupq\",\"xvnmicykvceov\",\"ilovnot\",\"fj\"],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"k\",\"name\":\"x\"},\"kind\":\"ttkphywpnvjtoqne\",\"location\":\"mclfplphoxuscr\",\"tags\":{\"zq\":\"gyepsbjt\",\"fjz\":\"gxywpmue\"},\"id\":\"fqkquj\",\"name\":\"dsuyonobgla\",\"type\":\"cq\"}]}")
                .toObject(ClustersList.class);
        Assertions.assertEquals("bpxjmfl", model.nextLink());
        Assertions.assertEquals("jeputtmrywn", model.value().get(0).location());
        Assertions.assertEquals("qftiy", model.value().get(0).tags().get("zrnkcqvyxlwh"));
        Assertions.assertEquals("jdeyeamdpha", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("lpbuxwgipwhonowk", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("wankixzbi", model.value().get(0).kind());
        Assertions.assertEquals("uqkhrsajiwku", model.value().get(0).vCenterId());
        Assertions.assertEquals("oskg", model.value().get(0).moRefId());
        Assertions.assertEquals("auu", model.value().get(0).inventoryItemId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClustersList model =
            new ClustersList()
                .withNextLink("bpxjmfl")
                .withValue(
                    Arrays
                        .asList(
                            new ClusterInner()
                                .withLocation("jeputtmrywn")
                                .withTags(
                                    mapOf(
                                        "zrnkcqvyxlwh",
                                        "qftiy",
                                        "ryavwhheunmmqh",
                                        "lsicohoqqnwv",
                                        "noc",
                                        "yxzk",
                                        "uconuqszfkbey",
                                        "koklya"))
                                .withExtendedLocation(
                                    new ExtendedLocation().withType("jdeyeamdpha").withName("lpbuxwgipwhonowk"))
                                .withKind("wankixzbi")
                                .withVCenterId("uqkhrsajiwku")
                                .withMoRefId("oskg")
                                .withInventoryItemId("auu"),
                            new ClusterInner()
                                .withLocation("drgvtqagn")
                                .withTags(
                                    mapOf(
                                        "rbu",
                                        "nhijggmebfsi",
                                        "ttdbhrbnl",
                                        "rcvpnazzmhjrunmp",
                                        "xywnytnrsynlqidy",
                                        "nkxmyskpbhenbtk"))
                                .withExtendedLocation(new ExtendedLocation().withType("rp").withName("dhibnuq"))
                                .withKind("ik")
                                .withVCenterId("civfsnkymuctq")
                                .withMoRefId("fbebrjcxer")
                                .withInventoryItemId("wutttxfvjrbi"),
                            new ClusterInner()
                                .withLocation("mclfplphoxuscr")
                                .withTags(mapOf("zq", "gyepsbjt", "fjz", "gxywpmue"))
                                .withExtendedLocation(new ExtendedLocation().withType("k").withName("x"))
                                .withKind("ttkphywpnvjtoqne")
                                .withVCenterId("kzywbiex")
                                .withMoRefId("eyueaxibxujwb")
                                .withInventoryItemId("walm")));
        model = BinaryData.fromObject(model).toObject(ClustersList.class);
        Assertions.assertEquals("bpxjmfl", model.nextLink());
        Assertions.assertEquals("jeputtmrywn", model.value().get(0).location());
        Assertions.assertEquals("qftiy", model.value().get(0).tags().get("zrnkcqvyxlwh"));
        Assertions.assertEquals("jdeyeamdpha", model.value().get(0).extendedLocation().type());
        Assertions.assertEquals("lpbuxwgipwhonowk", model.value().get(0).extendedLocation().name());
        Assertions.assertEquals("wankixzbi", model.value().get(0).kind());
        Assertions.assertEquals("uqkhrsajiwku", model.value().get(0).vCenterId());
        Assertions.assertEquals("oskg", model.value().get(0).moRefId());
        Assertions.assertEquals("auu", model.value().get(0).inventoryItemId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
