// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import com.azure.resourcemanager.connectedvmware.models.ResourcePool;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ResourcePoolsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"uuid\":\"ylnio\",\"vCenterId\":\"zgb\",\"moRefId\":\"edm\",\"inventoryItemId\":\"kvnlvxbcuiiznkt\",\"moName\":\"ansnvp\",\"cpuSharesLevel\":\"bmikost\",\"cpuReservationMHz\":4326566704546612095,\"cpuLimitMHz\":4946452508128515048,\"memSharesLevel\":\"qnyophzfyls\",\"memReservationMB\":1557828548687606223,\"memLimitMB\":2804347969541145358,\"memOverallUsageGB\":8283915751167918851,\"memCapacityGB\":3624952235307178463,\"cpuOverallUsageMHz\":51966962354029378,\"cpuCapacityMHz\":4477654614915843418,\"customResourceName\":\"fwlwxjwetnps\",\"datastoreIds\":[\"lafzvaylptr\",\"qqwzt\",\"mwqkchcxwaxf\"],\"networkIds\":[\"jkjexf\",\"eqvhpsylkk\",\"hkbffmbm\"],\"statuses\":[{\"type\":\"gywwpgjxs\",\"status\":\"tf\",\"reason\":\"gicgaaoepttaq\",\"message\":\"dewemxswv\",\"severity\":\"unzzjgehk\",\"lastUpdatedAt\":\"2021-10-15T08:21:58Z\"},{\"type\":\"rtixokff\",\"status\":\"inljqepqwhixmo\",\"reason\":\"tshi\",\"message\":\"gvelfc\",\"severity\":\"uccbirdsvuw\",\"lastUpdatedAt\":\"2021-09-01T15:39:22Z\"},{\"type\":\"egstmninwjizci\",\"status\":\"ghgshejjtbxqmu\",\"reason\":\"xlxqzvn\",\"message\":\"sbycucrwnamikz\",\"severity\":\"rqbsmswziq\",\"lastUpdatedAt\":\"2021-08-26T22:22:09Z\"}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"ruswhv\",\"name\":\"zznvfbyc\"},\"kind\":\"jww\",\"location\":\"xzv\",\"tags\":{\"aohdjh\":\"mxqhndvnoamldse\",\"pelnjetag\":\"flzokxco\",\"npbs\":\"tsxoatftgz\",\"g\":\"vefloccsrmozihmi\"},\"id\":\"wtxxpkyjcx\",\"name\":\"jxgrytfmp\",\"type\":\"ycilrmcaykggnox\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ConnectedVMwareManager manager =
            ConnectedVMwareManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        ResourcePool response =
            manager
                .resourcePools()
                .define("ygznmmaxrizk")
                .withRegion("bcblemb")
                .withExistingResourceGroup("aabzmif")
                .withTags(mapOf("xk", "wvq", "tswbzuwfmd", "ivqiheb", "vcjfelisdjubggb", "ragegi"))
                .withExtendedLocation(new ExtendedLocation().withType("wdofdbxiqx").withName("iqbi"))
                .withKind("mwwinhehfqpofv")
                .withVCenterId("eixynllxecwcroj")
                .withMoRefId("slhcawjutifd")
                .withInventoryItemId("mvi")
                .create();

        Assertions.assertEquals("xzv", response.location());
        Assertions.assertEquals("mxqhndvnoamldse", response.tags().get("aohdjh"));
        Assertions.assertEquals("ruswhv", response.extendedLocation().type());
        Assertions.assertEquals("zznvfbyc", response.extendedLocation().name());
        Assertions.assertEquals("jww", response.kind());
        Assertions.assertEquals("zgb", response.vCenterId());
        Assertions.assertEquals("edm", response.moRefId());
        Assertions.assertEquals("kvnlvxbcuiiznkt", response.inventoryItemId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
