// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.Cluster;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ClustersListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"uuid\":\"ctbrxkjzwrgxffm\",\"vCenterId\":\"kwfbkgo\",\"moRefId\":\"wopdbydpiz\",\"inventoryItemId\":\"clnapxbiygnugjkn\",\"moName\":\"mfcttux\",\"statuses\":[{\"type\":\"lflqoiqu\",\"status\":\"ehmrn\",\"reason\":\"vsujztczytqjtwh\",\"message\":\"unfprnjletlxs\",\"severity\":\"pddouifamowaziyn\",\"lastUpdatedAt\":\"2021-04-07T14:50:59Z\"},{\"type\":\"wzdvpiwh\",\"status\":\"szdtmaajquh\",\"reason\":\"ylr\",\"message\":\"m\",\"severity\":\"g\",\"lastUpdatedAt\":\"2021-10-13T09:57:49Z\"},{\"type\":\"yospspshc\",\"status\":\"kyjpmspbps\",\"reason\":\"fppyogtieyujtvcz\",\"message\":\"n\",\"severity\":\"rxmunjdxvgln\",\"lastUpdatedAt\":\"2021-10-03T03:08:35Z\"},{\"type\":\"xpaglqivbgkc\",\"status\":\"hpzvuqdflvoniyp\",\"reason\":\"ubcpzgpxti\",\"message\":\"j\",\"severity\":\"idibgqjxgpn\",\"lastUpdatedAt\":\"2021-03-28T18:40:43Z\"}],\"customResourceName\":\"vfgpikqmhhaowjrm\",\"usedMemoryGB\":453619823533094312,\"totalMemoryGB\":6259942287024025103,\"usedCpuMHz\":5235917180289982639,\"totalCpuMHz\":6437481648804620645,\"datastoreIds\":[\"kfvxcnq\",\"xqpswok\",\"vkhlggdhbemz\",\"kzsz\"],\"networkIds\":[\"wtglxx\",\"ljfp\",\"picrmnzhrgmqgjsx\",\"pqcbfrmbodthsq\"],\"provisioningState\":\"Accepted\"},\"extendedLocation\":{\"type\":\"i\",\"name\":\"kclacjfrn\"},\"kind\":\"sxauzlwvsgmwohqf\",\"location\":\"izvu\",\"tags\":{\"mribiat\":\"kjsvthnwpzteko\"},\"id\":\"gplucfotangcfhny\",\"name\":\"zcugswvxwlmzqw\",\"type\":\"vtxnjmxmcuqud\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ConnectedVMwareManager manager =
            ConnectedVMwareManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Cluster> response = manager.clusters().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("izvu", response.iterator().next().location());
        Assertions.assertEquals("kjsvthnwpzteko", response.iterator().next().tags().get("mribiat"));
        Assertions.assertEquals("i", response.iterator().next().extendedLocation().type());
        Assertions.assertEquals("kclacjfrn", response.iterator().next().extendedLocation().name());
        Assertions.assertEquals("sxauzlwvsgmwohqf", response.iterator().next().kind());
        Assertions.assertEquals("kwfbkgo", response.iterator().next().vCenterId());
        Assertions.assertEquals("wopdbydpiz", response.iterator().next().moRefId());
        Assertions.assertEquals("clnapxbiygnugjkn", response.iterator().next().inventoryItemId());
    }
}
