// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.connectedvmware.fluent.models.VirtualNetworkInner;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class VirtualNetworkInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualNetworkInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"uuid\":\"orgguf\",\"vCenterId\":\"aomtbghhavgrvkff\",\"moRefId\":\"jzhpjbibgjmfx\",\"inventoryItemId\":\"vfcluyovwxnbkfe\",\"moName\":\"xscyhwzdgirujbz\",\"customResourceName\":\"mvzzbtdcqvp\",\"statuses\":[{\"type\":\"jviylwdshfs\",\"status\":\"rbgyefry\",\"reason\":\"gaojf\",\"message\":\"nc\",\"severity\":\"mrfhirctymox\",\"lastUpdatedAt\":\"2021-09-02T06:19:11Z\"},{\"type\":\"ipiwy\",\"status\":\"uh\",\"reason\":\"cpqjlihhyu\",\"message\":\"skasdvlmfwdgzxu\",\"severity\":\"cvpa\",\"lastUpdatedAt\":\"2021-10-14T22:40:57Z\"},{\"type\":\"euzvx\",\"status\":\"i\",\"reason\":\"nhn\",\"message\":\"xifqjzgxm\",\"severity\":\"ublwpcesutrg\",\"lastUpdatedAt\":\"2020-12-26T09:45:30Z\"},{\"type\":\"uutpwoqhih\",\"status\":\"qg\",\"reason\":\"pnfqntcyp\",\"message\":\"jv\",\"severity\":\"imwkslircizj\",\"lastUpdatedAt\":\"2021-01-01T11:30:07Z\"}],\"provisioningState\":\"Deleting\"},\"extendedLocation\":{\"type\":\"acvlhv\",\"name\":\"dyftumrtwna\"},\"kind\":\"lbiw\",\"location\":\"ojgcyzt\",\"tags\":{\"baeqphc\":\"z\",\"gaifmvik\":\"qnrnrpxehuwryk\",\"xcv\":\"bydvkhbejdz\"},\"id\":\"srhnjivo\",\"name\":\"v\",\"type\":\"novqfzge\"}")
                .toObject(VirtualNetworkInner.class);
        Assertions.assertEquals("ojgcyzt", model.location());
        Assertions.assertEquals("z", model.tags().get("baeqphc"));
        Assertions.assertEquals("acvlhv", model.extendedLocation().type());
        Assertions.assertEquals("dyftumrtwna", model.extendedLocation().name());
        Assertions.assertEquals("lbiw", model.kind());
        Assertions.assertEquals("aomtbghhavgrvkff", model.vCenterId());
        Assertions.assertEquals("jzhpjbibgjmfx", model.moRefId());
        Assertions.assertEquals("vfcluyovwxnbkfe", model.inventoryItemId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualNetworkInner model =
            new VirtualNetworkInner()
                .withLocation("ojgcyzt")
                .withTags(mapOf("baeqphc", "z", "gaifmvik", "qnrnrpxehuwryk", "xcv", "bydvkhbejdz"))
                .withExtendedLocation(new ExtendedLocation().withType("acvlhv").withName("dyftumrtwna"))
                .withKind("lbiw")
                .withVCenterId("aomtbghhavgrvkff")
                .withMoRefId("jzhpjbibgjmfx")
                .withInventoryItemId("vfcluyovwxnbkfe");
        model = BinaryData.fromObject(model).toObject(VirtualNetworkInner.class);
        Assertions.assertEquals("ojgcyzt", model.location());
        Assertions.assertEquals("z", model.tags().get("baeqphc"));
        Assertions.assertEquals("acvlhv", model.extendedLocation().type());
        Assertions.assertEquals("dyftumrtwna", model.extendedLocation().name());
        Assertions.assertEquals("lbiw", model.kind());
        Assertions.assertEquals("aomtbghhavgrvkff", model.vCenterId());
        Assertions.assertEquals("jzhpjbibgjmfx", model.moRefId());
        Assertions.assertEquals("vfcluyovwxnbkfe", model.inventoryItemId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
