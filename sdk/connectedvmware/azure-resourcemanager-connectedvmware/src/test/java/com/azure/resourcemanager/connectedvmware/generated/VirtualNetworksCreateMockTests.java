// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import com.azure.resourcemanager.connectedvmware.models.VirtualNetwork;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class VirtualNetworksCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"uuid\":\"h\",\"vCenterId\":\"ndnelqkaadlknw\",\"moRefId\":\"anniyopetxivcnr\",\"inventoryItemId\":\"xnucaephblkwqp\",\"moName\":\"vbqsdt\",\"customResourceName\":\"bctvivuzqym\",\"statuses\":[{\"type\":\"o\",\"status\":\"gitsqh\",\"reason\":\"b\",\"message\":\"cdb\",\"severity\":\"fzndscxmxeatkd\",\"lastUpdatedAt\":\"2021-06-16T10:55:30Z\"}],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"yibqbnao\",\"name\":\"jrmkuhmaxljalf\"},\"kind\":\"jmobca\",\"location\":\"cd\",\"tags\":{\"jjzr\":\"qcwgaxfgvaknokz\",\"x\":\"tixldzyyfytpqs\"},\"id\":\"mmpuj\",\"name\":\"vyqlkjuvsmbmslzo\",\"type\":\"ovwzdbpqvybefg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        ConnectedVMwareManager manager = ConnectedVMwareManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        VirtualNetwork response = manager.virtualNetworks()
            .define("udqll")
            .withRegion("l")
            .withExistingResourceGroup("pnwy")
            .withTags(mapOf("gvfltgvdihoynkr", "oithg"))
            .withExtendedLocation(new ExtendedLocation().withType("fdfa").withName("yzyzeyuu"))
            .withKind("ds")
            .withVCenterId("huxiqhzlraymez")
            .withMoRefId("skihmxrfd")
            .withInventoryItemId("jrednwyysh")
            .create();

        Assertions.assertEquals("cd", response.location());
        Assertions.assertEquals("qcwgaxfgvaknokz", response.tags().get("jjzr"));
        Assertions.assertEquals("yibqbnao", response.extendedLocation().type());
        Assertions.assertEquals("jrmkuhmaxljalf", response.extendedLocation().name());
        Assertions.assertEquals("jmobca", response.kind());
        Assertions.assertEquals("ndnelqkaadlknw", response.vCenterId());
        Assertions.assertEquals("anniyopetxivcnr", response.moRefId());
        Assertions.assertEquals("xnucaephblkwqp", response.inventoryItemId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
