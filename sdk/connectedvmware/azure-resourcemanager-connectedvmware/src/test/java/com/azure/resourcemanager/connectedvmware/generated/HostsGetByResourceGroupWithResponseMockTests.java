// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.HostModel;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class HostsGetByResourceGroupWithResponseMockTests {
    @Test
    public void testGetByResourceGroupWithResponse() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"uuid\":\"vrh\",\"vCenterId\":\"jyoogwxh\",\"moRefId\":\"duugwbsre\",\"inventoryItemId\":\"fqkfuarenl\",\"moName\":\"htkln\",\"statuses\":[{\"type\":\"vvkyfedevjboslcq\",\"status\":\"p\",\"reason\":\"khminqcymc\",\"message\":\"gn\",\"severity\":\"xxewu\",\"lastUpdatedAt\":\"2021-12-10T01:41:50Z\"},{\"type\":\"udbchaqdtv\",\"status\":\"crqctmxxdtddmflh\",\"reason\":\"tx\",\"message\":\"tznapxbannovv\",\"severity\":\"czytprwn\",\"lastUpdatedAt\":\"2021-09-15T03:43:23Z\"}],\"customResourceName\":\"ev\",\"overallMemoryUsageGB\":714202887842253439,\"memorySizeGB\":5614821000884332657,\"overallCpuUsageMHz\":6747447163145822843,\"cpuMhz\":6999852526015460929,\"datastoreIds\":[\"sasbcrymodizrx\"],\"networkIds\":[\"bdxnaz\",\"mkmlmvevfx\",\"op\",\"hbzxli\"],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"dtfgxqbawpcbb\",\"name\":\"qcy\"},\"kind\":\"p\",\"location\":\"ofyuicd\",\"tags\":{\"wgbdvibidmhmwffp\":\"dyb\"},\"id\":\"fmuvapckccr\",\"name\":\"vwe\",\"type\":\"oxoyyukp\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ConnectedVMwareManager manager =
            ConnectedVMwareManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        HostModel response =
            manager
                .hosts()
                .getByResourceGroupWithResponse("hpfpazjzoywjxhp", "ulontacnpqwteht", com.azure.core.util.Context.NONE)
                .getValue();

        Assertions.assertEquals("ofyuicd", response.location());
        Assertions.assertEquals("dyb", response.tags().get("wgbdvibidmhmwffp"));
        Assertions.assertEquals("dtfgxqbawpcbb", response.extendedLocation().type());
        Assertions.assertEquals("qcy", response.extendedLocation().name());
        Assertions.assertEquals("p", response.kind());
        Assertions.assertEquals("jyoogwxh", response.vCenterId());
        Assertions.assertEquals("duugwbsre", response.moRefId());
        Assertions.assertEquals("fqkfuarenl", response.inventoryItemId());
    }
}
