// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.connectedvmware.models.InventoryItemDetails;
import com.azure.resourcemanager.connectedvmware.models.InventoryType;
import com.azure.resourcemanager.connectedvmware.models.OsType;
import com.azure.resourcemanager.connectedvmware.models.VirtualMachineInventoryItem;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class VirtualMachineInventoryItemTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        VirtualMachineInventoryItem model =
            BinaryData
                .fromString(
                    "{\"inventoryType\":\"VirtualMachine\",\"osType\":\"Windows\",\"osName\":\"efdeesve\",\"ipAddresses\":[\"jpxtxsuwprtuj\",\"sawddjibabxvi\"],\"folderPath\":\"tvtzeexavoxtfg\",\"host\":{\"inventoryItemId\":\"dmdqb\",\"moName\":\"ypq\",\"inventoryType\":\"VirtualMachine\"},\"resourcePool\":{\"inventoryItemId\":\"acbslhhxu\",\"moName\":\"xvodhtnsir\",\"inventoryType\":\"Host\"},\"cluster\":{\"inventoryItemId\":\"mes\",\"moName\":\"dlpagzrcxfail\",\"inventoryType\":\"VirtualMachineTemplate\"},\"instanceUuid\":\"m\",\"smbiosUuid\":\"oxdfgsftu\",\"powerState\":\"obrjlnacgcc\",\"toolsRunningStatus\":\"nhxk\",\"toolsVersionStatus\":\"v\",\"toolsVersion\":\"nrzvuljraaer\",\"managedResourceId\":\"okqgukkjq\",\"moRefId\":\"broyla\",\"moName\":\"ulcdisdosf\",\"provisioningState\":\"Failed\"}")
                .toObject(VirtualMachineInventoryItem.class);
        Assertions.assertEquals("okqgukkjq", model.managedResourceId());
        Assertions.assertEquals("broyla", model.moRefId());
        Assertions.assertEquals("ulcdisdosf", model.moName());
        Assertions.assertEquals(OsType.WINDOWS, model.osType());
        Assertions.assertEquals("efdeesve", model.osName());
        Assertions.assertEquals("jpxtxsuwprtuj", model.ipAddresses().get(0));
        Assertions.assertEquals("tvtzeexavoxtfg", model.folderPath());
        Assertions.assertEquals("dmdqb", model.host().inventoryItemId());
        Assertions.assertEquals("ypq", model.host().moName());
        Assertions.assertEquals(InventoryType.VIRTUAL_MACHINE, model.host().inventoryType());
        Assertions.assertEquals("acbslhhxu", model.resourcePool().inventoryItemId());
        Assertions.assertEquals("xvodhtnsir", model.resourcePool().moName());
        Assertions.assertEquals(InventoryType.HOST, model.resourcePool().inventoryType());
        Assertions.assertEquals("mes", model.cluster().inventoryItemId());
        Assertions.assertEquals("dlpagzrcxfail", model.cluster().moName());
        Assertions.assertEquals(InventoryType.VIRTUAL_MACHINE_TEMPLATE, model.cluster().inventoryType());
        Assertions.assertEquals("m", model.instanceUuid());
        Assertions.assertEquals("oxdfgsftu", model.smbiosUuid());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        VirtualMachineInventoryItem model =
            new VirtualMachineInventoryItem()
                .withManagedResourceId("okqgukkjq")
                .withMoRefId("broyla")
                .withMoName("ulcdisdosf")
                .withOsType(OsType.WINDOWS)
                .withOsName("efdeesve")
                .withIpAddresses(Arrays.asList("jpxtxsuwprtuj", "sawddjibabxvi"))
                .withFolderPath("tvtzeexavoxtfg")
                .withHost(
                    new InventoryItemDetails()
                        .withInventoryItemId("dmdqb")
                        .withMoName("ypq")
                        .withInventoryType(InventoryType.VIRTUAL_MACHINE))
                .withResourcePool(
                    new InventoryItemDetails()
                        .withInventoryItemId("acbslhhxu")
                        .withMoName("xvodhtnsir")
                        .withInventoryType(InventoryType.HOST))
                .withCluster(
                    new InventoryItemDetails()
                        .withInventoryItemId("mes")
                        .withMoName("dlpagzrcxfail")
                        .withInventoryType(InventoryType.VIRTUAL_MACHINE_TEMPLATE))
                .withInstanceUuid("m")
                .withSmbiosUuid("oxdfgsftu");
        model = BinaryData.fromObject(model).toObject(VirtualMachineInventoryItem.class);
        Assertions.assertEquals("okqgukkjq", model.managedResourceId());
        Assertions.assertEquals("broyla", model.moRefId());
        Assertions.assertEquals("ulcdisdosf", model.moName());
        Assertions.assertEquals(OsType.WINDOWS, model.osType());
        Assertions.assertEquals("efdeesve", model.osName());
        Assertions.assertEquals("jpxtxsuwprtuj", model.ipAddresses().get(0));
        Assertions.assertEquals("tvtzeexavoxtfg", model.folderPath());
        Assertions.assertEquals("dmdqb", model.host().inventoryItemId());
        Assertions.assertEquals("ypq", model.host().moName());
        Assertions.assertEquals(InventoryType.VIRTUAL_MACHINE, model.host().inventoryType());
        Assertions.assertEquals("acbslhhxu", model.resourcePool().inventoryItemId());
        Assertions.assertEquals("xvodhtnsir", model.resourcePool().moName());
        Assertions.assertEquals(InventoryType.HOST, model.resourcePool().inventoryType());
        Assertions.assertEquals("mes", model.cluster().inventoryItemId());
        Assertions.assertEquals("dlpagzrcxfail", model.cluster().moName());
        Assertions.assertEquals(InventoryType.VIRTUAL_MACHINE_TEMPLATE, model.cluster().inventoryType());
        Assertions.assertEquals("m", model.instanceUuid());
        Assertions.assertEquals("oxdfgsftu", model.smbiosUuid());
    }
}
