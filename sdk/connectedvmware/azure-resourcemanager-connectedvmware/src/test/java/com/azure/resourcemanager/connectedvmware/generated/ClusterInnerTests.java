// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.connectedvmware.fluent.models.ClusterInner;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ClusterInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ClusterInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"uuid\":\"ixuigdtopbobj\",\"vCenterId\":\"hm\",\"moRefId\":\"u\",\"inventoryItemId\":\"a\",\"moName\":\"rzayv\",\"statuses\":[{\"type\":\"vdfgiotk\",\"status\":\"utqxlngx\",\"reason\":\"fgugnxkrxdqmid\",\"message\":\"hzrvqd\",\"severity\":\"bhj\",\"lastUpdatedAt\":\"2021-09-14T02:51:19Z\"},{\"type\":\"ehoqfbowskan\",\"status\":\"tzlcuiywgqywgn\",\"reason\":\"vynhzgpphrcg\",\"message\":\"cocpecfvmmcoofsx\",\"severity\":\"evgbmqjq\",\"lastUpdatedAt\":\"2021-06-25T22:17:23Z\"}],\"customResourceName\":\"pmivkwlzu\",\"usedMemoryGB\":906513872152816709,\"totalMemoryGB\":7320882812024547422,\"usedCpuMHz\":5788835821113503178,\"totalCpuMHz\":5098195644099972430,\"datastoreIds\":[\"l\",\"bxetqgtzxdpn\",\"bqqwxrj\",\"eallnwsubisnj\"],\"networkIds\":[\"mngnzscxaqw\"],\"provisioningState\":\"Created\"},\"extendedLocation\":{\"type\":\"bonqvpkvlrxnjeas\",\"name\":\"pheoflokeyy\"},\"kind\":\"jbdlwtgrhpdjpju\",\"location\":\"asxazjpqyegualhb\",\"tags\":{\"jzzvdud\":\"e\",\"pwlbjnpg\":\"wdslfhotwmcy\"},\"id\":\"cftadeh\",\"name\":\"nltyfsoppusuesnz\",\"type\":\"dejbavo\"}")
                .toObject(ClusterInner.class);
        Assertions.assertEquals("asxazjpqyegualhb", model.location());
        Assertions.assertEquals("e", model.tags().get("jzzvdud"));
        Assertions.assertEquals("bonqvpkvlrxnjeas", model.extendedLocation().type());
        Assertions.assertEquals("pheoflokeyy", model.extendedLocation().name());
        Assertions.assertEquals("jbdlwtgrhpdjpju", model.kind());
        Assertions.assertEquals("hm", model.vCenterId());
        Assertions.assertEquals("u", model.moRefId());
        Assertions.assertEquals("a", model.inventoryItemId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ClusterInner model =
            new ClusterInner()
                .withLocation("asxazjpqyegualhb")
                .withTags(mapOf("jzzvdud", "e", "pwlbjnpg", "wdslfhotwmcy"))
                .withExtendedLocation(new ExtendedLocation().withType("bonqvpkvlrxnjeas").withName("pheoflokeyy"))
                .withKind("jbdlwtgrhpdjpju")
                .withVCenterId("hm")
                .withMoRefId("u")
                .withInventoryItemId("a");
        model = BinaryData.fromObject(model).toObject(ClusterInner.class);
        Assertions.assertEquals("asxazjpqyegualhb", model.location());
        Assertions.assertEquals("e", model.tags().get("jzzvdud"));
        Assertions.assertEquals("bonqvpkvlrxnjeas", model.extendedLocation().type());
        Assertions.assertEquals("pheoflokeyy", model.extendedLocation().name());
        Assertions.assertEquals("jbdlwtgrhpdjpju", model.kind());
        Assertions.assertEquals("hm", model.vCenterId());
        Assertions.assertEquals("u", model.moRefId());
        Assertions.assertEquals("a", model.inventoryItemId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
