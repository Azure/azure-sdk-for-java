// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.connectedvmware.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.connectedvmware.ConnectedVMwareManager;
import com.azure.resourcemanager.connectedvmware.models.ExtendedLocation;
import com.azure.resourcemanager.connectedvmware.models.HostModel;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class HostsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"uuid\":\"kufykhvu\",\"vCenterId\":\"epmrut\",\"moRefId\":\"abaobnslujdjltym\",\"inventoryItemId\":\"vguihywar\",\"moName\":\"pphkixkykxds\",\"statuses\":[{\"type\":\"mmuc\",\"status\":\"hikkflrmy\",\"reason\":\"incqlhriswsl\",\"message\":\"iiovgqcgxu\",\"severity\":\"qkctotiowlxte\",\"lastUpdatedAt\":\"2021-04-15T08:31:11Z\"},{\"type\":\"jgwdtgukranbl\",\"status\":\"hqlkccuzgygqwaho\",\"reason\":\"lwgniiprglvawu\",\"message\":\"d\",\"severity\":\"ypivlsbb\",\"lastUpdatedAt\":\"2021-04-29T01:29:01Z\"},{\"type\":\"ubkmifo\",\"status\":\"ku\",\"reason\":\"phavpmhbrb\",\"message\":\"vgovpbbttefjokn\",\"severity\":\"qyzqedikdfrdb\",\"lastUpdatedAt\":\"2021-06-22T11:56:18Z\"}],\"customResourceName\":\"jgeihfqlggwfi\",\"overallMemoryUsageGB\":3713162382247099392,\"memorySizeGB\":3041349716165954671,\"overallCpuUsageMHz\":8400849047416618449,\"cpuMhz\":7984888059357254959,\"datastoreIds\":[\"vljvrc\"],\"networkIds\":[\"qipgx\"],\"provisioningState\":\"Succeeded\"},\"extendedLocation\":{\"type\":\"yqwcabvnuil\",\"name\":\"yaswlpaugmr\"},\"kind\":\"lrxw\",\"location\":\"oauk\",\"tags\":{\"oaedsxjwuivedwcg\":\"vcisiz\"},\"id\":\"eewxeiqbpsmg\",\"name\":\"mguaml\",\"type\":\"dlrgms\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        ConnectedVMwareManager manager =
            ConnectedVMwareManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        HostModel response =
            manager
                .hosts()
                .define("gjekglklby")
                .withRegion("lktgjc")
                .withExistingResourceGroup("fiqgeaar")
                .withTags(mapOf("bukklels", "uxhemlwywaeeczg", "srlsmd", "xblycsxzuj"))
                .withExtendedLocation(new ExtendedLocation().withType("aoyankcoeqswa").withName("ltytmhdr"))
                .withKind("nhd")
                .withVCenterId("jirwgdnqzbrfk")
                .withMoRefId("zhzmtksjci")
                .withInventoryItemId("igsxcdgljplk")
                .create();

        Assertions.assertEquals("oauk", response.location());
        Assertions.assertEquals("vcisiz", response.tags().get("oaedsxjwuivedwcg"));
        Assertions.assertEquals("yqwcabvnuil", response.extendedLocation().type());
        Assertions.assertEquals("yaswlpaugmr", response.extendedLocation().name());
        Assertions.assertEquals("lrxw", response.kind());
        Assertions.assertEquals("epmrut", response.vCenterId());
        Assertions.assertEquals("abaobnslujdjltym", response.moRefId());
        Assertions.assertEquals("vguihywar", response.inventoryItemId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
