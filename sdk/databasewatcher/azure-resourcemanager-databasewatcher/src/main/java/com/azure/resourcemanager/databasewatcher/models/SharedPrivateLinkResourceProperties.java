// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The generic properties of a Shared Private Link resource.
 */
@Fluent
public final class SharedPrivateLinkResourceProperties
    implements JsonSerializable<SharedPrivateLinkResourceProperties> {
    /*
     * The resource ID of the resource the shared private link resource is for.
     */
    private String privateLinkResourceId;

    /*
     * The group id from the provider of resource the shared private link resource is for.
     */
    private String groupId;

    /*
     * The request message for requesting approval of the shared private link resource.
     */
    private String requestMessage;

    /*
     * The DNS zone segment to be included in the DNS name of the shared private link. Value is required for Azure Data
     * Explorer clusters and SQL managed instances, and must be omitted for SQL logical servers and key vaults. The
     * value is the second segment of the host FQDN name of the resource that the shared private link resource is for.
     * For example: if the host name is 'adx-cluster-21187695.eastus.kusto.windows.net', then the value is 'eastus'; if
     * the host name is 'sql-mi-23961134.767d5869f605.database.windows.net', then the value is '767d5869f605'.
     */
    private String dnsZone;

    /*
     * Status of the shared private link resource. Can be Pending, Approved, Rejected or Disconnected.
     */
    private SharedPrivateLinkResourceStatus status;

    /*
     * The provisioning state of the resource.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of SharedPrivateLinkResourceProperties class.
     */
    public SharedPrivateLinkResourceProperties() {
    }

    /**
     * Get the privateLinkResourceId property: The resource ID of the resource the shared private link resource is for.
     * 
     * @return the privateLinkResourceId value.
     */
    public String privateLinkResourceId() {
        return this.privateLinkResourceId;
    }

    /**
     * Set the privateLinkResourceId property: The resource ID of the resource the shared private link resource is for.
     * 
     * @param privateLinkResourceId the privateLinkResourceId value to set.
     * @return the SharedPrivateLinkResourceProperties object itself.
     */
    public SharedPrivateLinkResourceProperties withPrivateLinkResourceId(String privateLinkResourceId) {
        this.privateLinkResourceId = privateLinkResourceId;
        return this;
    }

    /**
     * Get the groupId property: The group id from the provider of resource the shared private link resource is for.
     * 
     * @return the groupId value.
     */
    public String groupId() {
        return this.groupId;
    }

    /**
     * Set the groupId property: The group id from the provider of resource the shared private link resource is for.
     * 
     * @param groupId the groupId value to set.
     * @return the SharedPrivateLinkResourceProperties object itself.
     */
    public SharedPrivateLinkResourceProperties withGroupId(String groupId) {
        this.groupId = groupId;
        return this;
    }

    /**
     * Get the requestMessage property: The request message for requesting approval of the shared private link resource.
     * 
     * @return the requestMessage value.
     */
    public String requestMessage() {
        return this.requestMessage;
    }

    /**
     * Set the requestMessage property: The request message for requesting approval of the shared private link resource.
     * 
     * @param requestMessage the requestMessage value to set.
     * @return the SharedPrivateLinkResourceProperties object itself.
     */
    public SharedPrivateLinkResourceProperties withRequestMessage(String requestMessage) {
        this.requestMessage = requestMessage;
        return this;
    }

    /**
     * Get the dnsZone property: The DNS zone segment to be included in the DNS name of the shared private link. Value
     * is required for Azure Data Explorer clusters and SQL managed instances, and must be omitted for SQL logical
     * servers and key vaults. The value is the second segment of the host FQDN name of the resource that the shared
     * private link resource is for. For example: if the host name is 'adx-cluster-21187695.eastus.kusto.windows.net',
     * then the value is 'eastus'; if the host name is 'sql-mi-23961134.767d5869f605.database.windows.net', then the
     * value is '767d5869f605'.
     * 
     * @return the dnsZone value.
     */
    public String dnsZone() {
        return this.dnsZone;
    }

    /**
     * Set the dnsZone property: The DNS zone segment to be included in the DNS name of the shared private link. Value
     * is required for Azure Data Explorer clusters and SQL managed instances, and must be omitted for SQL logical
     * servers and key vaults. The value is the second segment of the host FQDN name of the resource that the shared
     * private link resource is for. For example: if the host name is 'adx-cluster-21187695.eastus.kusto.windows.net',
     * then the value is 'eastus'; if the host name is 'sql-mi-23961134.767d5869f605.database.windows.net', then the
     * value is '767d5869f605'.
     * 
     * @param dnsZone the dnsZone value to set.
     * @return the SharedPrivateLinkResourceProperties object itself.
     */
    public SharedPrivateLinkResourceProperties withDnsZone(String dnsZone) {
        this.dnsZone = dnsZone;
        return this;
    }

    /**
     * Get the status property: Status of the shared private link resource. Can be Pending, Approved, Rejected or
     * Disconnected.
     * 
     * @return the status value.
     */
    public SharedPrivateLinkResourceStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (privateLinkResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property privateLinkResourceId in model SharedPrivateLinkResourceProperties"));
        }
        if (groupId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property groupId in model SharedPrivateLinkResourceProperties"));
        }
        if (requestMessage() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property requestMessage in model SharedPrivateLinkResourceProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SharedPrivateLinkResourceProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("privateLinkResourceId", this.privateLinkResourceId);
        jsonWriter.writeStringField("groupId", this.groupId);
        jsonWriter.writeStringField("requestMessage", this.requestMessage);
        jsonWriter.writeStringField("dnsZone", this.dnsZone);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SharedPrivateLinkResourceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SharedPrivateLinkResourceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SharedPrivateLinkResourceProperties.
     */
    public static SharedPrivateLinkResourceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SharedPrivateLinkResourceProperties deserializedSharedPrivateLinkResourceProperties
                = new SharedPrivateLinkResourceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("privateLinkResourceId".equals(fieldName)) {
                    deserializedSharedPrivateLinkResourceProperties.privateLinkResourceId = reader.getString();
                } else if ("groupId".equals(fieldName)) {
                    deserializedSharedPrivateLinkResourceProperties.groupId = reader.getString();
                } else if ("requestMessage".equals(fieldName)) {
                    deserializedSharedPrivateLinkResourceProperties.requestMessage = reader.getString();
                } else if ("dnsZone".equals(fieldName)) {
                    deserializedSharedPrivateLinkResourceProperties.dnsZone = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedSharedPrivateLinkResourceProperties.status
                        = SharedPrivateLinkResourceStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSharedPrivateLinkResourceProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSharedPrivateLinkResourceProperties;
        });
    }
}
