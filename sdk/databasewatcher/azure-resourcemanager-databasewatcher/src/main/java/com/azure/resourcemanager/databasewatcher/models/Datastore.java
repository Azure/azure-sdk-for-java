// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a data store.
 */
@Fluent
public final class Datastore implements JsonSerializable<Datastore> {
    /*
     * The Azure resource ID of an Azure Data Explorer cluster.
     */
    private String adxClusterResourceId;

    /*
     * The Kusto cluster display name.
     */
    private String kustoClusterDisplayName;

    /*
     * The Kusto cluster URI.
     */
    private String kustoClusterUri;

    /*
     * The Kusto data ingestion URI.
     */
    private String kustoDataIngestionUri;

    /*
     * The name of a Kusto database.
     */
    private String kustoDatabaseName;

    /*
     * The Kusto management URL.
     */
    private String kustoManagementUrl;

    /*
     * The type of a Kusto offering.
     */
    private KustoOfferingType kustoOfferingType;

    /**
     * Creates an instance of Datastore class.
     */
    public Datastore() {
    }

    /**
     * Get the adxClusterResourceId property: The Azure resource ID of an Azure Data Explorer cluster.
     * 
     * @return the adxClusterResourceId value.
     */
    public String adxClusterResourceId() {
        return this.adxClusterResourceId;
    }

    /**
     * Set the adxClusterResourceId property: The Azure resource ID of an Azure Data Explorer cluster.
     * 
     * @param adxClusterResourceId the adxClusterResourceId value to set.
     * @return the Datastore object itself.
     */
    public Datastore withAdxClusterResourceId(String adxClusterResourceId) {
        this.adxClusterResourceId = adxClusterResourceId;
        return this;
    }

    /**
     * Get the kustoClusterDisplayName property: The Kusto cluster display name.
     * 
     * @return the kustoClusterDisplayName value.
     */
    public String kustoClusterDisplayName() {
        return this.kustoClusterDisplayName;
    }

    /**
     * Set the kustoClusterDisplayName property: The Kusto cluster display name.
     * 
     * @param kustoClusterDisplayName the kustoClusterDisplayName value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoClusterDisplayName(String kustoClusterDisplayName) {
        this.kustoClusterDisplayName = kustoClusterDisplayName;
        return this;
    }

    /**
     * Get the kustoClusterUri property: The Kusto cluster URI.
     * 
     * @return the kustoClusterUri value.
     */
    public String kustoClusterUri() {
        return this.kustoClusterUri;
    }

    /**
     * Set the kustoClusterUri property: The Kusto cluster URI.
     * 
     * @param kustoClusterUri the kustoClusterUri value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoClusterUri(String kustoClusterUri) {
        this.kustoClusterUri = kustoClusterUri;
        return this;
    }

    /**
     * Get the kustoDataIngestionUri property: The Kusto data ingestion URI.
     * 
     * @return the kustoDataIngestionUri value.
     */
    public String kustoDataIngestionUri() {
        return this.kustoDataIngestionUri;
    }

    /**
     * Set the kustoDataIngestionUri property: The Kusto data ingestion URI.
     * 
     * @param kustoDataIngestionUri the kustoDataIngestionUri value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoDataIngestionUri(String kustoDataIngestionUri) {
        this.kustoDataIngestionUri = kustoDataIngestionUri;
        return this;
    }

    /**
     * Get the kustoDatabaseName property: The name of a Kusto database.
     * 
     * @return the kustoDatabaseName value.
     */
    public String kustoDatabaseName() {
        return this.kustoDatabaseName;
    }

    /**
     * Set the kustoDatabaseName property: The name of a Kusto database.
     * 
     * @param kustoDatabaseName the kustoDatabaseName value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoDatabaseName(String kustoDatabaseName) {
        this.kustoDatabaseName = kustoDatabaseName;
        return this;
    }

    /**
     * Get the kustoManagementUrl property: The Kusto management URL.
     * 
     * @return the kustoManagementUrl value.
     */
    public String kustoManagementUrl() {
        return this.kustoManagementUrl;
    }

    /**
     * Set the kustoManagementUrl property: The Kusto management URL.
     * 
     * @param kustoManagementUrl the kustoManagementUrl value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoManagementUrl(String kustoManagementUrl) {
        this.kustoManagementUrl = kustoManagementUrl;
        return this;
    }

    /**
     * Get the kustoOfferingType property: The type of a Kusto offering.
     * 
     * @return the kustoOfferingType value.
     */
    public KustoOfferingType kustoOfferingType() {
        return this.kustoOfferingType;
    }

    /**
     * Set the kustoOfferingType property: The type of a Kusto offering.
     * 
     * @param kustoOfferingType the kustoOfferingType value to set.
     * @return the Datastore object itself.
     */
    public Datastore withKustoOfferingType(KustoOfferingType kustoOfferingType) {
        this.kustoOfferingType = kustoOfferingType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (kustoClusterUri() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kustoClusterUri in model Datastore"));
        }
        if (kustoDataIngestionUri() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property kustoDataIngestionUri in model Datastore"));
        }
        if (kustoDatabaseName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kustoDatabaseName in model Datastore"));
        }
        if (kustoManagementUrl() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kustoManagementUrl in model Datastore"));
        }
        if (kustoOfferingType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property kustoOfferingType in model Datastore"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(Datastore.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kustoClusterUri", this.kustoClusterUri);
        jsonWriter.writeStringField("kustoDataIngestionUri", this.kustoDataIngestionUri);
        jsonWriter.writeStringField("kustoDatabaseName", this.kustoDatabaseName);
        jsonWriter.writeStringField("kustoManagementUrl", this.kustoManagementUrl);
        jsonWriter.writeStringField("kustoOfferingType",
            this.kustoOfferingType == null ? null : this.kustoOfferingType.toString());
        jsonWriter.writeStringField("adxClusterResourceId", this.adxClusterResourceId);
        jsonWriter.writeStringField("kustoClusterDisplayName", this.kustoClusterDisplayName);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of Datastore from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of Datastore if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the Datastore.
     */
    public static Datastore fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            Datastore deserializedDatastore = new Datastore();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kustoClusterUri".equals(fieldName)) {
                    deserializedDatastore.kustoClusterUri = reader.getString();
                } else if ("kustoDataIngestionUri".equals(fieldName)) {
                    deserializedDatastore.kustoDataIngestionUri = reader.getString();
                } else if ("kustoDatabaseName".equals(fieldName)) {
                    deserializedDatastore.kustoDatabaseName = reader.getString();
                } else if ("kustoManagementUrl".equals(fieldName)) {
                    deserializedDatastore.kustoManagementUrl = reader.getString();
                } else if ("kustoOfferingType".equals(fieldName)) {
                    deserializedDatastore.kustoOfferingType = KustoOfferingType.fromString(reader.getString());
                } else if ("adxClusterResourceId".equals(fieldName)) {
                    deserializedDatastore.adxClusterResourceId = reader.getString();
                } else if ("kustoClusterDisplayName".equals(fieldName)) {
                    deserializedDatastore.kustoClusterDisplayName = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDatastore;
        });
    }
}
