// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.implementation;

import com.azure.core.management.Region;
import com.azure.core.management.SystemData;
import com.azure.core.util.Context;
import com.azure.resourcemanager.databasewatcher.fluent.models.WatcherInner;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityV4;
import com.azure.resourcemanager.databasewatcher.models.Watcher;
import com.azure.resourcemanager.databasewatcher.models.WatcherProperties;
import com.azure.resourcemanager.databasewatcher.models.WatcherUpdate;
import com.azure.resourcemanager.databasewatcher.models.WatcherUpdateProperties;
import java.util.Collections;
import java.util.Map;

public final class WatcherImpl implements Watcher, Watcher.Definition, Watcher.Update {
    private WatcherInner innerObject;

    private final com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public WatcherProperties properties() {
        return this.innerModel().properties();
    }

    public ManagedServiceIdentityV4 identity() {
        return this.innerModel().identity();
    }

    public SystemData systemData() {
        return this.innerModel().systemData();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public String resourceGroupName() {
        return resourceGroupName;
    }

    public WatcherInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String watcherName;

    private WatcherUpdate updateProperties;

    public WatcherImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public Watcher create() {
        this.innerObject = serviceManager.serviceClient()
            .getWatchers()
            .createOrUpdate(resourceGroupName, watcherName, this.innerModel(), Context.NONE);
        return this;
    }

    public Watcher create(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWatchers()
            .createOrUpdate(resourceGroupName, watcherName, this.innerModel(), context);
        return this;
    }

    WatcherImpl(String name, com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager) {
        this.innerObject = new WatcherInner();
        this.serviceManager = serviceManager;
        this.watcherName = name;
    }

    public WatcherImpl update() {
        this.updateProperties = new WatcherUpdate();
        return this;
    }

    public Watcher apply() {
        this.innerObject = serviceManager.serviceClient()
            .getWatchers()
            .update(resourceGroupName, watcherName, updateProperties, Context.NONE);
        return this;
    }

    public Watcher apply(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWatchers()
            .update(resourceGroupName, watcherName, updateProperties, context);
        return this;
    }

    WatcherImpl(WatcherInner innerObject,
        com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.watcherName = ResourceManagerUtils.getValueFromIdByName(innerObject.id(), "watchers");
    }

    public Watcher refresh() {
        this.innerObject = serviceManager.serviceClient()
            .getWatchers()
            .getByResourceGroupWithResponse(resourceGroupName, watcherName, Context.NONE)
            .getValue();
        return this;
    }

    public Watcher refresh(Context context) {
        this.innerObject = serviceManager.serviceClient()
            .getWatchers()
            .getByResourceGroupWithResponse(resourceGroupName, watcherName, context)
            .getValue();
        return this;
    }

    public Watcher start() {
        return serviceManager.watchers().start(resourceGroupName, watcherName);
    }

    public Watcher start(Context context) {
        return serviceManager.watchers().start(resourceGroupName, watcherName, context);
    }

    public Watcher stop() {
        return serviceManager.watchers().stop(resourceGroupName, watcherName);
    }

    public Watcher stop(Context context) {
        return serviceManager.watchers().stop(resourceGroupName, watcherName, context);
    }

    public WatcherImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public WatcherImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public WatcherImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateProperties.withTags(tags);
            return this;
        }
    }

    public WatcherImpl withProperties(WatcherProperties properties) {
        this.innerModel().withProperties(properties);
        return this;
    }

    public WatcherImpl withIdentity(ManagedServiceIdentityV4 identity) {
        if (isInCreateMode()) {
            this.innerModel().withIdentity(identity);
            return this;
        } else {
            this.updateProperties.withIdentity(identity);
            return this;
        }
    }

    public WatcherImpl withProperties(WatcherUpdateProperties properties) {
        this.updateProperties.withProperties(properties);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
