// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databasewatcher.fluent.TargetsClient;
import com.azure.resourcemanager.databasewatcher.fluent.models.TargetInner;
import com.azure.resourcemanager.databasewatcher.models.Target;
import com.azure.resourcemanager.databasewatcher.models.Targets;

public final class TargetsImpl implements Targets {
    private static final ClientLogger LOGGER = new ClientLogger(TargetsImpl.class);

    private final TargetsClient innerClient;

    private final com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager;

    public TargetsImpl(TargetsClient innerClient,
        com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Target> getWithResponse(String resourceGroupName, String watcherName, String targetName,
        Context context) {
        Response<TargetInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, watcherName, targetName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TargetImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Target get(String resourceGroupName, String watcherName, String targetName) {
        TargetInner inner = this.serviceClient().get(resourceGroupName, watcherName, targetName);
        if (inner != null) {
            return new TargetImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String watcherName, String targetName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, watcherName, targetName, context);
    }

    public void delete(String resourceGroupName, String watcherName, String targetName) {
        this.serviceClient().delete(resourceGroupName, watcherName, targetName);
    }

    public PagedIterable<Target> listByWatcher(String resourceGroupName, String watcherName) {
        PagedIterable<TargetInner> inner = this.serviceClient().listByWatcher(resourceGroupName, watcherName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TargetImpl(inner1, this.manager()));
    }

    public PagedIterable<Target> listByWatcher(String resourceGroupName, String watcherName, Context context) {
        PagedIterable<TargetInner> inner = this.serviceClient().listByWatcher(resourceGroupName, watcherName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new TargetImpl(inner1, this.manager()));
    }

    public Target getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String targetName = ResourceManagerUtils.getValueFromIdByName(id, "targets");
        if (targetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'targets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, watcherName, targetName, Context.NONE).getValue();
    }

    public Response<Target> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String targetName = ResourceManagerUtils.getValueFromIdByName(id, "targets");
        if (targetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'targets'.", id)));
        }
        return this.getWithResponse(resourceGroupName, watcherName, targetName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String targetName = ResourceManagerUtils.getValueFromIdByName(id, "targets");
        if (targetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'targets'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, watcherName, targetName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String targetName = ResourceManagerUtils.getValueFromIdByName(id, "targets");
        if (targetName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'targets'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, watcherName, targetName, context);
    }

    private TargetsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager manager() {
        return this.serviceManager;
    }

    public TargetImpl define(String name) {
        return new TargetImpl(name, this.manager());
    }
}
