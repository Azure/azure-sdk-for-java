// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.PagedFlux;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.PagedResponse;
import com.azure.core.http.rest.PagedResponseBase;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.databasewatcher.fluent.HealthValidationsClient;
import com.azure.resourcemanager.databasewatcher.fluent.models.HealthValidationInner;
import com.azure.resourcemanager.databasewatcher.implementation.models.HealthValidationListResult;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in HealthValidationsClient.
 */
public final class HealthValidationsClientImpl implements HealthValidationsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final HealthValidationsService service;

    /**
     * The service client containing this operation class.
     */
    private final DatabaseWatcherManagementClientImpl client;

    /**
     * Initializes an instance of HealthValidationsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    HealthValidationsClientImpl(DatabaseWatcherManagementClientImpl client) {
        this.service
            = RestProxy.create(HealthValidationsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DatabaseWatcherManagementClientHealthValidations to be used by the
     * proxy service to perform REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "DatabaseWatcherManag")
    public interface HealthValidationsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/healthValidations/{healthValidationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthValidationInner>> get(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("watcherName") String watcherName,
            @PathParam("healthValidationName") String healthValidationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/healthValidations/{healthValidationName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<HealthValidationInner> getSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("watcherName") String watcherName,
            @PathParam("healthValidationName") String healthValidationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/healthValidations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthValidationListResult>> listByParent(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("watcherName") String watcherName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/healthValidations")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<HealthValidationListResult> listByParentSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("watcherName") String watcherName,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/healthValidations/{healthValidationName}/startValidation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> startValidation(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("watcherName") String watcherName,
            @PathParam("healthValidationName") String healthValidationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DatabaseWatcher/watchers/{watcherName}/healthValidations/{healthValidationName}/startValidation")
        @ExpectedResponses({ 200, 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> startValidationSync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("resourceGroupName") String resourceGroupName, @PathParam("watcherName") String watcherName,
            @PathParam("healthValidationName") String healthValidationName, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<HealthValidationListResult>> listByParentNext(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("{nextLink}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<HealthValidationListResult> listByParentNextSync(
            @PathParam(value = "nextLink", encoded = true) String nextLink, @HostParam("endpoint") String endpoint,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthValidationInner>> getWithResponseAsync(String resourceGroupName, String watcherName,
        String healthValidationName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, watcherName, healthValidationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<HealthValidationInner>> getWithResponseAsync(String resourceGroupName, String watcherName,
        String healthValidationName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, watcherName, healthValidationName, accept, context);
    }

    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthValidationInner> getAsync(String resourceGroupName, String watcherName,
        String healthValidationName) {
        return getWithResponseAsync(resourceGroupName, watcherName, healthValidationName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<HealthValidationInner> getWithResponse(String resourceGroupName, String watcherName,
        String healthValidationName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.getSync(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
            resourceGroupName, watcherName, healthValidationName, accept, context);
    }

    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HealthValidationInner get(String resourceGroupName, String watcherName, String healthValidationName) {
        return getWithResponse(resourceGroupName, watcherName, healthValidationName, Context.NONE).getValue();
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthValidationInner>> listByParentSinglePageAsync(String resourceGroupName,
        String watcherName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParent(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, watcherName, accept, context))
            .<PagedResponse<HealthValidationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthValidationInner>> listByParentSinglePageAsync(String resourceGroupName,
        String watcherName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service
            .listByParent(this.client.getEndpoint(), this.client.getApiVersion(), this.client.getSubscriptionId(),
                resourceGroupName, watcherName, accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthValidationInner> listByParentAsync(String resourceGroupName, String watcherName) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceGroupName, watcherName),
            nextLink -> listByParentNextSinglePageAsync(nextLink));
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation as paginated response with {@link PagedFlux}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    private PagedFlux<HealthValidationInner> listByParentAsync(String resourceGroupName, String watcherName,
        Context context) {
        return new PagedFlux<>(() -> listByParentSinglePageAsync(resourceGroupName, watcherName, context),
            nextLink -> listByParentNextSinglePageAsync(nextLink, context));
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<HealthValidationInner> listByParentSinglePage(String resourceGroupName, String watcherName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<HealthValidationListResult> res
            = service.listByParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, watcherName, accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<HealthValidationInner> listByParentSinglePage(String resourceGroupName, String watcherName,
        Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<HealthValidationListResult> res
            = service.listByParentSync(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, watcherName, accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HealthValidationInner> listByParent(String resourceGroupName, String watcherName) {
        return new PagedIterable<>(() -> listByParentSinglePage(resourceGroupName, watcherName, Context.NONE),
            nextLink -> listByParentNextSinglePage(nextLink));
    }

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    public PagedIterable<HealthValidationInner> listByParent(String resourceGroupName, String watcherName,
        Context context) {
        return new PagedIterable<>(() -> listByParentSinglePage(resourceGroupName, watcherName, context),
            nextLink -> listByParentNextSinglePage(nextLink, context));
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startValidationWithResponseAsync(String resourceGroupName,
        String watcherName, String healthValidationName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.startValidation(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), resourceGroupName, watcherName, healthValidationName, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> startValidationWithResponseAsync(String resourceGroupName,
        String watcherName, String healthValidationName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.startValidation(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, watcherName, healthValidationName, accept, context);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> startValidationWithResponse(String resourceGroupName, String watcherName,
        String healthValidationName) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.startValidationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, watcherName, healthValidationName, accept,
            Context.NONE);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> startValidationWithResponse(String resourceGroupName, String watcherName,
        String healthValidationName, Context context) {
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (this.client.getSubscriptionId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getSubscriptionId() is required and cannot be null."));
        }
        if (resourceGroupName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null."));
        }
        if (watcherName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter watcherName is required and cannot be null."));
        }
        if (healthValidationName == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter healthValidationName is required and cannot be null."));
        }
        final String accept = "application/json";
        return service.startValidationSync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), resourceGroupName, watcherName, healthValidationName, accept, context);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<HealthValidationInner>, HealthValidationInner>
        beginStartValidationAsync(String resourceGroupName, String watcherName, String healthValidationName) {
        Mono<Response<Flux<ByteBuffer>>> mono
            = startValidationWithResponseAsync(resourceGroupName, watcherName, healthValidationName);
        return this.client.<HealthValidationInner, HealthValidationInner>getLroResult(mono,
            this.client.getHttpPipeline(), HealthValidationInner.class, HealthValidationInner.class,
            this.client.getContext());
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<HealthValidationInner>, HealthValidationInner> beginStartValidationAsync(
        String resourceGroupName, String watcherName, String healthValidationName, Context context) {
        context = this.client.mergeContext(context);
        Mono<Response<Flux<ByteBuffer>>> mono
            = startValidationWithResponseAsync(resourceGroupName, watcherName, healthValidationName, context);
        return this.client.<HealthValidationInner, HealthValidationInner>getLroResult(mono,
            this.client.getHttpPipeline(), HealthValidationInner.class, HealthValidationInner.class, context);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<HealthValidationInner>, HealthValidationInner>
        beginStartValidation(String resourceGroupName, String watcherName, String healthValidationName) {
        Response<BinaryData> response
            = startValidationWithResponse(resourceGroupName, watcherName, healthValidationName);
        return this.client.<HealthValidationInner, HealthValidationInner>getLroResult(response,
            HealthValidationInner.class, HealthValidationInner.class, Context.NONE);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<HealthValidationInner>, HealthValidationInner> beginStartValidation(
        String resourceGroupName, String watcherName, String healthValidationName, Context context) {
        Response<BinaryData> response
            = startValidationWithResponse(resourceGroupName, watcherName, healthValidationName, context);
        return this.client.<HealthValidationInner, HealthValidationInner>getLroResult(response,
            HealthValidationInner.class, HealthValidationInner.class, context);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthValidationInner> startValidationAsync(String resourceGroupName, String watcherName,
        String healthValidationName) {
        return beginStartValidationAsync(resourceGroupName, watcherName, healthValidationName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<HealthValidationInner> startValidationAsync(String resourceGroupName, String watcherName,
        String healthValidationName, Context context) {
        return beginStartValidationAsync(resourceGroupName, watcherName, healthValidationName, context).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HealthValidationInner startValidation(String resourceGroupName, String watcherName,
        String healthValidationName) {
        return beginStartValidation(resourceGroupName, watcherName, healthValidationName).getFinalResult();
    }

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public HealthValidationInner startValidation(String resourceGroupName, String watcherName,
        String healthValidationName, Context context) {
        return beginStartValidation(resourceGroupName, watcherName, healthValidationName, context).getFinalResult();
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthValidationInner>> listByParentNextSinglePageAsync(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context))
            .<PagedResponse<HealthValidationInner>>map(res -> new PagedResponseBase<>(res.getRequest(),
                res.getStatusCode(), res.getHeaders(), res.getValue().value(), res.getValue().nextLink(), null))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<PagedResponse<HealthValidationInner>> listByParentNextSinglePageAsync(String nextLink,
        Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.listByParentNext(nextLink, this.client.getEndpoint(), accept, context)
            .map(res -> new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(),
                res.getValue().value(), res.getValue().nextLink(), null));
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<HealthValidationInner> listByParentNextSinglePage(String nextLink) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<HealthValidationListResult> res
            = service.listByParentNextSync(nextLink, this.client.getEndpoint(), accept, Context.NONE);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    /**
     * Get the next page of items.
     * 
     * @param nextLink The URL to get the next list of items.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation along with {@link PagedResponse}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private PagedResponse<HealthValidationInner> listByParentNextSinglePage(String nextLink, Context context) {
        if (nextLink == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Parameter nextLink is required and cannot be null."));
        }
        if (this.client.getEndpoint() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        final String accept = "application/json";
        Response<HealthValidationListResult> res
            = service.listByParentNextSync(nextLink, this.client.getEndpoint(), accept, context);
        return new PagedResponseBase<>(res.getRequest(), res.getStatusCode(), res.getHeaders(), res.getValue().value(),
            res.getValue().nextLink(), null);
    }

    private static final ClientLogger LOGGER = new ClientLogger(HealthValidationsClientImpl.class);
}
