// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties specific to an elastic pool in Azure SQL Database.
 */
@Fluent
public final class SqlDbElasticPoolTargetProperties extends TargetProperties {
    /*
     * Discriminator property for TargetProperties.
     */
    private String targetType = "SqlEp";

    /*
     * The Azure resource ID of an Azure SQL DB elastic pool target.
     */
    private String sqlEpResourceId;

    /*
     * The Azure resource ID of the anchor database used to connect to an elastic pool.
     */
    private String anchorDatabaseResourceId;

    /*
     * Set to true to monitor a high availability replica of specified target, if any.
     */
    private Boolean readIntent;

    /**
     * Creates an instance of SqlDbElasticPoolTargetProperties class.
     */
    public SqlDbElasticPoolTargetProperties() {
    }

    /**
     * Get the targetType property: Discriminator property for TargetProperties.
     * 
     * @return the targetType value.
     */
    @Override
    public String targetType() {
        return this.targetType;
    }

    /**
     * Get the sqlEpResourceId property: The Azure resource ID of an Azure SQL DB elastic pool target.
     * 
     * @return the sqlEpResourceId value.
     */
    public String sqlEpResourceId() {
        return this.sqlEpResourceId;
    }

    /**
     * Set the sqlEpResourceId property: The Azure resource ID of an Azure SQL DB elastic pool target.
     * 
     * @param sqlEpResourceId the sqlEpResourceId value to set.
     * @return the SqlDbElasticPoolTargetProperties object itself.
     */
    public SqlDbElasticPoolTargetProperties withSqlEpResourceId(String sqlEpResourceId) {
        this.sqlEpResourceId = sqlEpResourceId;
        return this;
    }

    /**
     * Get the anchorDatabaseResourceId property: The Azure resource ID of the anchor database used to connect to an
     * elastic pool.
     * 
     * @return the anchorDatabaseResourceId value.
     */
    public String anchorDatabaseResourceId() {
        return this.anchorDatabaseResourceId;
    }

    /**
     * Set the anchorDatabaseResourceId property: The Azure resource ID of the anchor database used to connect to an
     * elastic pool.
     * 
     * @param anchorDatabaseResourceId the anchorDatabaseResourceId value to set.
     * @return the SqlDbElasticPoolTargetProperties object itself.
     */
    public SqlDbElasticPoolTargetProperties withAnchorDatabaseResourceId(String anchorDatabaseResourceId) {
        this.anchorDatabaseResourceId = anchorDatabaseResourceId;
        return this;
    }

    /**
     * Get the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @return the readIntent value.
     */
    public Boolean readIntent() {
        return this.readIntent;
    }

    /**
     * Set the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @param readIntent the readIntent value to set.
     * @return the SqlDbElasticPoolTargetProperties object itself.
     */
    public SqlDbElasticPoolTargetProperties withReadIntent(Boolean readIntent) {
        this.readIntent = readIntent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties
        withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        super.withTargetAuthenticationType(targetAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties withTargetVault(VaultSecret targetVault) {
        super.withTargetVault(targetVault);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbElasticPoolTargetProperties withConnectionServerName(String connectionServerName) {
        super.withConnectionServerName(connectionServerName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sqlEpResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sqlEpResourceId in model SqlDbElasticPoolTargetProperties"));
        }
        if (anchorDatabaseResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property anchorDatabaseResourceId in model SqlDbElasticPoolTargetProperties"));
        }
        if (targetAuthenticationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetAuthenticationType in model SqlDbElasticPoolTargetProperties"));
        }
        if (targetVault() != null) {
            targetVault().validate();
        }
        if (connectionServerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionServerName in model SqlDbElasticPoolTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlDbElasticPoolTargetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetAuthenticationType",
            targetAuthenticationType() == null ? null : targetAuthenticationType().toString());
        jsonWriter.writeStringField("connectionServerName", connectionServerName());
        jsonWriter.writeJsonField("targetVault", targetVault());
        jsonWriter.writeStringField("sqlEpResourceId", this.sqlEpResourceId);
        jsonWriter.writeStringField("anchorDatabaseResourceId", this.anchorDatabaseResourceId);
        jsonWriter.writeStringField("targetType", this.targetType);
        jsonWriter.writeBooleanField("readIntent", this.readIntent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDbElasticPoolTargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDbElasticPoolTargetProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlDbElasticPoolTargetProperties.
     */
    public static SqlDbElasticPoolTargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDbElasticPoolTargetProperties deserializedSqlDbElasticPoolTargetProperties
                = new SqlDbElasticPoolTargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetAuthenticationType".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties
                        .withTargetAuthenticationType(TargetAuthenticationType.fromString(reader.getString()));
                } else if ("connectionServerName".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties.withConnectionServerName(reader.getString());
                } else if ("targetVault".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties.withTargetVault(VaultSecret.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties
                        .withProvisioningState(ResourceProvisioningState.fromString(reader.getString()));
                } else if ("sqlEpResourceId".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties.sqlEpResourceId = reader.getString();
                } else if ("anchorDatabaseResourceId".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties.anchorDatabaseResourceId = reader.getString();
                } else if ("targetType".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties.targetType = reader.getString();
                } else if ("readIntent".equals(fieldName)) {
                    deserializedSqlDbElasticPoolTargetProperties.readIntent
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDbElasticPoolTargetProperties;
        });
    }
}
