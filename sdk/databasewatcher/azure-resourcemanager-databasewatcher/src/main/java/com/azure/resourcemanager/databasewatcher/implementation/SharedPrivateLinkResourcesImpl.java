// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databasewatcher.fluent.SharedPrivateLinkResourcesClient;
import com.azure.resourcemanager.databasewatcher.fluent.models.SharedPrivateLinkResourceInner;
import com.azure.resourcemanager.databasewatcher.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.databasewatcher.models.SharedPrivateLinkResources;

public final class SharedPrivateLinkResourcesImpl implements SharedPrivateLinkResources {
    private static final ClientLogger LOGGER = new ClientLogger(SharedPrivateLinkResourcesImpl.class);

    private final SharedPrivateLinkResourcesClient innerClient;

    private final com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager;

    public SharedPrivateLinkResourcesImpl(SharedPrivateLinkResourcesClient innerClient,
        com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<SharedPrivateLinkResource> getWithResponse(String resourceGroupName, String watcherName,
        String sharedPrivateLinkResourceName, Context context) {
        Response<SharedPrivateLinkResourceInner> inner = this.serviceClient()
            .getWithResponse(resourceGroupName, watcherName, sharedPrivateLinkResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new SharedPrivateLinkResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public SharedPrivateLinkResource get(String resourceGroupName, String watcherName,
        String sharedPrivateLinkResourceName) {
        SharedPrivateLinkResourceInner inner
            = this.serviceClient().get(resourceGroupName, watcherName, sharedPrivateLinkResourceName);
        if (inner != null) {
            return new SharedPrivateLinkResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String watcherName, String sharedPrivateLinkResourceName) {
        this.serviceClient().delete(resourceGroupName, watcherName, sharedPrivateLinkResourceName);
    }

    public void delete(String resourceGroupName, String watcherName, String sharedPrivateLinkResourceName,
        Context context) {
        this.serviceClient().delete(resourceGroupName, watcherName, sharedPrivateLinkResourceName, context);
    }

    public PagedIterable<SharedPrivateLinkResource> listByWatcher(String resourceGroupName, String watcherName) {
        PagedIterable<SharedPrivateLinkResourceInner> inner
            = this.serviceClient().listByWatcher(resourceGroupName, watcherName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<SharedPrivateLinkResource> listByWatcher(String resourceGroupName, String watcherName,
        Context context) {
        PagedIterable<SharedPrivateLinkResourceInner> inner
            = this.serviceClient().listByWatcher(resourceGroupName, watcherName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new SharedPrivateLinkResourceImpl(inner1, this.manager()));
    }

    public SharedPrivateLinkResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String sharedPrivateLinkResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, watcherName, sharedPrivateLinkResourceName, Context.NONE)
            .getValue();
    }

    public Response<SharedPrivateLinkResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String sharedPrivateLinkResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, watcherName, sharedPrivateLinkResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String sharedPrivateLinkResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.", id)));
        }
        this.delete(resourceGroupName, watcherName, sharedPrivateLinkResourceName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String sharedPrivateLinkResourceName
            = ResourceManagerUtils.getValueFromIdByName(id, "sharedPrivateLinkResources");
        if (sharedPrivateLinkResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(String
                .format("The resource ID '%s' is not valid. Missing path segment 'sharedPrivateLinkResources'.", id)));
        }
        this.delete(resourceGroupName, watcherName, sharedPrivateLinkResourceName, context);
    }

    private SharedPrivateLinkResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager manager() {
        return this.serviceManager;
    }

    public SharedPrivateLinkResourceImpl define(String name) {
        return new SharedPrivateLinkResourceImpl(name, this.manager());
    }
}
