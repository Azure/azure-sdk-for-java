// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.databasewatcher.fluent.AlertRuleResourcesClient;
import com.azure.resourcemanager.databasewatcher.fluent.models.AlertRuleResourceInner;
import com.azure.resourcemanager.databasewatcher.models.AlertRuleResource;
import com.azure.resourcemanager.databasewatcher.models.AlertRuleResources;

public final class AlertRuleResourcesImpl implements AlertRuleResources {
    private static final ClientLogger LOGGER = new ClientLogger(AlertRuleResourcesImpl.class);

    private final AlertRuleResourcesClient innerClient;

    private final com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager;

    public AlertRuleResourcesImpl(AlertRuleResourcesClient innerClient,
        com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<AlertRuleResource> getWithResponse(String resourceGroupName, String watcherName,
        String alertRuleResourceName, Context context) {
        Response<AlertRuleResourceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, watcherName, alertRuleResourceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new AlertRuleResourceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public AlertRuleResource get(String resourceGroupName, String watcherName, String alertRuleResourceName) {
        AlertRuleResourceInner inner = this.serviceClient().get(resourceGroupName, watcherName, alertRuleResourceName);
        if (inner != null) {
            return new AlertRuleResourceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String resourceGroupName, String watcherName, String alertRuleResourceName,
        Context context) {
        return this.serviceClient().deleteWithResponse(resourceGroupName, watcherName, alertRuleResourceName, context);
    }

    public void delete(String resourceGroupName, String watcherName, String alertRuleResourceName) {
        this.serviceClient().delete(resourceGroupName, watcherName, alertRuleResourceName);
    }

    public PagedIterable<AlertRuleResource> listByParent(String resourceGroupName, String watcherName) {
        PagedIterable<AlertRuleResourceInner> inner = this.serviceClient().listByParent(resourceGroupName, watcherName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertRuleResourceImpl(inner1, this.manager()));
    }

    public PagedIterable<AlertRuleResource> listByParent(String resourceGroupName, String watcherName,
        Context context) {
        PagedIterable<AlertRuleResourceInner> inner
            = this.serviceClient().listByParent(resourceGroupName, watcherName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new AlertRuleResourceImpl(inner1, this.manager()));
    }

    public AlertRuleResource getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String alertRuleResourceName = ResourceManagerUtils.getValueFromIdByName(id, "alertRuleResources");
        if (alertRuleResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alertRuleResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, watcherName, alertRuleResourceName, Context.NONE).getValue();
    }

    public Response<AlertRuleResource> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String alertRuleResourceName = ResourceManagerUtils.getValueFromIdByName(id, "alertRuleResources");
        if (alertRuleResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alertRuleResources'.", id)));
        }
        return this.getWithResponse(resourceGroupName, watcherName, alertRuleResourceName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String alertRuleResourceName = ResourceManagerUtils.getValueFromIdByName(id, "alertRuleResources");
        if (alertRuleResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alertRuleResources'.", id)));
        }
        this.deleteWithResponse(resourceGroupName, watcherName, alertRuleResourceName, Context.NONE);
    }

    public Response<Void> deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String watcherName = ResourceManagerUtils.getValueFromIdByName(id, "watchers");
        if (watcherName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'watchers'.", id)));
        }
        String alertRuleResourceName = ResourceManagerUtils.getValueFromIdByName(id, "alertRuleResources");
        if (alertRuleResourceName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'alertRuleResources'.", id)));
        }
        return this.deleteWithResponse(resourceGroupName, watcherName, alertRuleResourceName, context);
    }

    private AlertRuleResourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager manager() {
        return this.serviceManager;
    }

    public AlertRuleResourceImpl define(String name) {
        return new AlertRuleResourceImpl(name, this.manager());
    }
}
