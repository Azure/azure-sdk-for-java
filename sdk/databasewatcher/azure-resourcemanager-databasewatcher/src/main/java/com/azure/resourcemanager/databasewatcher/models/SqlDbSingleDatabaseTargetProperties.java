// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties specific to a database in Azure SQL Database.
 */
@Fluent
public final class SqlDbSingleDatabaseTargetProperties extends TargetProperties {
    /*
     * Discriminator property for TargetProperties.
     */
    private String targetType = "SqlDb";

    /*
     * The Azure resource ID of an Azure SQL DB database target.
     */
    private String sqlDbResourceId;

    /*
     * Set to true to monitor a high availability replica of specified target, if any.
     */
    private Boolean readIntent;

    /**
     * Creates an instance of SqlDbSingleDatabaseTargetProperties class.
     */
    public SqlDbSingleDatabaseTargetProperties() {
    }

    /**
     * Get the targetType property: Discriminator property for TargetProperties.
     * 
     * @return the targetType value.
     */
    @Override
    public String targetType() {
        return this.targetType;
    }

    /**
     * Get the sqlDbResourceId property: The Azure resource ID of an Azure SQL DB database target.
     * 
     * @return the sqlDbResourceId value.
     */
    public String sqlDbResourceId() {
        return this.sqlDbResourceId;
    }

    /**
     * Set the sqlDbResourceId property: The Azure resource ID of an Azure SQL DB database target.
     * 
     * @param sqlDbResourceId the sqlDbResourceId value to set.
     * @return the SqlDbSingleDatabaseTargetProperties object itself.
     */
    public SqlDbSingleDatabaseTargetProperties withSqlDbResourceId(String sqlDbResourceId) {
        this.sqlDbResourceId = sqlDbResourceId;
        return this;
    }

    /**
     * Get the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @return the readIntent value.
     */
    public Boolean readIntent() {
        return this.readIntent;
    }

    /**
     * Set the readIntent property: Set to true to monitor a high availability replica of specified target, if any.
     * 
     * @param readIntent the readIntent value to set.
     * @return the SqlDbSingleDatabaseTargetProperties object itself.
     */
    public SqlDbSingleDatabaseTargetProperties withReadIntent(Boolean readIntent) {
        this.readIntent = readIntent;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbSingleDatabaseTargetProperties
        withTargetAuthenticationType(TargetAuthenticationType targetAuthenticationType) {
        super.withTargetAuthenticationType(targetAuthenticationType);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbSingleDatabaseTargetProperties withTargetVault(VaultSecret targetVault) {
        super.withTargetVault(targetVault);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SqlDbSingleDatabaseTargetProperties withConnectionServerName(String connectionServerName) {
        super.withConnectionServerName(connectionServerName);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        if (sqlDbResourceId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property sqlDbResourceId in model SqlDbSingleDatabaseTargetProperties"));
        }
        if (targetAuthenticationType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property targetAuthenticationType in model SqlDbSingleDatabaseTargetProperties"));
        }
        if (targetVault() != null) {
            targetVault().validate();
        }
        if (connectionServerName() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property connectionServerName in model SqlDbSingleDatabaseTargetProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(SqlDbSingleDatabaseTargetProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("targetAuthenticationType",
            targetAuthenticationType() == null ? null : targetAuthenticationType().toString());
        jsonWriter.writeStringField("connectionServerName", connectionServerName());
        jsonWriter.writeJsonField("targetVault", targetVault());
        jsonWriter.writeStringField("sqlDbResourceId", this.sqlDbResourceId);
        jsonWriter.writeStringField("targetType", this.targetType);
        jsonWriter.writeBooleanField("readIntent", this.readIntent);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SqlDbSingleDatabaseTargetProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SqlDbSingleDatabaseTargetProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SqlDbSingleDatabaseTargetProperties.
     */
    public static SqlDbSingleDatabaseTargetProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SqlDbSingleDatabaseTargetProperties deserializedSqlDbSingleDatabaseTargetProperties
                = new SqlDbSingleDatabaseTargetProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targetAuthenticationType".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties
                        .withTargetAuthenticationType(TargetAuthenticationType.fromString(reader.getString()));
                } else if ("connectionServerName".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties.withConnectionServerName(reader.getString());
                } else if ("targetVault".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties.withTargetVault(VaultSecret.fromJson(reader));
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties
                        .withProvisioningState(ResourceProvisioningState.fromString(reader.getString()));
                } else if ("sqlDbResourceId".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties.sqlDbResourceId = reader.getString();
                } else if ("targetType".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties.targetType = reader.getString();
                } else if ("readIntent".equals(fieldName)) {
                    deserializedSqlDbSingleDatabaseTargetProperties.readIntent
                        = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSqlDbSingleDatabaseTargetProperties;
        });
    }
}
