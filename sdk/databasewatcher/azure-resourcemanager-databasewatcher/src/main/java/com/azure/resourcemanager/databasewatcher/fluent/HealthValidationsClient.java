// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.databasewatcher.fluent.models.HealthValidationInner;

/**
 * An instance of this class provides access to all the operations defined in HealthValidationsClient.
 */
public interface HealthValidationsClient {
    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<HealthValidationInner> getWithResponse(String resourceGroupName, String watcherName,
        String healthValidationName, Context context);

    /**
     * Get a HealthValidation.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a HealthValidation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HealthValidationInner get(String resourceGroupName, String watcherName, String healthValidationName);

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HealthValidationInner> listByParent(String resourceGroupName, String watcherName);

    /**
     * List HealthValidation resources by Watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a HealthValidation list operation as paginated response with {@link PagedIterable}.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<HealthValidationInner> listByParent(String resourceGroupName, String watcherName, Context context);

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<HealthValidationInner>, HealthValidationInner> beginStartValidation(String resourceGroupName,
        String watcherName, String healthValidationName);

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    SyncPoller<PollResult<HealthValidationInner>, HealthValidationInner> beginStartValidation(String resourceGroupName,
        String watcherName, String healthValidationName, Context context);

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HealthValidationInner startValidation(String resourceGroupName, String watcherName, String healthValidationName);

    /**
     * Starts health validation for a watcher.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param watcherName The database watcher name.
     * @param healthValidationName The health validation resource name.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    HealthValidationInner startValidation(String resourceGroupName, String watcherName, String healthValidationName,
        Context context);
}
