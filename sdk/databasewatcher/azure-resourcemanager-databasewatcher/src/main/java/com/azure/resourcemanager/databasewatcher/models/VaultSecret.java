// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The vault specific details required if using SQL authentication to connect to a target.
 */
@Fluent
public final class VaultSecret implements JsonSerializable<VaultSecret> {
    /*
     * The Azure resource ID of the Key Vault instance storing database authentication secrets.
     */
    private String akvResourceId;

    /*
     * The path to the Key Vault secret storing the login name (aka user name, aka account name) for authentication to a
     * target.
     */
    private String akvTargetUser;

    /*
     * The path to the Key Vault secret storing the password for authentication to a target.
     */
    private String akvTargetPassword;

    /**
     * Creates an instance of VaultSecret class.
     */
    public VaultSecret() {
    }

    /**
     * Get the akvResourceId property: The Azure resource ID of the Key Vault instance storing database authentication
     * secrets.
     * 
     * @return the akvResourceId value.
     */
    public String akvResourceId() {
        return this.akvResourceId;
    }

    /**
     * Set the akvResourceId property: The Azure resource ID of the Key Vault instance storing database authentication
     * secrets.
     * 
     * @param akvResourceId the akvResourceId value to set.
     * @return the VaultSecret object itself.
     */
    public VaultSecret withAkvResourceId(String akvResourceId) {
        this.akvResourceId = akvResourceId;
        return this;
    }

    /**
     * Get the akvTargetUser property: The path to the Key Vault secret storing the login name (aka user name, aka
     * account name) for authentication to a target.
     * 
     * @return the akvTargetUser value.
     */
    public String akvTargetUser() {
        return this.akvTargetUser;
    }

    /**
     * Set the akvTargetUser property: The path to the Key Vault secret storing the login name (aka user name, aka
     * account name) for authentication to a target.
     * 
     * @param akvTargetUser the akvTargetUser value to set.
     * @return the VaultSecret object itself.
     */
    public VaultSecret withAkvTargetUser(String akvTargetUser) {
        this.akvTargetUser = akvTargetUser;
        return this;
    }

    /**
     * Get the akvTargetPassword property: The path to the Key Vault secret storing the password for authentication to a
     * target.
     * 
     * @return the akvTargetPassword value.
     */
    public String akvTargetPassword() {
        return this.akvTargetPassword;
    }

    /**
     * Set the akvTargetPassword property: The path to the Key Vault secret storing the password for authentication to a
     * target.
     * 
     * @param akvTargetPassword the akvTargetPassword value to set.
     * @return the VaultSecret object itself.
     */
    public VaultSecret withAkvTargetPassword(String akvTargetPassword) {
        this.akvTargetPassword = akvTargetPassword;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("akvResourceId", this.akvResourceId);
        jsonWriter.writeStringField("akvTargetUser", this.akvTargetUser);
        jsonWriter.writeStringField("akvTargetPassword", this.akvTargetPassword);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VaultSecret from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VaultSecret if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VaultSecret.
     */
    public static VaultSecret fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VaultSecret deserializedVaultSecret = new VaultSecret();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("akvResourceId".equals(fieldName)) {
                    deserializedVaultSecret.akvResourceId = reader.getString();
                } else if ("akvTargetUser".equals(fieldName)) {
                    deserializedVaultSecret.akvTargetUser = reader.getString();
                } else if ("akvTargetPassword".equals(fieldName)) {
                    deserializedVaultSecret.akvTargetPassword = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVaultSecret;
        });
    }
}
