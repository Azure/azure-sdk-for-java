// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * The generic properties of the health validation resource.
 */
@Immutable
public final class HealthValidationProperties implements JsonSerializable<HealthValidationProperties> {
    /*
     * The start time of health validation, in UTC.
     */
    private OffsetDateTime startTime;

    /*
     * The end time of health validation, in UTC.
     */
    private OffsetDateTime endTime;

    /*
     * The current health validation status.
     */
    private ValidationStatus status;

    /*
     * The list of issues found by health validation.
     */
    private List<ValidationIssue> issues;

    /*
     * The provisioning state of the health validation resource.
     */
    private ResourceProvisioningState provisioningState;

    /**
     * Creates an instance of HealthValidationProperties class.
     */
    private HealthValidationProperties() {
    }

    /**
     * Get the startTime property: The start time of health validation, in UTC.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Get the endTime property: The end time of health validation, in UTC.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Get the status property: The current health validation status.
     * 
     * @return the status value.
     */
    public ValidationStatus status() {
        return this.status;
    }

    /**
     * Get the issues property: The list of issues found by health validation.
     * 
     * @return the issues value.
     */
    public List<ValidationIssue> issues() {
        return this.issues;
    }

    /**
     * Get the provisioningState property: The provisioning state of the health validation resource.
     * 
     * @return the provisioningState value.
     */
    public ResourceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (issues() != null) {
            issues().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HealthValidationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HealthValidationProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HealthValidationProperties.
     */
    public static HealthValidationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HealthValidationProperties deserializedHealthValidationProperties = new HealthValidationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedHealthValidationProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedHealthValidationProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("status".equals(fieldName)) {
                    deserializedHealthValidationProperties.status = ValidationStatus.fromString(reader.getString());
                } else if ("issues".equals(fieldName)) {
                    List<ValidationIssue> issues = reader.readArray(reader1 -> ValidationIssue.fromJson(reader1));
                    deserializedHealthValidationProperties.issues = issues;
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedHealthValidationProperties.provisioningState
                        = ResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHealthValidationProperties;
        });
    }
}
