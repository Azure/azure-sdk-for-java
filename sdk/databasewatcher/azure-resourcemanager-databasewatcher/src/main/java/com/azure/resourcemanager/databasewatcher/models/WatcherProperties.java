// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The RP specific properties of the resource.
 */
@Fluent
public final class WatcherProperties implements JsonSerializable<WatcherProperties> {
    /*
     * The data store for collected monitoring data.
     */
    private Datastore datastore;

    /*
     * The monitoring collection status of the watcher.
     */
    private WatcherStatus status;

    /*
     * The provisioning state of the resource watcher.
     */
    private DatabaseWatcherProvisioningState provisioningState;

    /*
     * The resource ID of a user-assigned managed identity that will be assigned to a new alert rule.
     */
    private String defaultAlertRuleIdentityResourceId;

    /**
     * Creates an instance of WatcherProperties class.
     */
    public WatcherProperties() {
    }

    /**
     * Get the datastore property: The data store for collected monitoring data.
     * 
     * @return the datastore value.
     */
    public Datastore datastore() {
        return this.datastore;
    }

    /**
     * Set the datastore property: The data store for collected monitoring data.
     * 
     * @param datastore the datastore value to set.
     * @return the WatcherProperties object itself.
     */
    public WatcherProperties withDatastore(Datastore datastore) {
        this.datastore = datastore;
        return this;
    }

    /**
     * Get the status property: The monitoring collection status of the watcher.
     * 
     * @return the status value.
     */
    public WatcherStatus status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource watcher.
     * 
     * @return the provisioningState value.
     */
    public DatabaseWatcherProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the defaultAlertRuleIdentityResourceId property: The resource ID of a user-assigned managed identity that
     * will be assigned to a new alert rule.
     * 
     * @return the defaultAlertRuleIdentityResourceId value.
     */
    public String defaultAlertRuleIdentityResourceId() {
        return this.defaultAlertRuleIdentityResourceId;
    }

    /**
     * Set the defaultAlertRuleIdentityResourceId property: The resource ID of a user-assigned managed identity that
     * will be assigned to a new alert rule.
     * 
     * @param defaultAlertRuleIdentityResourceId the defaultAlertRuleIdentityResourceId value to set.
     * @return the WatcherProperties object itself.
     */
    public WatcherProperties withDefaultAlertRuleIdentityResourceId(String defaultAlertRuleIdentityResourceId) {
        this.defaultAlertRuleIdentityResourceId = defaultAlertRuleIdentityResourceId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (datastore() != null) {
            datastore().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("datastore", this.datastore);
        jsonWriter.writeStringField("defaultAlertRuleIdentityResourceId", this.defaultAlertRuleIdentityResourceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WatcherProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WatcherProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the WatcherProperties.
     */
    public static WatcherProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WatcherProperties deserializedWatcherProperties = new WatcherProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("datastore".equals(fieldName)) {
                    deserializedWatcherProperties.datastore = Datastore.fromJson(reader);
                } else if ("status".equals(fieldName)) {
                    deserializedWatcherProperties.status = WatcherStatus.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWatcherProperties.provisioningState
                        = DatabaseWatcherProvisioningState.fromString(reader.getString());
                } else if ("defaultAlertRuleIdentityResourceId".equals(fieldName)) {
                    deserializedWatcherProperties.defaultAlertRuleIdentityResourceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWatcherProperties;
        });
    }
}
