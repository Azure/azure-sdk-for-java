// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager;
import com.azure.resourcemanager.databasewatcher.models.SharedPrivateLinkResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SharedPrivateLinkResourcesListByWatcherMockTests {
    @Test
    public void testListByWatcher() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"privateLinkResourceId\":\"ubex\",\"groupId\":\"pzk\",\"requestMessage\":\"mond\",\"dnsZone\":\"quxvypomgkop\",\"status\":\"Disconnected\",\"provisioningState\":\"Canceled\"},\"id\":\"pajqgxysm\",\"name\":\"cmbqfqvmk\",\"type\":\"xozap\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabaseWatcherManager manager = DatabaseWatcherManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<SharedPrivateLinkResource> response = manager.sharedPrivateLinkResources()
            .listByWatcher("yhrfouyftaakcpw", "yzvqt", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ubex", response.iterator().next().properties().privateLinkResourceId());
        Assertions.assertEquals("pzk", response.iterator().next().properties().groupId());
        Assertions.assertEquals("mond", response.iterator().next().properties().requestMessage());
        Assertions.assertEquals("quxvypomgkop", response.iterator().next().properties().dnsZone());
    }
}
