// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityV4;
import com.azure.resourcemanager.databasewatcher.models.UserAssignedIdentity;
import com.azure.resourcemanager.databasewatcher.models.WatcherUpdate;
import com.azure.resourcemanager.databasewatcher.models.WatcherUpdateProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WatcherUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherUpdate model = BinaryData.fromString(
            "{\"identity\":{\"principalId\":\"mgxsab\",\"tenantId\":\"qduujitcjczdz\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"jfeusnh\":{\"clientId\":\"krwpdap\",\"principalId\":\"sbdkvwr\"},\"jzzd\":{\"clientId\":\"je\",\"principalId\":\"mrldhu\"},\"aozwyiftyhxhu\":{\"clientId\":\"qxhocdgeablgphut\",\"principalId\":\"ndv\"},\"cukjf\":{\"clientId\":\"k\",\"principalId\":\"yxolniwp\"}}},\"tags\":{\"plwckbas\":\"awxklr\",\"cph\":\"ypnddhsgcb\"},\"properties\":{\"datastore\":{\"adxClusterResourceId\":\"tynqgoul\",\"kustoClusterDisplayName\":\"dlikwyqkgfgibma\",\"kustoClusterUri\":\"gakeqsr\",\"kustoDataIngestionUri\":\"yb\",\"kustoDatabaseName\":\"qqedqytbciqfou\",\"kustoManagementUrl\":\"lmmnkzsmodmglo\",\"kustoOfferingType\":\"fabric\"},\"defaultAlertRuleIdentityResourceId\":\"b\"}}")
            .toObject(WatcherUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("awxklr", model.tags().get("plwckbas"));
        Assertions.assertEquals("tynqgoul", model.properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("dlikwyqkgfgibma", model.properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("gakeqsr", model.properties().datastore().kustoClusterUri());
        Assertions.assertEquals("yb", model.properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("qqedqytbciqfou", model.properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("lmmnkzsmodmglo", model.properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FABRIC, model.properties().datastore().kustoOfferingType());
        Assertions.assertEquals("b", model.properties().defaultAlertRuleIdentityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherUpdate model
            = new WatcherUpdate()
                .withIdentity(new ManagedServiceIdentityV4().withType(ManagedServiceIdentityType.USER_ASSIGNED)
                    .withUserAssignedIdentities(
                        mapOf("jfeusnh", new UserAssignedIdentity(), "jzzd", new UserAssignedIdentity(),
                            "aozwyiftyhxhu", new UserAssignedIdentity(), "cukjf", new UserAssignedIdentity())))
                .withTags(mapOf("plwckbas", "awxklr", "cph", "ypnddhsgcb"))
                .withProperties(
                    new WatcherUpdateProperties()
                        .withDatastore(new Datastore().withAdxClusterResourceId("tynqgoul")
                            .withKustoClusterDisplayName("dlikwyqkgfgibma")
                            .withKustoClusterUri("gakeqsr")
                            .withKustoDataIngestionUri("yb")
                            .withKustoDatabaseName("qqedqytbciqfou")
                            .withKustoManagementUrl("lmmnkzsmodmglo")
                            .withKustoOfferingType(KustoOfferingType.FABRIC))
                        .withDefaultAlertRuleIdentityResourceId("b"));
        model = BinaryData.fromObject(model).toObject(WatcherUpdate.class);
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions.assertEquals("awxklr", model.tags().get("plwckbas"));
        Assertions.assertEquals("tynqgoul", model.properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("dlikwyqkgfgibma", model.properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("gakeqsr", model.properties().datastore().kustoClusterUri());
        Assertions.assertEquals("yb", model.properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("qqedqytbciqfou", model.properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("lmmnkzsmodmglo", model.properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FABRIC, model.properties().datastore().kustoOfferingType());
        Assertions.assertEquals("b", model.properties().defaultAlertRuleIdentityResourceId());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
