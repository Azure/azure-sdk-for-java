// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.WatcherUpdateProperties;
import org.junit.jupiter.api.Assertions;

public final class WatcherUpdatePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherUpdateProperties model = BinaryData.fromString(
            "{\"datastore\":{\"adxClusterResourceId\":\"mutduqktaps\",\"kustoClusterDisplayName\":\"gcue\",\"kustoClusterUri\":\"tumkdosvqwhbm\",\"kustoDataIngestionUri\":\"gbbjfddgmbmbe\",\"kustoDatabaseName\":\"ppbhtqqrolfp\",\"kustoManagementUrl\":\"psalgbqux\",\"kustoOfferingType\":\"adx\"},\"defaultAlertRuleIdentityResourceId\":\"yjgzjaoyfhrtxiln\"}")
            .toObject(WatcherUpdateProperties.class);
        Assertions.assertEquals("mutduqktaps", model.datastore().adxClusterResourceId());
        Assertions.assertEquals("gcue", model.datastore().kustoClusterDisplayName());
        Assertions.assertEquals("tumkdosvqwhbm", model.datastore().kustoClusterUri());
        Assertions.assertEquals("gbbjfddgmbmbe", model.datastore().kustoDataIngestionUri());
        Assertions.assertEquals("ppbhtqqrolfp", model.datastore().kustoDatabaseName());
        Assertions.assertEquals("psalgbqux", model.datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.ADX, model.datastore().kustoOfferingType());
        Assertions.assertEquals("yjgzjaoyfhrtxiln", model.defaultAlertRuleIdentityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherUpdateProperties model = new WatcherUpdateProperties()
            .withDatastore(new Datastore().withAdxClusterResourceId("mutduqktaps")
                .withKustoClusterDisplayName("gcue")
                .withKustoClusterUri("tumkdosvqwhbm")
                .withKustoDataIngestionUri("gbbjfddgmbmbe")
                .withKustoDatabaseName("ppbhtqqrolfp")
                .withKustoManagementUrl("psalgbqux")
                .withKustoOfferingType(KustoOfferingType.ADX))
            .withDefaultAlertRuleIdentityResourceId("yjgzjaoyfhrtxiln");
        model = BinaryData.fromObject(model).toObject(WatcherUpdateProperties.class);
        Assertions.assertEquals("mutduqktaps", model.datastore().adxClusterResourceId());
        Assertions.assertEquals("gcue", model.datastore().kustoClusterDisplayName());
        Assertions.assertEquals("tumkdosvqwhbm", model.datastore().kustoClusterUri());
        Assertions.assertEquals("gbbjfddgmbmbe", model.datastore().kustoDataIngestionUri());
        Assertions.assertEquals("ppbhtqqrolfp", model.datastore().kustoDatabaseName());
        Assertions.assertEquals("psalgbqux", model.datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.ADX, model.datastore().kustoOfferingType());
        Assertions.assertEquals("yjgzjaoyfhrtxiln", model.defaultAlertRuleIdentityResourceId());
    }
}
