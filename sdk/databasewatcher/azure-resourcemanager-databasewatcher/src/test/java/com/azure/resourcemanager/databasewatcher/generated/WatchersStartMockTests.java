// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databasewatcher.models.Watcher;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WatchersStartMockTests {
    @Test
    public void testStart() throws Exception {
        String responseStr
            = "{\"properties\":{\"datastore\":{\"adxClusterResourceId\":\"gmgsxnkjzkde\",\"kustoClusterDisplayName\":\"pvlopwiyighxpkd\",\"kustoClusterUri\":\"zb\",\"kustoDataIngestionUri\":\"iuebbaumny\",\"kustoDatabaseName\":\"upedeojnabckhs\",\"kustoManagementUrl\":\"txp\",\"kustoOfferingType\":\"fabric\"},\"status\":\"Running\",\"provisioningState\":\"Succeeded\",\"defaultAlertRuleIdentityResourceId\":\"vpesapskrdqmhjjd\"},\"identity\":{\"principalId\":\"dwkyzxuu\",\"tenantId\":\"ncwscwsvlxoto\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"yfjfcnjbkcn\":{\"clientId\":\"pqsxvnmicy\",\"principalId\":\"ceoveilovno\"},\"phoxus\":{\"clientId\":\"hbttkphyw\",\"principalId\":\"vjtoqnermclfp\"},\"wfqkquj\":{\"clientId\":\"pabgyeps\",\"principalId\":\"tazqugxywpmueefj\"}}},\"location\":\"suyonobglaocq\",\"tags\":{\"ytlmoyrxvwfud\":\"cmgyud\"},\"id\":\"pz\",\"name\":\"txhdzh\",\"type\":\"rqjbhckfrl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabaseWatcherManager manager = DatabaseWatcherManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Watcher response = manager.watchers().start("gu", "svmkfssxquk", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("suyonobglaocq", response.location());
        Assertions.assertEquals("cmgyud", response.tags().get("ytlmoyrxvwfud"));
        Assertions.assertEquals("gmgsxnkjzkde", response.properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("pvlopwiyighxpkd", response.properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("zb", response.properties().datastore().kustoClusterUri());
        Assertions.assertEquals("iuebbaumny", response.properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("upedeojnabckhs", response.properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("txp", response.properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FABRIC, response.properties().datastore().kustoOfferingType());
        Assertions.assertEquals("vpesapskrdqmhjjd", response.properties().defaultAlertRuleIdentityResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.USER_ASSIGNED, response.identity().type());
    }
}
