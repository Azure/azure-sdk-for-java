// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager;
import com.azure.resourcemanager.databasewatcher.models.SharedPrivateLinkResource;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SharedPrivateLinkResourcesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateLinkResourceId\":\"bobzdopcjwvnhd\",\"groupId\":\"d\",\"requestMessage\":\"mgxcxrslpm\",\"dnsZone\":\"wuoegrpk\",\"status\":\"Rejected\",\"provisioningState\":\"Failed\"},\"id\":\"qsluicp\",\"name\":\"ggkzzlvmbmpa\",\"type\":\"modfvuefywsbpfvm\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabaseWatcherManager manager = DatabaseWatcherManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SharedPrivateLinkResource response = manager.sharedPrivateLinkResources()
            .getWithResponse("pnedgf", "cvkcvqvpkeqdcv", "rhvoods", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("bobzdopcjwvnhd", response.properties().privateLinkResourceId());
        Assertions.assertEquals("d", response.properties().groupId());
        Assertions.assertEquals("mgxcxrslpm", response.properties().requestMessage());
        Assertions.assertEquals("wuoegrpk", response.properties().dnsZone());
    }
}
