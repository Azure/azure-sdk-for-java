// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.WatcherProperties;
import org.junit.jupiter.api.Assertions;

public final class WatcherPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherProperties model = BinaryData.fromString(
            "{\"datastore\":{\"adxClusterResourceId\":\"bpf\",\"kustoClusterDisplayName\":\"s\",\"kustoClusterUri\":\"n\",\"kustoDataIngestionUri\":\"gvfcj\",\"kustoDatabaseName\":\"wzo\",\"kustoManagementUrl\":\"xjtfelluwfzit\",\"kustoOfferingType\":\"free\"},\"status\":\"Stopping\",\"provisioningState\":\"Canceled\",\"defaultAlertRuleIdentityResourceId\":\"jkjlxofpdvhpfx\"}")
            .toObject(WatcherProperties.class);
        Assertions.assertEquals("bpf", model.datastore().adxClusterResourceId());
        Assertions.assertEquals("s", model.datastore().kustoClusterDisplayName());
        Assertions.assertEquals("n", model.datastore().kustoClusterUri());
        Assertions.assertEquals("gvfcj", model.datastore().kustoDataIngestionUri());
        Assertions.assertEquals("wzo", model.datastore().kustoDatabaseName());
        Assertions.assertEquals("xjtfelluwfzit", model.datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FREE, model.datastore().kustoOfferingType());
        Assertions.assertEquals("jkjlxofpdvhpfx", model.defaultAlertRuleIdentityResourceId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherProperties model = new WatcherProperties()
            .withDatastore(new Datastore().withAdxClusterResourceId("bpf")
                .withKustoClusterDisplayName("s")
                .withKustoClusterUri("n")
                .withKustoDataIngestionUri("gvfcj")
                .withKustoDatabaseName("wzo")
                .withKustoManagementUrl("xjtfelluwfzit")
                .withKustoOfferingType(KustoOfferingType.FREE))
            .withDefaultAlertRuleIdentityResourceId("jkjlxofpdvhpfx");
        model = BinaryData.fromObject(model).toObject(WatcherProperties.class);
        Assertions.assertEquals("bpf", model.datastore().adxClusterResourceId());
        Assertions.assertEquals("s", model.datastore().kustoClusterDisplayName());
        Assertions.assertEquals("n", model.datastore().kustoClusterUri());
        Assertions.assertEquals("gvfcj", model.datastore().kustoDataIngestionUri());
        Assertions.assertEquals("wzo", model.datastore().kustoDatabaseName());
        Assertions.assertEquals("xjtfelluwfzit", model.datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FREE, model.datastore().kustoOfferingType());
        Assertions.assertEquals("jkjlxofpdvhpfx", model.defaultAlertRuleIdentityResourceId());
    }
}
