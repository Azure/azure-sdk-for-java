// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityV4;
import com.azure.resourcemanager.databasewatcher.models.UserAssignedIdentity;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ManagedServiceIdentityV4Tests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ManagedServiceIdentityV4 model = BinaryData.fromString(
            "{\"principalId\":\"iqihn\",\"tenantId\":\"ngbwjz\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"fjaeq\":{\"clientId\":\"xgispemvtzfkufu\",\"principalId\":\"jofxqe\"},\"rwclxxwrljdo\":{\"clientId\":\"qjbasvms\",\"principalId\":\"qulngsntnbybkzgc\"},\"hxbnjbiksqrg\":{\"clientId\":\"kcqvkocrc\",\"principalId\":\"kwt\"}}}")
            .toObject(ManagedServiceIdentityV4.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED, model.type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ManagedServiceIdentityV4 model
            = new ManagedServiceIdentityV4().withType(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED)
                .withUserAssignedIdentities(mapOf("fjaeq", new UserAssignedIdentity(), "rwclxxwrljdo",
                    new UserAssignedIdentity(), "hxbnjbiksqrg", new UserAssignedIdentity()));
        model = BinaryData.fromObject(model).toObject(ManagedServiceIdentityV4.class);
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED, model.type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
