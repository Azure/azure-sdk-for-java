// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityV4;
import com.azure.resourcemanager.databasewatcher.models.UserAssignedIdentity;
import com.azure.resourcemanager.databasewatcher.models.Watcher;
import com.azure.resourcemanager.databasewatcher.models.WatcherProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WatchersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"datastore\":{\"adxClusterResourceId\":\"uh\",\"kustoClusterDisplayName\":\"p\",\"kustoClusterUri\":\"sjyofdx\",\"kustoDataIngestionUri\":\"uusdttouwa\",\"kustoDatabaseName\":\"oekqvk\",\"kustoManagementUrl\":\"lns\",\"kustoOfferingType\":\"adx\"},\"status\":\"Running\",\"provisioningState\":\"Succeeded\",\"defaultAlertRuleIdentityResourceId\":\"sflhhca\"},\"identity\":{\"principalId\":\"jixisxyawjoyaqcs\",\"tenantId\":\"jpkiidzyexznelix\",\"type\":\"None\",\"userAssignedIdentities\":{\"ggdtpnapnyiro\":{\"clientId\":\"folhbnxknal\",\"principalId\":\"lp\"},\"n\":{\"clientId\":\"hpigv\",\"principalId\":\"ylgqgitxmedjvcsl\"},\"tfdygpfqb\":{\"clientId\":\"wncwzzhxgktrmg\",\"principalId\":\"napkteoellw\"}}},\"location\":\"ceopzfqrhhuaopp\",\"tags\":{\"lzdahzxctobgbkdm\":\"eqx\",\"grcfb\":\"izpost\"},\"id\":\"nrmfqjhhk\",\"name\":\"bpvjymjhx\",\"type\":\"j\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabaseWatcherManager manager = DatabaseWatcherManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Watcher response
            = manager.watchers()
                .define("zbtd")
                .withRegion("iwwroyqbexrmc")
                .withExistingResourceGroup("l")
                .withTags(mapOf("vah", "ycnojvknmefqsg", "qzcjrvxdj", "pjyzhpv", "awjvzunluthnnp", "lmwlxkvugfhzo"))
                .withProperties(new WatcherProperties()
                    .withDatastore(new Datastore().withAdxClusterResourceId("znbmpowuwprzq")
                        .withKustoClusterDisplayName("eualupjmkhf")
                        .withKustoClusterUri("obbc")
                        .withKustoDataIngestionUri("wsrtjriplrbpbe")
                        .withKustoDatabaseName("tghfgblcgwxzvl")
                        .withKustoManagementUrl("qhjk")
                        .withKustoOfferingType(KustoOfferingType.FREE))
                    .withDefaultAlertRuleIdentityResourceId("mxiebw"))
                .withIdentity(new ManagedServiceIdentityV4().withType(ManagedServiceIdentityType.SYSTEM_ASSIGNED)
                    .withUserAssignedIdentities(mapOf("iuhprwmdyvxqta", new UserAssignedIdentity())))
                .create();

        Assertions.assertEquals("ceopzfqrhhuaopp", response.location());
        Assertions.assertEquals("eqx", response.tags().get("lzdahzxctobgbkdm"));
        Assertions.assertEquals("uh", response.properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("p", response.properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("sjyofdx", response.properties().datastore().kustoClusterUri());
        Assertions.assertEquals("uusdttouwa", response.properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("oekqvk", response.properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("lns", response.properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.ADX, response.properties().datastore().kustoOfferingType());
        Assertions.assertEquals("sflhhca", response.properties().defaultAlertRuleIdentityResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, response.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
