// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager;
import com.azure.resourcemanager.databasewatcher.models.SharedPrivateLinkResource;
import com.azure.resourcemanager.databasewatcher.models.SharedPrivateLinkResourceProperties;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class SharedPrivateLinkResourcesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateLinkResourceId\":\"washr\",\"groupId\":\"dtkcnqxwbpokulp\",\"requestMessage\":\"ujw\",\"dnsZone\":\"sipqii\",\"status\":\"Pending\",\"provisioningState\":\"Succeeded\"},\"id\":\"rpqlp\",\"name\":\"wcciuqgbdbu\",\"type\":\"auvfbtkuwhhmhyk\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabaseWatcherManager manager = DatabaseWatcherManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        SharedPrivateLinkResource response = manager.sharedPrivateLinkResources()
            .define("kcbcue")
            .withExistingWatcher("helxprglya", "dd")
            .withProperties(new SharedPrivateLinkResourceProperties().withPrivateLinkResourceId("jxgciqibrh")
                .withGroupId("sxsdqrhzoymibm")
                .withRequestMessage("qyib")
                .withDnsZone("wfluszdt"))
            .create();

        Assertions.assertEquals("washr", response.properties().privateLinkResourceId());
        Assertions.assertEquals("dtkcnqxwbpokulp", response.properties().groupId());
        Assertions.assertEquals("ujw", response.properties().requestMessage());
        Assertions.assertEquals("sipqii", response.properties().dnsZone());
    }
}
