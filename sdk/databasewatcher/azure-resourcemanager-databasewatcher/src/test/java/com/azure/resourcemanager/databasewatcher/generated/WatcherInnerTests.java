// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasewatcher.fluent.models.WatcherInner;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityV4;
import com.azure.resourcemanager.databasewatcher.models.UserAssignedIdentity;
import com.azure.resourcemanager.databasewatcher.models.WatcherProperties;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class WatcherInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WatcherInner model = BinaryData.fromString(
            "{\"properties\":{\"datastore\":{\"adxClusterResourceId\":\"bpzvgn\",\"kustoClusterDisplayName\":\"symglzufcyz\",\"kustoClusterUri\":\"ohdbihanufh\",\"kustoDataIngestionUri\":\"cbjy\",\"kustoDatabaseName\":\"a\",\"kustoManagementUrl\":\"ithxqhabifpi\",\"kustoOfferingType\":\"free\"},\"status\":\"Running\",\"provisioningState\":\"Succeeded\",\"defaultAlertRuleIdentityResourceId\":\"scnpqxuhivy\"},\"identity\":{\"principalId\":\"wby\",\"tenantId\":\"k\",\"type\":\"None\",\"userAssignedIdentities\":{\"yejhk\":{\"clientId\":\"jgrtfwvukxga\",\"principalId\":\"ccsnhsjc\"},\"jnchgej\":{\"clientId\":\"htnapczwlokjyem\",\"principalId\":\"vnipjox\"},\"wyahuxinpmqnja\":{\"clientId\":\"odmailzyd\",\"principalId\":\"o\"}}},\"location\":\"ixjsprozvcputeg\",\"tags\":{\"u\":\"mfdatscmdvpj\",\"kjozkrwfnd\":\"suuv\",\"vwryoqpso\":\"odjpslwejd\",\"yffdfdos\":\"cctazakljlahbc\"},\"id\":\"gexpaojakhmsbz\",\"name\":\"hcrzevd\",\"type\":\"hlxaolthqtr\"}")
            .toObject(WatcherInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals("bpzvgn", model.properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("symglzufcyz", model.properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("ohdbihanufh", model.properties().datastore().kustoClusterUri());
        Assertions.assertEquals("cbjy", model.properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("a", model.properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("ithxqhabifpi", model.properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FREE, model.properties().datastore().kustoOfferingType());
        Assertions.assertEquals("scnpqxuhivy", model.properties().defaultAlertRuleIdentityResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WatcherInner model = new WatcherInner().withLocation("ixjsprozvcputeg")
            .withTags(mapOf("u", "mfdatscmdvpj", "kjozkrwfnd", "suuv", "vwryoqpso", "odjpslwejd", "yffdfdos",
                "cctazakljlahbc"))
            .withProperties(new WatcherProperties()
                .withDatastore(new Datastore().withAdxClusterResourceId("bpzvgn")
                    .withKustoClusterDisplayName("symglzufcyz")
                    .withKustoClusterUri("ohdbihanufh")
                    .withKustoDataIngestionUri("cbjy")
                    .withKustoDatabaseName("a")
                    .withKustoManagementUrl("ithxqhabifpi")
                    .withKustoOfferingType(KustoOfferingType.FREE))
                .withDefaultAlertRuleIdentityResourceId("scnpqxuhivy"))
            .withIdentity(new ManagedServiceIdentityV4().withType(ManagedServiceIdentityType.NONE)
                .withUserAssignedIdentities(mapOf("yejhk", new UserAssignedIdentity(), "jnchgej",
                    new UserAssignedIdentity(), "wyahuxinpmqnja", new UserAssignedIdentity())));
        model = BinaryData.fromObject(model).toObject(WatcherInner.class);
        Assertions.assertEquals("ixjsprozvcputeg", model.location());
        Assertions.assertEquals("mfdatscmdvpj", model.tags().get("u"));
        Assertions.assertEquals("bpzvgn", model.properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("symglzufcyz", model.properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("ohdbihanufh", model.properties().datastore().kustoClusterUri());
        Assertions.assertEquals("cbjy", model.properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("a", model.properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("ithxqhabifpi", model.properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FREE, model.properties().datastore().kustoOfferingType());
        Assertions.assertEquals("scnpqxuhivy", model.properties().defaultAlertRuleIdentityResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.NONE, model.identity().type());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
