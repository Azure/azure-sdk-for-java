// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.databasewatcher.models.Datastore;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import org.junit.jupiter.api.Assertions;

public final class DatastoreTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        Datastore model = BinaryData.fromString(
            "{\"adxClusterResourceId\":\"pini\",\"kustoClusterDisplayName\":\"ayhuy\",\"kustoClusterUri\":\"bkpodepooginuv\",\"kustoDataIngestionUri\":\"mihe\",\"kustoDatabaseName\":\"gnarxzxtheo\",\"kustoManagementUrl\":\"usivye\",\"kustoOfferingType\":\"fabric\"}")
            .toObject(Datastore.class);
        Assertions.assertEquals("pini", model.adxClusterResourceId());
        Assertions.assertEquals("ayhuy", model.kustoClusterDisplayName());
        Assertions.assertEquals("bkpodepooginuv", model.kustoClusterUri());
        Assertions.assertEquals("mihe", model.kustoDataIngestionUri());
        Assertions.assertEquals("gnarxzxtheo", model.kustoDatabaseName());
        Assertions.assertEquals("usivye", model.kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FABRIC, model.kustoOfferingType());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        Datastore model = new Datastore().withAdxClusterResourceId("pini")
            .withKustoClusterDisplayName("ayhuy")
            .withKustoClusterUri("bkpodepooginuv")
            .withKustoDataIngestionUri("mihe")
            .withKustoDatabaseName("gnarxzxtheo")
            .withKustoManagementUrl("usivye")
            .withKustoOfferingType(KustoOfferingType.FABRIC);
        model = BinaryData.fromObject(model).toObject(Datastore.class);
        Assertions.assertEquals("pini", model.adxClusterResourceId());
        Assertions.assertEquals("ayhuy", model.kustoClusterDisplayName());
        Assertions.assertEquals("bkpodepooginuv", model.kustoClusterUri());
        Assertions.assertEquals("mihe", model.kustoDataIngestionUri());
        Assertions.assertEquals("gnarxzxtheo", model.kustoDatabaseName());
        Assertions.assertEquals("usivye", model.kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.FABRIC, model.kustoOfferingType());
    }
}
