// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.databasewatcher.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.databasewatcher.DatabaseWatcherManager;
import com.azure.resourcemanager.databasewatcher.models.KustoOfferingType;
import com.azure.resourcemanager.databasewatcher.models.ManagedServiceIdentityType;
import com.azure.resourcemanager.databasewatcher.models.Watcher;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WatchersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"datastore\":{\"adxClusterResourceId\":\"myskpbhenbtkcxy\",\"kustoClusterDisplayName\":\"y\",\"kustoClusterUri\":\"nrs\",\"kustoDataIngestionUri\":\"nlqidybyxczf\",\"kustoDatabaseName\":\"lhaaxdbabp\",\"kustoManagementUrl\":\"lwrq\",\"kustoOfferingType\":\"adx\"},\"status\":\"Stopping\",\"provisioningState\":\"Failed\",\"defaultAlertRuleIdentityResourceId\":\"sucocmnyyazttbtw\"},\"identity\":{\"principalId\":\"puedckzywbiexzf\",\"tenantId\":\"ue\",\"type\":\"SystemAssigned, UserAssigned\",\"userAssignedIdentities\":{\"zyoxaepdkzjan\":{\"clientId\":\"ujwb\",\"principalId\":\"walm\"}}},\"location\":\"xrhdwbavxbniwdjs\",\"tags\":{\"bpg\":\"s\",\"fzab\":\"xytxhpzxbz\"},\"id\":\"lcuhxwtctyqiklb\",\"name\":\"ovplw\",\"type\":\"bhvgy\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DatabaseWatcherManager manager = DatabaseWatcherManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<Watcher> response = manager.watchers().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("xrhdwbavxbniwdjs", response.iterator().next().location());
        Assertions.assertEquals("s", response.iterator().next().tags().get("bpg"));
        Assertions.assertEquals("myskpbhenbtkcxy",
            response.iterator().next().properties().datastore().adxClusterResourceId());
        Assertions.assertEquals("y", response.iterator().next().properties().datastore().kustoClusterDisplayName());
        Assertions.assertEquals("nrs", response.iterator().next().properties().datastore().kustoClusterUri());
        Assertions.assertEquals("nlqidybyxczf",
            response.iterator().next().properties().datastore().kustoDataIngestionUri());
        Assertions.assertEquals("lhaaxdbabp", response.iterator().next().properties().datastore().kustoDatabaseName());
        Assertions.assertEquals("lwrq", response.iterator().next().properties().datastore().kustoManagementUrl());
        Assertions.assertEquals(KustoOfferingType.ADX,
            response.iterator().next().properties().datastore().kustoOfferingType());
        Assertions.assertEquals("sucocmnyyazttbtw",
            response.iterator().next().properties().defaultAlertRuleIdentityResourceId());
        Assertions.assertEquals(ManagedServiceIdentityType.SYSTEM_AND_USER_ASSIGNED,
            response.iterator().next().identity().type());
    }
}
