// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * 3-D roll/yaw/pitch angles for face direction.
 */
@Immutable
public final class HeadPose implements JsonSerializable<HeadPose> {

    /*
     * Value of angles.
     */
    @Generated
    private final double pitch;

    /*
     * Value of angles.
     */
    @Generated
    private final double roll;

    /*
     * Value of angles.
     */
    @Generated
    private final double yaw;

    /**
     * Creates an instance of HeadPose class.
     *
     * @param pitch the pitch value to set.
     * @param roll the roll value to set.
     * @param yaw the yaw value to set.
     */
    @Generated
    private HeadPose(double pitch, double roll, double yaw) {
        this.pitch = pitch;
        this.roll = roll;
        this.yaw = yaw;
    }

    /**
     * Get the pitch property: Value of angles.
     *
     * @return the pitch value.
     */
    @Generated
    public double getPitch() {
        return this.pitch;
    }

    /**
     * Get the roll property: Value of angles.
     *
     * @return the roll value.
     */
    @Generated
    public double getRoll() {
        return this.roll;
    }

    /**
     * Get the yaw property: Value of angles.
     *
     * @return the yaw value.
     */
    @Generated
    public double getYaw() {
        return this.yaw;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("pitch", this.pitch);
        jsonWriter.writeDoubleField("roll", this.roll);
        jsonWriter.writeDoubleField("yaw", this.yaw);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HeadPose from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of HeadPose if the JsonReader was pointing to an instance of it, or null if it was pointing
     * to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the HeadPose.
     */
    @Generated
    public static HeadPose fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double pitch = 0.0;
            double roll = 0.0;
            double yaw = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("pitch".equals(fieldName)) {
                    pitch = reader.getDouble();
                } else if ("roll".equals(fieldName)) {
                    roll = reader.getDouble();
                } else if ("yaw".equals(fieldName)) {
                    yaw = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new HeadPose(pitch, roll, yaw);
        });
    }
}
