// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response body for find similar face operation.
 */
@Immutable
public final class FaceFindSimilarResult implements JsonSerializable<FaceFindSimilarResult> {
    /*
     * Confidence value of the candidate. The higher confidence, the more similar. Range between [0,1].
     */
    @Generated
    private final double confidence;

    /*
     * faceId of candidate face when find by faceIds. faceId is created by "Detect" and will expire 24 hours after the detection call.
     */
    @Generated
    private String faceId;

    /*
     * persistedFaceId of candidate face when find by faceListId or largeFaceListId. persistedFaceId in face list/large face list is persisted and will not expire.
     */
    @Generated
    private String persistedFaceId;

    /**
     * Creates an instance of FaceFindSimilarResult class.
     * 
     * @param confidence the confidence value to set.
     */
    @Generated
    private FaceFindSimilarResult(double confidence) {
        this.confidence = confidence;
    }

    /**
     * Get the confidence property: Confidence value of the candidate. The higher confidence, the more similar. Range
     * between [0,1].
     * 
     * @return the confidence value.
     */
    @Generated
    public double getConfidence() {
        return this.confidence;
    }

    /**
     * Get the faceId property: faceId of candidate face when find by faceIds. faceId is created by "Detect" and will
     * expire 24 hours after the detection call.
     * 
     * @return the faceId value.
     */
    @Generated
    public String getFaceId() {
        return this.faceId;
    }

    /**
     * Get the persistedFaceId property: persistedFaceId of candidate face when find by faceListId or largeFaceListId.
     * persistedFaceId in face list/large face list is persisted and will not expire.
     * 
     * @return the persistedFaceId value.
     */
    @Generated
    public String getPersistedFaceId() {
        return this.persistedFaceId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("confidence", this.confidence);
        jsonWriter.writeStringField("faceId", this.faceId);
        jsonWriter.writeStringField("persistedFaceId", this.persistedFaceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaceFindSimilarResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaceFindSimilarResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FaceFindSimilarResult.
     */
    @Generated
    public static FaceFindSimilarResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double confidence = 0.0;
            String faceId = null;
            String persistedFaceId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("confidence".equals(fieldName)) {
                    confidence = reader.getDouble();
                } else if ("faceId".equals(fieldName)) {
                    faceId = reader.getString();
                } else if ("persistedFaceId".equals(fieldName)) {
                    persistedFaceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FaceFindSimilarResult deserializedFaceFindSimilarResult = new FaceFindSimilarResult(confidence);
            deserializedFaceFindSimilarResult.faceId = faceId;
            deserializedFaceFindSimilarResult.persistedFaceId = persistedFaceId;

            return deserializedFaceFindSimilarResult;
        });
    }
}
