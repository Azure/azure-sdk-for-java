// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The liveness with verify session attempt.
 */
@Immutable
public final class LivenessWithVerifySessionAttempt implements JsonSerializable<LivenessWithVerifySessionAttempt> {
    /*
     * The attempt ID, start from 1.
     */
    @Generated
    private final int attemptId;

    /*
     * The status of the attempt.
     */
    @Generated
    private final OperationState attemptStatus;

    /*
     * The result of the liveness with verify call, will be null if there is error.
     */
    @Generated
    private LivenessWithVerifyResult result;

    /*
     * The error of the liveness with verify call, will be null if there is result.
     */
    @Generated
    private LivenessError error;

    /**
     * Creates an instance of LivenessWithVerifySessionAttempt class.
     * 
     * @param attemptId the attemptId value to set.
     * @param attemptStatus the attemptStatus value to set.
     */
    @Generated
    private LivenessWithVerifySessionAttempt(int attemptId, OperationState attemptStatus) {
        this.attemptId = attemptId;
        this.attemptStatus = attemptStatus;
    }

    /**
     * Get the attemptId property: The attempt ID, start from 1.
     * 
     * @return the attemptId value.
     */
    @Generated
    public int getAttemptId() {
        return this.attemptId;
    }

    /**
     * Get the attemptStatus property: The status of the attempt.
     * 
     * @return the attemptStatus value.
     */
    @Generated
    public OperationState getAttemptStatus() {
        return this.attemptStatus;
    }

    /**
     * Get the result property: The result of the liveness with verify call, will be null if there is error.
     * 
     * @return the result value.
     */
    @Generated
    public LivenessWithVerifyResult getResult() {
        return this.result;
    }

    /**
     * Get the error property: The error of the liveness with verify call, will be null if there is result.
     * 
     * @return the error value.
     */
    @Generated
    public LivenessError getError() {
        return this.error;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("attemptId", this.attemptId);
        jsonWriter.writeStringField("attemptStatus", this.attemptStatus == null ? null : this.attemptStatus.toString());
        jsonWriter.writeJsonField("result", this.result);
        jsonWriter.writeJsonField("error", this.error);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessWithVerifySessionAttempt from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessWithVerifySessionAttempt if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessWithVerifySessionAttempt.
     */
    @Generated
    public static LivenessWithVerifySessionAttempt fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int attemptId = 0;
            OperationState attemptStatus = null;
            LivenessWithVerifyResult result = null;
            LivenessError error = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attemptId".equals(fieldName)) {
                    attemptId = reader.getInt();
                } else if ("attemptStatus".equals(fieldName)) {
                    attemptStatus = OperationState.fromString(reader.getString());
                } else if ("result".equals(fieldName)) {
                    result = LivenessWithVerifyResult.fromJson(reader);
                } else if ("error".equals(fieldName)) {
                    error = LivenessError.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            LivenessWithVerifySessionAttempt deserializedLivenessWithVerifySessionAttempt
                = new LivenessWithVerifySessionAttempt(attemptId, attemptStatus);
            deserializedLivenessWithVerifySessionAttempt.result = result;
            deserializedLivenessWithVerifySessionAttempt.error = error;

            return deserializedLivenessWithVerifySessionAttempt;
        });
    }
}
