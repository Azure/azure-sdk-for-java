// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response of liveness session creation.
 */
@Immutable
public final class CreateLivenessSessionResult implements JsonSerializable<CreateLivenessSessionResult> {

    /*
     * The unique session ID of the created session. It will expire 48 hours after it was created or may be deleted
     * sooner using the corresponding Session DELETE operation.
     */
    @Generated
    private final String sessionId;

    /*
     * Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has
     * limited permissions to perform only the required action and expires after the TTL time. It is also auditable.
     */
    @Generated
    private final String authToken;

    /**
     * Creates an instance of CreateLivenessSessionResult class.
     *
     * @param sessionId the sessionId value to set.
     * @param authToken the authToken value to set.
     */
    @Generated
    private CreateLivenessSessionResult(String sessionId, String authToken) {
        this.sessionId = sessionId;
        this.authToken = authToken;
    }

    /**
     * Get the sessionId property: The unique session ID of the created session. It will expire 48 hours after it was
     * created or may be deleted sooner using the corresponding Session DELETE operation.
     *
     * @return the sessionId value.
     */
    @Generated
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Get the authToken property: Bearer token to provide authentication for the Vision SDK running on a client
     * application. This Bearer token has limited permissions to perform only the required action and expires after the
     * TTL time. It is also auditable.
     *
     * @return the authToken value.
     */
    @Generated
    public String getAuthToken() {
        return this.authToken;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeStringField("authToken", this.authToken);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreateLivenessSessionResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreateLivenessSessionResult if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreateLivenessSessionResult.
     */
    @Generated
    public static CreateLivenessSessionResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String sessionId = null;
            String authToken = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("sessionId".equals(fieldName)) {
                    sessionId = reader.getString();
                } else if ("authToken".equals(fieldName)) {
                    authToken = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new CreateLivenessSessionResult(sessionId, authToken);
        });
    }
}
