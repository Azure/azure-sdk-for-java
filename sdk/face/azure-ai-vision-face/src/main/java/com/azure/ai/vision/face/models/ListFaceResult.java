// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Response of list face of person.
 */
@Immutable
public final class ListFaceResult implements JsonSerializable<ListFaceResult> {
    /*
     * Id of person.
     */
    @Generated
    private final String personId;

    /*
     * Array of persisted face ids.
     */
    @Generated
    private final List<String> persistedFaceIds;

    /**
     * Creates an instance of ListFaceResult class.
     * 
     * @param personId the personId value to set.
     * @param persistedFaceIds the persistedFaceIds value to set.
     */
    @Generated
    private ListFaceResult(String personId, List<String> persistedFaceIds) {
        this.personId = personId;
        this.persistedFaceIds = persistedFaceIds;
    }

    /**
     * Get the personId property: Id of person.
     * 
     * @return the personId value.
     */
    @Generated
    public String getPersonId() {
        return this.personId;
    }

    /**
     * Get the persistedFaceIds property: Array of persisted face ids.
     * 
     * @return the persistedFaceIds value.
     */
    @Generated
    public List<String> getPersistedFaceIds() {
        return this.persistedFaceIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("personId", this.personId);
        jsonWriter.writeArrayField("persistedFaceIds", this.persistedFaceIds,
            (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ListFaceResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ListFaceResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ListFaceResult.
     */
    @Generated
    public static ListFaceResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String personId = null;
            List<String> persistedFaceIds = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("personId".equals(fieldName)) {
                    personId = reader.getString();
                } else if ("persistedFaceIds".equals(fieldName)) {
                    persistedFaceIds = reader.readArray(reader1 -> reader1.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new ListFaceResult(personId, persistedFaceIds);
        });
    }
}
