// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.implementation.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The VerifyFromPersonGroupRequest model.
 */
@Immutable
public final class VerifyFromPersonGroupRequest implements JsonSerializable<VerifyFromPersonGroupRequest> {
    /*
     * The faceId of the face, come from "Detect".
     */
    @Generated
    private final String faceId;

    /*
     * Using existing personGroupId and personId for fast loading a specified person. personGroupId is created in "Create Person Group".
     */
    @Generated
    private final String personGroupId;

    /*
     * Specify a certain person in Person Group.
     */
    @Generated
    private final String personId;

    /**
     * Creates an instance of VerifyFromPersonGroupRequest class.
     * 
     * @param faceId the faceId value to set.
     * @param personGroupId the personGroupId value to set.
     * @param personId the personId value to set.
     */
    @Generated
    public VerifyFromPersonGroupRequest(String faceId, String personGroupId, String personId) {
        this.faceId = faceId;
        this.personGroupId = personGroupId;
        this.personId = personId;
    }

    /**
     * Get the faceId property: The faceId of the face, come from "Detect".
     * 
     * @return the faceId value.
     */
    @Generated
    public String getFaceId() {
        return this.faceId;
    }

    /**
     * Get the personGroupId property: Using existing personGroupId and personId for fast loading a specified person.
     * personGroupId is created in "Create Person Group".
     * 
     * @return the personGroupId value.
     */
    @Generated
    public String getPersonGroupId() {
        return this.personGroupId;
    }

    /**
     * Get the personId property: Specify a certain person in Person Group.
     * 
     * @return the personId value.
     */
    @Generated
    public String getPersonId() {
        return this.personId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("faceId", this.faceId);
        jsonWriter.writeStringField("personGroupId", this.personGroupId);
        jsonWriter.writeStringField("personId", this.personId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VerifyFromPersonGroupRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VerifyFromPersonGroupRequest if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VerifyFromPersonGroupRequest.
     */
    @Generated
    public static VerifyFromPersonGroupRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String faceId = null;
            String personGroupId = null;
            String personId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("faceId".equals(fieldName)) {
                    faceId = reader.getString();
                } else if ("personGroupId".equals(fieldName)) {
                    personGroupId = reader.getString();
                } else if ("personId".equals(fieldName)) {
                    personId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new VerifyFromPersonGroupRequest(faceId, personGroupId, personId);
        });
    }
}
