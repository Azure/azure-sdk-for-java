// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response of create person.
 */
@Immutable
public final class CreatePersonResult implements JsonSerializable<CreatePersonResult> {
    /*
     * Person ID of the person.
     */
    @Generated
    private final String personId;

    /**
     * Creates an instance of CreatePersonResult class.
     * 
     * @param personId the personId value to set.
     */
    @Generated
    private CreatePersonResult(String personId) {
        this.personId = personId;
    }

    /**
     * Get the personId property: Person ID of the person.
     * 
     * @return the personId value.
     */
    @Generated
    public String getPersonId() {
        return this.personId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("personId", this.personId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CreatePersonResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CreatePersonResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the CreatePersonResult.
     */
    @Generated
    public static CreatePersonResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String personId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("personId".equals(fieldName)) {
                    personId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new CreatePersonResult(personId);
        });
    }
}
