// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.administration;

import com.azure.ai.vision.face.implementation.LargePersonGroupsImpl;
import com.azure.ai.vision.face.implementation.models.AddFaceFromUrlRequest;
import com.azure.ai.vision.face.implementation.models.CreatePersonRequest;
import com.azure.ai.vision.face.implementation.models.CreateRequest;
import com.azure.ai.vision.face.implementation.models.UpdateFaceRequest;
import com.azure.ai.vision.face.implementation.models.UpdatePersonRequest;
import com.azure.ai.vision.face.implementation.models.UpdateRequest;
import com.azure.ai.vision.face.models.AddFaceResult;
import com.azure.ai.vision.face.models.CreatePersonResult;
import com.azure.ai.vision.face.models.FaceDetectionModel;
import com.azure.ai.vision.face.models.FaceRecognitionModel;
import com.azure.ai.vision.face.models.FaceTrainingResult;
import com.azure.ai.vision.face.models.LargePersonGroup;
import com.azure.ai.vision.face.models.LargePersonGroupPerson;
import com.azure.ai.vision.face.models.LargePersonGroupPersonFace;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous FaceAdministrationClient type.
 */
@ServiceClient(builder = FaceAdministrationClientBuilder.class, isAsync = true)
public final class LargePersonGroupAsyncClient {

    @Generated
    private final LargePersonGroupsImpl serviceClient;

    /**
     * Initializes an instance of LargePersonGroupAsyncClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    LargePersonGroupAsyncClient(LargePersonGroupsImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     * }
     * }
     * </pre>
     *
     * @param createRequest The createRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> createWithResponse(BinaryData createRequest, RequestOptions requestOptions) {
        return this.serviceClient.createWithResponseAsync(createRequest, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group for
     * more details.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.deleteWithResponseAsync(requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     *     recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *     largePersonGroupId: String (Required)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people
     * along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getWithResponseAsync(requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     *     userData: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param updateRequest The updateRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateWithResponse(BinaryData updateRequest, RequestOptions requestOptions) {
        return this.serviceClient.updateWithResponseAsync(updateRequest, requestOptions);
    }

    /**
     * List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-groups for
     * more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         name: String (Required)
     *         userData: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         largePersonGroupId: String (Required)
     *     }
     * ]
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLargePersonGroupsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getLargePersonGroupsWithResponseAsync(requestOptions);
    }

    /**
     * To check Large Person Group training status completed or still ongoing. Large Person Group training is an
     * asynchronous operation triggered by "Train Large Person Group" API.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-training-status for more
     * details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     status: String(notStarted/running/succeeded/failed) (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     lastActionDateTime: OffsetDateTime (Required)
     *     lastSuccessfulTrainingDateTime: OffsetDateTime (Required)
     *     message: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return training result of a container along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getTrainingStatusWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getTrainingStatusWithResponseAsync(requestOptions);
    }

    /**
     * Submit a Large Person Group training task. Training is a crucial step that only a trained Large Person Group can
     * be used by "Identify From Large Person Group".
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/train-large-person-group for
     * more details.
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<BinaryData, BinaryData> beginTrain(RequestOptions requestOptions) {
        return this.serviceClient.beginTrainAsync(requestOptions);
    }

    /**
     * Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person
     * Group Person Face".
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group-person for more
     * details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Required)
     *     userData: String (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     personId: String (Required)
     * }
     * }
     * </pre>
     *
     * @param createPersonRequest The createPersonRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of create person along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createPersonWithResponse(BinaryData createPersonRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.createPersonWithResponseAsync(createPersonRequest, requestOptions);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group-person for more
     * details.
     *
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deletePersonWithResponse(String personId, RequestOptions requestOptions) {
        return this.serviceClient.deletePersonWithResponseAsync(personId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     personId: String (Required)
     *     name: String (Required)
     *     userData: String (Optional)
     *     persistedFaceIds (Optional): [
     *         String (Optional)
     *     ]
     * }
     * }
     * </pre>
     *
     * @param personId ID of the person.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the person in a specified large person group along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonWithResponse(String personId, RequestOptions requestOptions) {
        return this.serviceClient.getPersonWithResponseAsync(personId, requestOptions);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person for more
     * details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     name: String (Optional)
     *     userData: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param personId ID of the person.
     * @param updatePersonRequest The updatePersonRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updatePersonWithResponse(String personId, BinaryData updatePersonRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.updatePersonWithResponseAsync(personId, updatePersonRequest, requestOptions);
    }

    /**
     * List all persons' information in the specified Large Person Group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-persons
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         personId: String (Required)
     *         name: String (Required)
     *         userData: String (Optional)
     *         persistedFaceIds (Optional): [
     *             String (Optional)
     *         ]
     *     }
     * ]
     * }
     * </pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getPersonsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getPersonsWithResponseAsync(requestOptions);
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for
     * more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     url: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }
     * </pre>
     *
     * @param personId ID of the person.
     * @param addFaceFromUrlRequest The addFaceFromUrlRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> addFaceFromUrlImplWithResponse(String personId, BinaryData addFaceFromUrlRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceFromUrlImplWithResponseAsync(personId, addFaceFromUrlRequest, requestOptions);
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>targetFace</td><td>List&lt;Integer&gt;</td><td>No</td><td>A face rectangle to specify the target face to
     * be added to a person, in the format of 'targetFace=left,top,width,height'. In the form of "," separated
     * string.</td></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>userData</td><td>String</td><td>No</td><td>User-provided data attached to the face. The size limit is
     * 1K.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     persistedFaceId: String (Required)
     * }
     * }
     * </pre>
     *
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response body for adding face along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> addFaceImplWithResponse(String personId, BinaryData imageContent,
        RequestOptions requestOptions) {
        return this.serviceClient.addFaceImplWithResponseAsync(personId, imageContent, requestOptions);
    }

    /**
     * Delete a face from a person in a Large Person Group by specified largePersonGroupId, personId and
     * persistedFaceId.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteFaceWithResponse(String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteFaceWithResponseAsync(personId, persistedFaceId, requestOptions);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person-face for more
     * details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     persistedFaceId: String (Required)
     *     userData: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return face resource for large person group person along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getFaceWithResponse(String personId, String persistedFaceId,
        RequestOptions requestOptions) {
        return this.serviceClient.getFaceWithResponseAsync(personId, persistedFaceId, requestOptions);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person-face for more
     * details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     userData: String (Optional)
     * }
     * }
     * </pre>
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param updateFaceRequest The updateFaceRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> updateFaceWithResponse(String personId, String persistedFaceId,
        BinaryData updateFaceRequest, RequestOptions requestOptions) {
        return this.serviceClient.updateFaceWithResponseAsync(personId, persistedFaceId, updateFaceRequest,
            requestOptions);
    }

    /**
     * Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group for
     * more details.
     *
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @param recognitionModel The 'recognitionModel' associated with this face list. Supported 'recognitionModel'
     * values include 'recognition_01', 'recognition_02, 'recognition_03', and 'recognition_04'. The default value is
     * 'recognition_01'. 'recognition_04' is recommended since its accuracy is improved on faces wearing masks compared
     * with 'recognition_03', and its overall accuracy is improved compared with 'recognition_01' and 'recognition_02'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(String name, String userData, FaceRecognitionModel recognitionModel) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest createRequestObj
            = new CreateRequest(name).setUserData(userData).setRecognitionModel(recognitionModel);
        BinaryData createRequest = BinaryData.fromObject(createRequestObj);
        return createWithResponse(createRequest, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Create a new Large Person Group with user-specified largePersonGroupId, name, an optional userData and
     * recognitionModel.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group for
     * more details.
     *
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> create(String name) {
        // Generated convenience method for createWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreateRequest createRequestObj = new CreateRequest(name);
        BinaryData createRequest = BinaryData.fromObject(createRequestObj);
        return createWithResponse(createRequest, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group for
     * more details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> delete() {
        // Generated convenience method for deleteWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteWithResponse(requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more
     * details.
     *
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LargePersonGroup> get(Boolean returnRecognitionModel) {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LargePersonGroup.class));
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group for more
     * details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the container of the uploaded person data, including face recognition feature, and up to 1,000,000 people
     * on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LargePersonGroup> get() {
        // Generated convenience method for getWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LargePersonGroup.class));
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group for
     * more details.
     *
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> update(String name, String userData) {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRequest updateRequestObj = new UpdateRequest().setName(name).setUserData(userData);
        BinaryData updateRequest = BinaryData.fromObject(updateRequestObj);
        return updateWithResponse(updateRequest, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group for
     * more details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> update() {
        // Generated convenience method for updateWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateRequest updateRequestObj = new UpdateRequest();
        BinaryData updateRequest = BinaryData.fromObject(updateRequestObj);
        return updateWithResponse(updateRequest, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-groups for
     * more details.
     *
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @param returnRecognitionModel Return 'recognitionModel' or not. The default value is false.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LargePersonGroup>> getLargePersonGroups(String start, Integer top,
        Boolean returnRecognitionModel) {
        // Generated convenience method for getLargePersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        return getLargePersonGroupsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP));
    }

    /**
     * List all existing Large Person Groups' largePersonGroupId, name, userData and recognitionModel.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-groups for
     * more details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LargePersonGroup>> getLargePersonGroups() {
        // Generated convenience method for getLargePersonGroupsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLargePersonGroupsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP));
    }

    /**
     * To check Large Person Group training status completed or still ongoing. Large Person Group training is an
     * asynchronous operation triggered by "Train Large Person Group" API.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-training-status for more
     * details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return training result of a container on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<FaceTrainingResult> getTrainingStatus() {
        // Generated convenience method for getTrainingStatusWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getTrainingStatusWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(FaceTrainingResult.class));
    }

    /**
     * Submit a Large Person Group training task. Training is a crucial step that only a trained Large Person Group can
     * be used by "Identify From Large Person Group".
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/train-large-person-group for
     * more details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public PollerFlux<FaceTrainingResult, Void> beginTrain() {
        // Generated convenience method for beginTrainWithModel
        RequestOptions requestOptions = new RequestOptions();
        return serviceClient.beginTrainWithModelAsync(requestOptions);
    }

    /**
     * Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person
     * Group Person Face".
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group-person for more
     * details.
     *
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreatePersonResult> createPerson(String name, String userData) {
        // Generated convenience method for createPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonRequest createPersonRequestObj = new CreatePersonRequest(name).setUserData(userData);
        BinaryData createPersonRequest = BinaryData.fromObject(createPersonRequestObj);
        return createPersonWithResponse(createPersonRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CreatePersonResult.class));
    }

    /**
     * Create a new person in a specified Large Person Group. To add face to this person, please call "Add Large Person
     * Group Person Face".
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/create-large-person-group-person for more
     * details.
     *
     * @param name User defined name, maximum length is 128.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of create person on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<CreatePersonResult> createPerson(String name) {
        // Generated convenience method for createPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        CreatePersonRequest createPersonRequestObj = new CreatePersonRequest(name);
        BinaryData createPersonRequest = BinaryData.fromObject(createPersonRequestObj);
        return createPersonWithResponse(createPersonRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(CreatePersonResult.class));
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group-person for more
     * details.
     *
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deletePerson(String personId) {
        // Generated convenience method for deletePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deletePersonWithResponse(personId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person
     * for more details.
     *
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the person in a specified large person group on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LargePersonGroupPerson> getPerson(String personId) {
        // Generated convenience method for getPersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonWithResponse(personId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LargePersonGroupPerson.class));
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person for more
     * details.
     *
     * @param personId ID of the person.
     * @param name User defined name, maximum length is 128.
     * @param userData Optional user defined data. Length should not exceed 16K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updatePerson(String personId, String name, String userData) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonRequest updatePersonRequestObj = new UpdatePersonRequest().setName(name).setUserData(userData);
        BinaryData updatePersonRequest = BinaryData.fromObject(updatePersonRequestObj);
        return updatePersonWithResponse(personId, updatePersonRequest, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person for more
     * details.
     *
     * @param personId ID of the person.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updatePerson(String personId) {
        // Generated convenience method for updatePersonWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdatePersonRequest updatePersonRequestObj = new UpdatePersonRequest();
        BinaryData updatePersonRequest = BinaryData.fromObject(updatePersonRequestObj);
        return updatePersonWithResponse(personId, updatePersonRequest, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * List all persons' information in the specified Large Person Group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-persons
     * for more details.
     *
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LargePersonGroupPerson>> getPersons(String start, Integer top) {
        // Generated convenience method for getPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getPersonsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP_PERSON));
    }

    /**
     * List all persons' information in the specified Large Person Group, including personId, name, userData and
     * persistedFaceIds of registered person faces.
     *
     * Please refer to https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-persons
     * for more details.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<LargePersonGroupPerson>> getPersons() {
        // Generated convenience method for getPersonsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getPersonsWithResponse(requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP_PERSON));
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for
     * more details.
     *
     * @param personId ID of the person.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFace(String personId, String url, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        return addFaceFromUrlImpl(personId, url, targetFace, detectionModel, userData);
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for
     * more details.
     *
     * @param personId ID of the person.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFace(String personId, String url) {
        return addFaceFromUrlImpl(personId, url);
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFace(String personId, BinaryData imageContent, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        return addFaceImpl(personId, imageContent, targetFace, detectionModel, userData);
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AddFaceResult> addFace(String personId, BinaryData imageContent) {
        return addFaceImpl(personId, imageContent);
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for
     * more details.
     *
     * @param personId ID of the person.
     * @param url URL of input image.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AddFaceResult> addFaceFromUrlImpl(String personId, String url, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceFromUrlImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddFaceFromUrlRequest addFaceFromUrlRequestObj = new AddFaceFromUrlRequest(url);
        BinaryData addFaceFromUrlRequest = BinaryData.fromObject(addFaceFromUrlRequestObj);
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceFromUrlImplWithResponse(personId, addFaceFromUrlRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face-from-url for
     * more details.
     *
     * @param personId ID of the person.
     * @param url URL of input image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AddFaceResult> addFaceFromUrlImpl(String personId, String url) {
        // Generated convenience method for addFaceFromUrlImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        AddFaceFromUrlRequest addFaceFromUrlRequestObj = new AddFaceFromUrlRequest(url);
        BinaryData addFaceFromUrlRequest = BinaryData.fromObject(addFaceFromUrlRequestObj);
        return addFaceFromUrlImplWithResponse(personId, addFaceFromUrlRequest, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @param targetFace A face rectangle to specify the target face to be added to a person, in the format of
     * 'targetFace=left,top,width,height'.
     * @param detectionModel The 'detectionModel' associated with the detected faceIds. Supported 'detectionModel'
     * values include 'detection_01', 'detection_02' and 'detection_03'. The default value is 'detection_01'.
     * @param userData User-provided data attached to the face. The size limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AddFaceResult> addFaceImpl(String personId, BinaryData imageContent, List<Integer> targetFace,
        FaceDetectionModel detectionModel, String userData) {
        // Generated convenience method for addFaceImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (targetFace != null) {
            requestOptions.addQueryParam("targetFace",
                JacksonAdapter.createDefaultSerializerAdapter().serializeIterable(targetFace, CollectionFormat.CSV),
                false);
        }
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (userData != null) {
            requestOptions.addQueryParam("userData", userData, false);
        }
        return addFaceImplWithResponse(personId, imageContent, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Add a face to a person into a Large Person Group for face identification or verification.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/add-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param imageContent The image to be analyzed.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response body for adding face on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<AddFaceResult> addFaceImpl(String personId, BinaryData imageContent) {
        // Generated convenience method for addFaceImplWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return addFaceImplWithResponse(personId, imageContent, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(AddFaceResult.class));
    }

    /**
     * Delete a face from a person in a Large Person Group by specified largePersonGroupId, personId and
     * persistedFaceId.
     *
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/delete-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteFace(String personId, String persistedFaceId) {
        // Generated convenience method for deleteFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteFaceWithResponse(personId, persistedFaceId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/get-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return face resource for large person group person on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LargePersonGroupPersonFace> getFace(String personId, String persistedFaceId) {
        // Generated convenience method for getFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getFaceWithResponse(personId, persistedFaceId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LargePersonGroupPersonFace.class));
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @param userData User-provided data attached to the face. The length limit is 1K.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateFace(String personId, String persistedFaceId, String userData) {
        // Generated convenience method for updateFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateFaceRequest updateFaceRequestObj = new UpdateFaceRequest().setUserData(userData);
        BinaryData updateFaceRequest = BinaryData.fromObject(updateFaceRequestObj);
        return updateFaceWithResponse(personId, persistedFaceId, updateFaceRequest, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/person-group-operations/update-large-person-group-person-face for more
     * details.
     *
     * @param personId ID of the person.
     * @param persistedFaceId Face ID of the face.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> updateFace(String personId, String persistedFaceId) {
        // Generated convenience method for updateFaceWithResponse
        RequestOptions requestOptions = new RequestOptions();
        UpdateFaceRequest updateFaceRequestObj = new UpdateFaceRequest();
        BinaryData updateFaceRequest = BinaryData.fromObject(updateFaceRequestObj);
        return updateFaceWithResponse(personId, persistedFaceId, updateFaceRequest, requestOptions)
            .flatMap(FluxUtil::toMono);
    }

    @Generated
    private static final TypeReference<List<LargePersonGroup>> TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP
        = new TypeReference<List<LargePersonGroup>>() {
        };

    @Generated
    private static final TypeReference<List<LargePersonGroupPerson>> TYPE_REFERENCE_LIST_LARGE_PERSON_GROUP_PERSON
        = new TypeReference<List<LargePersonGroupPerson>>() {
        };
}
