// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Training result of a container.
 */
@Immutable
public final class FaceTrainingResult implements JsonSerializable<FaceTrainingResult> {

    /*
     * Training status of the container.
     */
    @Generated
    private final FaceOperationStatus status;

    /*
     * A combined UTC date and time string that describes the created time of the person group, large person group or
     * large face list.
     */
    @Generated
    private final OffsetDateTime createdDateTime;

    /*
     * A combined UTC date and time string that describes the last modify time of the person group, large person group
     * or large face list, could be null value when the group is not successfully trained.
     */
    @Generated
    private final OffsetDateTime lastActionDateTime;

    /*
     * A combined UTC date and time string that describes the last successful training time of the person group, large
     * person group or large face list.
     */
    @Generated
    private final OffsetDateTime lastSuccessfulTrainingDateTime;

    /*
     * Show failure message when training failed (omitted when training succeed).
     */
    @Generated
    private String message;

    /**
     * Creates an instance of FaceTrainingResult class.
     *
     * @param status the status value to set.
     * @param createdDateTime the createdDateTime value to set.
     * @param lastActionDateTime the lastActionDateTime value to set.
     * @param lastSuccessfulTrainingDateTime the lastSuccessfulTrainingDateTime value to set.
     */
    @Generated
    private FaceTrainingResult(FaceOperationStatus status, OffsetDateTime createdDateTime,
        OffsetDateTime lastActionDateTime, OffsetDateTime lastSuccessfulTrainingDateTime) {
        this.status = status;
        this.createdDateTime = createdDateTime;
        this.lastActionDateTime = lastActionDateTime;
        this.lastSuccessfulTrainingDateTime = lastSuccessfulTrainingDateTime;
    }

    /**
     * Get the status property: Training status of the container.
     *
     * @return the status value.
     */
    @Generated
    public FaceOperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdDateTime property: A combined UTC date and time string that describes the created time of the
     * person group, large person group or large face list.
     *
     * @return the createdDateTime value.
     */
    @Generated
    public OffsetDateTime getCreatedDateTime() {
        return this.createdDateTime;
    }

    /**
     * Get the lastActionDateTime property: A combined UTC date and time string that describes the last modify time of
     * the person group, large person group or large face list, could be null value when the group is not successfully
     * trained.
     *
     * @return the lastActionDateTime value.
     */
    @Generated
    public OffsetDateTime getLastActionDateTime() {
        return this.lastActionDateTime;
    }

    /**
     * Get the lastSuccessfulTrainingDateTime property: A combined UTC date and time string that describes the last
     * successful training time of the person group, large person group or large face list.
     *
     * @return the lastSuccessfulTrainingDateTime value.
     */
    @Generated
    public OffsetDateTime getLastSuccessfulTrainingDateTime() {
        return this.lastSuccessfulTrainingDateTime;
    }

    /**
     * Get the message property: Show failure message when training failed (omitted when training succeed).
     *
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("createdDateTime",
            this.createdDateTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdDateTime));
        jsonWriter.writeStringField("lastActionDateTime",
            this.lastActionDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastActionDateTime));
        jsonWriter.writeStringField("lastSuccessfulTrainingDateTime",
            this.lastSuccessfulTrainingDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastSuccessfulTrainingDateTime));
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaceTrainingResult from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaceTrainingResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FaceTrainingResult.
     */
    @Generated
    public static FaceTrainingResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaceOperationStatus status = null;
            OffsetDateTime createdDateTime = null;
            OffsetDateTime lastActionDateTime = null;
            OffsetDateTime lastSuccessfulTrainingDateTime = null;
            String message = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("status".equals(fieldName)) {
                    status = FaceOperationStatus.fromString(reader.getString());
                } else if ("createdDateTime".equals(fieldName)) {
                    createdDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastActionDateTime".equals(fieldName)) {
                    lastActionDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("lastSuccessfulTrainingDateTime".equals(fieldName)) {
                    lastSuccessfulTrainingDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FaceTrainingResult deserializedFaceTrainingResult
                = new FaceTrainingResult(status, createdDateTime, lastActionDateTime, lastSuccessfulTrainingDateTime);
            deserializedFaceTrainingResult.message = message;
            return deserializedFaceTrainingResult;
        });
    }
}
