// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.implementation.models;

import com.azure.ai.vision.face.models.FindSimilarMatchMode;
import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The FindSimilarRequest model.
 */
@Fluent
public final class FindSimilarRequest implements JsonSerializable<FindSimilarRequest> {
    /*
     * faceId of the query face. User needs to call "Detect" first to get a valid faceId. Note that this faceId is not persisted and will expire 24 hours after the detection call.
     */
    @Generated
    private final String faceId;

    /*
     * The number of top similar faces returned. The valid range is [1, 1000]. Default value is 20.
     */
    @Generated
    private Integer maxNumOfCandidatesReturned;

    /*
     * Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is 'matchPerson'.
     */
    @Generated
    private FindSimilarMatchMode mode;

    /*
     * An array of candidate faceIds. All of them are created by "Detect" and the faceIds will expire 24 hours after the detection call. The number of faceIds is limited to 1000.
     */
    @Generated
    private final List<String> faceIds;

    /**
     * Creates an instance of FindSimilarRequest class.
     * 
     * @param faceId the faceId value to set.
     * @param faceIds the faceIds value to set.
     */
    @Generated
    public FindSimilarRequest(String faceId, List<String> faceIds) {
        this.faceId = faceId;
        this.faceIds = faceIds;
    }

    /**
     * Get the faceId property: faceId of the query face. User needs to call "Detect" first to get a valid faceId. Note
     * that this faceId is not persisted and will expire 24 hours after the detection call.
     * 
     * @return the faceId value.
     */
    @Generated
    public String getFaceId() {
        return this.faceId;
    }

    /**
     * Get the maxNumOfCandidatesReturned property: The number of top similar faces returned. The valid range is [1,
     * 1000]. Default value is 20.
     * 
     * @return the maxNumOfCandidatesReturned value.
     */
    @Generated
    public Integer getMaxNumOfCandidatesReturned() {
        return this.maxNumOfCandidatesReturned;
    }

    /**
     * Set the maxNumOfCandidatesReturned property: The number of top similar faces returned. The valid range is [1,
     * 1000]. Default value is 20.
     * 
     * @param maxNumOfCandidatesReturned the maxNumOfCandidatesReturned value to set.
     * @return the FindSimilarRequest object itself.
     */
    @Generated
    public FindSimilarRequest setMaxNumOfCandidatesReturned(Integer maxNumOfCandidatesReturned) {
        this.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
        return this;
    }

    /**
     * Get the mode property: Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is
     * 'matchPerson'.
     * 
     * @return the mode value.
     */
    @Generated
    public FindSimilarMatchMode getMode() {
        return this.mode;
    }

    /**
     * Set the mode property: Similar face searching mode. It can be 'matchPerson' or 'matchFace'. Default value is
     * 'matchPerson'.
     * 
     * @param mode the mode value to set.
     * @return the FindSimilarRequest object itself.
     */
    @Generated
    public FindSimilarRequest setMode(FindSimilarMatchMode mode) {
        this.mode = mode;
        return this;
    }

    /**
     * Get the faceIds property: An array of candidate faceIds. All of them are created by "Detect" and the faceIds will
     * expire 24 hours after the detection call. The number of faceIds is limited to 1000.
     * 
     * @return the faceIds value.
     */
    @Generated
    public List<String> getFaceIds() {
        return this.faceIds;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("faceId", this.faceId);
        jsonWriter.writeArrayField("faceIds", this.faceIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("maxNumOfCandidatesReturned", this.maxNumOfCandidatesReturned);
        jsonWriter.writeStringField("mode", this.mode == null ? null : this.mode.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FindSimilarRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FindSimilarRequest if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FindSimilarRequest.
     */
    @Generated
    public static FindSimilarRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String faceId = null;
            List<String> faceIds = null;
            Integer maxNumOfCandidatesReturned = null;
            FindSimilarMatchMode mode = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("faceId".equals(fieldName)) {
                    faceId = reader.getString();
                } else if ("faceIds".equals(fieldName)) {
                    faceIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("maxNumOfCandidatesReturned".equals(fieldName)) {
                    maxNumOfCandidatesReturned = reader.getNullable(JsonReader::getInt);
                } else if ("mode".equals(fieldName)) {
                    mode = FindSimilarMatchMode.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            FindSimilarRequest deserializedFindSimilarRequest = new FindSimilarRequest(faceId, faceIds);
            deserializedFindSimilarRequest.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
            deserializedFindSimilarRequest.mode = mode;

            return deserializedFindSimilarRequest;
        });
    }
}
