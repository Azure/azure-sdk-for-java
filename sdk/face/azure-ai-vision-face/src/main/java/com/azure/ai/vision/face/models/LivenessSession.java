// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Session result of detect liveness.
 */
@Immutable
public final class LivenessSession implements JsonSerializable<LivenessSession> {
    /*
     * The unique ID to reference this session.
     */
    @Generated
    private String sessionId;

    /*
     * Bearer token to provide authentication for the Vision SDK running on a client application. This Bearer token has
     * limited permissions to perform only the required action and expires after the TTL time. It is also auditable.
     */
    @Generated
    private final String authToken;

    /*
     * The current status of the session.
     */
    @Generated
    private final OperationState status;

    /*
     * The model version used for liveness classification. This is an optional parameter, and if this is not specified,
     * then the latest supported model version will be chosen
     */
    @Generated
    private LivenessModel modelVersion;

    /*
     * The results of the liveness session.
     */
    @Generated
    private final LivenessSessionResults results;

    /**
     * Creates an instance of LivenessSession class.
     * 
     * @param authToken the authToken value to set.
     * @param status the status value to set.
     * @param results the results value to set.
     */
    @Generated
    private LivenessSession(String authToken, OperationState status, LivenessSessionResults results) {
        this.authToken = authToken;
        this.status = status;
        this.results = results;
    }

    /**
     * Get the sessionId property: The unique ID to reference this session.
     * 
     * @return the sessionId value.
     */
    @Generated
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Get the authToken property: Bearer token to provide authentication for the Vision SDK running on a client
     * application. This Bearer token has limited permissions to perform only the required action and expires after the
     * TTL time. It is also auditable.
     * 
     * @return the authToken value.
     */
    @Generated
    public String getAuthToken() {
        return this.authToken;
    }

    /**
     * Get the status property: The current status of the session.
     * 
     * @return the status value.
     */
    @Generated
    public OperationState getStatus() {
        return this.status;
    }

    /**
     * Get the modelVersion property: The model version used for liveness classification. This is an optional parameter,
     * and if this is not specified, then the latest supported model version will be chosen.
     * 
     * @return the modelVersion value.
     */
    @Generated
    public LivenessModel getModelVersion() {
        return this.modelVersion;
    }

    /**
     * Get the results property: The results of the liveness session.
     * 
     * @return the results value.
     */
    @Generated
    public LivenessSessionResults getResults() {
        return this.results;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authToken", this.authToken);
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeJsonField("results", this.results);
        jsonWriter.writeStringField("modelVersion", this.modelVersion == null ? null : this.modelVersion.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessSession from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessSession if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessSession.
     */
    @Generated
    public static LivenessSession fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String sessionId = null;
            String authToken = null;
            OperationState status = null;
            LivenessSessionResults results = null;
            LivenessModel modelVersion = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sessionId".equals(fieldName)) {
                    sessionId = reader.getString();
                } else if ("authToken".equals(fieldName)) {
                    authToken = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = OperationState.fromString(reader.getString());
                } else if ("results".equals(fieldName)) {
                    results = LivenessSessionResults.fromJson(reader);
                } else if ("modelVersion".equals(fieldName)) {
                    modelVersion = LivenessModel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            LivenessSession deserializedLivenessSession = new LivenessSession(authToken, status, results);
            deserializedLivenessSession.sessionId = sessionId;
            deserializedLivenessSession.modelVersion = modelVersion;

            return deserializedLivenessSession;
        });
    }
}
