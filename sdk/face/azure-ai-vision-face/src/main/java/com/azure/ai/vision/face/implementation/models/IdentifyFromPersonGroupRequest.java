// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.implementation.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.Generated;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The IdentifyFromPersonGroupRequest model.
 */
@Fluent
public final class IdentifyFromPersonGroupRequest implements JsonSerializable<IdentifyFromPersonGroupRequest> {
    /*
     * Array of query faces faceIds, created by the "Detect". Each of the faces are identified independently. The valid number of faceIds is between [1, 10].
     */
    @Generated
    private final List<String> faceIds;

    /*
     * personGroupId of the target Person Group, created by "Create Person Group". Parameter personGroupId and largePersonGroupId should not be provided at the same time.
     */
    @Generated
    private final String personGroupId;

    /*
     * The range of maxNumOfCandidatesReturned is between 1 and 100. Default value is 10.
     */
    @Generated
    private Integer maxNumOfCandidatesReturned;

    /*
     * Customized identification confidence threshold, in the range of [0, 1]. Advanced user can tweak this value to override default internal threshold for better precision on their scenario data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.
     */
    @Generated
    private Double confidenceThreshold;

    /**
     * Creates an instance of IdentifyFromPersonGroupRequest class.
     * 
     * @param faceIds the faceIds value to set.
     * @param personGroupId the personGroupId value to set.
     */
    @Generated
    public IdentifyFromPersonGroupRequest(List<String> faceIds, String personGroupId) {
        this.faceIds = faceIds;
        this.personGroupId = personGroupId;
    }

    /**
     * Get the faceIds property: Array of query faces faceIds, created by the "Detect". Each of the faces are identified
     * independently. The valid number of faceIds is between [1, 10].
     * 
     * @return the faceIds value.
     */
    @Generated
    public List<String> getFaceIds() {
        return this.faceIds;
    }

    /**
     * Get the personGroupId property: personGroupId of the target Person Group, created by "Create Person Group".
     * Parameter personGroupId and largePersonGroupId should not be provided at the same time.
     * 
     * @return the personGroupId value.
     */
    @Generated
    public String getPersonGroupId() {
        return this.personGroupId;
    }

    /**
     * Get the maxNumOfCandidatesReturned property: The range of maxNumOfCandidatesReturned is between 1 and 100.
     * Default value is 10.
     * 
     * @return the maxNumOfCandidatesReturned value.
     */
    @Generated
    public Integer getMaxNumOfCandidatesReturned() {
        return this.maxNumOfCandidatesReturned;
    }

    /**
     * Set the maxNumOfCandidatesReturned property: The range of maxNumOfCandidatesReturned is between 1 and 100.
     * Default value is 10.
     * 
     * @param maxNumOfCandidatesReturned the maxNumOfCandidatesReturned value to set.
     * @return the IdentifyFromPersonGroupRequest object itself.
     */
    @Generated
    public IdentifyFromPersonGroupRequest setMaxNumOfCandidatesReturned(Integer maxNumOfCandidatesReturned) {
        this.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
        return this;
    }

    /**
     * Get the confidenceThreshold property: Customized identification confidence threshold, in the range of [0, 1].
     * Advanced user can tweak this value to override default internal threshold for better precision on their scenario
     * data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.
     * 
     * @return the confidenceThreshold value.
     */
    @Generated
    public Double getConfidenceThreshold() {
        return this.confidenceThreshold;
    }

    /**
     * Set the confidenceThreshold property: Customized identification confidence threshold, in the range of [0, 1].
     * Advanced user can tweak this value to override default internal threshold for better precision on their scenario
     * data. Note there is no guarantee of this threshold value working on other data and after algorithm updates.
     * 
     * @param confidenceThreshold the confidenceThreshold value to set.
     * @return the IdentifyFromPersonGroupRequest object itself.
     */
    @Generated
    public IdentifyFromPersonGroupRequest setConfidenceThreshold(Double confidenceThreshold) {
        this.confidenceThreshold = confidenceThreshold;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("faceIds", this.faceIds, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("personGroupId", this.personGroupId);
        jsonWriter.writeNumberField("maxNumOfCandidatesReturned", this.maxNumOfCandidatesReturned);
        jsonWriter.writeNumberField("confidenceThreshold", this.confidenceThreshold);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentifyFromPersonGroupRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentifyFromPersonGroupRequest if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the IdentifyFromPersonGroupRequest.
     */
    @Generated
    public static IdentifyFromPersonGroupRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<String> faceIds = null;
            String personGroupId = null;
            Integer maxNumOfCandidatesReturned = null;
            Double confidenceThreshold = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("faceIds".equals(fieldName)) {
                    faceIds = reader.readArray(reader1 -> reader1.getString());
                } else if ("personGroupId".equals(fieldName)) {
                    personGroupId = reader.getString();
                } else if ("maxNumOfCandidatesReturned".equals(fieldName)) {
                    maxNumOfCandidatesReturned = reader.getNullable(JsonReader::getInt);
                } else if ("confidenceThreshold".equals(fieldName)) {
                    confidenceThreshold = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }
            IdentifyFromPersonGroupRequest deserializedIdentifyFromPersonGroupRequest
                = new IdentifyFromPersonGroupRequest(faceIds, personGroupId);
            deserializedIdentifyFromPersonGroupRequest.maxNumOfCandidatesReturned = maxNumOfCandidatesReturned;
            deserializedIdentifyFromPersonGroupRequest.confidenceThreshold = confidenceThreshold;

            return deserializedIdentifyFromPersonGroupRequest;
        });
    }
}
