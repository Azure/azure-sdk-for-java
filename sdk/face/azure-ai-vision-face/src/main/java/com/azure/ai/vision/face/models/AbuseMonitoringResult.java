// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The abuse monitoring result for the liveness attempt.
 */
@Immutable
public final class AbuseMonitoringResult implements JsonSerializable<AbuseMonitoringResult> {
    /*
     * Denotes if abuse detection triggered during this liveness attempt.
     */
    @Generated
    private final HttpPart2 isAbuseDetected;

    /*
     * Denotes if abuse detection triggered during this liveness attempt.
     */
    @Generated
    private final List<OtherFlaggedSessions> otherFlaggedSessions;

    /**
     * Creates an instance of AbuseMonitoringResult class.
     * 
     * @param isAbuseDetected the isAbuseDetected value to set.
     * @param otherFlaggedSessions the otherFlaggedSessions value to set.
     */
    @Generated
    private AbuseMonitoringResult(HttpPart2 isAbuseDetected, List<OtherFlaggedSessions> otherFlaggedSessions) {
        this.isAbuseDetected = isAbuseDetected;
        this.otherFlaggedSessions = otherFlaggedSessions;
    }

    /**
     * Get the isAbuseDetected property: Denotes if abuse detection triggered during this liveness attempt.
     * 
     * @return the isAbuseDetected value.
     */
    @Generated
    public HttpPart2 getIsAbuseDetected() {
        return this.isAbuseDetected;
    }

    /**
     * Get the otherFlaggedSessions property: Denotes if abuse detection triggered during this liveness attempt.
     * 
     * @return the otherFlaggedSessions value.
     */
    @Generated
    public List<OtherFlaggedSessions> getOtherFlaggedSessions() {
        return this.otherFlaggedSessions;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("isAbuseDetected", this.isAbuseDetected);
        jsonWriter.writeArrayField("otherFlaggedSessions", this.otherFlaggedSessions,
            (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AbuseMonitoringResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AbuseMonitoringResult if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AbuseMonitoringResult.
     */
    @Generated
    public static AbuseMonitoringResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HttpPart2 isAbuseDetected = null;
            List<OtherFlaggedSessions> otherFlaggedSessions = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isAbuseDetected".equals(fieldName)) {
                    isAbuseDetected = HttpPart2.fromJson(reader);
                } else if ("otherFlaggedSessions".equals(fieldName)) {
                    otherFlaggedSessions = reader.readArray(reader1 -> OtherFlaggedSessions.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new AbuseMonitoringResult(isAbuseDetected, otherFlaggedSessions);
        });
    }
}
