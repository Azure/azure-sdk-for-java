// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Response body for adding face.
 */
@Immutable
public final class AddFaceResult implements JsonSerializable<AddFaceResult> {
    /*
     * Persisted Face ID of the added face, which is persisted and will not expire. Different from faceId which is created in "Detect" and will expire in 24 hours after the detection call.
     */
    @Generated
    private final String persistedFaceId;

    /**
     * Creates an instance of AddFaceResult class.
     * 
     * @param persistedFaceId the persistedFaceId value to set.
     */
    @Generated
    private AddFaceResult(String persistedFaceId) {
        this.persistedFaceId = persistedFaceId;
    }

    /**
     * Get the persistedFaceId property: Persisted Face ID of the added face, which is persisted and will not expire.
     * Different from faceId which is created in "Detect" and will expire in 24 hours after the detection call.
     * 
     * @return the persistedFaceId value.
     */
    @Generated
    public String getPersistedFaceId() {
        return this.persistedFaceId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("persistedFaceId", this.persistedFaceId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddFaceResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddFaceResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the AddFaceResult.
     */
    @Generated
    public static AddFaceResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String persistedFaceId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("persistedFaceId".equals(fieldName)) {
                    persistedFaceId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            return new AddFaceResult(persistedFaceId);
        });
    }
}
