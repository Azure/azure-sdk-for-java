// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The results of the liveness classification.
 */
@Immutable
public final class LivenessResult implements JsonSerializable<LivenessResult> {
    /*
     * The liveness classification for the target face.
     */
    @Generated
    private FaceLivenessDecision livenessDecision;

    /*
     * Targets used for liveness classification.
     */
    @Generated
    private final LivenessDecisionTargets targets;

    /*
     * The server calculated digest for this request. If the client reported digest differs from the server calculated
     * digest, then the message integrity between the client and service has been compromised and the result should not
     * be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end
     * solution.
     */
    @Generated
    private final String digest;

    /*
     * The image ID of the session request.
     */
    @Generated
    private String sessionImageId;

    /**
     * Creates an instance of LivenessResult class.
     * 
     * @param targets the targets value to set.
     * @param digest the digest value to set.
     */
    @Generated
    private LivenessResult(LivenessDecisionTargets targets, String digest) {
        this.targets = targets;
        this.digest = digest;
    }

    /**
     * Get the livenessDecision property: The liveness classification for the target face.
     * 
     * @return the livenessDecision value.
     */
    @Generated
    public FaceLivenessDecision getLivenessDecision() {
        return this.livenessDecision;
    }

    /**
     * Get the targets property: Targets used for liveness classification.
     * 
     * @return the targets value.
     */
    @Generated
    public LivenessDecisionTargets getTargets() {
        return this.targets;
    }

    /**
     * Get the digest property: The server calculated digest for this request. If the client reported digest differs
     * from the server calculated digest, then the message integrity between the client and service has been compromised
     * and the result should not be trusted. For more information, see how to guides on how to leverage this value to
     * secure your end-to-end solution.
     * 
     * @return the digest value.
     */
    @Generated
    public String getDigest() {
        return this.digest;
    }

    /**
     * Get the sessionImageId property: The image ID of the session request.
     * 
     * @return the sessionImageId value.
     */
    @Generated
    public String getSessionImageId() {
        return this.sessionImageId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("targets", this.targets);
        jsonWriter.writeStringField("digest", this.digest);
        jsonWriter.writeStringField("livenessDecision",
            this.livenessDecision == null ? null : this.livenessDecision.toString());
        jsonWriter.writeStringField("sessionImageId", this.sessionImageId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessResult.
     */
    @Generated
    public static LivenessResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LivenessDecisionTargets targets = null;
            String digest = null;
            FaceLivenessDecision livenessDecision = null;
            String sessionImageId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("targets".equals(fieldName)) {
                    targets = LivenessDecisionTargets.fromJson(reader);
                } else if ("digest".equals(fieldName)) {
                    digest = reader.getString();
                } else if ("livenessDecision".equals(fieldName)) {
                    livenessDecision = FaceLivenessDecision.fromString(reader.getString());
                } else if ("sessionImageId".equals(fieldName)) {
                    sessionImageId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LivenessResult deserializedLivenessResult = new LivenessResult(targets, digest);
            deserializedLivenessResult.livenessDecision = livenessDecision;
            deserializedLivenessResult.sessionImageId = sessionImageId;

            return deserializedLivenessResult;
        });
    }
}
