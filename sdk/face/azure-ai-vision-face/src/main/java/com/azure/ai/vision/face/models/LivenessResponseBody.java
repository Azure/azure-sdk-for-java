// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * The response body of detect liveness API call.
 */
@Immutable
public final class LivenessResponseBody implements JsonSerializable<LivenessResponseBody> {
    /*
     * The liveness classification for the target face.
     */
    @Generated
    private FaceLivenessDecision livenessDecision;

    /*
     * Specific targets used for liveness classification.
     */
    @Generated
    private LivenessOutputsTarget target;

    /*
     * The model version used for liveness classification.
     */
    @Generated
    private LivenessModel modelVersionUsed;

    /*
     * The face verification output. Only available when the request is liveness with verify.
     */
    @Generated
    private LivenessWithVerifyOutputs verifyResult;

    /*
     * Additional properties
     */
    @Generated
    private Map<String, Object> additionalProperties;

    /**
     * Creates an instance of LivenessResponseBody class.
     */
    @Generated
    private LivenessResponseBody() {
    }

    /**
     * Get the livenessDecision property: The liveness classification for the target face.
     * 
     * @return the livenessDecision value.
     */
    @Generated
    public FaceLivenessDecision getLivenessDecision() {
        return this.livenessDecision;
    }

    /**
     * Get the target property: Specific targets used for liveness classification.
     * 
     * @return the target value.
     */
    @Generated
    public LivenessOutputsTarget getTarget() {
        return this.target;
    }

    /**
     * Get the modelVersionUsed property: The model version used for liveness classification.
     * 
     * @return the modelVersionUsed value.
     */
    @Generated
    public LivenessModel getModelVersionUsed() {
        return this.modelVersionUsed;
    }

    /**
     * Get the verifyResult property: The face verification output. Only available when the request is liveness with
     * verify.
     * 
     * @return the verifyResult value.
     */
    @Generated
    public LivenessWithVerifyOutputs getVerifyResult() {
        return this.verifyResult;
    }

    /**
     * Get the additionalProperties property: Additional properties.
     * 
     * @return the additionalProperties value.
     */
    @Generated
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("livenessDecision",
            this.livenessDecision == null ? null : this.livenessDecision.toString());
        jsonWriter.writeJsonField("target", this.target);
        jsonWriter.writeStringField("modelVersionUsed",
            this.modelVersionUsed == null ? null : this.modelVersionUsed.toString());
        jsonWriter.writeJsonField("verifyResult", this.verifyResult);
        if (additionalProperties != null) {
            for (Map.Entry<String, Object> additionalProperty : additionalProperties.entrySet()) {
                jsonWriter.writeUntypedField(additionalProperty.getKey(), additionalProperty.getValue());
            }
        }
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessResponseBody from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessResponseBody if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the LivenessResponseBody.
     */
    @Generated
    public static LivenessResponseBody fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LivenessResponseBody deserializedLivenessResponseBody = new LivenessResponseBody();
            Map<String, Object> additionalProperties = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("livenessDecision".equals(fieldName)) {
                    deserializedLivenessResponseBody.livenessDecision
                        = FaceLivenessDecision.fromString(reader.getString());
                } else if ("target".equals(fieldName)) {
                    deserializedLivenessResponseBody.target = LivenessOutputsTarget.fromJson(reader);
                } else if ("modelVersionUsed".equals(fieldName)) {
                    deserializedLivenessResponseBody.modelVersionUsed = LivenessModel.fromString(reader.getString());
                } else if ("verifyResult".equals(fieldName)) {
                    deserializedLivenessResponseBody.verifyResult = LivenessWithVerifyOutputs.fromJson(reader);
                } else {
                    if (additionalProperties == null) {
                        additionalProperties = new LinkedHashMap<>();
                    }

                    additionalProperties.put(fieldName, reader.readUntyped());
                }
            }
            deserializedLivenessResponseBody.additionalProperties = additionalProperties;

            return deserializedLivenessResponseBody;
        });
    }
}
