// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The face verification output.
 */
@Immutable
public final class LivenessWithVerifyOutputs implements JsonSerializable<LivenessWithVerifyOutputs> {

    /*
     * The target face liveness face and comparison image face verification confidence.
     */
    @Generated
    private final double matchConfidence;

    /*
     * Whether the target liveness face and comparison image face match.
     */
    @Generated
    private final boolean isIdentical;

    /**
     * Get the matchConfidence property: The target face liveness face and comparison image face verification
     * confidence.
     *
     * @return the matchConfidence value.
     */
    @Generated
    public double getMatchConfidence() {
        return this.matchConfidence;
    }

    /**
     * Get the isIdentical property: Whether the target liveness face and comparison image face match.
     *
     * @return the isIdentical value.
     */
    @Generated
    public boolean isIdentical() {
        return this.isIdentical;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeDoubleField("matchConfidence", this.matchConfidence);
        jsonWriter.writeBooleanField("isIdentical", this.isIdentical);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessWithVerifyOutputs from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessWithVerifyOutputs if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessWithVerifyOutputs.
     */
    @Generated
    public static LivenessWithVerifyOutputs fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            double matchConfidence = 0.0;
            boolean isIdentical = false;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("matchConfidence".equals(fieldName)) {
                    matchConfidence = reader.getDouble();
                } else if ("isIdentical".equals(fieldName)) {
                    isIdentical = reader.getBoolean();
                } else {
                    reader.skipChildren();
                }
            }
            return new LivenessWithVerifyOutputs(matchConfidence, isIdentical);
        });
    }

    /**
     * Creates an instance of LivenessWithVerifyOutputs class.
     *
     * @param matchConfidence the matchConfidence value to set.
     * @param isIdentical the isIdentical value to set.
     */
    @Generated
    private LivenessWithVerifyOutputs(double matchConfidence, boolean isIdentical) {
        this.matchConfidence = matchConfidence;
        this.isIdentical = isIdentical;
    }
}
