// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face;

import com.azure.ai.vision.face.implementation.FaceSessionClientImpl;
import com.azure.ai.vision.face.implementation.MultipartFormDataHelper;
import com.azure.ai.vision.face.implementation.models.CreateLivenessWithVerifySessionMultipartContent;
import com.azure.ai.vision.face.implementation.models.VerifyImageFileDetails;
import com.azure.ai.vision.face.models.CreateLivenessSessionContent;
import com.azure.ai.vision.face.models.CreateLivenessSessionResult;
import com.azure.ai.vision.face.models.CreateLivenessWithVerifySessionJsonContent;
import com.azure.ai.vision.face.models.CreateLivenessWithVerifySessionResult;
import com.azure.ai.vision.face.models.LivenessSession;
import com.azure.ai.vision.face.models.LivenessSessionAuditEntry;
import com.azure.ai.vision.face.models.LivenessSessionItem;
import com.azure.ai.vision.face.models.LivenessWithVerifySession;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;

/**
 * Initializes a new instance of the synchronous FaceSessionClient type.
 */
@ServiceClient(builder = FaceSessionClientBuilder.class)
public final class FaceSessionClient {

    @Generated
    private final FaceSessionClientImpl serviceClient;

    /**
     * Initializes an instance of FaceSessionClient class.
     *
     * @param serviceClient the service client implementation.
     */
    @Generated
    FaceSessionClient(FaceSessionClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new detect liveness session.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLiveness/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt; Client access can be revoked by deleting the session using the Delete Liveness Session operation. To
     * retrieve a result, use the Get Liveness Session. To audit the individual requests that a client has made to your
     * resource, use the List Liveness Session Audit Entries.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessSingleModalModel: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createLivenessSessionWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createLivenessSessionWithResponse(body, requestOptions);
    }

    /**
     * Delete all session related information for matching the specified session id.
     *
     * &gt; [!NOTE]
     * &gt; Deleting a session deactivates the Session Auth Token by blocking future API calls made with that Auth
     * Token. While this can be used to remove any access for that token, those requests will still count towards
     * overall resource rate limits. It's best to leverage TokenTTL to limit length of tokens in the case that it is
     * misused.
     *
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLivenessSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLivenessSessionWithResponse(sessionId, requestOptions);
    }

    /**
     * Get session result of detectLiveness/singleModal call.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detectLiveness/singleModal call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessSessionResultWithResponse(String sessionId, RequestOptions requestOptions) {
        return this.serviceClient.getLivenessSessionResultWithResponse(sessionId, requestOptions);
    }

    /**
     * Lists sessions for /detectLiveness/SingleModal.
     *
     * List sessions from the last sessionId greater than the 'start'.
     *
     * The result should be ordered by sessionId in ascending order.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Optional)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessSessionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getLivenessSessionsWithResponse(requestOptions);
    }

    /**
     * Gets session requests and response body for the session.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session requests and response body for the session along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessSessionAuditEntriesWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLivenessSessionAuditEntriesWithResponse(sessionId, requestOptions);
    }

    /**
     * Create a new liveness session with verify. Client device submits VerifyImage during the
     * /detectLivenessWithVerify/singleModal call.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt;
     * &gt; *
     * &gt; * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session
     * operation.
     * &gt; * To retrieve a result, use the Get Liveness With Verify Session.
     * &gt; * To audit the individual requests that a client has made to your resource, use the List Liveness With
     * Verify Session Audit Entries.
     *
     * Alternative Option: Client device submits VerifyImage during the /detectLivenessWithVerify/singleModal call.
     * &gt; [!NOTE]
     * &gt; Extra measures should be taken to validate that the client is sending the expected VerifyImage.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessSingleModalModel: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     returnVerifyImageHash: Boolean (Optional)
     *     verifyConfidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     verifyImage (Optional): {
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         qualityForRecognition: String(low/medium/high) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session with verify creation with verify image provided along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createLivenessWithVerifySessionWithResponse(BinaryData body, RequestOptions requestOptions) {
        return this.serviceClient.createLivenessWithVerifySessionWithResponse(body, requestOptions);
    }

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt;
     * &gt; *
     * &gt; * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session
     * operation.
     * &gt; * To retrieve a result, use the Get Liveness With Verify Session.
     * &gt; * To audit the individual requests that a client has made to your resource, use the List Liveness With
     * Verify Session Audit Entries.
     *
     * Recommended Option: VerifyImage is provided during session creation.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     verifyImage (Optional): {
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         qualityForRecognition: String(low/medium/high) (Required)
     *     }
     * }
     * }</pre>
     *
     * @param body Request content of liveness with verify session creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session with verify creation with verify image provided along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<BinaryData> createLivenessWithVerifySessionWithVerifyImageWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        // Protocol API requires serialization of parts with content-disposition and data, as operation
        // 'createLivenessWithVerifySessionWithVerifyImage' is 'multipart/form-data'
        return this.serviceClient.createLivenessWithVerifySessionWithVerifyImageWithResponse(body, requestOptions);
    }

    /**
     * Delete all session related information for matching the specified session id.
     *
     * &gt; [!NOTE]
     * &gt; Deleting a session deactivates the Session Auth Token by blocking future API calls made with that Auth
     * Token. While this can be used to remove any access for that token, those requests will still count towards
     * overall resource rate limits. It's best to leverage TokenTTL to limit length of tokens in the case that it is
     * misused.
     *
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLivenessWithVerifySessionWithResponse(String sessionId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLivenessWithVerifySessionWithResponse(sessionId, requestOptions);
    }

    /**
     * Get session result of detectLivenessWithVerify/singleModal call.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * }
     * }</pre>
     *
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detectLivenessWithVerify/singleModal call along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessWithVerifySessionResultWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLivenessWithVerifySessionResultWithResponse(sessionId, requestOptions);
    }

    /**
     * Lists sessions for /detectLivenessWithVerify/SingleModal.
     *
     * List sessions from the last sessionId greater than the "start".
     *
     * The result should be ordered by sessionId in ascending order.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Optional)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessWithVerifySessionsWithResponse(RequestOptions requestOptions) {
        return this.serviceClient.getLivenessWithVerifySessionsWithResponse(requestOptions);
    }

    /**
     * Gets session requests and response body for the session.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * ]
     * }</pre>
     *
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session requests and response body for the session along with {@link Response}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessWithVerifySessionAuditEntriesWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLivenessWithVerifySessionAuditEntriesWithResponse(sessionId, requestOptions);
    }

    /**
     * Create a new detect liveness session.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLiveness/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt; Client access can be revoked by deleting the session using the Delete Liveness Session operation. To
     * retrieve a result, use the Get Liveness Session. To audit the individual requests that a client has made to your
     * resource, use the List Liveness Session Audit Entries.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of liveness session creation.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public CreateLivenessSessionResult createLivenessSession(CreateLivenessSessionContent body) {
        // Generated convenience method for createLivenessSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createLivenessSessionWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(CreateLivenessSessionResult.class);
    }

    /**
     * Delete all session related information for matching the specified session id.
     *
     * &gt; [!NOTE]
     * &gt; Deleting a session deactivates the Session Auth Token by blocking future API calls made with that Auth
     * Token. While this can be used to remove any access for that token, those requests will still count towards
     * overall resource rate limits. It's best to leverage TokenTTL to limit length of tokens in the case that it is
     * misused.
     *
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLivenessSession(String sessionId) {
        // Generated convenience method for deleteLivenessSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLivenessSessionWithResponse(sessionId, requestOptions).getValue();
    }

    /**
     * Get session result of detectLiveness/singleModal call.
     *
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detectLiveness/singleModal call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LivenessSession getLivenessSessionResult(String sessionId) {
        // Generated convenience method for getLivenessSessionResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessSessionResultWithResponse(sessionId, requestOptions).getValue()
            .toObject(LivenessSession.class);
    }

    /**
     * Lists sessions for /detectLiveness/SingleModal.
     *
     * List sessions from the last sessionId greater than the 'start'.
     *
     * The result should be ordered by sessionId in ascending order.
     *
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionItem> getLivenessSessions(String start, Integer top) {
        // Generated convenience method for getLivenessSessionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getLivenessSessionsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM);
    }

    /**
     * Lists sessions for /detectLiveness/SingleModal.
     *
     * List sessions from the last sessionId greater than the 'start'.
     *
     * The result should be ordered by sessionId in ascending order.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionItem> getLivenessSessions() {
        // Generated convenience method for getLivenessSessionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessSessionsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM);
    }

    /**
     * Gets session requests and response body for the session.
     *
     * @param sessionId The unique ID to reference this session.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session requests and response body for the session.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionAuditEntry> getLivenessSessionAuditEntries(String sessionId, String start, Integer top) {
        // Generated convenience method for getLivenessSessionAuditEntriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getLivenessSessionAuditEntriesWithResponse(sessionId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_AUDIT_ENTRY);
    }

    /**
     * Gets session requests and response body for the session.
     *
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session requests and response body for the session.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionAuditEntry> getLivenessSessionAuditEntries(String sessionId) {
        // Generated convenience method for getLivenessSessionAuditEntriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessSessionAuditEntriesWithResponse(sessionId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_AUDIT_ENTRY);
    }

    /**
     * Delete all session related information for matching the specified session id.
     *
     * &gt; [!NOTE]
     * &gt; Deleting a session deactivates the Session Auth Token by blocking future API calls made with that Auth
     * Token. While this can be used to remove any access for that token, those requests will still count towards
     * overall resource rate limits. It's best to leverage TokenTTL to limit length of tokens in the case that it is
     * misused.
     *
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void deleteLivenessWithVerifySession(String sessionId) {
        // Generated convenience method for deleteLivenessWithVerifySessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        deleteLivenessWithVerifySessionWithResponse(sessionId, requestOptions).getValue();
    }

    /**
     * Get session result of detectLivenessWithVerify/singleModal call.
     *
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detectLivenessWithVerify/singleModal call.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public LivenessWithVerifySession getLivenessWithVerifySessionResult(String sessionId) {
        // Generated convenience method for getLivenessWithVerifySessionResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessWithVerifySessionResultWithResponse(sessionId, requestOptions).getValue()
            .toObject(LivenessWithVerifySession.class);
    }

    /**
     * Lists sessions for /detectLivenessWithVerify/SingleModal.
     *
     * List sessions from the last sessionId greater than the "start".
     *
     * The result should be ordered by sessionId in ascending order.
     *
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionItem> getLivenessWithVerifySessions(String start, Integer top) {
        // Generated convenience method for getLivenessWithVerifySessionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getLivenessWithVerifySessionsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM);
    }

    /**
     * Lists sessions for /detectLivenessWithVerify/SingleModal.
     *
     * List sessions from the last sessionId greater than the "start".
     *
     * The result should be ordered by sessionId in ascending order.
     *
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionItem> getLivenessWithVerifySessions() {
        // Generated convenience method for getLivenessWithVerifySessionsWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessWithVerifySessionsWithResponse(requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM);
    }

    /**
     * Gets session requests and response body for the session.
     *
     * @param sessionId The unique ID to reference this session.
     * @param start List resources greater than the "start". It contains no more than 64 characters. Default is empty.
     * @param top The number of items to list, ranging in [1, 1000]. Default is 1000.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session requests and response body for the session.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionAuditEntry> getLivenessWithVerifySessionAuditEntries(String sessionId, String start,
        Integer top) {
        // Generated convenience method for getLivenessWithVerifySessionAuditEntriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        if (start != null) {
            requestOptions.addQueryParam("start", start, false);
        }
        if (top != null) {
            requestOptions.addQueryParam("top", String.valueOf(top), false);
        }
        return getLivenessWithVerifySessionAuditEntriesWithResponse(sessionId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_AUDIT_ENTRY);
    }

    /**
     * Gets session requests and response body for the session.
     *
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session requests and response body for the session.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<LivenessSessionAuditEntry> getLivenessWithVerifySessionAuditEntries(String sessionId) {
        // Generated convenience method for getLivenessWithVerifySessionAuditEntriesWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessWithVerifySessionAuditEntriesWithResponse(sessionId, requestOptions).getValue()
            .toObject(TYPE_REFERENCE_LIST_LIVENESS_SESSION_AUDIT_ENTRY);
    }

    @Generated
    private static final TypeReference<List<LivenessSessionItem>> TYPE_REFERENCE_LIST_LIVENESS_SESSION_ITEM
        = new TypeReference<List<LivenessSessionItem>>() {
        };

    @Generated
    private static final TypeReference<List<LivenessSessionAuditEntry>> TYPE_REFERENCE_LIST_LIVENESS_SESSION_AUDIT_ENTRY
        = new TypeReference<List<LivenessSessionAuditEntry>>() {
        };

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt;
     * &gt; *
     * &gt; * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session
     * operation.
     * &gt; * To retrieve a result, use the Get Liveness With Verify Session.
     * &gt; * To audit the individual requests that a client has made to your resource, use the List Liveness With
     * Verify Session Audit Entries.
     *
     * Recommended Option: VerifyImage is provided during session creation.
     *
     * @param body Request content of liveness with verify session creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of liveness session with verify creation with verify image provided.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    CreateLivenessWithVerifySessionResult
        createLivenessWithVerifySessionWithVerifyImage(CreateLivenessWithVerifySessionMultipartContent body) {
        // Generated convenience method for createLivenessWithVerifySessionWithVerifyImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createLivenessWithVerifySessionWithVerifyImageWithResponse(
            new MultipartFormDataHelper(requestOptions).serializeJsonField("Parameters", body.getParameters())
                .serializeFileField("VerifyImage", body.getVerifyImage().getContent(),
                    body.getVerifyImage().getContentType(), body.getVerifyImage().getFilename())
                .end()
                .getRequestBody(),
            requestOptions).getValue().toObject(CreateLivenessWithVerifySessionResult.class);
    }

    /**
     * Create a new liveness session with verify. Client device submits VerifyImage during the
     * /detectLivenessWithVerify/singleModal call.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt;
     * &gt; *
     * &gt; * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session
     * operation.
     * &gt; * To retrieve a result, use the Get Liveness With Verify Session.
     * &gt; * To audit the individual requests that a client has made to your resource, use the List Liveness With
     * Verify Session Audit Entries.
     *
     * Alternative Option: Client device submits VerifyImage during the /detectLivenessWithVerify/singleModal call.
     * &gt; [!NOTE]
     * &gt; Extra measures should be taken to validate that the client is sending the expected VerifyImage.
     *
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of liveness session with verify creation with verify image provided.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    CreateLivenessWithVerifySessionResult
        createLivenessWithVerifySession(CreateLivenessWithVerifySessionJsonContent body) {
        // Generated convenience method for createLivenessWithVerifySessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createLivenessWithVerifySessionWithResponse(BinaryData.fromObject(body), requestOptions).getValue()
            .toObject(CreateLivenessWithVerifySessionResult.class);
    }

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     *
     * A session is best for client device scenarios where developers want to authorize a client device to perform only
     * a liveness detection without granting full access to their resource. Created sessions have a limited life span
     * and only authorize clients to perform the desired action before access is expired.
     *
     * Permissions includes...
     * &gt;
     * *
     * * Ability to call /detectLivenessWithVerify/singleModal for up to 3 retries.
     * * A token lifetime of 10 minutes.
     *
     * &gt; [!NOTE]
     * &gt;
     * &gt; *
     * &gt; * Client access can be revoked by deleting the session using the Delete Liveness With Verify Session
     * operation.
     * &gt; * To retrieve a result, use the Get Liveness With Verify Session.
     * &gt; * To audit the individual requests that a client has made to your resource, use the List Liveness With
     * Verify Session Audit Entries.
     *
     * @param createLivenessWithVerifySessionParameters Request for creating liveness session.
     * @param verifyImage The image to be verified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return response of liveness session with verify creation with verify image provided.
     */
    public CreateLivenessWithVerifySessionResult createLivenessWithVerifySession(
        CreateLivenessWithVerifySessionJsonContent createLivenessWithVerifySessionParameters, BinaryData verifyImage) {
        if (verifyImage == null) {
            return createLivenessWithVerifySession(createLivenessWithVerifySessionParameters);
        }
        VerifyImageFileDetails verifyImageFileDetails = new VerifyImageFileDetails(verifyImage);
        CreateLivenessWithVerifySessionMultipartContent realParameters
            = new CreateLivenessWithVerifySessionMultipartContent(createLivenessWithVerifySessionParameters,
                verifyImageFileDetails);
        return this.createLivenessWithVerifySessionWithVerifyImage(realParameters);
    }
}
