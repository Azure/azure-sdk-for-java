// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The liveness classification for target face.
 */
@Immutable
public final class LivenessOutputsTarget implements JsonSerializable<LivenessOutputsTarget> {
    /*
     * The face region where the liveness classification was made on.
     */
    @Generated
    private final FaceRectangle faceRectangle;

    /*
     * The file name which contains the face rectangle where the liveness classification was made on.
     */
    @Generated
    private final String fileName;

    /*
     * The time offset within the file of the frame which contains the face rectangle where the liveness classification was made on.
     */
    @Generated
    private final int timeOffsetWithinFile;

    /*
     * The image type which contains the face rectangle where the liveness classification was made on.
     */
    @Generated
    private final FaceImageType imageType;

    /**
     * Creates an instance of LivenessOutputsTarget class.
     * 
     * @param faceRectangle the faceRectangle value to set.
     * @param fileName the fileName value to set.
     * @param timeOffsetWithinFile the timeOffsetWithinFile value to set.
     * @param imageType the imageType value to set.
     */
    @Generated
    private LivenessOutputsTarget(FaceRectangle faceRectangle, String fileName, int timeOffsetWithinFile,
        FaceImageType imageType) {
        this.faceRectangle = faceRectangle;
        this.fileName = fileName;
        this.timeOffsetWithinFile = timeOffsetWithinFile;
        this.imageType = imageType;
    }

    /**
     * Get the faceRectangle property: The face region where the liveness classification was made on.
     * 
     * @return the faceRectangle value.
     */
    @Generated
    public FaceRectangle getFaceRectangle() {
        return this.faceRectangle;
    }

    /**
     * Get the fileName property: The file name which contains the face rectangle where the liveness classification was
     * made on.
     * 
     * @return the fileName value.
     */
    @Generated
    public String getFileName() {
        return this.fileName;
    }

    /**
     * Get the timeOffsetWithinFile property: The time offset within the file of the frame which contains the face
     * rectangle where the liveness classification was made on.
     * 
     * @return the timeOffsetWithinFile value.
     */
    @Generated
    public int getTimeOffsetWithinFile() {
        return this.timeOffsetWithinFile;
    }

    /**
     * Get the imageType property: The image type which contains the face rectangle where the liveness classification
     * was made on.
     * 
     * @return the imageType value.
     */
    @Generated
    public FaceImageType getImageType() {
        return this.imageType;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("faceRectangle", this.faceRectangle);
        jsonWriter.writeStringField("fileName", this.fileName);
        jsonWriter.writeIntField("timeOffsetWithinFile", this.timeOffsetWithinFile);
        jsonWriter.writeStringField("imageType", this.imageType == null ? null : this.imageType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessOutputsTarget from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessOutputsTarget if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessOutputsTarget.
     */
    @Generated
    public static LivenessOutputsTarget fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaceRectangle faceRectangle = null;
            String fileName = null;
            int timeOffsetWithinFile = 0;
            FaceImageType imageType = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("faceRectangle".equals(fieldName)) {
                    faceRectangle = FaceRectangle.fromJson(reader);
                } else if ("fileName".equals(fieldName)) {
                    fileName = reader.getString();
                } else if ("timeOffsetWithinFile".equals(fieldName)) {
                    timeOffsetWithinFile = reader.getInt();
                } else if ("imageType".equals(fieldName)) {
                    imageType = FaceImageType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new LivenessOutputsTarget(faceRectangle, fileName, timeOffsetWithinFile, imageType);
        });
    }
}
