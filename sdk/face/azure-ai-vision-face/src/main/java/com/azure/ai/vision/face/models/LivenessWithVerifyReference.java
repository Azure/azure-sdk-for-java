// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The detail of face for verification.
 */
@Immutable
public final class LivenessWithVerifyReference implements JsonSerializable<LivenessWithVerifyReference> {
    /*
     * The image type which contains the face rectangle where the liveness classification was made on.
     */
    @Generated
    private final FaceImageType referenceType;

    /*
     * The face region where the comparison image's classification was made.
     */
    @Generated
    private final FaceRectangle faceRectangle;

    /*
     * Quality of face image for recognition.
     */
    @Generated
    private final QualityForRecognition qualityForRecognition;

    /**
     * Creates an instance of LivenessWithVerifyReference class.
     * 
     * @param referenceType the referenceType value to set.
     * @param faceRectangle the faceRectangle value to set.
     * @param qualityForRecognition the qualityForRecognition value to set.
     */
    @Generated
    private LivenessWithVerifyReference(FaceImageType referenceType, FaceRectangle faceRectangle,
        QualityForRecognition qualityForRecognition) {
        this.referenceType = referenceType;
        this.faceRectangle = faceRectangle;
        this.qualityForRecognition = qualityForRecognition;
    }

    /**
     * Get the referenceType property: The image type which contains the face rectangle where the liveness
     * classification was made on.
     * 
     * @return the referenceType value.
     */
    @Generated
    public FaceImageType getReferenceType() {
        return this.referenceType;
    }

    /**
     * Get the faceRectangle property: The face region where the comparison image's classification was made.
     * 
     * @return the faceRectangle value.
     */
    @Generated
    public FaceRectangle getFaceRectangle() {
        return this.faceRectangle;
    }

    /**
     * Get the qualityForRecognition property: Quality of face image for recognition.
     * 
     * @return the qualityForRecognition value.
     */
    @Generated
    public QualityForRecognition getQualityForRecognition() {
        return this.qualityForRecognition;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("referenceType", this.referenceType == null ? null : this.referenceType.toString());
        jsonWriter.writeJsonField("faceRectangle", this.faceRectangle);
        jsonWriter.writeStringField("qualityForRecognition",
            this.qualityForRecognition == null ? null : this.qualityForRecognition.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessWithVerifyReference from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessWithVerifyReference if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessWithVerifyReference.
     */
    @Generated
    public static LivenessWithVerifyReference fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaceImageType referenceType = null;
            FaceRectangle faceRectangle = null;
            QualityForRecognition qualityForRecognition = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("referenceType".equals(fieldName)) {
                    referenceType = FaceImageType.fromString(reader.getString());
                } else if ("faceRectangle".equals(fieldName)) {
                    faceRectangle = FaceRectangle.fromJson(reader);
                } else if ("qualityForRecognition".equals(fieldName)) {
                    qualityForRecognition = QualityForRecognition.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return new LivenessWithVerifyReference(referenceType, faceRectangle, qualityForRecognition);
        });
    }
}
