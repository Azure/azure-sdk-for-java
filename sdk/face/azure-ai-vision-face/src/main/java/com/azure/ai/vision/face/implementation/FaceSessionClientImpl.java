// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.implementation;

import com.azure.ai.vision.face.FaceServiceVersion;
import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.core.util.serializer.SerializerAdapter;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the FaceSessionClient type.
 */
public final class FaceSessionClientImpl {
    /**
     * The proxy service used to perform REST calls.
     */
    private final FaceSessionClientService service;

    /**
     * Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://{resource-name}.cognitiveservices.azure.com).
     */
    private final String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://{resource-name}.cognitiveservices.azure.com).
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Service version.
     */
    private final FaceServiceVersion serviceVersion;

    /**
     * Gets Service version.
     * 
     * @return the serviceVersion value.
     */
    public FaceServiceVersion getServiceVersion() {
        return this.serviceVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    public SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * Initializes an instance of FaceSessionClient client.
     * 
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://{resource-name}.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public FaceSessionClientImpl(String endpoint, FaceServiceVersion serviceVersion) {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy()).build(),
            JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of FaceSessionClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://{resource-name}.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public FaceSessionClientImpl(HttpPipeline httpPipeline, String endpoint, FaceServiceVersion serviceVersion) {
        this(httpPipeline, JacksonAdapter.createDefaultSerializerAdapter(), endpoint, serviceVersion);
    }

    /**
     * Initializes an instance of FaceSessionClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://{resource-name}.cognitiveservices.azure.com).
     * @param serviceVersion Service version.
     */
    public FaceSessionClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, String endpoint,
        FaceServiceVersion serviceVersion) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.endpoint = endpoint;
        this.serviceVersion = serviceVersion;
        this.service = RestProxy.create(FaceSessionClientService.class, this.httpPipeline, this.getSerializerAdapter());
    }

    /**
     * The interface defining all the services for FaceSessionClient to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{endpoint}/face/{apiVersion}")
    @ServiceInterface(name = "FaceSessionClient")
    public interface FaceSessionClientService {
        @Post("/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createLivenessSession(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createLivenessSessionSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteLivenessSession(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteLivenessSessionSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLivenessSessionResult(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLiveness/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLivenessSessionResultSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLivenessSessions(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/detectLiveness/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLivenessSessionsSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/detectLiveness/singleModal/sessions/{sessionId}/audit")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLivenessSessionAuditEntries(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLiveness/singleModal/sessions/{sessionId}/audit")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLivenessSessionAuditEntriesSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/detectLivenessWithVerify/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createLivenessWithVerifySession(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Post("/detectLivenessWithVerify/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createLivenessWithVerifySessionSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Content-Type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("application/json") BinaryData body,
            RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/detectLivenessWithVerify/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> createLivenessWithVerifySessionWithVerifyImage(
            @HostParam("endpoint") String endpoint, @HostParam("apiVersion") String apiVersion,
            @HeaderParam("content-type") String contentType, @HeaderParam("Accept") String accept,
            @BodyParam("multipart/form-data") BinaryData body, RequestOptions requestOptions, Context context);

        // @Multipart not supported by RestProxy
        @Post("/detectLivenessWithVerify/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> createLivenessWithVerifySessionWithVerifyImageSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept, @BodyParam("multipart/form-data") BinaryData body,
            RequestOptions requestOptions, Context context);

        @Delete("/detectLivenessWithVerify/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<Void>> deleteLivenessWithVerifySession(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Delete("/detectLivenessWithVerify/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<Void> deleteLivenessWithVerifySessionSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLivenessWithVerify/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLivenessWithVerifySessionResult(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLivenessWithVerify/singleModal/sessions/{sessionId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLivenessWithVerifySessionResultSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLivenessWithVerify/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLivenessWithVerifySessions(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/detectLivenessWithVerify/singleModal/sessions")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLivenessWithVerifySessionsSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("Accept") String accept,
            RequestOptions requestOptions, Context context);

        @Get("/detectLivenessWithVerify/singleModal/sessions/{sessionId}/audit")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getLivenessWithVerifySessionAuditEntries(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/detectLivenessWithVerify/singleModal/sessions/{sessionId}/audit")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getLivenessWithVerifySessionAuditEntriesSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionId") String sessionId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Post("/detect")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> detectFromSessionImage(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData detectFromSessionImageRequest, RequestOptions requestOptions,
            Context context);

        @Post("/detect")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> detectFromSessionImageSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @HeaderParam("content-type") String contentType,
            @HeaderParam("Accept") String accept,
            @BodyParam("application/json") BinaryData detectFromSessionImageRequest, RequestOptions requestOptions,
            Context context);

        @Get("/session/sessionImages/{sessionImageId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<Response<BinaryData>> getSessionImage(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionImageId") String sessionImageId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);

        @Get("/session/sessionImages/{sessionImageId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(value = ClientAuthenticationException.class, code = { 401 })
        @UnexpectedResponseExceptionType(value = ResourceNotFoundException.class, code = { 404 })
        @UnexpectedResponseExceptionType(value = ResourceModifiedException.class, code = { 409 })
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Response<BinaryData> getSessionImageSync(@HostParam("endpoint") String endpoint,
            @HostParam("apiVersion") String apiVersion, @PathParam("sessionImageId") String sessionImageId,
            @HeaderParam("Accept") String accept, RequestOptions requestOptions, Context context);
    }

    /**
     * Create a new detect liveness session.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-session for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessSingleModalModel: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createLivenessSessionWithResponseAsync(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createLivenessSession(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Create a new detect liveness session.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-session for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessSingleModalModel: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session creation along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createLivenessSessionWithResponse(BinaryData body, RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createLivenessSessionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), contentType,
            accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLivenessSessionWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteLivenessSession(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLivenessSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteLivenessSessionSync(this.getEndpoint(), this.getServiceVersion().getVersion(), sessionId,
            accept, requestOptions, Context.NONE);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-session-result
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessSessionResultWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLivenessSessionResult(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-session-result
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessSessionResultWithResponse(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLivenessSessionResultSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists sessions for /detectLiveness/SingleModal.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-sessions for
     * more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Optional)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessSessionsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLivenessSessions(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Lists sessions for /detectLiveness/SingleModal.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-sessions for
     * more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Optional)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessSessionsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLivenessSessionsSync(this.getEndpoint(), this.getServiceVersion().getVersion(), accept,
            requestOptions, Context.NONE);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-session-audit-entries for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessSessionAuditEntriesWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLivenessSessionAuditEntries(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-session-audit-entries for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessSessionAuditEntriesWithResponse(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLivenessSessionAuditEntriesSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Create a new liveness session with verify. Client device submits VerifyImage during the
     * /detectLivenessWithVerify/singleModal call.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-with-verify-session for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessSingleModalModel: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     returnVerifyImageHash: Boolean (Optional)
     *     verifyConfidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     verifyImage (Optional): {
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         qualityForRecognition: String(low/medium/high) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session with verify creation with verify image provided along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createLivenessWithVerifySessionWithResponseAsync(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.createLivenessWithVerifySession(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Create a new liveness session with verify. Client device submits VerifyImage during the
     * /detectLivenessWithVerify/singleModal call.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-with-verify-session for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     sendResultsToClient: Boolean (Optional)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessSingleModalModel: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     returnVerifyImageHash: Boolean (Optional)
     *     verifyConfidenceThreshold: Double (Optional)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     verifyImage (Optional): {
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         qualityForRecognition: String(low/medium/high) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session with verify creation with verify image provided along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createLivenessWithVerifySessionWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.createLivenessWithVerifySessionSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-with-verify-session-with-verify-image
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     verifyImage (Optional): {
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         qualityForRecognition: String(low/medium/high) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param body Request content of liveness with verify session creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session with verify creation with verify image provided along with {@link Response}
     * on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createLivenessWithVerifySessionWithVerifyImageWithResponseAsync(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.createLivenessWithVerifySessionWithVerifyImage(this.getEndpoint(),
                this.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, context));
    }

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-with-verify-session-with-verify-image
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     verifyImage (Optional): {
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         qualityForRecognition: String(low/medium/high) (Required)
     *     }
     * }
     * }</pre>
     * 
     * @param body Request content of liveness with verify session creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return response of liveness session with verify creation with verify image provided along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> createLivenessWithVerifySessionWithVerifyImageWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        final String contentType = "multipart/form-data";
        final String accept = "application/json";
        return service.createLivenessWithVerifySessionWithVerifyImageSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), contentType, accept, body, requestOptions, Context.NONE);
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-with-verify-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLivenessWithVerifySessionWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.deleteLivenessWithVerifySession(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-with-verify-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteLivenessWithVerifySessionWithResponse(String sessionId, RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.deleteLivenessWithVerifySessionSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-session-result for
     * more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness with verify along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessWithVerifySessionResultWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLivenessWithVerifySessionResult(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-session-result for
     * more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     id: String (Required)
     *     createdDateTime: OffsetDateTime (Required)
     *     sessionStartDateTime: OffsetDateTime (Optional)
     *     sessionExpired: boolean (Required)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     *     status: String(NotStarted/Started/ResultAvailable) (Required)
     *     result (Optional): {
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * }
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness with verify along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessWithVerifySessionResultWithResponse(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLivenessWithVerifySessionResultSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Lists sessions for /detectLivenessWithVerify/SingleModal.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-sessions for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Optional)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessWithVerifySessionsWithResponseAsync(RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLivenessWithVerifySessions(this.getEndpoint(),
            this.getServiceVersion().getVersion(), accept, requestOptions, context));
    }

    /**
     * Lists sessions for /detectLivenessWithVerify/SingleModal.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-sessions for more
     * details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: String (Required)
     *         createdDateTime: OffsetDateTime (Required)
     *         sessionStartDateTime: OffsetDateTime (Optional)
     *         sessionExpired: boolean (Required)
     *         deviceCorrelationId: String (Optional)
     *         authTokenTimeToLiveInSeconds: Integer (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessWithVerifySessionsWithResponse(RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLivenessWithVerifySessionsSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            accept, requestOptions, Context.NONE);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-session-audit-entries
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessWithVerifySessionAuditEntriesWithResponseAsync(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return FluxUtil.withContext(context -> service.getLivenessWithVerifySessionAuditEntries(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, context));
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-session-audit-entries
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>start</td><td>String</td><td>No</td><td>List resources greater than the "start". It contains no more than
     * 64 characters. Default is empty.</td></tr>
     * <tr><td>top</td><td>Integer</td><td>No</td><td>The number of items to list, ranging in [1, 1000]. Default is
     * 1000.</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         id: long (Required)
     *         sessionId: String (Required)
     *         requestId: String (Required)
     *         clientRequestId: String (Required)
     *         receivedDateTime: OffsetDateTime (Required)
     *         request (Required): {
     *             url: String (Required)
     *             method: String (Required)
     *             contentLength: Long (Optional)
     *             contentType: String (Required)
     *             userAgent: String (Optional)
     *         }
     *         response (Required): {
     *             body (Required): {
     *                 livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                 target (Optional): {
     *                     faceRectangle (Required): {
     *                         top: int (Required)
     *                         left: int (Required)
     *                         width: int (Required)
     *                         height: int (Required)
     *                     }
     *                     fileName: String (Required)
     *                     timeOffsetWithinFile: int (Required)
     *                     imageType: String(Color/Infrared/Depth) (Required)
     *                 }
     *                 modelVersionUsed: String(2022-10-15-preview.04/2023-12-20-preview.06) (Optional)
     *                 verifyResult (Optional): {
     *                     verifyImage (Required): {
     *                         faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         qualityForRecognition: String(low/medium/high) (Required)
     *                     }
     *                     matchConfidence: double (Required)
     *                     isIdentical: boolean (Required)
     *                 }
     *                  (Optional): {
     *                     String: Object (Required)
     *                 }
     *             }
     *             statusCode: int (Required)
     *             latencyInMilliseconds: long (Required)
     *         }
     *         digest: String (Required)
     *         sessionImageId: String (Optional)
     *         verifyImageHash: String (Optional)
     *     }
     * ]
     * }</pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getLivenessWithVerifySessionAuditEntriesWithResponse(String sessionId,
        RequestOptions requestOptions) {
        final String accept = "application/json";
        return service.getLivenessWithVerifySessionAuditEntriesSync(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionId, accept, requestOptions, Context.NONE);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect-from-session-image-id
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. 'detection_03' is recommended since its accuracy is improved on smaller faces (64x64
     * pixels) and rotated face orientations. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>recognitionModel</td><td>String</td><td>No</td><td>The 'recognitionModel' associated with the detected
     * faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or
     * 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is
     * improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared
     * with 'recognition_01' and 'recognition_02'. Allowed values: "recognition_01", "recognition_02", "recognition_03",
     * "recognition_04".</td></tr>
     * <tr><td>returnFaceId</td><td>Boolean</td><td>No</td><td>Return faceIds of the detected faces or not. The default
     * value is true.</td></tr>
     * <tr><td>returnFaceAttributes</td><td>List&lt;String&gt;</td><td>No</td><td>Analyze and return the one or more
     * specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face
     * attribute analysis has additional computational and time cost. In the form of "," separated string.</td></tr>
     * <tr><td>returnFaceLandmarks</td><td>Boolean</td><td>No</td><td>Return face landmarks of the detected faces or
     * not. The default value is false.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false. This is only applicable when returnFaceId = true.</td></tr>
     * <tr><td>faceIdTimeToLive</td><td>Integer</td><td>No</td><td>The number of seconds for the face ID being cached.
     * Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionImageId: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Double (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param detectFromSessionImageRequest The detectFromSessionImageRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectFromSessionImageWithResponseAsync(BinaryData detectFromSessionImageRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return FluxUtil.withContext(
            context -> service.detectFromSessionImage(this.getEndpoint(), this.getServiceVersion().getVersion(),
                contentType, accept, detectFromSessionImageRequest, requestOptions, context));
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect-from-session-image-id
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. 'detection_03' is recommended since its accuracy is improved on smaller faces (64x64
     * pixels) and rotated face orientations. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>recognitionModel</td><td>String</td><td>No</td><td>The 'recognitionModel' associated with the detected
     * faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or
     * 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is
     * improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared
     * with 'recognition_01' and 'recognition_02'. Allowed values: "recognition_01", "recognition_02", "recognition_03",
     * "recognition_04".</td></tr>
     * <tr><td>returnFaceId</td><td>Boolean</td><td>No</td><td>Return faceIds of the detected faces or not. The default
     * value is true.</td></tr>
     * <tr><td>returnFaceAttributes</td><td>List&lt;String&gt;</td><td>No</td><td>Analyze and return the one or more
     * specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face
     * attribute analysis has additional computational and time cost. In the form of "," separated string.</td></tr>
     * <tr><td>returnFaceLandmarks</td><td>Boolean</td><td>No</td><td>Return face landmarks of the detected faces or
     * not. The default value is false.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false. This is only applicable when returnFaceId = true.</td></tr>
     * <tr><td>faceIdTimeToLive</td><td>Integer</td><td>No</td><td>The number of seconds for the face ID being cached.
     * Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>{@code
     * {
     *     sessionImageId: String (Required)
     * }
     * }</pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * [
     *      (Required){
     *         faceId: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Double (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }</pre>
     * 
     * @param detectFromSessionImageRequest The detectFromSessionImageRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> detectFromSessionImageWithResponse(BinaryData detectFromSessionImageRequest,
        RequestOptions requestOptions) {
        final String contentType = "application/json";
        final String accept = "application/json";
        return service.detectFromSessionImageSync(this.getEndpoint(), this.getServiceVersion().getVersion(),
            contentType, accept, detectFromSessionImageRequest, requestOptions, Context.NONE);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-session-image for more
     * details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param sessionImageId The request ID of the image to be retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSessionImageWithResponseAsync(String sessionImageId,
        RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return FluxUtil.withContext(context -> service.getSessionImage(this.getEndpoint(),
            this.getServiceVersion().getVersion(), sessionImageId, accept, requestOptions, context));
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-session-image for more
     * details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>{@code
     * BinaryData
     * }</pre>
     * 
     * @param sessionImageId The request ID of the image to be retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BinaryData> getSessionImageWithResponse(String sessionImageId, RequestOptions requestOptions) {
        final String accept = "application/octet-stream";
        return service.getSessionImageSync(this.getEndpoint(), this.getServiceVersion().getVersion(), sessionImageId,
            accept, requestOptions, Context.NONE);
    }
}
