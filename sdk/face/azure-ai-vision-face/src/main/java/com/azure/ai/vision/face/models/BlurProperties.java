// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Properties describing any presence of blur within the image.
 */
@Immutable
public final class BlurProperties implements JsonSerializable<BlurProperties> {

    /*
     * An enum value indicating level of blurriness.
     */
    @Generated
    private final BlurLevel blurLevel;

    /*
     * A number indicating level of blurriness ranging from 0 to 1.
     */
    @Generated
    private final double value;

    /**
     * Creates an instance of BlurProperties class.
     *
     * @param blurLevel the blurLevel value to set.
     * @param value the value value to set.
     */
    @Generated
    private BlurProperties(BlurLevel blurLevel, double value) {
        this.blurLevel = blurLevel;
        this.value = value;
    }

    /**
     * Get the blurLevel property: An enum value indicating level of blurriness.
     *
     * @return the blurLevel value.
     */
    @Generated
    public BlurLevel getBlurLevel() {
        return this.blurLevel;
    }

    /**
     * Get the value property: A number indicating level of blurriness ranging from 0 to 1.
     *
     * @return the value value.
     */
    @Generated
    public double getValue() {
        return this.value;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("blurLevel", this.blurLevel == null ? null : this.blurLevel.toString());
        jsonWriter.writeDoubleField("value", this.value);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlurProperties from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlurProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlurProperties.
     */
    @Generated
    public static BlurProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlurLevel blurLevel = null;
            double value = 0.0;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("blurLevel".equals(fieldName)) {
                    blurLevel = BlurLevel.fromString(reader.getString());
                } else if ("value".equals(fieldName)) {
                    value = reader.getDouble();
                } else {
                    reader.skipChildren();
                }
            }
            return new BlurProperties(blurLevel, value);
        });
    }
}
