// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The targets used for liveness classification.
 */
@Immutable
public final class LivenessDecisionTargets implements JsonSerializable<LivenessDecisionTargets> {
    /*
     * The target from color image used for liveness classification.
     */
    @Generated
    private final LivenessColorDecisionTarget color;

    /**
     * Creates an instance of LivenessDecisionTargets class.
     * 
     * @param color the color value to set.
     */
    @Generated
    private LivenessDecisionTargets(LivenessColorDecisionTarget color) {
        this.color = color;
    }

    /**
     * Get the color property: The target from color image used for liveness classification.
     * 
     * @return the color value.
     */
    @Generated
    public LivenessColorDecisionTarget getColor() {
        return this.color;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("color", this.color);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessDecisionTargets from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessDecisionTargets if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessDecisionTargets.
     */
    @Generated
    public static LivenessDecisionTargets fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LivenessColorDecisionTarget color = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("color".equals(fieldName)) {
                    color = LivenessColorDecisionTarget.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }
            return new LivenessDecisionTargets(color);
        });
    }
}
