// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face;

import com.azure.ai.vision.face.implementation.FaceSessionClientImpl;
import com.azure.ai.vision.face.implementation.MultipartFormDataHelper;
import com.azure.ai.vision.face.implementation.models.DetectFromSessionImageRequest;
import com.azure.ai.vision.face.models.CreateLivenessSessionContent;
import com.azure.ai.vision.face.models.CreateLivenessWithVerifySessionContent;
import com.azure.ai.vision.face.models.DetectFromSessionImageOptions;
import com.azure.ai.vision.face.models.FaceAttributeType;
import com.azure.ai.vision.face.models.FaceDetectionModel;
import com.azure.ai.vision.face.models.FaceDetectionResult;
import com.azure.ai.vision.face.models.FaceRecognitionModel;
import com.azure.ai.vision.face.models.LivenessSession;
import com.azure.ai.vision.face.models.LivenessWithVerifySession;
import com.azure.core.annotation.Generated;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceClient;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.exception.ClientAuthenticationException;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.exception.ResourceModifiedException;
import com.azure.core.exception.ResourceNotFoundException;
import com.azure.core.http.rest.RequestOptions;
import com.azure.core.http.rest.Response;
import com.azure.core.util.BinaryData;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.serializer.TypeReference;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the asynchronous FaceSessionClient type.
 */
@ServiceClient(builder = FaceSessionClientBuilder.class, isAsync = true)
public final class FaceSessionAsyncClient {
    @Generated
    private final FaceSessionClientImpl serviceClient;

    /**
     * Initializes an instance of FaceSessionAsyncClient class.
     * 
     * @param serviceClient the service client implementation.
     */
    @Generated
    FaceSessionAsyncClient(FaceSessionClientImpl serviceClient) {
        this.serviceClient = serviceClient;
    }

    /**
     * Create a new detect liveness session.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-session for
     * more details.
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     livenessOperationMode: String(Passive/PassiveActive) (Required)
     *     deviceCorrelationIdSetInClient: Boolean (Optional)
     *     enableSessionImage: Boolean (Optional)
     *     livenessModelVersion: String(2024-11-15) (Optional)
     *     deviceCorrelationId: String (Optional)
     *     authTokenTimeToLiveInSeconds: Integer (Optional)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     modelVersion: String(2024-11-15) (Optional)
     *     results (Required): {
     *         attempts (Required): [
     *              (Required){
     *                 attemptId: int (Required)
     *                 attemptStatus: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *                 result (Optional): {
     *                     livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                     targets (Required): {
     *                         color (Required): {
     *                             faceRectangle (Required): {
     *                                 top: int (Required)
     *                                 left: int (Required)
     *                                 width: int (Required)
     *                                 height: int (Required)
     *                             }
     *                         }
     *                     }
     *                     digest: String (Required)
     *                     sessionImageId: String (Optional)
     *                 }
     *                 error (Optional): {
     *                     code: String (Required)
     *                     message: String (Required)
     *                     targets (Required): (recursive schema, see targets above)
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body Body parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> createLivenessSessionWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        return this.serviceClient.createLivenessSessionWithResponseAsync(body, requestOptions);
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLivenessSessionWithResponse(String sessionId, RequestOptions requestOptions) {
        return this.serviceClient.deleteLivenessSessionWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-session-result
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     modelVersion: String(2024-11-15) (Optional)
     *     results (Required): {
     *         attempts (Required): [
     *              (Required){
     *                 attemptId: int (Required)
     *                 attemptStatus: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *                 result (Optional): {
     *                     livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                     targets (Required): {
     *                         color (Required): {
     *                             faceRectangle (Required): {
     *                                 top: int (Required)
     *                                 left: int (Required)
     *                                 width: int (Required)
     *                                 height: int (Required)
     *                             }
     *                         }
     *                     }
     *                     digest: String (Required)
     *                     sessionImageId: String (Optional)
     *                 }
     *                 error (Optional): {
     *                     code: String (Required)
     *                     message: String (Required)
     *                     targets (Required): (recursive schema, see targets above)
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessSessionResultWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLivenessSessionResultWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-with-verify-session-with-verify-image
     * for more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     modelVersion: String(2024-11-15) (Optional)
     *     results (Required): {
     *         verifyReferences (Required): [
     *              (Required){
     *                 referenceType: String(Color/Infrared/Depth) (Required)
     *                 faceRectangle (Required): {
     *                     top: int (Required)
     *                     left: int (Required)
     *                     width: int (Required)
     *                     height: int (Required)
     *                 }
     *                 qualityForRecognition: String(low/medium/high) (Required)
     *             }
     *         ]
     *         attempts (Required): [
     *              (Required){
     *                 attemptId: int (Required)
     *                 attemptStatus: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *                 result (Optional): {
     *                     livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                     targets (Required): {
     *                         color (Required): {
     *                             faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         }
     *                     }
     *                     digest: String (Required)
     *                     sessionImageId: String (Optional)
     *                     verifyResult (Optional): {
     *                         matchConfidence: double (Required)
     *                         isIdentical: boolean (Required)
     *                     }
     *                     verifyImageHash: String (Optional)
     *                 }
     *                 error (Optional): {
     *                     code: String (Required)
     *                     message: String (Required)
     *                     targets (Required): (recursive schema, see targets above)
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param body Request content of liveness with verify session creation.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness with verify along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    Mono<Response<BinaryData>> createLivenessWithVerifySessionWithResponse(BinaryData body,
        RequestOptions requestOptions) {
        // Operation 'createLivenessWithVerifySession' is of content-type 'multipart/form-data'. Protocol API is not
        // usable and hence not generated.
        return this.serviceClient.createLivenessWithVerifySessionWithResponseAsync(body, requestOptions);
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-with-verify-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<Void>> deleteLivenessWithVerifySessionWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.deleteLivenessWithVerifySessionWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-session-result for
     * more details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sessionId: String (Required)
     *     authToken: String (Required)
     *     status: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *     modelVersion: String(2024-11-15) (Optional)
     *     results (Required): {
     *         verifyReferences (Required): [
     *              (Required){
     *                 referenceType: String(Color/Infrared/Depth) (Required)
     *                 faceRectangle (Required): {
     *                     top: int (Required)
     *                     left: int (Required)
     *                     width: int (Required)
     *                     height: int (Required)
     *                 }
     *                 qualityForRecognition: String(low/medium/high) (Required)
     *             }
     *         ]
     *         attempts (Required): [
     *              (Required){
     *                 attemptId: int (Required)
     *                 attemptStatus: String(NotStarted/Running/Succeeded/Failed/Canceled) (Required)
     *                 result (Optional): {
     *                     livenessDecision: String(uncertain/realface/spoofface) (Optional)
     *                     targets (Required): {
     *                         color (Required): {
     *                             faceRectangle (Required): (recursive schema, see faceRectangle above)
     *                         }
     *                     }
     *                     digest: String (Required)
     *                     sessionImageId: String (Optional)
     *                     verifyResult (Optional): {
     *                         matchConfidence: double (Required)
     *                         isIdentical: boolean (Required)
     *                     }
     *                     verifyImageHash: String (Optional)
     *                 }
     *                 error (Optional): {
     *                     code: String (Required)
     *                     message: String (Required)
     *                     targets (Required): (recursive schema, see targets above)
     *                 }
     *             }
     *         ]
     *     }
     * }
     * }
     * </pre>
     * 
     * @param sessionId The unique ID to reference this session.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return session result of detect liveness with verify along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getLivenessWithVerifySessionResultWithResponse(String sessionId,
        RequestOptions requestOptions) {
        return this.serviceClient.getLivenessWithVerifySessionResultWithResponseAsync(sessionId, requestOptions);
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect-from-session-image-id
     * for more details.
     * <p><strong>Query Parameters</strong></p>
     * <table border="1">
     * <caption>Query Parameters</caption>
     * <tr><th>Name</th><th>Type</th><th>Required</th><th>Description</th></tr>
     * <tr><td>detectionModel</td><td>String</td><td>No</td><td>The 'detectionModel' associated with the detected
     * faceIds. Supported 'detectionModel' values include 'detection_01', 'detection_02' and 'detection_03'. The default
     * value is 'detection_01'. 'detection_03' is recommended since its accuracy is improved on smaller faces (64x64
     * pixels) and rotated face orientations. Allowed values: "detection_01", "detection_02", "detection_03".</td></tr>
     * <tr><td>recognitionModel</td><td>String</td><td>No</td><td>The 'recognitionModel' associated with the detected
     * faceIds. Supported 'recognitionModel' values include 'recognition_01', 'recognition_02', 'recognition_03' or
     * 'recognition_04'. The default value is 'recognition_01'. 'recognition_04' is recommended since its accuracy is
     * improved on faces wearing masks compared with 'recognition_03', and its overall accuracy is improved compared
     * with 'recognition_01' and 'recognition_02'. Allowed values: "recognition_01", "recognition_02", "recognition_03",
     * "recognition_04".</td></tr>
     * <tr><td>returnFaceId</td><td>Boolean</td><td>No</td><td>Return faceIds of the detected faces or not. The default
     * value is true.</td></tr>
     * <tr><td>returnFaceAttributes</td><td>List&lt;String&gt;</td><td>No</td><td>Analyze and return the one or more
     * specified face attributes in the comma-separated string like 'returnFaceAttributes=headPose,glasses'. Face
     * attribute analysis has additional computational and time cost. In the form of "," separated string.</td></tr>
     * <tr><td>returnFaceLandmarks</td><td>Boolean</td><td>No</td><td>Return face landmarks of the detected faces or
     * not. The default value is false.</td></tr>
     * <tr><td>returnRecognitionModel</td><td>Boolean</td><td>No</td><td>Return 'recognitionModel' or not. The default
     * value is false. This is only applicable when returnFaceId = true.</td></tr>
     * <tr><td>faceIdTimeToLive</td><td>Integer</td><td>No</td><td>The number of seconds for the face ID being cached.
     * Supported range from 60 seconds up to 86400 seconds. The default value is 86400 (24 hours).</td></tr>
     * </table>
     * You can add these to a request with {@link RequestOptions#addQueryParam}
     * <p><strong>Request Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * {
     *     sessionImageId: String (Required)
     * }
     * }
     * </pre>
     * 
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * [
     *      (Required){
     *         faceId: String (Optional)
     *         recognitionModel: String(recognition_01/recognition_02/recognition_03/recognition_04) (Optional)
     *         faceRectangle (Required): {
     *             top: int (Required)
     *             left: int (Required)
     *             width: int (Required)
     *             height: int (Required)
     *         }
     *         faceLandmarks (Optional): {
     *             pupilLeft (Required): {
     *                 x: double (Required)
     *                 y: double (Required)
     *             }
     *             pupilRight (Required): (recursive schema, see pupilRight above)
     *             noseTip (Required): (recursive schema, see noseTip above)
     *             mouthLeft (Required): (recursive schema, see mouthLeft above)
     *             mouthRight (Required): (recursive schema, see mouthRight above)
     *             eyebrowLeftOuter (Required): (recursive schema, see eyebrowLeftOuter above)
     *             eyebrowLeftInner (Required): (recursive schema, see eyebrowLeftInner above)
     *             eyeLeftOuter (Required): (recursive schema, see eyeLeftOuter above)
     *             eyeLeftTop (Required): (recursive schema, see eyeLeftTop above)
     *             eyeLeftBottom (Required): (recursive schema, see eyeLeftBottom above)
     *             eyeLeftInner (Required): (recursive schema, see eyeLeftInner above)
     *             eyebrowRightInner (Required): (recursive schema, see eyebrowRightInner above)
     *             eyebrowRightOuter (Required): (recursive schema, see eyebrowRightOuter above)
     *             eyeRightInner (Required): (recursive schema, see eyeRightInner above)
     *             eyeRightTop (Required): (recursive schema, see eyeRightTop above)
     *             eyeRightBottom (Required): (recursive schema, see eyeRightBottom above)
     *             eyeRightOuter (Required): (recursive schema, see eyeRightOuter above)
     *             noseRootLeft (Required): (recursive schema, see noseRootLeft above)
     *             noseRootRight (Required): (recursive schema, see noseRootRight above)
     *             noseLeftAlarTop (Required): (recursive schema, see noseLeftAlarTop above)
     *             noseRightAlarTop (Required): (recursive schema, see noseRightAlarTop above)
     *             noseLeftAlarOutTip (Required): (recursive schema, see noseLeftAlarOutTip above)
     *             noseRightAlarOutTip (Required): (recursive schema, see noseRightAlarOutTip above)
     *             upperLipTop (Required): (recursive schema, see upperLipTop above)
     *             upperLipBottom (Required): (recursive schema, see upperLipBottom above)
     *             underLipTop (Required): (recursive schema, see underLipTop above)
     *             underLipBottom (Required): (recursive schema, see underLipBottom above)
     *         }
     *         faceAttributes (Optional): {
     *             age: Double (Optional)
     *             smile: Double (Optional)
     *             facialHair (Optional): {
     *                 moustache: double (Required)
     *                 beard: double (Required)
     *                 sideburns: double (Required)
     *             }
     *             glasses: String(noGlasses/readingGlasses/sunglasses/swimmingGoggles) (Optional)
     *             headPose (Optional): {
     *                 pitch: double (Required)
     *                 roll: double (Required)
     *                 yaw: double (Required)
     *             }
     *             hair (Optional): {
     *                 bald: double (Required)
     *                 invisible: boolean (Required)
     *                 hairColor (Required): [
     *                      (Required){
     *                         color: String(unknown/white/gray/blond/brown/red/black/other) (Required)
     *                         confidence: double (Required)
     *                     }
     *                 ]
     *             }
     *             occlusion (Optional): {
     *                 foreheadOccluded: boolean (Required)
     *                 eyeOccluded: boolean (Required)
     *                 mouthOccluded: boolean (Required)
     *             }
     *             accessories (Optional): [
     *                  (Optional){
     *                     type: String(headwear/glasses/mask) (Required)
     *                     confidence: double (Required)
     *                 }
     *             ]
     *             blur (Optional): {
     *                 blurLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             exposure (Optional): {
     *                 exposureLevel: String(underExposure/goodExposure/overExposure) (Required)
     *                 value: double (Required)
     *             }
     *             noise (Optional): {
     *                 noiseLevel: String(low/medium/high) (Required)
     *                 value: double (Required)
     *             }
     *             mask (Optional): {
     *                 noseAndMouthCovered: boolean (Required)
     *                 type: String(faceMask/noMask/otherMaskOrOcclusion/uncertain) (Required)
     *             }
     *             qualityForRecognition: String(low/medium/high) (Optional)
     *         }
     *     }
     * ]
     * }
     * </pre>
     * 
     * @param detectFromSessionImageRequest The detectFromSessionImageRequest parameter.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> detectFromSessionImageWithResponse(BinaryData detectFromSessionImageRequest,
        RequestOptions requestOptions) {
        return this.serviceClient.detectFromSessionImageWithResponseAsync(detectFromSessionImageRequest,
            requestOptions);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-session-image for more
     * details.
     * <p><strong>Response Body Schema</strong></p>
     * 
     * <pre>
     * {@code
     * BinaryData
     * }
     * </pre>
     * 
     * @param sessionImageId The request ID of the image to be retrieved.
     * @param requestOptions The options to configure the HTTP request before HTTP client sends it.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @return the response body along with {@link Response} on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Response<BinaryData>> getSessionImageWithResponse(String sessionImageId,
        RequestOptions requestOptions) {
        return this.serviceClient.getSessionImageWithResponseAsync(sessionImageId, requestOptions);
    }

    /**
     * Create a new detect liveness session.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-session for
     * more details.
     * 
     * @param body Body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detect liveness on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessSession> createLivenessSession(CreateLivenessSessionContent body) {
        // Generated convenience method for createLivenessSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createLivenessSessionWithResponse(BinaryData.fromObject(body), requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LivenessSession.class));
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteLivenessSession(String sessionId) {
        // Generated convenience method for deleteLivenessSessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteLivenessSessionWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-session-result
     * for more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detect liveness on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessSession> getLivenessSessionResult(String sessionId) {
        // Generated convenience method for getLivenessSessionResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessSessionResultWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LivenessSession.class));
    }

    /**
     * Create a new liveness session with verify. Provide the verify image during session creation.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/create-liveness-with-verify-session-with-verify-image
     * for more details.
     * 
     * @param body Request content of liveness with verify session creation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detect liveness with verify on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessWithVerifySession>
        createLivenessWithVerifySession(CreateLivenessWithVerifySessionContent body) {
        // Generated convenience method for createLivenessWithVerifySessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return createLivenessWithVerifySessionWithResponse(new MultipartFormDataHelper(requestOptions)
            .serializeTextField("livenessOperationMode", Objects.toString(body.getLivenessOperationMode()))
            .serializeTextField("deviceCorrelationIdSetInClient",
                Objects.toString(body.isDeviceCorrelationIdSetInClient()))
            .serializeTextField("enableSessionImage", Objects.toString(body.isEnableSessionImage()))
            .serializeTextField("livenessModelVersion", Objects.toString(body.getLivenessModelVersion()))
            .serializeTextField("returnVerifyImageHash", Objects.toString(body.isReturnVerifyImageHash()))
            .serializeTextField("verifyConfidenceThreshold", Objects.toString(body.getVerifyConfidenceThreshold()))
            .serializeFileField("verifyImage", body.getVerifyImage().getContent(),
                body.getVerifyImage().getContentType(), body.getVerifyImage().getFilename())
            .serializeTextField("deviceCorrelationId", body.getDeviceCorrelationId())
            .serializeTextField("authTokenTimeToLiveInSeconds",
                Objects.toString(body.getAuthTokenTimeToLiveInSeconds()))
            .end()
            .getRequestBody(), requestOptions).flatMap(FluxUtil::toMono)
                .map(protocolMethodData -> protocolMethodData.toObject(LivenessWithVerifySession.class));
    }

    /**
     * Delete all session related information for matching the specified session id.
     * 
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/delete-liveness-with-verify-session for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> deleteLivenessWithVerifySession(String sessionId) {
        // Generated convenience method for deleteLivenessWithVerifySessionWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return deleteLivenessWithVerifySessionWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono);
    }

    /**
     * Please refer to
     * https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-liveness-with-verify-session-result for
     * more details.
     * 
     * @param sessionId The unique ID to reference this session.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return session result of detect liveness with verify on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<LivenessWithVerifySession> getLivenessWithVerifySessionResult(String sessionId) {
        // Generated convenience method for getLivenessWithVerifySessionResultWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getLivenessWithVerifySessionResultWithResponse(sessionId, requestOptions).flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(LivenessWithVerifySession.class));
    }

    /**
     * Detect human faces in an image, return face rectangles, and optionally with faceIds, landmarks, and attributes.
     * 
     * Please refer to https://learn.microsoft.com/rest/api/face/face-detection-operations/detect-from-session-image-id
     * for more details.
     * 
     * @param options Options for detectFromSessionImage API.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<List<FaceDetectionResult>> detectFromSessionImage(DetectFromSessionImageOptions options) {
        // Generated convenience method for detectFromSessionImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        FaceDetectionModel detectionModel = options.getDetectionModel();
        FaceRecognitionModel recognitionModel = options.getRecognitionModel();
        Boolean returnFaceId = options.isReturnFaceId();
        List<FaceAttributeType> returnFaceAttributes = options.getReturnFaceAttributes();
        Boolean returnFaceLandmarks = options.isReturnFaceLandmarks();
        Boolean returnRecognitionModel = options.isReturnRecognitionModel();
        Integer faceIdTimeToLive = options.getFaceIdTimeToLive();
        DetectFromSessionImageRequest detectFromSessionImageRequestObj
            = new DetectFromSessionImageRequest(options.getSessionImageId());
        BinaryData detectFromSessionImageRequest = BinaryData.fromObject(detectFromSessionImageRequestObj);
        if (detectionModel != null) {
            requestOptions.addQueryParam("detectionModel", detectionModel.toString(), false);
        }
        if (recognitionModel != null) {
            requestOptions.addQueryParam("recognitionModel", recognitionModel.toString(), false);
        }
        if (returnFaceId != null) {
            requestOptions.addQueryParam("returnFaceId", String.valueOf(returnFaceId), false);
        }
        if (returnFaceAttributes != null) {
            requestOptions.addQueryParam("returnFaceAttributes",
                returnFaceAttributes.stream()
                    .map(paramItemValue -> Objects.toString(paramItemValue, ""))
                    .collect(Collectors.joining(",")),
                false);
        }
        if (returnFaceLandmarks != null) {
            requestOptions.addQueryParam("returnFaceLandmarks", String.valueOf(returnFaceLandmarks), false);
        }
        if (returnRecognitionModel != null) {
            requestOptions.addQueryParam("returnRecognitionModel", String.valueOf(returnRecognitionModel), false);
        }
        if (faceIdTimeToLive != null) {
            requestOptions.addQueryParam("faceIdTimeToLive", String.valueOf(faceIdTimeToLive), false);
        }
        return detectFromSessionImageWithResponse(detectFromSessionImageRequest, requestOptions)
            .flatMap(FluxUtil::toMono)
            .map(protocolMethodData -> protocolMethodData.toObject(TYPE_REFERENCE_LIST_FACE_DETECTION_RESULT));
    }

    /**
     * Please refer to https://learn.microsoft.com/rest/api/face/liveness-session-operations/get-session-image for more
     * details.
     * 
     * @param sessionImageId The request ID of the image to be retrieved.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws ClientAuthenticationException thrown if the request is rejected by server on status code 401.
     * @throws ResourceNotFoundException thrown if the request is rejected by server on status code 404.
     * @throws ResourceModifiedException thrown if the request is rejected by server on status code 409.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body on successful completion of {@link Mono}.
     */
    @Generated
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BinaryData> getSessionImage(String sessionImageId) {
        // Generated convenience method for getSessionImageWithResponse
        RequestOptions requestOptions = new RequestOptions();
        return getSessionImageWithResponse(sessionImageId, requestOptions).flatMap(FluxUtil::toMono);
    }

    @Generated
    private static final TypeReference<List<FaceDetectionResult>> TYPE_REFERENCE_LIST_FACE_DETECTION_RESULT
        = new TypeReference<List<FaceDetectionResult>>() {
        };
}
