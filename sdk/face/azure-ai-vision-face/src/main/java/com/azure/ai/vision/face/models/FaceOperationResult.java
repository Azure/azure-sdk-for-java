// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Long running operation resource for person directory.
 */
@Immutable
public final class FaceOperationResult implements JsonSerializable<FaceOperationResult> {
    /*
     * Operation ID of the operation.
     */
    @Generated
    private String operationId;

    /*
     * Current status of the operation.
     */
    @Generated
    private final FaceOperationStatus status;

    /*
     * Date and time the operation was created.
     */
    @Generated
    private final OffsetDateTime createdTime;

    /*
     * Date and time the operation was last updated.
     */
    @Generated
    private OffsetDateTime lastActionTime;

    /*
     * Date and time the operation was finished.
     */
    @Generated
    private OffsetDateTime finishedTime;

    /*
     * Message for the operation.
     */
    @Generated
    private String message;

    /**
     * Creates an instance of FaceOperationResult class.
     * 
     * @param status the status value to set.
     * @param createdTime the createdTime value to set.
     */
    @Generated
    private FaceOperationResult(FaceOperationStatus status, OffsetDateTime createdTime) {
        this.status = status;
        this.createdTime = createdTime;
    }

    /**
     * Get the operationId property: Operation ID of the operation.
     * 
     * @return the operationId value.
     */
    @Generated
    public String getOperationId() {
        return this.operationId;
    }

    /**
     * Get the status property: Current status of the operation.
     * 
     * @return the status value.
     */
    @Generated
    public FaceOperationStatus getStatus() {
        return this.status;
    }

    /**
     * Get the createdTime property: Date and time the operation was created.
     * 
     * @return the createdTime value.
     */
    @Generated
    public OffsetDateTime getCreatedTime() {
        return this.createdTime;
    }

    /**
     * Get the lastActionTime property: Date and time the operation was last updated.
     * 
     * @return the lastActionTime value.
     */
    @Generated
    public OffsetDateTime getLastActionTime() {
        return this.lastActionTime;
    }

    /**
     * Get the finishedTime property: Date and time the operation was finished.
     * 
     * @return the finishedTime value.
     */
    @Generated
    public OffsetDateTime getFinishedTime() {
        return this.finishedTime;
    }

    /**
     * Get the message property: Message for the operation.
     * 
     * @return the message value.
     */
    @Generated
    public String getMessage() {
        return this.message;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("status", this.status == null ? null : this.status.toString());
        jsonWriter.writeStringField("createdTime",
            this.createdTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTime));
        jsonWriter.writeStringField("lastActionTime",
            this.lastActionTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.lastActionTime));
        jsonWriter.writeStringField("finishedTime",
            this.finishedTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.finishedTime));
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaceOperationResult from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaceOperationResult if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the FaceOperationResult.
     */
    @Generated
    public static FaceOperationResult fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String operationId = null;
            FaceOperationStatus status = null;
            OffsetDateTime createdTime = null;
            OffsetDateTime lastActionTime = null;
            OffsetDateTime finishedTime = null;
            String message = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("operationId".equals(fieldName)) {
                    operationId = reader.getString();
                } else if ("status".equals(fieldName)) {
                    status = FaceOperationStatus.fromString(reader.getString());
                } else if ("createdTime".equals(fieldName)) {
                    createdTime = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("lastActionTime".equals(fieldName)) {
                    lastActionTime
                        = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("finishedTime".equals(fieldName)) {
                    finishedTime = reader.getNullable(nonNullReader -> OffsetDateTime.parse(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            FaceOperationResult deserializedFaceOperationResult = new FaceOperationResult(status, createdTime);
            deserializedFaceOperationResult.operationId = operationId;
            deserializedFaceOperationResult.lastActionTime = lastActionTime;
            deserializedFaceOperationResult.finishedTime = finishedTime;
            deserializedFaceOperationResult.message = message;

            return deserializedFaceOperationResult;
        });
    }
}
