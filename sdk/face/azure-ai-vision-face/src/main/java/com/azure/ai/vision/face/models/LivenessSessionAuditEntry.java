// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * Audit entry for a request in session.
 */
@Immutable
public final class LivenessSessionAuditEntry implements JsonSerializable<LivenessSessionAuditEntry> {

    /*
     * The unique id to refer to this audit request. Use this id with the 'start' query parameter to continue on to the
     * next page of audit results.
     */
    @Generated
    private final long id;

    /*
     * The unique sessionId of the created session. It will expire 48 hours after it was created or may be deleted
     * sooner using the corresponding session DELETE operation.
     */
    @Generated
    private final String sessionId;

    /*
     * The unique requestId that is returned by the service to the client in the 'apim-request-id' header.
     */
    @Generated
    private final String requestId;

    /*
     * The unique clientRequestId that is sent by the client in the 'client-request-id' header.
     */
    @Generated
    private final String clientRequestId;

    /*
     * The UTC DateTime that the request was received.
     */
    @Generated
    private final OffsetDateTime receivedDateTime;

    /*
     * The request of this entry.
     */
    @Generated
    private final AuditRequestInfo request;

    /*
     * The response of this entry.
     */
    @Generated
    private final AuditLivenessResponseInfo response;

    /*
     * The server calculated digest for this request. If the client reported digest differs from the server calculated
     * digest, then the message integrity between the client and service has been compromised and the result should not
     * be trusted. For more information, see how to guides on how to leverage this value to secure your end-to-end
     * solution.
     */
    @Generated
    private final String digest;

    /**
     * Creates an instance of LivenessSessionAuditEntry class.
     *
     * @param id the id value to set.
     * @param sessionId the sessionId value to set.
     * @param requestId the requestId value to set.
     * @param clientRequestId the clientRequestId value to set.
     * @param receivedDateTime the receivedDateTime value to set.
     * @param request the request value to set.
     * @param response the response value to set.
     * @param digest the digest value to set.
     */
    @Generated
    private LivenessSessionAuditEntry(long id, String sessionId, String requestId, String clientRequestId,
        OffsetDateTime receivedDateTime, AuditRequestInfo request, AuditLivenessResponseInfo response, String digest) {
        this.id = id;
        this.sessionId = sessionId;
        this.requestId = requestId;
        this.clientRequestId = clientRequestId;
        this.receivedDateTime = receivedDateTime;
        this.request = request;
        this.response = response;
        this.digest = digest;
    }

    /**
     * Get the id property: The unique id to refer to this audit request. Use this id with the 'start' query parameter
     * to continue on to the next page of audit results.
     *
     * @return the id value.
     */
    @Generated
    public long getId() {
        return this.id;
    }

    /**
     * Get the sessionId property: The unique sessionId of the created session. It will expire 48 hours after it was
     * created or may be deleted sooner using the corresponding session DELETE operation.
     *
     * @return the sessionId value.
     */
    @Generated
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Get the requestId property: The unique requestId that is returned by the service to the client in the
     * 'apim-request-id' header.
     *
     * @return the requestId value.
     */
    @Generated
    public String getRequestId() {
        return this.requestId;
    }

    /**
     * Get the clientRequestId property: The unique clientRequestId that is sent by the client in the
     * 'client-request-id' header.
     *
     * @return the clientRequestId value.
     */
    @Generated
    public String getClientRequestId() {
        return this.clientRequestId;
    }

    /**
     * Get the receivedDateTime property: The UTC DateTime that the request was received.
     *
     * @return the receivedDateTime value.
     */
    @Generated
    public OffsetDateTime getReceivedDateTime() {
        return this.receivedDateTime;
    }

    /**
     * Get the request property: The request of this entry.
     *
     * @return the request value.
     */
    @Generated
    public AuditRequestInfo getRequest() {
        return this.request;
    }

    /**
     * Get the response property: The response of this entry.
     *
     * @return the response value.
     */
    @Generated
    public AuditLivenessResponseInfo getResponse() {
        return this.response;
    }

    /**
     * Get the digest property: The server calculated digest for this request. If the client reported digest differs
     * from the server calculated digest, then the message integrity between the client and service has been compromised
     * and the result should not be trusted. For more information, see how to guides on how to leverage this value to
     * secure your end-to-end solution.
     *
     * @return the digest value.
     */
    @Generated
    public String getDigest() {
        return this.digest;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeLongField("id", this.id);
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeStringField("requestId", this.requestId);
        jsonWriter.writeStringField("clientRequestId", this.clientRequestId);
        jsonWriter.writeStringField("receivedDateTime",
            this.receivedDateTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.receivedDateTime));
        jsonWriter.writeJsonField("request", this.request);
        jsonWriter.writeJsonField("response", this.response);
        jsonWriter.writeStringField("digest", this.digest);
        jsonWriter.writeStringField("sessionImageId", this.sessionImageId);
        jsonWriter.writeStringField("verifyImageHash", this.verifyImageHash);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessSessionAuditEntry from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessSessionAuditEntry if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessSessionAuditEntry.
     */
    @Generated
    public static LivenessSessionAuditEntry fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            long id = 0L;
            String sessionId = null;
            String requestId = null;
            String clientRequestId = null;
            OffsetDateTime receivedDateTime = null;
            AuditRequestInfo request = null;
            AuditLivenessResponseInfo response = null;
            String digest = null;
            String sessionImageId = null;
            String verifyImageHash = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("id".equals(fieldName)) {
                    id = reader.getLong();
                } else if ("sessionId".equals(fieldName)) {
                    sessionId = reader.getString();
                } else if ("requestId".equals(fieldName)) {
                    requestId = reader.getString();
                } else if ("clientRequestId".equals(fieldName)) {
                    clientRequestId = reader.getString();
                } else if ("receivedDateTime".equals(fieldName)) {
                    receivedDateTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("request".equals(fieldName)) {
                    request = AuditRequestInfo.fromJson(reader);
                } else if ("response".equals(fieldName)) {
                    response = AuditLivenessResponseInfo.fromJson(reader);
                } else if ("digest".equals(fieldName)) {
                    digest = reader.getString();
                } else if ("sessionImageId".equals(fieldName)) {
                    sessionImageId = reader.getString();
                } else if ("verifyImageHash".equals(fieldName)) {
                    verifyImageHash = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            LivenessSessionAuditEntry deserializedLivenessSessionAuditEntry = new LivenessSessionAuditEntry(id,
                sessionId, requestId, clientRequestId, receivedDateTime, request, response, digest);
            deserializedLivenessSessionAuditEntry.sessionImageId = sessionImageId;
            deserializedLivenessSessionAuditEntry.verifyImageHash = verifyImageHash;
            return deserializedLivenessSessionAuditEntry;
        });
    }

    /*
     * The image ID of the session request.
     */
    @Generated
    private String sessionImageId;

    /*
     * The sha256 hash of the verify-image in the request.
     */
    @Generated
    private String verifyImageHash;

    /**
     * Get the sessionImageId property: The image ID of the session request.
     *
     * @return the sessionImageId value.
     */
    @Generated
    public String getSessionImageId() {
        return this.sessionImageId;
    }

    /**
     * Get the verifyImageHash property: The sha256 hash of the verify-image in the request.
     *
     * @return the verifyImageHash value.
     */
    @Generated
    public String getVerifyImageHash() {
        return this.verifyImageHash;
    }
}
