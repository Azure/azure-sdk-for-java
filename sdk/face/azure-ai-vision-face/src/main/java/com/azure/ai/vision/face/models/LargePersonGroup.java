// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The container of the uploaded person data, including face recognition feature, and up to 1,000,000 people.
 */
@Immutable
public final class LargePersonGroup implements JsonSerializable<LargePersonGroup> {
    /*
     * User defined name, maximum length is 128.
     */
    @Generated
    private final String name;

    /*
     * Optional user defined data. Length should not exceed 16K.
     */
    @Generated
    private String userData;

    /*
     * Name of recognition model. Recognition model is used when the face features are extracted and associated with detected faceIds.
     */
    @Generated
    private FaceRecognitionModel recognitionModel;

    /*
     * ID of the container.
     */
    @Generated
    private String largePersonGroupId;

    /**
     * Creates an instance of LargePersonGroup class.
     * 
     * @param name the name value to set.
     */
    @Generated
    private LargePersonGroup(String name) {
        this.name = name;
    }

    /**
     * Get the name property: User defined name, maximum length is 128.
     * 
     * @return the name value.
     */
    @Generated
    public String getName() {
        return this.name;
    }

    /**
     * Get the userData property: Optional user defined data. Length should not exceed 16K.
     * 
     * @return the userData value.
     */
    @Generated
    public String getUserData() {
        return this.userData;
    }

    /**
     * Get the recognitionModel property: Name of recognition model. Recognition model is used when the face features
     * are extracted and associated with detected faceIds.
     * 
     * @return the recognitionModel value.
     */
    @Generated
    public FaceRecognitionModel getRecognitionModel() {
        return this.recognitionModel;
    }

    /**
     * Get the largePersonGroupId property: ID of the container.
     * 
     * @return the largePersonGroupId value.
     */
    @Generated
    public String getLargePersonGroupId() {
        return this.largePersonGroupId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("userData", this.userData);
        jsonWriter.writeStringField("recognitionModel",
            this.recognitionModel == null ? null : this.recognitionModel.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LargePersonGroup from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LargePersonGroup if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LargePersonGroup.
     */
    @Generated
    public static LargePersonGroup fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String name = null;
            String largePersonGroupId = null;
            String userData = null;
            FaceRecognitionModel recognitionModel = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    name = reader.getString();
                } else if ("largePersonGroupId".equals(fieldName)) {
                    largePersonGroupId = reader.getString();
                } else if ("userData".equals(fieldName)) {
                    userData = reader.getString();
                } else if ("recognitionModel".equals(fieldName)) {
                    recognitionModel = FaceRecognitionModel.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            LargePersonGroup deserializedLargePersonGroup = new LargePersonGroup(name);
            deserializedLargePersonGroup.largePersonGroupId = largePersonGroupId;
            deserializedLargePersonGroup.userData = userData;
            deserializedLargePersonGroup.recognitionModel = recognitionModel;

            return deserializedLargePersonGroup;
        });
    }
}
