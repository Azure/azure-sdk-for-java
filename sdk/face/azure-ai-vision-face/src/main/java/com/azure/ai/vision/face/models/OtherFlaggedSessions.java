// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The other sessions flagged as abuse based on the information gathered during this attempt.
 */
@Immutable
public final class OtherFlaggedSessions implements JsonSerializable<OtherFlaggedSessions> {
    /*
     * The attempt ID, start from 1.
     */
    @Generated
    private final int attemptId;

    /*
     * The unique session ID of the flagged session.
     */
    @Generated
    private final String sessionId;

    /*
     * The image ID from the flagged session.
     */
    @Generated
    private String sessionImageId;

    /**
     * Creates an instance of OtherFlaggedSessions class.
     * 
     * @param attemptId the attemptId value to set.
     * @param sessionId the sessionId value to set.
     */
    @Generated
    private OtherFlaggedSessions(int attemptId, String sessionId) {
        this.attemptId = attemptId;
        this.sessionId = sessionId;
    }

    /**
     * Get the attemptId property: The attempt ID, start from 1.
     * 
     * @return the attemptId value.
     */
    @Generated
    public int getAttemptId() {
        return this.attemptId;
    }

    /**
     * Get the sessionId property: The unique session ID of the flagged session.
     * 
     * @return the sessionId value.
     */
    @Generated
    public String getSessionId() {
        return this.sessionId;
    }

    /**
     * Get the sessionImageId property: The image ID from the flagged session.
     * 
     * @return the sessionImageId value.
     */
    @Generated
    public String getSessionImageId() {
        return this.sessionImageId;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("attemptId", this.attemptId);
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeStringField("sessionImageId", this.sessionImageId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of OtherFlaggedSessions from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of OtherFlaggedSessions if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the OtherFlaggedSessions.
     */
    @Generated
    public static OtherFlaggedSessions fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            int attemptId = 0;
            String sessionId = null;
            String sessionImageId = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attemptId".equals(fieldName)) {
                    attemptId = reader.getInt();
                } else if ("sessionId".equals(fieldName)) {
                    sessionId = reader.getString();
                } else if ("sessionImageId".equals(fieldName)) {
                    sessionImageId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }
            OtherFlaggedSessions deserializedOtherFlaggedSessions = new OtherFlaggedSessions(attemptId, sessionId);
            deserializedOtherFlaggedSessions.sessionImageId = sessionImageId;

            return deserializedOtherFlaggedSessions;
        });
    }
}
