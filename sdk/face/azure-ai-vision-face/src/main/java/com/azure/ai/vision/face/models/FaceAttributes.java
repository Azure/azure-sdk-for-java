// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.
package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Face attributes for the detected face.
 */
@Immutable
public final class FaceAttributes implements JsonSerializable<FaceAttributes> {

    /*
     * Age in years.
     */
    @Generated
    private Double age;

    /*
     * Smile intensity, a number between [0,1].
     */
    @Generated
    private Double smile;

    /*
     * Properties describing facial hair attributes.
     */
    @Generated
    private FacialHair facialHair;

    /*
     * Glasses type if any of the face.
     */
    @Generated
    private GlassesType glasses;

    /*
     * 3-D roll/yaw/pitch angles for face direction.
     */
    @Generated
    private HeadPose headPose;

    /*
     * Properties describing hair attributes.
     */
    @Generated
    private HairProperties hair;

    /*
     * Properties describing occlusions on a given face.
     */
    @Generated
    private OcclusionProperties occlusion;

    /*
     * Properties describing any accessories on a given face.
     */
    @Generated
    private List<AccessoryItem> accessories;

    /*
     * Properties describing any presence of blur within the image.
     */
    @Generated
    private BlurProperties blur;

    /*
     * Properties describing exposure level of the image.
     */
    @Generated
    private ExposureProperties exposure;

    /*
     * Properties describing noise level of the image.
     */
    @Generated
    private NoiseProperties noise;

    /*
     * Properties describing the presence of a mask on a given face.
     */
    @Generated
    private MaskProperties mask;

    /*
     * Properties describing the overall image quality regarding whether the image being used in the detection is of
     * sufficient quality to attempt face recognition on.
     */
    @Generated
    private QualityForRecognition qualityForRecognition;

    /**
     * Creates an instance of FaceAttributes class.
     */
    @Generated
    private FaceAttributes() {
    }

    /**
     * Get the age property: Age in years.
     *
     * @return the age value.
     */
    @Generated
    public Double getAge() {
        return this.age;
    }

    /**
     * Get the smile property: Smile intensity, a number between [0,1].
     *
     * @return the smile value.
     */
    @Generated
    public Double getSmile() {
        return this.smile;
    }

    /**
     * Get the facialHair property: Properties describing facial hair attributes.
     *
     * @return the facialHair value.
     */
    @Generated
    public FacialHair getFacialHair() {
        return this.facialHair;
    }

    /**
     * Get the glasses property: Glasses type if any of the face.
     *
     * @return the glasses value.
     */
    @Generated
    public GlassesType getGlasses() {
        return this.glasses;
    }

    /**
     * Get the headPose property: 3-D roll/yaw/pitch angles for face direction.
     *
     * @return the headPose value.
     */
    @Generated
    public HeadPose getHeadPose() {
        return this.headPose;
    }

    /**
     * Get the hair property: Properties describing hair attributes.
     *
     * @return the hair value.
     */
    @Generated
    public HairProperties getHair() {
        return this.hair;
    }

    /**
     * Get the occlusion property: Properties describing occlusions on a given face.
     *
     * @return the occlusion value.
     */
    @Generated
    public OcclusionProperties getOcclusion() {
        return this.occlusion;
    }

    /**
     * Get the accessories property: Properties describing any accessories on a given face.
     *
     * @return the accessories value.
     */
    @Generated
    public List<AccessoryItem> getAccessories() {
        return this.accessories;
    }

    /**
     * Get the blur property: Properties describing any presence of blur within the image.
     *
     * @return the blur value.
     */
    @Generated
    public BlurProperties getBlur() {
        return this.blur;
    }

    /**
     * Get the exposure property: Properties describing exposure level of the image.
     *
     * @return the exposure value.
     */
    @Generated
    public ExposureProperties getExposure() {
        return this.exposure;
    }

    /**
     * Get the noise property: Properties describing noise level of the image.
     *
     * @return the noise value.
     */
    @Generated
    public NoiseProperties getNoise() {
        return this.noise;
    }

    /**
     * Get the mask property: Properties describing the presence of a mask on a given face.
     *
     * @return the mask value.
     */
    @Generated
    public MaskProperties getMask() {
        return this.mask;
    }

    /**
     * Get the qualityForRecognition property: Properties describing the overall image quality regarding whether the
     * image being used in the detection is of sufficient quality to attempt face recognition on.
     *
     * @return the qualityForRecognition value.
     */
    @Generated
    public QualityForRecognition getQualityForRecognition() {
        return this.qualityForRecognition;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("age", this.age);
        jsonWriter.writeNumberField("smile", this.smile);
        jsonWriter.writeJsonField("facialHair", this.facialHair);
        jsonWriter.writeStringField("glasses", this.glasses == null ? null : this.glasses.toString());
        jsonWriter.writeJsonField("headPose", this.headPose);
        jsonWriter.writeJsonField("hair", this.hair);
        jsonWriter.writeJsonField("occlusion", this.occlusion);
        jsonWriter.writeArrayField("accessories", this.accessories, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeJsonField("blur", this.blur);
        jsonWriter.writeJsonField("exposure", this.exposure);
        jsonWriter.writeJsonField("noise", this.noise);
        jsonWriter.writeJsonField("mask", this.mask);
        jsonWriter.writeStringField("qualityForRecognition",
            this.qualityForRecognition == null ? null : this.qualityForRecognition.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of FaceAttributes from the JsonReader.
     *
     * @param jsonReader The JsonReader being read.
     * @return An instance of FaceAttributes if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the FaceAttributes.
     */
    @Generated
    public static FaceAttributes fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            FaceAttributes deserializedFaceAttributes = new FaceAttributes();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();
                if ("age".equals(fieldName)) {
                    deserializedFaceAttributes.age = reader.getNullable(JsonReader::getDouble);
                } else if ("smile".equals(fieldName)) {
                    deserializedFaceAttributes.smile = reader.getNullable(JsonReader::getDouble);
                } else if ("facialHair".equals(fieldName)) {
                    deserializedFaceAttributes.facialHair = FacialHair.fromJson(reader);
                } else if ("glasses".equals(fieldName)) {
                    deserializedFaceAttributes.glasses = GlassesType.fromString(reader.getString());
                } else if ("headPose".equals(fieldName)) {
                    deserializedFaceAttributes.headPose = HeadPose.fromJson(reader);
                } else if ("hair".equals(fieldName)) {
                    deserializedFaceAttributes.hair = HairProperties.fromJson(reader);
                } else if ("occlusion".equals(fieldName)) {
                    deserializedFaceAttributes.occlusion = OcclusionProperties.fromJson(reader);
                } else if ("accessories".equals(fieldName)) {
                    List<AccessoryItem> accessories = reader.readArray(reader1 -> AccessoryItem.fromJson(reader1));
                    deserializedFaceAttributes.accessories = accessories;
                } else if ("blur".equals(fieldName)) {
                    deserializedFaceAttributes.blur = BlurProperties.fromJson(reader);
                } else if ("exposure".equals(fieldName)) {
                    deserializedFaceAttributes.exposure = ExposureProperties.fromJson(reader);
                } else if ("noise".equals(fieldName)) {
                    deserializedFaceAttributes.noise = NoiseProperties.fromJson(reader);
                } else if ("mask".equals(fieldName)) {
                    deserializedFaceAttributes.mask = MaskProperties.fromJson(reader);
                } else if ("qualityForRecognition".equals(fieldName)) {
                    deserializedFaceAttributes.qualityForRecognition
                        = QualityForRecognition.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }
            return deserializedFaceAttributes;
        });
    }
}
