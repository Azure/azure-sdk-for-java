// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.ai.vision.face.models;

import com.azure.core.annotation.Generated;
import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * The results of the liveness session.
 */
@Immutable
public final class LivenessSessionResults implements JsonSerializable<LivenessSessionResults> {
    /*
     * The attempts data of underlying liveness call with the session.
     */
    @Generated
    private final List<LivenessSessionAttempt> attempts;

    /**
     * Creates an instance of LivenessSessionResults class.
     * 
     * @param attempts the attempts value to set.
     */
    @Generated
    private LivenessSessionResults(List<LivenessSessionAttempt> attempts) {
        this.attempts = attempts;
    }

    /**
     * Get the attempts property: The attempts data of underlying liveness call with the session.
     * 
     * @return the attempts value.
     */
    @Generated
    public List<LivenessSessionAttempt> getAttempts() {
        return this.attempts;
    }

    /**
     * {@inheritDoc}
     */
    @Generated
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("attempts", this.attempts, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LivenessSessionResults from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LivenessSessionResults if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LivenessSessionResults.
     */
    @Generated
    public static LivenessSessionResults fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            List<LivenessSessionAttempt> attempts = null;
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("attempts".equals(fieldName)) {
                    attempts = reader.readArray(reader1 -> LivenessSessionAttempt.fromJson(reader1));
                } else {
                    reader.skipChildren();
                }
            }
            return new LivenessSessionResults(attempts);
        });
    }
}
