/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_03_20.implementation;

import com.microsoft.azure.management.avs.v2020_03_20.ExpressRouteAuthorization;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.avs.v2020_03_20.ExpressRouteAuthorizationProvisioningState;

class ExpressRouteAuthorizationImpl extends CreatableUpdatableImpl<ExpressRouteAuthorization, ExpressRouteAuthorizationInner, ExpressRouteAuthorizationImpl> implements ExpressRouteAuthorization, ExpressRouteAuthorization.Definition, ExpressRouteAuthorization.Update {
    private final AVSManager manager;
    private String resourceGroupName;
    private String privateCloudName;
    private String authorizationName;
    private Object cauthorization;
    private Object uauthorization;

    ExpressRouteAuthorizationImpl(String name, AVSManager manager) {
        super(name, new ExpressRouteAuthorizationInner());
        this.manager = manager;
        // Set resource name
        this.authorizationName = name;
        //
    }

    ExpressRouteAuthorizationImpl(ExpressRouteAuthorizationInner inner, AVSManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.authorizationName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.privateCloudName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.authorizationName = IdParsingUtils.getValueFromIdByName(inner.id(), "authorizations");
        //
    }

    @Override
    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public Observable<ExpressRouteAuthorization> createResourceAsync() {
        AuthorizationsInner client = this.manager().inner().authorizations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateCloudName, this.authorizationName, this.cauthorization)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<ExpressRouteAuthorization> updateResourceAsync() {
        AuthorizationsInner client = this.manager().inner().authorizations();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateCloudName, this.authorizationName, this.uauthorization)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<ExpressRouteAuthorizationInner> getInnerAsync() {
        AuthorizationsInner client = this.manager().inner().authorizations();
        return client.getAsync(this.resourceGroupName, this.privateCloudName, this.authorizationName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String expressRouteAuthorizationId() {
        return this.inner().expressRouteAuthorizationId();
    }

    @Override
    public String expressRouteAuthorizationKey() {
        return this.inner().expressRouteAuthorizationKey();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public ExpressRouteAuthorizationProvisioningState provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public ExpressRouteAuthorizationImpl withExistingPrivateCloud(String resourceGroupName, String privateCloudName) {
        this.resourceGroupName = resourceGroupName;
        this.privateCloudName = privateCloudName;
        return this;
    }

    @Override
    public ExpressRouteAuthorizationImpl withAuthorization(Object authorization) {
        if (isInCreateMode()) {
            this.cauthorization = authorization;
        } else {
            this.uauthorization = authorization;
        }
        return this;
    }

}
