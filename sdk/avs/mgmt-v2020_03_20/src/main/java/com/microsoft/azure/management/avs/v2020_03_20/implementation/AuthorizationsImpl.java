/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.avs.v2020_03_20.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.avs.v2020_03_20.Authorizations;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.avs.v2020_03_20.ExpressRouteAuthorization;

class AuthorizationsImpl extends WrapperImpl<AuthorizationsInner> implements Authorizations {
    private final AVSManager manager;

    AuthorizationsImpl(AVSManager manager) {
        super(manager.inner().authorizations());
        this.manager = manager;
    }

    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public ExpressRouteAuthorizationImpl define(String name) {
        return wrapModel(name);
    }

    private ExpressRouteAuthorizationImpl wrapModel(ExpressRouteAuthorizationInner inner) {
        return  new ExpressRouteAuthorizationImpl(inner, manager());
    }

    private ExpressRouteAuthorizationImpl wrapModel(String name) {
        return new ExpressRouteAuthorizationImpl(name, this.manager());
    }

    @Override
    public Observable<ExpressRouteAuthorization> listAsync(final String resourceGroupName, final String privateCloudName) {
        AuthorizationsInner client = this.inner();
        return client.listAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<ExpressRouteAuthorizationInner>, Iterable<ExpressRouteAuthorizationInner>>() {
            @Override
            public Iterable<ExpressRouteAuthorizationInner> call(Page<ExpressRouteAuthorizationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ExpressRouteAuthorizationInner, ExpressRouteAuthorization>() {
            @Override
            public ExpressRouteAuthorization call(ExpressRouteAuthorizationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<ExpressRouteAuthorization> getAsync(String resourceGroupName, String privateCloudName, String authorizationName) {
        AuthorizationsInner client = this.inner();
        return client.getAsync(resourceGroupName, privateCloudName, authorizationName)
        .flatMap(new Func1<ExpressRouteAuthorizationInner, Observable<ExpressRouteAuthorization>>() {
            @Override
            public Observable<ExpressRouteAuthorization> call(ExpressRouteAuthorizationInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((ExpressRouteAuthorization)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String privateCloudName, String authorizationName) {
        AuthorizationsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, privateCloudName, authorizationName).toCompletable();
    }

}
