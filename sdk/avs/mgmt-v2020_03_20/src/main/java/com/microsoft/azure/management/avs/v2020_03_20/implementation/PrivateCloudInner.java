/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_03_20.implementation;

import com.microsoft.azure.management.avs.v2020_03_20.Sku;
import com.microsoft.azure.management.avs.v2020_03_20.ManagementCluster;
import com.microsoft.azure.management.avs.v2020_03_20.InternetEnum;
import java.util.List;
import com.microsoft.azure.management.avs.v2020_03_20.IdentitySource;
import com.microsoft.azure.management.avs.v2020_03_20.PrivateCloudProvisioningState;
import com.microsoft.azure.management.avs.v2020_03_20.Circuit;
import com.microsoft.azure.management.avs.v2020_03_20.Endpoints;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.microsoft.rest.serializer.JsonFlatten;
import com.microsoft.rest.SkipParentValidation;
import com.microsoft.azure.Resource;

/**
 * A private cloud resource.
 */
@JsonFlatten
@SkipParentValidation
public class PrivateCloudInner extends Resource {
    /**
     * The private cloud SKU.
     */
    @JsonProperty(value = "sku", required = true)
    private Sku sku;

    /**
     * The default cluster used for management.
     */
    @JsonProperty(value = "properties.managementCluster")
    private ManagementCluster managementCluster;

    /**
     * Connectivity to internet is enabled or disabled. Possible values
     * include: 'Enabled', 'Disabled'.
     */
    @JsonProperty(value = "properties.internet")
    private InternetEnum internet;

    /**
     * vCenter Single Sign On Identity Sources.
     */
    @JsonProperty(value = "properties.identitySources")
    private List<IdentitySource> identitySources;

    /**
     * The provisioning state. Possible values include: 'Succeeded', 'Failed',
     * 'Cancelled', 'Pending', 'Building', 'Deleting', 'Updating'.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private PrivateCloudProvisioningState provisioningState;

    /**
     * An ExpressRoute Circuit.
     */
    @JsonProperty(value = "properties.circuit")
    private Circuit circuit;

    /**
     * The endpoints.
     */
    @JsonProperty(value = "properties.endpoints", access = JsonProperty.Access.WRITE_ONLY)
    private Endpoints endpoints;

    /**
     * The block of addresses should be unique across VNet in your subscription
     * as well as on-premise. Make sure the CIDR format is conformed to
     * (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and
     * 22.
     */
    @JsonProperty(value = "properties.networkBlock", required = true)
    private String networkBlock;

    /**
     * Network used to access vCenter Server and NSX-T Manager.
     */
    @JsonProperty(value = "properties.managementNetwork", access = JsonProperty.Access.WRITE_ONLY)
    private String managementNetwork;

    /**
     * Used for virtual machine cold migration, cloning, and snapshot
     * migration.
     */
    @JsonProperty(value = "properties.provisioningNetwork", access = JsonProperty.Access.WRITE_ONLY)
    private String provisioningNetwork;

    /**
     * Used for live migration of virtual machines.
     */
    @JsonProperty(value = "properties.vmotionNetwork", access = JsonProperty.Access.WRITE_ONLY)
    private String vmotionNetwork;

    /**
     * Optionally, set the vCenter admin password when the private cloud is
     * created.
     */
    @JsonProperty(value = "properties.vcenterPassword")
    private String vcenterPassword;

    /**
     * Optionally, set the NSX-T Manager password when the private cloud is
     * created.
     */
    @JsonProperty(value = "properties.nsxtPassword")
    private String nsxtPassword;

    /**
     * Thumbprint of the vCenter Server SSL certificate.
     */
    @JsonProperty(value = "properties.vcenterCertificateThumbprint", access = JsonProperty.Access.WRITE_ONLY)
    private String vcenterCertificateThumbprint;

    /**
     * Thumbprint of the NSX-T Manager SSL certificate.
     */
    @JsonProperty(value = "properties.nsxtCertificateThumbprint", access = JsonProperty.Access.WRITE_ONLY)
    private String nsxtCertificateThumbprint;

    /**
     * Get the private cloud SKU.
     *
     * @return the sku value
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the private cloud SKU.
     *
     * @param sku the sku value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the default cluster used for management.
     *
     * @return the managementCluster value
     */
    public ManagementCluster managementCluster() {
        return this.managementCluster;
    }

    /**
     * Set the default cluster used for management.
     *
     * @param managementCluster the managementCluster value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withManagementCluster(ManagementCluster managementCluster) {
        this.managementCluster = managementCluster;
        return this;
    }

    /**
     * Get connectivity to internet is enabled or disabled. Possible values include: 'Enabled', 'Disabled'.
     *
     * @return the internet value
     */
    public InternetEnum internet() {
        return this.internet;
    }

    /**
     * Set connectivity to internet is enabled or disabled. Possible values include: 'Enabled', 'Disabled'.
     *
     * @param internet the internet value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withInternet(InternetEnum internet) {
        this.internet = internet;
        return this;
    }

    /**
     * Get vCenter Single Sign On Identity Sources.
     *
     * @return the identitySources value
     */
    public List<IdentitySource> identitySources() {
        return this.identitySources;
    }

    /**
     * Set vCenter Single Sign On Identity Sources.
     *
     * @param identitySources the identitySources value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withIdentitySources(List<IdentitySource> identitySources) {
        this.identitySources = identitySources;
        return this;
    }

    /**
     * Get the provisioning state. Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Pending', 'Building', 'Deleting', 'Updating'.
     *
     * @return the provisioningState value
     */
    public PrivateCloudProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get an ExpressRoute Circuit.
     *
     * @return the circuit value
     */
    public Circuit circuit() {
        return this.circuit;
    }

    /**
     * Set an ExpressRoute Circuit.
     *
     * @param circuit the circuit value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withCircuit(Circuit circuit) {
        this.circuit = circuit;
        return this;
    }

    /**
     * Get the endpoints.
     *
     * @return the endpoints value
     */
    public Endpoints endpoints() {
        return this.endpoints;
    }

    /**
     * Get the block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22.
     *
     * @return the networkBlock value
     */
    public String networkBlock() {
        return this.networkBlock;
    }

    /**
     * Set the block of addresses should be unique across VNet in your subscription as well as on-premise. Make sure the CIDR format is conformed to (A.B.C.D/X) where A,B,C,D are between 0 and 255, and X is between 0 and 22.
     *
     * @param networkBlock the networkBlock value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withNetworkBlock(String networkBlock) {
        this.networkBlock = networkBlock;
        return this;
    }

    /**
     * Get network used to access vCenter Server and NSX-T Manager.
     *
     * @return the managementNetwork value
     */
    public String managementNetwork() {
        return this.managementNetwork;
    }

    /**
     * Get used for virtual machine cold migration, cloning, and snapshot migration.
     *
     * @return the provisioningNetwork value
     */
    public String provisioningNetwork() {
        return this.provisioningNetwork;
    }

    /**
     * Get used for live migration of virtual machines.
     *
     * @return the vmotionNetwork value
     */
    public String vmotionNetwork() {
        return this.vmotionNetwork;
    }

    /**
     * Get optionally, set the vCenter admin password when the private cloud is created.
     *
     * @return the vcenterPassword value
     */
    public String vcenterPassword() {
        return this.vcenterPassword;
    }

    /**
     * Set optionally, set the vCenter admin password when the private cloud is created.
     *
     * @param vcenterPassword the vcenterPassword value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withVcenterPassword(String vcenterPassword) {
        this.vcenterPassword = vcenterPassword;
        return this;
    }

    /**
     * Get optionally, set the NSX-T Manager password when the private cloud is created.
     *
     * @return the nsxtPassword value
     */
    public String nsxtPassword() {
        return this.nsxtPassword;
    }

    /**
     * Set optionally, set the NSX-T Manager password when the private cloud is created.
     *
     * @param nsxtPassword the nsxtPassword value to set
     * @return the PrivateCloudInner object itself.
     */
    public PrivateCloudInner withNsxtPassword(String nsxtPassword) {
        this.nsxtPassword = nsxtPassword;
        return this;
    }

    /**
     * Get thumbprint of the vCenter Server SSL certificate.
     *
     * @return the vcenterCertificateThumbprint value
     */
    public String vcenterCertificateThumbprint() {
        return this.vcenterCertificateThumbprint;
    }

    /**
     * Get thumbprint of the NSX-T Manager SSL certificate.
     *
     * @return the nsxtCertificateThumbprint value
     */
    public String nsxtCertificateThumbprint() {
        return this.nsxtCertificateThumbprint;
    }

}
