/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_03_20.implementation;

import com.microsoft.azure.management.avs.v2020_03_20.HcxEnterpriseSite;
import com.microsoft.azure.arm.model.implementation.CreatableUpdatableImpl;
import rx.Observable;
import com.microsoft.azure.management.avs.v2020_03_20.HcxEnterpriseSiteStatus;

class HcxEnterpriseSiteImpl extends CreatableUpdatableImpl<HcxEnterpriseSite, HcxEnterpriseSiteInner, HcxEnterpriseSiteImpl> implements HcxEnterpriseSite, HcxEnterpriseSite.Definition, HcxEnterpriseSite.Update {
    private final AVSManager manager;
    private String resourceGroupName;
    private String privateCloudName;
    private String hcxEnterpriseSiteName;
    private Object chcxEnterpriseSite;
    private Object uhcxEnterpriseSite;

    HcxEnterpriseSiteImpl(String name, AVSManager manager) {
        super(name, new HcxEnterpriseSiteInner());
        this.manager = manager;
        // Set resource name
        this.hcxEnterpriseSiteName = name;
        //
    }

    HcxEnterpriseSiteImpl(HcxEnterpriseSiteInner inner, AVSManager manager) {
        super(inner.name(), inner);
        this.manager = manager;
        // Set resource name
        this.hcxEnterpriseSiteName = inner.name();
        // set resource ancestor and positional variables
        this.resourceGroupName = IdParsingUtils.getValueFromIdByName(inner.id(), "resourceGroups");
        this.privateCloudName = IdParsingUtils.getValueFromIdByName(inner.id(), "privateClouds");
        this.hcxEnterpriseSiteName = IdParsingUtils.getValueFromIdByName(inner.id(), "hcxEnterpriseSites");
        //
    }

    @Override
    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public Observable<HcxEnterpriseSite> createResourceAsync() {
        HcxEnterpriseSitesInner client = this.manager().inner().hcxEnterpriseSites();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateCloudName, this.hcxEnterpriseSiteName, this.chcxEnterpriseSite)
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<HcxEnterpriseSite> updateResourceAsync() {
        HcxEnterpriseSitesInner client = this.manager().inner().hcxEnterpriseSites();
        return client.createOrUpdateAsync(this.resourceGroupName, this.privateCloudName, this.hcxEnterpriseSiteName, this.uhcxEnterpriseSite)
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<HcxEnterpriseSiteInner> getInnerAsync() {
        HcxEnterpriseSitesInner client = this.manager().inner().hcxEnterpriseSites();
        return client.getAsync(this.resourceGroupName, this.privateCloudName, this.hcxEnterpriseSiteName);
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }


    @Override
    public String activationKey() {
        return this.inner().activationKey();
    }

    @Override
    public String id() {
        return this.inner().id();
    }

    @Override
    public String name() {
        return this.inner().name();
    }

    @Override
    public HcxEnterpriseSiteStatus status() {
        return this.inner().status();
    }

    @Override
    public String type() {
        return this.inner().type();
    }

    @Override
    public HcxEnterpriseSiteImpl withExistingPrivateCloud(String resourceGroupName, String privateCloudName) {
        this.resourceGroupName = resourceGroupName;
        this.privateCloudName = privateCloudName;
        return this;
    }

    @Override
    public HcxEnterpriseSiteImpl withHcxEnterpriseSite(Object hcxEnterpriseSite) {
        if (isInCreateMode()) {
            this.chcxEnterpriseSite = hcxEnterpriseSite;
        } else {
            this.uhcxEnterpriseSite = hcxEnterpriseSite;
        }
        return this;
    }

}
