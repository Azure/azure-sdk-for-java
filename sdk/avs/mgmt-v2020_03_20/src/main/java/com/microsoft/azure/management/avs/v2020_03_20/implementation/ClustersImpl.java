/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.avs.v2020_03_20.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.avs.v2020_03_20.Clusters;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.avs.v2020_03_20.Cluster;

class ClustersImpl extends WrapperImpl<ClustersInner> implements Clusters {
    private final AVSManager manager;

    ClustersImpl(AVSManager manager) {
        super(manager.inner().clusters());
        this.manager = manager;
    }

    public AVSManager manager() {
        return this.manager;
    }

    @Override
    public ClusterImpl define(String name) {
        return wrapModel(name);
    }

    private ClusterImpl wrapModel(ClusterInner inner) {
        return  new ClusterImpl(inner, manager());
    }

    private ClusterImpl wrapModel(String name) {
        return new ClusterImpl(name, this.manager());
    }

    @Override
    public Observable<Cluster> listAsync(final String resourceGroupName, final String privateCloudName) {
        ClustersInner client = this.inner();
        return client.listAsync(resourceGroupName, privateCloudName)
        .flatMapIterable(new Func1<Page<ClusterInner>, Iterable<ClusterInner>>() {
            @Override
            public Iterable<ClusterInner> call(Page<ClusterInner> page) {
                return page.items();
            }
        })
        .map(new Func1<ClusterInner, Cluster>() {
            @Override
            public Cluster call(ClusterInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<Cluster> getAsync(String resourceGroupName, String privateCloudName, String clusterName) {
        ClustersInner client = this.inner();
        return client.getAsync(resourceGroupName, privateCloudName, clusterName)
        .flatMap(new Func1<ClusterInner, Observable<Cluster>>() {
            @Override
            public Observable<Cluster> call(ClusterInner inner) {
                if (inner == null) {
                    return Observable.empty();
                } else {
                    return Observable.just((Cluster)wrapModel(inner));
                }
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String privateCloudName, String clusterName) {
        ClustersInner client = this.inner();
        return client.deleteAsync(resourceGroupName, privateCloudName, clusterName).toCompletable();
    }

}
