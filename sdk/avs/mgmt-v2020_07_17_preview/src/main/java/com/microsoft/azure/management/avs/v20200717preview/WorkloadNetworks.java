/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkDhcp;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkGateway;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkPortMirroring;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkSegment;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkVirtualMachine;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkVMGroup;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WorkloadNetworks.
 */
public interface WorkloadNetworks {
    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkSegment&gt; object if successful.
     */
    PagedList<WorkloadNetworkSegment> listSegments(final String resourceGroupName, final String privateCloudName);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkSegment>> listSegmentsAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    Observable<Page<WorkloadNetworkSegment>> listSegmentsAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> listSegmentsWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    WorkloadNetworkSegment getSegment(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkSegment> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<WorkloadNetworkSegment> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<ServiceResponse<WorkloadNetworkSegment>> getSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    WorkloadNetworkSegment createSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkSegment> createSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<WorkloadNetworkSegment> createSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<ServiceResponse<WorkloadNetworkSegment>> createSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    WorkloadNetworkSegment beginCreateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkSegment> beginCreateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<WorkloadNetworkSegment> beginCreateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<ServiceResponse<WorkloadNetworkSegment>> beginCreateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    WorkloadNetworkSegment updateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkSegment> updateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<WorkloadNetworkSegment> updateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<ServiceResponse<WorkloadNetworkSegment>> updateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    WorkloadNetworkSegment beginUpdateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkSegment> beginUpdateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<WorkloadNetworkSegment> beginUpdateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    Observable<ServiceResponse<WorkloadNetworkSegment>> beginUpdateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteSegment(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void beginDeleteSegment(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> beginDeleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> beginDeleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> beginDeleteSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDhcp&gt; object if successful.
     */
    PagedList<WorkloadNetworkDhcp> listDhcp(final String resourceGroupName, final String privateCloudName);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkDhcp>> listDhcpAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    Observable<Page<WorkloadNetworkDhcp>> listDhcpAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> listDhcpWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    WorkloadNetworkDhcp getDhcp(String resourceGroupName, String dhcpId, String privateCloudName);

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkDhcp> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<WorkloadNetworkDhcp> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName);

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<ServiceResponse<WorkloadNetworkDhcp>> getDhcpWithServiceResponseAsync(String resourceGroupName, String dhcpId, String privateCloudName);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    WorkloadNetworkDhcp createDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkDhcp> createDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<WorkloadNetworkDhcp> createDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<ServiceResponse<WorkloadNetworkDhcp>> createDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    WorkloadNetworkDhcp beginCreateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkDhcp> beginCreateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<WorkloadNetworkDhcp> beginCreateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<ServiceResponse<WorkloadNetworkDhcp>> beginCreateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    WorkloadNetworkDhcp updateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkDhcp> updateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<WorkloadNetworkDhcp> updateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<ServiceResponse<WorkloadNetworkDhcp>> updateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    WorkloadNetworkDhcp beginUpdateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkDhcp> beginUpdateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<WorkloadNetworkDhcp> beginUpdateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    Observable<ServiceResponse<WorkloadNetworkDhcp>> beginUpdateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteDhcp(String resourceGroupName, String privateCloudName, String dhcpId);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void beginDeleteDhcp(String resourceGroupName, String privateCloudName, String dhcpId);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> beginDeleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> beginDeleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId);

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> beginDeleteDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkGateway&gt; object if successful.
     */
    PagedList<WorkloadNetworkGateway> listGateways(final String resourceGroupName, final String privateCloudName);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkGateway>> listGatewaysAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkGateway> serviceCallback);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    Observable<Page<WorkloadNetworkGateway>> listGatewaysAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> listGatewaysWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkGateway object if successful.
     */
    WorkloadNetworkGateway getGateway(String resourceGroupName, String privateCloudName, String gatewayId);

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkGateway> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId, final ServiceCallback<WorkloadNetworkGateway> serviceCallback);

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkGateway object
     */
    Observable<WorkloadNetworkGateway> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId);

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkGateway object
     */
    Observable<ServiceResponse<WorkloadNetworkGateway>> getGatewayWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String gatewayId);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkPortMirroring&gt; object if successful.
     */
    PagedList<WorkloadNetworkPortMirroring> listPortMirroring(final String resourceGroupName, final String privateCloudName);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkPortMirroring>> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    Observable<Page<WorkloadNetworkPortMirroring>> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> listPortMirroringWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    WorkloadNetworkPortMirroring getPortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId);

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkPortMirroring> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<WorkloadNetworkPortMirroring> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId);

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<ServiceResponse<WorkloadNetworkPortMirroring>> getPortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    WorkloadNetworkPortMirroring createPortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkPortMirroring> createPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<WorkloadNetworkPortMirroring> createPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<ServiceResponse<WorkloadNetworkPortMirroring>> createPortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    WorkloadNetworkPortMirroring beginCreatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkPortMirroring> beginCreatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<WorkloadNetworkPortMirroring> beginCreatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<ServiceResponse<WorkloadNetworkPortMirroring>> beginCreatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    WorkloadNetworkPortMirroring updatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkPortMirroring> updatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<WorkloadNetworkPortMirroring> updatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<ServiceResponse<WorkloadNetworkPortMirroring>> updatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    WorkloadNetworkPortMirroring beginUpdatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkPortMirroring> beginUpdatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<WorkloadNetworkPortMirroring> beginUpdatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    Observable<ServiceResponse<WorkloadNetworkPortMirroring>> beginUpdatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deletePortMirroring(String resourceGroupName, String portMirroringId, String privateCloudName);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deletePortMirroringWithServiceResponseAsync(String resourceGroupName, String portMirroringId, String privateCloudName);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void beginDeletePortMirroring(String resourceGroupName, String portMirroringId, String privateCloudName);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> beginDeletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> beginDeletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName);

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> beginDeletePortMirroringWithServiceResponseAsync(String resourceGroupName, String portMirroringId, String privateCloudName);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVMGroup&gt; object if successful.
     */
    PagedList<WorkloadNetworkVMGroup> listVMGroups(final String resourceGroupName, final String privateCloudName);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkVMGroup>> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    Observable<Page<WorkloadNetworkVMGroup>> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> listVMGroupsWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    WorkloadNetworkVMGroup getVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId);

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkVMGroup> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<WorkloadNetworkVMGroup> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId);

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<ServiceResponse<WorkloadNetworkVMGroup>> getVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    WorkloadNetworkVMGroup createVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkVMGroup> createVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<WorkloadNetworkVMGroup> createVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<ServiceResponse<WorkloadNetworkVMGroup>> createVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    WorkloadNetworkVMGroup beginCreateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkVMGroup> beginCreateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<WorkloadNetworkVMGroup> beginCreateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<ServiceResponse<WorkloadNetworkVMGroup>> beginCreateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    WorkloadNetworkVMGroup updateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkVMGroup> updateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<WorkloadNetworkVMGroup> updateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<ServiceResponse<WorkloadNetworkVMGroup>> updateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    WorkloadNetworkVMGroup beginUpdateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkVMGroup> beginUpdateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<WorkloadNetworkVMGroup> beginUpdateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    Observable<ServiceResponse<WorkloadNetworkVMGroup>> beginUpdateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void deleteVMGroup(String resourceGroupName, String vmGroupId, String privateCloudName);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteVMGroupWithServiceResponseAsync(String resourceGroupName, String vmGroupId, String privateCloudName);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void beginDeleteVMGroup(String resourceGroupName, String vmGroupId, String privateCloudName);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> beginDeleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> beginDeleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName);

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> beginDeleteVMGroupWithServiceResponseAsync(String resourceGroupName, String vmGroupId, String privateCloudName);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object if successful.
     */
    PagedList<WorkloadNetworkVirtualMachine> listVirtualMachines(final String resourceGroupName, final String privateCloudName);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkVirtualMachine>> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkVirtualMachine> serviceCallback);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    Observable<Page<WorkloadNetworkVirtualMachine>> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> listVirtualMachinesWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName);

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVirtualMachine object if successful.
     */
    WorkloadNetworkVirtualMachine getVirtualMachine(String resourceGroupName, String privateCloudName, String virtualMachineId);

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<WorkloadNetworkVirtualMachine> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId, final ServiceCallback<WorkloadNetworkVirtualMachine> serviceCallback);

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVirtualMachine object
     */
    Observable<WorkloadNetworkVirtualMachine> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId);

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVirtualMachine object
     */
    Observable<ServiceResponse<WorkloadNetworkVirtualMachine>> getVirtualMachineWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String virtualMachineId);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkSegment&gt; object if successful.
     */
    PagedList<WorkloadNetworkSegment> listSegmentsNext(final String nextPageLink);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkSegment>> listSegmentsNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkSegment>> serviceFuture, final ListOperationCallback<WorkloadNetworkSegment> serviceCallback);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    Observable<Page<WorkloadNetworkSegment>> listSegmentsNextAsync(final String nextPageLink);

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> listSegmentsNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDhcp&gt; object if successful.
     */
    PagedList<WorkloadNetworkDhcp> listDhcpNext(final String nextPageLink);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkDhcp>> listDhcpNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkDhcp>> serviceFuture, final ListOperationCallback<WorkloadNetworkDhcp> serviceCallback);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    Observable<Page<WorkloadNetworkDhcp>> listDhcpNextAsync(final String nextPageLink);

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> listDhcpNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkGateway&gt; object if successful.
     */
    PagedList<WorkloadNetworkGateway> listGatewaysNext(final String nextPageLink);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkGateway>> listGatewaysNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkGateway>> serviceFuture, final ListOperationCallback<WorkloadNetworkGateway> serviceCallback);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    Observable<Page<WorkloadNetworkGateway>> listGatewaysNextAsync(final String nextPageLink);

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> listGatewaysNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkPortMirroring&gt; object if successful.
     */
    PagedList<WorkloadNetworkPortMirroring> listPortMirroringNext(final String nextPageLink);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkPortMirroring>> listPortMirroringNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkPortMirroring>> serviceFuture, final ListOperationCallback<WorkloadNetworkPortMirroring> serviceCallback);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    Observable<Page<WorkloadNetworkPortMirroring>> listPortMirroringNextAsync(final String nextPageLink);

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> listPortMirroringNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVMGroup&gt; object if successful.
     */
    PagedList<WorkloadNetworkVMGroup> listVMGroupsNext(final String nextPageLink);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkVMGroup>> listVMGroupsNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkVMGroup>> serviceFuture, final ListOperationCallback<WorkloadNetworkVMGroup> serviceCallback);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    Observable<Page<WorkloadNetworkVMGroup>> listVMGroupsNextAsync(final String nextPageLink);

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> listVMGroupsNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object if successful.
     */
    PagedList<WorkloadNetworkVirtualMachine> listVirtualMachinesNext(final String nextPageLink);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<WorkloadNetworkVirtualMachine>> listVirtualMachinesNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkVirtualMachine>> serviceFuture, final ListOperationCallback<WorkloadNetworkVirtualMachine> serviceCallback);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    Observable<Page<WorkloadNetworkVirtualMachine>> listVirtualMachinesNextAsync(final String nextPageLink);

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> listVirtualMachinesNextWithServiceResponseAsync(final String nextPageLink);

}
