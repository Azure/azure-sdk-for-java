/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview;

import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.avs.v20200717preview.models.AdminCredentials;
import com.microsoft.azure.management.avs.v20200717preview.models.PrivateCloud;
import com.microsoft.azure.management.avs.v20200717preview.models.PrivateCloudUpdate;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import java.util.List;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PrivateClouds.
 */
public interface PrivateClouds {
    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloud&gt; object if successful.
     */
    PagedList<PrivateCloud> list(final String resourceGroupName);

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PrivateCloud>> listAsync(final String resourceGroupName, final ListOperationCallback<PrivateCloud> serviceCallback);

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<Page<PrivateCloud>> listAsync(final String resourceGroupName);

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<ServiceResponse<Page<PrivateCloud>>> listWithServiceResponseAsync(final String resourceGroupName);

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloud&gt; object if successful.
     */
    PagedList<PrivateCloud> listInSubscription();

    /**
     * List private clouds in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PrivateCloud>> listInSubscriptionAsync(final ListOperationCallback<PrivateCloud> serviceCallback);

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<Page<PrivateCloud>> listInSubscriptionAsync();

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<ServiceResponse<Page<PrivateCloud>>> listInSubscriptionWithServiceResponseAsync();

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloud object if successful.
     */
    PrivateCloud get(String resourceGroupName, String privateCloudName);

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PrivateCloud> getAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<PrivateCloud> serviceCallback);

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<PrivateCloud> getAsync(String resourceGroupName, String privateCloudName);

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<ServiceResponse<PrivateCloud>> getWithServiceResponseAsync(String resourceGroupName, String privateCloudName);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloud object if successful.
     */
    PrivateCloud createOrUpdate(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PrivateCloud> createOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud, final ServiceCallback<PrivateCloud> serviceCallback);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<PrivateCloud> createOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<ServiceResponse<PrivateCloud>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloud object if successful.
     */
    PrivateCloud beginCreateOrUpdate(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PrivateCloud> beginCreateOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud, final ServiceCallback<PrivateCloud> serviceCallback);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<PrivateCloud> beginCreateOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud);

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<ServiceResponse<PrivateCloud>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloud privateCloud);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloud object if successful.
     */
    PrivateCloud update(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PrivateCloud> updateAsync(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate, final ServiceCallback<PrivateCloud> serviceCallback);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<PrivateCloud> updateAsync(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<ServiceResponse<PrivateCloud>> updateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloud object if successful.
     */
    PrivateCloud beginUpdate(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PrivateCloud> beginUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate, final ServiceCallback<PrivateCloud> serviceCallback);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<PrivateCloud> beginUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate);

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param privateCloudUpdate The private cloud properties to be updated
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloud object
     */
    Observable<ServiceResponse<PrivateCloud>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloudUpdate privateCloudUpdate);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void delete(String resourceGroupName, String privateCloudName);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> deleteAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> deleteAsync(String resourceGroupName, String privateCloudName);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String privateCloudName);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void beginDelete(String resourceGroupName, String privateCloudName);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<Void> serviceCallback);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> beginDeleteAsync(String resourceGroupName, String privateCloudName);

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String privateCloudName);

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AdminCredentials object if successful.
     */
    AdminCredentials listAdminCredentials(String resourceGroupName, String privateCloudName);

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<AdminCredentials> listAdminCredentialsAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<AdminCredentials> serviceCallback);

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AdminCredentials object
     */
    Observable<AdminCredentials> listAdminCredentialsAsync(String resourceGroupName, String privateCloudName);

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AdminCredentials object
     */
    Observable<ServiceResponse<AdminCredentials>> listAdminCredentialsWithServiceResponseAsync(String resourceGroupName, String privateCloudName);

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloud&gt; object if successful.
     */
    PagedList<PrivateCloud> listNext(final String nextPageLink);

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PrivateCloud>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PrivateCloud>> serviceFuture, final ListOperationCallback<PrivateCloud> serviceCallback);

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<Page<PrivateCloud>> listNextAsync(final String nextPageLink);

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<ServiceResponse<Page<PrivateCloud>>> listNextWithServiceResponseAsync(final String nextPageLink);

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloud&gt; object if successful.
     */
    PagedList<PrivateCloud> listInSubscriptionNext(final String nextPageLink);

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<List<PrivateCloud>> listInSubscriptionNextAsync(final String nextPageLink, final ServiceFuture<List<PrivateCloud>> serviceFuture, final ListOperationCallback<PrivateCloud> serviceCallback);

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<Page<PrivateCloud>> listInSubscriptionNextAsync(final String nextPageLink);

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloud&gt; object
     */
    Observable<ServiceResponse<Page<PrivateCloud>>> listInSubscriptionNextWithServiceResponseAsync(final String nextPageLink);

}
