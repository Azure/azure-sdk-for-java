/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2020_07_17_preview.implementation;

import retrofit2.Retrofit;
import com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.CloudException;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.avs.v20200717preview.models.PageImpl;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkDhcp;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkGateway;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkPortMirroring;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkSegment;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkVirtualMachine;
import com.microsoft.azure.management.avs.v20200717preview.models.WorkloadNetworkVMGroup;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in WorkloadNetworks.
 */
public class WorkloadNetworksImpl implements WorkloadNetworks {
    /** The Retrofit service to perform REST calls. */
    private WorkloadNetworksService service;
    /** The service client containing this operation class. */
    private AvsClientImpl client;

    /**
     * Initializes an instance of WorkloadNetworksImpl.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public WorkloadNetworksImpl(Retrofit retrofit, AvsClientImpl client) {
        this.service = retrofit.create(WorkloadNetworksService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for WorkloadNetworks to be
     * used by Retrofit to perform actually REST calls.
     */
    interface WorkloadNetworksService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listSegments" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments")
        Observable<Response<ResponseBody>> listSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks getSegment" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> getSegment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks createSegments" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> createSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegment workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginCreateSegments" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> beginCreateSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegment workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks updateSegments" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> updateSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegment workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginUpdateSegments" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}")
        Observable<Response<ResponseBody>> beginUpdateSegments(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Body WorkloadNetworkSegment workloadNetworkSegment, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks deleteSegment" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteSegment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginDeleteSegment" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/segments/{segmentId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteSegment(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("segmentId") String segmentId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listDhcp" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations")
        Observable<Response<ResponseBody>> listDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks getDhcp" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> getDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("dhcpId") String dhcpId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks createDhcp" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> createDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcp workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginCreateDhcp" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> beginCreateDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcp workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks updateDhcp" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> updateDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcp workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginUpdateDhcp" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}")
        Observable<Response<ResponseBody>> beginUpdateDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Body WorkloadNetworkDhcp workloadNetworkDhcp, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks deleteDhcp" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginDeleteDhcp" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/dhcpConfigurations/{dhcpId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteDhcp(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("dhcpId") String dhcpId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listGateways" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/gateways")
        Observable<Response<ResponseBody>> listGateways(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks getGateway" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/gateways/{gatewayId}")
        Observable<Response<ResponseBody>> getGateway(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("gatewayId") String gatewayId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listPortMirroring" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles")
        Observable<Response<ResponseBody>> listPortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks getPortMirroring" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> getPortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks createPortMirroring" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> createPortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroring workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginCreatePortMirroring" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> beginCreatePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroring workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks updatePortMirroring" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> updatePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroring workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginUpdatePortMirroring" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}")
        Observable<Response<ResponseBody>> beginUpdatePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("portMirroringId") String portMirroringId, @Query("api-version") String apiVersion, @Body WorkloadNetworkPortMirroring workloadNetworkPortMirroring, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks deletePortMirroring" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deletePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("portMirroringId") String portMirroringId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginDeletePortMirroring" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/portMirroringProfiles/{portMirroringId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeletePortMirroring(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("portMirroringId") String portMirroringId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listVMGroups" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups")
        Observable<Response<ResponseBody>> listVMGroups(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks getVMGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> getVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks createVMGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> createVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroup workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginCreateVMGroup" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> beginCreateVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroup workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks updateVMGroup" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> updateVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroup workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginUpdateVMGroup" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}")
        Observable<Response<ResponseBody>> beginUpdateVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("vmGroupId") String vmGroupId, @Query("api-version") String apiVersion, @Body WorkloadNetworkVMGroup workloadNetworkVMGroup, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks deleteVMGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> deleteVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("vmGroupId") String vmGroupId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks beginDeleteVMGroup" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/vmGroups/{vmGroupId}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDeleteVMGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("vmGroupId") String vmGroupId, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listVirtualMachines" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/virtualMachines")
        Observable<Response<ResponseBody>> listVirtualMachines(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks getVirtualMachine" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/workloadNetworks/default/virtualMachines/{virtualMachineId}")
        Observable<Response<ResponseBody>> getVirtualMachine(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Path("virtualMachineId") String virtualMachineId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listSegmentsNext" })
        @GET
        Observable<Response<ResponseBody>> listSegmentsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listDhcpNext" })
        @GET
        Observable<Response<ResponseBody>> listDhcpNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listGatewaysNext" })
        @GET
        Observable<Response<ResponseBody>> listGatewaysNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listPortMirroringNext" })
        @GET
        Observable<Response<ResponseBody>> listPortMirroringNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listVMGroupsNext" })
        @GET
        Observable<Response<ResponseBody>> listVMGroupsNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v20200717preview.WorkloadNetworks listVirtualMachinesNext" })
        @GET
        Observable<Response<ResponseBody>> listVirtualMachinesNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkSegment&gt; object if successful.
     */
    public PagedList<WorkloadNetworkSegment> listSegments(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkSegment>> response = listSegmentsSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkSegment>(response.body()) {
            @Override
            public Page<WorkloadNetworkSegment> nextPage(String nextPageLink) {
                return listSegmentsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkSegment>> listSegmentsAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkSegment> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSegmentsSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkSegment>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> call(String nextPageLink) {
                    return listSegmentsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    public Observable<Page<WorkloadNetworkSegment>> listSegmentsAsync(final String resourceGroupName, final String privateCloudName) {
        return listSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkSegment>>, Page<WorkloadNetworkSegment>>() {
                @Override
                public Page<WorkloadNetworkSegment> call(ServiceResponse<Page<WorkloadNetworkSegment>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> listSegmentsWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listSegmentsSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkSegment>>, Observable<ServiceResponse<Page<WorkloadNetworkSegment>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> call(ServiceResponse<Page<WorkloadNetworkSegment>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listSegmentsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkSegment>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkSegment>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkSegment&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> listSegmentsSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkSegment>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkSegment>> result = listSegmentsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkSegment>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkSegment>> listSegmentsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkSegment>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkSegment>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    public WorkloadNetworkSegment getSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        return getSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).toBlocking().single().body();
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegment> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<WorkloadNetworkSegment> serviceCallback) {
        return ServiceFuture.fromResponse(getSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId), serviceCallback);
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    public Observable<WorkloadNetworkSegment> getSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        return getSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).map(new Func1<ServiceResponse<WorkloadNetworkSegment>, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(ServiceResponse<WorkloadNetworkSegment> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    public Observable<ServiceResponse<WorkloadNetworkSegment>> getSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getSegment(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkSegment>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkSegment>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkSegment> clientResponse = getSegmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkSegment> getSegmentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkSegment, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkSegment>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    public WorkloadNetworkSegment createSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return createSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().last().body();
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegment> createSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback) {
        return ServiceFuture.fromResponse(createSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkSegment> createSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return createSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegment>, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(ServiceResponse<WorkloadNetworkSegment> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkSegment>> createSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        Observable<Response<ResponseBody>> observable = service.createSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkSegment>() { }.getType());
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    public WorkloadNetworkSegment beginCreateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return beginCreateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().single().body();
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegment> beginCreateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    public Observable<WorkloadNetworkSegment> beginCreateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return beginCreateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegment>, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(ServiceResponse<WorkloadNetworkSegment> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    public Observable<ServiceResponse<WorkloadNetworkSegment>> beginCreateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        return service.beginCreateSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkSegment>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkSegment>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkSegment> clientResponse = beginCreateSegmentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkSegment> beginCreateSegmentsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkSegment, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkSegment>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkSegment>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    public WorkloadNetworkSegment updateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return updateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().last().body();
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegment> updateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback) {
        return ServiceFuture.fromResponse(updateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkSegment> updateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return updateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegment>, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(ServiceResponse<WorkloadNetworkSegment> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkSegment>> updateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        Observable<Response<ResponseBody>> observable = service.updateSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkSegment>() { }.getType());
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkSegment object if successful.
     */
    public WorkloadNetworkSegment beginUpdateSegments(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return beginUpdateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).toBlocking().single().body();
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkSegment> beginUpdateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment, final ServiceCallback<WorkloadNetworkSegment> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment), serviceCallback);
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    public Observable<WorkloadNetworkSegment> beginUpdateSegmentsAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        return beginUpdateSegmentsWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId, workloadNetworkSegment).map(new Func1<ServiceResponse<WorkloadNetworkSegment>, WorkloadNetworkSegment>() {
            @Override
            public WorkloadNetworkSegment call(ServiceResponse<WorkloadNetworkSegment> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param workloadNetworkSegment NSX Segment
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkSegment object
     */
    public Observable<ServiceResponse<WorkloadNetworkSegment>> beginUpdateSegmentsWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId, WorkloadNetworkSegment workloadNetworkSegment) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkSegment == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkSegment is required and cannot be null.");
        }
        Validator.validate(workloadNetworkSegment);
        return service.beginUpdateSegments(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), workloadNetworkSegment, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkSegment>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkSegment>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkSegment> clientResponse = beginUpdateSegmentsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkSegment> beginUpdateSegmentsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkSegment, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkSegment>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        deleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).toBlocking().last().body();
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId), serviceCallback);
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        return deleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteSegment(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteSegment(String resourceGroupName, String privateCloudName, String segmentId) {
        beginDeleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).toBlocking().single().body();
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId), serviceCallback);
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteSegmentAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        return beginDeleteSegmentWithServiceResponseAsync(resourceGroupName, privateCloudName, segmentId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a segment by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param segmentId NSX Segment identifier. Generally the same as the Segment's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteSegmentWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String segmentId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (segmentId == null) {
            throw new IllegalArgumentException("Parameter segmentId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteSegment(this.client.subscriptionId(), resourceGroupName, privateCloudName, segmentId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteSegmentDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteSegmentDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDhcp&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDhcp> listDhcp(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkDhcp>> response = listDhcpSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkDhcp>(response.body()) {
            @Override
            public Page<WorkloadNetworkDhcp> nextPage(String nextPageLink) {
                return listDhcpNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDhcp>> listDhcpAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkDhcp> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDhcpSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> call(String nextPageLink) {
                    return listDhcpNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    public Observable<Page<WorkloadNetworkDhcp>> listDhcpAsync(final String resourceGroupName, final String privateCloudName) {
        return listDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDhcp>>, Page<WorkloadNetworkDhcp>>() {
                @Override
                public Page<WorkloadNetworkDhcp> call(ServiceResponse<Page<WorkloadNetworkDhcp>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> listDhcpWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listDhcpSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDhcp>>, Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> call(ServiceResponse<Page<WorkloadNetworkDhcp>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDhcpNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDhcp>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkDhcp>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDhcp&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> listDhcpSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDhcp>> result = listDhcpDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDhcp>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDhcp>> listDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDhcp>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDhcp>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    public WorkloadNetworkDhcp getDhcp(String resourceGroupName, String dhcpId, String privateCloudName) {
        return getDhcpWithServiceResponseAsync(resourceGroupName, dhcpId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcp> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback) {
        return ServiceFuture.fromResponse(getDhcpWithServiceResponseAsync(resourceGroupName, dhcpId, privateCloudName), serviceCallback);
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    public Observable<WorkloadNetworkDhcp> getDhcpAsync(String resourceGroupName, String dhcpId, String privateCloudName) {
        return getDhcpWithServiceResponseAsync(resourceGroupName, dhcpId, privateCloudName).map(new Func1<ServiceResponse<WorkloadNetworkDhcp>, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(ServiceResponse<WorkloadNetworkDhcp> response) {
                return response.body();
            }
        });
    }

    /**
     * Get dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcp>> getDhcpWithServiceResponseAsync(String resourceGroupName, String dhcpId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getDhcp(this.client.subscriptionId(), resourceGroupName, dhcpId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDhcp>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDhcp>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDhcp> clientResponse = getDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDhcp> getDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDhcp, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDhcp>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    public WorkloadNetworkDhcp createDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return createDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().last().body();
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcp> createDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback) {
        return ServiceFuture.fromResponse(createDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDhcp> createDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return createDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcp>, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(ServiceResponse<WorkloadNetworkDhcp> response) {
                return response.body();
            }
        });
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcp>> createDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        Observable<Response<ResponseBody>> observable = service.createDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDhcp>() { }.getType());
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    public WorkloadNetworkDhcp beginCreateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return beginCreateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().single().body();
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcp> beginCreateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    public Observable<WorkloadNetworkDhcp> beginCreateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return beginCreateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcp>, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(ServiceResponse<WorkloadNetworkDhcp> response) {
                return response.body();
            }
        });
    }

    /**
     * Create dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcp>> beginCreateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        return service.beginCreateDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDhcp>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDhcp>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDhcp> clientResponse = beginCreateDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDhcp> beginCreateDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDhcp, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDhcp>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkDhcp>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    public WorkloadNetworkDhcp updateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return updateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().last().body();
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcp> updateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback) {
        return ServiceFuture.fromResponse(updateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkDhcp> updateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return updateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcp>, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(ServiceResponse<WorkloadNetworkDhcp> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcp>> updateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        Observable<Response<ResponseBody>> observable = service.updateDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkDhcp>() { }.getType());
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkDhcp object if successful.
     */
    public WorkloadNetworkDhcp beginUpdateDhcp(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return beginUpdateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).toBlocking().single().body();
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkDhcp> beginUpdateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp, final ServiceCallback<WorkloadNetworkDhcp> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp), serviceCallback);
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    public Observable<WorkloadNetworkDhcp> beginUpdateDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        return beginUpdateDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId, workloadNetworkDhcp).map(new Func1<ServiceResponse<WorkloadNetworkDhcp>, WorkloadNetworkDhcp>() {
            @Override
            public WorkloadNetworkDhcp call(ServiceResponse<WorkloadNetworkDhcp> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param workloadNetworkDhcp NSX DHCP
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkDhcp object
     */
    public Observable<ServiceResponse<WorkloadNetworkDhcp>> beginUpdateDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId, WorkloadNetworkDhcp workloadNetworkDhcp) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkDhcp == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkDhcp is required and cannot be null.");
        }
        Validator.validate(workloadNetworkDhcp);
        return service.beginUpdateDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), workloadNetworkDhcp, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkDhcp>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkDhcp>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkDhcp> clientResponse = beginUpdateDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkDhcp> beginUpdateDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkDhcp, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkDhcp>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteDhcp(String resourceGroupName, String privateCloudName, String dhcpId) {
        deleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).toBlocking().last().body();
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId), serviceCallback);
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        return deleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteDhcp(String resourceGroupName, String privateCloudName, String dhcpId) {
        beginDeleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).toBlocking().single().body();
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId), serviceCallback);
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteDhcpAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        return beginDeleteDhcpWithServiceResponseAsync(resourceGroupName, privateCloudName, dhcpId).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete dhcp by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param dhcpId NSX DHCP identifier. Generally the same as the DHCP display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteDhcpWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String dhcpId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (dhcpId == null) {
            throw new IllegalArgumentException("Parameter dhcpId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteDhcp(this.client.subscriptionId(), resourceGroupName, privateCloudName, dhcpId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDhcpDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDhcpDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkGateway&gt; object if successful.
     */
    public PagedList<WorkloadNetworkGateway> listGateways(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkGateway>> response = listGatewaysSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkGateway>(response.body()) {
            @Override
            public Page<WorkloadNetworkGateway> nextPage(String nextPageLink) {
                return listGatewaysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkGateway>> listGatewaysAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkGateway> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listGatewaysSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkGateway>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> call(String nextPageLink) {
                    return listGatewaysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    public Observable<Page<WorkloadNetworkGateway>> listGatewaysAsync(final String resourceGroupName, final String privateCloudName) {
        return listGatewaysWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkGateway>>, Page<WorkloadNetworkGateway>>() {
                @Override
                public Page<WorkloadNetworkGateway> call(ServiceResponse<Page<WorkloadNetworkGateway>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> listGatewaysWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listGatewaysSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkGateway>>, Observable<ServiceResponse<Page<WorkloadNetworkGateway>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> call(ServiceResponse<Page<WorkloadNetworkGateway>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listGatewaysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkGateway>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkGateway>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkGateway&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> listGatewaysSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listGateways(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkGateway>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkGateway>> result = listGatewaysDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkGateway>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkGateway>> listGatewaysDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkGateway>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkGateway>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkGateway object if successful.
     */
    public WorkloadNetworkGateway getGateway(String resourceGroupName, String privateCloudName, String gatewayId) {
        return getGatewayWithServiceResponseAsync(resourceGroupName, privateCloudName, gatewayId).toBlocking().single().body();
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkGateway> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId, final ServiceCallback<WorkloadNetworkGateway> serviceCallback) {
        return ServiceFuture.fromResponse(getGatewayWithServiceResponseAsync(resourceGroupName, privateCloudName, gatewayId), serviceCallback);
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkGateway object
     */
    public Observable<WorkloadNetworkGateway> getGatewayAsync(String resourceGroupName, String privateCloudName, String gatewayId) {
        return getGatewayWithServiceResponseAsync(resourceGroupName, privateCloudName, gatewayId).map(new Func1<ServiceResponse<WorkloadNetworkGateway>, WorkloadNetworkGateway>() {
            @Override
            public WorkloadNetworkGateway call(ServiceResponse<WorkloadNetworkGateway> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a gateway by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param gatewayId NSX Gateway identifier. Generally the same as the Gateway's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkGateway object
     */
    public Observable<ServiceResponse<WorkloadNetworkGateway>> getGatewayWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String gatewayId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (gatewayId == null) {
            throw new IllegalArgumentException("Parameter gatewayId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getGateway(this.client.subscriptionId(), resourceGroupName, privateCloudName, gatewayId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkGateway>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkGateway>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkGateway> clientResponse = getGatewayDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkGateway> getGatewayDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkGateway, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkGateway>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkPortMirroring&gt; object if successful.
     */
    public PagedList<WorkloadNetworkPortMirroring> listPortMirroring(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkPortMirroring>> response = listPortMirroringSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkPortMirroring>(response.body()) {
            @Override
            public Page<WorkloadNetworkPortMirroring> nextPage(String nextPageLink) {
                return listPortMirroringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkPortMirroring>> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listPortMirroringSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> call(String nextPageLink) {
                    return listPortMirroringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    public Observable<Page<WorkloadNetworkPortMirroring>> listPortMirroringAsync(final String resourceGroupName, final String privateCloudName) {
        return listPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroring>>, Page<WorkloadNetworkPortMirroring>>() {
                @Override
                public Page<WorkloadNetworkPortMirroring> call(ServiceResponse<Page<WorkloadNetworkPortMirroring>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> listPortMirroringWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listPortMirroringSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroring>>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> call(ServiceResponse<Page<WorkloadNetworkPortMirroring>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listPortMirroringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkPortMirroring&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> listPortMirroringSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listPortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> result = listPortMirroringDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkPortMirroring>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> listPortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkPortMirroring>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkPortMirroring>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    public WorkloadNetworkPortMirroring getPortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId) {
        return getPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId).toBlocking().single().body();
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroring> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return ServiceFuture.fromResponse(getPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId), serviceCallback);
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    public Observable<WorkloadNetworkPortMirroring> getPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId) {
        return getPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroring>, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(ServiceResponse<WorkloadNetworkPortMirroring> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> getPortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getPortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkPortMirroring>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkPortMirroring> clientResponse = getPortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkPortMirroring> getPortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkPortMirroring, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkPortMirroring>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    public WorkloadNetworkPortMirroring createPortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return createPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().last().body();
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroring> createPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return ServiceFuture.fromResponse(createPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkPortMirroring> createPortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return createPortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroring>, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(ServiceResponse<WorkloadNetworkPortMirroring> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> createPortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        Observable<Response<ResponseBody>> observable = service.createPortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkPortMirroring>() { }.getType());
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    public WorkloadNetworkPortMirroring beginCreatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return beginCreatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().single().body();
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroring> beginCreatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    public Observable<WorkloadNetworkPortMirroring> beginCreatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return beginCreatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroring>, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(ServiceResponse<WorkloadNetworkPortMirroring> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> beginCreatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        return service.beginCreatePortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkPortMirroring>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkPortMirroring> clientResponse = beginCreatePortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkPortMirroring> beginCreatePortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkPortMirroring, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkPortMirroring>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkPortMirroring>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    public WorkloadNetworkPortMirroring updatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return updatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().last().body();
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroring> updatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return ServiceFuture.fromResponse(updatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkPortMirroring> updatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return updatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroring>, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(ServiceResponse<WorkloadNetworkPortMirroring> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> updatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        Observable<Response<ResponseBody>> observable = service.updatePortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkPortMirroring>() { }.getType());
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkPortMirroring object if successful.
     */
    public WorkloadNetworkPortMirroring beginUpdatePortMirroring(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return beginUpdatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).toBlocking().single().body();
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkPortMirroring> beginUpdatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring, final ServiceCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring), serviceCallback);
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    public Observable<WorkloadNetworkPortMirroring> beginUpdatePortMirroringAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        return beginUpdatePortMirroringWithServiceResponseAsync(resourceGroupName, privateCloudName, portMirroringId, workloadNetworkPortMirroring).map(new Func1<ServiceResponse<WorkloadNetworkPortMirroring>, WorkloadNetworkPortMirroring>() {
            @Override
            public WorkloadNetworkPortMirroring call(ServiceResponse<WorkloadNetworkPortMirroring> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param workloadNetworkPortMirroring NSX port mirroring
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkPortMirroring object
     */
    public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> beginUpdatePortMirroringWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String portMirroringId, WorkloadNetworkPortMirroring workloadNetworkPortMirroring) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkPortMirroring == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkPortMirroring is required and cannot be null.");
        }
        Validator.validate(workloadNetworkPortMirroring);
        return service.beginUpdatePortMirroring(this.client.subscriptionId(), resourceGroupName, privateCloudName, portMirroringId, this.client.apiVersion(), workloadNetworkPortMirroring, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkPortMirroring>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkPortMirroring>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkPortMirroring> clientResponse = beginUpdatePortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkPortMirroring> beginUpdatePortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkPortMirroring, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkPortMirroring>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deletePortMirroring(String resourceGroupName, String portMirroringId, String privateCloudName) {
        deletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        return deletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deletePortMirroringWithServiceResponseAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deletePortMirroring(this.client.subscriptionId(), resourceGroupName, portMirroringId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeletePortMirroring(String resourceGroupName, String portMirroringId, String privateCloudName) {
        beginDeletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeletePortMirroringAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        return beginDeletePortMirroringWithServiceResponseAsync(resourceGroupName, portMirroringId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a port mirroring profile by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param portMirroringId NSX Port Mirroring identifier. Generally the same as the Port Mirroring display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeletePortMirroringWithServiceResponseAsync(String resourceGroupName, String portMirroringId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (portMirroringId == null) {
            throw new IllegalArgumentException("Parameter portMirroringId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeletePortMirroring(this.client.subscriptionId(), resourceGroupName, portMirroringId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeletePortMirroringDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeletePortMirroringDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVMGroup&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVMGroup> listVMGroups(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkVMGroup>> response = listVMGroupsSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkVMGroup>(response.body()) {
            @Override
            public Page<WorkloadNetworkVMGroup> nextPage(String nextPageLink) {
                return listVMGroupsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVMGroup>> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVMGroupsSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> call(String nextPageLink) {
                    return listVMGroupsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    public Observable<Page<WorkloadNetworkVMGroup>> listVMGroupsAsync(final String resourceGroupName, final String privateCloudName) {
        return listVMGroupsWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroup>>, Page<WorkloadNetworkVMGroup>>() {
                @Override
                public Page<WorkloadNetworkVMGroup> call(ServiceResponse<Page<WorkloadNetworkVMGroup>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> listVMGroupsWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listVMGroupsSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroup>>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> call(ServiceResponse<Page<WorkloadNetworkVMGroup>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVMGroupsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVMGroup&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> listVMGroupsSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listVMGroups(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> result = listVMGroupsDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVMGroup>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> listVMGroupsDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVMGroup>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVMGroup>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    public WorkloadNetworkVMGroup getVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId) {
        return getVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId).toBlocking().single().body();
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroup> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return ServiceFuture.fromResponse(getVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId), serviceCallback);
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    public Observable<WorkloadNetworkVMGroup> getVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId) {
        return getVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId).map(new Func1<ServiceResponse<WorkloadNetworkVMGroup>, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(ServiceResponse<WorkloadNetworkVMGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroup>> getVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVMGroup>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVMGroup>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVMGroup> clientResponse = getVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVMGroup> getVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVMGroup, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVMGroup>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    public WorkloadNetworkVMGroup createVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return createVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().last().body();
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroup> createVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return ServiceFuture.fromResponse(createVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkVMGroup> createVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return createVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroup>, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(ServiceResponse<WorkloadNetworkVMGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroup>> createVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        Observable<Response<ResponseBody>> observable = service.createVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkVMGroup>() { }.getType());
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    public WorkloadNetworkVMGroup beginCreateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return beginCreateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().single().body();
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroup> beginCreateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    public Observable<WorkloadNetworkVMGroup> beginCreateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return beginCreateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroup>, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(ServiceResponse<WorkloadNetworkVMGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Create a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroup>> beginCreateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        return service.beginCreateVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVMGroup>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVMGroup>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVMGroup> clientResponse = beginCreateVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVMGroup> beginCreateVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVMGroup, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVMGroup>() { }.getType())
                .register(201, new TypeToken<WorkloadNetworkVMGroup>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    public WorkloadNetworkVMGroup updateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return updateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().last().body();
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroup> updateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return ServiceFuture.fromResponse(updateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<WorkloadNetworkVMGroup> updateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return updateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroup>, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(ServiceResponse<WorkloadNetworkVMGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroup>> updateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        Observable<Response<ResponseBody>> observable = service.updateVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<WorkloadNetworkVMGroup>() { }.getType());
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVMGroup object if successful.
     */
    public WorkloadNetworkVMGroup beginUpdateVMGroup(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return beginUpdateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).toBlocking().single().body();
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVMGroup> beginUpdateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup, final ServiceCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup), serviceCallback);
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    public Observable<WorkloadNetworkVMGroup> beginUpdateVMGroupAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        return beginUpdateVMGroupWithServiceResponseAsync(resourceGroupName, privateCloudName, vmGroupId, workloadNetworkVMGroup).map(new Func1<ServiceResponse<WorkloadNetworkVMGroup>, WorkloadNetworkVMGroup>() {
            @Override
            public WorkloadNetworkVMGroup call(ServiceResponse<WorkloadNetworkVMGroup> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param workloadNetworkVMGroup NSX VM Group
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVMGroup object
     */
    public Observable<ServiceResponse<WorkloadNetworkVMGroup>> beginUpdateVMGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String vmGroupId, WorkloadNetworkVMGroup workloadNetworkVMGroup) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        if (workloadNetworkVMGroup == null) {
            throw new IllegalArgumentException("Parameter workloadNetworkVMGroup is required and cannot be null.");
        }
        Validator.validate(workloadNetworkVMGroup);
        return service.beginUpdateVMGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, vmGroupId, this.client.apiVersion(), workloadNetworkVMGroup, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVMGroup>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVMGroup>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVMGroup> clientResponse = beginUpdateVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVMGroup> beginUpdateVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVMGroup, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVMGroup>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void deleteVMGroup(String resourceGroupName, String vmGroupId, String privateCloudName) {
        deleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        return deleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteVMGroupWithServiceResponseAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.deleteVMGroup(this.client.subscriptionId(), resourceGroupName, vmGroupId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDeleteVMGroup(String resourceGroupName, String vmGroupId, String privateCloudName) {
        beginDeleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName), serviceCallback);
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteVMGroupAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        return beginDeleteVMGroupWithServiceResponseAsync(resourceGroupName, vmGroupId, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a vm group by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param vmGroupId NSX VM Group identifier. Generally the same as the VM Group's display name
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteVMGroupWithServiceResponseAsync(String resourceGroupName, String vmGroupId, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (vmGroupId == null) {
            throw new IllegalArgumentException("Parameter vmGroupId is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDeleteVMGroup(this.client.subscriptionId(), resourceGroupName, vmGroupId, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteVMGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteVMGroupDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVirtualMachine> listVirtualMachines(final String resourceGroupName, final String privateCloudName) {
        ServiceResponse<Page<WorkloadNetworkVirtualMachine>> response = listVirtualMachinesSinglePageAsync(resourceGroupName, privateCloudName).toBlocking().single();
        return new PagedList<WorkloadNetworkVirtualMachine>(response.body()) {
            @Override
            public Page<WorkloadNetworkVirtualMachine> nextPage(String nextPageLink) {
                return listVirtualMachinesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVirtualMachine>> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName, final ListOperationCallback<WorkloadNetworkVirtualMachine> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVirtualMachinesSinglePageAsync(resourceGroupName, privateCloudName),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> call(String nextPageLink) {
                    return listVirtualMachinesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    public Observable<Page<WorkloadNetworkVirtualMachine>> listVirtualMachinesAsync(final String resourceGroupName, final String privateCloudName) {
        return listVirtualMachinesWithServiceResponseAsync(resourceGroupName, privateCloudName)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>, Page<WorkloadNetworkVirtualMachine>>() {
                @Override
                public Page<WorkloadNetworkVirtualMachine> call(ServiceResponse<Page<WorkloadNetworkVirtualMachine>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> listVirtualMachinesWithServiceResponseAsync(final String resourceGroupName, final String privateCloudName) {
        return listVirtualMachinesSinglePageAsync(resourceGroupName, privateCloudName)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> call(ServiceResponse<Page<WorkloadNetworkVirtualMachine>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVirtualMachinesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> * @param resourceGroupName The name of the resource group. The name is case insensitive.
    ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> listVirtualMachinesSinglePageAsync(final String resourceGroupName, final String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listVirtualMachines(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> result = listVirtualMachinesDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVirtualMachine>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> listVirtualMachinesDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVirtualMachine>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVirtualMachine>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the WorkloadNetworkVirtualMachine object if successful.
     */
    public WorkloadNetworkVirtualMachine getVirtualMachine(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        return getVirtualMachineWithServiceResponseAsync(resourceGroupName, privateCloudName, virtualMachineId).toBlocking().single().body();
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<WorkloadNetworkVirtualMachine> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId, final ServiceCallback<WorkloadNetworkVirtualMachine> serviceCallback) {
        return ServiceFuture.fromResponse(getVirtualMachineWithServiceResponseAsync(resourceGroupName, privateCloudName, virtualMachineId), serviceCallback);
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVirtualMachine object
     */
    public Observable<WorkloadNetworkVirtualMachine> getVirtualMachineAsync(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        return getVirtualMachineWithServiceResponseAsync(resourceGroupName, privateCloudName, virtualMachineId).map(new Func1<ServiceResponse<WorkloadNetworkVirtualMachine>, WorkloadNetworkVirtualMachine>() {
            @Override
            public WorkloadNetworkVirtualMachine call(ServiceResponse<WorkloadNetworkVirtualMachine> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a virtual machine by id in a private cloud workload network.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud
     * @param virtualMachineId NSX Virtual Machine identifier.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the WorkloadNetworkVirtualMachine object
     */
    public Observable<ServiceResponse<WorkloadNetworkVirtualMachine>> getVirtualMachineWithServiceResponseAsync(String resourceGroupName, String privateCloudName, String virtualMachineId) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (virtualMachineId == null) {
            throw new IllegalArgumentException("Parameter virtualMachineId is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getVirtualMachine(this.client.subscriptionId(), resourceGroupName, privateCloudName, virtualMachineId, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<WorkloadNetworkVirtualMachine>>>() {
                @Override
                public Observable<ServiceResponse<WorkloadNetworkVirtualMachine>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<WorkloadNetworkVirtualMachine> clientResponse = getVirtualMachineDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<WorkloadNetworkVirtualMachine> getVirtualMachineDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<WorkloadNetworkVirtualMachine, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<WorkloadNetworkVirtualMachine>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkSegment&gt; object if successful.
     */
    public PagedList<WorkloadNetworkSegment> listSegmentsNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkSegment>> response = listSegmentsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkSegment>(response.body()) {
            @Override
            public Page<WorkloadNetworkSegment> nextPage(String nextPageLink) {
                return listSegmentsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkSegment>> listSegmentsNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkSegment>> serviceFuture, final ListOperationCallback<WorkloadNetworkSegment> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSegmentsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkSegment>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> call(String nextPageLink) {
                    return listSegmentsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    public Observable<Page<WorkloadNetworkSegment>> listSegmentsNextAsync(final String nextPageLink) {
        return listSegmentsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkSegment>>, Page<WorkloadNetworkSegment>>() {
                @Override
                public Page<WorkloadNetworkSegment> call(ServiceResponse<Page<WorkloadNetworkSegment>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkSegment&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> listSegmentsNextWithServiceResponseAsync(final String nextPageLink) {
        return listSegmentsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkSegment>>, Observable<ServiceResponse<Page<WorkloadNetworkSegment>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> call(ServiceResponse<Page<WorkloadNetworkSegment>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listSegmentsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of segments in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkSegment>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkSegment&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> listSegmentsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listSegmentsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkSegment>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkSegment>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkSegment>> result = listSegmentsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkSegment>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkSegment>> listSegmentsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkSegment>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkSegment>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkDhcp&gt; object if successful.
     */
    public PagedList<WorkloadNetworkDhcp> listDhcpNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkDhcp>> response = listDhcpNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkDhcp>(response.body()) {
            @Override
            public Page<WorkloadNetworkDhcp> nextPage(String nextPageLink) {
                return listDhcpNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkDhcp>> listDhcpNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkDhcp>> serviceFuture, final ListOperationCallback<WorkloadNetworkDhcp> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listDhcpNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> call(String nextPageLink) {
                    return listDhcpNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    public Observable<Page<WorkloadNetworkDhcp>> listDhcpNextAsync(final String nextPageLink) {
        return listDhcpNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkDhcp>>, Page<WorkloadNetworkDhcp>>() {
                @Override
                public Page<WorkloadNetworkDhcp> call(ServiceResponse<Page<WorkloadNetworkDhcp>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkDhcp&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> listDhcpNextWithServiceResponseAsync(final String nextPageLink) {
        return listDhcpNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkDhcp>>, Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> call(ServiceResponse<Page<WorkloadNetworkDhcp>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listDhcpNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List dhcp in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkDhcp>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkDhcp&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> listDhcpNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listDhcpNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkDhcp>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkDhcp>> result = listDhcpNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkDhcp>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkDhcp>> listDhcpNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkDhcp>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkDhcp>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkGateway&gt; object if successful.
     */
    public PagedList<WorkloadNetworkGateway> listGatewaysNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkGateway>> response = listGatewaysNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkGateway>(response.body()) {
            @Override
            public Page<WorkloadNetworkGateway> nextPage(String nextPageLink) {
                return listGatewaysNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkGateway>> listGatewaysNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkGateway>> serviceFuture, final ListOperationCallback<WorkloadNetworkGateway> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listGatewaysNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkGateway>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> call(String nextPageLink) {
                    return listGatewaysNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    public Observable<Page<WorkloadNetworkGateway>> listGatewaysNextAsync(final String nextPageLink) {
        return listGatewaysNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkGateway>>, Page<WorkloadNetworkGateway>>() {
                @Override
                public Page<WorkloadNetworkGateway> call(ServiceResponse<Page<WorkloadNetworkGateway>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkGateway&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> listGatewaysNextWithServiceResponseAsync(final String nextPageLink) {
        return listGatewaysNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkGateway>>, Observable<ServiceResponse<Page<WorkloadNetworkGateway>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> call(ServiceResponse<Page<WorkloadNetworkGateway>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listGatewaysNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of gateways in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkGateway>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkGateway&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> listGatewaysNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listGatewaysNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkGateway>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkGateway>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkGateway>> result = listGatewaysNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkGateway>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkGateway>> listGatewaysNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkGateway>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkGateway>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkPortMirroring&gt; object if successful.
     */
    public PagedList<WorkloadNetworkPortMirroring> listPortMirroringNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkPortMirroring>> response = listPortMirroringNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkPortMirroring>(response.body()) {
            @Override
            public Page<WorkloadNetworkPortMirroring> nextPage(String nextPageLink) {
                return listPortMirroringNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkPortMirroring>> listPortMirroringNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkPortMirroring>> serviceFuture, final ListOperationCallback<WorkloadNetworkPortMirroring> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listPortMirroringNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> call(String nextPageLink) {
                    return listPortMirroringNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    public Observable<Page<WorkloadNetworkPortMirroring>> listPortMirroringNextAsync(final String nextPageLink) {
        return listPortMirroringNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroring>>, Page<WorkloadNetworkPortMirroring>>() {
                @Override
                public Page<WorkloadNetworkPortMirroring> call(ServiceResponse<Page<WorkloadNetworkPortMirroring>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkPortMirroring&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> listPortMirroringNextWithServiceResponseAsync(final String nextPageLink) {
        return listPortMirroringNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkPortMirroring>>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> call(ServiceResponse<Page<WorkloadNetworkPortMirroring>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listPortMirroringNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of port mirroring profiles in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkPortMirroring&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> listPortMirroringNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listPortMirroringNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkPortMirroring>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> result = listPortMirroringNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkPortMirroring>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkPortMirroring>> listPortMirroringNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkPortMirroring>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkPortMirroring>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVMGroup&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVMGroup> listVMGroupsNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkVMGroup>> response = listVMGroupsNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkVMGroup>(response.body()) {
            @Override
            public Page<WorkloadNetworkVMGroup> nextPage(String nextPageLink) {
                return listVMGroupsNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVMGroup>> listVMGroupsNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkVMGroup>> serviceFuture, final ListOperationCallback<WorkloadNetworkVMGroup> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVMGroupsNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> call(String nextPageLink) {
                    return listVMGroupsNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    public Observable<Page<WorkloadNetworkVMGroup>> listVMGroupsNextAsync(final String nextPageLink) {
        return listVMGroupsNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroup>>, Page<WorkloadNetworkVMGroup>>() {
                @Override
                public Page<WorkloadNetworkVMGroup> call(ServiceResponse<Page<WorkloadNetworkVMGroup>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVMGroup&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> listVMGroupsNextWithServiceResponseAsync(final String nextPageLink) {
        return listVMGroupsNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVMGroup>>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> call(ServiceResponse<Page<WorkloadNetworkVMGroup>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVMGroupsNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of vm groups in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVMGroup&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> listVMGroupsNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listVMGroupsNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVMGroup>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> result = listVMGroupsNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVMGroup>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVMGroup>> listVMGroupsNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVMGroup>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVMGroup>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws CloudException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object if successful.
     */
    public PagedList<WorkloadNetworkVirtualMachine> listVirtualMachinesNext(final String nextPageLink) {
        ServiceResponse<Page<WorkloadNetworkVirtualMachine>> response = listVirtualMachinesNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<WorkloadNetworkVirtualMachine>(response.body()) {
            @Override
            public Page<WorkloadNetworkVirtualMachine> nextPage(String nextPageLink) {
                return listVirtualMachinesNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<WorkloadNetworkVirtualMachine>> listVirtualMachinesNextAsync(final String nextPageLink, final ServiceFuture<List<WorkloadNetworkVirtualMachine>> serviceFuture, final ListOperationCallback<WorkloadNetworkVirtualMachine> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listVirtualMachinesNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> call(String nextPageLink) {
                    return listVirtualMachinesNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    public Observable<Page<WorkloadNetworkVirtualMachine>> listVirtualMachinesNextAsync(final String nextPageLink) {
        return listVirtualMachinesNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>, Page<WorkloadNetworkVirtualMachine>>() {
                @Override
                public Page<WorkloadNetworkVirtualMachine> call(ServiceResponse<Page<WorkloadNetworkVirtualMachine>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> listVirtualMachinesNextWithServiceResponseAsync(final String nextPageLink) {
        return listVirtualMachinesNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> call(ServiceResponse<Page<WorkloadNetworkVirtualMachine>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listVirtualMachinesNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List of virtual machines in a private cloud workload network.
     *
    ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;WorkloadNetworkVirtualMachine&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> listVirtualMachinesNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listVirtualMachinesNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>>>() {
                @Override
                public Observable<ServiceResponse<Page<WorkloadNetworkVirtualMachine>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> result = listVirtualMachinesNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<WorkloadNetworkVirtualMachine>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<WorkloadNetworkVirtualMachine>> listVirtualMachinesNextDelegate(Response<ResponseBody> response) throws CloudException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<WorkloadNetworkVirtualMachine>, CloudException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<WorkloadNetworkVirtualMachine>>() { }.getType())
                .registerError(CloudException.class)
                .build(response);
    }

}
