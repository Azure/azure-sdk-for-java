// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An Encryption Key.
 */
@Fluent
public final class EncryptionKeyVaultProperties implements JsonSerializable<EncryptionKeyVaultProperties> {
    /*
     * The name of the key.
     */
    private String keyName;

    /*
     * The version of the key.
     */
    private String keyVersion;

    /*
     * The auto-detected version of the key if versionType is auto-detected.
     */
    private String autoDetectedKeyVersion;

    /*
     * The URL of the vault.
     */
    private String keyVaultUrl;

    /*
     * The state of key provided
     */
    private EncryptionKeyStatus keyState;

    /*
     * Property of the key if user provided or auto detected
     */
    private EncryptionVersionType versionType;

    /**
     * Creates an instance of EncryptionKeyVaultProperties class.
     */
    public EncryptionKeyVaultProperties() {
    }

    /**
     * Get the keyName property: The name of the key.
     * 
     * @return the keyName value.
     */
    public String keyName() {
        return this.keyName;
    }

    /**
     * Set the keyName property: The name of the key.
     * 
     * @param keyName the keyName value to set.
     * @return the EncryptionKeyVaultProperties object itself.
     */
    public EncryptionKeyVaultProperties withKeyName(String keyName) {
        this.keyName = keyName;
        return this;
    }

    /**
     * Get the keyVersion property: The version of the key.
     * 
     * @return the keyVersion value.
     */
    public String keyVersion() {
        return this.keyVersion;
    }

    /**
     * Set the keyVersion property: The version of the key.
     * 
     * @param keyVersion the keyVersion value to set.
     * @return the EncryptionKeyVaultProperties object itself.
     */
    public EncryptionKeyVaultProperties withKeyVersion(String keyVersion) {
        this.keyVersion = keyVersion;
        return this;
    }

    /**
     * Get the autoDetectedKeyVersion property: The auto-detected version of the key if versionType is auto-detected.
     * 
     * @return the autoDetectedKeyVersion value.
     */
    public String autoDetectedKeyVersion() {
        return this.autoDetectedKeyVersion;
    }

    /**
     * Get the keyVaultUrl property: The URL of the vault.
     * 
     * @return the keyVaultUrl value.
     */
    public String keyVaultUrl() {
        return this.keyVaultUrl;
    }

    /**
     * Set the keyVaultUrl property: The URL of the vault.
     * 
     * @param keyVaultUrl the keyVaultUrl value to set.
     * @return the EncryptionKeyVaultProperties object itself.
     */
    public EncryptionKeyVaultProperties withKeyVaultUrl(String keyVaultUrl) {
        this.keyVaultUrl = keyVaultUrl;
        return this;
    }

    /**
     * Get the keyState property: The state of key provided.
     * 
     * @return the keyState value.
     */
    public EncryptionKeyStatus keyState() {
        return this.keyState;
    }

    /**
     * Get the versionType property: Property of the key if user provided or auto detected.
     * 
     * @return the versionType value.
     */
    public EncryptionVersionType versionType() {
        return this.versionType;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("keyName", this.keyName);
        jsonWriter.writeStringField("keyVersion", this.keyVersion);
        jsonWriter.writeStringField("keyVaultUrl", this.keyVaultUrl);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of EncryptionKeyVaultProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of EncryptionKeyVaultProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the EncryptionKeyVaultProperties.
     */
    public static EncryptionKeyVaultProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            EncryptionKeyVaultProperties deserializedEncryptionKeyVaultProperties = new EncryptionKeyVaultProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("keyName".equals(fieldName)) {
                    deserializedEncryptionKeyVaultProperties.keyName = reader.getString();
                } else if ("keyVersion".equals(fieldName)) {
                    deserializedEncryptionKeyVaultProperties.keyVersion = reader.getString();
                } else if ("autoDetectedKeyVersion".equals(fieldName)) {
                    deserializedEncryptionKeyVaultProperties.autoDetectedKeyVersion = reader.getString();
                } else if ("keyVaultUrl".equals(fieldName)) {
                    deserializedEncryptionKeyVaultProperties.keyVaultUrl = reader.getString();
                } else if ("keyState".equals(fieldName)) {
                    deserializedEncryptionKeyVaultProperties.keyState
                        = EncryptionKeyStatus.fromString(reader.getString());
                } else if ("versionType".equals(fieldName)) {
                    deserializedEncryptionKeyVaultProperties.versionType
                        = EncryptionVersionType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedEncryptionKeyVaultProperties;
        });
    }
}
