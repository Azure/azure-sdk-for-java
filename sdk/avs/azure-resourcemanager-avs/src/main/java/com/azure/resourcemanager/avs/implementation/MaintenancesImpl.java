// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.MaintenancesClient;
import com.azure.resourcemanager.avs.fluent.models.MaintenanceInner;
import com.azure.resourcemanager.avs.models.Maintenance;
import com.azure.resourcemanager.avs.models.MaintenanceReschedule;
import com.azure.resourcemanager.avs.models.MaintenanceSchedule;
import com.azure.resourcemanager.avs.models.MaintenanceStateName;
import com.azure.resourcemanager.avs.models.MaintenanceStatusFilter;
import com.azure.resourcemanager.avs.models.Maintenances;
import java.time.OffsetDateTime;

public final class MaintenancesImpl implements Maintenances {
    private static final ClientLogger LOGGER = new ClientLogger(MaintenancesImpl.class);

    private final MaintenancesClient innerClient;

    private final com.azure.resourcemanager.avs.AvsManager serviceManager;

    public MaintenancesImpl(MaintenancesClient innerClient, com.azure.resourcemanager.avs.AvsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<Maintenance> list(String resourceGroupName, String privateCloudName) {
        PagedIterable<MaintenanceInner> inner = this.serviceClient().list(resourceGroupName, privateCloudName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MaintenanceImpl(inner1, this.manager()));
    }

    public PagedIterable<Maintenance> list(String resourceGroupName, String privateCloudName,
        MaintenanceStateName stateName, MaintenanceStatusFilter status, OffsetDateTime from, OffsetDateTime to,
        Context context) {
        PagedIterable<MaintenanceInner> inner
            = this.serviceClient().list(resourceGroupName, privateCloudName, stateName, status, from, to, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new MaintenanceImpl(inner1, this.manager()));
    }

    public Response<Maintenance> getWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, Context context) {
        Response<MaintenanceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, privateCloudName, maintenanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MaintenanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Maintenance get(String resourceGroupName, String privateCloudName, String maintenanceName) {
        MaintenanceInner inner = this.serviceClient().get(resourceGroupName, privateCloudName, maintenanceName);
        if (inner != null) {
            return new MaintenanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Maintenance> rescheduleWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, MaintenanceReschedule body, Context context) {
        Response<MaintenanceInner> inner = this.serviceClient()
            .rescheduleWithResponse(resourceGroupName, privateCloudName, maintenanceName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MaintenanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Maintenance reschedule(String resourceGroupName, String privateCloudName, String maintenanceName,
        MaintenanceReschedule body) {
        MaintenanceInner inner
            = this.serviceClient().reschedule(resourceGroupName, privateCloudName, maintenanceName, body);
        if (inner != null) {
            return new MaintenanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Maintenance> scheduleWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, MaintenanceSchedule body, Context context) {
        Response<MaintenanceInner> inner = this.serviceClient()
            .scheduleWithResponse(resourceGroupName, privateCloudName, maintenanceName, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MaintenanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Maintenance schedule(String resourceGroupName, String privateCloudName, String maintenanceName,
        MaintenanceSchedule body) {
        MaintenanceInner inner
            = this.serviceClient().schedule(resourceGroupName, privateCloudName, maintenanceName, body);
        if (inner != null) {
            return new MaintenanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Maintenance> initiateChecksWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, Context context) {
        Response<MaintenanceInner> inner = this.serviceClient()
            .initiateChecksWithResponse(resourceGroupName, privateCloudName, maintenanceName, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new MaintenanceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Maintenance initiateChecks(String resourceGroupName, String privateCloudName, String maintenanceName) {
        MaintenanceInner inner
            = this.serviceClient().initiateChecks(resourceGroupName, privateCloudName, maintenanceName);
        if (inner != null) {
            return new MaintenanceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private MaintenancesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.avs.AvsManager manager() {
        return this.serviceManager;
    }
}
