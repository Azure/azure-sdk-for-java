// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.PortMirroringDirectionEnum;
import com.azure.resourcemanager.avs.models.PortMirroringStatusEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroringProvisioningState;
import java.io.IOException;

/**
 * NSX Port Mirroring Properties.
 */
@Fluent
public final class WorkloadNetworkPortMirroringProperties
    implements JsonSerializable<WorkloadNetworkPortMirroringProperties> {
    /*
     * Display name of the port mirroring profile.
     */
    private String displayName;

    /*
     * Direction of port mirroring profile.
     */
    private PortMirroringDirectionEnum direction;

    /*
     * Source VM Group.
     */
    private String source;

    /*
     * Destination VM Group.
     */
    private String destination;

    /*
     * Port Mirroring Status.
     */
    private PortMirroringStatusEnum status;

    /*
     * The provisioning state
     */
    private WorkloadNetworkPortMirroringProvisioningState provisioningState;

    /*
     * NSX revision number.
     */
    private Long revision;

    /**
     * Creates an instance of WorkloadNetworkPortMirroringProperties class.
     */
    public WorkloadNetworkPortMirroringProperties() {
    }

    /**
     * Get the displayName property: Display name of the port mirroring profile.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the port mirroring profile.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkloadNetworkPortMirroringProperties object itself.
     */
    public WorkloadNetworkPortMirroringProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the direction property: Direction of port mirroring profile.
     * 
     * @return the direction value.
     */
    public PortMirroringDirectionEnum direction() {
        return this.direction;
    }

    /**
     * Set the direction property: Direction of port mirroring profile.
     * 
     * @param direction the direction value to set.
     * @return the WorkloadNetworkPortMirroringProperties object itself.
     */
    public WorkloadNetworkPortMirroringProperties withDirection(PortMirroringDirectionEnum direction) {
        this.direction = direction;
        return this;
    }

    /**
     * Get the source property: Source VM Group.
     * 
     * @return the source value.
     */
    public String source() {
        return this.source;
    }

    /**
     * Set the source property: Source VM Group.
     * 
     * @param source the source value to set.
     * @return the WorkloadNetworkPortMirroringProperties object itself.
     */
    public WorkloadNetworkPortMirroringProperties withSource(String source) {
        this.source = source;
        return this;
    }

    /**
     * Get the destination property: Destination VM Group.
     * 
     * @return the destination value.
     */
    public String destination() {
        return this.destination;
    }

    /**
     * Set the destination property: Destination VM Group.
     * 
     * @param destination the destination value to set.
     * @return the WorkloadNetworkPortMirroringProperties object itself.
     */
    public WorkloadNetworkPortMirroringProperties withDestination(String destination) {
        this.destination = destination;
        return this;
    }

    /**
     * Get the status property: Port Mirroring Status.
     * 
     * @return the status value.
     */
    public PortMirroringStatusEnum status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public WorkloadNetworkPortMirroringProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the revision property: NSX revision number.
     * 
     * @return the revision value.
     */
    public Long revision() {
        return this.revision;
    }

    /**
     * Set the revision property: NSX revision number.
     * 
     * @param revision the revision value to set.
     * @return the WorkloadNetworkPortMirroringProperties object itself.
     */
    public WorkloadNetworkPortMirroringProperties withRevision(Long revision) {
        this.revision = revision;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("direction", this.direction == null ? null : this.direction.toString());
        jsonWriter.writeStringField("source", this.source);
        jsonWriter.writeStringField("destination", this.destination);
        jsonWriter.writeNumberField("revision", this.revision);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadNetworkPortMirroringProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadNetworkPortMirroringProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadNetworkPortMirroringProperties.
     */
    public static WorkloadNetworkPortMirroringProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadNetworkPortMirroringProperties deserializedWorkloadNetworkPortMirroringProperties
                = new WorkloadNetworkPortMirroringProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.displayName = reader.getString();
                } else if ("direction".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.direction
                        = PortMirroringDirectionEnum.fromString(reader.getString());
                } else if ("source".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.source = reader.getString();
                } else if ("destination".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.destination = reader.getString();
                } else if ("status".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.status
                        = PortMirroringStatusEnum.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.provisioningState
                        = WorkloadNetworkPortMirroringProvisioningState.fromString(reader.getString());
                } else if ("revision".equals(fieldName)) {
                    deserializedWorkloadNetworkPortMirroringProperties.revision
                        = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadNetworkPortMirroringProperties;
        });
    }
}
