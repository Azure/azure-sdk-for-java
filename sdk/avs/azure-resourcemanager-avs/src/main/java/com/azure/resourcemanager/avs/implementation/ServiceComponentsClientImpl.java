// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.BinaryData;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.avs.fluent.ServiceComponentsClient;
import java.nio.ByteBuffer;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ServiceComponentsClient.
 */
public final class ServiceComponentsClientImpl implements ServiceComponentsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ServiceComponentsService service;

    /**
     * The service client containing this operation class.
     */
    private final AvsClientImpl client;

    /**
     * Initializes an instance of ServiceComponentsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ServiceComponentsClientImpl(AvsClientImpl client) {
        this.service
            = RestProxy.create(ServiceComponentsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for AvsClientServiceComponents to be used by the proxy service to perform
     * REST calls.
     */
    @Host("{endpoint}")
    @ServiceInterface(name = "AvsClientServiceComponents")
    public interface ServiceComponentsService {
        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/serviceComponents/{serviceComponentName}/checkAvailability")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Flux<ByteBuffer>>> checkAvailability(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("serviceComponentName") String serviceComponentName,
            Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Post("/subscriptions/{subscriptionId}/providers/Microsoft.AVS/locations/{location}/serviceComponents/{serviceComponentName}/checkAvailability")
        @ExpectedResponses({ 202 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Response<BinaryData> checkAvailabilitySync(@HostParam("endpoint") String endpoint,
            @QueryParam("api-version") String apiVersion, @PathParam("subscriptionId") String subscriptionId,
            @PathParam("location") String location, @PathParam("serviceComponentName") String serviceComponentName,
            Context context);
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Flux<ByteBuffer>>> checkAvailabilityWithResponseAsync(String location,
        String serviceComponentName) {
        return FluxUtil
            .withContext(context -> service.checkAvailability(this.client.getEndpoint(), this.client.getApiVersion(),
                this.client.getSubscriptionId(), location, serviceComponentName, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> checkAvailabilityWithResponse(String location, String serviceComponentName) {
        return service.checkAvailabilitySync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), location, serviceComponentName, Context.NONE);
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response body along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Response<BinaryData> checkAvailabilityWithResponse(String location, String serviceComponentName,
        Context context) {
        return service.checkAvailabilitySync(this.client.getEndpoint(), this.client.getApiVersion(),
            this.client.getSubscriptionId(), location, serviceComponentName, context);
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link PollerFlux} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    private PollerFlux<PollResult<Void>, Void> beginCheckAvailabilityAsync(String location,
        String serviceComponentName) {
        Mono<Response<Flux<ByteBuffer>>> mono = checkAvailabilityWithResponseAsync(location, serviceComponentName);
        return this.client.<Void, Void>getLroResult(mono, this.client.getHttpPipeline(), Void.class, Void.class,
            this.client.getContext());
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCheckAvailability(String location, String serviceComponentName) {
        Response<BinaryData> response = checkAvailabilityWithResponse(location, serviceComponentName);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, Context.NONE);
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link SyncPoller} for polling of long-running operation.
     */
    @ServiceMethod(returns = ReturnType.LONG_RUNNING_OPERATION)
    public SyncPoller<PollResult<Void>, Void> beginCheckAvailability(String location, String serviceComponentName,
        Context context) {
        Response<BinaryData> response = checkAvailabilityWithResponse(location, serviceComponentName, context);
        return this.client.<Void, Void>getLroResult(response, Void.class, Void.class, context);
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> checkAvailabilityAsync(String location, String serviceComponentName) {
        return beginCheckAvailabilityAsync(location, serviceComponentName).last()
            .flatMap(this.client::getLroFinalResultOrError);
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkAvailability(String location, String serviceComponentName) {
        beginCheckAvailability(location, serviceComponentName).getFinalResult();
    }

    /**
     * Return service component availability.
     * 
     * @param location A location in a subscription.
     * @param serviceComponentName A service component.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void checkAvailability(String location, String serviceComponentName, Context context) {
        beginCheckAvailability(location, serviceComponentName, context).getFinalResult();
    }
}
