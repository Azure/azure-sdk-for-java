// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZoneProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * NSX DNS Zone Properties.
 */
@Fluent
public final class WorkloadNetworkDnsZoneProperties implements JsonSerializable<WorkloadNetworkDnsZoneProperties> {
    /*
     * Display name of the DNS Zone.
     */
    private String displayName;

    /*
     * Domain names of the DNS Zone.
     */
    private List<String> domain;

    /*
     * DNS Server IP array of the DNS Zone.
     */
    private List<String> dnsServerIps;

    /*
     * Source IP of the DNS Zone.
     */
    private String sourceIp;

    /*
     * Number of DNS Services using the DNS zone.
     */
    private Long dnsServices;

    /*
     * The provisioning state
     */
    private WorkloadNetworkDnsZoneProvisioningState provisioningState;

    /*
     * NSX revision number.
     */
    private Long revision;

    /**
     * Creates an instance of WorkloadNetworkDnsZoneProperties class.
     */
    public WorkloadNetworkDnsZoneProperties() {
    }

    /**
     * Get the displayName property: Display name of the DNS Zone.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the DNS Zone.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkloadNetworkDnsZoneProperties object itself.
     */
    public WorkloadNetworkDnsZoneProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the domain property: Domain names of the DNS Zone.
     * 
     * @return the domain value.
     */
    public List<String> domain() {
        return this.domain;
    }

    /**
     * Set the domain property: Domain names of the DNS Zone.
     * 
     * @param domain the domain value to set.
     * @return the WorkloadNetworkDnsZoneProperties object itself.
     */
    public WorkloadNetworkDnsZoneProperties withDomain(List<String> domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the dnsServerIps property: DNS Server IP array of the DNS Zone.
     * 
     * @return the dnsServerIps value.
     */
    public List<String> dnsServerIps() {
        return this.dnsServerIps;
    }

    /**
     * Set the dnsServerIps property: DNS Server IP array of the DNS Zone.
     * 
     * @param dnsServerIps the dnsServerIps value to set.
     * @return the WorkloadNetworkDnsZoneProperties object itself.
     */
    public WorkloadNetworkDnsZoneProperties withDnsServerIps(List<String> dnsServerIps) {
        this.dnsServerIps = dnsServerIps;
        return this;
    }

    /**
     * Get the sourceIp property: Source IP of the DNS Zone.
     * 
     * @return the sourceIp value.
     */
    public String sourceIp() {
        return this.sourceIp;
    }

    /**
     * Set the sourceIp property: Source IP of the DNS Zone.
     * 
     * @param sourceIp the sourceIp value to set.
     * @return the WorkloadNetworkDnsZoneProperties object itself.
     */
    public WorkloadNetworkDnsZoneProperties withSourceIp(String sourceIp) {
        this.sourceIp = sourceIp;
        return this;
    }

    /**
     * Get the dnsServices property: Number of DNS Services using the DNS zone.
     * 
     * @return the dnsServices value.
     */
    public Long dnsServices() {
        return this.dnsServices;
    }

    /**
     * Set the dnsServices property: Number of DNS Services using the DNS zone.
     * 
     * @param dnsServices the dnsServices value to set.
     * @return the WorkloadNetworkDnsZoneProperties object itself.
     */
    public WorkloadNetworkDnsZoneProperties withDnsServices(Long dnsServices) {
        this.dnsServices = dnsServices;
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public WorkloadNetworkDnsZoneProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the revision property: NSX revision number.
     * 
     * @return the revision value.
     */
    public Long revision() {
        return this.revision;
    }

    /**
     * Set the revision property: NSX revision number.
     * 
     * @param revision the revision value to set.
     * @return the WorkloadNetworkDnsZoneProperties object itself.
     */
    public WorkloadNetworkDnsZoneProperties withRevision(Long revision) {
        this.revision = revision;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeArrayField("domain", this.domain, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("dnsServerIps", this.dnsServerIps, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("sourceIp", this.sourceIp);
        jsonWriter.writeNumberField("dnsServices", this.dnsServices);
        jsonWriter.writeNumberField("revision", this.revision);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadNetworkDnsZoneProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadNetworkDnsZoneProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadNetworkDnsZoneProperties.
     */
    public static WorkloadNetworkDnsZoneProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadNetworkDnsZoneProperties deserializedWorkloadNetworkDnsZoneProperties
                = new WorkloadNetworkDnsZoneProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneProperties.displayName = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    List<String> domain = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkloadNetworkDnsZoneProperties.domain = domain;
                } else if ("dnsServerIps".equals(fieldName)) {
                    List<String> dnsServerIps = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkloadNetworkDnsZoneProperties.dnsServerIps = dnsServerIps;
                } else if ("sourceIp".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneProperties.sourceIp = reader.getString();
                } else if ("dnsServices".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneProperties.dnsServices = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneProperties.provisioningState
                        = WorkloadNetworkDnsZoneProvisioningState.fromString(reader.getString());
                } else if ("revision".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneProperties.revision = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadNetworkDnsZoneProperties;
        });
    }
}
