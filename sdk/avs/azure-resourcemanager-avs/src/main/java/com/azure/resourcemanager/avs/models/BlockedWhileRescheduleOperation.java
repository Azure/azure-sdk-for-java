// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Time ranges blocked for rescheduling maintenance.
 */
@Immutable
public final class BlockedWhileRescheduleOperation extends RescheduleOperationConstraint {
    /*
     * The kind of operation
     */
    private RescheduleOperationConstraintKind kind
        = RescheduleOperationConstraintKind.BLOCKED_WHILE_RESCHEDULE_OPERATION;

    /*
     * Category of blocked date
     */
    private BlockedDatesConstraintCategory category;

    /*
     * Date ranges blocked for schedule
     */
    private List<BlockedDatesConstraintTimeRange> timeRanges;

    /**
     * Creates an instance of BlockedWhileRescheduleOperation class.
     */
    private BlockedWhileRescheduleOperation() {
    }

    /**
     * Get the kind property: The kind of operation.
     * 
     * @return the kind value.
     */
    @Override
    public RescheduleOperationConstraintKind kind() {
        return this.kind;
    }

    /**
     * Get the category property: Category of blocked date.
     * 
     * @return the category value.
     */
    public BlockedDatesConstraintCategory category() {
        return this.category;
    }

    /**
     * Get the timeRanges property: Date ranges blocked for schedule.
     * 
     * @return the timeRanges value.
     */
    public List<BlockedDatesConstraintTimeRange> timeRanges() {
        return this.timeRanges;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of BlockedWhileRescheduleOperation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of BlockedWhileRescheduleOperation if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the BlockedWhileRescheduleOperation.
     */
    public static BlockedWhileRescheduleOperation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            BlockedWhileRescheduleOperation deserializedBlockedWhileRescheduleOperation
                = new BlockedWhileRescheduleOperation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("category".equals(fieldName)) {
                    deserializedBlockedWhileRescheduleOperation.category
                        = BlockedDatesConstraintCategory.fromString(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedBlockedWhileRescheduleOperation.kind
                        = RescheduleOperationConstraintKind.fromString(reader.getString());
                } else if ("timeRanges".equals(fieldName)) {
                    List<BlockedDatesConstraintTimeRange> timeRanges
                        = reader.readArray(reader1 -> BlockedDatesConstraintTimeRange.fromJson(reader1));
                    deserializedBlockedWhileRescheduleOperation.timeRanges = timeRanges;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedBlockedWhileRescheduleOperation;
        });
    }
}
