// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** a plain text value execution parameter. */
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "type")
@JsonTypeName("SecureValue")
@Fluent
public final class ScriptSecureStringExecutionParameter extends ScriptExecutionParameter {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ScriptSecureStringExecutionParameter.class);

    /*
     * A secure value for the passed parameter, not to be stored in logs
     */
    @JsonProperty(value = "secureValue")
    private String secureValue;

    /**
     * Get the secureValue property: A secure value for the passed parameter, not to be stored in logs.
     *
     * @return the secureValue value.
     */
    public String secureValue() {
        return this.secureValue;
    }

    /**
     * Set the secureValue property: A secure value for the passed parameter, not to be stored in logs.
     *
     * @param secureValue the secureValue value to set.
     * @return the ScriptSecureStringExecutionParameter object itself.
     */
    public ScriptSecureStringExecutionParameter withSecureValue(String secureValue) {
        this.secureValue = secureValue;
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public ScriptSecureStringExecutionParameter withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
