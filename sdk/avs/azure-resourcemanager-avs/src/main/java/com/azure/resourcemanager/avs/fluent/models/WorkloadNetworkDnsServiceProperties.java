// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.DnsServiceStatusEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServiceProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * NSX DNS Service Properties.
 */
@Fluent
public final class WorkloadNetworkDnsServiceProperties
    implements JsonSerializable<WorkloadNetworkDnsServiceProperties> {
    /*
     * Display name of the DNS Service.
     */
    private String displayName;

    /*
     * DNS service IP of the DNS Service.
     */
    private String dnsServiceIp;

    /*
     * Default DNS zone of the DNS Service.
     */
    private String defaultDnsZone;

    /*
     * FQDN zones of the DNS Service.
     */
    private List<String> fqdnZones;

    /*
     * DNS Service log level.
     */
    private DnsServiceLogLevelEnum logLevel;

    /*
     * DNS Service status.
     */
    private DnsServiceStatusEnum status;

    /*
     * The provisioning state
     */
    private WorkloadNetworkDnsServiceProvisioningState provisioningState;

    /*
     * NSX revision number.
     */
    private Long revision;

    /**
     * Creates an instance of WorkloadNetworkDnsServiceProperties class.
     */
    public WorkloadNetworkDnsServiceProperties() {
    }

    /**
     * Get the displayName property: Display name of the DNS Service.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: Display name of the DNS Service.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkloadNetworkDnsServiceProperties object itself.
     */
    public WorkloadNetworkDnsServiceProperties withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the dnsServiceIp property: DNS service IP of the DNS Service.
     * 
     * @return the dnsServiceIp value.
     */
    public String dnsServiceIp() {
        return this.dnsServiceIp;
    }

    /**
     * Set the dnsServiceIp property: DNS service IP of the DNS Service.
     * 
     * @param dnsServiceIp the dnsServiceIp value to set.
     * @return the WorkloadNetworkDnsServiceProperties object itself.
     */
    public WorkloadNetworkDnsServiceProperties withDnsServiceIp(String dnsServiceIp) {
        this.dnsServiceIp = dnsServiceIp;
        return this;
    }

    /**
     * Get the defaultDnsZone property: Default DNS zone of the DNS Service.
     * 
     * @return the defaultDnsZone value.
     */
    public String defaultDnsZone() {
        return this.defaultDnsZone;
    }

    /**
     * Set the defaultDnsZone property: Default DNS zone of the DNS Service.
     * 
     * @param defaultDnsZone the defaultDnsZone value to set.
     * @return the WorkloadNetworkDnsServiceProperties object itself.
     */
    public WorkloadNetworkDnsServiceProperties withDefaultDnsZone(String defaultDnsZone) {
        this.defaultDnsZone = defaultDnsZone;
        return this;
    }

    /**
     * Get the fqdnZones property: FQDN zones of the DNS Service.
     * 
     * @return the fqdnZones value.
     */
    public List<String> fqdnZones() {
        return this.fqdnZones;
    }

    /**
     * Set the fqdnZones property: FQDN zones of the DNS Service.
     * 
     * @param fqdnZones the fqdnZones value to set.
     * @return the WorkloadNetworkDnsServiceProperties object itself.
     */
    public WorkloadNetworkDnsServiceProperties withFqdnZones(List<String> fqdnZones) {
        this.fqdnZones = fqdnZones;
        return this;
    }

    /**
     * Get the logLevel property: DNS Service log level.
     * 
     * @return the logLevel value.
     */
    public DnsServiceLogLevelEnum logLevel() {
        return this.logLevel;
    }

    /**
     * Set the logLevel property: DNS Service log level.
     * 
     * @param logLevel the logLevel value to set.
     * @return the WorkloadNetworkDnsServiceProperties object itself.
     */
    public WorkloadNetworkDnsServiceProperties withLogLevel(DnsServiceLogLevelEnum logLevel) {
        this.logLevel = logLevel;
        return this;
    }

    /**
     * Get the status property: DNS Service status.
     * 
     * @return the status value.
     */
    public DnsServiceStatusEnum status() {
        return this.status;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public WorkloadNetworkDnsServiceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the revision property: NSX revision number.
     * 
     * @return the revision value.
     */
    public Long revision() {
        return this.revision;
    }

    /**
     * Set the revision property: NSX revision number.
     * 
     * @param revision the revision value to set.
     * @return the WorkloadNetworkDnsServiceProperties object itself.
     */
    public WorkloadNetworkDnsServiceProperties withRevision(Long revision) {
        this.revision = revision;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", this.displayName);
        jsonWriter.writeStringField("dnsServiceIp", this.dnsServiceIp);
        jsonWriter.writeStringField("defaultDnsZone", this.defaultDnsZone);
        jsonWriter.writeArrayField("fqdnZones", this.fqdnZones, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("logLevel", this.logLevel == null ? null : this.logLevel.toString());
        jsonWriter.writeNumberField("revision", this.revision);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadNetworkDnsServiceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadNetworkDnsServiceProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WorkloadNetworkDnsServiceProperties.
     */
    public static WorkloadNetworkDnsServiceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadNetworkDnsServiceProperties deserializedWorkloadNetworkDnsServiceProperties
                = new WorkloadNetworkDnsServiceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("displayName".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.displayName = reader.getString();
                } else if ("dnsServiceIp".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.dnsServiceIp = reader.getString();
                } else if ("defaultDnsZone".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.defaultDnsZone = reader.getString();
                } else if ("fqdnZones".equals(fieldName)) {
                    List<String> fqdnZones = reader.readArray(reader1 -> reader1.getString());
                    deserializedWorkloadNetworkDnsServiceProperties.fqdnZones = fqdnZones;
                } else if ("logLevel".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.logLevel
                        = DnsServiceLogLevelEnum.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.status
                        = DnsServiceStatusEnum.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.provisioningState
                        = WorkloadNetworkDnsServiceProvisioningState.fromString(reader.getString());
                } else if ("revision".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsServiceProperties.revision = reader.getNullable(JsonReader::getLong);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadNetworkDnsServiceProperties;
        });
    }
}
