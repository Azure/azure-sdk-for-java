// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.HttpPipelinePosition;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.AddHeadersFromContextPolicy;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryOptions;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.http.policy.ArmChallengeAuthenticationPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.AvsClient;
import com.azure.resourcemanager.avs.implementation.AddonsImpl;
import com.azure.resourcemanager.avs.implementation.AuthorizationsImpl;
import com.azure.resourcemanager.avs.implementation.AvsClientBuilder;
import com.azure.resourcemanager.avs.implementation.CloudLinksImpl;
import com.azure.resourcemanager.avs.implementation.ClustersImpl;
import com.azure.resourcemanager.avs.implementation.DatastoresImpl;
import com.azure.resourcemanager.avs.implementation.GlobalReachConnectionsImpl;
import com.azure.resourcemanager.avs.implementation.HcxEnterpriseSitesImpl;
import com.azure.resourcemanager.avs.implementation.IscsiPathsImpl;
import com.azure.resourcemanager.avs.implementation.LocationsImpl;
import com.azure.resourcemanager.avs.implementation.OperationsImpl;
import com.azure.resourcemanager.avs.implementation.PlacementPoliciesImpl;
import com.azure.resourcemanager.avs.implementation.PrivateCloudsImpl;
import com.azure.resourcemanager.avs.implementation.ScriptCmdletsImpl;
import com.azure.resourcemanager.avs.implementation.ScriptExecutionsImpl;
import com.azure.resourcemanager.avs.implementation.ScriptPackagesImpl;
import com.azure.resourcemanager.avs.implementation.VirtualMachinesImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkDhcpConfigurationsImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkDnsServicesImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkDnsZonesImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkGatewaysImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkPortMirroringProfilesImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkPublicIpsImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkSegmentsImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworksImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkVirtualMachinesImpl;
import com.azure.resourcemanager.avs.implementation.WorkloadNetworkVmGroupsImpl;
import com.azure.resourcemanager.avs.models.Addons;
import com.azure.resourcemanager.avs.models.Authorizations;
import com.azure.resourcemanager.avs.models.CloudLinks;
import com.azure.resourcemanager.avs.models.Clusters;
import com.azure.resourcemanager.avs.models.Datastores;
import com.azure.resourcemanager.avs.models.GlobalReachConnections;
import com.azure.resourcemanager.avs.models.HcxEnterpriseSites;
import com.azure.resourcemanager.avs.models.IscsiPaths;
import com.azure.resourcemanager.avs.models.Locations;
import com.azure.resourcemanager.avs.models.Operations;
import com.azure.resourcemanager.avs.models.PlacementPolicies;
import com.azure.resourcemanager.avs.models.PrivateClouds;
import com.azure.resourcemanager.avs.models.ScriptCmdlets;
import com.azure.resourcemanager.avs.models.ScriptExecutions;
import com.azure.resourcemanager.avs.models.ScriptPackages;
import com.azure.resourcemanager.avs.models.VirtualMachines;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDhcpConfigurations;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServices;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZones;
import com.azure.resourcemanager.avs.models.WorkloadNetworkGateways;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroringProfiles;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPublicIps;
import com.azure.resourcemanager.avs.models.WorkloadNetworks;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegments;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVirtualMachines;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVmGroups;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

/**
 * Entry point to AvsManager.
 * Azure VMware Solution API.
 */
public final class AvsManager {
    private Operations operations;

    private Locations locations;

    private PrivateClouds privateClouds;

    private Clusters clusters;

    private Datastores datastores;

    private HcxEnterpriseSites hcxEnterpriseSites;

    private Authorizations authorizations;

    private GlobalReachConnections globalReachConnections;

    private WorkloadNetworks workloadNetworks;

    private WorkloadNetworkSegments workloadNetworkSegments;

    private WorkloadNetworkDhcpConfigurations workloadNetworkDhcpConfigurations;

    private WorkloadNetworkGateways workloadNetworkGateways;

    private WorkloadNetworkPortMirroringProfiles workloadNetworkPortMirroringProfiles;

    private WorkloadNetworkVmGroups workloadNetworkVmGroups;

    private WorkloadNetworkVirtualMachines workloadNetworkVirtualMachines;

    private WorkloadNetworkDnsServices workloadNetworkDnsServices;

    private WorkloadNetworkDnsZones workloadNetworkDnsZones;

    private WorkloadNetworkPublicIps workloadNetworkPublicIps;

    private CloudLinks cloudLinks;

    private Addons addons;

    private VirtualMachines virtualMachines;

    private PlacementPolicies placementPolicies;

    private ScriptPackages scriptPackages;

    private ScriptCmdlets scriptCmdlets;

    private ScriptExecutions scriptExecutions;

    private IscsiPaths iscsiPaths;

    private final AvsClient clientObject;

    private AvsManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject = new AvsClientBuilder().pipeline(httpPipeline)
            .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
            .subscriptionId(profile.getSubscriptionId())
            .defaultPollInterval(defaultPollInterval)
            .buildClient();
    }

    /**
     * Creates an instance of Avs service API entry point.
     * 
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the Avs service API instance.
     */
    public static AvsManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Creates an instance of Avs service API entry point.
     * 
     * @param httpPipeline the {@link HttpPipeline} configured with Azure authentication credential.
     * @param profile the Azure profile for client.
     * @return the Avs service API instance.
     */
    public static AvsManager authenticate(HttpPipeline httpPipeline, AzureProfile profile) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return new AvsManager(httpPipeline, profile, null);
    }

    /**
     * Gets a Configurable instance that can be used to create AvsManager with optional configuration.
     * 
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new AvsManager.Configurable();
    }

    /**
     * The Configurable allowing configurations to be set.
     */
    public static final class Configurable {
        private static final ClientLogger LOGGER = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private final List<String> scopes = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private RetryOptions retryOptions;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Adds the scope to permission sets.
         *
         * @param scope the scope.
         * @return the configurable object itself.
         */
        public Configurable withScope(String scope) {
            this.scopes.add(Objects.requireNonNull(scope, "'scope' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the retry options for the HTTP pipeline retry policy.
         * <p>
         * This setting has no effect, if retry policy is set via {@link #withRetryPolicy(RetryPolicy)}.
         *
         * @param retryOptions the retry options for the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryOptions(RetryOptions retryOptions) {
            this.retryOptions = Objects.requireNonNull(retryOptions, "'retryOptions' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval
                = Objects.requireNonNull(defaultPollInterval, "'defaultPollInterval' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw LOGGER
                    .logExceptionAsError(new IllegalArgumentException("'defaultPollInterval' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of Avs service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the Avs service API instance.
         */
        public AvsManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder.append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.avs")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder.append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (scopes.isEmpty()) {
                scopes.add(profile.getEnvironment().getManagementEndpoint() + "/.default");
            }
            if (retryPolicy == null) {
                if (retryOptions != null) {
                    retryPolicy = new RetryPolicy(retryOptions);
                } else {
                    retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
                }
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new AddHeadersFromContextPolicy());
            policies.add(new RequestIdPolicy());
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_CALL)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies.add(new ArmChallengeAuthenticationPolicy(credential, scopes.toArray(new String[0])));
            policies.addAll(this.policies.stream()
                .filter(p -> p.getPipelinePosition() == HttpPipelinePosition.PER_RETRY)
                .collect(Collectors.toList()));
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline = new HttpPipelineBuilder().httpClient(httpClient)
                .policies(policies.toArray(new HttpPipelinePolicy[0]))
                .build();
            return new AvsManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /**
     * Gets the resource collection API of Operations.
     * 
     * @return Resource collection API of Operations.
     */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /**
     * Gets the resource collection API of Locations.
     * 
     * @return Resource collection API of Locations.
     */
    public Locations locations() {
        if (this.locations == null) {
            this.locations = new LocationsImpl(clientObject.getLocations(), this);
        }
        return locations;
    }

    /**
     * Gets the resource collection API of PrivateClouds. It manages PrivateCloud.
     * 
     * @return Resource collection API of PrivateClouds.
     */
    public PrivateClouds privateClouds() {
        if (this.privateClouds == null) {
            this.privateClouds = new PrivateCloudsImpl(clientObject.getPrivateClouds(), this);
        }
        return privateClouds;
    }

    /**
     * Gets the resource collection API of Clusters. It manages Cluster.
     * 
     * @return Resource collection API of Clusters.
     */
    public Clusters clusters() {
        if (this.clusters == null) {
            this.clusters = new ClustersImpl(clientObject.getClusters(), this);
        }
        return clusters;
    }

    /**
     * Gets the resource collection API of Datastores. It manages Datastore.
     * 
     * @return Resource collection API of Datastores.
     */
    public Datastores datastores() {
        if (this.datastores == null) {
            this.datastores = new DatastoresImpl(clientObject.getDatastores(), this);
        }
        return datastores;
    }

    /**
     * Gets the resource collection API of HcxEnterpriseSites. It manages HcxEnterpriseSite.
     * 
     * @return Resource collection API of HcxEnterpriseSites.
     */
    public HcxEnterpriseSites hcxEnterpriseSites() {
        if (this.hcxEnterpriseSites == null) {
            this.hcxEnterpriseSites = new HcxEnterpriseSitesImpl(clientObject.getHcxEnterpriseSites(), this);
        }
        return hcxEnterpriseSites;
    }

    /**
     * Gets the resource collection API of Authorizations. It manages ExpressRouteAuthorization.
     * 
     * @return Resource collection API of Authorizations.
     */
    public Authorizations authorizations() {
        if (this.authorizations == null) {
            this.authorizations = new AuthorizationsImpl(clientObject.getAuthorizations(), this);
        }
        return authorizations;
    }

    /**
     * Gets the resource collection API of GlobalReachConnections. It manages GlobalReachConnection.
     * 
     * @return Resource collection API of GlobalReachConnections.
     */
    public GlobalReachConnections globalReachConnections() {
        if (this.globalReachConnections == null) {
            this.globalReachConnections
                = new GlobalReachConnectionsImpl(clientObject.getGlobalReachConnections(), this);
        }
        return globalReachConnections;
    }

    /**
     * Gets the resource collection API of WorkloadNetworks.
     * 
     * @return Resource collection API of WorkloadNetworks.
     */
    public WorkloadNetworks workloadNetworks() {
        if (this.workloadNetworks == null) {
            this.workloadNetworks = new WorkloadNetworksImpl(clientObject.getWorkloadNetworks(), this);
        }
        return workloadNetworks;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkSegments. It manages WorkloadNetworkSegment.
     * 
     * @return Resource collection API of WorkloadNetworkSegments.
     */
    public WorkloadNetworkSegments workloadNetworkSegments() {
        if (this.workloadNetworkSegments == null) {
            this.workloadNetworkSegments
                = new WorkloadNetworkSegmentsImpl(clientObject.getWorkloadNetworkSegments(), this);
        }
        return workloadNetworkSegments;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkDhcpConfigurations. It manages WorkloadNetworkDhcp.
     * 
     * @return Resource collection API of WorkloadNetworkDhcpConfigurations.
     */
    public WorkloadNetworkDhcpConfigurations workloadNetworkDhcpConfigurations() {
        if (this.workloadNetworkDhcpConfigurations == null) {
            this.workloadNetworkDhcpConfigurations
                = new WorkloadNetworkDhcpConfigurationsImpl(clientObject.getWorkloadNetworkDhcpConfigurations(), this);
        }
        return workloadNetworkDhcpConfigurations;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkGateways.
     * 
     * @return Resource collection API of WorkloadNetworkGateways.
     */
    public WorkloadNetworkGateways workloadNetworkGateways() {
        if (this.workloadNetworkGateways == null) {
            this.workloadNetworkGateways
                = new WorkloadNetworkGatewaysImpl(clientObject.getWorkloadNetworkGateways(), this);
        }
        return workloadNetworkGateways;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkPortMirroringProfiles. It manages
     * WorkloadNetworkPortMirroring.
     * 
     * @return Resource collection API of WorkloadNetworkPortMirroringProfiles.
     */
    public WorkloadNetworkPortMirroringProfiles workloadNetworkPortMirroringProfiles() {
        if (this.workloadNetworkPortMirroringProfiles == null) {
            this.workloadNetworkPortMirroringProfiles = new WorkloadNetworkPortMirroringProfilesImpl(
                clientObject.getWorkloadNetworkPortMirroringProfiles(), this);
        }
        return workloadNetworkPortMirroringProfiles;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkVmGroups. It manages WorkloadNetworkVMGroup.
     * 
     * @return Resource collection API of WorkloadNetworkVmGroups.
     */
    public WorkloadNetworkVmGroups workloadNetworkVmGroups() {
        if (this.workloadNetworkVmGroups == null) {
            this.workloadNetworkVmGroups
                = new WorkloadNetworkVmGroupsImpl(clientObject.getWorkloadNetworkVmGroups(), this);
        }
        return workloadNetworkVmGroups;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkVirtualMachines.
     * 
     * @return Resource collection API of WorkloadNetworkVirtualMachines.
     */
    public WorkloadNetworkVirtualMachines workloadNetworkVirtualMachines() {
        if (this.workloadNetworkVirtualMachines == null) {
            this.workloadNetworkVirtualMachines
                = new WorkloadNetworkVirtualMachinesImpl(clientObject.getWorkloadNetworkVirtualMachines(), this);
        }
        return workloadNetworkVirtualMachines;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkDnsServices. It manages WorkloadNetworkDnsService.
     * 
     * @return Resource collection API of WorkloadNetworkDnsServices.
     */
    public WorkloadNetworkDnsServices workloadNetworkDnsServices() {
        if (this.workloadNetworkDnsServices == null) {
            this.workloadNetworkDnsServices
                = new WorkloadNetworkDnsServicesImpl(clientObject.getWorkloadNetworkDnsServices(), this);
        }
        return workloadNetworkDnsServices;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkDnsZones. It manages WorkloadNetworkDnsZone.
     * 
     * @return Resource collection API of WorkloadNetworkDnsZones.
     */
    public WorkloadNetworkDnsZones workloadNetworkDnsZones() {
        if (this.workloadNetworkDnsZones == null) {
            this.workloadNetworkDnsZones
                = new WorkloadNetworkDnsZonesImpl(clientObject.getWorkloadNetworkDnsZones(), this);
        }
        return workloadNetworkDnsZones;
    }

    /**
     * Gets the resource collection API of WorkloadNetworkPublicIps. It manages WorkloadNetworkPublicIp.
     * 
     * @return Resource collection API of WorkloadNetworkPublicIps.
     */
    public WorkloadNetworkPublicIps workloadNetworkPublicIps() {
        if (this.workloadNetworkPublicIps == null) {
            this.workloadNetworkPublicIps
                = new WorkloadNetworkPublicIpsImpl(clientObject.getWorkloadNetworkPublicIps(), this);
        }
        return workloadNetworkPublicIps;
    }

    /**
     * Gets the resource collection API of CloudLinks. It manages CloudLink.
     * 
     * @return Resource collection API of CloudLinks.
     */
    public CloudLinks cloudLinks() {
        if (this.cloudLinks == null) {
            this.cloudLinks = new CloudLinksImpl(clientObject.getCloudLinks(), this);
        }
        return cloudLinks;
    }

    /**
     * Gets the resource collection API of Addons. It manages Addon.
     * 
     * @return Resource collection API of Addons.
     */
    public Addons addons() {
        if (this.addons == null) {
            this.addons = new AddonsImpl(clientObject.getAddons(), this);
        }
        return addons;
    }

    /**
     * Gets the resource collection API of VirtualMachines.
     * 
     * @return Resource collection API of VirtualMachines.
     */
    public VirtualMachines virtualMachines() {
        if (this.virtualMachines == null) {
            this.virtualMachines = new VirtualMachinesImpl(clientObject.getVirtualMachines(), this);
        }
        return virtualMachines;
    }

    /**
     * Gets the resource collection API of PlacementPolicies. It manages PlacementPolicy.
     * 
     * @return Resource collection API of PlacementPolicies.
     */
    public PlacementPolicies placementPolicies() {
        if (this.placementPolicies == null) {
            this.placementPolicies = new PlacementPoliciesImpl(clientObject.getPlacementPolicies(), this);
        }
        return placementPolicies;
    }

    /**
     * Gets the resource collection API of ScriptPackages.
     * 
     * @return Resource collection API of ScriptPackages.
     */
    public ScriptPackages scriptPackages() {
        if (this.scriptPackages == null) {
            this.scriptPackages = new ScriptPackagesImpl(clientObject.getScriptPackages(), this);
        }
        return scriptPackages;
    }

    /**
     * Gets the resource collection API of ScriptCmdlets.
     * 
     * @return Resource collection API of ScriptCmdlets.
     */
    public ScriptCmdlets scriptCmdlets() {
        if (this.scriptCmdlets == null) {
            this.scriptCmdlets = new ScriptCmdletsImpl(clientObject.getScriptCmdlets(), this);
        }
        return scriptCmdlets;
    }

    /**
     * Gets the resource collection API of ScriptExecutions. It manages ScriptExecution.
     * 
     * @return Resource collection API of ScriptExecutions.
     */
    public ScriptExecutions scriptExecutions() {
        if (this.scriptExecutions == null) {
            this.scriptExecutions = new ScriptExecutionsImpl(clientObject.getScriptExecutions(), this);
        }
        return scriptExecutions;
    }

    /**
     * Gets the resource collection API of IscsiPaths.
     * 
     * @return Resource collection API of IscsiPaths.
     */
    public IscsiPaths iscsiPaths() {
        if (this.iscsiPaths == null) {
            this.iscsiPaths = new IscsiPathsImpl(clientObject.getIscsiPaths(), this);
        }
        return iscsiPaths;
    }

    /**
     * Gets wrapped service client AvsClient providing direct access to the underlying auto-generated API
     * implementation, based on Azure REST API.
     * 
     * @return Wrapped service client AvsClient.
     */
    public AvsClient serviceClient() {
        return this.clientObject;
    }
}
