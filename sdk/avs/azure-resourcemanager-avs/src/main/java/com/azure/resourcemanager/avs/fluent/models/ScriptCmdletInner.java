// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.models.ScriptParameter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** A cmdlet available for script execution. */
@JsonFlatten
@Immutable
public class ScriptCmdletInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ScriptCmdletInner.class);

    /*
     * Description of the scripts functionality
     */
    @JsonProperty(value = "properties.description", access = JsonProperty.Access.WRITE_ONLY)
    private String description;

    /*
     * Recommended time limit for execution
     */
    @JsonProperty(value = "properties.timeout", access = JsonProperty.Access.WRITE_ONLY)
    private String timeout;

    /*
     * Parameters the script will accept
     */
    @JsonProperty(value = "properties.parameters", access = JsonProperty.Access.WRITE_ONLY)
    private List<ScriptParameter> parameters;

    /**
     * Get the description property: Description of the scripts functionality.
     *
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the timeout property: Recommended time limit for execution.
     *
     * @return the timeout value.
     */
    public String timeout() {
        return this.timeout;
    }

    /**
     * Get the parameters property: Parameters the script will accept.
     *
     * @return the parameters value.
     */
    public List<ScriptParameter> parameters() {
        return this.parameters;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (parameters() != null) {
            parameters().forEach(e -> e.validate());
        }
    }
}
