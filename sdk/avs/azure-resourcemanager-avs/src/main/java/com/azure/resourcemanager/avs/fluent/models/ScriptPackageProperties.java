// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.ScriptPackageProvisioningState;
import java.io.IOException;

/**
 * Properties of a Script Package subresource.
 */
@Immutable
public final class ScriptPackageProperties implements JsonSerializable<ScriptPackageProperties> {
    /*
     * The provisioning state of the resource.
     */
    private ScriptPackageProvisioningState provisioningState;

    /*
     * User friendly description of the package
     */
    private String description;

    /*
     * Module version
     */
    private String version;

    /*
     * Company that created and supports the package
     */
    private String company;

    /*
     * Link to support by the package vendor
     */
    private String uri;

    /**
     * Creates an instance of ScriptPackageProperties class.
     */
    public ScriptPackageProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ScriptPackageProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the description property: User friendly description of the package.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the version property: Module version.
     * 
     * @return the version value.
     */
    public String version() {
        return this.version;
    }

    /**
     * Get the company property: Company that created and supports the package.
     * 
     * @return the company value.
     */
    public String company() {
        return this.company;
    }

    /**
     * Get the uri property: Link to support by the package vendor.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptPackageProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptPackageProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptPackageProperties.
     */
    public static ScriptPackageProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptPackageProperties deserializedScriptPackageProperties = new ScriptPackageProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedScriptPackageProperties.provisioningState
                        = ScriptPackageProvisioningState.fromString(reader.getString());
                } else if ("description".equals(fieldName)) {
                    deserializedScriptPackageProperties.description = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedScriptPackageProperties.version = reader.getString();
                } else if ("company".equals(fieldName)) {
                    deserializedScriptPackageProperties.company = reader.getString();
                } else if ("uri".equals(fieldName)) {
                    deserializedScriptPackageProperties.uri = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptPackageProperties;
        });
    }
}
