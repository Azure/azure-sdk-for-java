// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * state of the maintenance.
 */
@Immutable
public final class MaintenanceState implements JsonSerializable<MaintenanceState> {
    /*
     * Customer presentable maintenance state
     */
    private MaintenanceStateName name;

    /*
     * Failure/Success info
     */
    private String message;

    /*
     * Time when current state started
     */
    private OffsetDateTime startedAt;

    /*
     * Time when current state ended
     */
    private OffsetDateTime endedAt;

    /**
     * Creates an instance of MaintenanceState class.
     */
    private MaintenanceState() {
    }

    /**
     * Get the name property: Customer presentable maintenance state.
     * 
     * @return the name value.
     */
    public MaintenanceStateName name() {
        return this.name;
    }

    /**
     * Get the message property: Failure/Success info.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the startedAt property: Time when current state started.
     * 
     * @return the startedAt value.
     */
    public OffsetDateTime startedAt() {
        return this.startedAt;
    }

    /**
     * Get the endedAt property: Time when current state ended.
     * 
     * @return the endedAt value.
     */
    public OffsetDateTime endedAt() {
        return this.endedAt;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name == null ? null : this.name.toString());
        jsonWriter.writeStringField("message", this.message);
        jsonWriter.writeStringField("startedAt",
            this.startedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startedAt));
        jsonWriter.writeStringField("endedAt",
            this.endedAt == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endedAt));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceState from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceState if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceState.
     */
    public static MaintenanceState fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceState deserializedMaintenanceState = new MaintenanceState();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMaintenanceState.name = MaintenanceStateName.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedMaintenanceState.message = reader.getString();
                } else if ("startedAt".equals(fieldName)) {
                    deserializedMaintenanceState.startedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endedAt".equals(fieldName)) {
                    deserializedMaintenanceState.endedAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceState;
        });
    }
}
