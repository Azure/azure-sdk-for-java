// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;

/** The arguments passed in to the execution. */
@JsonTypeInfo(
    use = JsonTypeInfo.Id.NAME,
    include = JsonTypeInfo.As.PROPERTY,
    property = "type",
    defaultImpl = ScriptExecutionParameter.class)
@JsonTypeName("ScriptExecutionParameter")
@JsonSubTypes({
    @JsonSubTypes.Type(name = "SecureValue", value = ScriptSecureStringExecutionParameter.class),
    @JsonSubTypes.Type(name = "Value", value = ScriptStringExecutionParameter.class),
    @JsonSubTypes.Type(name = "Credential", value = PSCredentialExecutionParameter.class)
})
@Fluent
public class ScriptExecutionParameter {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ScriptExecutionParameter.class);

    /*
     * The parameter name
     */
    @JsonProperty(value = "name", required = true)
    private String name;

    /**
     * Get the name property: The parameter name.
     *
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The parameter name.
     *
     * @param name the name value to set.
     * @return the ScriptExecutionParameter object itself.
     */
    public ScriptExecutionParameter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (name() == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException("Missing required property name in model ScriptExecutionParameter"));
        }
    }
}
