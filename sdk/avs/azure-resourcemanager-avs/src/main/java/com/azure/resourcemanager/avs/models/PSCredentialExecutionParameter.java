// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * a powershell credential object.
 */
@Fluent
public final class PSCredentialExecutionParameter extends ScriptExecutionParameter {
    /*
     * script execution parameter type
     */
    private ScriptExecutionParameterType type = ScriptExecutionParameterType.CREDENTIAL;

    /*
     * username for login
     */
    private String username;

    /*
     * password for login
     */
    private String password;

    /**
     * Creates an instance of PSCredentialExecutionParameter class.
     */
    public PSCredentialExecutionParameter() {
    }

    /**
     * Get the type property: script execution parameter type.
     * 
     * @return the type value.
     */
    @Override
    public ScriptExecutionParameterType type() {
        return this.type;
    }

    /**
     * Get the username property: username for login.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: username for login.
     * 
     * @param username the username value to set.
     * @return the PSCredentialExecutionParameter object itself.
     */
    public PSCredentialExecutionParameter withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: password for login.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: password for login.
     * 
     * @param password the password value to set.
     * @return the PSCredentialExecutionParameter object itself.
     */
    public PSCredentialExecutionParameter withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public PSCredentialExecutionParameter withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", name());
        jsonWriter.writeStringField("type", this.type == null ? null : this.type.toString());
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PSCredentialExecutionParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PSCredentialExecutionParameter if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PSCredentialExecutionParameter.
     */
    public static PSCredentialExecutionParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PSCredentialExecutionParameter deserializedPSCredentialExecutionParameter
                = new PSCredentialExecutionParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedPSCredentialExecutionParameter.withName(reader.getString());
                } else if ("type".equals(fieldName)) {
                    deserializedPSCredentialExecutionParameter.type
                        = ScriptExecutionParameterType.fromString(reader.getString());
                } else if ("username".equals(fieldName)) {
                    deserializedPSCredentialExecutionParameter.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedPSCredentialExecutionParameter.password = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPSCredentialExecutionParameter;
        });
    }
}
