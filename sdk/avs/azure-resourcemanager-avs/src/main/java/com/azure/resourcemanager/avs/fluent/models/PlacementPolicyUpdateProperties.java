// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.AffinityStrength;
import com.azure.resourcemanager.avs.models.AzureHybridBenefitType;
import com.azure.resourcemanager.avs.models.PlacementPolicyState;
import java.io.IOException;
import java.util.List;

/**
 * The properties of a placement policy resource that may be updated.
 */
@Fluent
public final class PlacementPolicyUpdateProperties implements JsonSerializable<PlacementPolicyUpdateProperties> {
    /*
     * Whether the placement policy is enabled or disabled
     */
    private PlacementPolicyState state;

    /*
     * Virtual machine members list
     */
    private List<String> vmMembers;

    /*
     * Host members list
     */
    private List<String> hostMembers;

    /*
     * vm-host placement policy affinity strength (should/must)
     */
    private AffinityStrength affinityStrength;

    /*
     * placement policy azure hybrid benefit opt-in type
     */
    private AzureHybridBenefitType azureHybridBenefitType;

    /**
     * Creates an instance of PlacementPolicyUpdateProperties class.
     */
    public PlacementPolicyUpdateProperties() {
    }

    /**
     * Get the state property: Whether the placement policy is enabled or disabled.
     * 
     * @return the state value.
     */
    public PlacementPolicyState state() {
        return this.state;
    }

    /**
     * Set the state property: Whether the placement policy is enabled or disabled.
     * 
     * @param state the state value to set.
     * @return the PlacementPolicyUpdateProperties object itself.
     */
    public PlacementPolicyUpdateProperties withState(PlacementPolicyState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the vmMembers property: Virtual machine members list.
     * 
     * @return the vmMembers value.
     */
    public List<String> vmMembers() {
        return this.vmMembers;
    }

    /**
     * Set the vmMembers property: Virtual machine members list.
     * 
     * @param vmMembers the vmMembers value to set.
     * @return the PlacementPolicyUpdateProperties object itself.
     */
    public PlacementPolicyUpdateProperties withVmMembers(List<String> vmMembers) {
        this.vmMembers = vmMembers;
        return this;
    }

    /**
     * Get the hostMembers property: Host members list.
     * 
     * @return the hostMembers value.
     */
    public List<String> hostMembers() {
        return this.hostMembers;
    }

    /**
     * Set the hostMembers property: Host members list.
     * 
     * @param hostMembers the hostMembers value to set.
     * @return the PlacementPolicyUpdateProperties object itself.
     */
    public PlacementPolicyUpdateProperties withHostMembers(List<String> hostMembers) {
        this.hostMembers = hostMembers;
        return this;
    }

    /**
     * Get the affinityStrength property: vm-host placement policy affinity strength (should/must).
     * 
     * @return the affinityStrength value.
     */
    public AffinityStrength affinityStrength() {
        return this.affinityStrength;
    }

    /**
     * Set the affinityStrength property: vm-host placement policy affinity strength (should/must).
     * 
     * @param affinityStrength the affinityStrength value to set.
     * @return the PlacementPolicyUpdateProperties object itself.
     */
    public PlacementPolicyUpdateProperties withAffinityStrength(AffinityStrength affinityStrength) {
        this.affinityStrength = affinityStrength;
        return this;
    }

    /**
     * Get the azureHybridBenefitType property: placement policy azure hybrid benefit opt-in type.
     * 
     * @return the azureHybridBenefitType value.
     */
    public AzureHybridBenefitType azureHybridBenefitType() {
        return this.azureHybridBenefitType;
    }

    /**
     * Set the azureHybridBenefitType property: placement policy azure hybrid benefit opt-in type.
     * 
     * @param azureHybridBenefitType the azureHybridBenefitType value to set.
     * @return the PlacementPolicyUpdateProperties object itself.
     */
    public PlacementPolicyUpdateProperties withAzureHybridBenefitType(AzureHybridBenefitType azureHybridBenefitType) {
        this.azureHybridBenefitType = azureHybridBenefitType;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("state", this.state == null ? null : this.state.toString());
        jsonWriter.writeArrayField("vmMembers", this.vmMembers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("hostMembers", this.hostMembers, (writer, element) -> writer.writeString(element));
        jsonWriter.writeStringField("affinityStrength",
            this.affinityStrength == null ? null : this.affinityStrength.toString());
        jsonWriter.writeStringField("azureHybridBenefitType",
            this.azureHybridBenefitType == null ? null : this.azureHybridBenefitType.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PlacementPolicyUpdateProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PlacementPolicyUpdateProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PlacementPolicyUpdateProperties.
     */
    public static PlacementPolicyUpdateProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PlacementPolicyUpdateProperties deserializedPlacementPolicyUpdateProperties
                = new PlacementPolicyUpdateProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("state".equals(fieldName)) {
                    deserializedPlacementPolicyUpdateProperties.state
                        = PlacementPolicyState.fromString(reader.getString());
                } else if ("vmMembers".equals(fieldName)) {
                    List<String> vmMembers = reader.readArray(reader1 -> reader1.getString());
                    deserializedPlacementPolicyUpdateProperties.vmMembers = vmMembers;
                } else if ("hostMembers".equals(fieldName)) {
                    List<String> hostMembers = reader.readArray(reader1 -> reader1.getString());
                    deserializedPlacementPolicyUpdateProperties.hostMembers = hostMembers;
                } else if ("affinityStrength".equals(fieldName)) {
                    deserializedPlacementPolicyUpdateProperties.affinityStrength
                        = AffinityStrength.fromString(reader.getString());
                } else if ("azureHybridBenefitType".equals(fieldName)) {
                    deserializedPlacementPolicyUpdateProperties.azureHybridBenefitType
                        = AzureHybridBenefitType.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPlacementPolicyUpdateProperties;
        });
    }
}
