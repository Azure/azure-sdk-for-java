// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.WorkloadNetworkDnsServicesClient;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsServiceInner;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServices;

public final class WorkloadNetworkDnsServicesImpl implements WorkloadNetworkDnsServices {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadNetworkDnsServicesImpl.class);

    private final WorkloadNetworkDnsServicesClient innerClient;

    private final com.azure.resourcemanager.avs.AvsManager serviceManager;

    public WorkloadNetworkDnsServicesImpl(WorkloadNetworkDnsServicesClient innerClient,
        com.azure.resourcemanager.avs.AvsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkloadNetworkDnsService> listByWorkloadNetwork(String resourceGroupName,
        String privateCloudName) {
        PagedIterable<WorkloadNetworkDnsServiceInner> inner
            = this.serviceClient().listByWorkloadNetwork(resourceGroupName, privateCloudName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadNetworkDnsServiceImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadNetworkDnsService> listByWorkloadNetwork(String resourceGroupName,
        String privateCloudName, Context context) {
        PagedIterable<WorkloadNetworkDnsServiceInner> inner
            = this.serviceClient().listByWorkloadNetwork(resourceGroupName, privateCloudName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadNetworkDnsServiceImpl(inner1, this.manager()));
    }

    public Response<WorkloadNetworkDnsService> getWithResponse(String resourceGroupName, String privateCloudName,
        String dnsServiceId, Context context) {
        Response<WorkloadNetworkDnsServiceInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, privateCloudName, dnsServiceId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkloadNetworkDnsServiceImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkloadNetworkDnsService get(String resourceGroupName, String privateCloudName, String dnsServiceId) {
        WorkloadNetworkDnsServiceInner inner
            = this.serviceClient().get(resourceGroupName, privateCloudName, dnsServiceId);
        if (inner != null) {
            return new WorkloadNetworkDnsServiceImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String dnsServiceId, String privateCloudName) {
        this.serviceClient().delete(resourceGroupName, dnsServiceId, privateCloudName);
    }

    public void delete(String resourceGroupName, String dnsServiceId, String privateCloudName, Context context) {
        this.serviceClient().delete(resourceGroupName, dnsServiceId, privateCloudName, context);
    }

    public WorkloadNetworkDnsService getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String dnsServiceId = ResourceManagerUtils.getValueFromIdByName(id, "dnsServices");
        if (dnsServiceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsServices'.", id)));
        }
        return this.getWithResponse(resourceGroupName, privateCloudName, dnsServiceId, Context.NONE).getValue();
    }

    public Response<WorkloadNetworkDnsService> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String dnsServiceId = ResourceManagerUtils.getValueFromIdByName(id, "dnsServices");
        if (dnsServiceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsServices'.", id)));
        }
        return this.getWithResponse(resourceGroupName, privateCloudName, dnsServiceId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsServiceId = ResourceManagerUtils.getValueFromIdByName(id, "dnsServices");
        if (dnsServiceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsServices'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        this.delete(resourceGroupName, dnsServiceId, privateCloudName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsServiceId = ResourceManagerUtils.getValueFromIdByName(id, "dnsServices");
        if (dnsServiceId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsServices'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        this.delete(resourceGroupName, dnsServiceId, privateCloudName, context);
    }

    private WorkloadNetworkDnsServicesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.avs.AvsManager manager() {
        return this.serviceManager;
    }

    public WorkloadNetworkDnsServiceImpl define(String name) {
        return new WorkloadNetworkDnsServiceImpl(name, this.manager());
    }
}
