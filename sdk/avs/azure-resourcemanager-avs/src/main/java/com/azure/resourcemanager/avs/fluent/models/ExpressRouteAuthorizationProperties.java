// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.ExpressRouteAuthorizationProvisioningState;
import java.io.IOException;

/**
 * The properties of an ExpressRoute Circuit Authorization resource.
 */
@Fluent
public final class ExpressRouteAuthorizationProperties
    implements JsonSerializable<ExpressRouteAuthorizationProperties> {
    /*
     * The state of the ExpressRoute Circuit Authorization provisioning
     */
    private ExpressRouteAuthorizationProvisioningState provisioningState;

    /*
     * The ID of the ExpressRoute Circuit Authorization
     */
    private String expressRouteAuthorizationId;

    /*
     * The key of the ExpressRoute Circuit Authorization
     */
    private String expressRouteAuthorizationKey;

    /*
     * The ID of the ExpressRoute Circuit
     */
    private String expressRouteId;

    /**
     * Creates an instance of ExpressRouteAuthorizationProperties class.
     */
    public ExpressRouteAuthorizationProperties() {
    }

    /**
     * Get the provisioningState property: The state of the ExpressRoute Circuit Authorization provisioning.
     * 
     * @return the provisioningState value.
     */
    public ExpressRouteAuthorizationProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the expressRouteAuthorizationId property: The ID of the ExpressRoute Circuit Authorization.
     * 
     * @return the expressRouteAuthorizationId value.
     */
    public String expressRouteAuthorizationId() {
        return this.expressRouteAuthorizationId;
    }

    /**
     * Get the expressRouteAuthorizationKey property: The key of the ExpressRoute Circuit Authorization.
     * 
     * @return the expressRouteAuthorizationKey value.
     */
    public String expressRouteAuthorizationKey() {
        return this.expressRouteAuthorizationKey;
    }

    /**
     * Get the expressRouteId property: The ID of the ExpressRoute Circuit.
     * 
     * @return the expressRouteId value.
     */
    public String expressRouteId() {
        return this.expressRouteId;
    }

    /**
     * Set the expressRouteId property: The ID of the ExpressRoute Circuit.
     * 
     * @param expressRouteId the expressRouteId value to set.
     * @return the ExpressRouteAuthorizationProperties object itself.
     */
    public ExpressRouteAuthorizationProperties withExpressRouteId(String expressRouteId) {
        this.expressRouteId = expressRouteId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("expressRouteId", this.expressRouteId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ExpressRouteAuthorizationProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ExpressRouteAuthorizationProperties if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ExpressRouteAuthorizationProperties.
     */
    public static ExpressRouteAuthorizationProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ExpressRouteAuthorizationProperties deserializedExpressRouteAuthorizationProperties
                = new ExpressRouteAuthorizationProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedExpressRouteAuthorizationProperties.provisioningState
                        = ExpressRouteAuthorizationProvisioningState.fromString(reader.getString());
                } else if ("expressRouteAuthorizationId".equals(fieldName)) {
                    deserializedExpressRouteAuthorizationProperties.expressRouteAuthorizationId = reader.getString();
                } else if ("expressRouteAuthorizationKey".equals(fieldName)) {
                    deserializedExpressRouteAuthorizationProperties.expressRouteAuthorizationKey = reader.getString();
                } else if ("expressRouteId".equals(fieldName)) {
                    deserializedExpressRouteAuthorizationProperties.expressRouteId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedExpressRouteAuthorizationProperties;
        });
    }
}
