// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.GlobalReachConnectionProvisioningState;
import com.azure.resourcemanager.avs.models.GlobalReachConnectionStatus;
import java.io.IOException;

/**
 * The properties of a global reach connection.
 */
@Fluent
public final class GlobalReachConnectionProperties implements JsonSerializable<GlobalReachConnectionProperties> {
    /*
     * The state of the ExpressRoute Circuit Authorization provisioning
     */
    private GlobalReachConnectionProvisioningState provisioningState;

    /*
     * The network used for global reach carved out from the original network block
     * provided for the private cloud
     */
    private String addressPrefix;

    /*
     * Authorization key from the peer express route used for the global reach
     * connection
     */
    private String authorizationKey;

    /*
     * The connection status of the global reach connection
     */
    private GlobalReachConnectionStatus circuitConnectionStatus;

    /*
     * Identifier of the ExpressRoute Circuit to peer with in the global reach
     * connection
     */
    private String peerExpressRouteCircuit;

    /*
     * The ID of the Private Cloud's ExpressRoute Circuit that is participating in the
     * global reach connection
     */
    private String expressRouteId;

    /**
     * Creates an instance of GlobalReachConnectionProperties class.
     */
    public GlobalReachConnectionProperties() {
    }

    /**
     * Get the provisioningState property: The state of the ExpressRoute Circuit Authorization provisioning.
     * 
     * @return the provisioningState value.
     */
    public GlobalReachConnectionProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the addressPrefix property: The network used for global reach carved out from the original network block
     * provided for the private cloud.
     * 
     * @return the addressPrefix value.
     */
    public String addressPrefix() {
        return this.addressPrefix;
    }

    /**
     * Get the authorizationKey property: Authorization key from the peer express route used for the global reach
     * connection.
     * 
     * @return the authorizationKey value.
     */
    public String authorizationKey() {
        return this.authorizationKey;
    }

    /**
     * Set the authorizationKey property: Authorization key from the peer express route used for the global reach
     * connection.
     * 
     * @param authorizationKey the authorizationKey value to set.
     * @return the GlobalReachConnectionProperties object itself.
     */
    public GlobalReachConnectionProperties withAuthorizationKey(String authorizationKey) {
        this.authorizationKey = authorizationKey;
        return this;
    }

    /**
     * Get the circuitConnectionStatus property: The connection status of the global reach connection.
     * 
     * @return the circuitConnectionStatus value.
     */
    public GlobalReachConnectionStatus circuitConnectionStatus() {
        return this.circuitConnectionStatus;
    }

    /**
     * Get the peerExpressRouteCircuit property: Identifier of the ExpressRoute Circuit to peer with in the global reach
     * connection.
     * 
     * @return the peerExpressRouteCircuit value.
     */
    public String peerExpressRouteCircuit() {
        return this.peerExpressRouteCircuit;
    }

    /**
     * Set the peerExpressRouteCircuit property: Identifier of the ExpressRoute Circuit to peer with in the global reach
     * connection.
     * 
     * @param peerExpressRouteCircuit the peerExpressRouteCircuit value to set.
     * @return the GlobalReachConnectionProperties object itself.
     */
    public GlobalReachConnectionProperties withPeerExpressRouteCircuit(String peerExpressRouteCircuit) {
        this.peerExpressRouteCircuit = peerExpressRouteCircuit;
        return this;
    }

    /**
     * Get the expressRouteId property: The ID of the Private Cloud's ExpressRoute Circuit that is participating in the
     * global reach connection.
     * 
     * @return the expressRouteId value.
     */
    public String expressRouteId() {
        return this.expressRouteId;
    }

    /**
     * Set the expressRouteId property: The ID of the Private Cloud's ExpressRoute Circuit that is participating in the
     * global reach connection.
     * 
     * @param expressRouteId the expressRouteId value to set.
     * @return the GlobalReachConnectionProperties object itself.
     */
    public GlobalReachConnectionProperties withExpressRouteId(String expressRouteId) {
        this.expressRouteId = expressRouteId;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("authorizationKey", this.authorizationKey);
        jsonWriter.writeStringField("peerExpressRouteCircuit", this.peerExpressRouteCircuit);
        jsonWriter.writeStringField("expressRouteId", this.expressRouteId);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GlobalReachConnectionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GlobalReachConnectionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GlobalReachConnectionProperties.
     */
    public static GlobalReachConnectionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GlobalReachConnectionProperties deserializedGlobalReachConnectionProperties
                = new GlobalReachConnectionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedGlobalReachConnectionProperties.provisioningState
                        = GlobalReachConnectionProvisioningState.fromString(reader.getString());
                } else if ("addressPrefix".equals(fieldName)) {
                    deserializedGlobalReachConnectionProperties.addressPrefix = reader.getString();
                } else if ("authorizationKey".equals(fieldName)) {
                    deserializedGlobalReachConnectionProperties.authorizationKey = reader.getString();
                } else if ("circuitConnectionStatus".equals(fieldName)) {
                    deserializedGlobalReachConnectionProperties.circuitConnectionStatus
                        = GlobalReachConnectionStatus.fromString(reader.getString());
                } else if ("peerExpressRouteCircuit".equals(fieldName)) {
                    deserializedGlobalReachConnectionProperties.peerExpressRouteCircuit = reader.getString();
                } else if ("expressRouteId".equals(fieldName)) {
                    deserializedGlobalReachConnectionProperties.expressRouteId = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGlobalReachConnectionProperties;
        });
    }
}
