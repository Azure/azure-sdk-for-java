// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZoneProvisioningState;
import java.io.IOException;
import java.util.List;

/**
 * NSX DNS Zone.
 */
@Fluent
public final class WorkloadNetworkDnsZoneInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private WorkloadNetworkDnsZoneProperties innerProperties;

    /*
     * Azure Resource Manager metadata containing createdBy and modifiedBy information.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of WorkloadNetworkDnsZoneInner class.
     */
    public WorkloadNetworkDnsZoneInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private WorkloadNetworkDnsZoneProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: Azure Resource Manager metadata containing createdBy and modifiedBy information.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the displayName property: Display name of the DNS Zone.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.innerProperties() == null ? null : this.innerProperties().displayName();
    }

    /**
     * Set the displayName property: Display name of the DNS Zone.
     * 
     * @param displayName the displayName value to set.
     * @return the WorkloadNetworkDnsZoneInner object itself.
     */
    public WorkloadNetworkDnsZoneInner withDisplayName(String displayName) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadNetworkDnsZoneProperties();
        }
        this.innerProperties().withDisplayName(displayName);
        return this;
    }

    /**
     * Get the domain property: Domain names of the DNS Zone.
     * 
     * @return the domain value.
     */
    public List<String> domain() {
        return this.innerProperties() == null ? null : this.innerProperties().domain();
    }

    /**
     * Set the domain property: Domain names of the DNS Zone.
     * 
     * @param domain the domain value to set.
     * @return the WorkloadNetworkDnsZoneInner object itself.
     */
    public WorkloadNetworkDnsZoneInner withDomain(List<String> domain) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadNetworkDnsZoneProperties();
        }
        this.innerProperties().withDomain(domain);
        return this;
    }

    /**
     * Get the dnsServerIps property: DNS Server IP array of the DNS Zone.
     * 
     * @return the dnsServerIps value.
     */
    public List<String> dnsServerIps() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsServerIps();
    }

    /**
     * Set the dnsServerIps property: DNS Server IP array of the DNS Zone.
     * 
     * @param dnsServerIps the dnsServerIps value to set.
     * @return the WorkloadNetworkDnsZoneInner object itself.
     */
    public WorkloadNetworkDnsZoneInner withDnsServerIps(List<String> dnsServerIps) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadNetworkDnsZoneProperties();
        }
        this.innerProperties().withDnsServerIps(dnsServerIps);
        return this;
    }

    /**
     * Get the sourceIp property: Source IP of the DNS Zone.
     * 
     * @return the sourceIp value.
     */
    public String sourceIp() {
        return this.innerProperties() == null ? null : this.innerProperties().sourceIp();
    }

    /**
     * Set the sourceIp property: Source IP of the DNS Zone.
     * 
     * @param sourceIp the sourceIp value to set.
     * @return the WorkloadNetworkDnsZoneInner object itself.
     */
    public WorkloadNetworkDnsZoneInner withSourceIp(String sourceIp) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadNetworkDnsZoneProperties();
        }
        this.innerProperties().withSourceIp(sourceIp);
        return this;
    }

    /**
     * Get the dnsServices property: Number of DNS Services using the DNS zone.
     * 
     * @return the dnsServices value.
     */
    public Long dnsServices() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsServices();
    }

    /**
     * Set the dnsServices property: Number of DNS Services using the DNS zone.
     * 
     * @param dnsServices the dnsServices value to set.
     * @return the WorkloadNetworkDnsZoneInner object itself.
     */
    public WorkloadNetworkDnsZoneInner withDnsServices(Long dnsServices) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadNetworkDnsZoneProperties();
        }
        this.innerProperties().withDnsServices(dnsServices);
        return this;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public WorkloadNetworkDnsZoneProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Get the revision property: NSX revision number.
     * 
     * @return the revision value.
     */
    public Long revision() {
        return this.innerProperties() == null ? null : this.innerProperties().revision();
    }

    /**
     * Set the revision property: NSX revision number.
     * 
     * @param revision the revision value to set.
     * @return the WorkloadNetworkDnsZoneInner object itself.
     */
    public WorkloadNetworkDnsZoneInner withRevision(Long revision) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WorkloadNetworkDnsZoneProperties();
        }
        this.innerProperties().withRevision(revision);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WorkloadNetworkDnsZoneInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WorkloadNetworkDnsZoneInner if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WorkloadNetworkDnsZoneInner.
     */
    public static WorkloadNetworkDnsZoneInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WorkloadNetworkDnsZoneInner deserializedWorkloadNetworkDnsZoneInner = new WorkloadNetworkDnsZoneInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneInner.innerProperties
                        = WorkloadNetworkDnsZoneProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedWorkloadNetworkDnsZoneInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWorkloadNetworkDnsZoneInner;
        });
    }
}
