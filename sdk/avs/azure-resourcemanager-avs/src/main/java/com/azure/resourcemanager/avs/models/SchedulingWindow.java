// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Time window in which Customer has option to schedule maintenance.
 */
@Immutable
public final class SchedulingWindow extends ScheduleOperationConstraint {
    /*
     * The kind of operation
     */
    private ScheduleOperationConstraintKind kind = ScheduleOperationConstraintKind.SCHEDULING_WINDOW;

    /*
     * Start date time
     */
    private OffsetDateTime startsAt;

    /*
     * End date Time
     */
    private OffsetDateTime endsAt;

    /**
     * Creates an instance of SchedulingWindow class.
     */
    private SchedulingWindow() {
    }

    /**
     * Get the kind property: The kind of operation.
     * 
     * @return the kind value.
     */
    @Override
    public ScheduleOperationConstraintKind kind() {
        return this.kind;
    }

    /**
     * Get the startsAt property: Start date time.
     * 
     * @return the startsAt value.
     */
    public OffsetDateTime startsAt() {
        return this.startsAt;
    }

    /**
     * Get the endsAt property: End date Time.
     * 
     * @return the endsAt value.
     */
    public OffsetDateTime endsAt() {
        return this.endsAt;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SchedulingWindow from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SchedulingWindow if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the SchedulingWindow.
     */
    public static SchedulingWindow fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SchedulingWindow deserializedSchedulingWindow = new SchedulingWindow();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startsAt".equals(fieldName)) {
                    deserializedSchedulingWindow.startsAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endsAt".equals(fieldName)) {
                    deserializedSchedulingWindow.endsAt = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    deserializedSchedulingWindow.kind = ScheduleOperationConstraintKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSchedulingWindow;
        });
    }
}
