// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.ProxyResource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.models.CloudLinkStatus;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** A cloud link resource. */
@JsonFlatten
@Fluent
public class CloudLinkInner extends ProxyResource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(CloudLinkInner.class);

    /*
     * The state of the cloud link.
     */
    @JsonProperty(value = "properties.status", access = JsonProperty.Access.WRITE_ONLY)
    private CloudLinkStatus status;

    /*
     * Identifier of the other private cloud participating in the link.
     */
    @JsonProperty(value = "properties.linkedCloud")
    private String linkedCloud;

    /**
     * Get the status property: The state of the cloud link.
     *
     * @return the status value.
     */
    public CloudLinkStatus status() {
        return this.status;
    }

    /**
     * Get the linkedCloud property: Identifier of the other private cloud participating in the link.
     *
     * @return the linkedCloud value.
     */
    public String linkedCloud() {
        return this.linkedCloud;
    }

    /**
     * Set the linkedCloud property: Identifier of the other private cloud participating in the link.
     *
     * @param linkedCloud the linkedCloud value to set.
     * @return the CloudLinkInner object itself.
     */
    public CloudLinkInner withLinkedCloud(String linkedCloud) {
        this.linkedCloud = linkedCloud;
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
