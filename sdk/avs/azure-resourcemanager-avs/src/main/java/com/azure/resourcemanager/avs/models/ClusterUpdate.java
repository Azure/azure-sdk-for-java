// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.fluent.models.ClusterUpdateProperties;
import java.io.IOException;
import java.util.List;

/**
 * An update of a cluster resource.
 */
@Fluent
public final class ClusterUpdate implements JsonSerializable<ClusterUpdate> {
    /*
     * The SKU (Stock Keeping Unit) assigned to this resource.
     */
    private Sku sku;

    /*
     * The properties of a cluster resource that may be updated
     */
    private ClusterUpdateProperties innerProperties;

    /**
     * Creates an instance of ClusterUpdate class.
     */
    public ClusterUpdate() {
    }

    /**
     * Get the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @param sku the sku value to set.
     * @return the ClusterUpdate object itself.
     */
    public ClusterUpdate withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the innerProperties property: The properties of a cluster resource that may be updated.
     * 
     * @return the innerProperties value.
     */
    private ClusterUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the clusterSize property: The cluster size.
     * 
     * @return the clusterSize value.
     */
    public Integer clusterSize() {
        return this.innerProperties() == null ? null : this.innerProperties().clusterSize();
    }

    /**
     * Set the clusterSize property: The cluster size.
     * 
     * @param clusterSize the clusterSize value to set.
     * @return the ClusterUpdate object itself.
     */
    public ClusterUpdate withClusterSize(Integer clusterSize) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterUpdateProperties();
        }
        this.innerProperties().withClusterSize(clusterSize);
        return this;
    }

    /**
     * Get the hosts property: The hosts.
     * 
     * @return the hosts value.
     */
    public List<String> hosts() {
        return this.innerProperties() == null ? null : this.innerProperties().hosts();
    }

    /**
     * Set the hosts property: The hosts.
     * 
     * @param hosts the hosts value to set.
     * @return the ClusterUpdate object itself.
     */
    public ClusterUpdate withHosts(List<String> hosts) {
        if (this.innerProperties() == null) {
            this.innerProperties = new ClusterUpdateProperties();
        }
        this.innerProperties().withHosts(hosts);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ClusterUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ClusterUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ClusterUpdate.
     */
    public static ClusterUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ClusterUpdate deserializedClusterUpdate = new ClusterUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sku".equals(fieldName)) {
                    deserializedClusterUpdate.sku = Sku.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedClusterUpdate.innerProperties = ClusterUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedClusterUpdate;
        });
    }
}
