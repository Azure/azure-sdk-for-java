// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent;

import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.polling.SyncPoller;
import com.azure.resourcemanager.avs.fluent.models.DatastoreInner;

/** An instance of this class provides access to all the operations defined in DatastoresClient. */
public interface DatastoresClient {
    /**
     * List datastores in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of datastores.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatastoreInner> list(String resourceGroupName, String privateCloudName, String clusterName);

    /**
     * List datastores in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a paged list of datastores.
     */
    @ServiceMethod(returns = ReturnType.COLLECTION)
    PagedIterable<DatastoreInner> list(
        String resourceGroupName, String privateCloudName, String clusterName, Context context);

    /**
     * Get a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a datastore in a private cloud cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatastoreInner get(String resourceGroupName, String privateCloudName, String clusterName, String datastoreName);

    /**
     * Get a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a datastore in a private cloud cluster.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    Response<DatastoreInner> getWithResponse(
        String resourceGroupName, String privateCloudName, String clusterName, String datastoreName, Context context);

    /**
     * Create or update a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param datastore A datastore in a private cloud cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a datastore resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<DatastoreInner>, DatastoreInner> beginCreateOrUpdate(
        String resourceGroupName,
        String privateCloudName,
        String clusterName,
        String datastoreName,
        DatastoreInner datastore);

    /**
     * Create or update a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param datastore A datastore in a private cloud cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a datastore resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<DatastoreInner>, DatastoreInner> beginCreateOrUpdate(
        String resourceGroupName,
        String privateCloudName,
        String clusterName,
        String datastoreName,
        DatastoreInner datastore,
        Context context);

    /**
     * Create or update a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param datastore A datastore in a private cloud cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a datastore resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatastoreInner createOrUpdate(
        String resourceGroupName,
        String privateCloudName,
        String clusterName,
        String datastoreName,
        DatastoreInner datastore);

    /**
     * Create or update a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param datastore A datastore in a private cloud cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a datastore resource.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    DatastoreInner createOrUpdate(
        String resourceGroupName,
        String privateCloudName,
        String clusterName,
        String datastoreName,
        DatastoreInner datastore,
        Context context);

    /**
     * Delete a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String privateCloudName, String clusterName, String datastoreName);

    /**
     * Delete a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    SyncPoller<PollResult<Void>, Void> beginDelete(
        String resourceGroupName, String privateCloudName, String clusterName, String datastoreName, Context context);

    /**
     * Delete a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(String resourceGroupName, String privateCloudName, String clusterName, String datastoreName);

    /**
     * Delete a datastore in a private cloud cluster.
     *
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param clusterName Name of the cluster in the private cloud.
     * @param datastoreName Name of the datastore in the private cloud cluster.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    void delete(
        String resourceGroupName, String privateCloudName, String clusterName, String datastoreName, Context context);
}
