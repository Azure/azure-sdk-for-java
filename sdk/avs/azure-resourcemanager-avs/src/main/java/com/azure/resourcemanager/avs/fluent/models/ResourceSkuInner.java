// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.ResourceSkuCapabilities;
import com.azure.resourcemanager.avs.models.ResourceSkuLocationInfo;
import com.azure.resourcemanager.avs.models.ResourceSkuResourceType;
import com.azure.resourcemanager.avs.models.ResourceSkuRestrictions;
import java.io.IOException;
import java.util.List;

/**
 * A SKU for a resource.
 */
@Immutable
public final class ResourceSkuInner implements JsonSerializable<ResourceSkuInner> {
    /*
     * The type of resource the SKU applies to.
     */
    private ResourceSkuResourceType resourceType;

    /*
     * The name of the SKU.
     */
    private String name;

    /*
     * The tier of virtual machines in a scale set
     */
    private String tier;

    /*
     * The size of the SKU.
     */
    private String size;

    /*
     * The family of the SKU.
     */
    private String family;

    /*
     * The set of locations that the SKU is available.
     */
    private List<String> locations;

    /*
     * A list of locations and availability zones in those locations where the SKU is available
     */
    private List<ResourceSkuLocationInfo> locationInfo;

    /*
     * Name value pairs to describe the capability.
     */
    private List<ResourceSkuCapabilities> capabilities;

    /*
     * The restrictions of the SKU.
     */
    private List<ResourceSkuRestrictions> restrictions;

    /**
     * Creates an instance of ResourceSkuInner class.
     */
    private ResourceSkuInner() {
    }

    /**
     * Get the resourceType property: The type of resource the SKU applies to.
     * 
     * @return the resourceType value.
     */
    public ResourceSkuResourceType resourceType() {
        return this.resourceType;
    }

    /**
     * Get the name property: The name of the SKU.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the tier property: The tier of virtual machines in a scale set.
     * 
     * @return the tier value.
     */
    public String tier() {
        return this.tier;
    }

    /**
     * Get the size property: The size of the SKU.
     * 
     * @return the size value.
     */
    public String size() {
        return this.size;
    }

    /**
     * Get the family property: The family of the SKU.
     * 
     * @return the family value.
     */
    public String family() {
        return this.family;
    }

    /**
     * Get the locations property: The set of locations that the SKU is available.
     * 
     * @return the locations value.
     */
    public List<String> locations() {
        return this.locations;
    }

    /**
     * Get the locationInfo property: A list of locations and availability zones in those locations where the SKU is
     * available.
     * 
     * @return the locationInfo value.
     */
    public List<ResourceSkuLocationInfo> locationInfo() {
        return this.locationInfo;
    }

    /**
     * Get the capabilities property: Name value pairs to describe the capability.
     * 
     * @return the capabilities value.
     */
    public List<ResourceSkuCapabilities> capabilities() {
        return this.capabilities;
    }

    /**
     * Get the restrictions property: The restrictions of the SKU.
     * 
     * @return the restrictions value.
     */
    public List<ResourceSkuRestrictions> restrictions() {
        return this.restrictions;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (resourceType() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property resourceType in model ResourceSkuInner"));
        }
        if (name() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property name in model ResourceSkuInner"));
        }
        if (locations() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property locations in model ResourceSkuInner"));
        }
        if (locationInfo() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property locationInfo in model ResourceSkuInner"));
        } else {
            locationInfo().forEach(e -> e.validate());
        }
        if (capabilities() != null) {
            capabilities().forEach(e -> e.validate());
        }
        if (restrictions() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException("Missing required property restrictions in model ResourceSkuInner"));
        } else {
            restrictions().forEach(e -> e.validate());
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(ResourceSkuInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("resourceType", this.resourceType == null ? null : this.resourceType.toString());
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeArrayField("locations", this.locations, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("locationInfo", this.locationInfo, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("restrictions", this.restrictions, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("tier", this.tier);
        jsonWriter.writeStringField("size", this.size);
        jsonWriter.writeStringField("family", this.family);
        jsonWriter.writeArrayField("capabilities", this.capabilities, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ResourceSkuInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ResourceSkuInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the ResourceSkuInner.
     */
    public static ResourceSkuInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ResourceSkuInner deserializedResourceSkuInner = new ResourceSkuInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("resourceType".equals(fieldName)) {
                    deserializedResourceSkuInner.resourceType = ResourceSkuResourceType.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedResourceSkuInner.name = reader.getString();
                } else if ("locations".equals(fieldName)) {
                    List<String> locations = reader.readArray(reader1 -> reader1.getString());
                    deserializedResourceSkuInner.locations = locations;
                } else if ("locationInfo".equals(fieldName)) {
                    List<ResourceSkuLocationInfo> locationInfo
                        = reader.readArray(reader1 -> ResourceSkuLocationInfo.fromJson(reader1));
                    deserializedResourceSkuInner.locationInfo = locationInfo;
                } else if ("restrictions".equals(fieldName)) {
                    List<ResourceSkuRestrictions> restrictions
                        = reader.readArray(reader1 -> ResourceSkuRestrictions.fromJson(reader1));
                    deserializedResourceSkuInner.restrictions = restrictions;
                } else if ("tier".equals(fieldName)) {
                    deserializedResourceSkuInner.tier = reader.getString();
                } else if ("size".equals(fieldName)) {
                    deserializedResourceSkuInner.size = reader.getString();
                } else if ("family".equals(fieldName)) {
                    deserializedResourceSkuInner.family = reader.getString();
                } else if ("capabilities".equals(fieldName)) {
                    List<ResourceSkuCapabilities> capabilities
                        = reader.readArray(reader1 -> ResourceSkuCapabilities.fromJson(reader1));
                    deserializedResourceSkuInner.capabilities = capabilities;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedResourceSkuInner;
        });
    }
}
