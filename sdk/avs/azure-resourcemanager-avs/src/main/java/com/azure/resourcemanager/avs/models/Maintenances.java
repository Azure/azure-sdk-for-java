// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.time.OffsetDateTime;

/**
 * Resource collection API of Maintenances.
 */
public interface Maintenances {
    /**
     * List Maintenance resources by subscription ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Maintenance list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Maintenance> list(String resourceGroupName, String privateCloudName);

    /**
     * List Maintenance resources by subscription ID.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param stateName Filter maintenances based on state.
     * @param status Filter active or inactive maintenances.
     * @param from date from which result should be returned. ie. scheduledStartTime &gt;= from.
     * @param to date till which result should be returned. i.e. scheduledStartTime &lt;= to.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response of a Maintenance list operation as paginated response with {@link PagedIterable}.
     */
    PagedIterable<Maintenance> list(String resourceGroupName, String privateCloudName, MaintenanceStateName stateName,
        MaintenanceStatusFilter status, OffsetDateTime from, OffsetDateTime to, Context context);

    /**
     * Get a Maintenance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Maintenance along with {@link Response}.
     */
    Response<Maintenance> getWithResponse(String resourceGroupName, String privateCloudName, String maintenanceName,
        Context context);

    /**
     * Get a Maintenance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a Maintenance.
     */
    Maintenance get(String resourceGroupName, String privateCloudName, String maintenanceName);

    /**
     * Reschedule a maintenance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a cluster resource along with {@link Response}.
     */
    Response<Maintenance> rescheduleWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, MaintenanceReschedule body, Context context);

    /**
     * Reschedule a maintenance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a cluster resource.
     */
    Maintenance reschedule(String resourceGroupName, String privateCloudName, String maintenanceName,
        MaintenanceReschedule body);

    /**
     * Schedule a maintenance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @param body The content of the action request.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a cluster resource along with {@link Response}.
     */
    Response<Maintenance> scheduleWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, MaintenanceSchedule body, Context context);

    /**
     * Schedule a maintenance.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @param body The content of the action request.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a cluster resource.
     */
    Maintenance schedule(String resourceGroupName, String privateCloudName, String maintenanceName,
        MaintenanceSchedule body);

    /**
     * Initiate maintenance readiness checks.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a cluster resource along with {@link Response}.
     */
    Response<Maintenance> initiateChecksWithResponse(String resourceGroupName, String privateCloudName,
        String maintenanceName, Context context);

    /**
     * Initiate maintenance readiness checks.
     * 
     * @param resourceGroupName The name of the resource group. The name is case insensitive.
     * @param privateCloudName Name of the private cloud.
     * @param maintenanceName Name of the maintenance.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a cluster resource.
     */
    Maintenance initiateChecks(String resourceGroupName, String privateCloudName, String maintenanceName);
}
