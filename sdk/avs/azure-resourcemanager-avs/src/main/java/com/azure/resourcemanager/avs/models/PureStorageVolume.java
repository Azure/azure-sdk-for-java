// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * A Pure Storage volume from PureStorage.Block provider.
 */
@Fluent
public final class PureStorageVolume implements JsonSerializable<PureStorageVolume> {
    /*
     * Azure resource ID of the Pure Storage Pool
     */
    private String storagePoolId;

    /*
     * Volume size to be used to create a Virtual Volumes (vVols) datastore
     */
    private int sizeGb;

    /**
     * Creates an instance of PureStorageVolume class.
     */
    public PureStorageVolume() {
    }

    /**
     * Get the storagePoolId property: Azure resource ID of the Pure Storage Pool.
     * 
     * @return the storagePoolId value.
     */
    public String storagePoolId() {
        return this.storagePoolId;
    }

    /**
     * Set the storagePoolId property: Azure resource ID of the Pure Storage Pool.
     * 
     * @param storagePoolId the storagePoolId value to set.
     * @return the PureStorageVolume object itself.
     */
    public PureStorageVolume withStoragePoolId(String storagePoolId) {
        this.storagePoolId = storagePoolId;
        return this;
    }

    /**
     * Get the sizeGb property: Volume size to be used to create a Virtual Volumes (vVols) datastore.
     * 
     * @return the sizeGb value.
     */
    public int sizeGb() {
        return this.sizeGb;
    }

    /**
     * Set the sizeGb property: Volume size to be used to create a Virtual Volumes (vVols) datastore.
     * 
     * @param sizeGb the sizeGb value to set.
     * @return the PureStorageVolume object itself.
     */
    public PureStorageVolume withSizeGb(int sizeGb) {
        this.sizeGb = sizeGb;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storagePoolId() == null) {
            throw LOGGER.atError()
                .log(
                    new IllegalArgumentException("Missing required property storagePoolId in model PureStorageVolume"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(PureStorageVolume.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("storagePoolId", this.storagePoolId);
        jsonWriter.writeIntField("sizeGb", this.sizeGb);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PureStorageVolume from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PureStorageVolume if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the PureStorageVolume.
     */
    public static PureStorageVolume fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PureStorageVolume deserializedPureStorageVolume = new PureStorageVolume();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storagePoolId".equals(fieldName)) {
                    deserializedPureStorageVolume.storagePoolId = reader.getString();
                } else if ("sizeGb".equals(fieldName)) {
                    deserializedPureStorageVolume.sizeGb = reader.getInt();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPureStorageVolume;
        });
    }
}
