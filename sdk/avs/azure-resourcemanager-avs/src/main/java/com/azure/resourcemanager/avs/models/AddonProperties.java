// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;

/** The properties of an addon that may be updated. */
@Fluent
public final class AddonProperties extends AddonSrmProperties {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(AddonProperties.class);

    /*
     * The type of private cloud addon
     */
    @JsonProperty(value = "addonType")
    private AddonType addonType;

    /*
     * The state of the addon provisioning
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private AddonProvisioningState provisioningState;

    /**
     * Get the addonType property: The type of private cloud addon.
     *
     * @return the addonType value.
     */
    public AddonType addonType() {
        return this.addonType;
    }

    /**
     * Set the addonType property: The type of private cloud addon.
     *
     * @param addonType the addonType value to set.
     * @return the AddonProperties object itself.
     */
    public AddonProperties withAddonType(AddonType addonType) {
        this.addonType = addonType;
        return this;
    }

    /**
     * Get the provisioningState property: The state of the addon provisioning.
     *
     * @return the provisioningState value.
     */
    public AddonProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /** {@inheritDoc} */
    @Override
    public AddonProperties withLicenseKey(String licenseKey) {
        super.withLicenseKey(licenseKey);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}
