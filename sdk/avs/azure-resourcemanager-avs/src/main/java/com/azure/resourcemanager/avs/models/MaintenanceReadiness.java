// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Maintenance readiness details.
 */
@Immutable
public final class MaintenanceReadiness implements JsonSerializable<MaintenanceReadiness> {
    /*
     * The type of maintenance readiness check
     */
    private MaintenanceCheckType type;

    /*
     * The current readiness status of maintenance
     */
    private MaintenanceReadinessStatus status;

    /*
     * A summary message of the readiness check result
     */
    private String message;

    /*
     * A list of failed checks, if any
     */
    private List<MaintenanceFailedCheck> failedChecks;

    /*
     * The timestamp of the last readiness update
     */
    private OffsetDateTime lastUpdated;

    /**
     * Creates an instance of MaintenanceReadiness class.
     */
    private MaintenanceReadiness() {
    }

    /**
     * Get the type property: The type of maintenance readiness check.
     * 
     * @return the type value.
     */
    public MaintenanceCheckType type() {
        return this.type;
    }

    /**
     * Get the status property: The current readiness status of maintenance.
     * 
     * @return the status value.
     */
    public MaintenanceReadinessStatus status() {
        return this.status;
    }

    /**
     * Get the message property: A summary message of the readiness check result.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Get the failedChecks property: A list of failed checks, if any.
     * 
     * @return the failedChecks value.
     */
    public List<MaintenanceFailedCheck> failedChecks() {
        return this.failedChecks;
    }

    /**
     * Get the lastUpdated property: The timestamp of the last readiness update.
     * 
     * @return the lastUpdated value.
     */
    public OffsetDateTime lastUpdated() {
        return this.lastUpdated;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (failedChecks() != null) {
            failedChecks().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceReadiness from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceReadiness if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MaintenanceReadiness.
     */
    public static MaintenanceReadiness fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceReadiness deserializedMaintenanceReadiness = new MaintenanceReadiness();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedMaintenanceReadiness.type = MaintenanceCheckType.fromString(reader.getString());
                } else if ("status".equals(fieldName)) {
                    deserializedMaintenanceReadiness.status = MaintenanceReadinessStatus.fromString(reader.getString());
                } else if ("message".equals(fieldName)) {
                    deserializedMaintenanceReadiness.message = reader.getString();
                } else if ("failedChecks".equals(fieldName)) {
                    List<MaintenanceFailedCheck> failedChecks
                        = reader.readArray(reader1 -> MaintenanceFailedCheck.fromJson(reader1));
                    deserializedMaintenanceReadiness.failedChecks = failedChecks;
                } else if ("lastUpdated".equals(fieldName)) {
                    deserializedMaintenanceReadiness.lastUpdated = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceReadiness;
        });
    }
}
