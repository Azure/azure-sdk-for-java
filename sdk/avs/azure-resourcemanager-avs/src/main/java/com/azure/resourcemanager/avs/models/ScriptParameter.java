// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * An parameter that the script will accept.
 */
@Fluent
public final class ScriptParameter implements JsonSerializable<ScriptParameter> {
    /*
     * The type of parameter the script is expecting. psCredential is a
     * PSCredentialObject
     */
    private ScriptParameterTypes type;

    /*
     * The parameter name that the script will expect a parameter value for
     */
    private String name;

    /*
     * User friendly description of the parameter
     */
    private String description;

    /*
     * Should this parameter be visible to arm and passed in the parameters argument
     * when executing
     */
    private VisibilityParameterEnum visibility;

    /*
     * Is this parameter required or optional
     */
    private OptionalParamEnum optional;

    /**
     * Creates an instance of ScriptParameter class.
     */
    public ScriptParameter() {
    }

    /**
     * Get the type property: The type of parameter the script is expecting. psCredential is a
     * PSCredentialObject.
     * 
     * @return the type value.
     */
    public ScriptParameterTypes type() {
        return this.type;
    }

    /**
     * Get the name property: The parameter name that the script will expect a parameter value for.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The parameter name that the script will expect a parameter value for.
     * 
     * @param name the name value to set.
     * @return the ScriptParameter object itself.
     */
    public ScriptParameter withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the description property: User friendly description of the parameter.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Get the visibility property: Should this parameter be visible to arm and passed in the parameters argument
     * when executing.
     * 
     * @return the visibility value.
     */
    public VisibilityParameterEnum visibility() {
        return this.visibility;
    }

    /**
     * Get the optional property: Is this parameter required or optional.
     * 
     * @return the optional value.
     */
    public OptionalParamEnum optional() {
        return this.optional;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScriptParameter from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScriptParameter if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScriptParameter.
     */
    public static ScriptParameter fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScriptParameter deserializedScriptParameter = new ScriptParameter();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("type".equals(fieldName)) {
                    deserializedScriptParameter.type = ScriptParameterTypes.fromString(reader.getString());
                } else if ("name".equals(fieldName)) {
                    deserializedScriptParameter.name = reader.getString();
                } else if ("description".equals(fieldName)) {
                    deserializedScriptParameter.description = reader.getString();
                } else if ("visibility".equals(fieldName)) {
                    deserializedScriptParameter.visibility = VisibilityParameterEnum.fromString(reader.getString());
                } else if ("optional".equals(fieldName)) {
                    deserializedScriptParameter.optional = OptionalParamEnum.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScriptParameter;
        });
    }
}
