// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * reschedule a maintenance.
 */
@Fluent
public final class MaintenanceReschedule implements JsonSerializable<MaintenanceReschedule> {
    /*
     * reschedule time
     */
    private OffsetDateTime rescheduleTime;

    /*
     * rescheduling reason
     */
    private String message;

    /**
     * Creates an instance of MaintenanceReschedule class.
     */
    public MaintenanceReschedule() {
    }

    /**
     * Get the rescheduleTime property: reschedule time.
     * 
     * @return the rescheduleTime value.
     */
    public OffsetDateTime rescheduleTime() {
        return this.rescheduleTime;
    }

    /**
     * Set the rescheduleTime property: reschedule time.
     * 
     * @param rescheduleTime the rescheduleTime value to set.
     * @return the MaintenanceReschedule object itself.
     */
    public MaintenanceReschedule withRescheduleTime(OffsetDateTime rescheduleTime) {
        this.rescheduleTime = rescheduleTime;
        return this;
    }

    /**
     * Get the message property: rescheduling reason.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: rescheduling reason.
     * 
     * @param message the message value to set.
     * @return the MaintenanceReschedule object itself.
     */
    public MaintenanceReschedule withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("rescheduleTime",
            this.rescheduleTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.rescheduleTime));
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceReschedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceReschedule if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceReschedule.
     */
    public static MaintenanceReschedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceReschedule deserializedMaintenanceReschedule = new MaintenanceReschedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("rescheduleTime".equals(fieldName)) {
                    deserializedMaintenanceReschedule.rescheduleTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    deserializedMaintenanceReschedule.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceReschedule;
        });
    }
}
