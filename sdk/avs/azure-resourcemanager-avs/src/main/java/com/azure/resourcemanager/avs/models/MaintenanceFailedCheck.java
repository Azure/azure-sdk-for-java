// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Details about a failed maintenance check.
 */
@Immutable
public final class MaintenanceFailedCheck implements JsonSerializable<MaintenanceFailedCheck> {
    /*
     * The name of the failed check
     */
    private String name;

    /*
     * A list of resources impacted by the failed check
     */
    private List<ImpactedMaintenanceResource> impactedResources;

    /**
     * Creates an instance of MaintenanceFailedCheck class.
     */
    private MaintenanceFailedCheck() {
    }

    /**
     * Get the name property: The name of the failed check.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Get the impactedResources property: A list of resources impacted by the failed check.
     * 
     * @return the impactedResources value.
     */
    public List<ImpactedMaintenanceResource> impactedResources() {
        return this.impactedResources;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceFailedCheck from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceFailedCheck if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceFailedCheck.
     */
    public static MaintenanceFailedCheck fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceFailedCheck deserializedMaintenanceFailedCheck = new MaintenanceFailedCheck();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedMaintenanceFailedCheck.name = reader.getString();
                } else if ("impactedResources".equals(fieldName)) {
                    List<ImpactedMaintenanceResource> impactedResources
                        = reader.readArray(reader1 -> ImpactedMaintenanceResource.fromJson(reader1));
                    deserializedMaintenanceFailedCheck.impactedResources = impactedResources;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceFailedCheck;
        });
    }
}
