// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * properties of a maintenance.
 */
@Immutable
public final class MaintenanceProperties implements JsonSerializable<MaintenanceProperties> {
    /*
     * type of maintenance
     */
    private MaintenanceType component;

    /*
     * Display name for maintenance
     */
    private String displayName;

    /*
     * Cluster ID for on which maintenance will be applied. Empty if maintenance is at private cloud level
     */
    private Integer clusterId;

    /*
     * Link to maintenance info
     */
    private String infoLink;

    /*
     * Impact on the resource during maintenance period
     */
    private String impact;

    /*
     * If maintenance is scheduled by Microsoft
     */
    private Boolean scheduledByMicrosoft;

    /*
     * The state of the maintenance
     */
    private MaintenanceState state;

    /*
     * Scheduled maintenance start time
     */
    private OffsetDateTime scheduledStartTime;

    /*
     * Estimated time maintenance will take in minutes
     */
    private Long estimatedDurationInMinutes;

    /*
     * The provisioning state
     */
    private MaintenanceProvisioningState provisioningState;

    /*
     * Operations on maintenance
     */
    private List<MaintenanceManagementOperation> operations;

    /*
     * Indicates whether the maintenance is ready to proceed
     */
    private MaintenanceReadiness maintenanceReadiness;

    /**
     * Creates an instance of MaintenanceProperties class.
     */
    private MaintenanceProperties() {
    }

    /**
     * Get the component property: type of maintenance.
     * 
     * @return the component value.
     */
    public MaintenanceType component() {
        return this.component;
    }

    /**
     * Get the displayName property: Display name for maintenance.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the clusterId property: Cluster ID for on which maintenance will be applied. Empty if maintenance is at
     * private cloud level.
     * 
     * @return the clusterId value.
     */
    public Integer clusterId() {
        return this.clusterId;
    }

    /**
     * Get the infoLink property: Link to maintenance info.
     * 
     * @return the infoLink value.
     */
    public String infoLink() {
        return this.infoLink;
    }

    /**
     * Get the impact property: Impact on the resource during maintenance period.
     * 
     * @return the impact value.
     */
    public String impact() {
        return this.impact;
    }

    /**
     * Get the scheduledByMicrosoft property: If maintenance is scheduled by Microsoft.
     * 
     * @return the scheduledByMicrosoft value.
     */
    public Boolean scheduledByMicrosoft() {
        return this.scheduledByMicrosoft;
    }

    /**
     * Get the state property: The state of the maintenance.
     * 
     * @return the state value.
     */
    public MaintenanceState state() {
        return this.state;
    }

    /**
     * Get the scheduledStartTime property: Scheduled maintenance start time.
     * 
     * @return the scheduledStartTime value.
     */
    public OffsetDateTime scheduledStartTime() {
        return this.scheduledStartTime;
    }

    /**
     * Get the estimatedDurationInMinutes property: Estimated time maintenance will take in minutes.
     * 
     * @return the estimatedDurationInMinutes value.
     */
    public Long estimatedDurationInMinutes() {
        return this.estimatedDurationInMinutes;
    }

    /**
     * Get the provisioningState property: The provisioning state.
     * 
     * @return the provisioningState value.
     */
    public MaintenanceProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the operations property: Operations on maintenance.
     * 
     * @return the operations value.
     */
    public List<MaintenanceManagementOperation> operations() {
        return this.operations;
    }

    /**
     * Get the maintenanceReadiness property: Indicates whether the maintenance is ready to proceed.
     * 
     * @return the maintenanceReadiness value.
     */
    public MaintenanceReadiness maintenanceReadiness() {
        return this.maintenanceReadiness;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (state() != null) {
            state().validate();
        }
        if (operations() != null) {
            operations().forEach(e -> e.validate());
        }
        if (maintenanceReadiness() != null) {
            maintenanceReadiness().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceProperties.
     */
    public static MaintenanceProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceProperties deserializedMaintenanceProperties = new MaintenanceProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("component".equals(fieldName)) {
                    deserializedMaintenanceProperties.component = MaintenanceType.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedMaintenanceProperties.displayName = reader.getString();
                } else if ("clusterId".equals(fieldName)) {
                    deserializedMaintenanceProperties.clusterId = reader.getNullable(JsonReader::getInt);
                } else if ("infoLink".equals(fieldName)) {
                    deserializedMaintenanceProperties.infoLink = reader.getString();
                } else if ("impact".equals(fieldName)) {
                    deserializedMaintenanceProperties.impact = reader.getString();
                } else if ("scheduledByMicrosoft".equals(fieldName)) {
                    deserializedMaintenanceProperties.scheduledByMicrosoft = reader.getNullable(JsonReader::getBoolean);
                } else if ("state".equals(fieldName)) {
                    deserializedMaintenanceProperties.state = MaintenanceState.fromJson(reader);
                } else if ("scheduledStartTime".equals(fieldName)) {
                    deserializedMaintenanceProperties.scheduledStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("estimatedDurationInMinutes".equals(fieldName)) {
                    deserializedMaintenanceProperties.estimatedDurationInMinutes
                        = reader.getNullable(JsonReader::getLong);
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedMaintenanceProperties.provisioningState
                        = MaintenanceProvisioningState.fromString(reader.getString());
                } else if ("operations".equals(fieldName)) {
                    List<MaintenanceManagementOperation> operations
                        = reader.readArray(reader1 -> MaintenanceManagementOperation.fromJson(reader1));
                    deserializedMaintenanceProperties.operations = operations;
                } else if ("maintenanceReadiness".equals(fieldName)) {
                    deserializedMaintenanceProperties.maintenanceReadiness = MaintenanceReadiness.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceProperties;
        });
    }
}
