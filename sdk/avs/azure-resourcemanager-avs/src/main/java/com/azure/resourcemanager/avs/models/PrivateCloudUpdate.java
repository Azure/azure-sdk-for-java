// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.fluent.models.PrivateCloudUpdateProperties;
import java.io.IOException;
import java.util.List;
import java.util.Map;

/**
 * An update to a private cloud resource.
 */
@Fluent
public final class PrivateCloudUpdate implements JsonSerializable<PrivateCloudUpdate> {
    /*
     * Resource tags.
     */
    private Map<String, String> tags;

    /*
     * The SKU (Stock Keeping Unit) assigned to this resource.
     */
    private Sku sku;

    /*
     * The managed service identities assigned to this resource.
     */
    private PrivateCloudIdentity identity;

    /*
     * The updatable properties of a private cloud resource
     */
    private PrivateCloudUpdateProperties innerProperties;

    /**
     * Creates an instance of PrivateCloudUpdate class.
     */
    public PrivateCloudUpdate() {
    }

    /**
     * Get the tags property: Resource tags.
     * 
     * @return the tags value.
     */
    public Map<String, String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: Resource tags.
     * 
     * @param tags the tags value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withTags(Map<String, String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @return the sku value.
     */
    public Sku sku() {
        return this.sku;
    }

    /**
     * Set the sku property: The SKU (Stock Keeping Unit) assigned to this resource.
     * 
     * @param sku the sku value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withSku(Sku sku) {
        this.sku = sku;
        return this;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public PrivateCloudIdentity identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withIdentity(PrivateCloudIdentity identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the innerProperties property: The updatable properties of a private cloud resource.
     * 
     * @return the innerProperties value.
     */
    private PrivateCloudUpdateProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the managementCluster property: The default cluster used for management.
     * 
     * @return the managementCluster value.
     */
    public ManagementCluster managementCluster() {
        return this.innerProperties() == null ? null : this.innerProperties().managementCluster();
    }

    /**
     * Set the managementCluster property: The default cluster used for management.
     * 
     * @param managementCluster the managementCluster value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withManagementCluster(ManagementCluster managementCluster) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withManagementCluster(managementCluster);
        return this;
    }

    /**
     * Get the internet property: Connectivity to internet is enabled or disabled.
     * 
     * @return the internet value.
     */
    public InternetEnum internet() {
        return this.innerProperties() == null ? null : this.innerProperties().internet();
    }

    /**
     * Set the internet property: Connectivity to internet is enabled or disabled.
     * 
     * @param internet the internet value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withInternet(InternetEnum internet) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withInternet(internet);
        return this;
    }

    /**
     * Get the identitySources property: vCenter Single Sign On Identity Sources.
     * 
     * @return the identitySources value.
     */
    public List<IdentitySource> identitySources() {
        return this.innerProperties() == null ? null : this.innerProperties().identitySources();
    }

    /**
     * Set the identitySources property: vCenter Single Sign On Identity Sources.
     * 
     * @param identitySources the identitySources value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withIdentitySources(List<IdentitySource> identitySources) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withIdentitySources(identitySources);
        return this;
    }

    /**
     * Get the availability property: Properties describing how the cloud is distributed across availability zones.
     * 
     * @return the availability value.
     */
    public AvailabilityProperties availability() {
        return this.innerProperties() == null ? null : this.innerProperties().availability();
    }

    /**
     * Set the availability property: Properties describing how the cloud is distributed across availability zones.
     * 
     * @param availability the availability value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withAvailability(AvailabilityProperties availability) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withAvailability(availability);
        return this;
    }

    /**
     * Get the encryption property: Customer managed key encryption, can be enabled or disabled.
     * 
     * @return the encryption value.
     */
    public Encryption encryption() {
        return this.innerProperties() == null ? null : this.innerProperties().encryption();
    }

    /**
     * Set the encryption property: Customer managed key encryption, can be enabled or disabled.
     * 
     * @param encryption the encryption value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withEncryption(Encryption encryption) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withEncryption(encryption);
        return this;
    }

    /**
     * Get the extendedNetworkBlocks property: Array of additional networks noncontiguous with networkBlock. Networks
     * must be
     * unique and non-overlapping across VNet in your subscription, on-premise, and
     * this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
     * (A.B.C.D/X).
     * 
     * @return the extendedNetworkBlocks value.
     */
    public List<String> extendedNetworkBlocks() {
        return this.innerProperties() == null ? null : this.innerProperties().extendedNetworkBlocks();
    }

    /**
     * Set the extendedNetworkBlocks property: Array of additional networks noncontiguous with networkBlock. Networks
     * must be
     * unique and non-overlapping across VNet in your subscription, on-premise, and
     * this privateCloud networkBlock attribute. Make sure the CIDR format conforms to
     * (A.B.C.D/X).
     * 
     * @param extendedNetworkBlocks the extendedNetworkBlocks value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withExtendedNetworkBlocks(List<String> extendedNetworkBlocks) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withExtendedNetworkBlocks(extendedNetworkBlocks);
        return this;
    }

    /**
     * Get the dnsZoneType property: The type of DNS zone to use.
     * 
     * @return the dnsZoneType value.
     */
    public DnsZoneType dnsZoneType() {
        return this.innerProperties() == null ? null : this.innerProperties().dnsZoneType();
    }

    /**
     * Set the dnsZoneType property: The type of DNS zone to use.
     * 
     * @param dnsZoneType the dnsZoneType value to set.
     * @return the PrivateCloudUpdate object itself.
     */
    public PrivateCloudUpdate withDnsZoneType(DnsZoneType dnsZoneType) {
        if (this.innerProperties() == null) {
            this.innerProperties = new PrivateCloudUpdateProperties();
        }
        this.innerProperties().withDnsZoneType(dnsZoneType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (sku() != null) {
            sku().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
        if (innerProperties() != null) {
            innerProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeMapField("tags", this.tags, (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("sku", this.sku);
        jsonWriter.writeJsonField("identity", this.identity);
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PrivateCloudUpdate from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PrivateCloudUpdate if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the PrivateCloudUpdate.
     */
    public static PrivateCloudUpdate fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PrivateCloudUpdate deserializedPrivateCloudUpdate = new PrivateCloudUpdate();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedPrivateCloudUpdate.tags = tags;
                } else if ("sku".equals(fieldName)) {
                    deserializedPrivateCloudUpdate.sku = Sku.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedPrivateCloudUpdate.identity = PrivateCloudIdentity.fromJson(reader);
                } else if ("properties".equals(fieldName)) {
                    deserializedPrivateCloudUpdate.innerProperties = PrivateCloudUpdateProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPrivateCloudUpdate;
        });
    }
}
