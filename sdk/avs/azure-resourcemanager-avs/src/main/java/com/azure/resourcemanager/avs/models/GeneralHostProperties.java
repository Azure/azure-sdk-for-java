// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a general host.
 */
@Immutable
public final class GeneralHostProperties extends HostProperties {
    /*
     * The kind of host
     */
    private HostKind kind = HostKind.GENERAL;

    /**
     * Creates an instance of GeneralHostProperties class.
     */
    private GeneralHostProperties() {
    }

    /**
     * Get the kind property: The kind of host.
     * 
     * @return the kind value.
     */
    @Override
    public HostKind kind() {
        return this.kind;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("displayName", displayName());
        jsonWriter.writeStringField("maintenance", maintenance() == null ? null : maintenance().toString());
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of GeneralHostProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of GeneralHostProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the GeneralHostProperties.
     */
    public static GeneralHostProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            GeneralHostProperties deserializedGeneralHostProperties = new GeneralHostProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedGeneralHostProperties
                        .withProvisioningState(HostProvisioningState.fromString(reader.getString()));
                } else if ("displayName".equals(fieldName)) {
                    deserializedGeneralHostProperties.withDisplayName(reader.getString());
                } else if ("moRefId".equals(fieldName)) {
                    deserializedGeneralHostProperties.withMoRefId(reader.getString());
                } else if ("fqdn".equals(fieldName)) {
                    deserializedGeneralHostProperties.withFqdn(reader.getString());
                } else if ("maintenance".equals(fieldName)) {
                    deserializedGeneralHostProperties.withMaintenance(HostMaintenance.fromString(reader.getString()));
                } else if ("faultDomain".equals(fieldName)) {
                    deserializedGeneralHostProperties.withFaultDomain(reader.getString());
                } else if ("kind".equals(fieldName)) {
                    deserializedGeneralHostProperties.kind = HostKind.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedGeneralHostProperties;
        });
    }
}
