// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Scheduling window constraint.
 */
@Immutable
public final class ScheduleOperation extends MaintenanceManagementOperation {
    /*
     * The kind of operation
     */
    private MaintenanceManagementOperationKind kind = MaintenanceManagementOperationKind.SCHEDULE;

    /*
     * If scheduling is disabled
     */
    private Boolean isDisabled;

    /*
     * Reason for schedule disabled
     */
    private String disabledReason;

    /*
     * Constraints for scheduling maintenance
     */
    private List<ScheduleOperationConstraint> constraints;

    /**
     * Creates an instance of ScheduleOperation class.
     */
    private ScheduleOperation() {
    }

    /**
     * Get the kind property: The kind of operation.
     * 
     * @return the kind value.
     */
    @Override
    public MaintenanceManagementOperationKind kind() {
        return this.kind;
    }

    /**
     * Get the isDisabled property: If scheduling is disabled.
     * 
     * @return the isDisabled value.
     */
    public Boolean isDisabled() {
        return this.isDisabled;
    }

    /**
     * Get the disabledReason property: Reason for schedule disabled.
     * 
     * @return the disabledReason value.
     */
    public String disabledReason() {
        return this.disabledReason;
    }

    /**
     * Get the constraints property: Constraints for scheduling maintenance.
     * 
     * @return the constraints value.
     */
    public List<ScheduleOperationConstraint> constraints() {
        return this.constraints;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ScheduleOperation from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ScheduleOperation if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the ScheduleOperation.
     */
    public static ScheduleOperation fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ScheduleOperation deserializedScheduleOperation = new ScheduleOperation();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedScheduleOperation.kind
                        = MaintenanceManagementOperationKind.fromString(reader.getString());
                } else if ("isDisabled".equals(fieldName)) {
                    deserializedScheduleOperation.isDisabled = reader.getNullable(JsonReader::getBoolean);
                } else if ("disabledReason".equals(fieldName)) {
                    deserializedScheduleOperation.disabledReason = reader.getString();
                } else if ("constraints".equals(fieldName)) {
                    List<ScheduleOperationConstraint> constraints
                        = reader.readArray(reader1 -> ScheduleOperationConstraint.fromJson(reader1));
                    deserializedScheduleOperation.constraints = constraints;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedScheduleOperation;
        });
    }
}
