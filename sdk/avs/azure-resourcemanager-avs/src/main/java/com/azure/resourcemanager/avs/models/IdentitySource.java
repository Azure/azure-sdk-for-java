// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * vCenter Single Sign On Identity Source.
 */
@Fluent
public final class IdentitySource implements JsonSerializable<IdentitySource> {
    /*
     * The name of the identity source
     */
    private String name;

    /*
     * The domain's NetBIOS name
     */
    private String alias;

    /*
     * The domain's dns name
     */
    private String domain;

    /*
     * The base distinguished name for users
     */
    private String baseUserDN;

    /*
     * The base distinguished name for groups
     */
    private String baseGroupDN;

    /*
     * Primary server URL
     */
    private String primaryServer;

    /*
     * Secondary server URL
     */
    private String secondaryServer;

    /*
     * Protect LDAP communication using SSL certificate (LDAPS)
     */
    private SslEnum ssl;

    /*
     * The ID of an Active Directory user with a minimum of read-only access to Base
     * DN for users and group
     */
    private String username;

    /*
     * The password of the Active Directory user with a minimum of read-only access to
     * Base DN for users and groups.
     */
    private String password;

    /**
     * Creates an instance of IdentitySource class.
     */
    public IdentitySource() {
    }

    /**
     * Get the name property: The name of the identity source.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the identity source.
     * 
     * @param name the name value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the alias property: The domain's NetBIOS name.
     * 
     * @return the alias value.
     */
    public String alias() {
        return this.alias;
    }

    /**
     * Set the alias property: The domain's NetBIOS name.
     * 
     * @param alias the alias value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withAlias(String alias) {
        this.alias = alias;
        return this;
    }

    /**
     * Get the domain property: The domain's dns name.
     * 
     * @return the domain value.
     */
    public String domain() {
        return this.domain;
    }

    /**
     * Set the domain property: The domain's dns name.
     * 
     * @param domain the domain value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withDomain(String domain) {
        this.domain = domain;
        return this;
    }

    /**
     * Get the baseUserDN property: The base distinguished name for users.
     * 
     * @return the baseUserDN value.
     */
    public String baseUserDN() {
        return this.baseUserDN;
    }

    /**
     * Set the baseUserDN property: The base distinguished name for users.
     * 
     * @param baseUserDN the baseUserDN value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withBaseUserDN(String baseUserDN) {
        this.baseUserDN = baseUserDN;
        return this;
    }

    /**
     * Get the baseGroupDN property: The base distinguished name for groups.
     * 
     * @return the baseGroupDN value.
     */
    public String baseGroupDN() {
        return this.baseGroupDN;
    }

    /**
     * Set the baseGroupDN property: The base distinguished name for groups.
     * 
     * @param baseGroupDN the baseGroupDN value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withBaseGroupDN(String baseGroupDN) {
        this.baseGroupDN = baseGroupDN;
        return this;
    }

    /**
     * Get the primaryServer property: Primary server URL.
     * 
     * @return the primaryServer value.
     */
    public String primaryServer() {
        return this.primaryServer;
    }

    /**
     * Set the primaryServer property: Primary server URL.
     * 
     * @param primaryServer the primaryServer value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withPrimaryServer(String primaryServer) {
        this.primaryServer = primaryServer;
        return this;
    }

    /**
     * Get the secondaryServer property: Secondary server URL.
     * 
     * @return the secondaryServer value.
     */
    public String secondaryServer() {
        return this.secondaryServer;
    }

    /**
     * Set the secondaryServer property: Secondary server URL.
     * 
     * @param secondaryServer the secondaryServer value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withSecondaryServer(String secondaryServer) {
        this.secondaryServer = secondaryServer;
        return this;
    }

    /**
     * Get the ssl property: Protect LDAP communication using SSL certificate (LDAPS).
     * 
     * @return the ssl value.
     */
    public SslEnum ssl() {
        return this.ssl;
    }

    /**
     * Set the ssl property: Protect LDAP communication using SSL certificate (LDAPS).
     * 
     * @param ssl the ssl value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withSsl(SslEnum ssl) {
        this.ssl = ssl;
        return this;
    }

    /**
     * Get the username property: The ID of an Active Directory user with a minimum of read-only access to Base
     * DN for users and group.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Set the username property: The ID of an Active Directory user with a minimum of read-only access to Base
     * DN for users and group.
     * 
     * @param username the username value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withUsername(String username) {
        this.username = username;
        return this;
    }

    /**
     * Get the password property: The password of the Active Directory user with a minimum of read-only access to
     * Base DN for users and groups.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Set the password property: The password of the Active Directory user with a minimum of read-only access to
     * Base DN for users and groups.
     * 
     * @param password the password value to set.
     * @return the IdentitySource object itself.
     */
    public IdentitySource withPassword(String password) {
        this.password = password;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("name", this.name);
        jsonWriter.writeStringField("alias", this.alias);
        jsonWriter.writeStringField("domain", this.domain);
        jsonWriter.writeStringField("baseUserDN", this.baseUserDN);
        jsonWriter.writeStringField("baseGroupDN", this.baseGroupDN);
        jsonWriter.writeStringField("primaryServer", this.primaryServer);
        jsonWriter.writeStringField("secondaryServer", this.secondaryServer);
        jsonWriter.writeStringField("ssl", this.ssl == null ? null : this.ssl.toString());
        jsonWriter.writeStringField("username", this.username);
        jsonWriter.writeStringField("password", this.password);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of IdentitySource from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of IdentitySource if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the IdentitySource.
     */
    public static IdentitySource fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            IdentitySource deserializedIdentitySource = new IdentitySource();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("name".equals(fieldName)) {
                    deserializedIdentitySource.name = reader.getString();
                } else if ("alias".equals(fieldName)) {
                    deserializedIdentitySource.alias = reader.getString();
                } else if ("domain".equals(fieldName)) {
                    deserializedIdentitySource.domain = reader.getString();
                } else if ("baseUserDN".equals(fieldName)) {
                    deserializedIdentitySource.baseUserDN = reader.getString();
                } else if ("baseGroupDN".equals(fieldName)) {
                    deserializedIdentitySource.baseGroupDN = reader.getString();
                } else if ("primaryServer".equals(fieldName)) {
                    deserializedIdentitySource.primaryServer = reader.getString();
                } else if ("secondaryServer".equals(fieldName)) {
                    deserializedIdentitySource.secondaryServer = reader.getString();
                } else if ("ssl".equals(fieldName)) {
                    deserializedIdentitySource.ssl = SslEnum.fromString(reader.getString());
                } else if ("username".equals(fieldName)) {
                    deserializedIdentitySource.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedIdentitySource.password = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedIdentitySource;
        });
    }
}
