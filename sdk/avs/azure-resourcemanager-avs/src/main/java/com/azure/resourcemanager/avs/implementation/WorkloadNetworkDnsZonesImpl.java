// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.avs.fluent.WorkloadNetworkDnsZonesClient;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsZoneInner;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZones;

public final class WorkloadNetworkDnsZonesImpl implements WorkloadNetworkDnsZones {
    private static final ClientLogger LOGGER = new ClientLogger(WorkloadNetworkDnsZonesImpl.class);

    private final WorkloadNetworkDnsZonesClient innerClient;

    private final com.azure.resourcemanager.avs.AvsManager serviceManager;

    public WorkloadNetworkDnsZonesImpl(WorkloadNetworkDnsZonesClient innerClient,
        com.azure.resourcemanager.avs.AvsManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<WorkloadNetworkDnsZone> listByWorkloadNetwork(String resourceGroupName,
        String privateCloudName) {
        PagedIterable<WorkloadNetworkDnsZoneInner> inner
            = this.serviceClient().listByWorkloadNetwork(resourceGroupName, privateCloudName);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadNetworkDnsZoneImpl(inner1, this.manager()));
    }

    public PagedIterable<WorkloadNetworkDnsZone> listByWorkloadNetwork(String resourceGroupName,
        String privateCloudName, Context context) {
        PagedIterable<WorkloadNetworkDnsZoneInner> inner
            = this.serviceClient().listByWorkloadNetwork(resourceGroupName, privateCloudName, context);
        return ResourceManagerUtils.mapPage(inner, inner1 -> new WorkloadNetworkDnsZoneImpl(inner1, this.manager()));
    }

    public Response<WorkloadNetworkDnsZone> getWithResponse(String resourceGroupName, String privateCloudName,
        String dnsZoneId, Context context) {
        Response<WorkloadNetworkDnsZoneInner> inner
            = this.serviceClient().getWithResponse(resourceGroupName, privateCloudName, dnsZoneId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new WorkloadNetworkDnsZoneImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public WorkloadNetworkDnsZone get(String resourceGroupName, String privateCloudName, String dnsZoneId) {
        WorkloadNetworkDnsZoneInner inner = this.serviceClient().get(resourceGroupName, privateCloudName, dnsZoneId);
        if (inner != null) {
            return new WorkloadNetworkDnsZoneImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String dnsZoneId, String privateCloudName) {
        this.serviceClient().delete(resourceGroupName, dnsZoneId, privateCloudName);
    }

    public void delete(String resourceGroupName, String dnsZoneId, String privateCloudName, Context context) {
        this.serviceClient().delete(resourceGroupName, dnsZoneId, privateCloudName, context);
    }

    public WorkloadNetworkDnsZone getById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String dnsZoneId = ResourceManagerUtils.getValueFromIdByName(id, "dnsZones");
        if (dnsZoneId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsZones'.", id)));
        }
        return this.getWithResponse(resourceGroupName, privateCloudName, dnsZoneId, Context.NONE).getValue();
    }

    public Response<WorkloadNetworkDnsZone> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        String dnsZoneId = ResourceManagerUtils.getValueFromIdByName(id, "dnsZones");
        if (dnsZoneId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsZones'.", id)));
        }
        return this.getWithResponse(resourceGroupName, privateCloudName, dnsZoneId, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsZoneId = ResourceManagerUtils.getValueFromIdByName(id, "dnsZones");
        if (dnsZoneId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsZones'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        this.delete(resourceGroupName, dnsZoneId, privateCloudName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = ResourceManagerUtils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String dnsZoneId = ResourceManagerUtils.getValueFromIdByName(id, "dnsZones");
        if (dnsZoneId == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'dnsZones'.", id)));
        }
        String privateCloudName = ResourceManagerUtils.getValueFromIdByName(id, "privateClouds");
        if (privateCloudName == null) {
            throw LOGGER.logExceptionAsError(new IllegalArgumentException(
                String.format("The resource ID '%s' is not valid. Missing path segment 'privateClouds'.", id)));
        }
        this.delete(resourceGroupName, dnsZoneId, privateCloudName, context);
    }

    private WorkloadNetworkDnsZonesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.avs.AvsManager manager() {
        return this.serviceManager;
    }

    public WorkloadNetworkDnsZoneImpl define(String name) {
        return new WorkloadNetworkDnsZoneImpl(name, this.manager());
    }
}
