// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.fluent.models.LicensePropertiesInner;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The properties of a VMware Firewall license.
 */
@Fluent
public final class VmwareFirewallLicenseProperties extends LicensePropertiesInner {
    /*
     * License kind
     */
    private LicenseKind kind = LicenseKind.VMWARE_FIREWALL;

    /*
     * License key
     */
    private String licenseKey;

    /*
     * Number of cores included in the license, measured per hour
     */
    private int cores;

    /*
     * UTC datetime when the license expires
     */
    private OffsetDateTime endDate;

    /*
     * The Broadcom site ID associated with the license.
     */
    private String broadcomSiteId;

    /*
     * The Broadcom contract number associated with the license.
     */
    private String broadcomContractNumber;

    /*
     * Additional labels passed through for license reporting.
     */
    private List<Label> labels;

    /*
     * The state of the license provisioning
     */
    private LicenseProvisioningState provisioningState;

    /**
     * Creates an instance of VmwareFirewallLicenseProperties class.
     */
    public VmwareFirewallLicenseProperties() {
    }

    /**
     * Get the kind property: License kind.
     * 
     * @return the kind value.
     */
    @Override
    public LicenseKind kind() {
        return this.kind;
    }

    /**
     * Get the licenseKey property: License key.
     * 
     * @return the licenseKey value.
     */
    public String licenseKey() {
        return this.licenseKey;
    }

    /**
     * Set the licenseKey property: License key.
     * 
     * @param licenseKey the licenseKey value to set.
     * @return the VmwareFirewallLicenseProperties object itself.
     */
    public VmwareFirewallLicenseProperties withLicenseKey(String licenseKey) {
        this.licenseKey = licenseKey;
        return this;
    }

    /**
     * Get the cores property: Number of cores included in the license, measured per hour.
     * 
     * @return the cores value.
     */
    public int cores() {
        return this.cores;
    }

    /**
     * Set the cores property: Number of cores included in the license, measured per hour.
     * 
     * @param cores the cores value to set.
     * @return the VmwareFirewallLicenseProperties object itself.
     */
    public VmwareFirewallLicenseProperties withCores(int cores) {
        this.cores = cores;
        return this;
    }

    /**
     * Get the endDate property: UTC datetime when the license expires.
     * 
     * @return the endDate value.
     */
    public OffsetDateTime endDate() {
        return this.endDate;
    }

    /**
     * Set the endDate property: UTC datetime when the license expires.
     * 
     * @param endDate the endDate value to set.
     * @return the VmwareFirewallLicenseProperties object itself.
     */
    public VmwareFirewallLicenseProperties withEndDate(OffsetDateTime endDate) {
        this.endDate = endDate;
        return this;
    }

    /**
     * Get the broadcomSiteId property: The Broadcom site ID associated with the license.
     * 
     * @return the broadcomSiteId value.
     */
    public String broadcomSiteId() {
        return this.broadcomSiteId;
    }

    /**
     * Set the broadcomSiteId property: The Broadcom site ID associated with the license.
     * 
     * @param broadcomSiteId the broadcomSiteId value to set.
     * @return the VmwareFirewallLicenseProperties object itself.
     */
    public VmwareFirewallLicenseProperties withBroadcomSiteId(String broadcomSiteId) {
        this.broadcomSiteId = broadcomSiteId;
        return this;
    }

    /**
     * Get the broadcomContractNumber property: The Broadcom contract number associated with the license.
     * 
     * @return the broadcomContractNumber value.
     */
    public String broadcomContractNumber() {
        return this.broadcomContractNumber;
    }

    /**
     * Set the broadcomContractNumber property: The Broadcom contract number associated with the license.
     * 
     * @param broadcomContractNumber the broadcomContractNumber value to set.
     * @return the VmwareFirewallLicenseProperties object itself.
     */
    public VmwareFirewallLicenseProperties withBroadcomContractNumber(String broadcomContractNumber) {
        this.broadcomContractNumber = broadcomContractNumber;
        return this;
    }

    /**
     * Get the labels property: Additional labels passed through for license reporting.
     * 
     * @return the labels value.
     */
    public List<Label> labels() {
        return this.labels;
    }

    /**
     * Set the labels property: Additional labels passed through for license reporting.
     * 
     * @param labels the labels value to set.
     * @return the VmwareFirewallLicenseProperties object itself.
     */
    public VmwareFirewallLicenseProperties withLabels(List<Label> labels) {
        this.labels = labels;
        return this;
    }

    /**
     * Get the provisioningState property: The state of the license provisioning.
     * 
     * @return the provisioningState value.
     */
    @Override
    public LicenseProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeIntField("cores", this.cores);
        jsonWriter.writeStringField("endDate",
            this.endDate == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endDate));
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        jsonWriter.writeStringField("licenseKey", this.licenseKey);
        jsonWriter.writeStringField("broadcomSiteId", this.broadcomSiteId);
        jsonWriter.writeStringField("broadcomContractNumber", this.broadcomContractNumber);
        jsonWriter.writeArrayField("labels", this.labels, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VmwareFirewallLicenseProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VmwareFirewallLicenseProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the VmwareFirewallLicenseProperties.
     */
    public static VmwareFirewallLicenseProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VmwareFirewallLicenseProperties deserializedVmwareFirewallLicenseProperties
                = new VmwareFirewallLicenseProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.provisioningState
                        = LicenseProvisioningState.fromString(reader.getString());
                } else if ("cores".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.cores = reader.getInt();
                } else if ("endDate".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.endDate = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("kind".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.kind = LicenseKind.fromString(reader.getString());
                } else if ("licenseKey".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.licenseKey = reader.getString();
                } else if ("broadcomSiteId".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.broadcomSiteId = reader.getString();
                } else if ("broadcomContractNumber".equals(fieldName)) {
                    deserializedVmwareFirewallLicenseProperties.broadcomContractNumber = reader.getString();
                } else if ("labels".equals(fieldName)) {
                    List<Label> labels = reader.readArray(reader1 -> Label.fromJson(reader1));
                    deserializedVmwareFirewallLicenseProperties.labels = labels;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVmwareFirewallLicenseProperties;
        });
    }
}
