// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.VirtualMachineProvisioningState;
import com.azure.resourcemanager.avs.models.VirtualMachineRestrictMovementState;
import java.io.IOException;

/**
 * Virtual Machine Properties.
 */
@Immutable
public final class VirtualMachineProperties implements JsonSerializable<VirtualMachineProperties> {
    /*
     * The provisioning state of the resource.
     */
    private VirtualMachineProvisioningState provisioningState;

    /*
     * Display name of the VM.
     */
    private String displayName;

    /*
     * Virtual machine managed object reference id
     */
    private String moRefId;

    /*
     * Path to virtual machine's folder starting from datacenter virtual machine folder
     */
    private String folderPath;

    /*
     * Whether VM DRS-driven movement is restricted (enabled) or not (disabled)
     */
    private VirtualMachineRestrictMovementState restrictMovement;

    /**
     * Creates an instance of VirtualMachineProperties class.
     */
    public VirtualMachineProperties() {
    }

    /**
     * Get the provisioningState property: The provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public VirtualMachineProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the displayName property: Display name of the VM.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Get the moRefId property: Virtual machine managed object reference id.
     * 
     * @return the moRefId value.
     */
    public String moRefId() {
        return this.moRefId;
    }

    /**
     * Get the folderPath property: Path to virtual machine's folder starting from datacenter virtual machine folder.
     * 
     * @return the folderPath value.
     */
    public String folderPath() {
        return this.folderPath;
    }

    /**
     * Get the restrictMovement property: Whether VM DRS-driven movement is restricted (enabled) or not (disabled).
     * 
     * @return the restrictMovement value.
     */
    public VirtualMachineRestrictMovementState restrictMovement() {
        return this.restrictMovement;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VirtualMachineProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VirtualMachineProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the VirtualMachineProperties.
     */
    public static VirtualMachineProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VirtualMachineProperties deserializedVirtualMachineProperties = new VirtualMachineProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("provisioningState".equals(fieldName)) {
                    deserializedVirtualMachineProperties.provisioningState
                        = VirtualMachineProvisioningState.fromString(reader.getString());
                } else if ("displayName".equals(fieldName)) {
                    deserializedVirtualMachineProperties.displayName = reader.getString();
                } else if ("moRefId".equals(fieldName)) {
                    deserializedVirtualMachineProperties.moRefId = reader.getString();
                } else if ("folderPath".equals(fieldName)) {
                    deserializedVirtualMachineProperties.folderPath = reader.getString();
                } else if ("restrictMovement".equals(fieldName)) {
                    deserializedVirtualMachineProperties.restrictMovement
                        = VirtualMachineRestrictMovementState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVirtualMachineProperties;
        });
    }
}
