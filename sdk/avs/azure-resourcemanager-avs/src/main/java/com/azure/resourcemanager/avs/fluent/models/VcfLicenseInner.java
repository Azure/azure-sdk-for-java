// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.avs.models.LicenseProvisioningState;
import com.azure.resourcemanager.avs.models.Vcf5License;
import com.azure.resourcemanager.avs.models.VcfLicenseKind;
import java.io.IOException;

/**
 * A VMware Cloud Foundation license.
 */
@Immutable
public class VcfLicenseInner implements JsonSerializable<VcfLicenseInner> {
    /*
     * License kind
     */
    private VcfLicenseKind kind = VcfLicenseKind.fromString("VcfLicense");

    /*
     * The state of the license provisioning
     */
    private LicenseProvisioningState provisioningState;

    /**
     * Creates an instance of VcfLicenseInner class.
     */
    public VcfLicenseInner() {
    }

    /**
     * Get the kind property: License kind.
     * 
     * @return the kind value.
     */
    public VcfLicenseKind kind() {
        return this.kind;
    }

    /**
     * Get the provisioningState property: The state of the license provisioning.
     * 
     * @return the provisioningState value.
     */
    public LicenseProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Set the provisioningState property: The state of the license provisioning.
     * 
     * @param provisioningState the provisioningState value to set.
     * @return the VcfLicenseInner object itself.
     */
    VcfLicenseInner withProvisioningState(LicenseProvisioningState provisioningState) {
        this.provisioningState = provisioningState;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("kind", this.kind == null ? null : this.kind.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of VcfLicenseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of VcfLicenseInner if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the VcfLicenseInner.
     */
    public static VcfLicenseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            String discriminatorValue = null;
            try (JsonReader readerToUse = reader.bufferObject()) {
                readerToUse.nextToken(); // Prepare for reading
                while (readerToUse.nextToken() != JsonToken.END_OBJECT) {
                    String fieldName = readerToUse.getFieldName();
                    readerToUse.nextToken();
                    if ("kind".equals(fieldName)) {
                        discriminatorValue = readerToUse.getString();
                        break;
                    } else {
                        readerToUse.skipChildren();
                    }
                }
                // Use the discriminator value to determine which subtype should be deserialized.
                if ("vcf5".equals(discriminatorValue)) {
                    return Vcf5License.fromJson(readerToUse.reset());
                } else {
                    return fromJsonKnownDiscriminator(readerToUse.reset());
                }
            }
        });
    }

    static VcfLicenseInner fromJsonKnownDiscriminator(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            VcfLicenseInner deserializedVcfLicenseInner = new VcfLicenseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("kind".equals(fieldName)) {
                    deserializedVcfLicenseInner.kind = VcfLicenseKind.fromString(reader.getString());
                } else if ("provisioningState".equals(fieldName)) {
                    deserializedVcfLicenseInner.provisioningState
                        = LicenseProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedVcfLicenseInner;
        });
    }
}
