// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * schedule a maintenance.
 */
@Fluent
public final class MaintenanceSchedule implements JsonSerializable<MaintenanceSchedule> {
    /*
     * schedule time
     */
    private OffsetDateTime scheduleTime;

    /*
     * scheduling message
     */
    private String message;

    /**
     * Creates an instance of MaintenanceSchedule class.
     */
    public MaintenanceSchedule() {
    }

    /**
     * Get the scheduleTime property: schedule time.
     * 
     * @return the scheduleTime value.
     */
    public OffsetDateTime scheduleTime() {
        return this.scheduleTime;
    }

    /**
     * Set the scheduleTime property: schedule time.
     * 
     * @param scheduleTime the scheduleTime value to set.
     * @return the MaintenanceSchedule object itself.
     */
    public MaintenanceSchedule withScheduleTime(OffsetDateTime scheduleTime) {
        this.scheduleTime = scheduleTime;
        return this;
    }

    /**
     * Get the message property: scheduling message.
     * 
     * @return the message value.
     */
    public String message() {
        return this.message;
    }

    /**
     * Set the message property: scheduling message.
     * 
     * @param message the message value to set.
     * @return the MaintenanceSchedule object itself.
     */
    public MaintenanceSchedule withMessage(String message) {
        this.message = message;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("scheduleTime",
            this.scheduleTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.scheduleTime));
        jsonWriter.writeStringField("message", this.message);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MaintenanceSchedule from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MaintenanceSchedule if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MaintenanceSchedule.
     */
    public static MaintenanceSchedule fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MaintenanceSchedule deserializedMaintenanceSchedule = new MaintenanceSchedule();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("scheduleTime".equals(fieldName)) {
                    deserializedMaintenanceSchedule.scheduleTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("message".equals(fieldName)) {
                    deserializedMaintenanceSchedule.message = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMaintenanceSchedule;
        });
    }
}
