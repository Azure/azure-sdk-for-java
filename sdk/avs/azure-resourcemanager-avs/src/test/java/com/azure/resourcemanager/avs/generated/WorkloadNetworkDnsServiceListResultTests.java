// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsServiceInner;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServiceListResult;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsServiceListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsServiceListResult model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"displayName\":\"yyceuzsoi\",\"dnsServiceIp\":\"ud\",\"defaultDnsZone\":\"rx\",\"fqdnZones\":[\"hzv\",\"ytdw\",\"qbrqubpaxhexiili\",\"pdtii\"],\"logLevel\":\"ERROR\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":7272913098862288792},\"id\":\"zfgs\",\"name\":\"uyfxrxxleptramxj\",\"type\":\"zwl\"},{\"properties\":{\"displayName\":\"xuqlcvydypat\",\"dnsServiceIp\":\"oa\",\"defaultDnsZone\":\"kniod\",\"fqdnZones\":[\"ebwnujhe\",\"msbvdkcrodtjinf\",\"jlfltkacjvefkdlf\"],\"logLevel\":\"FATAL\",\"status\":\"SUCCESS\",\"provisioningState\":\"Deleting\",\"revision\":9029046645236606228},\"id\":\"owpulpq\",\"name\":\"lyls\",\"type\":\"xkqjnsjervt\"},{\"properties\":{\"displayName\":\"xsdszuempsb\",\"dnsServiceIp\":\"f\",\"defaultDnsZone\":\"eyvpnqicvinvkj\",\"fqdnZones\":[\"xrbuukzclew\",\"hmlwpaztzpo\",\"ncckw\"],\"logLevel\":\"FATAL\",\"status\":\"FAILURE\",\"provisioningState\":\"Updating\",\"revision\":3103220879835924511},\"id\":\"qa\",\"name\":\"zfeqztppri\",\"type\":\"lxorjaltolmncws\"}],\"nextLink\":\"qwcsdbnwdcfhuc\"}")
            .toObject(WorkloadNetworkDnsServiceListResult.class);
        Assertions.assertEquals("yyceuzsoi", model.value().get(0).displayName());
        Assertions.assertEquals("ud", model.value().get(0).dnsServiceIp());
        Assertions.assertEquals("rx", model.value().get(0).defaultDnsZone());
        Assertions.assertEquals("hzv", model.value().get(0).fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.ERROR, model.value().get(0).logLevel());
        Assertions.assertEquals(7272913098862288792L, model.value().get(0).revision());
        Assertions.assertEquals("qwcsdbnwdcfhuc", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsServiceListResult model = new WorkloadNetworkDnsServiceListResult().withValue(Arrays.asList(
            new WorkloadNetworkDnsServiceInner().withDisplayName("yyceuzsoi")
                .withDnsServiceIp("ud")
                .withDefaultDnsZone("rx")
                .withFqdnZones(Arrays.asList("hzv", "ytdw", "qbrqubpaxhexiili", "pdtii"))
                .withLogLevel(DnsServiceLogLevelEnum.ERROR)
                .withRevision(7272913098862288792L),
            new WorkloadNetworkDnsServiceInner().withDisplayName("xuqlcvydypat")
                .withDnsServiceIp("oa")
                .withDefaultDnsZone("kniod")
                .withFqdnZones(Arrays.asList("ebwnujhe", "msbvdkcrodtjinf", "jlfltkacjvefkdlf"))
                .withLogLevel(DnsServiceLogLevelEnum.FATAL)
                .withRevision(9029046645236606228L),
            new WorkloadNetworkDnsServiceInner().withDisplayName("xsdszuempsb")
                .withDnsServiceIp("f")
                .withDefaultDnsZone("eyvpnqicvinvkj")
                .withFqdnZones(Arrays.asList("xrbuukzclew", "hmlwpaztzpo", "ncckw"))
                .withLogLevel(DnsServiceLogLevelEnum.FATAL)
                .withRevision(3103220879835924511L)))
            .withNextLink("qwcsdbnwdcfhuc");
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsServiceListResult.class);
        Assertions.assertEquals("yyceuzsoi", model.value().get(0).displayName());
        Assertions.assertEquals("ud", model.value().get(0).dnsServiceIp());
        Assertions.assertEquals("rx", model.value().get(0).defaultDnsZone());
        Assertions.assertEquals("hzv", model.value().get(0).fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.ERROR, model.value().get(0).logLevel());
        Assertions.assertEquals(7272913098862288792L, model.value().get(0).revision());
        Assertions.assertEquals("qwcsdbnwdcfhuc", model.nextLink());
    }
}
