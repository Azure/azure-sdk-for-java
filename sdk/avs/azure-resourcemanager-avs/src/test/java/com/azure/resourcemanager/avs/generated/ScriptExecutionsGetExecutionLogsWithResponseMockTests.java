// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptOutputStreamType;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsGetExecutionLogsWithResponseMockTests {
    @Test
    public void testGetExecutionLogsWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"fapvuhrylniofrz\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"jed\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"st\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"vnlvxbcuiiznktwf\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"nv\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"dibmikostbzbkiwb\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"qnyophzfyls\"}],\"failureReason\":\"rpfbcunezz\",\"timeout\":\"e\",\"retention\":\"lfwyfwlwxjwetn\",\"submittedAt\":\"2021-06-29T10:43:54Z\",\"startedAt\":\"2021-07-28T00:42:45Z\",\"finishedAt\":\"2021-02-10T04:43:11Z\",\"provisioningState\":\"Cancelling\",\"output\":[\"ylptrsqqwztcm\"],\"namedOutputs\":{\"jexfdeqvhp\":\"datachcxwaxfewzj\",\"zjrgyww\":\"dataylkkshkbffmbm\"},\"information\":[\"xs\"],\"warnings\":[\"fujg\"],\"errors\":[\"aaoepttaqut\"]},\"id\":\"wemxswvruunzz\",\"name\":\"gehkfkimrtixokff\",\"type\":\"yinljqe\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .getExecutionLogsWithResponse("gbqi", "kxkbsazgakgacyr", "m",
                Arrays.asList(ScriptOutputStreamType.ERROR, ScriptOutputStreamType.OUTPUT),
                com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("fapvuhrylniofrz", response.scriptCmdletId());
        Assertions.assertEquals("jed", response.parameters().get(0).name());
        Assertions.assertEquals("nv", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("rpfbcunezz", response.failureReason());
        Assertions.assertEquals("e", response.timeout());
        Assertions.assertEquals("lfwyfwlwxjwetn", response.retention());
        Assertions.assertEquals("ylptrsqqwztcm", response.output().get(0));
    }
}
