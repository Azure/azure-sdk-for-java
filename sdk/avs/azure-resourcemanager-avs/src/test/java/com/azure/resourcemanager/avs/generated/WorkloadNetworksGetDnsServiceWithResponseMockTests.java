// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksGetDnsServiceWithResponseMockTests {
    @Test
    public void testGetDnsServiceWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"wswmt\",\"dnsServiceIp\":\"yctww\",\"defaultDnsZone\":\"wxjlmec\",\"fqdnZones\":[\"ygzyvneezaifght\",\"oqqtl\"],\"logLevel\":\"FATAL\",\"status\":\"SUCCESS\",\"provisioningState\":\"Canceled\",\"revision\":4121428237576255143},\"id\":\"avfqnvhnqoewdogi\",\"name\":\"etesypvidbztjhqt\",\"type\":\"b\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .getDnsServiceWithResponse("uiaclkiexhajlfn", "hiqfyuttdiy", "b", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("wswmt", response.displayName());
        Assertions.assertEquals("yctww", response.dnsServiceIp());
        Assertions.assertEquals("wxjlmec", response.defaultDnsZone());
        Assertions.assertEquals("ygzyvneezaifght", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, response.logLevel());
        Assertions.assertEquals(4121428237576255143L, response.revision());
    }
}
