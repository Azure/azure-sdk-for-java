// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegmentSubnet;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkSegmentsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"lcdisd\",\"connectedGateway\":\"fj\",\"subnet\":{\"dhcpRanges\":[\"g\",\"rwhryvycytd\"],\"gatewayAddress\":\"xgccknfnw\"},\"portVif\":[{\"portName\":\"vpdvjdhttzae\"},{\"portName\":\"dxihc\"},{\"portName\":\"phkmcrjdqnsdfz\"}],\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":1112930021934577453},\"id\":\"dgh\",\"name\":\"jeuut\",\"type\":\"wxezwzhok\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkSegment response = manager.workloadNetworkSegments()
            .define("tnsi")
            .withExistingPrivateCloud("slhhxudbxv", "d")
            .withDisplayName("hzmme")
            .withConnectedGateway("kdlpa")
            .withSubnet(new WorkloadNetworkSegmentSubnet().withDhcpRanges(Arrays.asList("x", "a", "lc", "xwmdboxd"))
                .withGatewayAddress("sftufqobrjlna"))
            .withRevision(7910183506498938441L)
            .create();

        Assertions.assertEquals("lcdisd", response.displayName());
        Assertions.assertEquals("fj", response.connectedGateway());
        Assertions.assertEquals("g", response.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("xgccknfnw", response.subnet().gatewayAddress());
        Assertions.assertEquals(1112930021934577453L, response.revision());
    }
}
