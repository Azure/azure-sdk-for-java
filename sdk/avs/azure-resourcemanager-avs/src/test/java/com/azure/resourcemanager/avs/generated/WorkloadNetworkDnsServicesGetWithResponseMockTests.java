// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"lxxhljfp\",\"dnsServiceIp\":\"icrmnzh\",\"defaultDnsZone\":\"mqgjsxvpq\",\"fqdnZones\":[\"rmbodt\",\"s\",\"qgvriibakcla\"],\"logLevel\":\"WARNING\",\"status\":\"SUCCESS\",\"provisioningState\":\"Updating\",\"revision\":8318985222878155880},\"id\":\"uzlwvsgmw\",\"name\":\"hqf\",\"type\":\"izvu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsService response = manager.workloadNetworkDnsServices()
            .getWithResponse("vxcnqmxqps", "okmvkhlggd", "bemzqkzszuwi", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("lxxhljfp", response.displayName());
        Assertions.assertEquals("icrmnzh", response.dnsServiceIp());
        Assertions.assertEquals("mqgjsxvpq", response.defaultDnsZone());
        Assertions.assertEquals("rmbodt", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.WARNING, response.logLevel());
        Assertions.assertEquals(8318985222878155880L, response.revision());
    }
}
