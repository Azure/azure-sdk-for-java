// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsServicesGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"zid\",\"dnsServiceIp\":\"waabzmifrygzn\",\"defaultDnsZone\":\"axri\",\"fqdnZones\":[\"obgop\"],\"logLevel\":\"DEBUG\",\"status\":\"FAILURE\",\"provisioningState\":\"Failed\",\"revision\":4400312787392536250},\"id\":\"ixynllxecwcrojp\",\"name\":\"slhcawjutifd\",\"type\":\"fmvigorqjbttzh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsService response = manager.workloadNetworkDnsServices()
            .getWithResponse("sovwxznptgoeiyb", "abpfhvfs", "kvntjlrigjkskyri", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("zid", response.displayName());
        Assertions.assertEquals("waabzmifrygzn", response.dnsServiceIp());
        Assertions.assertEquals("axri", response.defaultDnsZone());
        Assertions.assertEquals("obgop", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.DEBUG, response.logLevel());
        Assertions.assertEquals(4400312787392536250L, response.revision());
    }
}
