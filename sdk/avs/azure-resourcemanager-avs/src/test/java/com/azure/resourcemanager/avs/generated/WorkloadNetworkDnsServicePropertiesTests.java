// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsServiceProperties;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsServicePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsServiceProperties model = BinaryData.fromString(
            "{\"displayName\":\"nsj\",\"dnsServiceIp\":\"vti\",\"defaultDnsZone\":\"xsdszuempsb\",\"fqdnZones\":[\"z\"],\"logLevel\":\"INFO\",\"status\":\"SUCCESS\",\"provisioningState\":\"Building\",\"revision\":8978245391305162368}")
            .toObject(WorkloadNetworkDnsServiceProperties.class);
        Assertions.assertEquals("nsj", model.displayName());
        Assertions.assertEquals("vti", model.dnsServiceIp());
        Assertions.assertEquals("xsdszuempsb", model.defaultDnsZone());
        Assertions.assertEquals("z", model.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.INFO, model.logLevel());
        Assertions.assertEquals(8978245391305162368L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsServiceProperties model = new WorkloadNetworkDnsServiceProperties().withDisplayName("nsj")
            .withDnsServiceIp("vti")
            .withDefaultDnsZone("xsdszuempsb")
            .withFqdnZones(Arrays.asList("z"))
            .withLogLevel(DnsServiceLogLevelEnum.INFO)
            .withRevision(8978245391305162368L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsServiceProperties.class);
        Assertions.assertEquals("nsj", model.displayName());
        Assertions.assertEquals("vti", model.dnsServiceIp());
        Assertions.assertEquals("xsdszuempsb", model.defaultDnsZone());
        Assertions.assertEquals("z", model.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.INFO, model.logLevel());
        Assertions.assertEquals(8978245391305162368L, model.revision());
    }
}
