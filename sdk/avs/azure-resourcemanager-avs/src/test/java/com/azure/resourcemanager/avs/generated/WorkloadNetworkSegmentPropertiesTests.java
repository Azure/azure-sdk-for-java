// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkSegmentProperties;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegmentSubnet;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkSegmentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkSegmentProperties model = BinaryData.fromString(
            "{\"displayName\":\"v\",\"connectedGateway\":\"vc\",\"subnet\":{\"dhcpRanges\":[\"hyrnxxmu\",\"edndr\",\"v\"],\"gatewayAddress\":\"kwqqtchealmf\"},\"portVif\":[{\"portName\":\"aygdvwvgpioh\"}],\"status\":\"FAILURE\",\"provisioningState\":\"Updating\",\"revision\":4267712994723917741}")
            .toObject(WorkloadNetworkSegmentProperties.class);
        Assertions.assertEquals("v", model.displayName());
        Assertions.assertEquals("vc", model.connectedGateway());
        Assertions.assertEquals("hyrnxxmu", model.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("kwqqtchealmf", model.subnet().gatewayAddress());
        Assertions.assertEquals(4267712994723917741L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkSegmentProperties model = new WorkloadNetworkSegmentProperties().withDisplayName("v")
            .withConnectedGateway("vc")
            .withSubnet(new WorkloadNetworkSegmentSubnet().withDhcpRanges(Arrays.asList("hyrnxxmu", "edndr", "v"))
                .withGatewayAddress("kwqqtchealmf"))
            .withRevision(4267712994723917741L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkSegmentProperties.class);
        Assertions.assertEquals("v", model.displayName());
        Assertions.assertEquals("vc", model.connectedGateway());
        Assertions.assertEquals("hyrnxxmu", model.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("kwqqtchealmf", model.subnet().gatewayAddress());
        Assertions.assertEquals(4267712994723917741L, model.revision());
    }
}
