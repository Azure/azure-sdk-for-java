// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkSegmentProperties;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegmentSubnet;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkSegmentPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkSegmentProperties model = BinaryData.fromString(
            "{\"displayName\":\"nqzi\",\"connectedGateway\":\"fkbg\",\"subnet\":{\"dhcpRanges\":[\"wxeqocljmygvkzqk\",\"jeokbzefezrxccz\",\"rtle\"],\"gatewayAddress\":\"q\"},\"portVif\":[{\"portName\":\"vz\"}],\"status\":\"SUCCESS\",\"provisioningState\":\"Failed\",\"revision\":8865201443625196451}")
            .toObject(WorkloadNetworkSegmentProperties.class);
        Assertions.assertEquals("nqzi", model.displayName());
        Assertions.assertEquals("fkbg", model.connectedGateway());
        Assertions.assertEquals("wxeqocljmygvkzqk", model.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("q", model.subnet().gatewayAddress());
        Assertions.assertEquals(8865201443625196451L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkSegmentProperties model = new WorkloadNetworkSegmentProperties().withDisplayName("nqzi")
            .withConnectedGateway("fkbg")
            .withSubnet(new WorkloadNetworkSegmentSubnet()
                .withDhcpRanges(Arrays.asList("wxeqocljmygvkzqk", "jeokbzefezrxccz", "rtle"))
                .withGatewayAddress("q"))
            .withRevision(8865201443625196451L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkSegmentProperties.class);
        Assertions.assertEquals("nqzi", model.displayName());
        Assertions.assertEquals("fkbg", model.connectedGateway());
        Assertions.assertEquals("wxeqocljmygvkzqk", model.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("q", model.subnet().gatewayAddress());
        Assertions.assertEquals(8865201443625196451L, model.revision());
    }
}
