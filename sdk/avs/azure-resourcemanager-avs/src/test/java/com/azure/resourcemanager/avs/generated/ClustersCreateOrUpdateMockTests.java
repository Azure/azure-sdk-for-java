// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Cluster;
import com.azure.resourcemanager.avs.models.Sku;
import com.azure.resourcemanager.avs.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"clusterSize\":840004841,\"provisioningState\":\"Succeeded\",\"clusterId\":107298058,\"hosts\":[\"wsawddjibabxvi\",\"itvtzeexavo\",\"tfgle\"],\"vsanDatastoreName\":\"m\"},\"sku\":{\"name\":\"qbw\",\"tier\":\"Standard\",\"size\":\"tgsfja\",\"family\":\"slhhxudbxv\",\"capacity\":1337444270},\"id\":\"nsiru\",\"name\":\"hzmme\",\"type\":\"ckdlpag\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Cluster response = manager.clusters()
            .define("xvxevblbjednljla")
            .withExistingPrivateCloud("akz", "bbjjidjksyxk")
            .withSku(new Sku().withName("iymerteeammxqi")
                .withTier(SkuTier.PREMIUM)
                .withSize("zddrt")
                .withFamily("doj")
                .withCapacity(484922073))
            .withClusterSize(878697860)
            .withHosts(Arrays.asList("mjbnk", "pxynenlsvxeizzg", "klnsrmffey"))
            .withVsanDatastoreName("ckt")
            .create();

        Assertions.assertEquals("qbw", response.sku().name());
        Assertions.assertEquals(SkuTier.STANDARD, response.sku().tier());
        Assertions.assertEquals("tgsfja", response.sku().size());
        Assertions.assertEquals("slhhxudbxv", response.sku().family());
        Assertions.assertEquals(1337444270, response.sku().capacity());
        Assertions.assertEquals(840004841, response.clusterSize());
        Assertions.assertEquals("wsawddjibabxvi", response.hosts().get(0));
        Assertions.assertEquals("m", response.vsanDatastoreName());
    }
}
