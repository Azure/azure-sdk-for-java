// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegmentSubnet;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateSegmentsMockTests {
    @Test
    public void testCreateSegments() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"gttmvmmagoaqyl\",\"connectedGateway\":\"ztj\",\"subnet\":{\"dhcpRanges\":[\"jcg\"],\"gatewayAddress\":\"itpfinzcpdl\"},\"portVif\":[{\"portName\":\"gjmtbdrvcqguefzh\"},{\"portName\":\"p\"}],\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":5442242837114254993},\"id\":\"ujlfyoumpcky\",\"name\":\"clcdigptajbrzmq\",\"type\":\"ucycijo\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkSegment response = manager.workloadNetworks()
            .defineSegments("rtudawlpjfel")
            .withExistingPrivateCloud("yeji", "iuxegth")
            .withDisplayName("pptcbgqnzmnhii")
            .withConnectedGateway("alwcjgckbb")
            .withSubnet(new WorkloadNetworkSegmentSubnet()
                .withDhcpRanges(Arrays.asList("zpraoxn", "uffatsgftipwc", "byubhiqdxyurnpn", "hza"))
                .withGatewayAddress("cnuhiigbylbuigv"))
            .withRevision(4905778208552045689L)
            .create();

        Assertions.assertEquals("gttmvmmagoaqyl", response.displayName());
        Assertions.assertEquals("ztj", response.connectedGateway());
        Assertions.assertEquals("jcg", response.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("itpfinzcpdl", response.subnet().gatewayAddress());
        Assertions.assertEquals(5442242837114254993L, response.revision());
    }
}
