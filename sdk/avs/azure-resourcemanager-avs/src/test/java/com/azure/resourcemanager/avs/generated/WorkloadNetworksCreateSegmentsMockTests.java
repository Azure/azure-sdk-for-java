// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegmentSubnet;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateSegmentsMockTests {
    @Test
    public void testCreateSegments() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"mt\",\"connectedGateway\":\"sknxrwzawnvsbcf\",\"subnet\":{\"dhcpRanges\":[\"xn\",\"hycvdimwrzre\"],\"gatewayAddress\":\"gy\"},\"portVif\":[{\"portName\":\"rw\"},{\"portName\":\"eryekzkdhmeottaw\"},{\"portName\":\"osxw\"}],\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":1446035478813685043},\"id\":\"n\",\"name\":\"pmil\",\"type\":\"pnwy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkSegment response = manager.workloadNetworks()
            .defineSegments("zjd")
            .withExistingPrivateCloud("jc", "z")
            .withDisplayName("jb")
            .withConnectedGateway("jeaoqaqbz")
            .withSubnet(new WorkloadNetworkSegmentSubnet().withDhcpRanges(Arrays.asList("w", "v", "atbwbqam", "e"))
                .withGatewayAddress("iyslpkcvmwfaux"))
            .withRevision(2240819145094168645L)
            .create();

        Assertions.assertEquals("mt", response.displayName());
        Assertions.assertEquals("sknxrwzawnvsbcf", response.connectedGateway());
        Assertions.assertEquals("xn", response.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("gy", response.subnet().gatewayAddress());
        Assertions.assertEquals(1446035478813685043L, response.revision());
    }
}
