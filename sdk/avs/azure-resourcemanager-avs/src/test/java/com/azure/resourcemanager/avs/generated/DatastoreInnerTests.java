// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreInner;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import org.junit.jupiter.api.Assertions;

public final class DatastoreInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"ovvqfovljxywsu\"},\"diskPoolVolume\":{\"targetId\":\"yrs\",\"lunName\":\"dsytgadgvr\",\"mountOption\":\"ATTACH\",\"path\":\"neqn\"},\"elasticSanVolume\":{\"targetId\":\"rrwlquuijfqkace\"},\"pureStorageVolume\":{\"storagePoolId\":\"ipfpubji\",\"sizeGb\":1307066310},\"status\":\"DeadOrError\"},\"id\":\"tohqkvpuvksgp\",\"name\":\"saknynfsyn\",\"type\":\"jphuopxodlqi\"}")
            .toObject(DatastoreInner.class);
        Assertions.assertEquals("ovvqfovljxywsu", model.netAppVolume().id());
        Assertions.assertEquals("yrs", model.diskPoolVolume().targetId());
        Assertions.assertEquals("dsytgadgvr", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("rrwlquuijfqkace", model.elasticSanVolume().targetId());
        Assertions.assertEquals("ipfpubji", model.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(1307066310, model.pureStorageVolume().sizeGb());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreInner model = new DatastoreInner().withNetAppVolume(new NetAppVolume().withId("ovvqfovljxywsu"))
            .withDiskPoolVolume(new DiskPoolVolume().withTargetId("yrs")
                .withLunName("dsytgadgvr")
                .withMountOption(MountOptionEnum.ATTACH))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("rrwlquuijfqkace"))
            .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("ipfpubji").withSizeGb(1307066310));
        model = BinaryData.fromObject(model).toObject(DatastoreInner.class);
        Assertions.assertEquals("ovvqfovljxywsu", model.netAppVolume().id());
        Assertions.assertEquals("yrs", model.diskPoolVolume().targetId());
        Assertions.assertEquals("dsytgadgvr", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("rrwlquuijfqkace", model.elasticSanVolume().targetId());
        Assertions.assertEquals("ipfpubji", model.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(1307066310, model.pureStorageVolume().sizeGb());
    }
}
