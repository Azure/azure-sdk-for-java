// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreInner;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import org.junit.jupiter.api.Assertions;

public final class DatastoreInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"zy\"},\"diskPoolVolume\":{\"targetId\":\"hxmzsbbzoggig\",\"lunName\":\"xwburvjxxjns\",\"mountOption\":\"ATTACH\",\"path\":\"tko\"},\"elasticSanVolume\":{\"targetId\":\"kouknvudwtiu\"},\"status\":\"Detached\"},\"id\":\"ngkpocipazy\",\"name\":\"o\",\"type\":\"gukgjnpiucgygevq\"}")
            .toObject(DatastoreInner.class);
        Assertions.assertEquals("zy", model.netAppVolume().id());
        Assertions.assertEquals("hxmzsbbzoggig", model.diskPoolVolume().targetId());
        Assertions.assertEquals("xwburvjxxjns", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("kouknvudwtiu", model.elasticSanVolume().targetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreInner model = new DatastoreInner().withNetAppVolume(new NetAppVolume().withId("zy"))
            .withDiskPoolVolume(new DiskPoolVolume().withTargetId("hxmzsbbzoggig")
                .withLunName("xwburvjxxjns")
                .withMountOption(MountOptionEnum.ATTACH))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("kouknvudwtiu"));
        model = BinaryData.fromObject(model).toObject(DatastoreInner.class);
        Assertions.assertEquals("zy", model.netAppVolume().id());
        Assertions.assertEquals("hxmzsbbzoggig", model.diskPoolVolume().targetId());
        Assertions.assertEquals("xwburvjxxjns", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("kouknvudwtiu", model.elasticSanVolume().targetId());
    }
}
