// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreInner;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import org.junit.jupiter.api.Assertions;

public final class DatastoreInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreInner model = BinaryData.fromString(
            "{\"properties\":{\"provisioningState\":\"Failed\",\"netAppVolume\":{\"id\":\"zoqftiyqzrnkcqvy\"},\"diskPoolVolume\":{\"targetId\":\"whzlsicohoq\",\"lunName\":\"nwvlryavwhheunmm\",\"mountOption\":\"MOUNT\",\"path\":\"xzko\"},\"elasticSanVolume\":{\"targetId\":\"cukoklyaxuconu\"},\"status\":\"Accessible\"},\"id\":\"kbeype\",\"name\":\"rmjmwvvjektc\",\"type\":\"senhwlrs\"}")
            .toObject(DatastoreInner.class);
        Assertions.assertEquals("zoqftiyqzrnkcqvy", model.netAppVolume().id());
        Assertions.assertEquals("whzlsicohoq", model.diskPoolVolume().targetId());
        Assertions.assertEquals("nwvlryavwhheunmm", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("cukoklyaxuconu", model.elasticSanVolume().targetId());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreInner model = new DatastoreInner().withNetAppVolume(new NetAppVolume().withId("zoqftiyqzrnkcqvy"))
            .withDiskPoolVolume(new DiskPoolVolume().withTargetId("whzlsicohoq")
                .withLunName("nwvlryavwhheunmm")
                .withMountOption(MountOptionEnum.MOUNT))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("cukoklyaxuconu"));
        model = BinaryData.fromObject(model).toObject(DatastoreInner.class);
        Assertions.assertEquals("zoqftiyqzrnkcqvy", model.netAppVolume().id());
        Assertions.assertEquals("whzlsicohoq", model.diskPoolVolume().targetId());
        Assertions.assertEquals("nwvlryavwhheunmm", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("cukoklyaxuconu", model.elasticSanVolume().targetId());
    }
}
