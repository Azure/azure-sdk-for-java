// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionProperties model = BinaryData.fromString(
            "{\"scriptCmdletId\":\"mqhldvrii\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"nalghfkvtvsexso\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ueluqhhahhxvrhmz\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"jgwwspughftq\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"xhqxujxukndxdigr\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"guufzd\"}],\"failureReason\":\"yqtfihwh\",\"timeout\":\"otzi\",\"retention\":\"amvpphoszqzudph\",\"submittedAt\":\"2021-05-02T09:33:50Z\",\"startedAt\":\"2021-04-08T12:01:53Z\",\"finishedAt\":\"2021-02-05T20:02:56Z\",\"provisioningState\":\"Pending\",\"output\":[\"cvtbv\",\"ayhmtnvyqiatkz\",\"pcnp\",\"zcjaesgvvsccy\"],\"namedOutputs\":{\"hwyg\":\"datauq\"},\"information\":[\"dnkfx\",\"semdwzrmu\",\"apfcqdpsq\"],\"warnings\":[\"psvuoymgc\",\"elvezrypq\",\"mfe\"],\"errors\":[\"rqwky\",\"kobopgxed\",\"owepbqpcrfkb\",\"ccsnjvcdwxlpq\"]}")
            .toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("mqhldvrii", model.scriptCmdletId());
        Assertions.assertEquals("nalghfkvtvsexso", model.parameters().get(0).name());
        Assertions.assertEquals("jgwwspughftq", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("yqtfihwh", model.failureReason());
        Assertions.assertEquals("otzi", model.timeout());
        Assertions.assertEquals("amvpphoszqzudph", model.retention());
        Assertions.assertEquals("cvtbv", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionProperties model = new ScriptExecutionProperties().withScriptCmdletId("mqhldvrii")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("nalghfkvtvsexso"),
                new ScriptExecutionParameter().withName("ueluqhhahhxvrhmz")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("jgwwspughftq"),
                new ScriptExecutionParameter().withName("xhqxujxukndxdigr"),
                new ScriptExecutionParameter().withName("guufzd")))
            .withFailureReason("yqtfihwh")
            .withTimeout("otzi")
            .withRetention("amvpphoszqzudph")
            .withOutput(Arrays.asList("cvtbv", "ayhmtnvyqiatkz", "pcnp", "zcjaesgvvsccy"))
            .withNamedOutputs(mapOf("hwyg", "datauq"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("mqhldvrii", model.scriptCmdletId());
        Assertions.assertEquals("nalghfkvtvsexso", model.parameters().get(0).name());
        Assertions.assertEquals("jgwwspughftq", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("yqtfihwh", model.failureReason());
        Assertions.assertEquals("otzi", model.timeout());
        Assertions.assertEquals("amvpphoszqzudph", model.retention());
        Assertions.assertEquals("cvtbv", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
