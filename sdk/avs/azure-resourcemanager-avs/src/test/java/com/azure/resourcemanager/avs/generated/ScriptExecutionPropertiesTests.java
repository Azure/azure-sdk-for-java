// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionProperties model = BinaryData.fromString(
            "{\"scriptCmdletId\":\"impevf\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"lrri\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"wdxsm\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ccwr\"}],\"failureReason\":\"scjfnyns\",\"timeout\":\"qujizdvo\",\"retention\":\"tiby\",\"submittedAt\":\"2021-08-16T17:07:06Z\",\"startedAt\":\"2021-01-16T07:56:01Z\",\"finishedAt\":\"2021-04-29T06:10:08Z\",\"provisioningState\":\"Running\",\"output\":[\"pthjoxo\"],\"namedOutputs\":{\"pi\":\"datasks\",\"xkcgxxlxsffgcvi\":\"datalqol\"},\"information\":[\"dwl\",\"w\",\"youpfgfbkj\",\"bdyhgkfminsgowz\"],\"warnings\":[\"sttktlahbqa\",\"tx\",\"gzukxitmm\"],\"errors\":[\"qqqxhrnxrx\",\"pjui\"]}")
            .toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("impevf", model.scriptCmdletId());
        Assertions.assertEquals("lrri", model.parameters().get(0).name());
        Assertions.assertEquals("wdxsm", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("scjfnyns", model.failureReason());
        Assertions.assertEquals("qujizdvo", model.timeout());
        Assertions.assertEquals("tiby", model.retention());
        Assertions.assertEquals("pthjoxo", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionProperties model = new ScriptExecutionProperties().withScriptCmdletId("impevf")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("lrri")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("wdxsm"),
                new ScriptExecutionParameter().withName("ccwr")))
            .withFailureReason("scjfnyns")
            .withTimeout("qujizdvo")
            .withRetention("tiby")
            .withOutput(Arrays.asList("pthjoxo"))
            .withNamedOutputs(mapOf("pi", "datasks", "xkcgxxlxsffgcvi", "datalqol"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("impevf", model.scriptCmdletId());
        Assertions.assertEquals("lrri", model.parameters().get(0).name());
        Assertions.assertEquals("wdxsm", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("scjfnyns", model.failureReason());
        Assertions.assertEquals("qujizdvo", model.timeout());
        Assertions.assertEquals("tiby", model.retention());
        Assertions.assertEquals("pthjoxo", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
