// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionProperties model = BinaryData.fromString(
            "{\"scriptCmdletId\":\"zdgiruj\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"omvzzbtd\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"qvpn\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"yujviylwdshfssn\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"ye\"}],\"failureReason\":\"ymsgaojfmwnc\",\"timeout\":\"tmr\",\"retention\":\"irctymoxoftpipiw\",\"submittedAt\":\"2021-04-10T00:16:32Z\",\"startedAt\":\"2021-03-13T17:37:26Z\",\"finishedAt\":\"2021-05-14T09:28:57Z\",\"provisioningState\":\"Cancelling\",\"output\":[\"lihhyuspskasdvlm\",\"wdgzxulucv\"],\"namedOutputs\":{\"rsre\":{},\"zvxurisjnhny\":{},\"xifqjzgxm\":{},\"hu\":{}},\"information\":[\"pcesutrg\"],\"warnings\":[\"auutpwoqhihe\",\"qg\"],\"errors\":[\"nfqn\",\"cypsxjv\",\"oimwkslirc\"]}")
            .toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("zdgiruj", model.scriptCmdletId());
        Assertions.assertEquals("omvzzbtd", model.parameters().get(0).name());
        Assertions.assertEquals("ye", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("ymsgaojfmwnc", model.failureReason());
        Assertions.assertEquals("tmr", model.timeout());
        Assertions.assertEquals("irctymoxoftpipiw", model.retention());
        Assertions.assertEquals("lihhyuspskasdvlm", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionProperties model = new ScriptExecutionProperties().withScriptCmdletId("zdgiruj")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("omvzzbtd"),
                new ScriptExecutionParameter().withName("qvpn"),
                new ScriptExecutionParameter().withName("yujviylwdshfssn")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("ye")))
            .withFailureReason("ymsgaojfmwnc")
            .withTimeout("tmr")
            .withRetention("irctymoxoftpipiw")
            .withOutput(Arrays.asList("lihhyuspskasdvlm", "wdgzxulucv"))
            .withNamedOutputs(mapOf("rsre", new ScriptExecutionPropertiesNamedOutput(), "zvxurisjnhny",
                new ScriptExecutionPropertiesNamedOutput(), "xifqjzgxm", new ScriptExecutionPropertiesNamedOutput(),
                "hu", new ScriptExecutionPropertiesNamedOutput()));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("zdgiruj", model.scriptCmdletId());
        Assertions.assertEquals("omvzzbtd", model.parameters().get(0).name());
        Assertions.assertEquals("ye", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("ymsgaojfmwnc", model.failureReason());
        Assertions.assertEquals("tmr", model.timeout());
        Assertions.assertEquals("irctymoxoftpipiw", model.retention());
        Assertions.assertEquals("lihhyuspskasdvlm", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
