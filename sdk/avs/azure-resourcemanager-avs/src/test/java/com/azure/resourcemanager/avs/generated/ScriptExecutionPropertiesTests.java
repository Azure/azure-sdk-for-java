// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionProperties model = BinaryData.fromString(
            "{\"scriptCmdletId\":\"wnujhemmsbvdk\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"dtjinfw\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"lfltka\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"efkdlf\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"akggkfpag\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"owpulpq\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"lyls\"}],\"failureReason\":\"k\",\"timeout\":\"jnsjervtiagxsd\",\"retention\":\"uem\",\"submittedAt\":\"2021-06-09T02:50:50Z\",\"startedAt\":\"2021-10-12T12:33:37Z\",\"finishedAt\":\"2021-02-15T03:12:09Z\",\"provisioningState\":\"Cancelled\",\"output\":[\"pnqi\"],\"namedOutputs\":{\"nvkjjxdxrbuukzcl\":{},\"wyhmlw\":{},\"aztz\":{},\"ofncckwyfzqwhxxb\":{}},\"information\":[\"a\"],\"warnings\":[\"eqz\",\"ppriol\",\"or\"],\"errors\":[\"tolmncwsobqw\"]}")
            .toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("wnujhemmsbvdk", model.scriptCmdletId());
        Assertions.assertEquals("dtjinfw", model.parameters().get(0).name());
        Assertions.assertEquals("efkdlf", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("k", model.failureReason());
        Assertions.assertEquals("jnsjervtiagxsd", model.timeout());
        Assertions.assertEquals("uem", model.retention());
        Assertions.assertEquals("pnqi", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionProperties model = new ScriptExecutionProperties().withScriptCmdletId("wnujhemmsbvdk")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("dtjinfw"),
                new ScriptExecutionParameter().withName("lfltka")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("efkdlf"),
                new ScriptExecutionParameter().withName("akggkfpag"),
                new ScriptExecutionParameter().withName("owpulpq"), new ScriptExecutionParameter().withName("lyls")))
            .withFailureReason("k")
            .withTimeout("jnsjervtiagxsd")
            .withRetention("uem")
            .withOutput(Arrays.asList("pnqi"))
            .withNamedOutputs(mapOf("nvkjjxdxrbuukzcl", new ScriptExecutionPropertiesNamedOutput(), "wyhmlw",
                new ScriptExecutionPropertiesNamedOutput(), "aztz", new ScriptExecutionPropertiesNamedOutput(),
                "ofncckwyfzqwhxxb", new ScriptExecutionPropertiesNamedOutput()));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("wnujhemmsbvdk", model.scriptCmdletId());
        Assertions.assertEquals("dtjinfw", model.parameters().get(0).name());
        Assertions.assertEquals("efkdlf", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("k", model.failureReason());
        Assertions.assertEquals("jnsjervtiagxsd", model.timeout());
        Assertions.assertEquals("uem", model.retention());
        Assertions.assertEquals("pnqi", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
