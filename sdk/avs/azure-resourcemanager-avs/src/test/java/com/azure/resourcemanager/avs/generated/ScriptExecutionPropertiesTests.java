// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionProperties model = BinaryData.fromString(
            "{\"scriptCmdletId\":\"slqlfmmdn\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"lzpswiydm\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"wyhzdx\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"sadbz\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"dfznudaodv\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"zbn\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"blylpstdbh\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"xsrz\"}],\"failureReason\":\"ucerscdntnevfi\",\"timeout\":\"jmygtdsslswtmwer\",\"retention\":\"fzp\",\"submittedAt\":\"2021-11-27T22:56:12Z\",\"startedAt\":\"2021-06-06T05:20:48Z\",\"finishedAt\":\"2021-07-25T08:24:12Z\",\"provisioningState\":\"Failed\",\"output\":[\"hhszh\",\"d\",\"lvwiwubmwmbesl\",\"nkww\"],\"namedOutputs\":{\"okonzmnsikvmkqz\":\"datajflcxog\",\"eodkwobda\":\"dataqqkdltfzxmhhvhgu\",\"xndlkzgxhu\":\"dataxtibqdxbxwakbog\"},\"information\":[\"lbpodxunk\",\"ebxmubyynt\",\"lrb\"],\"warnings\":[\"oievseotgqrlltm\",\"wlauwzizxbmpg\"],\"errors\":[\"fuzmuvpbtt\",\"um\",\"rp\"]}")
            .toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("slqlfmmdn", model.scriptCmdletId());
        Assertions.assertEquals("lzpswiydm", model.parameters().get(0).name());
        Assertions.assertEquals("dfznudaodv", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("ucerscdntnevfi", model.failureReason());
        Assertions.assertEquals("jmygtdsslswtmwer", model.timeout());
        Assertions.assertEquals("fzp", model.retention());
        Assertions.assertEquals("hhszh", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionProperties model = new ScriptExecutionProperties().withScriptCmdletId("slqlfmmdn")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("lzpswiydm"),
                new ScriptExecutionParameter().withName("wyhzdx"), new ScriptExecutionParameter().withName("sadbz")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("dfznudaodv"),
                new ScriptExecutionParameter().withName("zbn"), new ScriptExecutionParameter().withName("blylpstdbh"),
                new ScriptExecutionParameter().withName("xsrz")))
            .withFailureReason("ucerscdntnevfi")
            .withTimeout("jmygtdsslswtmwer")
            .withRetention("fzp")
            .withOutput(Arrays.asList("hhszh", "d", "lvwiwubmwmbesl", "nkww"))
            .withNamedOutputs(mapOf("okonzmnsikvmkqz", "datajflcxog", "eodkwobda", "dataqqkdltfzxmhhvhgu", "xndlkzgxhu",
                "dataxtibqdxbxwakbog"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("slqlfmmdn", model.scriptCmdletId());
        Assertions.assertEquals("lzpswiydm", model.parameters().get(0).name());
        Assertions.assertEquals("dfznudaodv", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("ucerscdntnevfi", model.failureReason());
        Assertions.assertEquals("jmygtdsslswtmwer", model.timeout());
        Assertions.assertEquals("fzp", model.retention());
        Assertions.assertEquals("hhszh", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
