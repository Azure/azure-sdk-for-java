// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionProperties;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionProperties model = BinaryData.fromString(
            "{\"scriptCmdletId\":\"ncckw\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"qwhxxbuyqaxzfeqz\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ppriol\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"or\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"altol\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"wsobqwcsdbn\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"dcfhucqdpf\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"vglsbjjca\"}],\"failureReason\":\"xbvtvudu\",\"timeout\":\"ncormrlxqtvcof\",\"retention\":\"f\",\"submittedAt\":\"2021-03-28T10:29:41Z\",\"startedAt\":\"2021-06-24T11:39:36Z\",\"finishedAt\":\"2021-11-15T11:26:46Z\",\"provisioningState\":\"Running\",\"output\":[\"nqvsaznqnto\",\"udsgs\"],\"namedOutputs\":{\"etaebu\":\"datakycgrauwj\",\"dmovsm\":\"datau\"},\"information\":[\"wabm\",\"oefki\"],\"warnings\":[\"tpuqujmq\",\"gkfbtndoaong\",\"jcntuj\"],\"errors\":[\"jed\"]}")
            .toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("ncckw", model.scriptCmdletId());
        Assertions.assertEquals("qwhxxbuyqaxzfeqz", model.parameters().get(0).name());
        Assertions.assertEquals("wsobqwcsdbn", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("xbvtvudu", model.failureReason());
        Assertions.assertEquals("ncormrlxqtvcof", model.timeout());
        Assertions.assertEquals("f", model.retention());
        Assertions.assertEquals("nqvsaznqnto", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionProperties model = new ScriptExecutionProperties().withScriptCmdletId("ncckw")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("qwhxxbuyqaxzfeqz"),
                new ScriptExecutionParameter().withName("ppriol"), new ScriptExecutionParameter().withName("or"),
                new ScriptExecutionParameter().withName("altol")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("wsobqwcsdbn"),
                new ScriptExecutionParameter().withName("dcfhucqdpf"),
                new ScriptExecutionParameter().withName("vglsbjjca")))
            .withFailureReason("xbvtvudu")
            .withTimeout("ncormrlxqtvcof")
            .withRetention("f")
            .withOutput(Arrays.asList("nqvsaznqnto", "udsgs"))
            .withNamedOutputs(mapOf("etaebu", "datakycgrauwj", "dmovsm", "datau"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionProperties.class);
        Assertions.assertEquals("ncckw", model.scriptCmdletId());
        Assertions.assertEquals("qwhxxbuyqaxzfeqz", model.parameters().get(0).name());
        Assertions.assertEquals("wsobqwcsdbn", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("xbvtvudu", model.failureReason());
        Assertions.assertEquals("ncormrlxqtvcof", model.timeout());
        Assertions.assertEquals("f", model.retention());
        Assertions.assertEquals("nqvsaznqnto", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
