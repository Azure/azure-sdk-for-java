// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsZoneProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsZonePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsZoneProperties model = BinaryData.fromString(
            "{\"displayName\":\"rxcpjuisavo\",\"domain\":[\"zfvazi\"],\"dnsServerIps\":[\"frqttbajlkatnw\"],\"sourceIp\":\"iopid\",\"dnsServices\":4942011391135790969,\"provisioningState\":\"Canceled\",\"revision\":488118096880825657}")
            .toObject(WorkloadNetworkDnsZoneProperties.class);
        Assertions.assertEquals("rxcpjuisavo", model.displayName());
        Assertions.assertEquals("zfvazi", model.domain().get(0));
        Assertions.assertEquals("frqttbajlkatnw", model.dnsServerIps().get(0));
        Assertions.assertEquals("iopid", model.sourceIp());
        Assertions.assertEquals(4942011391135790969L, model.dnsServices());
        Assertions.assertEquals(488118096880825657L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsZoneProperties model = new WorkloadNetworkDnsZoneProperties().withDisplayName("rxcpjuisavo")
            .withDomain(Arrays.asList("zfvazi"))
            .withDnsServerIps(Arrays.asList("frqttbajlkatnw"))
            .withSourceIp("iopid")
            .withDnsServices(4942011391135790969L)
            .withRevision(488118096880825657L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsZoneProperties.class);
        Assertions.assertEquals("rxcpjuisavo", model.displayName());
        Assertions.assertEquals("zfvazi", model.domain().get(0));
        Assertions.assertEquals("frqttbajlkatnw", model.dnsServerIps().get(0));
        Assertions.assertEquals("iopid", model.sourceIp());
        Assertions.assertEquals(4942011391135790969L, model.dnsServices());
        Assertions.assertEquals(488118096880825657L, model.revision());
    }
}
