// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsZoneProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsZonePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsZoneProperties model = BinaryData.fromString(
            "{\"displayName\":\"tvtzeexavoxtfg\",\"domain\":[\"dmdqb\"],\"dnsServerIps\":[\"pqtgsfjac\"],\"sourceIp\":\"lhhxudbxvodhtnsi\",\"dnsServices\":3579473819283071102,\"provisioningState\":\"Failed\",\"revision\":1178624651848849936}")
            .toObject(WorkloadNetworkDnsZoneProperties.class);
        Assertions.assertEquals("tvtzeexavoxtfg", model.displayName());
        Assertions.assertEquals("dmdqb", model.domain().get(0));
        Assertions.assertEquals("pqtgsfjac", model.dnsServerIps().get(0));
        Assertions.assertEquals("lhhxudbxvodhtnsi", model.sourceIp());
        Assertions.assertEquals(3579473819283071102L, model.dnsServices());
        Assertions.assertEquals(1178624651848849936L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsZoneProperties model
            = new WorkloadNetworkDnsZoneProperties().withDisplayName("tvtzeexavoxtfg")
                .withDomain(Arrays.asList("dmdqb"))
                .withDnsServerIps(Arrays.asList("pqtgsfjac"))
                .withSourceIp("lhhxudbxvodhtnsi")
                .withDnsServices(3579473819283071102L)
                .withRevision(1178624651848849936L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsZoneProperties.class);
        Assertions.assertEquals("tvtzeexavoxtfg", model.displayName());
        Assertions.assertEquals("dmdqb", model.domain().get(0));
        Assertions.assertEquals("pqtgsfjac", model.dnsServerIps().get(0));
        Assertions.assertEquals("lhhxudbxvodhtnsi", model.sourceIp());
        Assertions.assertEquals(3579473819283071102L, model.dnsServices());
        Assertions.assertEquals(1178624651848849936L, model.revision());
    }
}
