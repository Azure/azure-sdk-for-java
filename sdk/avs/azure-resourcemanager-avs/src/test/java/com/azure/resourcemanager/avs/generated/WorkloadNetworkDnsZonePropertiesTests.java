// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsZoneProperties;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsZonePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsZoneProperties model = BinaryData.fromString(
            "{\"displayName\":\"gxk\",\"domain\":[\"atmelwui\"],\"dnsServerIps\":[\"cjzkzivgvvcna\",\"rhyrnxxmueed\",\"drd\"],\"sourceIp\":\"tkwqqtchealm\",\"dnsServices\":2875480604821792642,\"provisioningState\":\"Canceled\",\"revision\":2951445315314991952}")
            .toObject(WorkloadNetworkDnsZoneProperties.class);
        Assertions.assertEquals("gxk", model.displayName());
        Assertions.assertEquals("atmelwui", model.domain().get(0));
        Assertions.assertEquals("cjzkzivgvvcna", model.dnsServerIps().get(0));
        Assertions.assertEquals("tkwqqtchealm", model.sourceIp());
        Assertions.assertEquals(2875480604821792642L, model.dnsServices());
        Assertions.assertEquals(2951445315314991952L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsZoneProperties model = new WorkloadNetworkDnsZoneProperties().withDisplayName("gxk")
            .withDomain(Arrays.asList("atmelwui"))
            .withDnsServerIps(Arrays.asList("cjzkzivgvvcna", "rhyrnxxmueed", "drd"))
            .withSourceIp("tkwqqtchealm")
            .withDnsServices(2875480604821792642L)
            .withRevision(2951445315314991952L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsZoneProperties.class);
        Assertions.assertEquals("gxk", model.displayName());
        Assertions.assertEquals("atmelwui", model.domain().get(0));
        Assertions.assertEquals("cjzkzivgvvcna", model.dnsServerIps().get(0));
        Assertions.assertEquals("tkwqqtchealm", model.sourceIp());
        Assertions.assertEquals(2875480604821792642L, model.dnsServices());
        Assertions.assertEquals(2951445315314991952L, model.revision());
    }
}
