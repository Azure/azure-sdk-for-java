// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksListDnsZonesMockTests {
    @Test
    public void testListDnsZones() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"twvc\",\"domain\":[\"wka\",\"ve\"],\"dnsServerIps\":[\"dvlvhbwrnfxtgdd\"],\"sourceIp\":\"th\",\"dnsServices\":319815820315480755,\"provisioningState\":\"Updating\",\"revision\":4507134734871641065},\"id\":\"kcoeqswank\",\"name\":\"t\",\"type\":\"tmhdroznnhdr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkloadNetworkDnsZone> response = manager.workloadNetworks()
            .listDnsZones("gkkumuikjcj", "aztb", "snsqowxwcoml", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("twvc", response.iterator().next().displayName());
        Assertions.assertEquals("wka", response.iterator().next().domain().get(0));
        Assertions.assertEquals("dvlvhbwrnfxtgdd", response.iterator().next().dnsServerIps().get(0));
        Assertions.assertEquals("th", response.iterator().next().sourceIp());
        Assertions.assertEquals(319815820315480755L, response.iterator().next().dnsServices());
        Assertions.assertEquals(4507134734871641065L, response.iterator().next().revision());
    }
}
