// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksListDnsZonesMockTests {
    @Test
    public void testListDnsZones() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"ykzkdncjdxo\",\"domain\":[\"oggculapz\",\"y\",\"pgogtqxepny\"],\"dnsServerIps\":[\"uajlyj\",\"lvofqzhvfcibyfmo\"],\"sourceIp\":\"xrkjpvdw\",\"dnsServices\":4789424331234549662,\"provisioningState\":\"Succeeded\",\"revision\":4970789347057836253},\"id\":\"bhyzsxjr\",\"name\":\"ambtrnegvm\",\"type\":\"vuqeqvldspast\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkloadNetworkDnsZone> response = manager.workloadNetworks()
            .listDnsZones("oqcaaewdaomdj", "l", "jxxkzbrmsgei", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ykzkdncjdxo", response.iterator().next().displayName());
        Assertions.assertEquals("oggculapz", response.iterator().next().domain().get(0));
        Assertions.assertEquals("uajlyj", response.iterator().next().dnsServerIps().get(0));
        Assertions.assertEquals("xrkjpvdw", response.iterator().next().sourceIp());
        Assertions.assertEquals(4789424331234549662L, response.iterator().next().dnsServices());
        Assertions.assertEquals(4970789347057836253L, response.iterator().next().revision());
    }
}
