// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksListDnsZonesMockTests {
    @Test
    public void testListDnsZones() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"qhewj\",\"domain\":[\"cgsbost\",\"eln\",\"la\",\"utmzlbiojlvfhrbb\"],\"dnsServerIps\":[\"qvcww\",\"yurmochpprprs\",\"mo\",\"ayzejnhlbkpbz\"],\"sourceIp\":\"piljhahzvech\",\"dnsServices\":2112923393413282138,\"provisioningState\":\"Canceled\",\"revision\":3149234657831065578},\"id\":\"ewjwiuubw\",\"name\":\"fqsfa\",\"type\":\"aqtferr\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WorkloadNetworkDnsZone> response
            = manager.workloadNetworks().listDnsZones("zdix", "mqpnoda", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("qhewj", response.iterator().next().displayName());
        Assertions.assertEquals("cgsbost", response.iterator().next().domain().get(0));
        Assertions.assertEquals("qvcww", response.iterator().next().dnsServerIps().get(0));
        Assertions.assertEquals("piljhahzvech", response.iterator().next().sourceIp());
        Assertions.assertEquals(2112923393413282138L, response.iterator().next().dnsServices());
        Assertions.assertEquals(3149234657831065578L, response.iterator().next().revision());
    }
}
