// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsServiceInner;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsServiceInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsServiceInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"odko\",\"dnsServiceIp\":\"bw\",\"defaultDnsZone\":\"jhemms\",\"fqdnZones\":[\"kcrodtjinfw\",\"lfltka\"],\"logLevel\":\"FATAL\",\"status\":\"SUCCESS\",\"provisioningState\":\"Canceled\",\"revision\":6193547240906523394},\"id\":\"kggkfpa\",\"name\":\"ao\",\"type\":\"pulpqblylsyxk\"}")
            .toObject(WorkloadNetworkDnsServiceInner.class);
        Assertions.assertEquals("odko", model.displayName());
        Assertions.assertEquals("bw", model.dnsServiceIp());
        Assertions.assertEquals("jhemms", model.defaultDnsZone());
        Assertions.assertEquals("kcrodtjinfw", model.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, model.logLevel());
        Assertions.assertEquals(6193547240906523394L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsServiceInner model = new WorkloadNetworkDnsServiceInner().withDisplayName("odko")
            .withDnsServiceIp("bw")
            .withDefaultDnsZone("jhemms")
            .withFqdnZones(Arrays.asList("kcrodtjinfw", "lfltka"))
            .withLogLevel(DnsServiceLogLevelEnum.FATAL)
            .withRevision(6193547240906523394L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsServiceInner.class);
        Assertions.assertEquals("odko", model.displayName());
        Assertions.assertEquals("bw", model.dnsServiceIp());
        Assertions.assertEquals("jhemms", model.defaultDnsZone());
        Assertions.assertEquals("kcrodtjinfw", model.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, model.logLevel());
        Assertions.assertEquals(6193547240906523394L, model.revision());
    }
}
