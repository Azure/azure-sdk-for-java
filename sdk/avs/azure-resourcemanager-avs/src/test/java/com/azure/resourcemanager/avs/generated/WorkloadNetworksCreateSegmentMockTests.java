// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegmentSubnet;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateSegmentMockTests {
    @Test
    public void testCreateSegment() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"akchzyvlixqnrk\",\"connectedGateway\":\"kjibnxmysuxswqrn\",\"subnet\":{\"dhcpRanges\":[\"ijpstte\",\"oqq\",\"wcyyufmhruncu\",\"mqspkcdqzhlctdd\"],\"gatewayAddress\":\"qn\"},\"portVif\":[{\"portName\":\"chrqb\"}],\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":3423454128709861544},\"id\":\"dcwboxjum\",\"name\":\"qqoli\",\"type\":\"r\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkSegment response = manager.workloadNetworks()
            .defineSegment("ypuuwwltvuqjctze")
            .withExistingWorkloadNetwork("lvidizozs", "bccxjmonfdgn", "n")
            .withDisplayName("if")
            .withConnectedGateway("hmkdasvfl")
            .withSubnet(new WorkloadNetworkSegmentSubnet().withDhcpRanges(Arrays.asList("cu", "chxgs", "boldforobwj"))
                .withGatewayAddress("izbfhfovvacq"))
            .withRevision(8492119421545831935L)
            .create();

        Assertions.assertEquals("akchzyvlixqnrk", response.displayName());
        Assertions.assertEquals("kjibnxmysuxswqrn", response.connectedGateway());
        Assertions.assertEquals("ijpstte", response.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("qn", response.subnet().gatewayAddress());
        Assertions.assertEquals(3423454128709861544L, response.revision());
    }
}
