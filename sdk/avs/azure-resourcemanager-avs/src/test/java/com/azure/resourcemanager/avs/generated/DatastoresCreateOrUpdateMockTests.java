// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Datastore;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatastoresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"ab\"},\"diskPoolVolume\":{\"targetId\":\"ujtmvcopexcmjurb\",\"lunName\":\"hhlkyqltqsrogtu\",\"mountOption\":\"ATTACH\",\"path\":\"djk\"},\"elasticSanVolume\":{\"targetId\":\"ysidfvclgl\"},\"pureStorageVolume\":{\"storagePoolId\":\"fuijtkbus\",\"sizeGb\":939102144},\"status\":\"DeadOrError\"},\"id\":\"ikayiansharuj\",\"name\":\"ji\",\"type\":\"xfz\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Datastore response = manager.datastores()
            .define("zjrwdkqze")
            .withExistingCluster("m", "jgcgbjbgdlfgtdys", "aquflqbctqha")
            .withNetAppVolume(new NetAppVolume().withId("zi"))
            .withDiskPoolVolume(new DiskPoolVolume().withTargetId("jxdfzantkwcegya")
                .withLunName("lbnseqac")
                .withMountOption(MountOptionEnum.MOUNT))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("iookjbsah"))
            .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("dt").withSizeGb(807818343))
            .create();

        Assertions.assertEquals("ab", response.netAppVolume().id());
        Assertions.assertEquals("ujtmvcopexcmjurb", response.diskPoolVolume().targetId());
        Assertions.assertEquals("hhlkyqltqsrogtu", response.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, response.diskPoolVolume().mountOption());
        Assertions.assertEquals("ysidfvclgl", response.elasticSanVolume().targetId());
        Assertions.assertEquals("fuijtkbus", response.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(939102144, response.pureStorageVolume().sizeGb());
    }
}
