// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Datastore;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class DatastoresCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"ulidwc\"},\"diskPoolVolume\":{\"targetId\":\"mzegjon\",\"lunName\":\"hj\",\"mountOption\":\"MOUNT\",\"path\":\"dnqzbrfkspzhzmt\"},\"elasticSanVolume\":{\"targetId\":\"jcitdigsxcdglj\"},\"pureStorageVolume\":{\"storagePoolId\":\"keuachtomf\",\"sizeGb\":2004448547},\"status\":\"Attached\"},\"id\":\"wfpfmdgycx\",\"name\":\"mskwhqjjysl\",\"type\":\"rlpshhkv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        Datastore response = manager.datastores()
            .define("whmozusgzvlnsnnj")
            .withExistingCluster("dxfzzzwyjaf", "tlhguynuchl", "mltx")
            .withNetAppVolume(new NetAppVolume().withId("olpy"))
            .withDiskPoolVolume(new DiskPoolVolume().withTargetId("amxqzragpgdphtv")
                .withLunName("ulajvlejchc")
                .withMountOption(MountOptionEnum.MOUNT))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("nzqtpjhmqrhvt"))
            .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("aiwdcxsmlzzhz").withSizeGb(244559778))
            .create();

        Assertions.assertEquals("ulidwc", response.netAppVolume().id());
        Assertions.assertEquals("mzegjon", response.diskPoolVolume().targetId());
        Assertions.assertEquals("hj", response.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, response.diskPoolVolume().mountOption());
        Assertions.assertEquals("jcitdigsxcdglj", response.elasticSanVolume().targetId());
        Assertions.assertEquals("keuachtomf", response.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(2004448547, response.pureStorageVolume().sizeGb());
    }
}
