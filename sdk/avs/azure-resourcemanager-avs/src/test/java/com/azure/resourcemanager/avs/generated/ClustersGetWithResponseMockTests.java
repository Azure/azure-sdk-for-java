// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Cluster;
import com.azure.resourcemanager.avs.models.SkuTier;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ClustersGetWithResponseMockTests {
    @Test
    public void testGetWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"clusterSize\":1797870688,\"provisioningState\":\"Succeeded\",\"clusterId\":554244740,\"hosts\":[\"dyp\",\"hyuemslyn\",\"qyrp\"],\"vsanDatastoreName\":\"obrltt\"},\"sku\":{\"name\":\"msjnygqdnfw\",\"tier\":\"Basic\",\"size\":\"gtilax\",\"family\":\"fhqlyvi\",\"capacity\":2065118929},\"id\":\"iv\",\"name\":\"xoyzunbix\",\"type\":\"rtikvcpwpg\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Cluster response = manager.clusters()
            .getWithResponse("kuqgsjjxundxgket", "zhhzjhfjmhvvmu", "gpmuneqsxvmhfbuz", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("msjnygqdnfw", response.sku().name());
        Assertions.assertEquals(SkuTier.BASIC, response.sku().tier());
        Assertions.assertEquals("gtilax", response.sku().size());
        Assertions.assertEquals("fhqlyvi", response.sku().family());
        Assertions.assertEquals(2065118929, response.sku().capacity());
        Assertions.assertEquals(1797870688, response.clusterSize());
        Assertions.assertEquals("dyp", response.hosts().get(0));
        Assertions.assertEquals("obrltt", response.vsanDatastoreName());
    }
}
