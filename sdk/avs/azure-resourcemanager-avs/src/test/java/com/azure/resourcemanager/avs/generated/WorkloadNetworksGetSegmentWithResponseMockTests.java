// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkSegment;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksGetSegmentWithResponseMockTests {
    @Test
    public void testGetSegmentWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"zznvfbyc\",\"connectedGateway\":\"xjww\",\"subnet\":{\"dhcpRanges\":[\"umwmxqhnd\",\"noamldsehaohdj\"],\"gatewayAddress\":\"flzokxco\"},\"portVif\":[{\"portName\":\"nje\"}],\"status\":\"SUCCESS\",\"provisioningState\":\"Building\",\"revision\":2211214146299028527},\"id\":\"tft\",\"name\":\"zpnpbswv\",\"type\":\"floccsrmozih\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkSegment response = manager.workloadNetworks()
            .getSegmentWithResponse("qbsms", "ziqgfuh", "kzruswh", com.azure.core.util.Context.NONE)
            .getValue();

        Assertions.assertEquals("zznvfbyc", response.displayName());
        Assertions.assertEquals("xjww", response.connectedGateway());
        Assertions.assertEquals("umwmxqhnd", response.subnet().dhcpRanges().get(0));
        Assertions.assertEquals("flzokxco", response.subnet().gatewayAddress());
        Assertions.assertEquals(2211214146299028527L, response.revision());
    }
}
