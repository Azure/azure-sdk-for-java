// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksListDnsServicesMockTests {
    @Test
    public void testListDnsServices() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"mfgvxirpghriypo\",\"dnsServiceIp\":\"yhlqhykprlpyznu\",\"defaultDnsZone\":\"qdsmexiit\",\"fqdnZones\":[\"xtyasiibmiyb\",\"nustgnljh\",\"mgixhcmavmqfou\"],\"logLevel\":\"WARNING\",\"status\":\"SUCCESS\",\"provisioningState\":\"Deleting\",\"revision\":3767091522852862514},\"id\":\"twypundmbxh\",\"name\":\"gcmjkavl\",\"type\":\"or\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        PagedIterable<WorkloadNetworkDnsService> response
            = manager.workloadNetworks().listDnsServices("uyxoaf", "aoqltfaey", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("mfgvxirpghriypo", response.iterator().next().displayName());
        Assertions.assertEquals("yhlqhykprlpyznu", response.iterator().next().dnsServiceIp());
        Assertions.assertEquals("qdsmexiit", response.iterator().next().defaultDnsZone());
        Assertions.assertEquals("xtyasiibmiyb", response.iterator().next().fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.WARNING, response.iterator().next().logLevel());
        Assertions.assertEquals(3767091522852862514L, response.iterator().next().revision());
    }
}
