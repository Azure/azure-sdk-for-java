// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksListDnsServicesMockTests {
    @Test
    public void testListDnsServices() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"displayName\":\"ligovibrxkpm\",\"dnsServiceIp\":\"azur\",\"defaultDnsZone\":\"cbgoor\",\"fqdnZones\":[\"oybfhjxakvvj\",\"slordilmyww\",\"kgkxn\",\"edabgyvudtjue\"],\"logLevel\":\"DEBUG\",\"status\":\"FAILURE\",\"provisioningState\":\"Building\",\"revision\":8529210988663924924},\"id\":\"j\",\"name\":\"xccybvpa\",\"type\":\"akkud\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WorkloadNetworkDnsService> response = manager.workloadNetworks()
            .listDnsServices("atnwxyiopi", "kqqfk", "vscx", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("ligovibrxkpm", response.iterator().next().displayName());
        Assertions.assertEquals("azur", response.iterator().next().dnsServiceIp());
        Assertions.assertEquals("cbgoor", response.iterator().next().defaultDnsZone());
        Assertions.assertEquals("oybfhjxakvvj", response.iterator().next().fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.DEBUG, response.iterator().next().logLevel());
        Assertions.assertEquals(8529210988663924924L, response.iterator().next().revision());
    }
}
