// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreProperties;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import org.junit.jupiter.api.Assertions;

public final class DatastorePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreProperties model =
            BinaryData
                .fromString(
                    "{\"provisioningState\":\"Deleting\",\"netAppVolume\":{\"id\":\"cxgod\"},\"diskPoolVolume\":{\"targetId\":\"fqkkr\",\"lunName\":\"mpukgriw\",\"mountOption\":\"ATTACH\",\"path\":\"fbxzpuzycisp\"},\"status\":\"Attached\"}")
                .toObject(DatastoreProperties.class);
        Assertions.assertEquals("cxgod", model.netAppVolume().id());
        Assertions.assertEquals("fqkkr", model.diskPoolVolume().targetId());
        Assertions.assertEquals("mpukgriw", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.diskPoolVolume().mountOption());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreProperties model =
            new DatastoreProperties()
                .withNetAppVolume(new NetAppVolume().withId("cxgod"))
                .withDiskPoolVolume(
                    new DiskPoolVolume()
                        .withTargetId("fqkkr")
                        .withLunName("mpukgriw")
                        .withMountOption(MountOptionEnum.ATTACH));
        model = BinaryData.fromObject(model).toObject(DatastoreProperties.class);
        Assertions.assertEquals("cxgod", model.netAppVolume().id());
        Assertions.assertEquals("fqkkr", model.diskPoolVolume().targetId());
        Assertions.assertEquals("mpukgriw", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.diskPoolVolume().mountOption());
    }
}
