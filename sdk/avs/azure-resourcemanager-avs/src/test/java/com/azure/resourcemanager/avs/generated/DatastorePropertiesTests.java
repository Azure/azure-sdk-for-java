// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreProperties;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import org.junit.jupiter.api.Assertions;

public final class DatastorePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Canceled\",\"netAppVolume\":{\"id\":\"rz\"},\"diskPoolVolume\":{\"targetId\":\"leosjswsrms\",\"lunName\":\"yzrpzbchckqqzq\",\"mountOption\":\"MOUNT\",\"path\":\"ysuiizynkedya\"},\"elasticSanVolume\":{\"targetId\":\"wyhqmibzyhwits\"},\"pureStorageVolume\":{\"storagePoolId\":\"pyy\",\"sizeGb\":1903484882},\"status\":\"Detached\"}")
            .toObject(DatastoreProperties.class);
        Assertions.assertEquals("rz", model.netAppVolume().id());
        Assertions.assertEquals("leosjswsrms", model.diskPoolVolume().targetId());
        Assertions.assertEquals("yzrpzbchckqqzq", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("wyhqmibzyhwits", model.elasticSanVolume().targetId());
        Assertions.assertEquals("pyy", model.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(1903484882, model.pureStorageVolume().sizeGb());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreProperties model = new DatastoreProperties().withNetAppVolume(new NetAppVolume().withId("rz"))
            .withDiskPoolVolume(new DiskPoolVolume().withTargetId("leosjswsrms")
                .withLunName("yzrpzbchckqqzq")
                .withMountOption(MountOptionEnum.MOUNT))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("wyhqmibzyhwits"))
            .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("pyy").withSizeGb(1903484882));
        model = BinaryData.fromObject(model).toObject(DatastoreProperties.class);
        Assertions.assertEquals("rz", model.netAppVolume().id());
        Assertions.assertEquals("leosjswsrms", model.diskPoolVolume().targetId());
        Assertions.assertEquals("yzrpzbchckqqzq", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("wyhqmibzyhwits", model.elasticSanVolume().targetId());
        Assertions.assertEquals("pyy", model.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(1903484882, model.pureStorageVolume().sizeGb());
    }
}
