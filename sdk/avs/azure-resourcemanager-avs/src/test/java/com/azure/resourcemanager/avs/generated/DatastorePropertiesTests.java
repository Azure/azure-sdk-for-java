// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreProperties;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import com.azure.resourcemanager.avs.models.PureStorageVolume;
import org.junit.jupiter.api.Assertions;

public final class DatastorePropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreProperties model = BinaryData.fromString(
            "{\"provisioningState\":\"Succeeded\",\"netAppVolume\":{\"id\":\"e\"},\"diskPoolVolume\":{\"targetId\":\"a\",\"lunName\":\"a\",\"mountOption\":\"MOUNT\",\"path\":\"ayvvtpgvdf\"},\"elasticSanVolume\":{\"targetId\":\"otkftutqxlngx\"},\"pureStorageVolume\":{\"storagePoolId\":\"fgugnxkrxdqmid\",\"sizeGb\":676012519},\"status\":\"DeadOrError\"}")
            .toObject(DatastoreProperties.class);
        Assertions.assertEquals("e", model.netAppVolume().id());
        Assertions.assertEquals("a", model.diskPoolVolume().targetId());
        Assertions.assertEquals("a", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("otkftutqxlngx", model.elasticSanVolume().targetId());
        Assertions.assertEquals("fgugnxkrxdqmid", model.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(676012519, model.pureStorageVolume().sizeGb());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreProperties model = new DatastoreProperties().withNetAppVolume(new NetAppVolume().withId("e"))
            .withDiskPoolVolume(
                new DiskPoolVolume().withTargetId("a").withLunName("a").withMountOption(MountOptionEnum.MOUNT))
            .withElasticSanVolume(new ElasticSanVolume().withTargetId("otkftutqxlngx"))
            .withPureStorageVolume(new PureStorageVolume().withStoragePoolId("fgugnxkrxdqmid").withSizeGb(676012519));
        model = BinaryData.fromObject(model).toObject(DatastoreProperties.class);
        Assertions.assertEquals("e", model.netAppVolume().id());
        Assertions.assertEquals("a", model.diskPoolVolume().targetId());
        Assertions.assertEquals("a", model.diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.MOUNT, model.diskPoolVolume().mountOption());
        Assertions.assertEquals("otkftutqxlngx", model.elasticSanVolume().targetId());
        Assertions.assertEquals("fgugnxkrxdqmid", model.pureStorageVolume().storagePoolId());
        Assertions.assertEquals(676012519, model.pureStorageVolume().sizeGb());
    }
}
