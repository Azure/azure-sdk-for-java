// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.WorkloadNetworkDnsZoneInner;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsZoneInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsZoneInner model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"il\",\"domain\":[\"wt\",\"gkxnyedabg\"],\"dnsServerIps\":[\"dtj\",\"ewbcihxuuw\",\"c\"],\"sourceIp\":\"xccybvpa\",\"dnsServices\":6238077672035548376,\"provisioningState\":\"Succeeded\",\"revision\":1791393814695153018},\"id\":\"wjplma\",\"name\":\"stcyohpfkyrkdbd\",\"type\":\"iogsjkmnwq\"}")
            .toObject(WorkloadNetworkDnsZoneInner.class);
        Assertions.assertEquals("il", model.displayName());
        Assertions.assertEquals("wt", model.domain().get(0));
        Assertions.assertEquals("dtj", model.dnsServerIps().get(0));
        Assertions.assertEquals("xccybvpa", model.sourceIp());
        Assertions.assertEquals(6238077672035548376L, model.dnsServices());
        Assertions.assertEquals(1791393814695153018L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsZoneInner model = new WorkloadNetworkDnsZoneInner().withDisplayName("il")
            .withDomain(Arrays.asList("wt", "gkxnyedabg"))
            .withDnsServerIps(Arrays.asList("dtj", "ewbcihxuuw", "c"))
            .withSourceIp("xccybvpa")
            .withDnsServices(6238077672035548376L)
            .withRevision(1791393814695153018L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsZoneInner.class);
        Assertions.assertEquals("il", model.displayName());
        Assertions.assertEquals("wt", model.domain().get(0));
        Assertions.assertEquals("dtj", model.dnsServerIps().get(0));
        Assertions.assertEquals("xccybvpa", model.sourceIp());
        Assertions.assertEquals(6238077672035548376L, model.dnsServices());
        Assertions.assertEquals(1791393814695153018L, model.revision());
    }
}
