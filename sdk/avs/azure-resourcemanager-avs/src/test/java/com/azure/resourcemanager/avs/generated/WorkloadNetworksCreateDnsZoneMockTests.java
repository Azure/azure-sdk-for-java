// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"g\",\"domain\":[\"gpszngafpg\",\"lkvec\",\"ujcngo\"],\"dnsServerIps\":[\"edmzrgjfoknub\",\"oitpkpztrgdgx\"],\"sourceIp\":\"oqraswugyxpqi\",\"dnsServices\":652401856939203105,\"provisioningState\":\"Succeeded\",\"revision\":2425251451641968731},\"id\":\"buhzacaq\",\"name\":\"yltcoqcuj\",\"type\":\"dsxzakuejkmvb\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("aonwivkcqhrxh")
            .withExistingPrivateCloud("xzcwxhmpejt", "ke")
            .withDisplayName("lccrmmkyupi")
            .withDomain(Arrays.asList("yqjf", "akfqfrkemyildud", "jascowvfdjkpd", "phlkksnm"))
            .withDnsServerIps(Arrays.asList("yfijdkzuqnws", "thuqolyahluq", "qulsutrjbhxykfhy"))
            .withSourceIp("zvqqugdrftbcvexr")
            .withDnsServices(5938622404263998301L)
            .withRevision(3110818037980828259L)
            .create();

        Assertions.assertEquals("g", response.displayName());
        Assertions.assertEquals("gpszngafpg", response.domain().get(0));
        Assertions.assertEquals("edmzrgjfoknub", response.dnsServerIps().get(0));
        Assertions.assertEquals("oqraswugyxpqi", response.sourceIp());
        Assertions.assertEquals(652401856939203105L, response.dnsServices());
        Assertions.assertEquals(2425251451641968731L, response.revision());
    }
}
