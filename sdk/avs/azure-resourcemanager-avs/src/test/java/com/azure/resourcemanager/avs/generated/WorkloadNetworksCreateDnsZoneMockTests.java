// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"displayName\":\"ecwcrojphslhcawj\",\"domain\":[\"fdwfmvigorqj\"],\"dnsServerIps\":[\"zhraglkafh\"],\"sourceIp\":\"qjujeickpzvcp\",\"dnsServices\":5627090673281615873,\"provisioningState\":\"Succeeded\",\"revision\":266601174880523633},\"id\":\"ltyjedexxmlfmk\",\"name\":\"scazuawxtzxpu\",\"type\":\"mwabzxrvxc\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AvsManager manager =
            AvsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsZone response =
            manager
                .workloadNetworks()
                .defineDnsZone("jqg")
                .withExistingPrivateCloud("jw", "nyfusfzsvtuikzh")
                .withDisplayName("hm")
                .withDomain(Arrays.asList("ryxynqnzrd", "sovwxznptgoeiyb"))
                .withDnsServerIps(Arrays.asList("pfhvfslk"))
                .withSourceIp("tjlrigjksky")
                .withDnsServices(2909010011508190161L)
                .withRevision(7247162843356784078L)
                .create();

        Assertions.assertEquals("ecwcrojphslhcawj", response.displayName());
        Assertions.assertEquals("fdwfmvigorqj", response.domain().get(0));
        Assertions.assertEquals("zhraglkafh", response.dnsServerIps().get(0));
        Assertions.assertEquals("qjujeickpzvcp", response.sourceIp());
        Assertions.assertEquals(5627090673281615873L, response.dnsServices());
        Assertions.assertEquals(266601174880523633L, response.revision());
    }
}
