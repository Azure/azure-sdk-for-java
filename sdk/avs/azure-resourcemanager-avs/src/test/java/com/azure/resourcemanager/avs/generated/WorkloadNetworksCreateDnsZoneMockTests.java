// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"lkafhonqjuje\",\"domain\":[\"pzvcpopmxelnwc\",\"tyjedex\",\"mlfmkqs\",\"azuawx\"],\"dnsServerIps\":[\"puamwabzxr\"],\"sourceIp\":\"cush\",\"dnsServices\":5616883092736591366,\"provisioningState\":\"Succeeded\",\"revision\":4154943067306073010},\"id\":\"sflvgsgzwywakoih\",\"name\":\"nsmjbl\",\"type\":\"ljhlnymzotq\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("hv")
            .withExistingWorkloadNetwork("qryxyn", "nzrdpsovwxz", "ptgoeiybbabp")
            .withDisplayName("kvntjlrigjkskyri")
            .withDomain(Arrays.asList("zid", "xwaabzmifrygznmm", "xrizkzobgop"))
            .withDnsServerIps(Arrays.asList("slnelx"))
            .withSourceIp("ixynllxecwcrojp")
            .withDnsServices(2433482650518056787L)
            .withRevision(8260049170746325095L)
            .create();

        Assertions.assertEquals("lkafhonqjuje", response.displayName());
        Assertions.assertEquals("pzvcpopmxelnwc", response.domain().get(0));
        Assertions.assertEquals("puamwabzxr", response.dnsServerIps().get(0));
        Assertions.assertEquals("cush", response.sourceIp());
        Assertions.assertEquals(5616883092736591366L, response.dnsServices());
        Assertions.assertEquals(4154943067306073010L, response.revision());
    }
}
