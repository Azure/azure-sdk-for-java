// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"v\",\"domain\":[\"exavoxt\",\"glecdmdqbwpypq\"],\"dnsServerIps\":[\"fjacbslhhxudb\"],\"sourceIp\":\"odhtnsirudhzm\",\"dnsServices\":5834441974994701592,\"provisioningState\":\"Succeeded\",\"revision\":8486259057106369538},\"id\":\"zrcxfailcfxwmdbo\",\"name\":\"dfgsftufqobrj\",\"type\":\"nac\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("yxkyxvx")
            .withExistingWorkloadNetwork("eaahhvjhhn", "kzyb", "jjidjk")
            .withDisplayName("lbj")
            .withDomain(Arrays.asList("ljlageuaulxu", "smjbnkppxyn", "nlsvxeiz"))
            .withDnsServerIps(Arrays.asList("klnsrmffey", "xcktpiymerteeamm", "qiekkkzddrt"))
            .withSourceIp("doj")
            .withDnsServices(2082724442990629363L)
            .withRevision(8464578871437548472L)
            .create();

        Assertions.assertEquals("v", response.displayName());
        Assertions.assertEquals("exavoxt", response.domain().get(0));
        Assertions.assertEquals("fjacbslhhxudb", response.dnsServerIps().get(0));
        Assertions.assertEquals("odhtnsirudhzm", response.sourceIp());
        Assertions.assertEquals(5834441974994701592L, response.dnsServices());
        Assertions.assertEquals(8486259057106369538L, response.revision());
    }
}
