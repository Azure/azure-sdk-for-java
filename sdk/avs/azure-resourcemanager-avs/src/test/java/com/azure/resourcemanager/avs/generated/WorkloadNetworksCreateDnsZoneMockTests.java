// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"zvoamktc\",\"domain\":[\"smgbzahgxqdl\"],\"dnsServerIps\":[\"ltlaprltzkatbhj\"],\"sourceIp\":\"nnbsoqeqa\",\"dnsServices\":8492998195204098966,\"provisioningState\":\"Succeeded\",\"revision\":2285507075880761300},\"id\":\"tgfebwln\",\"name\":\"mhyreeudz\",\"type\":\"av\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("coxpelnjeta")
            .withExistingPrivateCloud("ehaohdjhh", "lzok")
            .withDisplayName("sxoa")
            .withDomain(Arrays.asList("g", "pnpbswveflocc"))
            .withDnsServerIps(Arrays.asList("ozihmipgawt"))
            .withSourceIp("pkyjcxcjxgrytfm")
            .withDnsServices(7160892458188162484L)
            .withRevision(4752457134964554908L)
            .create();

        Assertions.assertEquals("zvoamktc", response.displayName());
        Assertions.assertEquals("smgbzahgxqdl", response.domain().get(0));
        Assertions.assertEquals("ltlaprltzkatbhj", response.dnsServerIps().get(0));
        Assertions.assertEquals("nnbsoqeqa", response.sourceIp());
        Assertions.assertEquals(8492998195204098966L, response.dnsServices());
        Assertions.assertEquals(2285507075880761300L, response.revision());
    }
}
