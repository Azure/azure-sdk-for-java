// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"hihpvecmsl\",\"domain\":[\"lyjxltbsjus\"],\"dnsServerIps\":[\"f\",\"igctmgxuupbezq\",\"cydrtceukdqkk\"],\"sourceIp\":\"hztgeqmgqzgwld\",\"dnsServices\":122850686234484480,\"provisioningState\":\"Succeeded\",\"revision\":6090826264173048120},\"id\":\"fehuwaoaguhi\",\"name\":\"qllizstac\",\"type\":\"jvhrweft\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("oqqtl")
            .withExistingWorkloadNetwork("l", "ecvo", "ygzyvneezaifght")
            .withDisplayName("zbkr")
            .withDomain(Arrays.asList("javfqn", "hnqoewdo"))
            .withDnsServerIps(Arrays.asList("etesypvidbztjhqt", "b"))
            .withSourceIp("nynkbwet")
            .withDnsServices(6087710670618433080L)
            .withRevision(481993562254393755L)
            .create();

        Assertions.assertEquals("hihpvecmsl", response.displayName());
        Assertions.assertEquals("lyjxltbsjus", response.domain().get(0));
        Assertions.assertEquals("f", response.dnsServerIps().get(0));
        Assertions.assertEquals("hztgeqmgqzgwld", response.sourceIp());
        Assertions.assertEquals(122850686234484480L, response.dnsServices());
        Assertions.assertEquals(6090826264173048120L, response.revision());
    }
}
