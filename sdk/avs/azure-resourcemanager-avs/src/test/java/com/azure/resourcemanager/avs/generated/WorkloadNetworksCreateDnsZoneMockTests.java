// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsZoneMockTests {
    @Test
    public void testCreateDnsZone() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"qxpxiwfcngjsaa\",\"domain\":[\"xtmkzjvkviir\",\"gfgrwsdp\",\"ra\",\"zvzbglbyv\"],\"dnsServerIps\":[\"ctbrxkjzwrgxffm\",\"hkwfbkgozxwop\",\"bydpizqaclnapxb\",\"yg\"],\"sourceIp\":\"gjkn\",\"dnsServices\":7448053712084224188,\"provisioningState\":\"Succeeded\",\"revision\":1309991078108099908},\"id\":\"uyilflqoiquvrehm\",\"name\":\"njhvsujztc\",\"type\":\"ytqj\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsZone response = manager.workloadNetworks()
            .defineDnsZone("lmjjyuo")
            .withExistingPrivateCloud("av", "pdqmjxlyyzglgouw")
            .withDisplayName("obaxkjeytu")
            .withDomain(Arrays.asList("fjkwrusnkq", "hsyrqunj"))
            .withDnsServerIps(Arrays.asList("enx", "ulkpakd"))
            .withSourceIp("fmjnnawtqa")
            .withDnsServices(5950273022777547751L)
            .withRevision(7550004046942026385L)
            .create();

        Assertions.assertEquals("qxpxiwfcngjsaa", response.displayName());
        Assertions.assertEquals("xtmkzjvkviir", response.domain().get(0));
        Assertions.assertEquals("ctbrxkjzwrgxffm", response.dnsServerIps().get(0));
        Assertions.assertEquals("gjkn", response.sourceIp());
        Assertions.assertEquals(7448053712084224188L, response.dnsServices());
        Assertions.assertEquals(1309991078108099908L, response.revision());
    }
}
