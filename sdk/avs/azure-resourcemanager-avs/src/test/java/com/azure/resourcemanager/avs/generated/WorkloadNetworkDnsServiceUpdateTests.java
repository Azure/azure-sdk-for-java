// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsServiceUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class WorkloadNetworkDnsServiceUpdateTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        WorkloadNetworkDnsServiceUpdate model = BinaryData.fromString(
            "{\"properties\":{\"displayName\":\"zkoj\",\"dnsServiceIp\":\"c\",\"defaultDnsZone\":\"foqouicybx\",\"fqdnZones\":[\"gszufoxciqopid\"],\"logLevel\":\"FATAL\",\"status\":\"FAILURE\",\"provisioningState\":\"Deleting\",\"revision\":7131609280783369360}}")
            .toObject(WorkloadNetworkDnsServiceUpdate.class);
        Assertions.assertEquals("zkoj", model.displayName());
        Assertions.assertEquals("c", model.dnsServiceIp());
        Assertions.assertEquals("foqouicybx", model.defaultDnsZone());
        Assertions.assertEquals("gszufoxciqopid", model.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, model.logLevel());
        Assertions.assertEquals(7131609280783369360L, model.revision());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        WorkloadNetworkDnsServiceUpdate model = new WorkloadNetworkDnsServiceUpdate().withDisplayName("zkoj")
            .withDnsServiceIp("c")
            .withDefaultDnsZone("foqouicybx")
            .withFqdnZones(Arrays.asList("gszufoxciqopid"))
            .withLogLevel(DnsServiceLogLevelEnum.FATAL)
            .withRevision(7131609280783369360L);
        model = BinaryData.fromObject(model).toObject(WorkloadNetworkDnsServiceUpdate.class);
        Assertions.assertEquals("zkoj", model.displayName());
        Assertions.assertEquals("c", model.dnsServiceIp());
        Assertions.assertEquals("foqouicybx", model.defaultDnsZone());
        Assertions.assertEquals("gszufoxciqopid", model.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, model.logLevel());
        Assertions.assertEquals(7131609280783369360L, model.revision());
    }
}
