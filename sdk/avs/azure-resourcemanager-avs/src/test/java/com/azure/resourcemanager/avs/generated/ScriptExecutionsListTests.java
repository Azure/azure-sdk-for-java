// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionsList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionsListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionsList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"scriptCmdletId\":\"fbkp\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"klwndnhjdauwhv\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"l\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"tdhxujznbmpowuwp\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"zqlveualupjmkhf\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"obbc\"}],\"failureReason\":\"s\",\"timeout\":\"tjrip\",\"retention\":\"bpbewtghfgb\",\"submittedAt\":\"2021-09-03T22:44:02Z\",\"startedAt\":\"2021-02-14T22:48:14Z\",\"finishedAt\":\"2021-01-14T04:37:45Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"jkbegibtnmxiebww\",\"loayqcgw\",\"tzjuzgwyzmhtxo\",\"gmtsavjcbpwxqpsr\"],\"namedOutputs\":{\"wmdyvxqtay\":\"datatguvriuhp\",\"ibycno\":\"dataiwwroyqbexrmc\"},\"information\":[\"nmefqsgzvahapj\"],\"warnings\":[\"pvgqzcjrvxdjzlm\",\"lxkvu\"],\"errors\":[\"zovawjvz\",\"nluthnnp\",\"nxipeil\",\"jzuaejxdultskzbb\"]},\"id\":\"zumveekgpwo\",\"name\":\"uh\",\"type\":\"fpbsjyofdxl\"},{\"properties\":{\"scriptCmdletId\":\"dttouwaboekqvkel\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"vbxwyjsflhh\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"lnjixisxya\"}],\"failureReason\":\"oyaqcslyjpkiid\",\"timeout\":\"yexz\",\"retention\":\"lixhnrztfol\",\"submittedAt\":\"2021-01-02T16:04:01Z\",\"startedAt\":\"2021-09-08T07:53:31Z\",\"finishedAt\":\"2021-06-25T15:29:39Z\",\"provisioningState\":\"Pending\",\"output\":[\"ppg\"],\"namedOutputs\":{\"igvpgylg\":\"datapnapnyiropuh\",\"medjvcslynqwwncw\":\"datagit\",\"pkteo\":\"datazhxgktrmgucn\",\"pfqbuaceopzf\":\"datallwptfdy\"},\"information\":[\"huaoppp\",\"qeqxo\"],\"warnings\":[\"ahzxctobgbk\",\"moizpos\",\"mgrcfbu\"],\"errors\":[\"fqjhhkxbpvjymj\",\"xxjyngudivkrtsw\",\"xqzvszjfa\"]},\"id\":\"j\",\"name\":\"dxxiv\",\"type\":\"tvtc\"}],\"nextLink\":\"qtdo\"}")
            .toObject(ScriptExecutionsList.class);
        Assertions.assertEquals("fbkp", model.value().get(0).scriptCmdletId());
        Assertions.assertEquals("klwndnhjdauwhv", model.value().get(0).parameters().get(0).name());
        Assertions.assertEquals("tdhxujznbmpowuwp", model.value().get(0).hiddenParameters().get(0).name());
        Assertions.assertEquals("s", model.value().get(0).failureReason());
        Assertions.assertEquals("tjrip", model.value().get(0).timeout());
        Assertions.assertEquals("bpbewtghfgb", model.value().get(0).retention());
        Assertions.assertEquals("jkbegibtnmxiebww", model.value().get(0).output().get(0));
        Assertions.assertEquals("qtdo", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionsList model
            = new ScriptExecutionsList()
                .withValue(Arrays.asList(
                    new ScriptExecutionInner().withScriptCmdletId("fbkp")
                        .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("klwndnhjdauwhv"),
                            new ScriptExecutionParameter().withName("l")))
                        .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("tdhxujznbmpowuwp"),
                            new ScriptExecutionParameter().withName("zqlveualupjmkhf"),
                            new ScriptExecutionParameter().withName("obbc")))
                        .withFailureReason("s")
                        .withTimeout("tjrip")
                        .withRetention("bpbewtghfgb")
                        .withOutput(Arrays.asList("jkbegibtnmxiebww", "loayqcgw", "tzjuzgwyzmhtxo", "gmtsavjcbpwxqpsr"))
                        .withNamedOutputs(mapOf("wmdyvxqtay", "datatguvriuhp", "ibycno", "dataiwwroyqbexrmc")),
                    new ScriptExecutionInner().withScriptCmdletId("dttouwaboekqvkel")
                        .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("vbxwyjsflhh")))
                        .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("lnjixisxya")))
                        .withFailureReason("oyaqcslyjpkiid")
                        .withTimeout("yexz")
                        .withRetention("lixhnrztfol")
                        .withOutput(Arrays.asList("ppg"))
                        .withNamedOutputs(mapOf("igvpgylg", "datapnapnyiropuh", "medjvcslynqwwncw", "datagit", "pkteo",
                            "datazhxgktrmgucn", "pfqbuaceopzf", "datallwptfdy"))))
                .withNextLink("qtdo");
        model = BinaryData.fromObject(model).toObject(ScriptExecutionsList.class);
        Assertions.assertEquals("fbkp", model.value().get(0).scriptCmdletId());
        Assertions.assertEquals("klwndnhjdauwhv", model.value().get(0).parameters().get(0).name());
        Assertions.assertEquals("tdhxujznbmpowuwp", model.value().get(0).hiddenParameters().get(0).name());
        Assertions.assertEquals("s", model.value().get(0).failureReason());
        Assertions.assertEquals("tjrip", model.value().get(0).timeout());
        Assertions.assertEquals("bpbewtghfgb", model.value().get(0).retention());
        Assertions.assertEquals("jkbegibtnmxiebww", model.value().get(0).output().get(0));
        Assertions.assertEquals("qtdo", model.nextLink());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
