// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.DatastoreInner;
import com.azure.resourcemanager.avs.models.DatastoreList;
import com.azure.resourcemanager.avs.models.DiskPoolVolume;
import com.azure.resourcemanager.avs.models.ElasticSanVolume;
import com.azure.resourcemanager.avs.models.MountOptionEnum;
import com.azure.resourcemanager.avs.models.NetAppVolume;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class DatastoreListTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        DatastoreList model = BinaryData.fromString(
            "{\"value\":[{\"properties\":{\"provisioningState\":\"Failed\",\"netAppVolume\":{\"id\":\"th\"},\"diskPoolVolume\":{\"targetId\":\"m\",\"lunName\":\"zy\",\"mountOption\":\"ATTACH\",\"path\":\"mzsb\"},\"elasticSanVolume\":{\"targetId\":\"oggigrxwburv\"},\"status\":\"Unknown\"},\"id\":\"nspydptkoenkoukn\",\"name\":\"udwtiukbl\",\"type\":\"ngkpocipazy\"},{\"properties\":{\"provisioningState\":\"Deleting\",\"netAppVolume\":{\"id\":\"kgjn\"},\"diskPoolVolume\":{\"targetId\":\"ucgygevqz\",\"lunName\":\"typmrbpizcdrqjsd\",\"mountOption\":\"ATTACH\",\"path\":\"fyhxde\"},\"elasticSanVolume\":{\"targetId\":\"jzicwifsjt\"},\"status\":\"Inaccessible\"},\"id\":\"bishcbkhajdeyea\",\"name\":\"dphagalpbuxwgip\",\"type\":\"honowkgshwank\"}],\"nextLink\":\"zbinjeputtm\"}")
            .toObject(DatastoreList.class);
        Assertions.assertEquals("th", model.value().get(0).netAppVolume().id());
        Assertions.assertEquals("m", model.value().get(0).diskPoolVolume().targetId());
        Assertions.assertEquals("zy", model.value().get(0).diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.value().get(0).diskPoolVolume().mountOption());
        Assertions.assertEquals("oggigrxwburv", model.value().get(0).elasticSanVolume().targetId());
        Assertions.assertEquals("zbinjeputtm", model.nextLink());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        DatastoreList model
            = new DatastoreList()
                .withValue(Arrays.asList(
                    new DatastoreInner().withNetAppVolume(new NetAppVolume().withId("th"))
                        .withDiskPoolVolume(new DiskPoolVolume().withTargetId("m")
                            .withLunName("zy")
                            .withMountOption(MountOptionEnum.ATTACH))
                        .withElasticSanVolume(new ElasticSanVolume().withTargetId("oggigrxwburv")),
                    new DatastoreInner().withNetAppVolume(new NetAppVolume().withId("kgjn"))
                        .withDiskPoolVolume(new DiskPoolVolume().withTargetId("ucgygevqz")
                            .withLunName("typmrbpizcdrqjsd")
                            .withMountOption(MountOptionEnum.ATTACH))
                        .withElasticSanVolume(new ElasticSanVolume().withTargetId("jzicwifsjt"))))
                .withNextLink("zbinjeputtm");
        model = BinaryData.fromObject(model).toObject(DatastoreList.class);
        Assertions.assertEquals("th", model.value().get(0).netAppVolume().id());
        Assertions.assertEquals("m", model.value().get(0).diskPoolVolume().targetId());
        Assertions.assertEquals("zy", model.value().get(0).diskPoolVolume().lunName());
        Assertions.assertEquals(MountOptionEnum.ATTACH, model.value().get(0).diskPoolVolume().mountOption());
        Assertions.assertEquals("oggigrxwburv", model.value().get(0).elasticSanVolume().targetId());
        Assertions.assertEquals("zbinjeputtm", model.nextLink());
    }
}
