// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkVMGroup;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateVMGroupMockTests {
    @Test
    public void testCreateVMGroup() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"h\",\"members\":[\"hgwydyynfsv\"],\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":1898691933470527119},\"id\":\"arfdlpukhpyrnei\",\"name\":\"jcpeogkhnmg\",\"type\":\"ro\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkVMGroup response = manager.workloadNetworks()
            .defineVMGroup("uuuybnchrsziz")
            .withExistingPrivateCloud("tvsoxhlwntsj", "qrsxyp")
            .withDisplayName("elyetndnbf")
            .withMembers(Arrays.asList("gagflnlgmtrwah", "jmucftby"))
            .withRevision(411175145708469909L)
            .create();

        Assertions.assertEquals("h", response.displayName());
        Assertions.assertEquals("hgwydyynfsv", response.members().get(0));
        Assertions.assertEquals(1898691933470527119L, response.revision());
    }
}
