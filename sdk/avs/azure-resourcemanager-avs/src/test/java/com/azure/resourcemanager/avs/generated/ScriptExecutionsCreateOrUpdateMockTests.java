// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"bjb\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"ybvitvqkjyaznumt\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"gmuwdchozfnkf\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"v\"}],\"failureReason\":\"oakizvoai\",\"timeout\":\"naqln\",\"retention\":\"iguyxlykwphv\",\"submittedAt\":\"2021-11-13T04:48:37Z\",\"startedAt\":\"2021-06-18T05:52:26Z\",\"finishedAt\":\"2021-02-09T15:30:09Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"lkexaonwivkcqh\"],\"namedOutputs\":{\"lccrmmkyupi\":\"dataxk\",\"kakfqfr\":\"dataubyqj\",\"il\":\"dataem\",\"djkpdxph\":\"dataudxjascowv\"},\"information\":[\"snmgzvyfi\",\"dkz\"],\"warnings\":[\"wsithuqolyahlu\",\"wqulsutrjbhxykf\",\"y\",\"ezvqq\"],\"errors\":[\"rftb\",\"ve\",\"reuquowtljvf\",\"hreagk\"]},\"id\":\"xv\",\"name\":\"qtvbczsu\",\"type\":\"mdgglmepjpfs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScriptExecution response = manager.scriptExecutions()
            .define("ip")
            .withExistingPrivateCloud("imipskdyzatvfuz", "aftjvvruxwigsy")
            .withScriptCmdletId("mjtgrqg")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("kileplkcsmknhwtb"),
                new ScriptExecutionParameter().withName("aedorvvmqf"),
                new ScriptExecutionParameter().withName("oygbdgwumgxd")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("pabgdexjddvjsaqw"),
                new ScriptExecutionParameter().withName("tm"), new ScriptExecutionParameter().withName("wllcolsr"),
                new ScriptExecutionParameter().withName("xaptefhexcgjok")))
            .withFailureReason("jnhvlqjbekpeeks")
            .withTimeout("bksdqhjvyklxesl")
            .withRetention("hustcpoqmavnwqjw")
            .withOutput(Arrays.asList("ybwfdbkjb", "tensvkzykj", "jknsxfwu", "hcdpkupnqrmgj"))
            .withNamedOutputs(mapOf("zwfbcyaykmmfzs", "datakuwxeoiojfizfavk", "rsxkr", "datafwxrzxmdew",
                "iyoypsuhbrnnhj", "datalbjazejww"))
            .create();

        Assertions.assertEquals("bjb", response.scriptCmdletId());
        Assertions.assertEquals("ybvitvqkjyaznumt", response.parameters().get(0).name());
        Assertions.assertEquals("v", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("oakizvoai", response.failureReason());
        Assertions.assertEquals("naqln", response.timeout());
        Assertions.assertEquals("iguyxlykwphv", response.retention());
        Assertions.assertEquals("lkexaonwivkcqh", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
