// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"ycxnmskw\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"jyslurl\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"shhkvpedw\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"slsrhmpq\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"skondcbrwimu\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"qejo\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ovyrrleaesinu\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"tljqobbpih\"}],\"failureReason\":\"cecybmrqbrjbbmpx\",\"timeout\":\"lvykfrex\",\"retention\":\"s\",\"submittedAt\":\"2021-03-29T05:59:10Z\",\"startedAt\":\"2021-04-17T14:29:37Z\",\"finishedAt\":\"2021-05-27T00:32:10Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"zhxogjggsvo\",\"jkxibda\"],\"namedOutputs\":{\"y\":\"datakmdyomkxfbvfbh\",\"gddeimaw\":\"datarhpw\"},\"information\":[\"gkkumuikjcj\"],\"warnings\":[\"tbw\",\"nsq\"],\"errors\":[\"wcoml\"]},\"id\":\"ytwvczcswkacve\",\"name\":\"yfdvlvhbwrnfxtgd\",\"type\":\"pqthehnmnaoya\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .define("vlwyzg")
            .withExistingPrivateCloud("idqlvhu", "oveofizrvjfnmj")
            .withScriptCmdletId("kujrllfojui")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("uuyjucejikz"),
                new ScriptExecutionParameter().withName("eovvtzej"),
                new ScriptExecutionParameter().withName("tjklntikyjuzk")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("zolxrzvhqjwtr"),
                new ScriptExecutionParameter().withName("tgvgzp"),
                new ScriptExecutionParameter().withName("rrkolawjmjs")))
            .withFailureReason("rokcdxfzzzwyjaf")
            .withTimeout("tlhguynuchl")
            .withRetention("ltxdwhmozu")
            .withOutput(Arrays.asList("fpafolpymwamxq", "rag", "gdphtvdula", "vl"))
            .withNamedOutputs(mapOf("nrupdwvnphcnzqtp", "datahcsrlzknmzl"))
            .create();

        Assertions.assertEquals("ycxnmskw", response.scriptCmdletId());
        Assertions.assertEquals("jyslurl", response.parameters().get(0).name());
        Assertions.assertEquals("skondcbrwimu", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("cecybmrqbrjbbmpx", response.failureReason());
        Assertions.assertEquals("lvykfrex", response.timeout());
        Assertions.assertEquals("s", response.retention());
        Assertions.assertEquals("zhxogjggsvo", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
