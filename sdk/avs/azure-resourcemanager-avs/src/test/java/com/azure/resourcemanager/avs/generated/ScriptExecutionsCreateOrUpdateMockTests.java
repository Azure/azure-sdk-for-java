// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"qavbpdqmj\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"yzglgo\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"wtlmjjyuo\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"qtobaxkjeyt\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"nlb\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"wrus\"}],\"failureReason\":\"qbhsyrq\",\"timeout\":\"njqhdenxa\",\"retention\":\"kpak\",\"submittedAt\":\"2021-03-09T04:10:20Z\",\"startedAt\":\"2021-04-06T10:53:29Z\",\"finishedAt\":\"2021-03-04T18:32:45Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"qabpxuckpggqow\",\"yirdhlisngwflqq\",\"pizruwnpqxpxiw\"],\"namedOutputs\":{\"zjvkviirhgfgrws\":\"datagjsaasiixtm\",\"tctbrxkjzwrgxffm\":\"datapgratzvzbglbyvi\"},\"information\":[\"wfbkgozxwo\",\"dby\"],\"warnings\":[\"zqaclna\",\"xbiygnugjknfsmf\",\"ttuxuuyilflqoiqu\",\"rehmr\"],\"errors\":[\"vsujztczytqjtwh\",\"uunfprnjletlxsm\"]},\"id\":\"ddoui\",\"name\":\"amowaziynknlqwzd\",\"type\":\"piwhxqs\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .define("i")
            .withExistingPrivateCloud("qwhix", "onsts")
            .withScriptCmdletId("velfcldu")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("irdsvuwcob"),
                new ScriptExecutionParameter().withName("egstmninwjizci"),
                new ScriptExecutionParameter().withName("nghgshej"),
                new ScriptExecutionParameter().withName("tbxqmuluxlxq")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("ers"),
                new ScriptExecutionParameter().withName("ycucrwnamikzeb")))
            .withFailureReason("bsmswziqgf")
            .withTimeout("hokzrusw")
            .withRetention("hczznvf")
            .withOutput(Arrays.asList("z"))
            .withNamedOutputs(mapOf("haohdjhhflzokxc", "datawmxqhndvnoamlds", "atftgzpnpbsw", "dataxpelnjetagltsx",
                "loccsrmozihm", "datae", "rytfmpcycil", "datapgawtxxpkyjcxcjx"))
            .create();

        Assertions.assertEquals("qavbpdqmj", response.scriptCmdletId());
        Assertions.assertEquals("yzglgo", response.parameters().get(0).name());
        Assertions.assertEquals("wrus", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("qbhsyrq", response.failureReason());
        Assertions.assertEquals("njqhdenxa", response.timeout());
        Assertions.assertEquals("kpak", response.retention());
        Assertions.assertEquals("qabpxuckpggqow", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
