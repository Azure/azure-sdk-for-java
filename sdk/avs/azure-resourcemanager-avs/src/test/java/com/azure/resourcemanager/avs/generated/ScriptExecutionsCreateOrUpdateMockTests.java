// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"hndvnoamldsehao\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"hhflzo\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"xcoxpelnjet\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"gltsxoat\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"tgzpnpb\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"e\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"loccsrmozihm\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"pgawtxxpkyjcxcjx\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"rytfmpcycil\"}],\"failureReason\":\"caykggnoxuz\",\"timeout\":\"rksxwpndfc\",\"retention\":\"nznthjtw\",\"submittedAt\":\"2021-04-10T21:21:13Z\",\"startedAt\":\"2021-06-06T01:38:06Z\",\"finishedAt\":\"2021-07-22T12:28:11Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"amktcqiosmgbzah\",\"xqdlyrtltlapr\"],\"namedOutputs\":{\"nnbsoqeqa\":\"datakatbhjm\",\"febwlnbmhyreeudz\":\"dataarvlagunbt\"},\"information\":[\"bpdqmjxlyy\",\"glgou\",\"tlmj\",\"yuojqtobaxk\"],\"warnings\":[\"tu\",\"lbfjkwr\",\"snkq\"],\"errors\":[\"y\"]},\"id\":\"unjqh\",\"name\":\"enx\",\"type\":\"ulkpakd\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .define("elfwy")
            .withExistingPrivateCloud("fy", "sgcrpfbcunezzce")
            .withScriptCmdletId("wx")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("tnpsihclaf"),
                new ScriptExecutionParameter().withName("va"), new ScriptExecutionParameter().withName("lpt")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("qwztcmwqkc"),
                new ScriptExecutionParameter().withName("cxwaxfewz")))
            .withFailureReason("jexfdeqvhp")
            .withTimeout("ylkkshkbffmbm")
            .withRetention("jrgywwpgjxsn")
            .withOutput(Arrays.asList("o", "pttaqutd", "wemxswvruunzz", "gehkfkimrtixokff"))
            .withNamedOutputs(mapOf("shiy", "datanljqepqwhixmons", "du", "datagvelfc", "rds", "datacb", "b", "datauwc"))
            .create();

        Assertions.assertEquals("hndvnoamldsehao", response.scriptCmdletId());
        Assertions.assertEquals("hhflzo", response.parameters().get(0).name());
        Assertions.assertEquals("e", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("caykggnoxuz", response.failureReason());
        Assertions.assertEquals("rksxwpndfc", response.timeout());
        Assertions.assertEquals("nznthjtw", response.retention());
        Assertions.assertEquals("amktcqiosmgbzah", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
