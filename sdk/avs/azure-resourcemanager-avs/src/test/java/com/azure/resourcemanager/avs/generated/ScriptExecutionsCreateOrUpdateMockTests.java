// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"wzfgbrttuiaclkie\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"jlfnthiq\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"yuttdiygbpvnwswm\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"xkyctwwgzwx\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"ecvo\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ygzyvneezaifght\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"oqqtl\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"fhzbkr\"}],\"failureReason\":\"jjavfq\",\"timeout\":\"vhnqo\",\"retention\":\"dogiyetesyp\",\"submittedAt\":\"2021-10-20T02:22:42Z\",\"startedAt\":\"2021-07-21T20:44:49Z\",\"finishedAt\":\"2021-08-24T04:40:21Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"b\"],\"namedOutputs\":{\"p\":\"dataynkbwetnju\",\"piaccxnafb\":\"dataprkzya\"},\"information\":[\"oohtuovmaonurjtu\"],\"warnings\":[\"ihpvecmslclblyj\",\"lt\",\"sjuscvsfxigctmg\"],\"errors\":[\"pbezqccydrtceu\",\"d\",\"kkyihzt\"]},\"id\":\"qm\",\"name\":\"qzgwldoychil\",\"type\":\"cecfehuwaoaguh\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .define("xameblydyvkfkm")
            .withExistingPrivateCloud("zfrgqhaohcm", "uocnjrohmbpyr")
            .withScriptCmdletId("xne")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("mtodl")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("apucygvo"),
                new ScriptExecutionParameter().withName("vyuns"), new ScriptExecutionParameter().withName("xlghieegj")))
            .withFailureReason("vvpa")
            .withTimeout("eksgbuxantuygd")
            .withRetention("aq")
            .withOutput(Arrays.asList("ulopmjnlexwhcb", "pibkephuu", "erctatoyin", "qpbrlc"))
            .withNamedOutputs(mapOf("crrpcjttbstvje", "datauczkgofxyfsruc", "mlghktuidvrmazlp", "dataqnrmvvfko"))
            .create();

        Assertions.assertEquals("wzfgbrttuiaclkie", response.scriptCmdletId());
        Assertions.assertEquals("jlfnthiq", response.parameters().get(0).name());
        Assertions.assertEquals("ecvo", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("jjavfq", response.failureReason());
        Assertions.assertEquals("vhnqo", response.timeout());
        Assertions.assertEquals("dogiyetesyp", response.retention());
        Assertions.assertEquals("b", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
