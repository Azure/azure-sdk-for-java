// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"ipsk\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"atvfuzkaftj\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"vru\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"wigsyeipqdsm\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"rqgdgkkil\"}],\"failureReason\":\"lkcsmknhwtbbae\",\"timeout\":\"orvvmqfloygbdgw\",\"retention\":\"gxdgdhpab\",\"submittedAt\":\"2021-08-07T19:32:43Z\",\"startedAt\":\"2021-09-13T20:34:21Z\",\"finishedAt\":\"2021-09-14T20:30:43Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"qwotmmwllcol\",\"rsxaptefh\",\"xcgjokjljnhvlq\"],\"namedOutputs\":{},\"information\":[\"eeksnbksdqhjvyk\",\"xeslkhhustcpoqm\",\"vnwqjwgo\",\"nlejjjkxybwf\"],\"warnings\":[\"jbzten\",\"vkzykjtjknsxf\",\"us\",\"cdp\"],\"errors\":[\"nq\"]},\"id\":\"gjfbpkuwxeoi\",\"name\":\"jfizfavkjzwfbc\",\"type\":\"aykmmf\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScriptExecution response = manager.scriptExecutions()
            .define("kukjtasb")
            .withExistingPrivateCloud("hvyeldotj", "dkwisw")
            .withScriptCmdletId("spkxkdt")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("ndlqvtwknvgmmbu"),
                new ScriptExecutionParameter().withName("tywatmqaq"),
                new ScriptExecutionParameter().withName("ueatgroe")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("ygzc"),
                new ScriptExecutionParameter().withName("yf"), new ScriptExecutionParameter().withName("x"),
                new ScriptExecutionParameter().withName("faoytehqpuv")))
            .withFailureReason("vqmtdwckygroejn")
            .withTimeout("dljdjuskb")
            .withRetention("eqy")
            .withOutput(Arrays.asList("pl", "ryshwddkvbxgk"))
            .withNamedOutputs(mapOf())
            .create();

        Assertions.assertEquals("ipsk", response.scriptCmdletId());
        Assertions.assertEquals("atvfuzkaftj", response.parameters().get(0).name());
        Assertions.assertEquals("rqgdgkkil", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("lkcsmknhwtbbae", response.failureReason());
        Assertions.assertEquals("orvvmqfloygbdgw", response.timeout());
        Assertions.assertEquals("gxdgdhpab", response.retention());
        Assertions.assertEquals("qwotmmwllcol", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
