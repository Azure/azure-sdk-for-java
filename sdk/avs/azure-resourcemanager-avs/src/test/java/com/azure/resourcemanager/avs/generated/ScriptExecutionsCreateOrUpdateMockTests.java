// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"ckpggqoweyird\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"sn\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"wfl\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"qmp\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"zruwn\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"pxiwf\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ngjsaasi\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"xtmkzjvkviir\"}],\"failureReason\":\"fgrwsdpgratzvz\",\"timeout\":\"glbyvi\",\"retention\":\"ctbrxkjzwrgxffm\",\"submittedAt\":\"2021-08-27T19:17:59Z\",\"startedAt\":\"2021-08-28T12:30:32Z\",\"finishedAt\":\"2021-02-11T20:50:53Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"wopdbydpiz\",\"aclnapxbiygnugj\",\"nfsm\",\"cttuxuu\"],\"namedOutputs\":{\"quvre\":\"dataflqo\",\"sujz\":\"datamrnjh\"},\"information\":[\"ytqj\",\"w\",\"auunfprnjletlx\",\"mr\"],\"warnings\":[\"ou\"],\"errors\":[\"mowaziynknlqwzdv\",\"iwhxqszdtmaajq\",\"huxy\",\"rjvmtygjbmzyosp\"]},\"id\":\"shck\",\"name\":\"kyjpmspbps\",\"type\":\"df\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .define("dvnoamldsehaohdj")
            .withExistingPrivateCloud("jsxjwwix", "vumwmxqh")
            .withScriptCmdletId("lzok")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("xpelnjetagltsx")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("ftgz")))
            .withFailureReason("pbswvefloccsrm")
            .withTimeout("zihmipgawtxxpky")
            .withRetention("xcjxgrytfmpcy")
            .withOutput(Arrays.asList("noxuztrksx", "pndfcpfnznt", "jtwkjaos"))
            .withNamedOutputs(mapOf("iosmgbzahgxqdly", "datazvoamktc", "ap", "datatlt", "oqeq", "dataltzkatbhjmznnb",
                "ebwlnbmhyreeudzq", "datalarvlagunbtg"))
            .create();

        Assertions.assertEquals("ckpggqoweyird", response.scriptCmdletId());
        Assertions.assertEquals("sn", response.parameters().get(0).name());
        Assertions.assertEquals("pxiwf", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("fgrwsdpgratzvz", response.failureReason());
        Assertions.assertEquals("glbyvi", response.timeout());
        Assertions.assertEquals("ctbrxkjzwrgxffm", response.retention());
        Assertions.assertEquals("wopdbydpiz", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
