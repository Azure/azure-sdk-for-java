// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"oe\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"ankltytm\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"droznn\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"drlktg\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"csgguxhemlw\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"eeczgfbu\"}],\"failureReason\":\"lelssxblycsxzujk\",\"timeout\":\"rlsmdesqplpvmjc\",\"retention\":\"ewbidyvteowxv\",\"submittedAt\":\"2021-09-28T17:23:11Z\",\"startedAt\":\"2021-10-23T07:47:56Z\",\"finishedAt\":\"2021-04-22T21:22:18Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"zec\",\"axwk\",\"fykhvuhxepmru\",\"znabaobns\"],\"namedOutputs\":{\"guihywar\":\"datadjltymkm\",\"xkykxdssjp\":\"dataspphk\",\"xhikkflrmymyin\":\"datammuc\",\"sl\":\"dataqlhris\"},\"information\":[\"iov\",\"qcgxuug\",\"kctotiowlxteq\"],\"warnings\":[\"jgwdtgukranbl\",\"phqlkccuz\",\"ygqwahoiu\"],\"errors\":[\"niiprglvaw\",\"wzdufypivlsbb\",\"pmcubkmifoxxkub\"]},\"id\":\"havpmhbrbqgvg\",\"name\":\"vpbbt\",\"type\":\"efjokn\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        ScriptExecution response = manager.scriptExecutions()
            .define("plkeuachtomflryt")
            .withExistingPrivateCloud("zhzmtksjci", "digsxcdgl")
            .withScriptCmdletId("pfmdgycx")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("kwhqj")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("lurlpshhkvp"),
                new ScriptExecutionParameter().withName("dwqslsrhmpqvw"),
                new ScriptExecutionParameter().withName("skondcbrwimu"),
                new ScriptExecutionParameter().withName("qejo")))
            .withFailureReason("vyrrleaesinuq")
            .withTimeout("ljqobbpihehcecyb")
            .withRetention("qbr")
            .withOutput(Arrays.asList("frexcrseqw", "ksghudgzhxogjgg", "voujkxibdafhrk", "dyomkxfbv"))
            .withNamedOutputs(mapOf("rhpw", "datady"))
            .create();

        Assertions.assertEquals("oe", response.scriptCmdletId());
        Assertions.assertEquals("ankltytm", response.parameters().get(0).name());
        Assertions.assertEquals("eeczgfbu", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("lelssxblycsxzujk", response.failureReason());
        Assertions.assertEquals("rlsmdesqplpvmjc", response.timeout());
        Assertions.assertEquals("ewbidyvteowxv", response.retention());
        Assertions.assertEquals("zec", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
