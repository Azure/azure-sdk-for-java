// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.ScriptExecution;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ScriptExecutionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"scriptCmdletId\":\"mur\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"g\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"ktvqylkmqpzoy\"}],\"failureReason\":\"fbcgwgcloxoebqin\",\"timeout\":\"ipnwj\",\"retention\":\"jqlafcbahhpzp\",\"submittedAt\":\"2021-05-12T03:58:05Z\",\"startedAt\":\"2021-01-21T09:59:18Z\",\"finishedAt\":\"2021-05-13T07:58:47Z\",\"provisioningState\":\"Succeeded\",\"output\":[\"kmkkholvdnd\",\"iauogphuartv\",\"iukyefchnmna\",\"mnxhkxjqirwrweo\"],\"namedOutputs\":{\"fifhxwrsnew\":{},\"ozqvbubqmam\":{}},\"information\":[\"cx\",\"xz\",\"azttaboidvmfq\"],\"warnings\":[\"ubowsepdfgkm\",\"dherngbtcj\",\"ahokqtobkauxofsh\"],\"errors\":[\"wpnulaiywzejyw\",\"slwkojpl\",\"ndnpdwrpqafgfug\",\"nnfhyetefypo\"]},\"id\":\"ctfjgtixr\",\"name\":\"vzuyturmlmu\",\"type\":\"wolba\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ScriptExecution response = manager.scriptExecutions()
            .define("kqmhhaowjr")
            .withExistingPrivateCloud("idibgqjxgpn", "hgovfgp")
            .withScriptCmdletId("uporqzdfu")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("vkfvxcnqmxqpswok"),
                new ScriptExecutionParameter().withName("vkhlggdhbemz")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("sz"),
                new ScriptExecutionParameter().withName("wiwtglxxhl"),
                new ScriptExecutionParameter().withName("fpgpicrmnzhrgm")))
            .withFailureReason("j")
            .withTimeout("x")
            .withRetention("qcbfrmbodths")
            .withOutput(Arrays.asList("lacjfrnxo"))
            .withNamedOutputs(mapOf("au", new ScriptExecutionPropertiesNamedOutput(), "lwvsgm",
                new ScriptExecutionPropertiesNamedOutput(), "ohqfzizv", new ScriptExecutionPropertiesNamedOutput(),
                "xmmkjs", new ScriptExecutionPropertiesNamedOutput()))
            .create();

        Assertions.assertEquals("mur", response.scriptCmdletId());
        Assertions.assertEquals("g", response.parameters().get(0).name());
        Assertions.assertEquals("ktvqylkmqpzoy", response.hiddenParameters().get(0).name());
        Assertions.assertEquals("fbcgwgcloxoebqin", response.failureReason());
        Assertions.assertEquals("ipnwj", response.timeout());
        Assertions.assertEquals("jqlafcbahhpzp", response.retention());
        Assertions.assertEquals("kmkkholvdnd", response.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
