// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsZonesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"ilguooqjagmditg\",\"domain\":[\"ookjbsahrtdtpde\",\"qacsl\",\"otoebnfxofv\"],\"dnsServerIps\":[\"gdirazf\"],\"sourceIp\":\"ejwabmdujtmvco\",\"dnsServices\":2125473384,\"provisioningState\":\"Succeeded\",\"revision\":5623594261073250912},\"id\":\"u\",\"name\":\"hlkyqltqsrog\",\"type\":\"uwkffdjktsysid\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsZone response = manager.workloadNetworkDnsZones()
            .define("o")
            .withExistingPrivateCloud("dohzjq", "tu")
            .withDisplayName("bxncnwfepbnw")
            .withDomain(Arrays.asList("xjg"))
            .withDnsServerIps(Arrays.asList("jbgdlfgtdysnaquf"))
            .withSourceIp("bctqhamzjrwd")
            .withDnsServices(605506053)
            .withRevision(842034853108788587L)
            .create();

        Assertions.assertEquals("ilguooqjagmditg", response.displayName());
        Assertions.assertEquals("ookjbsahrtdtpde", response.domain().get(0));
        Assertions.assertEquals("gdirazf", response.dnsServerIps().get(0));
        Assertions.assertEquals("ejwabmdujtmvco", response.sourceIp());
        Assertions.assertEquals(2125473384, response.dnsServices());
        Assertions.assertEquals(5623594261073250912L, response.revision());
    }
}
