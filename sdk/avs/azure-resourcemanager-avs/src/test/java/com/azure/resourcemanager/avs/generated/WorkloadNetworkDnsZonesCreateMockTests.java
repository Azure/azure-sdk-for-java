// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsZone;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworkDnsZonesCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"aohdjh\",\"domain\":[\"z\"],\"dnsServerIps\":[\"coxpelnjeta\",\"ltsxoatf\",\"g\"],\"sourceIp\":\"npbs\",\"dnsServices\":887167575780894772,\"provisioningState\":\"Succeeded\",\"revision\":1298535123525566512},\"id\":\"mozi\",\"name\":\"m\",\"type\":\"pgawtxxpkyjcxcjx\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsZone response = manager.workloadNetworkDnsZones()
            .define("xgvelfclduccbird")
            .withExistingPrivateCloud("onsts", "i")
            .withDisplayName("wcobie")
            .withDomain(Arrays.asList("mninwjizcilng", "gshejjtbxqmulux"))
            .withDnsServerIps(Arrays.asList("zvners", "ycucrwnamikzeb", "qbsms", "ziqgfuh"))
            .withSourceIp("zruswh")
            .withDnsServices(5481092572149258052L)
            .withRevision(6898352302048368719L)
            .create();

        Assertions.assertEquals("aohdjh", response.displayName());
        Assertions.assertEquals("z", response.domain().get(0));
        Assertions.assertEquals("coxpelnjeta", response.dnsServerIps().get(0));
        Assertions.assertEquals("npbs", response.sourceIp());
        Assertions.assertEquals(887167575780894772L, response.dnsServices());
        Assertions.assertEquals(1298535123525566512L, response.revision());
    }
}
