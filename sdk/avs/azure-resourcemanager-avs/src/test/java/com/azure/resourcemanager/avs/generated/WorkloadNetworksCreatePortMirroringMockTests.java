// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.PortMirroringDirectionEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroring;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreatePortMirroringMockTests {
    @Test
    public void testCreatePortMirroring() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"sehar\",\"direction\":\"EGRESS\",\"source\":\"qnrxtmbpjptn\",\"destination\":\"jhrsidqpxlb\",\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":7234936948502378002},\"id\":\"twmykyut\",\"name\":\"ym\",\"type\":\"wmfjhp\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkPortMirroring response = manager.workloadNetworks()
            .definePortMirroring("gybpmfb")
            .withExistingPrivateCloud("ptdmkrrbhmpful", "be")
            .withDisplayName("unmpzkrvfyifkdsc")
            .withDirection(PortMirroringDirectionEnum.EGRESS)
            .withSource("fict")
            .withDestination("jjwgcwnp")
            .withRevision(8173777051214408195L)
            .create();

        Assertions.assertEquals("sehar", response.displayName());
        Assertions.assertEquals(PortMirroringDirectionEnum.EGRESS, response.direction());
        Assertions.assertEquals("qnrxtmbpjptn", response.source());
        Assertions.assertEquals("jhrsidqpxlb", response.destination());
        Assertions.assertEquals(7234936948502378002L, response.revision());
    }
}
