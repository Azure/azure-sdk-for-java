// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.PortMirroringDirectionEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkPortMirroring;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreatePortMirroringMockTests {
    @Test
    public void testCreatePortMirroring() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"szonwpngajinn\",\"direction\":\"BIDIRECTIONAL\",\"source\":\"wrtmjfjmy\",\"destination\":\"xlzhcoxovnekh\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":3366660534067134547},\"id\":\"tjxtxr\",\"name\":\"cq\",\"type\":\"jvidttge\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkPortMirroring response = manager.workloadNetworks()
            .definePortMirroring("phwpnulaiywzej")
            .withExistingPrivateCloud("uahokq", "obkauxofsh")
            .withDisplayName("slwkojpl")
            .withDirection(PortMirroringDirectionEnum.BIDIRECTIONAL)
            .withSource("pdwrpqafgfugsn")
            .withDestination("hyet")
            .withRevision(8388204086348257656L)
            .create();

        Assertions.assertEquals("szonwpngajinn", response.displayName());
        Assertions.assertEquals(PortMirroringDirectionEnum.BIDIRECTIONAL, response.direction());
        Assertions.assertEquals("wrtmjfjmy", response.source());
        Assertions.assertEquals("xlzhcoxovnekh", response.destination());
        Assertions.assertEquals(3366660534067134547L, response.revision());
    }
}
