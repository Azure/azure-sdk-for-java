// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsServiceMockTests {
    @Test
    public void testCreateDnsService() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"gcealzxwh\",\"dnsServiceIp\":\"nsymoyqhlwigd\",\"defaultDnsZone\":\"bkbxgomfa\",\"fqdnZones\":[\"asqvd\",\"e\",\"y\"],\"logLevel\":\"DEBUG\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":3603243010812205554},\"id\":\"bezkgimsidxasic\",\"name\":\"dyvvjskgfmocwahp\",\"type\":\"gat\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .defineDnsService("ti")
            .withExistingWorkloadNetwork("tilaxh", "fhqlyvi", "ouwivkxoyzunbixx")
            .withDisplayName("pwpgclrci")
            .withDnsServiceIp("soxfrken")
            .withDefaultDnsZone("m")
            .withFqdnZones(Arrays.asList("frpmpdnqqskaw"))
            .withLogLevel(DnsServiceLogLevelEnum.INFO)
            .withRevision(118268358895074671L)
            .create();

        Assertions.assertEquals("gcealzxwh", response.displayName());
        Assertions.assertEquals("nsymoyqhlwigd", response.dnsServiceIp());
        Assertions.assertEquals("bkbxgomfa", response.defaultDnsZone());
        Assertions.assertEquals("asqvd", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.DEBUG, response.logLevel());
        Assertions.assertEquals(3603243010812205554L, response.revision());
    }
}
