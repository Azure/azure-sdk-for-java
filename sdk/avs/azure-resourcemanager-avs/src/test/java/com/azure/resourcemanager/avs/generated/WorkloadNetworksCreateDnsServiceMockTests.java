// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsServiceMockTests {
    @Test
    public void testCreateDnsService() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"mtggmu\",\"dnsServiceIp\":\"ch\",\"defaultDnsZone\":\"fnkf\",\"fqdnZones\":[\"v\"],\"logLevel\":\"INFO\",\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":5111678632759854956},\"id\":\"knaqlnuwig\",\"name\":\"yxl\",\"type\":\"kwph\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .defineDnsService("se")
            .withExistingPrivateCloud("jxsqwjhqkbiwetp", "zycyqiqyhg")
            .withDisplayName("e")
            .withDnsServiceIp("sfledyn")
            .withDefaultDnsZone("pziuwfbzkkdtnh")
            .withFqdnZones(Arrays.asList("cljse", "pkpbafvafhlbylcc", "evxrhyz", "fwrsofpltdbmair"))
            .withLogLevel(DnsServiceLogLevelEnum.WARNING)
            .withRevision(9155393016297493468L)
            .create();

        Assertions.assertEquals("mtggmu", response.displayName());
        Assertions.assertEquals("ch", response.dnsServiceIp());
        Assertions.assertEquals("fnkf", response.defaultDnsZone());
        Assertions.assertEquals("v", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.INFO, response.logLevel());
        Assertions.assertEquals(5111678632759854956L, response.revision());
    }
}
