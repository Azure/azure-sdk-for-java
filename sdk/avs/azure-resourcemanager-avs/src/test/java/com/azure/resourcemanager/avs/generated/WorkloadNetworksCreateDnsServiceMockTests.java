// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsServiceMockTests {
    @Test
    public void testCreateDnsService() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"ztensvkzykjtj\",\"dnsServiceIp\":\"sxfwushcdp\",\"defaultDnsZone\":\"pn\",\"fqdnZones\":[\"gjfbpkuwxeoi\",\"jfizfavkjzwfbc\",\"aykmmf\",\"sbfwxr\"],\"logLevel\":\"INFO\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":5897750454813877665},\"id\":\"rplbjazejwwvi\",\"name\":\"oypsuhbrnnhj\",\"type\":\"sqwjhqkbiwetpozy\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .defineDnsService("xjd")
            .withExistingPrivateCloud("dhp", "bgd")
            .withDisplayName("saq")
            .withDnsServiceIp("tm")
            .withDefaultDnsZone("llcolsrsxapte")
            .withFqdnZones(Arrays.asList("xcgjokjljnhvlq", "bekpeeksnbksdqhj", "yklxe", "lkhhu"))
            .withLogLevel(DnsServiceLogLevelEnum.ERROR)
            .withRevision(8873287360862091590L)
            .create();

        Assertions.assertEquals("ztensvkzykjtj", response.displayName());
        Assertions.assertEquals("sxfwushcdp", response.dnsServiceIp());
        Assertions.assertEquals("pn", response.defaultDnsZone());
        Assertions.assertEquals("gjfbpkuwxeoi", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.INFO, response.logLevel());
        Assertions.assertEquals(5897750454813877665L, response.revision());
    }
}
