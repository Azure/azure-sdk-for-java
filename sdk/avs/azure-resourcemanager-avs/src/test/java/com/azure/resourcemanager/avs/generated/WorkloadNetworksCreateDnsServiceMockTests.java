// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsServiceMockTests {
    @Test
    public void testCreateDnsService() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"xkxbhxvu\",\"dnsServiceIp\":\"ulgm\",\"defaultDnsZone\":\"jevdyznf\",\"fqdnZones\":[\"vkskmqozzk\",\"vyhjrl\",\"izjixlq\"],\"logLevel\":\"WARNING\",\"status\":\"FAILURE\",\"provisioningState\":\"Succeeded\",\"revision\":2236190932702422821},\"id\":\"ron\",\"name\":\"qlmgnlqxsjxt\",\"type\":\"lexhv\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .defineDnsService("qbxyxoyfpuqqi")
            .withExistingPrivateCloud("xomeikjclwzacn", "wpfsuqtaaz")
            .withDisplayName("xlhdj")
            .withDnsServiceIp("dcadwvpsozjiihjr")
            .withDefaultDnsZone("bmrzoepnx")
            .withFqdnZones(Arrays.asList("wnjkgvfn"))
            .withLogLevel(DnsServiceLogLevelEnum.FATAL)
            .withRevision(5940630190503622951L)
            .create();

        Assertions.assertEquals("xkxbhxvu", response.displayName());
        Assertions.assertEquals("ulgm", response.dnsServiceIp());
        Assertions.assertEquals("jevdyznf", response.defaultDnsZone());
        Assertions.assertEquals("vkskmqozzk", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.WARNING, response.logLevel());
        Assertions.assertEquals(2236190932702422821L, response.revision());
    }
}
