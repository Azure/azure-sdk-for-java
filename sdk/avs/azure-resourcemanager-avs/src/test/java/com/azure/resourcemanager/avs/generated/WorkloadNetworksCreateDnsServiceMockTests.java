// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.models.AzureCloud;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.DnsServiceLogLevelEnum;
import com.azure.resourcemanager.avs.models.WorkloadNetworkDnsService;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WorkloadNetworksCreateDnsServiceMockTests {
    @Test
    public void testCreateDnsService() throws Exception {
        String responseStr
            = "{\"properties\":{\"displayName\":\"qgvriibakcla\",\"dnsServiceIp\":\"fr\",\"defaultDnsZone\":\"ousxauzlwvsgmw\",\"fqdnZones\":[\"fz\"],\"logLevel\":\"FATAL\",\"status\":\"SUCCESS\",\"provisioningState\":\"Succeeded\",\"revision\":5429285928052285759},\"id\":\"thnwpzte\",\"name\":\"ovmribiattg\",\"type\":\"lu\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        AvsManager manager = AvsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureCloud.AZURE_PUBLIC_CLOUD));

        WorkloadNetworkDnsService response = manager.workloadNetworks()
            .defineDnsService("kqmhhaowjr")
            .withExistingPrivateCloud("idibgqjxgpn", "hgovfgp")
            .withDisplayName("uporqzdfu")
            .withDnsServiceIp("zvkfv")
            .withDefaultDnsZone("nq")
            .withFqdnZones(Arrays.asList("psw", "kmvkhl", "gdhbe", "zqkzszuwi"))
            .withLogLevel(DnsServiceLogLevelEnum.DEBUG)
            .withRevision(1211280845205616458L)
            .create();

        Assertions.assertEquals("qgvriibakcla", response.displayName());
        Assertions.assertEquals("fr", response.dnsServiceIp());
        Assertions.assertEquals("ousxauzlwvsgmw", response.defaultDnsZone());
        Assertions.assertEquals("fz", response.fqdnZones().get(0));
        Assertions.assertEquals(DnsServiceLogLevelEnum.FATAL, response.logLevel());
        Assertions.assertEquals(5429285928052285759L, response.revision());
    }
}
