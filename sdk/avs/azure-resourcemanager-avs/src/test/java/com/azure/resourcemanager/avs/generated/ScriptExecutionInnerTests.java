// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"txmedj\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"lynqwwncwzzh\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"gktrmgucnapkte\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ellwptfdy\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"qbuaceopzfqr\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"huaoppp\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"qeqxo\"}],\"failureReason\":\"dahzxctobg\",\"timeout\":\"kdmoi\",\"retention\":\"ostmgrcf\",\"submittedAt\":\"2021-06-18T12:29:32Z\",\"startedAt\":\"2021-06-08T13:34:15Z\",\"finishedAt\":\"2021-07-20T04:26:41Z\",\"provisioningState\":\"Canceled\",\"output\":[\"xbpvjymjhx\",\"j\"],\"namedOutputs\":{\"ivkrtsw\":\"datau\",\"vjfdx\":\"dataxqzvszjfa\",\"qtdo\":\"dataivetvtcq\",\"bhsfxob\":\"datamcbxvwvxysl\"},\"information\":[\"k\",\"lmpewwwfbkr\",\"rn\"],\"warnings\":[\"hqjohxcrsbfova\",\"rruvwbhsq\",\"sub\"],\"errors\":[\"birx\"]},\"id\":\"ybsrfbjfdtwss\",\"name\":\"t\",\"type\":\"tpvjzbexilzznfqq\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("txmedj", model.scriptCmdletId());
        Assertions.assertEquals("lynqwwncwzzh", model.parameters().get(0).name());
        Assertions.assertEquals("qbuaceopzfqr", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("dahzxctobg", model.failureReason());
        Assertions.assertEquals("kdmoi", model.timeout());
        Assertions.assertEquals("ostmgrcf", model.retention());
        Assertions.assertEquals("xbpvjymjhx", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model = new ScriptExecutionInner().withScriptCmdletId("txmedj")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("lynqwwncwzzh"),
                new ScriptExecutionParameter().withName("gktrmgucnapkte"),
                new ScriptExecutionParameter().withName("ellwptfdy")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("qbuaceopzfqr"),
                new ScriptExecutionParameter().withName("huaoppp"), new ScriptExecutionParameter().withName("qeqxo")))
            .withFailureReason("dahzxctobg")
            .withTimeout("kdmoi")
            .withRetention("ostmgrcf")
            .withOutput(Arrays.asList("xbpvjymjhx", "j"))
            .withNamedOutputs(mapOf("ivkrtsw", "datau", "vjfdx", "dataxqzvszjfa", "qtdo", "dataivetvtcq", "bhsfxob",
                "datamcbxvwvxysl"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("txmedj", model.scriptCmdletId());
        Assertions.assertEquals("lynqwwncwzzh", model.parameters().get(0).name());
        Assertions.assertEquals("qbuaceopzfqr", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("dahzxctobg", model.failureReason());
        Assertions.assertEquals("kdmoi", model.timeout());
        Assertions.assertEquals("ostmgrcf", model.retention());
        Assertions.assertEquals("xbpvjymjhx", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
