// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"itc\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"cktqumiekkezzi\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"hlyfjhdgqgg\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"bdunygaeqid\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"atpxl\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"rxcyjmoad\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"uvarmywdmjsjq\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"jhhyxxrwlycoduhp\"}],\"failureReason\":\"kgymareqnajxqug\",\"timeout\":\"hky\",\"retention\":\"beddgssofw\",\"submittedAt\":\"2021-08-12T00:48:32Z\",\"startedAt\":\"2021-09-09T11:18:40Z\",\"finishedAt\":\"2021-02-22T22:05:21Z\",\"provisioningState\":\"Cancelled\",\"output\":[\"i\",\"pxacqqudfn\"],\"namedOutputs\":{\"baaa\":{},\"jyvayffimrzrtuz\":{},\"ogs\":{}},\"information\":[\"evfdnwnwm\",\"wzsyyceuzs\"],\"warnings\":[\"judpfrxt\",\"thzvaytdwkqbrqu\",\"paxh\",\"xiilivpdtiirqt\"],\"errors\":[\"axoruzfgsquy\",\"xrxxlep\",\"ramxjezwlwnw\"]},\"id\":\"qlcvydy\",\"name\":\"atdooaojkniod\",\"type\":\"oo\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("itc", model.scriptCmdletId());
        Assertions.assertEquals("cktqumiekkezzi", model.parameters().get(0).name());
        Assertions.assertEquals("atpxl", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("kgymareqnajxqug", model.failureReason());
        Assertions.assertEquals("hky", model.timeout());
        Assertions.assertEquals("beddgssofw", model.retention());
        Assertions.assertEquals("i", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model = new ScriptExecutionInner().withScriptCmdletId("itc")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("cktqumiekkezzi"),
                new ScriptExecutionParameter().withName("hlyfjhdgqgg"),
                new ScriptExecutionParameter().withName("bdunygaeqid")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("atpxl"),
                new ScriptExecutionParameter().withName("rxcyjmoad"),
                new ScriptExecutionParameter().withName("uvarmywdmjsjq"),
                new ScriptExecutionParameter().withName("jhhyxxrwlycoduhp")))
            .withFailureReason("kgymareqnajxqug")
            .withTimeout("hky")
            .withRetention("beddgssofw")
            .withOutput(Arrays.asList("i", "pxacqqudfn"))
            .withNamedOutputs(mapOf("baaa", new ScriptExecutionPropertiesNamedOutput(), "jyvayffimrzrtuz",
                new ScriptExecutionPropertiesNamedOutput(), "ogs", new ScriptExecutionPropertiesNamedOutput()));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("itc", model.scriptCmdletId());
        Assertions.assertEquals("cktqumiekkezzi", model.parameters().get(0).name());
        Assertions.assertEquals("atpxl", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("kgymareqnajxqug", model.failureReason());
        Assertions.assertEquals("hky", model.timeout());
        Assertions.assertEquals("beddgssofw", model.retention());
        Assertions.assertEquals("i", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
