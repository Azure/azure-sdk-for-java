// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"izsh\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"impevf\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"mblrrilbywd\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"icc\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"rwfscjfnynszquj\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"zdvoqytibyowbb\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"gyavu\"}],\"failureReason\":\"thjoxoism\",\"timeout\":\"ksbpimlqoljx\",\"retention\":\"gxxlxsffgcvizq\",\"submittedAt\":\"2021-03-28T18:15:03Z\",\"startedAt\":\"2021-04-12T21:20:45Z\",\"finishedAt\":\"2021-04-04T23:05:36Z\",\"provisioningState\":\"Pending\",\"output\":[\"fgfb\",\"jub\",\"yhgk\"],\"namedOutputs\":{\"ktlahbqa\":\"datansgowzfttst\"},\"information\":[\"tgzukxitmmqt\",\"qqqxhrnxrx\",\"pjui\",\"av\"],\"warnings\":[\"dzf\",\"azivjlfrqttbajl\",\"atnwxyiopi\",\"kqqfk\"],\"errors\":[\"cxkdmligovi\"]},\"id\":\"xk\",\"name\":\"mloazuru\",\"type\":\"cbgoor\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("izsh", model.scriptCmdletId());
        Assertions.assertEquals("impevf", model.parameters().get(0).name());
        Assertions.assertEquals("icc", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("thjoxoism", model.failureReason());
        Assertions.assertEquals("ksbpimlqoljx", model.timeout());
        Assertions.assertEquals("gxxlxsffgcvizq", model.retention());
        Assertions.assertEquals("fgfb", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model = new ScriptExecutionInner().withScriptCmdletId("izsh")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("impevf"),
                new ScriptExecutionParameter().withName("mblrrilbywd")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("icc"),
                new ScriptExecutionParameter().withName("rwfscjfnynszquj"),
                new ScriptExecutionParameter().withName("zdvoqytibyowbb"),
                new ScriptExecutionParameter().withName("gyavu")))
            .withFailureReason("thjoxoism")
            .withTimeout("ksbpimlqoljx")
            .withRetention("gxxlxsffgcvizq")
            .withOutput(Arrays.asList("fgfb", "jub", "yhgk"))
            .withNamedOutputs(mapOf("ktlahbqa", "datansgowzfttst"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("izsh", model.scriptCmdletId());
        Assertions.assertEquals("impevf", model.parameters().get(0).name());
        Assertions.assertEquals("icc", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("thjoxoism", model.failureReason());
        Assertions.assertEquals("ksbpimlqoljx", model.timeout());
        Assertions.assertEquals("gxxlxsffgcvizq", model.retention());
        Assertions.assertEquals("fgfb", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
