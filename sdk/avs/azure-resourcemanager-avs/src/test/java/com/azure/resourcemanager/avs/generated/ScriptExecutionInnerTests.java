// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"ky\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"eddgssofw\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"mzqa\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"krmnjijpxacqqud\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"yxbaaabjyvayf\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"imrzrtuzqog\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"exn\"}],\"failureReason\":\"fdnw\",\"timeout\":\"wmewzsyy\",\"retention\":\"uzsoi\",\"submittedAt\":\"2021-09-06T23:25:45Z\",\"startedAt\":\"2021-11-18T11:14:43Z\",\"finishedAt\":\"2021-08-08T12:59:01Z\",\"provisioningState\":\"Deleting\",\"output\":[\"hzv\",\"ytdw\",\"qbrqubpaxhexiili\",\"pdtii\"],\"namedOutputs\":{\"oaxoruzfgsqu\":\"datad\",\"tramxjez\":\"datafxrxxle\",\"tdooaoj\":\"datalwnwxuqlcvydyp\",\"nuj\":\"dataniodkooeb\"},\"information\":[\"msbvdkcrodtjinf\",\"jlfltkacjvefkdlf\",\"akggkfpag\",\"owpulpq\"],\"warnings\":[\"lsyxkqjnsjervt\",\"agxsdszuemps\",\"zkfzbeyv\"],\"errors\":[\"icvi\"]},\"id\":\"kjj\",\"name\":\"dxrbuukzcle\",\"type\":\"yhmlwpaztzp\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("ky", model.scriptCmdletId());
        Assertions.assertEquals("eddgssofw", model.parameters().get(0).name());
        Assertions.assertEquals("yxbaaabjyvayf", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("fdnw", model.failureReason());
        Assertions.assertEquals("wmewzsyy", model.timeout());
        Assertions.assertEquals("uzsoi", model.retention());
        Assertions.assertEquals("hzv", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model = new ScriptExecutionInner().withScriptCmdletId("ky")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("eddgssofw"),
                new ScriptExecutionParameter().withName("mzqa"),
                new ScriptExecutionParameter().withName("krmnjijpxacqqud")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("yxbaaabjyvayf"),
                new ScriptExecutionParameter().withName("imrzrtuzqog"), new ScriptExecutionParameter().withName("exn")))
            .withFailureReason("fdnw")
            .withTimeout("wmewzsyy")
            .withRetention("uzsoi")
            .withOutput(Arrays.asList("hzv", "ytdw", "qbrqubpaxhexiili", "pdtii"))
            .withNamedOutputs(mapOf("oaxoruzfgsqu", "datad", "tramxjez", "datafxrxxle", "tdooaoj", "datalwnwxuqlcvydyp",
                "nuj", "dataniodkooeb"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("ky", model.scriptCmdletId());
        Assertions.assertEquals("eddgssofw", model.parameters().get(0).name());
        Assertions.assertEquals("yxbaaabjyvayf", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("fdnw", model.failureReason());
        Assertions.assertEquals("wmewzsyy", model.timeout());
        Assertions.assertEquals("uzsoi", model.retention());
        Assertions.assertEquals("hzv", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
