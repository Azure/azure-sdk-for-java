// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import com.azure.resourcemanager.avs.models.ScriptExecutionPropertiesNamedOutput;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"wct\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"zj\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"uu\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"lwg\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ytsbwtovv\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"gseinq\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"iufxqknpir\"}],\"failureReason\":\"epttwqmsniff\",\"timeout\":\"dmqnrojlpij\",\"retention\":\"rxfrddhc\",\"submittedAt\":\"2021-06-05T19:19:34Z\",\"startedAt\":\"2021-09-16T04:19:40Z\",\"finishedAt\":\"2021-03-09T16:30:01Z\",\"provisioningState\":\"Failed\",\"output\":[\"xi\",\"tozqyzhftwesgo\"],\"namedOutputs\":{\"honnxkrlgnyhmos\":{},\"xkk\":{},\"thrrgh\":{},\"jbdhqxvc\":{}},\"information\":[\"rpdsof\",\"shrnsvbuswdvz\",\"ybycnunvj\",\"rtkfawnopq\"],\"warnings\":[\"yzirtxdyuxzejn\",\"psew\",\"ioilqukrydxtq\"],\"errors\":[\"ox\",\"rgguf\",\"yaomtb\",\"hhavgrvkffovjz\"]},\"id\":\"jbibg\",\"name\":\"mfxumvfcluyovw\",\"type\":\"nbkfezzxscy\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("wct", model.scriptCmdletId());
        Assertions.assertEquals("zj", model.parameters().get(0).name());
        Assertions.assertEquals("lwg", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("epttwqmsniff", model.failureReason());
        Assertions.assertEquals("dmqnrojlpij", model.timeout());
        Assertions.assertEquals("rxfrddhc", model.retention());
        Assertions.assertEquals("xi", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model = new ScriptExecutionInner().withScriptCmdletId("wct")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("zj"),
                new ScriptExecutionParameter().withName("uu")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("lwg"),
                new ScriptExecutionParameter().withName("ytsbwtovv"), new ScriptExecutionParameter().withName("gseinq"),
                new ScriptExecutionParameter().withName("iufxqknpir")))
            .withFailureReason("epttwqmsniff")
            .withTimeout("dmqnrojlpij")
            .withRetention("rxfrddhc")
            .withOutput(Arrays.asList("xi", "tozqyzhftwesgo"))
            .withNamedOutputs(mapOf("honnxkrlgnyhmos", new ScriptExecutionPropertiesNamedOutput(), "xkk",
                new ScriptExecutionPropertiesNamedOutput(), "thrrgh", new ScriptExecutionPropertiesNamedOutput(),
                "jbdhqxvc", new ScriptExecutionPropertiesNamedOutput()));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("wct", model.scriptCmdletId());
        Assertions.assertEquals("zj", model.parameters().get(0).name());
        Assertions.assertEquals("lwg", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("epttwqmsniff", model.failureReason());
        Assertions.assertEquals("dmqnrojlpij", model.timeout());
        Assertions.assertEquals("rxfrddhc", model.retention());
        Assertions.assertEquals("xi", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
