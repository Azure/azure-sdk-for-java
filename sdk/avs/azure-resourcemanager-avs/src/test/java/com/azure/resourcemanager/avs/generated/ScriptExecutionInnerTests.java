// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) TypeSpec Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.avs.fluent.models.ScriptExecutionInner;
import com.azure.resourcemanager.avs.models.ScriptExecutionParameter;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ScriptExecutionInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ScriptExecutionInner model = BinaryData.fromString(
            "{\"properties\":{\"scriptCmdletId\":\"coebjvewzcj\",\"parameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"wcpmguaadraufac\"}],\"hiddenParameters\":[{\"type\":\"ScriptExecutionParameter\",\"name\":\"hzovaj\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ziuxxpshnee\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"ulfgslqu\"},{\"type\":\"ScriptExecutionParameter\",\"name\":\"kwdlenrdsutujba\"}],\"failureReason\":\"juohminyflnorw\",\"timeout\":\"duvwpklvxwmygd\",\"retention\":\"gpqch\",\"submittedAt\":\"2021-12-04T12:22:10Z\",\"startedAt\":\"2021-05-26T11:43:30Z\",\"finishedAt\":\"2021-04-10T21:01:23Z\",\"provisioningState\":\"Cancelled\",\"output\":[\"xgibbda\",\"confozauors\"],\"namedOutputs\":{\"pzlrphw\":\"datakwbqplhlvnuu\",\"nnrwrbiork\":\"datasoldweyuqdunv\"},\"information\":[\"ywjhhgdnhx\",\"sivfomilo\"],\"warnings\":[\"dufiq\",\"dieuzaofj\"],\"errors\":[\"cyyysfgdot\"]},\"id\":\"biipuip\",\"name\":\"oqonma\",\"type\":\"jeknizshq\"}")
            .toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("coebjvewzcj", model.scriptCmdletId());
        Assertions.assertEquals("wcpmguaadraufac", model.parameters().get(0).name());
        Assertions.assertEquals("hzovaj", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("juohminyflnorw", model.failureReason());
        Assertions.assertEquals("duvwpklvxwmygd", model.timeout());
        Assertions.assertEquals("gpqch", model.retention());
        Assertions.assertEquals("xgibbda", model.output().get(0));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ScriptExecutionInner model = new ScriptExecutionInner().withScriptCmdletId("coebjvewzcj")
            .withParameters(Arrays.asList(new ScriptExecutionParameter().withName("wcpmguaadraufac")))
            .withHiddenParameters(Arrays.asList(new ScriptExecutionParameter().withName("hzovaj"),
                new ScriptExecutionParameter().withName("ziuxxpshnee"),
                new ScriptExecutionParameter().withName("ulfgslqu"),
                new ScriptExecutionParameter().withName("kwdlenrdsutujba")))
            .withFailureReason("juohminyflnorw")
            .withTimeout("duvwpklvxwmygd")
            .withRetention("gpqch")
            .withOutput(Arrays.asList("xgibbda", "confozauors"))
            .withNamedOutputs(mapOf("pzlrphw", "datakwbqplhlvnuu", "nnrwrbiork", "datasoldweyuqdunv"));
        model = BinaryData.fromObject(model).toObject(ScriptExecutionInner.class);
        Assertions.assertEquals("coebjvewzcj", model.scriptCmdletId());
        Assertions.assertEquals("wcpmguaadraufac", model.parameters().get(0).name());
        Assertions.assertEquals("hzovaj", model.hiddenParameters().get(0).name());
        Assertions.assertEquals("juohminyflnorw", model.failureReason());
        Assertions.assertEquals("duvwpklvxwmygd", model.timeout());
        Assertions.assertEquals("gpqch", model.retention());
        Assertions.assertEquals("xgibbda", model.output().get(0));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
