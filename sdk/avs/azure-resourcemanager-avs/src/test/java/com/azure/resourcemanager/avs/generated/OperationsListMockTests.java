// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.avs.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.avs.AvsManager;
import com.azure.resourcemanager.avs.models.Operation;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class OperationsListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"name\":\"isofieypefojyqd\",\"display\":{\"provider\":\"plcplcwkhi\",\"resource\":\"hlhzdsqtzbsrgno\",\"operation\":\"jhf\",\"description\":\"vecactx\"},\"isDataAction\":false,\"origin\":\"e\",\"properties\":{\"serviceSpecification\":{\"logSpecifications\":[{\"name\":\"qovekqvgqou\",\"displayName\":\"fzmpjwyivq\",\"blobDuration\":\"f\"},{\"name\":\"vhrfsphuagrt\",\"displayName\":\"kteusqczk\",\"blobDuration\":\"klxubyja\"},{\"name\":\"mmfblcqcuubgqib\",\"displayName\":\"a\",\"blobDuration\":\"etttwgdslqxihhr\"}],\"metricSpecifications\":[{\"name\":\"z\",\"displayName\":\"eypxiutcxapzhyr\",\"displayDescription\":\"togebjoxsl\",\"unit\":\"nhl\",\"category\":\"rqnkkzjcjbtr\",\"aggregationType\":\"ehvvib\",\"supportedAggregationTypes\":[\"jsto\"],\"supportedTimeGrainTypes\":[\"it\",\"kxzt\",\"oobklftidgfcwq\"],\"fillGapWithZero\":false,\"dimensions\":[{},{},{}],\"enableRegionalMdmAccount\":\"xzhemjyh\",\"sourceMdmAccount\":\"uj\",\"sourceMdmNamespace\":\"t\"}]}}}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        AvsManager manager =
            AvsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Operation> response = manager.operations().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals(false, response.iterator().next().isDataAction());
        Assertions.assertEquals("e", response.iterator().next().origin());
        Assertions
            .assertEquals(
                "qovekqvgqou",
                response.iterator().next().properties().serviceSpecification().logSpecifications().get(0).name());
        Assertions
            .assertEquals(
                "fzmpjwyivq",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .logSpecifications()
                    .get(0)
                    .displayName());
        Assertions
            .assertEquals(
                "f",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .logSpecifications()
                    .get(0)
                    .blobDuration());
        Assertions
            .assertEquals(
                "z",
                response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).name());
        Assertions
            .assertEquals(
                "eypxiutcxapzhyr",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .displayName());
        Assertions
            .assertEquals(
                "togebjoxsl",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .displayDescription());
        Assertions
            .assertEquals(
                "nhl",
                response.iterator().next().properties().serviceSpecification().metricSpecifications().get(0).unit());
        Assertions
            .assertEquals(
                "rqnkkzjcjbtr",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .category());
        Assertions
            .assertEquals(
                "ehvvib",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .aggregationType());
        Assertions
            .assertEquals(
                "jsto",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .supportedAggregationTypes()
                    .get(0));
        Assertions
            .assertEquals(
                "it",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .supportedTimeGrainTypes()
                    .get(0));
        Assertions
            .assertEquals(
                false,
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .fillGapWithZero());
        Assertions
            .assertEquals(
                "xzhemjyh",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .enableRegionalMdmAccount());
        Assertions
            .assertEquals(
                "uj",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .sourceMdmAccount());
        Assertions
            .assertEquals(
                "t",
                response
                    .iterator()
                    .next()
                    .properties()
                    .serviceSpecification()
                    .metricSpecifications()
                    .get(0)
                    .sourceMdmNamespace());
    }
}
