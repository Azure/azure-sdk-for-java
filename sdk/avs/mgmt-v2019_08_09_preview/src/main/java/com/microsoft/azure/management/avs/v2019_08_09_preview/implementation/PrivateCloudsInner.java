/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.avs.v2019_08_09_preview.implementation;

import com.microsoft.azure.arm.collection.InnerSupportsGet;
import com.microsoft.azure.arm.collection.InnerSupportsDelete;
import com.microsoft.azure.arm.collection.InnerSupportsListing;
import retrofit2.Retrofit;
import com.google.common.reflect.TypeToken;
import com.microsoft.azure.AzureServiceFuture;
import com.microsoft.azure.ListOperationCallback;
import com.microsoft.azure.management.avs.v2019_08_09_preview.ApiErrorException;
import com.microsoft.azure.Page;
import com.microsoft.azure.PagedList;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import com.microsoft.rest.Validator;
import java.io.IOException;
import java.util.List;
import okhttp3.ResponseBody;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.Header;
import retrofit2.http.Headers;
import retrofit2.http.HTTP;
import retrofit2.http.PATCH;
import retrofit2.http.Path;
import retrofit2.http.POST;
import retrofit2.http.PUT;
import retrofit2.http.Query;
import retrofit2.http.Url;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in PrivateClouds.
 */
public class PrivateCloudsInner implements InnerSupportsGet<PrivateCloudInner>, InnerSupportsDelete<Void>, InnerSupportsListing<PrivateCloudInner> {
    /** The Retrofit service to perform REST calls. */
    private PrivateCloudsService service;
    /** The service client containing this operation class. */
    private AvsClientImpl client;

    /**
     * Initializes an instance of PrivateCloudsInner.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public PrivateCloudsInner(Retrofit retrofit, AvsClientImpl client) {
        this.service = retrofit.create(PrivateCloudsService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for PrivateClouds to be
     * used by Retrofit to perform actually REST calls.
     */
    interface PrivateCloudsService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds listByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds")
        Observable<Response<ResponseBody>> listByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds list" })
        @GET("subscriptions/{subscriptionId}/providers/Microsoft.AVS/privateClouds")
        Observable<Response<ResponseBody>> list(@Path("subscriptionId") String subscriptionId, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds getByResourceGroup" })
        @GET("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}")
        Observable<Response<ResponseBody>> getByResourceGroup(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds createOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}")
        Observable<Response<ResponseBody>> createOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Body PrivateCloudInner privateCloud, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds beginCreateOrUpdate" })
        @PUT("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}")
        Observable<Response<ResponseBody>> beginCreateOrUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Body PrivateCloudInner privateCloud, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds update" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}")
        Observable<Response<ResponseBody>> update(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Body PrivateCloudInner privateCloud, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds beginUpdate" })
        @PATCH("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}")
        Observable<Response<ResponseBody>> beginUpdate(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Body PrivateCloudInner privateCloud, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds delete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> delete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds beginDelete" })
        @HTTP(path = "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}", method = "DELETE", hasBody = true)
        Observable<Response<ResponseBody>> beginDelete(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds listAdminCredentials" })
        @POST("subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AVS/privateClouds/{privateCloudName}/listAdminCredentials")
        Observable<Response<ResponseBody>> listAdminCredentials(@Path("subscriptionId") String subscriptionId, @Path("resourceGroupName") String resourceGroupName, @Path("privateCloudName") String privateCloudName, @Query("api-version") String apiVersion, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds listByResourceGroupNext" })
        @GET
        Observable<Response<ResponseBody>> listByResourceGroupNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: com.microsoft.azure.management.avs.v2019_08_09_preview.PrivateClouds listNext" })
        @GET
        Observable<Response<ResponseBody>> listNext(@Url String nextUrl, @Header("accept-language") String acceptLanguage, @Header("User-Agent") String userAgent);

    }

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloudInner&gt; object if successful.
     */
    public PagedList<PrivateCloudInner> listByResourceGroup(final String resourceGroupName) {
        ServiceResponse<Page<PrivateCloudInner>> response = listByResourceGroupSinglePageAsync(resourceGroupName).toBlocking().single();
        return new PagedList<PrivateCloudInner>(response.body()) {
            @Override
            public Page<PrivateCloudInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrivateCloudInner>> listByResourceGroupAsync(final String resourceGroupName, final ListOperationCallback<PrivateCloudInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupSinglePageAsync(resourceGroupName),
            new Func1<String, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<Page<PrivateCloudInner>> listByResourceGroupAsync(final String resourceGroupName) {
        return listByResourceGroupWithServiceResponseAsync(resourceGroupName)
            .map(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Page<PrivateCloudInner>>() {
                @Override
                public Page<PrivateCloudInner> call(ServiceResponse<Page<PrivateCloudInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List private clouds in a resource group.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listByResourceGroupWithServiceResponseAsync(final String resourceGroupName) {
        return listByResourceGroupSinglePageAsync(resourceGroupName)
            .concatMap(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(ServiceResponse<Page<PrivateCloudInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List private clouds in a resource group.
     *
    ServiceResponse<PageImpl<PrivateCloudInner>> * @param resourceGroupName Name of the resource group within the Azure subscription
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PrivateCloudInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listByResourceGroupSinglePageAsync(final String resourceGroupName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listByResourceGroup(this.client.subscriptionId(), resourceGroupName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PrivateCloudInner>> result = listByResourceGroupDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PrivateCloudInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PrivateCloudInner>> listByResourceGroupDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PrivateCloudInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PrivateCloudInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloudInner&gt; object if successful.
     */
    public PagedList<PrivateCloudInner> list() {
        ServiceResponse<Page<PrivateCloudInner>> response = listSinglePageAsync().toBlocking().single();
        return new PagedList<PrivateCloudInner>(response.body()) {
            @Override
            public Page<PrivateCloudInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List private clouds in a subscription.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrivateCloudInner>> listAsync(final ListOperationCallback<PrivateCloudInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listSinglePageAsync(),
            new Func1<String, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<Page<PrivateCloudInner>> listAsync() {
        return listWithServiceResponseAsync()
            .map(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Page<PrivateCloudInner>>() {
                @Override
                public Page<PrivateCloudInner> call(ServiceResponse<Page<PrivateCloudInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listWithServiceResponseAsync() {
        return listSinglePageAsync()
            .concatMap(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(ServiceResponse<Page<PrivateCloudInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List private clouds in a subscription.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PrivateCloudInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listSinglePageAsync() {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.list(this.client.subscriptionId(), this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PrivateCloudInner>> result = listDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PrivateCloudInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PrivateCloudInner>> listDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PrivateCloudInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PrivateCloudInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloudInner object if successful.
     */
    public PrivateCloudInner getByResourceGroup(String resourceGroupName, String privateCloudName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, privateCloudName).toBlocking().single().body();
    }

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateCloudInner> getByResourceGroupAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<PrivateCloudInner> serviceCallback) {
        return ServiceFuture.fromResponse(getByResourceGroupWithServiceResponseAsync(resourceGroupName, privateCloudName), serviceCallback);
    }

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloudInner object
     */
    public Observable<PrivateCloudInner> getByResourceGroupAsync(String resourceGroupName, String privateCloudName) {
        return getByResourceGroupWithServiceResponseAsync(resourceGroupName, privateCloudName).map(new Func1<ServiceResponse<PrivateCloudInner>, PrivateCloudInner>() {
            @Override
            public PrivateCloudInner call(ServiceResponse<PrivateCloudInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Get a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloudInner object
     */
    public Observable<ServiceResponse<PrivateCloudInner>> getByResourceGroupWithServiceResponseAsync(String resourceGroupName, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.getByResourceGroup(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrivateCloudInner>>>() {
                @Override
                public Observable<ServiceResponse<PrivateCloudInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrivateCloudInner> clientResponse = getByResourceGroupDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PrivateCloudInner> getByResourceGroupDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PrivateCloudInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PrivateCloudInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloudInner object if successful.
     */
    public PrivateCloudInner createOrUpdate(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).toBlocking().last().body();
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateCloudInner> createOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud, final ServiceCallback<PrivateCloudInner> serviceCallback) {
        return ServiceFuture.fromResponse(createOrUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud), serviceCallback);
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PrivateCloudInner> createOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return createOrUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).map(new Func1<ServiceResponse<PrivateCloudInner>, PrivateCloudInner>() {
            @Override
            public PrivateCloudInner call(ServiceResponse<PrivateCloudInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PrivateCloudInner>> createOrUpdateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (privateCloud == null) {
            throw new IllegalArgumentException("Parameter privateCloud is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(privateCloud);
        Observable<Response<ResponseBody>> observable = service.createOrUpdate(this.client.subscriptionId(), resourceGroupName, privateCloudName, privateCloud, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PrivateCloudInner>() { }.getType());
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloudInner object if successful.
     */
    public PrivateCloudInner beginCreateOrUpdate(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).toBlocking().single().body();
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateCloudInner> beginCreateOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud, final ServiceCallback<PrivateCloudInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud), serviceCallback);
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloudInner object
     */
    public Observable<PrivateCloudInner> beginCreateOrUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return beginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).map(new Func1<ServiceResponse<PrivateCloudInner>, PrivateCloudInner>() {
            @Override
            public PrivateCloudInner call(ServiceResponse<PrivateCloudInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Create or update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloudInner object
     */
    public Observable<ServiceResponse<PrivateCloudInner>> beginCreateOrUpdateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (privateCloud == null) {
            throw new IllegalArgumentException("Parameter privateCloud is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(privateCloud);
        return service.beginCreateOrUpdate(this.client.subscriptionId(), resourceGroupName, privateCloudName, privateCloud, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrivateCloudInner>>>() {
                @Override
                public Observable<ServiceResponse<PrivateCloudInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrivateCloudInner> clientResponse = beginCreateOrUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PrivateCloudInner> beginCreateOrUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PrivateCloudInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PrivateCloudInner>() { }.getType())
                .register(201, new TypeToken<PrivateCloudInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloudInner object if successful.
     */
    public PrivateCloudInner update(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return updateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).toBlocking().last().body();
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateCloudInner> updateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud, final ServiceCallback<PrivateCloudInner> serviceCallback) {
        return ServiceFuture.fromResponse(updateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud), serviceCallback);
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<PrivateCloudInner> updateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return updateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).map(new Func1<ServiceResponse<PrivateCloudInner>, PrivateCloudInner>() {
            @Override
            public PrivateCloudInner call(ServiceResponse<PrivateCloudInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<PrivateCloudInner>> updateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (privateCloud == null) {
            throw new IllegalArgumentException("Parameter privateCloud is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(privateCloud);
        Observable<Response<ResponseBody>> observable = service.update(this.client.subscriptionId(), resourceGroupName, privateCloudName, privateCloud, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPutOrPatchResultAsync(observable, new TypeToken<PrivateCloudInner>() { }.getType());
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PrivateCloudInner object if successful.
     */
    public PrivateCloudInner beginUpdate(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).toBlocking().single().body();
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<PrivateCloudInner> beginUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud, final ServiceCallback<PrivateCloudInner> serviceCallback) {
        return ServiceFuture.fromResponse(beginUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud), serviceCallback);
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloudInner object
     */
    public Observable<PrivateCloudInner> beginUpdateAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        return beginUpdateWithServiceResponseAsync(resourceGroupName, privateCloudName, privateCloud).map(new Func1<ServiceResponse<PrivateCloudInner>, PrivateCloudInner>() {
            @Override
            public PrivateCloudInner call(ServiceResponse<PrivateCloudInner> response) {
                return response.body();
            }
        });
    }

    /**
     * Update a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param privateCloud The private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PrivateCloudInner object
     */
    public Observable<ServiceResponse<PrivateCloudInner>> beginUpdateWithServiceResponseAsync(String resourceGroupName, String privateCloudName, PrivateCloudInner privateCloud) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (privateCloud == null) {
            throw new IllegalArgumentException("Parameter privateCloud is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Validator.validate(privateCloud);
        return service.beginUpdate(this.client.subscriptionId(), resourceGroupName, privateCloudName, privateCloud, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<PrivateCloudInner>>>() {
                @Override
                public Observable<ServiceResponse<PrivateCloudInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PrivateCloudInner> clientResponse = beginUpdateDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PrivateCloudInner> beginUpdateDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PrivateCloudInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PrivateCloudInner>() { }.getType())
                .register(201, new TypeToken<PrivateCloudInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void delete(String resourceGroupName, String privateCloudName) {
        deleteWithServiceResponseAsync(resourceGroupName, privateCloudName).toBlocking().last().body();
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> deleteAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(deleteWithServiceResponseAsync(resourceGroupName, privateCloudName), serviceCallback);
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<Void> deleteAsync(String resourceGroupName, String privateCloudName) {
        return deleteWithServiceResponseAsync(resourceGroupName, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable for the request
     */
    public Observable<ServiceResponse<Void>> deleteWithServiceResponseAsync(String resourceGroupName, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        Observable<Response<ResponseBody>> observable = service.delete(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent());
        return client.getAzureClient().getPostOrDeleteResultAsync(observable, new TypeToken<Void>() { }.getType());
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void beginDelete(String resourceGroupName, String privateCloudName) {
        beginDeleteWithServiceResponseAsync(resourceGroupName, privateCloudName).toBlocking().single().body();
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> beginDeleteAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(beginDeleteWithServiceResponseAsync(resourceGroupName, privateCloudName), serviceCallback);
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> beginDeleteAsync(String resourceGroupName, String privateCloudName) {
        return beginDeleteWithServiceResponseAsync(resourceGroupName, privateCloudName).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Delete a private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> beginDeleteWithServiceResponseAsync(String resourceGroupName, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.beginDelete(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = beginDeleteDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> beginDeleteDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<Void>() { }.getType())
                .register(202, new TypeToken<Void>() { }.getType())
                .register(204, new TypeToken<Void>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the AdminCredentialsInner object if successful.
     */
    public AdminCredentialsInner listAdminCredentials(String resourceGroupName, String privateCloudName) {
        return listAdminCredentialsWithServiceResponseAsync(resourceGroupName, privateCloudName).toBlocking().single().body();
    }

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<AdminCredentialsInner> listAdminCredentialsAsync(String resourceGroupName, String privateCloudName, final ServiceCallback<AdminCredentialsInner> serviceCallback) {
        return ServiceFuture.fromResponse(listAdminCredentialsWithServiceResponseAsync(resourceGroupName, privateCloudName), serviceCallback);
    }

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AdminCredentialsInner object
     */
    public Observable<AdminCredentialsInner> listAdminCredentialsAsync(String resourceGroupName, String privateCloudName) {
        return listAdminCredentialsWithServiceResponseAsync(resourceGroupName, privateCloudName).map(new Func1<ServiceResponse<AdminCredentialsInner>, AdminCredentialsInner>() {
            @Override
            public AdminCredentialsInner call(ServiceResponse<AdminCredentialsInner> response) {
                return response.body();
            }
        });
    }

    /**
     * List the admin credentials for the private cloud.
     *
     * @param resourceGroupName Name of the resource group within the Azure subscription
     * @param privateCloudName Name of the private cloud
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the AdminCredentialsInner object
     */
    public Observable<ServiceResponse<AdminCredentialsInner>> listAdminCredentialsWithServiceResponseAsync(String resourceGroupName, String privateCloudName) {
        if (this.client.subscriptionId() == null) {
            throw new IllegalArgumentException("Parameter this.client.subscriptionId() is required and cannot be null.");
        }
        if (resourceGroupName == null) {
            throw new IllegalArgumentException("Parameter resourceGroupName is required and cannot be null.");
        }
        if (privateCloudName == null) {
            throw new IllegalArgumentException("Parameter privateCloudName is required and cannot be null.");
        }
        if (this.client.apiVersion() == null) {
            throw new IllegalArgumentException("Parameter this.client.apiVersion() is required and cannot be null.");
        }
        return service.listAdminCredentials(this.client.subscriptionId(), resourceGroupName, privateCloudName, this.client.apiVersion(), this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<AdminCredentialsInner>>>() {
                @Override
                public Observable<ServiceResponse<AdminCredentialsInner>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<AdminCredentialsInner> clientResponse = listAdminCredentialsDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<AdminCredentialsInner> listAdminCredentialsDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<AdminCredentialsInner, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<AdminCredentialsInner>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloudInner&gt; object if successful.
     */
    public PagedList<PrivateCloudInner> listByResourceGroupNext(final String nextPageLink) {
        ServiceResponse<Page<PrivateCloudInner>> response = listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PrivateCloudInner>(response.body()) {
            @Override
            public Page<PrivateCloudInner> nextPage(String nextPageLink) {
                return listByResourceGroupNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrivateCloudInner>> listByResourceGroupNextAsync(final String nextPageLink, final ServiceFuture<List<PrivateCloudInner>> serviceFuture, final ListOperationCallback<PrivateCloudInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listByResourceGroupNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(String nextPageLink) {
                    return listByResourceGroupNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<Page<PrivateCloudInner>> listByResourceGroupNextAsync(final String nextPageLink) {
        return listByResourceGroupNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Page<PrivateCloudInner>>() {
                @Override
                public Page<PrivateCloudInner> call(ServiceResponse<Page<PrivateCloudInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List private clouds in a resource group.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listByResourceGroupNextWithServiceResponseAsync(final String nextPageLink) {
        return listByResourceGroupNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(ServiceResponse<Page<PrivateCloudInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listByResourceGroupNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List private clouds in a resource group.
     *
    ServiceResponse<PageImpl<PrivateCloudInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PrivateCloudInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listByResourceGroupNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listByResourceGroupNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PrivateCloudInner>> result = listByResourceGroupNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PrivateCloudInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PrivateCloudInner>> listByResourceGroupNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PrivateCloudInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PrivateCloudInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws ApiErrorException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PagedList&lt;PrivateCloudInner&gt; object if successful.
     */
    public PagedList<PrivateCloudInner> listNext(final String nextPageLink) {
        ServiceResponse<Page<PrivateCloudInner>> response = listNextSinglePageAsync(nextPageLink).toBlocking().single();
        return new PagedList<PrivateCloudInner>(response.body()) {
            @Override
            public Page<PrivateCloudInner> nextPage(String nextPageLink) {
                return listNextSinglePageAsync(nextPageLink).toBlocking().single().body();
            }
        };
    }

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @param serviceFuture the ServiceFuture object tracking the Retrofit calls
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<List<PrivateCloudInner>> listNextAsync(final String nextPageLink, final ServiceFuture<List<PrivateCloudInner>> serviceFuture, final ListOperationCallback<PrivateCloudInner> serviceCallback) {
        return AzureServiceFuture.fromPageResponse(
            listNextSinglePageAsync(nextPageLink),
            new Func1<String, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(String nextPageLink) {
                    return listNextSinglePageAsync(nextPageLink);
                }
            },
            serviceCallback);
    }

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<Page<PrivateCloudInner>> listNextAsync(final String nextPageLink) {
        return listNextWithServiceResponseAsync(nextPageLink)
            .map(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Page<PrivateCloudInner>>() {
                @Override
                public Page<PrivateCloudInner> call(ServiceResponse<Page<PrivateCloudInner>> response) {
                    return response.body();
                }
            });
    }

    /**
     * List private clouds in a subscription.
     *
     * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PagedList&lt;PrivateCloudInner&gt; object
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listNextWithServiceResponseAsync(final String nextPageLink) {
        return listNextSinglePageAsync(nextPageLink)
            .concatMap(new Func1<ServiceResponse<Page<PrivateCloudInner>>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(ServiceResponse<Page<PrivateCloudInner>> page) {
                    String nextPageLink = page.body().nextPageLink();
                    if (nextPageLink == null) {
                        return Observable.just(page);
                    }
                    return Observable.just(page).concatWith(listNextWithServiceResponseAsync(nextPageLink));
                }
            });
    }

    /**
     * List private clouds in a subscription.
     *
    ServiceResponse<PageImpl<PrivateCloudInner>> * @param nextPageLink The NextLink from the previous successful call to List operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the PagedList&lt;PrivateCloudInner&gt; object wrapped in {@link ServiceResponse} if successful.
     */
    public Observable<ServiceResponse<Page<PrivateCloudInner>>> listNextSinglePageAsync(final String nextPageLink) {
        if (nextPageLink == null) {
            throw new IllegalArgumentException("Parameter nextPageLink is required and cannot be null.");
        }
        String nextUrl = String.format("%s", nextPageLink);
        return service.listNext(nextUrl, this.client.acceptLanguage(), this.client.userAgent())
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Page<PrivateCloudInner>>>>() {
                @Override
                public Observable<ServiceResponse<Page<PrivateCloudInner>>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<PageImpl<PrivateCloudInner>> result = listNextDelegate(response);
                        return Observable.just(new ServiceResponse<Page<PrivateCloudInner>>(result.body(), result.response()));
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<PageImpl<PrivateCloudInner>> listNextDelegate(Response<ResponseBody> response) throws ApiErrorException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<PageImpl<PrivateCloudInner>, ApiErrorException>newInstance(this.client.serializerAdapter())
                .register(200, new TypeToken<PageImpl<PrivateCloudInner>>() { }.getType())
                .registerError(ApiErrorException.class)
                .build(response);
    }

}
