// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.util.List;

/**
 * Set of rules for sending metrics for the Monitor resource.
 */
@Fluent
public final class MetricRules implements JsonSerializable<MetricRules> {
    /*
     * Flag specifying if metrics from Azure resources should be sent for the Monitor resource.
     */
    private SendingMetricsStatus sendingMetrics;

    /*
     * List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only
     * Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
     * specified, the rules will only include resources with the associated tags.
     */
    private List<FilteringTag> filteringTags;

    /**
     * Creates an instance of MetricRules class.
     */
    public MetricRules() {
    }

    /**
     * Get the sendingMetrics property: Flag specifying if metrics from Azure resources should be sent for the Monitor
     * resource.
     * 
     * @return the sendingMetrics value.
     */
    public SendingMetricsStatus sendingMetrics() {
        return this.sendingMetrics;
    }

    /**
     * Set the sendingMetrics property: Flag specifying if metrics from Azure resources should be sent for the Monitor
     * resource.
     * 
     * @param sendingMetrics the sendingMetrics value to set.
     * @return the MetricRules object itself.
     */
    public MetricRules withSendingMetrics(SendingMetricsStatus sendingMetrics) {
        this.sendingMetrics = sendingMetrics;
        return this;
    }

    /**
     * Get the filteringTags property: List of filtering tags to be used for capturing metrics. If empty, all resources
     * will be captured. If only Exclude action is specified, the rules will apply to the list of all available
     * resources. If Include actions are specified, the rules will only include resources with the associated tags.
     * 
     * @return the filteringTags value.
     */
    public List<FilteringTag> filteringTags() {
        return this.filteringTags;
    }

    /**
     * Set the filteringTags property: List of filtering tags to be used for capturing metrics. If empty, all resources
     * will be captured. If only Exclude action is specified, the rules will apply to the list of all available
     * resources. If Include actions are specified, the rules will only include resources with the associated tags.
     * 
     * @param filteringTags the filteringTags value to set.
     * @return the MetricRules object itself.
     */
    public MetricRules withFilteringTags(List<FilteringTag> filteringTags) {
        this.filteringTags = filteringTags;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (filteringTags() != null) {
            filteringTags().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("sendingMetrics",
            this.sendingMetrics == null ? null : this.sendingMetrics.toString());
        jsonWriter.writeArrayField("filteringTags", this.filteringTags, (writer, element) -> writer.writeJson(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MetricRules from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MetricRules if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the MetricRules.
     */
    public static MetricRules fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MetricRules deserializedMetricRules = new MetricRules();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("sendingMetrics".equals(fieldName)) {
                    deserializedMetricRules.sendingMetrics = SendingMetricsStatus.fromString(reader.getString());
                } else if ("filteringTags".equals(fieldName)) {
                    List<FilteringTag> filteringTags = reader.readArray(reader1 -> FilteringTag.fromJson(reader1));
                    deserializedMetricRules.filteringTags = filteringTags;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMetricRules;
        });
    }
}
