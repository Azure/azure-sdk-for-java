// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dynatrace.models.SsoStatus;
import java.io.IOException;
import java.util.List;

/**
 * SSO details from the Dynatrace partner.
 */
@Fluent
public final class SsoDetailsResponseInner implements JsonSerializable<SsoDetailsResponseInner> {
    /*
     * Whether the SSO is enabled for this resource or not.
     */
    private SsoStatus isSsoEnabled;

    /*
     * URL for Azure AD metadata
     */
    private String metadataUrl;

    /*
     * The login URL specific to this Dynatrace Environment
     */
    private String singleSignOnUrl;

    /*
     * array of Aad(azure active directory) domains
     */
    private List<String> aadDomains;

    /*
     * Array of admin user emails.
     */
    private List<String> adminUsers;

    /**
     * Creates an instance of SsoDetailsResponseInner class.
     */
    public SsoDetailsResponseInner() {
    }

    /**
     * Get the isSsoEnabled property: Whether the SSO is enabled for this resource or not.
     * 
     * @return the isSsoEnabled value.
     */
    public SsoStatus isSsoEnabled() {
        return this.isSsoEnabled;
    }

    /**
     * Set the isSsoEnabled property: Whether the SSO is enabled for this resource or not.
     * 
     * @param isSsoEnabled the isSsoEnabled value to set.
     * @return the SsoDetailsResponseInner object itself.
     */
    public SsoDetailsResponseInner withIsSsoEnabled(SsoStatus isSsoEnabled) {
        this.isSsoEnabled = isSsoEnabled;
        return this;
    }

    /**
     * Get the metadataUrl property: URL for Azure AD metadata.
     * 
     * @return the metadataUrl value.
     */
    public String metadataUrl() {
        return this.metadataUrl;
    }

    /**
     * Set the metadataUrl property: URL for Azure AD metadata.
     * 
     * @param metadataUrl the metadataUrl value to set.
     * @return the SsoDetailsResponseInner object itself.
     */
    public SsoDetailsResponseInner withMetadataUrl(String metadataUrl) {
        this.metadataUrl = metadataUrl;
        return this;
    }

    /**
     * Get the singleSignOnUrl property: The login URL specific to this Dynatrace Environment.
     * 
     * @return the singleSignOnUrl value.
     */
    public String singleSignOnUrl() {
        return this.singleSignOnUrl;
    }

    /**
     * Set the singleSignOnUrl property: The login URL specific to this Dynatrace Environment.
     * 
     * @param singleSignOnUrl the singleSignOnUrl value to set.
     * @return the SsoDetailsResponseInner object itself.
     */
    public SsoDetailsResponseInner withSingleSignOnUrl(String singleSignOnUrl) {
        this.singleSignOnUrl = singleSignOnUrl;
        return this;
    }

    /**
     * Get the aadDomains property: array of Aad(azure active directory) domains.
     * 
     * @return the aadDomains value.
     */
    public List<String> aadDomains() {
        return this.aadDomains;
    }

    /**
     * Set the aadDomains property: array of Aad(azure active directory) domains.
     * 
     * @param aadDomains the aadDomains value to set.
     * @return the SsoDetailsResponseInner object itself.
     */
    public SsoDetailsResponseInner withAadDomains(List<String> aadDomains) {
        this.aadDomains = aadDomains;
        return this;
    }

    /**
     * Get the adminUsers property: Array of admin user emails.
     * 
     * @return the adminUsers value.
     */
    public List<String> adminUsers() {
        return this.adminUsers;
    }

    /**
     * Set the adminUsers property: Array of admin user emails.
     * 
     * @param adminUsers the adminUsers value to set.
     * @return the SsoDetailsResponseInner object itself.
     */
    public SsoDetailsResponseInner withAdminUsers(List<String> adminUsers) {
        this.adminUsers = adminUsers;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("isSsoEnabled", this.isSsoEnabled == null ? null : this.isSsoEnabled.toString());
        jsonWriter.writeStringField("metadataUrl", this.metadataUrl);
        jsonWriter.writeStringField("singleSignOnUrl", this.singleSignOnUrl);
        jsonWriter.writeArrayField("aadDomains", this.aadDomains, (writer, element) -> writer.writeString(element));
        jsonWriter.writeArrayField("adminUsers", this.adminUsers, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of SsoDetailsResponseInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of SsoDetailsResponseInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the SsoDetailsResponseInner.
     */
    public static SsoDetailsResponseInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            SsoDetailsResponseInner deserializedSsoDetailsResponseInner = new SsoDetailsResponseInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("isSsoEnabled".equals(fieldName)) {
                    deserializedSsoDetailsResponseInner.isSsoEnabled = SsoStatus.fromString(reader.getString());
                } else if ("metadataUrl".equals(fieldName)) {
                    deserializedSsoDetailsResponseInner.metadataUrl = reader.getString();
                } else if ("singleSignOnUrl".equals(fieldName)) {
                    deserializedSsoDetailsResponseInner.singleSignOnUrl = reader.getString();
                } else if ("aadDomains".equals(fieldName)) {
                    List<String> aadDomains = reader.readArray(reader1 -> reader1.getString());
                    deserializedSsoDetailsResponseInner.aadDomains = aadDomains;
                } else if ("adminUsers".equals(fieldName)) {
                    List<String> adminUsers = reader.readArray(reader1 -> reader1.getString());
                    deserializedSsoDetailsResponseInner.adminUsers = adminUsers;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedSsoDetailsResponseInner;
        });
    }
}
