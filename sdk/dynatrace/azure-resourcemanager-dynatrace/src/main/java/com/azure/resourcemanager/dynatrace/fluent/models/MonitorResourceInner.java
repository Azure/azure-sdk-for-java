// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.Resource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dynatrace.models.DynatraceEnvironmentProperties;
import com.azure.resourcemanager.dynatrace.models.IdentityProperties;
import com.azure.resourcemanager.dynatrace.models.LiftrResourceCategories;
import com.azure.resourcemanager.dynatrace.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.dynatrace.models.MonitoringStatus;
import com.azure.resourcemanager.dynatrace.models.PlanData;
import com.azure.resourcemanager.dynatrace.models.ProvisioningState;
import com.azure.resourcemanager.dynatrace.models.UserInfo;
import java.io.IOException;
import java.util.Map;

/**
 * Dynatrace Monitor Resource.
 */
@Fluent
public final class MonitorResourceInner extends Resource {
    /*
     * The resource-specific properties for this resource.
     */
    private MonitorProperties innerProperties = new MonitorProperties();

    /*
     * System metadata for this resource.
     */
    private SystemData systemData;

    /*
     * The managed service identities assigned to this resource.
     */
    private IdentityProperties identity;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of MonitorResourceInner class.
     */
    public MonitorResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private MonitorProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: System metadata for this resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the identity property: The managed service identities assigned to this resource.
     * 
     * @return the identity value.
     */
    public IdentityProperties identity() {
        return this.identity;
    }

    /**
     * Set the identity property: The managed service identities assigned to this resource.
     * 
     * @param identity the identity value to set.
     * @return the MonitorResourceInner object itself.
     */
    public MonitorResourceInner withIdentity(IdentityProperties identity) {
        this.identity = identity;
        return this;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MonitorResourceInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MonitorResourceInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Get the monitoringStatus property: Status of the monitor.
     * 
     * @return the monitoringStatus value.
     */
    public MonitoringStatus monitoringStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().monitoringStatus();
    }

    /**
     * Set the monitoringStatus property: Status of the monitor.
     * 
     * @param monitoringStatus the monitoringStatus value to set.
     * @return the MonitorResourceInner object itself.
     */
    public MonitorResourceInner withMonitoringStatus(MonitoringStatus monitoringStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withMonitoringStatus(monitoringStatus);
        return this;
    }

    /**
     * Get the marketplaceSubscriptionStatus property: Marketplace subscription status.
     * 
     * @return the marketplaceSubscriptionStatus value.
     */
    public MarketplaceSubscriptionStatus marketplaceSubscriptionStatus() {
        return this.innerProperties() == null ? null : this.innerProperties().marketplaceSubscriptionStatus();
    }

    /**
     * Set the marketplaceSubscriptionStatus property: Marketplace subscription status.
     * 
     * @param marketplaceSubscriptionStatus the marketplaceSubscriptionStatus value to set.
     * @return the MonitorResourceInner object itself.
     */
    public MonitorResourceInner
        withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus marketplaceSubscriptionStatus) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withMarketplaceSubscriptionStatus(marketplaceSubscriptionStatus);
        return this;
    }

    /**
     * Get the dynatraceEnvironmentProperties property: Properties of the Dynatrace environment.
     * 
     * @return the dynatraceEnvironmentProperties value.
     */
    public DynatraceEnvironmentProperties dynatraceEnvironmentProperties() {
        return this.innerProperties() == null ? null : this.innerProperties().dynatraceEnvironmentProperties();
    }

    /**
     * Set the dynatraceEnvironmentProperties property: Properties of the Dynatrace environment.
     * 
     * @param dynatraceEnvironmentProperties the dynatraceEnvironmentProperties value to set.
     * @return the MonitorResourceInner object itself.
     */
    public MonitorResourceInner
        withDynatraceEnvironmentProperties(DynatraceEnvironmentProperties dynatraceEnvironmentProperties) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withDynatraceEnvironmentProperties(dynatraceEnvironmentProperties);
        return this;
    }

    /**
     * Get the userInfo property: User info.
     * 
     * @return the userInfo value.
     */
    public UserInfo userInfo() {
        return this.innerProperties() == null ? null : this.innerProperties().userInfo();
    }

    /**
     * Set the userInfo property: User info.
     * 
     * @param userInfo the userInfo value to set.
     * @return the MonitorResourceInner object itself.
     */
    public MonitorResourceInner withUserInfo(UserInfo userInfo) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withUserInfo(userInfo);
        return this;
    }

    /**
     * Get the planData property: Billing plan information.
     * 
     * @return the planData value.
     */
    public PlanData planData() {
        return this.innerProperties() == null ? null : this.innerProperties().planData();
    }

    /**
     * Set the planData property: Billing plan information.
     * 
     * @param planData the planData value to set.
     * @return the MonitorResourceInner object itself.
     */
    public MonitorResourceInner withPlanData(PlanData planData) {
        if (this.innerProperties() == null) {
            this.innerProperties = new MonitorProperties();
        }
        this.innerProperties().withPlanData(planData);
        return this;
    }

    /**
     * Get the liftrResourceCategory property: Liftr Resource category.
     * 
     * @return the liftrResourceCategory value.
     */
    public LiftrResourceCategories liftrResourceCategory() {
        return this.innerProperties() == null ? null : this.innerProperties().liftrResourceCategory();
    }

    /**
     * Get the liftrResourcePreference property: The priority of the resource.
     * 
     * @return the liftrResourcePreference value.
     */
    public Integer liftrResourcePreference() {
        return this.innerProperties() == null ? null : this.innerProperties().liftrResourcePreference();
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model MonitorResourceInner"));
        } else {
            innerProperties().validate();
        }
        if (identity() != null) {
            identity().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(MonitorResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("location", location());
        jsonWriter.writeMapField("tags", tags(), (writer, element) -> writer.writeString(element));
        jsonWriter.writeJsonField("properties", this.innerProperties);
        jsonWriter.writeJsonField("identity", this.identity);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of MonitorResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of MonitorResourceInner if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the MonitorResourceInner.
     */
    public static MonitorResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            MonitorResourceInner deserializedMonitorResourceInner = new MonitorResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedMonitorResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedMonitorResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedMonitorResourceInner.type = reader.getString();
                } else if ("location".equals(fieldName)) {
                    deserializedMonitorResourceInner.withLocation(reader.getString());
                } else if ("tags".equals(fieldName)) {
                    Map<String, String> tags = reader.readMap(reader1 -> reader1.getString());
                    deserializedMonitorResourceInner.withTags(tags);
                } else if ("properties".equals(fieldName)) {
                    deserializedMonitorResourceInner.innerProperties = MonitorProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedMonitorResourceInner.systemData = SystemData.fromJson(reader);
                } else if ("identity".equals(fieldName)) {
                    deserializedMonitorResourceInner.identity = IdentityProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedMonitorResourceInner;
        });
    }
}
