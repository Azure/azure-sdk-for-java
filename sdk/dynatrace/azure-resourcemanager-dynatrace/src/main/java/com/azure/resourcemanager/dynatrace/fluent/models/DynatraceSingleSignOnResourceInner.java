// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.management.ProxyResource;
import com.azure.core.management.SystemData;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dynatrace.models.ProvisioningState;
import com.azure.resourcemanager.dynatrace.models.SingleSignOnStates;
import java.io.IOException;
import java.util.List;

/**
 * Single sign-on configurations for a given monitor resource.
 */
@Fluent
public final class DynatraceSingleSignOnResourceInner extends ProxyResource {
    /*
     * The resource-specific properties for this resource.
     */
    private DynatraceSingleSignOnProperties innerProperties = new DynatraceSingleSignOnProperties();

    /*
     * System metadata for this resource.
     */
    private SystemData systemData;

    /*
     * The type of the resource.
     */
    private String type;

    /*
     * The name of the resource.
     */
    private String name;

    /*
     * Fully qualified resource Id for the resource.
     */
    private String id;

    /**
     * Creates an instance of DynatraceSingleSignOnResourceInner class.
     */
    public DynatraceSingleSignOnResourceInner() {
    }

    /**
     * Get the innerProperties property: The resource-specific properties for this resource.
     * 
     * @return the innerProperties value.
     */
    private DynatraceSingleSignOnProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the systemData property: System metadata for this resource.
     * 
     * @return the systemData value.
     */
    public SystemData systemData() {
        return this.systemData;
    }

    /**
     * Get the type property: The type of the resource.
     * 
     * @return the type value.
     */
    @Override
    public String type() {
        return this.type;
    }

    /**
     * Get the name property: The name of the resource.
     * 
     * @return the name value.
     */
    @Override
    public String name() {
        return this.name;
    }

    /**
     * Get the id property: Fully qualified resource Id for the resource.
     * 
     * @return the id value.
     */
    @Override
    public String id() {
        return this.id;
    }

    /**
     * Get the singleSignOnState property: State of Single Sign On.
     * 
     * @return the singleSignOnState value.
     */
    public SingleSignOnStates singleSignOnState() {
        return this.innerProperties() == null ? null : this.innerProperties().singleSignOnState();
    }

    /**
     * Set the singleSignOnState property: State of Single Sign On.
     * 
     * @param singleSignOnState the singleSignOnState value to set.
     * @return the DynatraceSingleSignOnResourceInner object itself.
     */
    public DynatraceSingleSignOnResourceInner withSingleSignOnState(SingleSignOnStates singleSignOnState) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DynatraceSingleSignOnProperties();
        }
        this.innerProperties().withSingleSignOnState(singleSignOnState);
        return this;
    }

    /**
     * Get the enterpriseAppId property: Version of the Dynatrace agent installed on the VM.
     * 
     * @return the enterpriseAppId value.
     */
    public String enterpriseAppId() {
        return this.innerProperties() == null ? null : this.innerProperties().enterpriseAppId();
    }

    /**
     * Set the enterpriseAppId property: Version of the Dynatrace agent installed on the VM.
     * 
     * @param enterpriseAppId the enterpriseAppId value to set.
     * @return the DynatraceSingleSignOnResourceInner object itself.
     */
    public DynatraceSingleSignOnResourceInner withEnterpriseAppId(String enterpriseAppId) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DynatraceSingleSignOnProperties();
        }
        this.innerProperties().withEnterpriseAppId(enterpriseAppId);
        return this;
    }

    /**
     * Get the singleSignOnUrl property: The login URL specific to this Dynatrace Environment.
     * 
     * @return the singleSignOnUrl value.
     */
    public String singleSignOnUrl() {
        return this.innerProperties() == null ? null : this.innerProperties().singleSignOnUrl();
    }

    /**
     * Set the singleSignOnUrl property: The login URL specific to this Dynatrace Environment.
     * 
     * @param singleSignOnUrl the singleSignOnUrl value to set.
     * @return the DynatraceSingleSignOnResourceInner object itself.
     */
    public DynatraceSingleSignOnResourceInner withSingleSignOnUrl(String singleSignOnUrl) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DynatraceSingleSignOnProperties();
        }
        this.innerProperties().withSingleSignOnUrl(singleSignOnUrl);
        return this;
    }

    /**
     * Get the aadDomains property: array of Aad(azure active directory) domains.
     * 
     * @return the aadDomains value.
     */
    public List<String> aadDomains() {
        return this.innerProperties() == null ? null : this.innerProperties().aadDomains();
    }

    /**
     * Set the aadDomains property: array of Aad(azure active directory) domains.
     * 
     * @param aadDomains the aadDomains value to set.
     * @return the DynatraceSingleSignOnResourceInner object itself.
     */
    public DynatraceSingleSignOnResourceInner withAadDomains(List<String> aadDomains) {
        if (this.innerProperties() == null) {
            this.innerProperties = new DynatraceSingleSignOnProperties();
        }
        this.innerProperties().withAadDomains(aadDomains);
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     * 
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.innerProperties() == null ? null : this.innerProperties().provisioningState();
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model DynatraceSingleSignOnResourceInner"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DynatraceSingleSignOnResourceInner.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynatraceSingleSignOnResourceInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynatraceSingleSignOnResourceInner if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the DynatraceSingleSignOnResourceInner.
     */
    public static DynatraceSingleSignOnResourceInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynatraceSingleSignOnResourceInner deserializedDynatraceSingleSignOnResourceInner
                = new DynatraceSingleSignOnResourceInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedDynatraceSingleSignOnResourceInner.id = reader.getString();
                } else if ("name".equals(fieldName)) {
                    deserializedDynatraceSingleSignOnResourceInner.name = reader.getString();
                } else if ("type".equals(fieldName)) {
                    deserializedDynatraceSingleSignOnResourceInner.type = reader.getString();
                } else if ("properties".equals(fieldName)) {
                    deserializedDynatraceSingleSignOnResourceInner.innerProperties
                        = DynatraceSingleSignOnProperties.fromJson(reader);
                } else if ("systemData".equals(fieldName)) {
                    deserializedDynatraceSingleSignOnResourceInner.systemData = SystemData.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDynatraceSingleSignOnResourceInner;
        });
    }
}
