// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.dynatrace.fluent.models.DynatraceSingleSignOnProperties;
import java.io.IOException;

/**
 * Properties of the Dynatrace environment.
 */
@Fluent
public final class DynatraceEnvironmentProperties implements JsonSerializable<DynatraceEnvironmentProperties> {
    /*
     * User id
     */
    private String userId;

    /*
     * Dynatrace Account Information
     */
    private AccountInfo accountInfo;

    /*
     * Dynatrace Environment Information
     */
    private EnvironmentInfo environmentInfo;

    /*
     * The details of a Dynatrace single sign-on.
     */
    private DynatraceSingleSignOnProperties singleSignOnProperties;

    /**
     * Creates an instance of DynatraceEnvironmentProperties class.
     */
    public DynatraceEnvironmentProperties() {
    }

    /**
     * Get the userId property: User id.
     * 
     * @return the userId value.
     */
    public String userId() {
        return this.userId;
    }

    /**
     * Set the userId property: User id.
     * 
     * @param userId the userId value to set.
     * @return the DynatraceEnvironmentProperties object itself.
     */
    public DynatraceEnvironmentProperties withUserId(String userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the accountInfo property: Dynatrace Account Information.
     * 
     * @return the accountInfo value.
     */
    public AccountInfo accountInfo() {
        return this.accountInfo;
    }

    /**
     * Set the accountInfo property: Dynatrace Account Information.
     * 
     * @param accountInfo the accountInfo value to set.
     * @return the DynatraceEnvironmentProperties object itself.
     */
    public DynatraceEnvironmentProperties withAccountInfo(AccountInfo accountInfo) {
        this.accountInfo = accountInfo;
        return this;
    }

    /**
     * Get the environmentInfo property: Dynatrace Environment Information.
     * 
     * @return the environmentInfo value.
     */
    public EnvironmentInfo environmentInfo() {
        return this.environmentInfo;
    }

    /**
     * Set the environmentInfo property: Dynatrace Environment Information.
     * 
     * @param environmentInfo the environmentInfo value to set.
     * @return the DynatraceEnvironmentProperties object itself.
     */
    public DynatraceEnvironmentProperties withEnvironmentInfo(EnvironmentInfo environmentInfo) {
        this.environmentInfo = environmentInfo;
        return this;
    }

    /**
     * Get the singleSignOnProperties property: The details of a Dynatrace single sign-on.
     * 
     * @return the singleSignOnProperties value.
     */
    public DynatraceSingleSignOnProperties singleSignOnProperties() {
        return this.singleSignOnProperties;
    }

    /**
     * Set the singleSignOnProperties property: The details of a Dynatrace single sign-on.
     * 
     * @param singleSignOnProperties the singleSignOnProperties value to set.
     * @return the DynatraceEnvironmentProperties object itself.
     */
    public DynatraceEnvironmentProperties
        withSingleSignOnProperties(DynatraceSingleSignOnProperties singleSignOnProperties) {
        this.singleSignOnProperties = singleSignOnProperties;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (accountInfo() != null) {
            accountInfo().validate();
        }
        if (environmentInfo() != null) {
            environmentInfo().validate();
        }
        if (singleSignOnProperties() != null) {
            singleSignOnProperties().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("userId", this.userId);
        jsonWriter.writeJsonField("accountInfo", this.accountInfo);
        jsonWriter.writeJsonField("environmentInfo", this.environmentInfo);
        jsonWriter.writeJsonField("singleSignOnProperties", this.singleSignOnProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of DynatraceEnvironmentProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of DynatraceEnvironmentProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the DynatraceEnvironmentProperties.
     */
    public static DynatraceEnvironmentProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            DynatraceEnvironmentProperties deserializedDynatraceEnvironmentProperties
                = new DynatraceEnvironmentProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("userId".equals(fieldName)) {
                    deserializedDynatraceEnvironmentProperties.userId = reader.getString();
                } else if ("accountInfo".equals(fieldName)) {
                    deserializedDynatraceEnvironmentProperties.accountInfo = AccountInfo.fromJson(reader);
                } else if ("environmentInfo".equals(fieldName)) {
                    deserializedDynatraceEnvironmentProperties.environmentInfo = EnvironmentInfo.fromJson(reader);
                } else if ("singleSignOnProperties".equals(fieldName)) {
                    deserializedDynatraceEnvironmentProperties.singleSignOnProperties
                        = DynatraceSingleSignOnProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedDynatraceEnvironmentProperties;
        });
    }
}
