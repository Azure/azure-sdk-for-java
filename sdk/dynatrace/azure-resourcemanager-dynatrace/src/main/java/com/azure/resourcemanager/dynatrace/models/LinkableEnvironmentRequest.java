// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Request for getting all the linkable environments for a user.
 */
@Fluent
public final class LinkableEnvironmentRequest implements JsonSerializable<LinkableEnvironmentRequest> {
    /*
     * Tenant Id of the user in which they want to link the environment
     */
    private String tenantId;

    /*
     * user principal id of the user
     */
    private String userPrincipal;

    /*
     * Azure region in which we want to link the environment
     */
    private String region;

    /**
     * Creates an instance of LinkableEnvironmentRequest class.
     */
    public LinkableEnvironmentRequest() {
    }

    /**
     * Get the tenantId property: Tenant Id of the user in which they want to link the environment.
     * 
     * @return the tenantId value.
     */
    public String tenantId() {
        return this.tenantId;
    }

    /**
     * Set the tenantId property: Tenant Id of the user in which they want to link the environment.
     * 
     * @param tenantId the tenantId value to set.
     * @return the LinkableEnvironmentRequest object itself.
     */
    public LinkableEnvironmentRequest withTenantId(String tenantId) {
        this.tenantId = tenantId;
        return this;
    }

    /**
     * Get the userPrincipal property: user principal id of the user.
     * 
     * @return the userPrincipal value.
     */
    public String userPrincipal() {
        return this.userPrincipal;
    }

    /**
     * Set the userPrincipal property: user principal id of the user.
     * 
     * @param userPrincipal the userPrincipal value to set.
     * @return the LinkableEnvironmentRequest object itself.
     */
    public LinkableEnvironmentRequest withUserPrincipal(String userPrincipal) {
        this.userPrincipal = userPrincipal;
        return this;
    }

    /**
     * Get the region property: Azure region in which we want to link the environment.
     * 
     * @return the region value.
     */
    public String region() {
        return this.region;
    }

    /**
     * Set the region property: Azure region in which we want to link the environment.
     * 
     * @param region the region value to set.
     * @return the LinkableEnvironmentRequest object itself.
     */
    public LinkableEnvironmentRequest withRegion(String region) {
        this.region = region;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (tenantId() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property tenantId in model LinkableEnvironmentRequest"));
        }
        if (userPrincipal() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property userPrincipal in model LinkableEnvironmentRequest"));
        }
        if (region() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property region in model LinkableEnvironmentRequest"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(LinkableEnvironmentRequest.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("tenantId", this.tenantId);
        jsonWriter.writeStringField("userPrincipal", this.userPrincipal);
        jsonWriter.writeStringField("region", this.region);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of LinkableEnvironmentRequest from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of LinkableEnvironmentRequest if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the LinkableEnvironmentRequest.
     */
    public static LinkableEnvironmentRequest fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            LinkableEnvironmentRequest deserializedLinkableEnvironmentRequest = new LinkableEnvironmentRequest();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("tenantId".equals(fieldName)) {
                    deserializedLinkableEnvironmentRequest.tenantId = reader.getString();
                } else if ("userPrincipal".equals(fieldName)) {
                    deserializedLinkableEnvironmentRequest.userPrincipal = reader.getString();
                } else if ("region".equals(fieldName)) {
                    deserializedLinkableEnvironmentRequest.region = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedLinkableEnvironmentRequest;
        });
    }
}
