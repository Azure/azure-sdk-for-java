// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.resourcemanager.dynatrace.models.ProvisioningState;
import com.azure.resourcemanager.dynatrace.models.SingleSignOnStates;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/** The details of a Dynatrace single sign-on. */
@Fluent
public final class DynatraceSingleSignOnProperties {
    /*
     * State of Single Sign On
     */
    @JsonProperty(value = "singleSignOnState")
    private SingleSignOnStates singleSignOnState;

    /*
     * Version of the Dynatrace agent installed on the VM.
     */
    @JsonProperty(value = "enterpriseAppId")
    private String enterpriseAppId;

    /*
     * The login URL specific to this Dynatrace Environment
     */
    @JsonProperty(value = "singleSignOnUrl")
    private String singleSignOnUrl;

    /*
     * array of Aad(azure active directory) domains
     */
    @JsonProperty(value = "aadDomains")
    private List<String> aadDomains;

    /*
     * Provisioning state of the resource.
     */
    @JsonProperty(value = "provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private ProvisioningState provisioningState;

    /**
     * Get the singleSignOnState property: State of Single Sign On.
     *
     * @return the singleSignOnState value.
     */
    public SingleSignOnStates singleSignOnState() {
        return this.singleSignOnState;
    }

    /**
     * Set the singleSignOnState property: State of Single Sign On.
     *
     * @param singleSignOnState the singleSignOnState value to set.
     * @return the DynatraceSingleSignOnProperties object itself.
     */
    public DynatraceSingleSignOnProperties withSingleSignOnState(SingleSignOnStates singleSignOnState) {
        this.singleSignOnState = singleSignOnState;
        return this;
    }

    /**
     * Get the enterpriseAppId property: Version of the Dynatrace agent installed on the VM.
     *
     * @return the enterpriseAppId value.
     */
    public String enterpriseAppId() {
        return this.enterpriseAppId;
    }

    /**
     * Set the enterpriseAppId property: Version of the Dynatrace agent installed on the VM.
     *
     * @param enterpriseAppId the enterpriseAppId value to set.
     * @return the DynatraceSingleSignOnProperties object itself.
     */
    public DynatraceSingleSignOnProperties withEnterpriseAppId(String enterpriseAppId) {
        this.enterpriseAppId = enterpriseAppId;
        return this;
    }

    /**
     * Get the singleSignOnUrl property: The login URL specific to this Dynatrace Environment.
     *
     * @return the singleSignOnUrl value.
     */
    public String singleSignOnUrl() {
        return this.singleSignOnUrl;
    }

    /**
     * Set the singleSignOnUrl property: The login URL specific to this Dynatrace Environment.
     *
     * @param singleSignOnUrl the singleSignOnUrl value to set.
     * @return the DynatraceSingleSignOnProperties object itself.
     */
    public DynatraceSingleSignOnProperties withSingleSignOnUrl(String singleSignOnUrl) {
        this.singleSignOnUrl = singleSignOnUrl;
        return this;
    }

    /**
     * Get the aadDomains property: array of Aad(azure active directory) domains.
     *
     * @return the aadDomains value.
     */
    public List<String> aadDomains() {
        return this.aadDomains;
    }

    /**
     * Set the aadDomains property: array of Aad(azure active directory) domains.
     *
     * @param aadDomains the aadDomains value to set.
     * @return the DynatraceSingleSignOnProperties object itself.
     */
    public DynatraceSingleSignOnProperties withAadDomains(List<String> aadDomains) {
        this.aadDomains = aadDomains;
        return this;
    }

    /**
     * Get the provisioningState property: Provisioning state of the resource.
     *
     * @return the provisioningState value.
     */
    public ProvisioningState provisioningState() {
        return this.provisioningState;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}
