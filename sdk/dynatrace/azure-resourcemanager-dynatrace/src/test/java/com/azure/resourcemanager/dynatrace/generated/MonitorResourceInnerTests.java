// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dynatrace.fluent.models.MonitorResourceInner;
import com.azure.resourcemanager.dynatrace.models.DynatraceEnvironmentProperties;
import com.azure.resourcemanager.dynatrace.models.IdentityProperties;
import com.azure.resourcemanager.dynatrace.models.ManagedIdentityType;
import com.azure.resourcemanager.dynatrace.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.dynatrace.models.MonitoringStatus;
import com.azure.resourcemanager.dynatrace.models.PlanData;
import com.azure.resourcemanager.dynatrace.models.UserAssignedIdentity;
import com.azure.resourcemanager.dynatrace.models.UserInfo;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MonitorResourceInnerTests {
    @Test
    public void testDeserialize() {
        MonitorResourceInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"dynatraceEnvironmentProperties\":{\"userId\":\"gjofjd\"},\"userInfo\":{\"firstName\":\"eupewnwreitjz\",\"lastName\":\"lusarh\",\"emailAddress\":\"fcqhsmyurkd\",\"phoneNumber\":\"lx\",\"country\":\"kuksjtxukcdm\"},\"planData\":{\"usageType\":\"cryuan\",\"billingCycle\":\"uxzdxtay\",\"planDetails\":\"hmwhfpmrqo\",\"effectiveDate\":\"2021-02-24T20:47:16Z\"},\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":1941399376,\"provisioningState\":\"NotSpecified\"},\"identity\":{\"tenantId\":\"hfx\",\"principalId\":\"jbpzvgnwzsymg\",\"type\":\"UserAssigned\",\"userAssignedIdentities\":{\"ifpikxwczby\":{\"clientId\":\"cyzkohdbihanuf\",\"principalId\":\"fcbjysagithxqha\"},\"grtfwvu\":{\"clientId\":\"cnpqxuhivyqniwby\",\"principalId\":\"rkxvdum\"},\"jcny\":{\"clientId\":\"xgaudccs\",\"principalId\":\"h\"},\"emkkvnipjox\":{\"clientId\":\"j\",\"principalId\":\"kryhtnapczwlokj\"}}},\"location\":\"jnchgej\",\"tags\":{\"ahuxinpm\":\"dmailzydehojw\",\"vcputegj\":\"njaqwixjspro\",\"uuvmkjozkrwfnd\":\"wmfdatscmdvpjhul\"},\"id\":\"odjpslwejd\",\"name\":\"vwryoqpso\",\"type\":\"cctazakljlahbc\"}")
                .toObject(MonitorResourceInner.class);
        Assertions.assertEquals("jnchgej", model.location());
        Assertions.assertEquals("dmailzydehojw", model.tags().get("ahuxinpm"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions
            .assertEquals("cyzkohdbihanuf", model.identity().userAssignedIdentities().get("ifpikxwczby").clientId());
        Assertions
            .assertEquals(
                "fcbjysagithxqha", model.identity().userAssignedIdentities().get("ifpikxwczby").principalId());
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED, model.marketplaceSubscriptionStatus());
        Assertions.assertEquals("gjofjd", model.dynatraceEnvironmentProperties().userId());
        Assertions.assertEquals("eupewnwreitjz", model.userInfo().firstName());
        Assertions.assertEquals("lusarh", model.userInfo().lastName());
        Assertions.assertEquals("fcqhsmyurkd", model.userInfo().emailAddress());
        Assertions.assertEquals("lx", model.userInfo().phoneNumber());
        Assertions.assertEquals("kuksjtxukcdm", model.userInfo().country());
        Assertions.assertEquals("cryuan", model.planData().usageType());
        Assertions.assertEquals("uxzdxtay", model.planData().billingCycle());
        Assertions.assertEquals("hmwhfpmrqo", model.planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-24T20:47:16Z"), model.planData().effectiveDate());
    }

    @Test
    public void testSerialize() {
        MonitorResourceInner model =
            new MonitorResourceInner()
                .withLocation("jnchgej")
                .withTags(
                    mapOf(
                        "ahuxinpm", "dmailzydehojw", "vcputegj", "njaqwixjspro", "uuvmkjozkrwfnd", "wmfdatscmdvpjhul"))
                .withIdentity(
                    new IdentityProperties()
                        .withType(ManagedIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(
                            mapOf(
                                "ifpikxwczby",
                                new UserAssignedIdentity()
                                    .withClientId("cyzkohdbihanuf")
                                    .withPrincipalId("fcbjysagithxqha"),
                                "grtfwvu",
                                new UserAssignedIdentity().withClientId("cnpqxuhivyqniwby").withPrincipalId("rkxvdum"),
                                "jcny",
                                new UserAssignedIdentity().withClientId("xgaudccs").withPrincipalId("h"),
                                "emkkvnipjox",
                                new UserAssignedIdentity().withClientId("j").withPrincipalId("kryhtnapczwlokj"))))
                .withMonitoringStatus(MonitoringStatus.DISABLED)
                .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.SUSPENDED)
                .withDynatraceEnvironmentProperties(new DynatraceEnvironmentProperties().withUserId("gjofjd"))
                .withUserInfo(
                    new UserInfo()
                        .withFirstName("eupewnwreitjz")
                        .withLastName("lusarh")
                        .withEmailAddress("fcqhsmyurkd")
                        .withPhoneNumber("lx")
                        .withCountry("kuksjtxukcdm"))
                .withPlanData(
                    new PlanData()
                        .withUsageType("cryuan")
                        .withBillingCycle("uxzdxtay")
                        .withPlanDetails("hmwhfpmrqo")
                        .withEffectiveDate(OffsetDateTime.parse("2021-02-24T20:47:16Z")));
        model = BinaryData.fromObject(model).toObject(MonitorResourceInner.class);
        Assertions.assertEquals("jnchgej", model.location());
        Assertions.assertEquals("dmailzydehojw", model.tags().get("ahuxinpm"));
        Assertions.assertEquals(ManagedIdentityType.USER_ASSIGNED, model.identity().type());
        Assertions
            .assertEquals("cyzkohdbihanuf", model.identity().userAssignedIdentities().get("ifpikxwczby").clientId());
        Assertions
            .assertEquals(
                "fcbjysagithxqha", model.identity().userAssignedIdentities().get("ifpikxwczby").principalId());
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED, model.marketplaceSubscriptionStatus());
        Assertions.assertEquals("gjofjd", model.dynatraceEnvironmentProperties().userId());
        Assertions.assertEquals("eupewnwreitjz", model.userInfo().firstName());
        Assertions.assertEquals("lusarh", model.userInfo().lastName());
        Assertions.assertEquals("fcqhsmyurkd", model.userInfo().emailAddress());
        Assertions.assertEquals("lx", model.userInfo().phoneNumber());
        Assertions.assertEquals("kuksjtxukcdm", model.userInfo().country());
        Assertions.assertEquals("cryuan", model.planData().usageType());
        Assertions.assertEquals("uxzdxtay", model.planData().billingCycle());
        Assertions.assertEquals("hmwhfpmrqo", model.planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-02-24T20:47:16Z"), model.planData().effectiveDate());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
