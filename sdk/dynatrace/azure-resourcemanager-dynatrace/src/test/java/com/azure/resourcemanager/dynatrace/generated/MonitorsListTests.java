// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Context;
import com.azure.resourcemanager.dynatrace.DynatraceManager;
import com.azure.resourcemanager.dynatrace.models.ManagedIdentityType;
import com.azure.resourcemanager.dynatrace.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.dynatrace.models.MonitorResource;
import com.azure.resourcemanager.dynatrace.models.MonitoringStatus;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitorsListTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"monitoringStatus\":\"Enabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"dynatraceEnvironmentProperties\":{\"userId\":\"ca\"},\"userInfo\":{\"firstName\":\"kafkuwbcrnwbm\",\"lastName\":\"hseyvju\",\"emailAddress\":\"tslhspkdeem\",\"phoneNumber\":\"fm\",\"country\":\"gkvtmelmqkrhah\"},\"planData\":{\"usageType\":\"uahaquhcdhmd\",\"billingCycle\":\"laexqp\",\"planDetails\":\"adm\",\"effectiveDate\":\"2021-01-27T12:04:26Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1913869945,\"provisioningState\":\"Succeeded\"},\"identity\":{\"tenantId\":\"mzlfmisgwb\",\"principalId\":\"beldawkzbaliourq\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"uhashsfwx\",\"tags\":{\"xcug\":\"w\",\"ovbvmeueciv\":\"cjooxdjebwpucwwf\"},\"id\":\"hzceuojgjrwjue\",\"name\":\"otwmcdyt\",\"type\":\"x\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DynatraceManager manager =
            DynatraceManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<MonitorResource> response = manager.monitors().list(Context.NONE);

        Assertions.assertEquals("uhashsfwx", response.iterator().next().location());
        Assertions.assertEquals("w", response.iterator().next().tags().get("xcug"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.iterator().next().identity().type());
        Assertions.assertEquals(MonitoringStatus.ENABLED, response.iterator().next().monitoringStatus());
        Assertions
            .assertEquals(
                MarketplaceSubscriptionStatus.SUSPENDED, response.iterator().next().marketplaceSubscriptionStatus());
        Assertions.assertEquals("ca", response.iterator().next().dynatraceEnvironmentProperties().userId());
        Assertions.assertEquals("kafkuwbcrnwbm", response.iterator().next().userInfo().firstName());
        Assertions.assertEquals("hseyvju", response.iterator().next().userInfo().lastName());
        Assertions.assertEquals("tslhspkdeem", response.iterator().next().userInfo().emailAddress());
        Assertions.assertEquals("fm", response.iterator().next().userInfo().phoneNumber());
        Assertions.assertEquals("gkvtmelmqkrhah", response.iterator().next().userInfo().country());
        Assertions.assertEquals("uahaquhcdhmd", response.iterator().next().planData().usageType());
        Assertions.assertEquals("laexqp", response.iterator().next().planData().billingCycle());
        Assertions.assertEquals("adm", response.iterator().next().planData().planDetails());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-01-27T12:04:26Z"), response.iterator().next().planData().effectiveDate());
    }
}
