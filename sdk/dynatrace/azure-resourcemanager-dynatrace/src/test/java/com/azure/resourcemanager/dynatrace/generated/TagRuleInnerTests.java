// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dynatrace.fluent.models.TagRuleInner;
import com.azure.resourcemanager.dynatrace.models.FilteringTag;
import com.azure.resourcemanager.dynatrace.models.LogRules;
import com.azure.resourcemanager.dynatrace.models.MetricRules;
import com.azure.resourcemanager.dynatrace.models.SendAadLogsStatus;
import com.azure.resourcemanager.dynatrace.models.SendActivityLogsStatus;
import com.azure.resourcemanager.dynatrace.models.SendSubscriptionLogsStatus;
import com.azure.resourcemanager.dynatrace.models.SendingMetricsStatus;
import com.azure.resourcemanager.dynatrace.models.TagAction;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class TagRuleInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TagRuleInner model =
            BinaryData
                .fromString(
                    "{\"properties\":{\"logRules\":{\"sendAadLogs\":\"Disabled\",\"sendSubscriptionLogs\":\"Disabled\",\"sendActivityLogs\":\"Enabled\",\"filteringTags\":[{\"name\":\"tynqgoul\",\"value\":\"dlikwyqkgfgibma\",\"action\":\"Include\"}]},\"metricRules\":{\"sendingMetrics\":\"Disabled\",\"filteringTags\":[{\"name\":\"yb\",\"value\":\"qedqytbciqfoufl\",\"action\":\"Exclude\"},{\"name\":\"zsm\",\"value\":\"mglougpbkw\",\"action\":\"Exclude\"}]},\"provisioningState\":\"Updating\"},\"id\":\"qktapspwgcuert\",\"name\":\"mkdo\",\"type\":\"vqwhbmdgbbjfd\"}")
                .toObject(TagRuleInner.class);
        Assertions.assertEquals(SendAadLogsStatus.DISABLED, model.logRules().sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.DISABLED, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.ENABLED, model.logRules().sendActivityLogs());
        Assertions.assertEquals("tynqgoul", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("dlikwyqkgfgibma", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
        Assertions.assertEquals(SendingMetricsStatus.DISABLED, model.metricRules().sendingMetrics());
        Assertions.assertEquals("yb", model.metricRules().filteringTags().get(0).name());
        Assertions.assertEquals("qedqytbciqfoufl", model.metricRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.metricRules().filteringTags().get(0).action());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TagRuleInner model =
            new TagRuleInner()
                .withLogRules(
                    new LogRules()
                        .withSendAadLogs(SendAadLogsStatus.DISABLED)
                        .withSendSubscriptionLogs(SendSubscriptionLogsStatus.DISABLED)
                        .withSendActivityLogs(SendActivityLogsStatus.ENABLED)
                        .withFilteringTags(
                            Arrays
                                .asList(
                                    new FilteringTag()
                                        .withName("tynqgoul")
                                        .withValue("dlikwyqkgfgibma")
                                        .withAction(TagAction.INCLUDE))))
                .withMetricRules(
                    new MetricRules()
                        .withSendingMetrics(SendingMetricsStatus.DISABLED)
                        .withFilteringTags(
                            Arrays
                                .asList(
                                    new FilteringTag()
                                        .withName("yb")
                                        .withValue("qedqytbciqfoufl")
                                        .withAction(TagAction.EXCLUDE),
                                    new FilteringTag()
                                        .withName("zsm")
                                        .withValue("mglougpbkw")
                                        .withAction(TagAction.EXCLUDE))));
        model = BinaryData.fromObject(model).toObject(TagRuleInner.class);
        Assertions.assertEquals(SendAadLogsStatus.DISABLED, model.logRules().sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.DISABLED, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.ENABLED, model.logRules().sendActivityLogs());
        Assertions.assertEquals("tynqgoul", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("dlikwyqkgfgibma", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.INCLUDE, model.logRules().filteringTags().get(0).action());
        Assertions.assertEquals(SendingMetricsStatus.DISABLED, model.metricRules().sendingMetrics());
        Assertions.assertEquals("yb", model.metricRules().filteringTags().get(0).name());
        Assertions.assertEquals("qedqytbciqfoufl", model.metricRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.metricRules().filteringTags().get(0).action());
    }
}
