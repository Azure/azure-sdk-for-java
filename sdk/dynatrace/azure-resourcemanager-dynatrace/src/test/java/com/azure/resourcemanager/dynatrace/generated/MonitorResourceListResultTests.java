// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dynatrace.fluent.models.MonitorResourceInner;
import com.azure.resourcemanager.dynatrace.models.IdentityProperties;
import com.azure.resourcemanager.dynatrace.models.ManagedIdentityType;
import com.azure.resourcemanager.dynatrace.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.dynatrace.models.MonitorResourceListResult;
import com.azure.resourcemanager.dynatrace.models.MonitoringStatus;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class MonitorResourceListResultTests {
    @Test
    public void testDeserialize() {
        MonitorResourceListResult model =
            BinaryData
                .fromString(
                    "{\"value\":[{\"properties\":{\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":1279126864,\"provisioningState\":\"Creating\"},\"identity\":{\"tenantId\":\"kanyktzlcuiywg\",\"principalId\":\"wgndrvynhzgpp\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"gyncocpecfvmmc\",\"tags\":{\"abcypmivk\":\"sxlzevgbmqj\",\"ccfwnfnbacfion\":\"lzu\",\"qbqqwxr\":\"ebxetqgtzxdp\",\"isnjampmngnz\":\"feallnwsu\"},\"id\":\"c\",\"name\":\"aqw\",\"type\":\"ochcbonqvpkvl\"},{\"properties\":{\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Active\",\"liftrResourceCategory\":\"MonitorLogs\",\"liftrResourcePreference\":495940499,\"provisioningState\":\"Canceled\"},\"identity\":{\"tenantId\":\"eyy\",\"principalId\":\"nj\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"wtgrhpdjpj\",\"tags\":{\"e\":\"sxazjpq\",\"zvdudgwdslfhotwm\":\"ualhbxxhejj\",\"pgacftadehxnlty\":\"ynpwlbj\",\"usue\":\"sop\"},\"id\":\"nzwdejba\",\"name\":\"orxzdmohctbqvud\",\"type\":\"xdn\"}],\"nextLink\":\"vo\"}")
                .toObject(MonitorResourceListResult.class);
        Assertions.assertEquals("gyncocpecfvmmc", model.value().get(0).location());
        Assertions.assertEquals("sxlzevgbmqj", model.value().get(0).tags().get("abcypmivk"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.value().get(0).monitoringStatus());
        Assertions
            .assertEquals(MarketplaceSubscriptionStatus.ACTIVE, model.value().get(0).marketplaceSubscriptionStatus());
        Assertions.assertEquals("vo", model.nextLink());
    }

    @Test
    public void testSerialize() {
        MonitorResourceListResult model =
            new MonitorResourceListResult()
                .withValue(
                    Arrays
                        .asList(
                            new MonitorResourceInner()
                                .withLocation("gyncocpecfvmmc")
                                .withTags(
                                    mapOf(
                                        "abcypmivk",
                                        "sxlzevgbmqj",
                                        "ccfwnfnbacfion",
                                        "lzu",
                                        "qbqqwxr",
                                        "ebxetqgtzxdp",
                                        "isnjampmngnz",
                                        "feallnwsu"))
                                .withIdentity(
                                    new IdentityProperties()
                                        .withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withMonitoringStatus(MonitoringStatus.DISABLED)
                                .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE),
                            new MonitorResourceInner()
                                .withLocation("wtgrhpdjpj")
                                .withTags(
                                    mapOf(
                                        "e",
                                        "sxazjpq",
                                        "zvdudgwdslfhotwm",
                                        "ualhbxxhejj",
                                        "pgacftadehxnlty",
                                        "ynpwlbj",
                                        "usue",
                                        "sop"))
                                .withIdentity(
                                    new IdentityProperties()
                                        .withType(ManagedIdentityType.SYSTEM_ASSIGNED)
                                        .withUserAssignedIdentities(mapOf()))
                                .withMonitoringStatus(MonitoringStatus.DISABLED)
                                .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)))
                .withNextLink("vo");
        model = BinaryData.fromObject(model).toObject(MonitorResourceListResult.class);
        Assertions.assertEquals("gyncocpecfvmmc", model.value().get(0).location());
        Assertions.assertEquals("sxlzevgbmqj", model.value().get(0).tags().get("abcypmivk"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, model.value().get(0).identity().type());
        Assertions.assertEquals(MonitoringStatus.DISABLED, model.value().get(0).monitoringStatus());
        Assertions
            .assertEquals(MarketplaceSubscriptionStatus.ACTIVE, model.value().get(0).marketplaceSubscriptionStatus());
        Assertions.assertEquals("vo", model.nextLink());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
