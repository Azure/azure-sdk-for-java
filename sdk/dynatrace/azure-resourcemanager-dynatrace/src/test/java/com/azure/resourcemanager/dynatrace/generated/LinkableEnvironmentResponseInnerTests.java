// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dynatrace.fluent.models.LinkableEnvironmentResponseInner;
import com.azure.resourcemanager.dynatrace.models.PlanData;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class LinkableEnvironmentResponseInnerTests {
    @Test
    public void testDeserialize() {
        LinkableEnvironmentResponseInner model =
            BinaryData
                .fromString(
                    "{\"environmentId\":\"kphywpnvjto\",\"environmentName\":\"ermclfplphoxuscr\",\"planData\":{\"usageType\":\"gyepsbjt\",\"billingCycle\":\"qugxywpmueefjzwf\",\"planDetails\":\"q\",\"effectiveDate\":\"2021-05-17T21:14:55Z\"}}")
                .toObject(LinkableEnvironmentResponseInner.class);
        Assertions.assertEquals("kphywpnvjto", model.environmentId());
        Assertions.assertEquals("ermclfplphoxuscr", model.environmentName());
        Assertions.assertEquals("gyepsbjt", model.planData().usageType());
        Assertions.assertEquals("qugxywpmueefjzwf", model.planData().billingCycle());
        Assertions.assertEquals("q", model.planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T21:14:55Z"), model.planData().effectiveDate());
    }

    @Test
    public void testSerialize() {
        LinkableEnvironmentResponseInner model =
            new LinkableEnvironmentResponseInner()
                .withEnvironmentId("kphywpnvjto")
                .withEnvironmentName("ermclfplphoxuscr")
                .withPlanData(
                    new PlanData()
                        .withUsageType("gyepsbjt")
                        .withBillingCycle("qugxywpmueefjzwf")
                        .withPlanDetails("q")
                        .withEffectiveDate(OffsetDateTime.parse("2021-05-17T21:14:55Z")));
        model = BinaryData.fromObject(model).toObject(LinkableEnvironmentResponseInner.class);
        Assertions.assertEquals("kphywpnvjto", model.environmentId());
        Assertions.assertEquals("ermclfplphoxuscr", model.environmentName());
        Assertions.assertEquals("gyepsbjt", model.planData().usageType());
        Assertions.assertEquals("qugxywpmueefjzwf", model.planData().billingCycle());
        Assertions.assertEquals("q", model.planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-17T21:14:55Z"), model.planData().effectiveDate());
    }
}
