// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dynatrace.fluent.models.AppServiceInfoInner;
import com.azure.resourcemanager.dynatrace.models.AutoUpdateSetting;
import com.azure.resourcemanager.dynatrace.models.AvailabilityState;
import com.azure.resourcemanager.dynatrace.models.LogModule;
import com.azure.resourcemanager.dynatrace.models.MonitoringType;
import com.azure.resourcemanager.dynatrace.models.UpdateStatus;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class AppServiceInfoInnerTests {
    @Test
    public void testDeserialize() {
        AppServiceInfoInner model =
            BinaryData
                .fromString(
                    "{\"resourceId\":\"zfcl\",\"version\":\"axdbabph\",\"monitoringType\":\"FULL_STACK\",\"autoUpdateSetting\":\"ENABLED\",\"updateStatus\":\"SCHEDULED\",\"availabilityState\":\"MONITORED\",\"logModule\":\"ENABLED\",\"hostGroup\":\"ucoc\",\"hostName\":\"yyazttbt\"}")
                .toObject(AppServiceInfoInner.class);
        Assertions.assertEquals("zfcl", model.resourceId());
        Assertions.assertEquals("axdbabph", model.version());
        Assertions.assertEquals(MonitoringType.FULL_STACK, model.monitoringType());
        Assertions.assertEquals(AutoUpdateSetting.ENABLED, model.autoUpdateSetting());
        Assertions.assertEquals(UpdateStatus.SCHEDULED, model.updateStatus());
        Assertions.assertEquals(AvailabilityState.MONITORED, model.availabilityState());
        Assertions.assertEquals(LogModule.ENABLED, model.logModule());
        Assertions.assertEquals("ucoc", model.hostGroup());
        Assertions.assertEquals("yyazttbt", model.hostname());
    }

    @Test
    public void testSerialize() {
        AppServiceInfoInner model =
            new AppServiceInfoInner()
                .withResourceId("zfcl")
                .withVersion("axdbabph")
                .withMonitoringType(MonitoringType.FULL_STACK)
                .withAutoUpdateSetting(AutoUpdateSetting.ENABLED)
                .withUpdateStatus(UpdateStatus.SCHEDULED)
                .withAvailabilityState(AvailabilityState.MONITORED)
                .withLogModule(LogModule.ENABLED)
                .withHostGroup("ucoc")
                .withHostname("yyazttbt");
        model = BinaryData.fromObject(model).toObject(AppServiceInfoInner.class);
        Assertions.assertEquals("zfcl", model.resourceId());
        Assertions.assertEquals("axdbabph", model.version());
        Assertions.assertEquals(MonitoringType.FULL_STACK, model.monitoringType());
        Assertions.assertEquals(AutoUpdateSetting.ENABLED, model.autoUpdateSetting());
        Assertions.assertEquals(UpdateStatus.SCHEDULED, model.updateStatus());
        Assertions.assertEquals(AvailabilityState.MONITORED, model.availabilityState());
        Assertions.assertEquals(LogModule.ENABLED, model.logModule());
        Assertions.assertEquals("ucoc", model.hostGroup());
        Assertions.assertEquals("yyazttbt", model.hostname());
    }
}
