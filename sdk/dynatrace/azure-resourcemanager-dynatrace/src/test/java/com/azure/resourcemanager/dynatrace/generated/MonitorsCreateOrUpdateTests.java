// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.dynatrace.DynatraceManager;
import com.azure.resourcemanager.dynatrace.models.DynatraceEnvironmentProperties;
import com.azure.resourcemanager.dynatrace.models.IdentityProperties;
import com.azure.resourcemanager.dynatrace.models.ManagedIdentityType;
import com.azure.resourcemanager.dynatrace.models.MarketplaceSubscriptionStatus;
import com.azure.resourcemanager.dynatrace.models.MonitorResource;
import com.azure.resourcemanager.dynatrace.models.MonitoringStatus;
import com.azure.resourcemanager.dynatrace.models.PlanData;
import com.azure.resourcemanager.dynatrace.models.UserInfo;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class MonitorsCreateOrUpdateTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"monitoringStatus\":\"Disabled\",\"marketplaceSubscriptionStatus\":\"Suspended\",\"dynatraceEnvironmentProperties\":{\"userId\":\"jmkcjhwqytj\"},\"userInfo\":{\"firstName\":\"ewgdrjervn\",\"lastName\":\"nqpeh\",\"emailAddress\":\"doy\",\"phoneNumber\":\"ifthnz\",\"country\":\"dslgnayqigynduh\"},\"planData\":{\"usageType\":\"qlkth\",\"billingCycle\":\"aqolbgycduiertg\",\"planDetails\":\"y\",\"effectiveDate\":\"2021-01-19T22:33:55Z\"},\"liftrResourceCategory\":\"Unknown\",\"liftrResourcePreference\":585310107,\"provisioningState\":\"Succeeded\"},\"identity\":{\"tenantId\":\"mmdnbbglzps\",\"principalId\":\"ydmcwyhzdxssa\",\"type\":\"SystemAssigned\",\"userAssignedIdentities\":{}},\"location\":\"nvdfznuda\",\"tags\":{\"cblylpstdbhhxsr\":\"xzb\",\"erscdntne\":\"dzu\"},\"id\":\"fiwjmygtdssls\",\"name\":\"tmweriofzpyq\",\"type\":\"emwabnet\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DynatraceManager manager =
            DynatraceManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        MonitorResource response =
            manager
                .monitors()
                .define("ellwptfdy")
                .withRegion("johxcrsb")
                .withExistingResourceGroup("gucnapkte")
                .withTags(mapOf("wbhsqfsub", "asrru", "rxbpyb", "gjb", "twss", "rfbjf"))
                .withIdentity(
                    new IdentityProperties()
                        .withType(ManagedIdentityType.USER_ASSIGNED)
                        .withUserAssignedIdentities(mapOf()))
                .withMonitoringStatus(MonitoringStatus.DISABLED)
                .withMarketplaceSubscriptionStatus(MarketplaceSubscriptionStatus.ACTIVE)
                .withDynatraceEnvironmentProperties(new DynatraceEnvironmentProperties().withUserId("ceopzfqrhhuaopp"))
                .withUserInfo(
                    new UserInfo()
                        .withFirstName("ol")
                        .withLastName("ahzxctobgbk")
                        .withEmailAddress("oizpostmgrcfbun")
                        .withPhoneNumber("fqjhhkxbpvjymj")
                        .withCountry("xjyngudivk"))
                .withPlanData(
                    new PlanData()
                        .withUsageType("wbxqzvszjfau")
                        .withBillingCycle("fdxxivetvtcqaqtd")
                        .withPlanDetails("mcbxvwvxysl")
                        .withEffectiveDate(OffsetDateTime.parse("2021-11-03T16:17:43Z")))
                .create();

        Assertions.assertEquals("nvdfznuda", response.location());
        Assertions.assertEquals("xzb", response.tags().get("cblylpstdbhhxsr"));
        Assertions.assertEquals(ManagedIdentityType.SYSTEM_ASSIGNED, response.identity().type());
        Assertions.assertEquals(MonitoringStatus.DISABLED, response.monitoringStatus());
        Assertions.assertEquals(MarketplaceSubscriptionStatus.SUSPENDED, response.marketplaceSubscriptionStatus());
        Assertions.assertEquals("jmkcjhwqytj", response.dynatraceEnvironmentProperties().userId());
        Assertions.assertEquals("ewgdrjervn", response.userInfo().firstName());
        Assertions.assertEquals("nqpeh", response.userInfo().lastName());
        Assertions.assertEquals("doy", response.userInfo().emailAddress());
        Assertions.assertEquals("ifthnz", response.userInfo().phoneNumber());
        Assertions.assertEquals("dslgnayqigynduh", response.userInfo().country());
        Assertions.assertEquals("qlkth", response.planData().usageType());
        Assertions.assertEquals("aqolbgycduiertg", response.planData().billingCycle());
        Assertions.assertEquals("y", response.planData().planDetails());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-19T22:33:55Z"), response.planData().effectiveDate());
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
