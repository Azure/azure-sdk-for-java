// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.dynatrace.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.dynatrace.models.FilteringTag;
import com.azure.resourcemanager.dynatrace.models.LogRules;
import com.azure.resourcemanager.dynatrace.models.MetricRules;
import com.azure.resourcemanager.dynatrace.models.SendAadLogsStatus;
import com.azure.resourcemanager.dynatrace.models.SendActivityLogsStatus;
import com.azure.resourcemanager.dynatrace.models.SendSubscriptionLogsStatus;
import com.azure.resourcemanager.dynatrace.models.TagAction;
import com.azure.resourcemanager.dynatrace.models.TagRuleUpdate;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public final class TagRuleUpdateTests {
    @Test
    public void testDeserialize() {
        TagRuleUpdate model =
            BinaryData
                .fromString(
                    "{\"logRules\":{\"sendAadLogs\":\"Disabled\",\"sendSubscriptionLogs\":\"Disabled\",\"sendActivityLogs\":\"Disabled\",\"filteringTags\":[{\"name\":\"khrs\",\"value\":\"iwkuofos\",\"action\":\"Exclude\"},{\"name\":\"auu\",\"value\":\"jmvxie\",\"action\":\"Include\"},{\"name\":\"idyjrrfbyaosvexc\",\"value\":\"npc\",\"action\":\"Exclude\"}]},\"metricRules\":{\"filteringTags\":[{\"name\":\"lkevle\",\"value\":\"zfbuhf\",\"action\":\"Exclude\"},{\"name\":\"x\",\"value\":\"feiithlvmez\",\"action\":\"Exclude\"},{\"name\":\"xmzsbbzogg\",\"value\":\"rxwburv\",\"action\":\"Include\"}]}}")
                .toObject(TagRuleUpdate.class);
        Assertions.assertEquals(SendAadLogsStatus.DISABLED, model.logRules().sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.DISABLED, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.DISABLED, model.logRules().sendActivityLogs());
        Assertions.assertEquals("khrs", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("iwkuofos", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.logRules().filteringTags().get(0).action());
        Assertions.assertEquals("lkevle", model.metricRules().filteringTags().get(0).name());
        Assertions.assertEquals("zfbuhf", model.metricRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.metricRules().filteringTags().get(0).action());
    }

    @Test
    public void testSerialize() {
        TagRuleUpdate model =
            new TagRuleUpdate()
                .withLogRules(
                    new LogRules()
                        .withSendAadLogs(SendAadLogsStatus.DISABLED)
                        .withSendSubscriptionLogs(SendSubscriptionLogsStatus.DISABLED)
                        .withSendActivityLogs(SendActivityLogsStatus.DISABLED)
                        .withFilteringTags(
                            Arrays
                                .asList(
                                    new FilteringTag()
                                        .withName("khrs")
                                        .withValue("iwkuofos")
                                        .withAction(TagAction.EXCLUDE),
                                    new FilteringTag()
                                        .withName("auu")
                                        .withValue("jmvxie")
                                        .withAction(TagAction.INCLUDE),
                                    new FilteringTag()
                                        .withName("idyjrrfbyaosvexc")
                                        .withValue("npc")
                                        .withAction(TagAction.EXCLUDE))))
                .withMetricRules(
                    new MetricRules()
                        .withFilteringTags(
                            Arrays
                                .asList(
                                    new FilteringTag()
                                        .withName("lkevle")
                                        .withValue("zfbuhf")
                                        .withAction(TagAction.EXCLUDE),
                                    new FilteringTag()
                                        .withName("x")
                                        .withValue("feiithlvmez")
                                        .withAction(TagAction.EXCLUDE),
                                    new FilteringTag()
                                        .withName("xmzsbbzogg")
                                        .withValue("rxwburv")
                                        .withAction(TagAction.INCLUDE))));
        model = BinaryData.fromObject(model).toObject(TagRuleUpdate.class);
        Assertions.assertEquals(SendAadLogsStatus.DISABLED, model.logRules().sendAadLogs());
        Assertions.assertEquals(SendSubscriptionLogsStatus.DISABLED, model.logRules().sendSubscriptionLogs());
        Assertions.assertEquals(SendActivityLogsStatus.DISABLED, model.logRules().sendActivityLogs());
        Assertions.assertEquals("khrs", model.logRules().filteringTags().get(0).name());
        Assertions.assertEquals("iwkuofos", model.logRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.logRules().filteringTags().get(0).action());
        Assertions.assertEquals("lkevle", model.metricRules().filteringTags().get(0).name());
        Assertions.assertEquals("zfbuhf", model.metricRules().filteringTags().get(0).value());
        Assertions.assertEquals(TagAction.EXCLUDE, model.metricRules().filteringTags().get(0).action());
    }
}
