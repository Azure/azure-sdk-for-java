// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.models;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.datalakeanalytics.fluent.models.DataLakeAnalyticsAccountInner;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/** An immutable client-side representation of DataLakeAnalyticsAccount. */
public interface DataLakeAnalyticsAccount {
    /**
     * Gets the id property: Fully qualified resource Id for the resource.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the accountId property: The unique identifier associated with this Data Lake Analytics account.
     *
     * @return the accountId value.
     */
    UUID accountId();

    /**
     * Gets the provisioningState property: The provisioning status of the Data Lake Analytics account.
     *
     * @return the provisioningState value.
     */
    DataLakeAnalyticsAccountStatus provisioningState();

    /**
     * Gets the state property: The state of the Data Lake Analytics account.
     *
     * @return the state value.
     */
    DataLakeAnalyticsAccountState state();

    /**
     * Gets the creationTime property: The account creation time.
     *
     * @return the creationTime value.
     */
    OffsetDateTime creationTime();

    /**
     * Gets the lastModifiedTime property: The account last modified time.
     *
     * @return the lastModifiedTime value.
     */
    OffsetDateTime lastModifiedTime();

    /**
     * Gets the endpoint property: The full CName endpoint for this account.
     *
     * @return the endpoint value.
     */
    String endpoint();

    /**
     * Gets the defaultDataLakeStoreAccount property: The default Data Lake Store account associated with this account.
     *
     * @return the defaultDataLakeStoreAccount value.
     */
    String defaultDataLakeStoreAccount();

    /**
     * Gets the dataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     *
     * @return the dataLakeStoreAccounts value.
     */
    List<DataLakeStoreAccountInformation> dataLakeStoreAccounts();

    /**
     * Gets the publicDataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     *
     * @return the publicDataLakeStoreAccounts value.
     */
    List<DataLakeStoreAccountInformation> publicDataLakeStoreAccounts();

    /**
     * Gets the storageAccounts property: The list of Azure Blob Storage accounts associated with this account.
     *
     * @return the storageAccounts value.
     */
    List<StorageAccountInformation> storageAccounts();

    /**
     * Gets the computePolicies property: The list of compute policies associated with this account.
     *
     * @return the computePolicies value.
     */
    List<ComputePolicy> computePolicies();

    /**
     * Gets the hiveMetastores property: The list of hiveMetastores associated with this account.
     *
     * @return the hiveMetastores value.
     */
    List<HiveMetastore> hiveMetastores();

    /**
     * Gets the virtualNetworkRules property: The list of virtualNetwork rules associated with this account.
     *
     * @return the virtualNetworkRules value.
     */
    List<VirtualNetworkRule> virtualNetworkRules();

    /**
     * Gets the firewallRules property: The list of firewall rules associated with this account.
     *
     * @return the firewallRules value.
     */
    List<FirewallRule> firewallRules();

    /**
     * Gets the firewallState property: The current state of the IP address firewall for this account.
     *
     * @return the firewallState value.
     */
    FirewallState firewallState();

    /**
     * Gets the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within
     * Azure through the firewall. If the firewall is disabled, this is not enforced.
     *
     * @return the firewallAllowAzureIps value.
     */
    FirewallAllowAzureIpsState firewallAllowAzureIps();

    /**
     * Gets the newTier property: The commitment tier for the next month.
     *
     * @return the newTier value.
     */
    TierType newTier();

    /**
     * Gets the currentTier property: The commitment tier in use for the current month.
     *
     * @return the currentTier value.
     */
    TierType currentTier();

    /**
     * Gets the maxJobCount property: The maximum supported jobs running under the account at the same time.
     *
     * @return the maxJobCount value.
     */
    Integer maxJobCount();

    /**
     * Gets the systemMaxJobCount property: The system defined maximum supported jobs running under the account at the
     * same time, which restricts the maximum number of running jobs the user can set for the account.
     *
     * @return the systemMaxJobCount value.
     */
    Integer systemMaxJobCount();

    /**
     * Gets the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this account.
     *
     * @return the maxDegreeOfParallelism value.
     */
    Integer maxDegreeOfParallelism();

    /**
     * Gets the systemMaxDegreeOfParallelism property: The system defined maximum supported degree of parallelism for
     * this account, which restricts the maximum value of parallelism the user can set for the account.
     *
     * @return the systemMaxDegreeOfParallelism value.
     */
    Integer systemMaxDegreeOfParallelism();

    /**
     * Gets the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job for this
     * account.
     *
     * @return the maxDegreeOfParallelismPerJob value.
     */
    Integer maxDegreeOfParallelismPerJob();

    /**
     * Gets the minPriorityPerJob property: The minimum supported priority per job for this account.
     *
     * @return the minPriorityPerJob value.
     */
    Integer minPriorityPerJob();

    /**
     * Gets the queryStoreRetention property: The number of days that job metadata is retained.
     *
     * @return the queryStoreRetention value.
     */
    Integer queryStoreRetention();

    /**
     * Gets the debugDataAccessLevel property: The current state of the DebugDataAccessLevel for this account.
     *
     * @return the debugDataAccessLevel value.
     */
    DebugDataAccessLevel debugDataAccessLevel();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.datalakeanalytics.fluent.models.DataLakeAnalyticsAccountInner object.
     *
     * @return the inner object.
     */
    DataLakeAnalyticsAccountInner innerModel();

    /** The entirety of the DataLakeAnalyticsAccount definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithDefaultDataLakeStoreAccount,
            DefinitionStages.WithDataLakeStoreAccounts,
            DefinitionStages.WithCreate {
    }
    /** The DataLakeAnalyticsAccount definition stages. */
    interface DefinitionStages {
        /** The first stage of the DataLakeAnalyticsAccount definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The resource location.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The resource location.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the Azure resource group.
             * @return the next definition stage.
             */
            WithDefaultDataLakeStoreAccount withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify defaultDataLakeStoreAccount. */
        interface WithDefaultDataLakeStoreAccount {
            /**
             * Specifies the defaultDataLakeStoreAccount property: The default Data Lake Store account associated with
             * this account..
             *
             * @param defaultDataLakeStoreAccount The default Data Lake Store account associated with this account.
             * @return the next definition stage.
             */
            WithDataLakeStoreAccounts withDefaultDataLakeStoreAccount(String defaultDataLakeStoreAccount);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify dataLakeStoreAccounts. */
        interface WithDataLakeStoreAccounts {
            /**
             * Specifies the dataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this
             * account..
             *
             * @param dataLakeStoreAccounts The list of Data Lake Store accounts associated with this account.
             * @return the next definition stage.
             */
            WithCreate withDataLakeStoreAccounts(List<AddDataLakeStoreWithAccountParameters> dataLakeStoreAccounts);
        }
        /**
         * The stage of the DataLakeAnalyticsAccount definition which contains all the minimum required properties for
         * the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithStorageAccounts,
                DefinitionStages.WithComputePolicies,
                DefinitionStages.WithFirewallRules,
                DefinitionStages.WithFirewallState,
                DefinitionStages.WithFirewallAllowAzureIps,
                DefinitionStages.WithNewTier,
                DefinitionStages.WithMaxJobCount,
                DefinitionStages.WithMaxDegreeOfParallelism,
                DefinitionStages.WithMaxDegreeOfParallelismPerJob,
                DefinitionStages.WithMinPriorityPerJob,
                DefinitionStages.WithQueryStoreRetention {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            DataLakeAnalyticsAccount create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            DataLakeAnalyticsAccount create(Context context);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The resource tags..
             *
             * @param tags The resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify storageAccounts. */
        interface WithStorageAccounts {
            /**
             * Specifies the storageAccounts property: The list of Azure Blob Storage accounts associated with this
             * account..
             *
             * @param storageAccounts The list of Azure Blob Storage accounts associated with this account.
             * @return the next definition stage.
             */
            WithCreate withStorageAccounts(List<AddStorageAccountWithAccountParameters> storageAccounts);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify computePolicies. */
        interface WithComputePolicies {
            /**
             * Specifies the computePolicies property: The list of compute policies associated with this account..
             *
             * @param computePolicies The list of compute policies associated with this account.
             * @return the next definition stage.
             */
            WithCreate withComputePolicies(List<CreateComputePolicyWithAccountParameters> computePolicies);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify firewallRules. */
        interface WithFirewallRules {
            /**
             * Specifies the firewallRules property: The list of firewall rules associated with this account..
             *
             * @param firewallRules The list of firewall rules associated with this account.
             * @return the next definition stage.
             */
            WithCreate withFirewallRules(List<CreateFirewallRuleWithAccountParameters> firewallRules);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify firewallState. */
        interface WithFirewallState {
            /**
             * Specifies the firewallState property: The current state of the IP address firewall for this account..
             *
             * @param firewallState The current state of the IP address firewall for this account.
             * @return the next definition stage.
             */
            WithCreate withFirewallState(FirewallState firewallState);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify firewallAllowAzureIps. */
        interface WithFirewallAllowAzureIps {
            /**
             * Specifies the firewallAllowAzureIps property: The current state of allowing or disallowing IPs
             * originating within Azure through the firewall. If the firewall is disabled, this is not enforced..
             *
             * @param firewallAllowAzureIps The current state of allowing or disallowing IPs originating within Azure
             *     through the firewall. If the firewall is disabled, this is not enforced.
             * @return the next definition stage.
             */
            WithCreate withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify newTier. */
        interface WithNewTier {
            /**
             * Specifies the newTier property: The commitment tier for the next month..
             *
             * @param newTier The commitment tier for the next month.
             * @return the next definition stage.
             */
            WithCreate withNewTier(TierType newTier);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify maxJobCount. */
        interface WithMaxJobCount {
            /**
             * Specifies the maxJobCount property: The maximum supported jobs running under the account at the same
             * time..
             *
             * @param maxJobCount The maximum supported jobs running under the account at the same time.
             * @return the next definition stage.
             */
            WithCreate withMaxJobCount(Integer maxJobCount);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify maxDegreeOfParallelism. */
        interface WithMaxDegreeOfParallelism {
            /**
             * Specifies the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this
             * account..
             *
             * @param maxDegreeOfParallelism The maximum supported degree of parallelism for this account.
             * @return the next definition stage.
             */
            WithCreate withMaxDegreeOfParallelism(Integer maxDegreeOfParallelism);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify maxDegreeOfParallelismPerJob. */
        interface WithMaxDegreeOfParallelismPerJob {
            /**
             * Specifies the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job
             * for this account..
             *
             * @param maxDegreeOfParallelismPerJob The maximum supported degree of parallelism per job for this account.
             * @return the next definition stage.
             */
            WithCreate withMaxDegreeOfParallelismPerJob(Integer maxDegreeOfParallelismPerJob);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify minPriorityPerJob. */
        interface WithMinPriorityPerJob {
            /**
             * Specifies the minPriorityPerJob property: The minimum supported priority per job for this account..
             *
             * @param minPriorityPerJob The minimum supported priority per job for this account.
             * @return the next definition stage.
             */
            WithCreate withMinPriorityPerJob(Integer minPriorityPerJob);
        }
        /** The stage of the DataLakeAnalyticsAccount definition allowing to specify queryStoreRetention. */
        interface WithQueryStoreRetention {
            /**
             * Specifies the queryStoreRetention property: The number of days that job metadata is retained..
             *
             * @param queryStoreRetention The number of days that job metadata is retained.
             * @return the next definition stage.
             */
            WithCreate withQueryStoreRetention(Integer queryStoreRetention);
        }
    }
    /**
     * Begins update for the DataLakeAnalyticsAccount resource.
     *
     * @return the stage of resource update.
     */
    DataLakeAnalyticsAccount.Update update();

    /** The template for DataLakeAnalyticsAccount update. */
    interface Update
        extends UpdateStages.WithTags,
            UpdateStages.WithDataLakeStoreAccounts,
            UpdateStages.WithStorageAccounts,
            UpdateStages.WithComputePolicies,
            UpdateStages.WithFirewallRules,
            UpdateStages.WithFirewallState,
            UpdateStages.WithFirewallAllowAzureIps,
            UpdateStages.WithNewTier,
            UpdateStages.WithMaxJobCount,
            UpdateStages.WithMaxDegreeOfParallelism,
            UpdateStages.WithMaxDegreeOfParallelismPerJob,
            UpdateStages.WithMinPriorityPerJob,
            UpdateStages.WithQueryStoreRetention {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        DataLakeAnalyticsAccount apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        DataLakeAnalyticsAccount apply(Context context);
    }
    /** The DataLakeAnalyticsAccount update stages. */
    interface UpdateStages {
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: The resource tags..
             *
             * @param tags The resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify dataLakeStoreAccounts. */
        interface WithDataLakeStoreAccounts {
            /**
             * Specifies the dataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this
             * account..
             *
             * @param dataLakeStoreAccounts The list of Data Lake Store accounts associated with this account.
             * @return the next definition stage.
             */
            Update withDataLakeStoreAccountsForUpdate(
                List<UpdateDataLakeStoreWithAccountParameters> dataLakeStoreAccounts);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify storageAccounts. */
        interface WithStorageAccounts {
            /**
             * Specifies the storageAccounts property: The list of Azure Blob storage accounts associated with this
             * account..
             *
             * @param storageAccounts The list of Azure Blob storage accounts associated with this account.
             * @return the next definition stage.
             */
            Update withStorageAccountsForUpdate(List<UpdateStorageAccountWithAccountParameters> storageAccounts);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify computePolicies. */
        interface WithComputePolicies {
            /**
             * Specifies the computePolicies property: The list of compute policies associated with this account..
             *
             * @param computePolicies The list of compute policies associated with this account.
             * @return the next definition stage.
             */
            Update withComputePoliciesForUpdate(List<UpdateComputePolicyWithAccountParameters> computePolicies);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify firewallRules. */
        interface WithFirewallRules {
            /**
             * Specifies the firewallRules property: The list of firewall rules associated with this account..
             *
             * @param firewallRules The list of firewall rules associated with this account.
             * @return the next definition stage.
             */
            Update withFirewallRulesForUpdate(List<UpdateFirewallRuleWithAccountParameters> firewallRules);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify firewallState. */
        interface WithFirewallState {
            /**
             * Specifies the firewallState property: The current state of the IP address firewall for this account.
             * Disabling the firewall does not remove existing rules, they will just be ignored until the firewall is
             * re-enabled..
             *
             * @param firewallState The current state of the IP address firewall for this account. Disabling the
             *     firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
             * @return the next definition stage.
             */
            Update withFirewallState(FirewallState firewallState);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify firewallAllowAzureIps. */
        interface WithFirewallAllowAzureIps {
            /**
             * Specifies the firewallAllowAzureIps property: The current state of allowing or disallowing IPs
             * originating within Azure through the firewall. If the firewall is disabled, this is not enforced..
             *
             * @param firewallAllowAzureIps The current state of allowing or disallowing IPs originating within Azure
             *     through the firewall. If the firewall is disabled, this is not enforced.
             * @return the next definition stage.
             */
            Update withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify newTier. */
        interface WithNewTier {
            /**
             * Specifies the newTier property: The commitment tier to use for next month..
             *
             * @param newTier The commitment tier to use for next month.
             * @return the next definition stage.
             */
            Update withNewTier(TierType newTier);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify maxJobCount. */
        interface WithMaxJobCount {
            /**
             * Specifies the maxJobCount property: The maximum supported jobs running under the account at the same
             * time..
             *
             * @param maxJobCount The maximum supported jobs running under the account at the same time.
             * @return the next definition stage.
             */
            Update withMaxJobCount(Integer maxJobCount);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify maxDegreeOfParallelism. */
        interface WithMaxDegreeOfParallelism {
            /**
             * Specifies the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this
             * account..
             *
             * @param maxDegreeOfParallelism The maximum supported degree of parallelism for this account.
             * @return the next definition stage.
             */
            Update withMaxDegreeOfParallelism(Integer maxDegreeOfParallelism);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify maxDegreeOfParallelismPerJob. */
        interface WithMaxDegreeOfParallelismPerJob {
            /**
             * Specifies the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job
             * for this account..
             *
             * @param maxDegreeOfParallelismPerJob The maximum supported degree of parallelism per job for this account.
             * @return the next definition stage.
             */
            Update withMaxDegreeOfParallelismPerJob(Integer maxDegreeOfParallelismPerJob);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify minPriorityPerJob. */
        interface WithMinPriorityPerJob {
            /**
             * Specifies the minPriorityPerJob property: The minimum supported priority per job for this account..
             *
             * @param minPriorityPerJob The minimum supported priority per job for this account.
             * @return the next definition stage.
             */
            Update withMinPriorityPerJob(Integer minPriorityPerJob);
        }
        /** The stage of the DataLakeAnalyticsAccount update allowing to specify queryStoreRetention. */
        interface WithQueryStoreRetention {
            /**
             * Specifies the queryStoreRetention property: The number of days that job metadata is retained..
             *
             * @param queryStoreRetention The number of days that job metadata is retained.
             * @return the next definition stage.
             */
            Update withQueryStoreRetention(Integer queryStoreRetention);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    DataLakeAnalyticsAccount refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    DataLakeAnalyticsAccount refresh(Context context);
}
