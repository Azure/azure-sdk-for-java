// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.annotation.JsonFlatten;
import com.azure.core.management.Resource;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.datalakeanalytics.models.DataLakeAnalyticsAccountState;
import com.azure.resourcemanager.datalakeanalytics.models.DataLakeAnalyticsAccountStatus;
import com.azure.resourcemanager.datalakeanalytics.models.DebugDataAccessLevel;
import com.azure.resourcemanager.datalakeanalytics.models.FirewallAllowAzureIpsState;
import com.azure.resourcemanager.datalakeanalytics.models.FirewallState;
import com.azure.resourcemanager.datalakeanalytics.models.HiveMetastore;
import com.azure.resourcemanager.datalakeanalytics.models.TierType;
import com.azure.resourcemanager.datalakeanalytics.models.VirtualNetworkRule;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.UUID;

/**
 * A Data Lake Analytics account object, containing all information associated with the named Data Lake Analytics
 * account.
 */
@JsonFlatten
@Fluent
public class DataLakeAnalyticsAccountInner extends Resource {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(DataLakeAnalyticsAccountInner.class);

    /*
     * The unique identifier associated with this Data Lake Analytics account.
     */
    @JsonProperty(value = "properties.accountId", access = JsonProperty.Access.WRITE_ONLY)
    private UUID accountId;

    /*
     * The provisioning status of the Data Lake Analytics account.
     */
    @JsonProperty(value = "properties.provisioningState", access = JsonProperty.Access.WRITE_ONLY)
    private DataLakeAnalyticsAccountStatus provisioningState;

    /*
     * The state of the Data Lake Analytics account.
     */
    @JsonProperty(value = "properties.state", access = JsonProperty.Access.WRITE_ONLY)
    private DataLakeAnalyticsAccountState state;

    /*
     * The account creation time.
     */
    @JsonProperty(value = "properties.creationTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime creationTime;

    /*
     * The account last modified time.
     */
    @JsonProperty(value = "properties.lastModifiedTime", access = JsonProperty.Access.WRITE_ONLY)
    private OffsetDateTime lastModifiedTime;

    /*
     * The full CName endpoint for this account.
     */
    @JsonProperty(value = "properties.endpoint", access = JsonProperty.Access.WRITE_ONLY)
    private String endpoint;

    /*
     * The default Data Lake Store account associated with this account.
     */
    @JsonProperty(value = "properties.defaultDataLakeStoreAccount", access = JsonProperty.Access.WRITE_ONLY)
    private String defaultDataLakeStoreAccount;

    /*
     * The list of Data Lake Store accounts associated with this account.
     */
    @JsonProperty(value = "properties.dataLakeStoreAccounts", access = JsonProperty.Access.WRITE_ONLY)
    private List<DataLakeStoreAccountInformationInner> dataLakeStoreAccounts;

    /*
     * The list of Data Lake Store accounts associated with this account.
     */
    @JsonProperty(value = "properties.publicDataLakeStoreAccounts")
    private List<DataLakeStoreAccountInformationInner> publicDataLakeStoreAccounts;

    /*
     * The list of Azure Blob Storage accounts associated with this account.
     */
    @JsonProperty(value = "properties.storageAccounts", access = JsonProperty.Access.WRITE_ONLY)
    private List<StorageAccountInformationInner> storageAccounts;

    /*
     * The list of compute policies associated with this account.
     */
    @JsonProperty(value = "properties.computePolicies", access = JsonProperty.Access.WRITE_ONLY)
    private List<ComputePolicyInner> computePolicies;

    /*
     * The list of hiveMetastores associated with this account.
     */
    @JsonProperty(value = "properties.hiveMetastores", access = JsonProperty.Access.WRITE_ONLY)
    private List<HiveMetastore> hiveMetastores;

    /*
     * The list of virtualNetwork rules associated with this account.
     */
    @JsonProperty(value = "properties.virtualNetworkRules", access = JsonProperty.Access.WRITE_ONLY)
    private List<VirtualNetworkRule> virtualNetworkRules;

    /*
     * The list of firewall rules associated with this account.
     */
    @JsonProperty(value = "properties.firewallRules", access = JsonProperty.Access.WRITE_ONLY)
    private List<FirewallRuleInner> firewallRules;

    /*
     * The current state of the IP address firewall for this account.
     */
    @JsonProperty(value = "properties.firewallState")
    private FirewallState firewallState;

    /*
     * The current state of allowing or disallowing IPs originating within
     * Azure through the firewall. If the firewall is disabled, this is not
     * enforced.
     */
    @JsonProperty(value = "properties.firewallAllowAzureIps")
    private FirewallAllowAzureIpsState firewallAllowAzureIps;

    /*
     * The commitment tier for the next month.
     */
    @JsonProperty(value = "properties.newTier")
    private TierType newTier;

    /*
     * The commitment tier in use for the current month.
     */
    @JsonProperty(value = "properties.currentTier", access = JsonProperty.Access.WRITE_ONLY)
    private TierType currentTier;

    /*
     * The maximum supported jobs running under the account at the same time.
     */
    @JsonProperty(value = "properties.maxJobCount")
    private Integer maxJobCount;

    /*
     * The system defined maximum supported jobs running under the account at
     * the same time, which restricts the maximum number of running jobs the
     * user can set for the account.
     */
    @JsonProperty(value = "properties.systemMaxJobCount", access = JsonProperty.Access.WRITE_ONLY)
    private Integer systemMaxJobCount;

    /*
     * The maximum supported degree of parallelism for this account.
     */
    @JsonProperty(value = "properties.maxDegreeOfParallelism")
    private Integer maxDegreeOfParallelism;

    /*
     * The system defined maximum supported degree of parallelism for this
     * account, which restricts the maximum value of parallelism the user can
     * set for the account.
     */
    @JsonProperty(value = "properties.systemMaxDegreeOfParallelism", access = JsonProperty.Access.WRITE_ONLY)
    private Integer systemMaxDegreeOfParallelism;

    /*
     * The maximum supported degree of parallelism per job for this account.
     */
    @JsonProperty(value = "properties.maxDegreeOfParallelismPerJob")
    private Integer maxDegreeOfParallelismPerJob;

    /*
     * The minimum supported priority per job for this account.
     */
    @JsonProperty(value = "properties.minPriorityPerJob", access = JsonProperty.Access.WRITE_ONLY)
    private Integer minPriorityPerJob;

    /*
     * The number of days that job metadata is retained.
     */
    @JsonProperty(value = "properties.queryStoreRetention")
    private Integer queryStoreRetention;

    /*
     * The current state of the DebugDataAccessLevel for this account.
     */
    @JsonProperty(value = "properties.debugDataAccessLevel", access = JsonProperty.Access.WRITE_ONLY)
    private DebugDataAccessLevel debugDataAccessLevel;

    /**
     * Get the accountId property: The unique identifier associated with this Data Lake Analytics account.
     *
     * @return the accountId value.
     */
    public UUID accountId() {
        return this.accountId;
    }

    /**
     * Get the provisioningState property: The provisioning status of the Data Lake Analytics account.
     *
     * @return the provisioningState value.
     */
    public DataLakeAnalyticsAccountStatus provisioningState() {
        return this.provisioningState;
    }

    /**
     * Get the state property: The state of the Data Lake Analytics account.
     *
     * @return the state value.
     */
    public DataLakeAnalyticsAccountState state() {
        return this.state;
    }

    /**
     * Get the creationTime property: The account creation time.
     *
     * @return the creationTime value.
     */
    public OffsetDateTime creationTime() {
        return this.creationTime;
    }

    /**
     * Get the lastModifiedTime property: The account last modified time.
     *
     * @return the lastModifiedTime value.
     */
    public OffsetDateTime lastModifiedTime() {
        return this.lastModifiedTime;
    }

    /**
     * Get the endpoint property: The full CName endpoint for this account.
     *
     * @return the endpoint value.
     */
    public String endpoint() {
        return this.endpoint;
    }

    /**
     * Get the defaultDataLakeStoreAccount property: The default Data Lake Store account associated with this account.
     *
     * @return the defaultDataLakeStoreAccount value.
     */
    public String defaultDataLakeStoreAccount() {
        return this.defaultDataLakeStoreAccount;
    }

    /**
     * Get the dataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     *
     * @return the dataLakeStoreAccounts value.
     */
    public List<DataLakeStoreAccountInformationInner> dataLakeStoreAccounts() {
        return this.dataLakeStoreAccounts;
    }

    /**
     * Get the publicDataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     *
     * @return the publicDataLakeStoreAccounts value.
     */
    public List<DataLakeStoreAccountInformationInner> publicDataLakeStoreAccounts() {
        return this.publicDataLakeStoreAccounts;
    }

    /**
     * Set the publicDataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     *
     * @param publicDataLakeStoreAccounts the publicDataLakeStoreAccounts value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withPublicDataLakeStoreAccounts(
        List<DataLakeStoreAccountInformationInner> publicDataLakeStoreAccounts) {
        this.publicDataLakeStoreAccounts = publicDataLakeStoreAccounts;
        return this;
    }

    /**
     * Get the storageAccounts property: The list of Azure Blob Storage accounts associated with this account.
     *
     * @return the storageAccounts value.
     */
    public List<StorageAccountInformationInner> storageAccounts() {
        return this.storageAccounts;
    }

    /**
     * Get the computePolicies property: The list of compute policies associated with this account.
     *
     * @return the computePolicies value.
     */
    public List<ComputePolicyInner> computePolicies() {
        return this.computePolicies;
    }

    /**
     * Get the hiveMetastores property: The list of hiveMetastores associated with this account.
     *
     * @return the hiveMetastores value.
     */
    public List<HiveMetastore> hiveMetastores() {
        return this.hiveMetastores;
    }

    /**
     * Get the virtualNetworkRules property: The list of virtualNetwork rules associated with this account.
     *
     * @return the virtualNetworkRules value.
     */
    public List<VirtualNetworkRule> virtualNetworkRules() {
        return this.virtualNetworkRules;
    }

    /**
     * Get the firewallRules property: The list of firewall rules associated with this account.
     *
     * @return the firewallRules value.
     */
    public List<FirewallRuleInner> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Get the firewallState property: The current state of the IP address firewall for this account.
     *
     * @return the firewallState value.
     */
    public FirewallState firewallState() {
        return this.firewallState;
    }

    /**
     * Set the firewallState property: The current state of the IP address firewall for this account.
     *
     * @param firewallState the firewallState value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withFirewallState(FirewallState firewallState) {
        this.firewallState = firewallState;
        return this;
    }

    /**
     * Get the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     *
     * @return the firewallAllowAzureIps value.
     */
    public FirewallAllowAzureIpsState firewallAllowAzureIps() {
        return this.firewallAllowAzureIps;
    }

    /**
     * Set the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     *
     * @param firewallAllowAzureIps the firewallAllowAzureIps value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps) {
        this.firewallAllowAzureIps = firewallAllowAzureIps;
        return this;
    }

    /**
     * Get the newTier property: The commitment tier for the next month.
     *
     * @return the newTier value.
     */
    public TierType newTier() {
        return this.newTier;
    }

    /**
     * Set the newTier property: The commitment tier for the next month.
     *
     * @param newTier the newTier value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withNewTier(TierType newTier) {
        this.newTier = newTier;
        return this;
    }

    /**
     * Get the currentTier property: The commitment tier in use for the current month.
     *
     * @return the currentTier value.
     */
    public TierType currentTier() {
        return this.currentTier;
    }

    /**
     * Get the maxJobCount property: The maximum supported jobs running under the account at the same time.
     *
     * @return the maxJobCount value.
     */
    public Integer maxJobCount() {
        return this.maxJobCount;
    }

    /**
     * Set the maxJobCount property: The maximum supported jobs running under the account at the same time.
     *
     * @param maxJobCount the maxJobCount value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withMaxJobCount(Integer maxJobCount) {
        this.maxJobCount = maxJobCount;
        return this;
    }

    /**
     * Get the systemMaxJobCount property: The system defined maximum supported jobs running under the account at the
     * same time, which restricts the maximum number of running jobs the user can set for the account.
     *
     * @return the systemMaxJobCount value.
     */
    public Integer systemMaxJobCount() {
        return this.systemMaxJobCount;
    }

    /**
     * Get the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this account.
     *
     * @return the maxDegreeOfParallelism value.
     */
    public Integer maxDegreeOfParallelism() {
        return this.maxDegreeOfParallelism;
    }

    /**
     * Set the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this account.
     *
     * @param maxDegreeOfParallelism the maxDegreeOfParallelism value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withMaxDegreeOfParallelism(Integer maxDegreeOfParallelism) {
        this.maxDegreeOfParallelism = maxDegreeOfParallelism;
        return this;
    }

    /**
     * Get the systemMaxDegreeOfParallelism property: The system defined maximum supported degree of parallelism for
     * this account, which restricts the maximum value of parallelism the user can set for the account.
     *
     * @return the systemMaxDegreeOfParallelism value.
     */
    public Integer systemMaxDegreeOfParallelism() {
        return this.systemMaxDegreeOfParallelism;
    }

    /**
     * Get the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job for this
     * account.
     *
     * @return the maxDegreeOfParallelismPerJob value.
     */
    public Integer maxDegreeOfParallelismPerJob() {
        return this.maxDegreeOfParallelismPerJob;
    }

    /**
     * Set the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job for this
     * account.
     *
     * @param maxDegreeOfParallelismPerJob the maxDegreeOfParallelismPerJob value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withMaxDegreeOfParallelismPerJob(Integer maxDegreeOfParallelismPerJob) {
        this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
        return this;
    }

    /**
     * Get the minPriorityPerJob property: The minimum supported priority per job for this account.
     *
     * @return the minPriorityPerJob value.
     */
    public Integer minPriorityPerJob() {
        return this.minPriorityPerJob;
    }

    /**
     * Get the queryStoreRetention property: The number of days that job metadata is retained.
     *
     * @return the queryStoreRetention value.
     */
    public Integer queryStoreRetention() {
        return this.queryStoreRetention;
    }

    /**
     * Set the queryStoreRetention property: The number of days that job metadata is retained.
     *
     * @param queryStoreRetention the queryStoreRetention value to set.
     * @return the DataLakeAnalyticsAccountInner object itself.
     */
    public DataLakeAnalyticsAccountInner withQueryStoreRetention(Integer queryStoreRetention) {
        this.queryStoreRetention = queryStoreRetention;
        return this;
    }

    /**
     * Get the debugDataAccessLevel property: The current state of the DebugDataAccessLevel for this account.
     *
     * @return the debugDataAccessLevel value.
     */
    public DebugDataAccessLevel debugDataAccessLevel() {
        return this.debugDataAccessLevel;
    }

    /** {@inheritDoc} */
    @Override
    public DataLakeAnalyticsAccountInner withLocation(String location) {
        super.withLocation(location);
        return this;
    }

    /** {@inheritDoc} */
    @Override
    public DataLakeAnalyticsAccountInner withTags(Map<String, String> tags) {
        super.withTags(tags);
        return this;
    }

    /**
     * Validates the instance.
     *
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataLakeStoreAccounts() != null) {
            dataLakeStoreAccounts().forEach(e -> e.validate());
        }
        if (publicDataLakeStoreAccounts() != null) {
            publicDataLakeStoreAccounts().forEach(e -> e.validate());
        }
        if (storageAccounts() != null) {
            storageAccounts().forEach(e -> e.validate());
        }
        if (computePolicies() != null) {
            computePolicies().forEach(e -> e.validate());
        }
        if (hiveMetastores() != null) {
            hiveMetastores().forEach(e -> e.validate());
        }
        if (virtualNetworkRules() != null) {
            virtualNetworkRules().forEach(e -> e.validate());
        }
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
    }
}
