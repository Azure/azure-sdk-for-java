// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datalakeanalytics.models.FirewallAllowAzureIpsState;
import com.azure.resourcemanager.datalakeanalytics.models.FirewallState;
import com.azure.resourcemanager.datalakeanalytics.models.TierType;
import com.azure.resourcemanager.datalakeanalytics.models.UpdateComputePolicyWithAccountParameters;
import com.azure.resourcemanager.datalakeanalytics.models.UpdateDataLakeStoreWithAccountParameters;
import com.azure.resourcemanager.datalakeanalytics.models.UpdateFirewallRuleWithAccountParameters;
import com.azure.resourcemanager.datalakeanalytics.models.UpdateStorageAccountWithAccountParameters;
import java.io.IOException;
import java.util.List;

/**
 * The properties to update that are associated with an underlying Data Lake Analytics account.
 */
@Fluent
public final class UpdateDataLakeAnalyticsAccountProperties
    implements JsonSerializable<UpdateDataLakeAnalyticsAccountProperties> {
    /*
     * The list of Data Lake Store accounts associated with this account.
     */
    private List<UpdateDataLakeStoreWithAccountParameters> dataLakeStoreAccounts;

    /*
     * The list of Azure Blob storage accounts associated with this account.
     */
    private List<UpdateStorageAccountWithAccountParameters> storageAccounts;

    /*
     * The list of compute policies associated with this account.
     */
    private List<UpdateComputePolicyWithAccountParameters> computePolicies;

    /*
     * The list of firewall rules associated with this account.
     */
    private List<UpdateFirewallRuleWithAccountParameters> firewallRules;

    /*
     * The current state of the IP address firewall for this account. Disabling the firewall does not remove existing
     * rules, they will just be ignored until the firewall is re-enabled.
     */
    private FirewallState firewallState;

    /*
     * The current state of allowing or disallowing IPs originating within Azure through the firewall. If the firewall
     * is disabled, this is not enforced.
     */
    private FirewallAllowAzureIpsState firewallAllowAzureIps;

    /*
     * The commitment tier to use for next month.
     */
    private TierType newTier;

    /*
     * The maximum supported jobs running under the account at the same time.
     */
    private Integer maxJobCount;

    /*
     * The maximum supported degree of parallelism for this account.
     */
    private Integer maxDegreeOfParallelism;

    /*
     * The maximum supported degree of parallelism per job for this account.
     */
    private Integer maxDegreeOfParallelismPerJob;

    /*
     * The minimum supported priority per job for this account.
     */
    private Integer minPriorityPerJob;

    /*
     * The number of days that job metadata is retained.
     */
    private Integer queryStoreRetention;

    /**
     * Creates an instance of UpdateDataLakeAnalyticsAccountProperties class.
     */
    public UpdateDataLakeAnalyticsAccountProperties() {
    }

    /**
     * Get the dataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     * 
     * @return the dataLakeStoreAccounts value.
     */
    public List<UpdateDataLakeStoreWithAccountParameters> dataLakeStoreAccounts() {
        return this.dataLakeStoreAccounts;
    }

    /**
     * Set the dataLakeStoreAccounts property: The list of Data Lake Store accounts associated with this account.
     * 
     * @param dataLakeStoreAccounts the dataLakeStoreAccounts value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties
        withDataLakeStoreAccounts(List<UpdateDataLakeStoreWithAccountParameters> dataLakeStoreAccounts) {
        this.dataLakeStoreAccounts = dataLakeStoreAccounts;
        return this;
    }

    /**
     * Get the storageAccounts property: The list of Azure Blob storage accounts associated with this account.
     * 
     * @return the storageAccounts value.
     */
    public List<UpdateStorageAccountWithAccountParameters> storageAccounts() {
        return this.storageAccounts;
    }

    /**
     * Set the storageAccounts property: The list of Azure Blob storage accounts associated with this account.
     * 
     * @param storageAccounts the storageAccounts value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties
        withStorageAccounts(List<UpdateStorageAccountWithAccountParameters> storageAccounts) {
        this.storageAccounts = storageAccounts;
        return this;
    }

    /**
     * Get the computePolicies property: The list of compute policies associated with this account.
     * 
     * @return the computePolicies value.
     */
    public List<UpdateComputePolicyWithAccountParameters> computePolicies() {
        return this.computePolicies;
    }

    /**
     * Set the computePolicies property: The list of compute policies associated with this account.
     * 
     * @param computePolicies the computePolicies value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties
        withComputePolicies(List<UpdateComputePolicyWithAccountParameters> computePolicies) {
        this.computePolicies = computePolicies;
        return this;
    }

    /**
     * Get the firewallRules property: The list of firewall rules associated with this account.
     * 
     * @return the firewallRules value.
     */
    public List<UpdateFirewallRuleWithAccountParameters> firewallRules() {
        return this.firewallRules;
    }

    /**
     * Set the firewallRules property: The list of firewall rules associated with this account.
     * 
     * @param firewallRules the firewallRules value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties
        withFirewallRules(List<UpdateFirewallRuleWithAccountParameters> firewallRules) {
        this.firewallRules = firewallRules;
        return this;
    }

    /**
     * Get the firewallState property: The current state of the IP address firewall for this account. Disabling the
     * firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
     * 
     * @return the firewallState value.
     */
    public FirewallState firewallState() {
        return this.firewallState;
    }

    /**
     * Set the firewallState property: The current state of the IP address firewall for this account. Disabling the
     * firewall does not remove existing rules, they will just be ignored until the firewall is re-enabled.
     * 
     * @param firewallState the firewallState value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties withFirewallState(FirewallState firewallState) {
        this.firewallState = firewallState;
        return this;
    }

    /**
     * Get the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     * 
     * @return the firewallAllowAzureIps value.
     */
    public FirewallAllowAzureIpsState firewallAllowAzureIps() {
        return this.firewallAllowAzureIps;
    }

    /**
     * Set the firewallAllowAzureIps property: The current state of allowing or disallowing IPs originating within Azure
     * through the firewall. If the firewall is disabled, this is not enforced.
     * 
     * @param firewallAllowAzureIps the firewallAllowAzureIps value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties
        withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps) {
        this.firewallAllowAzureIps = firewallAllowAzureIps;
        return this;
    }

    /**
     * Get the newTier property: The commitment tier to use for next month.
     * 
     * @return the newTier value.
     */
    public TierType newTier() {
        return this.newTier;
    }

    /**
     * Set the newTier property: The commitment tier to use for next month.
     * 
     * @param newTier the newTier value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties withNewTier(TierType newTier) {
        this.newTier = newTier;
        return this;
    }

    /**
     * Get the maxJobCount property: The maximum supported jobs running under the account at the same time.
     * 
     * @return the maxJobCount value.
     */
    public Integer maxJobCount() {
        return this.maxJobCount;
    }

    /**
     * Set the maxJobCount property: The maximum supported jobs running under the account at the same time.
     * 
     * @param maxJobCount the maxJobCount value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties withMaxJobCount(Integer maxJobCount) {
        this.maxJobCount = maxJobCount;
        return this;
    }

    /**
     * Get the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this account.
     * 
     * @return the maxDegreeOfParallelism value.
     */
    public Integer maxDegreeOfParallelism() {
        return this.maxDegreeOfParallelism;
    }

    /**
     * Set the maxDegreeOfParallelism property: The maximum supported degree of parallelism for this account.
     * 
     * @param maxDegreeOfParallelism the maxDegreeOfParallelism value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties withMaxDegreeOfParallelism(Integer maxDegreeOfParallelism) {
        this.maxDegreeOfParallelism = maxDegreeOfParallelism;
        return this;
    }

    /**
     * Get the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job for this
     * account.
     * 
     * @return the maxDegreeOfParallelismPerJob value.
     */
    public Integer maxDegreeOfParallelismPerJob() {
        return this.maxDegreeOfParallelismPerJob;
    }

    /**
     * Set the maxDegreeOfParallelismPerJob property: The maximum supported degree of parallelism per job for this
     * account.
     * 
     * @param maxDegreeOfParallelismPerJob the maxDegreeOfParallelismPerJob value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties
        withMaxDegreeOfParallelismPerJob(Integer maxDegreeOfParallelismPerJob) {
        this.maxDegreeOfParallelismPerJob = maxDegreeOfParallelismPerJob;
        return this;
    }

    /**
     * Get the minPriorityPerJob property: The minimum supported priority per job for this account.
     * 
     * @return the minPriorityPerJob value.
     */
    public Integer minPriorityPerJob() {
        return this.minPriorityPerJob;
    }

    /**
     * Set the minPriorityPerJob property: The minimum supported priority per job for this account.
     * 
     * @param minPriorityPerJob the minPriorityPerJob value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties withMinPriorityPerJob(Integer minPriorityPerJob) {
        this.minPriorityPerJob = minPriorityPerJob;
        return this;
    }

    /**
     * Get the queryStoreRetention property: The number of days that job metadata is retained.
     * 
     * @return the queryStoreRetention value.
     */
    public Integer queryStoreRetention() {
        return this.queryStoreRetention;
    }

    /**
     * Set the queryStoreRetention property: The number of days that job metadata is retained.
     * 
     * @param queryStoreRetention the queryStoreRetention value to set.
     * @return the UpdateDataLakeAnalyticsAccountProperties object itself.
     */
    public UpdateDataLakeAnalyticsAccountProperties withQueryStoreRetention(Integer queryStoreRetention) {
        this.queryStoreRetention = queryStoreRetention;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (dataLakeStoreAccounts() != null) {
            dataLakeStoreAccounts().forEach(e -> e.validate());
        }
        if (storageAccounts() != null) {
            storageAccounts().forEach(e -> e.validate());
        }
        if (computePolicies() != null) {
            computePolicies().forEach(e -> e.validate());
        }
        if (firewallRules() != null) {
            firewallRules().forEach(e -> e.validate());
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeArrayField("dataLakeStoreAccounts", this.dataLakeStoreAccounts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("storageAccounts", this.storageAccounts,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("computePolicies", this.computePolicies,
            (writer, element) -> writer.writeJson(element));
        jsonWriter.writeArrayField("firewallRules", this.firewallRules, (writer, element) -> writer.writeJson(element));
        jsonWriter.writeStringField("firewallState", this.firewallState == null ? null : this.firewallState.toString());
        jsonWriter.writeStringField("firewallAllowAzureIps",
            this.firewallAllowAzureIps == null ? null : this.firewallAllowAzureIps.toString());
        jsonWriter.writeStringField("newTier", this.newTier == null ? null : this.newTier.toString());
        jsonWriter.writeNumberField("maxJobCount", this.maxJobCount);
        jsonWriter.writeNumberField("maxDegreeOfParallelism", this.maxDegreeOfParallelism);
        jsonWriter.writeNumberField("maxDegreeOfParallelismPerJob", this.maxDegreeOfParallelismPerJob);
        jsonWriter.writeNumberField("minPriorityPerJob", this.minPriorityPerJob);
        jsonWriter.writeNumberField("queryStoreRetention", this.queryStoreRetention);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of UpdateDataLakeAnalyticsAccountProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of UpdateDataLakeAnalyticsAccountProperties if the JsonReader was pointing to an instance of
     * it, or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the UpdateDataLakeAnalyticsAccountProperties.
     */
    public static UpdateDataLakeAnalyticsAccountProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            UpdateDataLakeAnalyticsAccountProperties deserializedUpdateDataLakeAnalyticsAccountProperties
                = new UpdateDataLakeAnalyticsAccountProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("dataLakeStoreAccounts".equals(fieldName)) {
                    List<UpdateDataLakeStoreWithAccountParameters> dataLakeStoreAccounts
                        = reader.readArray(reader1 -> UpdateDataLakeStoreWithAccountParameters.fromJson(reader1));
                    deserializedUpdateDataLakeAnalyticsAccountProperties.dataLakeStoreAccounts = dataLakeStoreAccounts;
                } else if ("storageAccounts".equals(fieldName)) {
                    List<UpdateStorageAccountWithAccountParameters> storageAccounts
                        = reader.readArray(reader1 -> UpdateStorageAccountWithAccountParameters.fromJson(reader1));
                    deserializedUpdateDataLakeAnalyticsAccountProperties.storageAccounts = storageAccounts;
                } else if ("computePolicies".equals(fieldName)) {
                    List<UpdateComputePolicyWithAccountParameters> computePolicies
                        = reader.readArray(reader1 -> UpdateComputePolicyWithAccountParameters.fromJson(reader1));
                    deserializedUpdateDataLakeAnalyticsAccountProperties.computePolicies = computePolicies;
                } else if ("firewallRules".equals(fieldName)) {
                    List<UpdateFirewallRuleWithAccountParameters> firewallRules
                        = reader.readArray(reader1 -> UpdateFirewallRuleWithAccountParameters.fromJson(reader1));
                    deserializedUpdateDataLakeAnalyticsAccountProperties.firewallRules = firewallRules;
                } else if ("firewallState".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.firewallState
                        = FirewallState.fromString(reader.getString());
                } else if ("firewallAllowAzureIps".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.firewallAllowAzureIps
                        = FirewallAllowAzureIpsState.fromString(reader.getString());
                } else if ("newTier".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.newTier
                        = TierType.fromString(reader.getString());
                } else if ("maxJobCount".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.maxJobCount
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxDegreeOfParallelism".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.maxDegreeOfParallelism
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxDegreeOfParallelismPerJob".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.maxDegreeOfParallelismPerJob
                        = reader.getNullable(JsonReader::getInt);
                } else if ("minPriorityPerJob".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.minPriorityPerJob
                        = reader.getNullable(JsonReader::getInt);
                } else if ("queryStoreRetention".equals(fieldName)) {
                    deserializedUpdateDataLakeAnalyticsAccountProperties.queryStoreRetention
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedUpdateDataLakeAnalyticsAccountProperties;
        });
    }
}
