// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datalakeanalytics.models.SubscriptionState;
import java.io.IOException;
import java.util.UUID;

/**
 * Subscription-level properties and limits for Data Lake Analytics.
 */
@Immutable
public final class CapabilityInformationInner implements JsonSerializable<CapabilityInformationInner> {
    /*
     * The subscription credentials that uniquely identifies the subscription.
     */
    private UUID subscriptionId;

    /*
     * The subscription state.
     */
    private SubscriptionState state;

    /*
     * The maximum supported number of accounts under this subscription.
     */
    private Integer maxAccountCount;

    /*
     * The current number of accounts under this subscription.
     */
    private Integer accountCount;

    /*
     * The Boolean value of true or false to indicate the maintenance state.
     */
    private Boolean migrationState;

    /**
     * Creates an instance of CapabilityInformationInner class.
     */
    public CapabilityInformationInner() {
    }

    /**
     * Get the subscriptionId property: The subscription credentials that uniquely identifies the subscription.
     * 
     * @return the subscriptionId value.
     */
    public UUID subscriptionId() {
        return this.subscriptionId;
    }

    /**
     * Get the state property: The subscription state.
     * 
     * @return the state value.
     */
    public SubscriptionState state() {
        return this.state;
    }

    /**
     * Get the maxAccountCount property: The maximum supported number of accounts under this subscription.
     * 
     * @return the maxAccountCount value.
     */
    public Integer maxAccountCount() {
        return this.maxAccountCount;
    }

    /**
     * Get the accountCount property: The current number of accounts under this subscription.
     * 
     * @return the accountCount value.
     */
    public Integer accountCount() {
        return this.accountCount;
    }

    /**
     * Get the migrationState property: The Boolean value of true or false to indicate the maintenance state.
     * 
     * @return the migrationState value.
     */
    public Boolean migrationState() {
        return this.migrationState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of CapabilityInformationInner from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of CapabilityInformationInner if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the CapabilityInformationInner.
     */
    public static CapabilityInformationInner fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            CapabilityInformationInner deserializedCapabilityInformationInner = new CapabilityInformationInner();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("subscriptionId".equals(fieldName)) {
                    deserializedCapabilityInformationInner.subscriptionId
                        = reader.getNullable(nonNullReader -> UUID.fromString(nonNullReader.getString()));
                } else if ("state".equals(fieldName)) {
                    deserializedCapabilityInformationInner.state = SubscriptionState.fromString(reader.getString());
                } else if ("maxAccountCount".equals(fieldName)) {
                    deserializedCapabilityInformationInner.maxAccountCount = reader.getNullable(JsonReader::getInt);
                } else if ("accountCount".equals(fieldName)) {
                    deserializedCapabilityInformationInner.accountCount = reader.getNullable(JsonReader::getInt);
                } else if ("migrationState".equals(fieldName)) {
                    deserializedCapabilityInformationInner.migrationState = reader.getNullable(JsonReader::getBoolean);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedCapabilityInformationInner;
        });
    }
}
