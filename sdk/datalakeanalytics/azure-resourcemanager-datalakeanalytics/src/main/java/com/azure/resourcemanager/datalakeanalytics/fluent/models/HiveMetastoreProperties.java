// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.fluent.models;

import com.azure.core.annotation.Immutable;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.datalakeanalytics.models.NestedResourceProvisioningState;
import java.io.IOException;

/**
 * The HiveMetastore properties.
 */
@Immutable
public final class HiveMetastoreProperties implements JsonSerializable<HiveMetastoreProperties> {
    /*
     * The serverUri for the Hive MetaStore
     */
    private String serverUri;

    /*
     * The databaseName for the Hive MetaStore
     */
    private String databaseName;

    /*
     * The runtimeVersion for the Hive MetaStore
     */
    private String runtimeVersion;

    /*
     * The userName for the Hive MetaStore
     */
    private String username;

    /*
     * The password for the Hive MetaStore
     */
    private String password;

    /*
     * The current state of the NestedResource
     */
    private NestedResourceProvisioningState nestedResourceProvisioningState;

    /**
     * Creates an instance of HiveMetastoreProperties class.
     */
    public HiveMetastoreProperties() {
    }

    /**
     * Get the serverUri property: The serverUri for the Hive MetaStore.
     * 
     * @return the serverUri value.
     */
    public String serverUri() {
        return this.serverUri;
    }

    /**
     * Get the databaseName property: The databaseName for the Hive MetaStore.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Get the runtimeVersion property: The runtimeVersion for the Hive MetaStore.
     * 
     * @return the runtimeVersion value.
     */
    public String runtimeVersion() {
        return this.runtimeVersion;
    }

    /**
     * Get the username property: The userName for the Hive MetaStore.
     * 
     * @return the username value.
     */
    public String username() {
        return this.username;
    }

    /**
     * Get the password property: The password for the Hive MetaStore.
     * 
     * @return the password value.
     */
    public String password() {
        return this.password;
    }

    /**
     * Get the nestedResourceProvisioningState property: The current state of the NestedResource.
     * 
     * @return the nestedResourceProvisioningState value.
     */
    public NestedResourceProvisioningState nestedResourceProvisioningState() {
        return this.nestedResourceProvisioningState;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of HiveMetastoreProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of HiveMetastoreProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the HiveMetastoreProperties.
     */
    public static HiveMetastoreProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            HiveMetastoreProperties deserializedHiveMetastoreProperties = new HiveMetastoreProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("serverUri".equals(fieldName)) {
                    deserializedHiveMetastoreProperties.serverUri = reader.getString();
                } else if ("databaseName".equals(fieldName)) {
                    deserializedHiveMetastoreProperties.databaseName = reader.getString();
                } else if ("runtimeVersion".equals(fieldName)) {
                    deserializedHiveMetastoreProperties.runtimeVersion = reader.getString();
                } else if ("userName".equals(fieldName)) {
                    deserializedHiveMetastoreProperties.username = reader.getString();
                } else if ("password".equals(fieldName)) {
                    deserializedHiveMetastoreProperties.password = reader.getString();
                } else if ("nestedResourceProvisioningState".equals(fieldName)) {
                    deserializedHiveMetastoreProperties.nestedResourceProvisioningState
                        = NestedResourceProvisioningState.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedHiveMetastoreProperties;
        });
    }
}
