// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The Data Lake Store account properties to use when adding a new Data Lake Store account.
 */
@Fluent
public final class AddDataLakeStoreProperties implements JsonSerializable<AddDataLakeStoreProperties> {
    /*
     * The optional suffix for the Data Lake Store account.
     */
    private String suffix;

    /**
     * Creates an instance of AddDataLakeStoreProperties class.
     */
    public AddDataLakeStoreProperties() {
    }

    /**
     * Get the suffix property: The optional suffix for the Data Lake Store account.
     * 
     * @return the suffix value.
     */
    public String suffix() {
        return this.suffix;
    }

    /**
     * Set the suffix property: The optional suffix for the Data Lake Store account.
     * 
     * @param suffix the suffix value to set.
     * @return the AddDataLakeStoreProperties object itself.
     */
    public AddDataLakeStoreProperties withSuffix(String suffix) {
        this.suffix = suffix;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("suffix", this.suffix);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of AddDataLakeStoreProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of AddDataLakeStoreProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the AddDataLakeStoreProperties.
     */
    public static AddDataLakeStoreProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            AddDataLakeStoreProperties deserializedAddDataLakeStoreProperties = new AddDataLakeStoreProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("suffix".equals(fieldName)) {
                    deserializedAddDataLakeStoreProperties.suffix = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedAddDataLakeStoreProperties;
        });
    }
}
