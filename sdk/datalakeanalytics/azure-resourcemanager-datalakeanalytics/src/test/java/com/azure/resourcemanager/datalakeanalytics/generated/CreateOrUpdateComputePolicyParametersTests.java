// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datalakeanalytics.models.AadObjectType;
import com.azure.resourcemanager.datalakeanalytics.models.CreateOrUpdateComputePolicyParameters;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class CreateOrUpdateComputePolicyParametersTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CreateOrUpdateComputePolicyParameters model = BinaryData.fromString(
            "{\"properties\":{\"objectId\":\"a5294833-3657-46cb-a0f8-dd860c35e26a\",\"objectType\":\"User\",\"maxDegreeOfParallelismPerJob\":357365351,\"minPriorityPerJob\":1487439384}}")
            .toObject(CreateOrUpdateComputePolicyParameters.class);
        Assertions.assertEquals(UUID.fromString("a5294833-3657-46cb-a0f8-dd860c35e26a"), model.objectId());
        Assertions.assertEquals(AadObjectType.USER, model.objectType());
        Assertions.assertEquals(357365351, model.maxDegreeOfParallelismPerJob());
        Assertions.assertEquals(1487439384, model.minPriorityPerJob());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CreateOrUpdateComputePolicyParameters model = new CreateOrUpdateComputePolicyParameters()
            .withObjectId(UUID.fromString("a5294833-3657-46cb-a0f8-dd860c35e26a"))
            .withObjectType(AadObjectType.USER)
            .withMaxDegreeOfParallelismPerJob(357365351)
            .withMinPriorityPerJob(1487439384);
        model = BinaryData.fromObject(model).toObject(CreateOrUpdateComputePolicyParameters.class);
        Assertions.assertEquals(UUID.fromString("a5294833-3657-46cb-a0f8-dd860c35e26a"), model.objectId());
        Assertions.assertEquals(AadObjectType.USER, model.objectType());
        Assertions.assertEquals(357365351, model.maxDegreeOfParallelismPerJob());
        Assertions.assertEquals(1487439384, model.minPriorityPerJob());
    }
}
