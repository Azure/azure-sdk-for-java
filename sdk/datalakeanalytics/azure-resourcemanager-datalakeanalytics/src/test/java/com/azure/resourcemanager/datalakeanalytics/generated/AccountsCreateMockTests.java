// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager;
import com.azure.resourcemanager.datalakeanalytics.models.DataLakeAnalyticsAccount;
import com.azure.resourcemanager.datalakeanalytics.models.FirewallAllowAzureIpsState;
import com.azure.resourcemanager.datalakeanalytics.models.FirewallState;
import com.azure.resourcemanager.datalakeanalytics.models.TierType;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class AccountsCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"properties\":{\"defaultDataLakeStoreAccount\":\"jxgciqibrh\",\"dataLakeStoreAccounts\":[],\"publicDataLakeStoreAccounts\":[],\"storageAccounts\":[],\"computePolicies\":[],\"hiveMetastores\":[],\"virtualNetworkRules\":[],\"firewallRules\":[],\"firewallState\":\"Enabled\",\"firewallAllowAzureIps\":\"Disabled\",\"newTier\":\"Commitment_10000AUHours\",\"currentTier\":\"Commitment_5000AUHours\",\"maxJobCount\":1263635295,\"maxActiveJobCountPerUser\":651919856,\"maxQueuedJobCountPerUser\":1671003126,\"maxJobRunningTimeInMin\":1796967394,\"systemMaxJobCount\":569809127,\"maxDegreeOfParallelism\":1802230973,\"systemMaxDegreeOfParallelism\":1386295796,\"maxDegreeOfParallelismPerJob\":1271153776,\"minPriorityPerJob\":934965763,\"queryStoreRetention\":1338367817,\"debugDataAccessLevel\":\"All\",\"accountId\":\"6eff1dec-d84c-470d-871d-5c8af2ddb769\",\"provisioningState\":\"Succeeded\",\"state\":\"Suspended\",\"creationTime\":\"2021-06-16T10:32:31Z\",\"lastModifiedTime\":\"2021-02-24T02:11:36Z\",\"endpoint\":\"wo\"},\"location\":\"nwashrtd\",\"tags\":{\"kulpiujwaasi\":\"nqxwbp\",\"qlpqwcciuq\":\"qiiobyuqer\",\"tkuwhhmhykojo\":\"bdbutauvf\",\"lpichk\":\"afnn\"},\"id\":\"ymkcdyhb\",\"name\":\"kkpwdreqnovvq\",\"type\":\"ovljxywsu\"}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        DataLakeAnalyticsManager manager =
            DataLakeAnalyticsManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        DataLakeAnalyticsAccount response =
            manager
                .accounts()
                .define("ouyftaakc")
                .withRegion("wiyzvqtmnubexkp")
                .withExistingResourceGroup("sbpfvmwyhr")
                .withDefaultDataLakeStoreAccount("qvmkcxo")
                .withDataLakeStoreAccounts(Arrays.asList())
                .withTags(mapOf("mquxvypo", "mond", "smocmbq", "gkopkwhojvpajqgx"))
                .withStorageAccounts(Arrays.asList())
                .withComputePolicies(Arrays.asList())
                .withFirewallRules(Arrays.asList())
                .withFirewallState(FirewallState.ENABLED)
                .withFirewallAllowAzureIps(FirewallAllowAzureIpsState.ENABLED)
                .withNewTier(TierType.COMMITMENT_100AUHOURS)
                .withMaxJobCount(402779247)
                .withMaxDegreeOfParallelism(868372706)
                .withMaxDegreeOfParallelismPerJob(1454263457)
                .withMinPriorityPerJob(373907539)
                .withQueryStoreRetention(1344502344)
                .create();

        Assertions.assertEquals("nwashrtd", response.location());
        Assertions.assertEquals("nqxwbp", response.tags().get("kulpiujwaasi"));
    }

    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
