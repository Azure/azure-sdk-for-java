// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datalakeanalytics.fluent.models.CreateOrUpdateComputePolicyProperties;
import com.azure.resourcemanager.datalakeanalytics.models.AadObjectType;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;

public final class CreateOrUpdateComputePolicyPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        CreateOrUpdateComputePolicyProperties model = BinaryData.fromString(
            "{\"objectId\":\"3b9ccca9-8c65-46f0-bd1c-c5d41fbc7ce3\",\"objectType\":\"ServicePrincipal\",\"maxDegreeOfParallelismPerJob\":720964194,\"minPriorityPerJob\":1574404612}")
            .toObject(CreateOrUpdateComputePolicyProperties.class);
        Assertions.assertEquals(UUID.fromString("3b9ccca9-8c65-46f0-bd1c-c5d41fbc7ce3"), model.objectId());
        Assertions.assertEquals(AadObjectType.SERVICE_PRINCIPAL, model.objectType());
        Assertions.assertEquals(720964194, model.maxDegreeOfParallelismPerJob());
        Assertions.assertEquals(1574404612, model.minPriorityPerJob());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        CreateOrUpdateComputePolicyProperties model = new CreateOrUpdateComputePolicyProperties()
            .withObjectId(UUID.fromString("3b9ccca9-8c65-46f0-bd1c-c5d41fbc7ce3"))
            .withObjectType(AadObjectType.SERVICE_PRINCIPAL)
            .withMaxDegreeOfParallelismPerJob(720964194)
            .withMinPriorityPerJob(1574404612);
        model = BinaryData.fromObject(model).toObject(CreateOrUpdateComputePolicyProperties.class);
        Assertions.assertEquals(UUID.fromString("3b9ccca9-8c65-46f0-bd1c-c5d41fbc7ce3"), model.objectId());
        Assertions.assertEquals(AadObjectType.SERVICE_PRINCIPAL, model.objectType());
        Assertions.assertEquals(720964194, model.maxDegreeOfParallelismPerJob());
        Assertions.assertEquals(1574404612, model.minPriorityPerJob());
    }
}
