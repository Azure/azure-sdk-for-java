// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.datalakeanalytics.DataLakeAnalyticsManager;
import com.azure.resourcemanager.datalakeanalytics.models.AadObjectType;
import com.azure.resourcemanager.datalakeanalytics.models.ComputePolicy;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ComputePoliciesCreateOrUpdateWithResponseMockTests {
    @Test
    public void testCreateOrUpdateWithResponse() throws Exception {
        String responseStr
            = "{\"properties\":{\"objectId\":\"cd7cdd38-7565-443e-9c33-4f9f976bb3b2\",\"objectType\":\"User\",\"maxDegreeOfParallelismPerJob\":1236978734,\"minPriorityPerJob\":2111682042},\"name\":\"f\",\"type\":\"eyvpnqicvinvkj\",\"id\":\"dxrbuukzcle\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        DataLakeAnalyticsManager manager = DataLakeAnalyticsManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        ComputePolicy response = manager.computePolicies()
            .define("sjervti")
            .withExistingAccount("ggkfpagaowpul", "qblylsyxkqj")
            .withObjectId(UUID.fromString("1ecb9b59-4670-4d6f-a33e-da2c79814590"))
            .withObjectType(AadObjectType.GROUP)
            .withMaxDegreeOfParallelismPerJob(1353667842)
            .withMinPriorityPerJob(424844999)
            .create();

        Assertions.assertEquals("dxrbuukzcle", response.id());
    }
}
