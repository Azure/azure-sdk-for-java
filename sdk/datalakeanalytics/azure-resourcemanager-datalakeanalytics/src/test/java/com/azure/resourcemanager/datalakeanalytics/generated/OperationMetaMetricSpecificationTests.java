// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.datalakeanalytics.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.datalakeanalytics.models.OperationMetaMetricAvailabilitiesSpecification;
import com.azure.resourcemanager.datalakeanalytics.models.OperationMetaMetricSpecification;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class OperationMetaMetricSpecificationTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        OperationMetaMetricSpecification model = BinaryData.fromString(
            "{\"name\":\"gbkdmoizpos\",\"displayDescription\":\"grcfb\",\"displayName\":\"rmfqjhhkxbpvj\",\"unit\":\"jhxxjyn\",\"aggregationType\":\"divkrt\",\"availabilities\":[{\"timeGrain\":\"qzvszjf\",\"blobDuration\":\"vjfdx\"}]}")
            .toObject(OperationMetaMetricSpecification.class);
        Assertions.assertEquals("gbkdmoizpos", model.name());
        Assertions.assertEquals("grcfb", model.displayDescription());
        Assertions.assertEquals("rmfqjhhkxbpvj", model.displayName());
        Assertions.assertEquals("jhxxjyn", model.unit());
        Assertions.assertEquals("divkrt", model.aggregationType());
        Assertions.assertEquals("qzvszjf", model.availabilities().get(0).timeGrain());
        Assertions.assertEquals("vjfdx", model.availabilities().get(0).blobDuration());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        OperationMetaMetricSpecification model = new OperationMetaMetricSpecification().withName("gbkdmoizpos")
            .withDisplayDescription("grcfb")
            .withDisplayName("rmfqjhhkxbpvj")
            .withUnit("jhxxjyn")
            .withAggregationType("divkrt")
            .withAvailabilities(
                Arrays.asList(new OperationMetaMetricAvailabilitiesSpecification().withTimeGrain("qzvszjf")
                    .withBlobDuration("vjfdx")));
        model = BinaryData.fromObject(model).toObject(OperationMetaMetricSpecification.class);
        Assertions.assertEquals("gbkdmoizpos", model.name());
        Assertions.assertEquals("grcfb", model.displayDescription());
        Assertions.assertEquals("rmfqjhhkxbpvj", model.displayName());
        Assertions.assertEquals("jhxxjyn", model.unit());
        Assertions.assertEquals("divkrt", model.aggregationType());
        Assertions.assertEquals("qzvszjf", model.availabilities().get(0).timeGrain());
        Assertions.assertEquals("vjfdx", model.availabilities().get(0).blobDuration());
    }
}
