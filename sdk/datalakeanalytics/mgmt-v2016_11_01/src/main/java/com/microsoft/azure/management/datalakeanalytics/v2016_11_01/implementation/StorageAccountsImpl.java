/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 *
 */

package com.microsoft.azure.management.datalakeanalytics.v2016_11_01.implementation;

import com.microsoft.azure.arm.model.implementation.WrapperImpl;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.StorageAccounts;
import rx.Completable;
import rx.Observable;
import rx.functions.Func1;
import com.microsoft.azure.Page;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.StorageAccountInformation;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.AddStorageAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.StorageContainer;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.SasTokenInformation;

class StorageAccountsImpl extends WrapperImpl<StorageAccountsInner> implements StorageAccounts {
    private final DataLakeAnalyticsManager manager;

    StorageAccountsImpl(DataLakeAnalyticsManager manager) {
        super(manager.inner().storageAccounts());
        this.manager = manager;
    }

    public DataLakeAnalyticsManager manager() {
        return this.manager;
    }

    private StorageAccountInformationImpl wrapModel(StorageAccountInformationInner inner) {
        return  new StorageAccountInformationImpl(inner, manager());
    }

    @Override
    public Completable updateAsync(String resourceGroupName, String accountName, String storageAccountName) {
        StorageAccountsInner client = this.inner();
        return client.updateAsync(resourceGroupName, accountName, storageAccountName).toCompletable();
    }

    @Override
    public Observable<StorageAccountInformation> listByAccountAsync(final String resourceGroupName, final String accountName) {
        StorageAccountsInner client = this.inner();
        return client.listByAccountAsync(resourceGroupName, accountName)
        .flatMapIterable(new Func1<Page<StorageAccountInformationInner>, Iterable<StorageAccountInformationInner>>() {
            @Override
            public Iterable<StorageAccountInformationInner> call(Page<StorageAccountInformationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StorageAccountInformationInner, StorageAccountInformation>() {
            @Override
            public StorageAccountInformation call(StorageAccountInformationInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public Observable<StorageAccountInformation> getAsync(String resourceGroupName, String accountName, String storageAccountName) {
        StorageAccountsInner client = this.inner();
        return client.getAsync(resourceGroupName, accountName, storageAccountName)
        .map(new Func1<StorageAccountInformationInner, StorageAccountInformation>() {
            @Override
            public StorageAccountInformation call(StorageAccountInformationInner inner) {
                return wrapModel(inner);
            }
       });
    }

    @Override
    public Completable deleteAsync(String resourceGroupName, String accountName, String storageAccountName) {
        StorageAccountsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, accountName, storageAccountName).toCompletable();
    }

    private StorageContainerImpl wrapStorageContainerModel(StorageContainerInner inner) {
        return  new StorageContainerImpl(inner, manager());
    }

    private Observable<StorageContainerInner> getStorageContainerInnerUsingStorageAccountsInnerAsync(String id) {
        String resourceGroupName = IdParsingUtils.getValueFromIdByName(id, "resourceGroups");
        String accountName = IdParsingUtils.getValueFromIdByName(id, "accounts");
        String storageAccountName = IdParsingUtils.getValueFromIdByName(id, "storageAccounts");
        String containerName = IdParsingUtils.getValueFromIdByName(id, "containers");
        StorageAccountsInner client = this.inner();
        return client.getStorageContainerAsync(resourceGroupName, accountName, storageAccountName, containerName);
    }

    @Override
    public Completable addAsync(String resourceGroupName, String accountName, String storageAccountName, AddStorageAccountParameters parameters) {
        StorageAccountsInner client = this.inner();
        return client.addAsync(resourceGroupName, accountName, storageAccountName, parameters).toCompletable();
    }

    @Override
    public Observable<StorageContainer> getStorageContainerAsync(String resourceGroupName, String accountName, String storageAccountName, String containerName) {
        StorageAccountsInner client = this.inner();
        return client.getStorageContainerAsync(resourceGroupName, accountName, storageAccountName, containerName)
        .map(new Func1<StorageContainerInner, StorageContainer>() {
            @Override
            public StorageContainer call(StorageContainerInner inner) {
                return wrapStorageContainerModel(inner);
            }
       });
    }

    @Override
    public Observable<StorageContainer> listStorageContainersAsync(final String resourceGroupName, final String accountName, final String storageAccountName) {
        StorageAccountsInner client = this.inner();
        return client.listStorageContainersAsync(resourceGroupName, accountName, storageAccountName)
        .flatMapIterable(new Func1<Page<StorageContainerInner>, Iterable<StorageContainerInner>>() {
            @Override
            public Iterable<StorageContainerInner> call(Page<StorageContainerInner> page) {
                return page.items();
            }
        })
        .map(new Func1<StorageContainerInner, StorageContainer>() {
            @Override
            public StorageContainer call(StorageContainerInner inner) {
                return wrapStorageContainerModel(inner);
            }
        });
    }

    @Override
    public Observable<SasTokenInformation> listSasTokensAsync(final String resourceGroupName, final String accountName, final String storageAccountName, final String containerName) {
        StorageAccountsInner client = this.inner();
        return client.listSasTokensAsync(resourceGroupName, accountName, storageAccountName, containerName)
        .flatMapIterable(new Func1<Page<SasTokenInformationInner>, Iterable<SasTokenInformationInner>>() {
            @Override
            public Iterable<SasTokenInformationInner> call(Page<SasTokenInformationInner> page) {
                return page.items();
            }
        })
        .map(new Func1<SasTokenInformationInner, SasTokenInformation>() {
            @Override
            public SasTokenInformation call(SasTokenInformationInner inner) {
                return new SasTokenInformationImpl(inner, manager());
            }
        });
    }

}
