/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.datalakeanalytics.v2016_11_01.implementation;

import com.microsoft.azure.arm.resources.models.implementation.GroupableResourceCoreImpl;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.DataLakeAnalyticsAccount;
import rx.Observable;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.UpdateDataLakeAnalyticsAccountParameters;
import java.util.List;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.CreateDataLakeAnalyticsAccountParameters;
import java.util.UUID;
import java.util.ArrayList;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.ComputePolicy;
import org.joda.time.DateTime;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.TierType;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.DataLakeStoreAccountInformation;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.FirewallAllowAzureIpsState;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.FirewallRule;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.FirewallState;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.DataLakeAnalyticsAccountStatus;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.DataLakeAnalyticsAccountState;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.StorageAccountInformation;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.AddDataLakeStoreWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.CreateComputePolicyWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.CreateFirewallRuleWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.AddStorageAccountWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.UpdateComputePolicyWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.UpdateDataLakeStoreWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.UpdateFirewallRuleWithAccountParameters;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.UpdateStorageAccountWithAccountParameters;
import rx.functions.Func1;

class DataLakeAnalyticsAccountImpl extends GroupableResourceCoreImpl<DataLakeAnalyticsAccount, DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccountImpl, DataLakeAnalyticsManager> implements DataLakeAnalyticsAccount, DataLakeAnalyticsAccount.Definition, DataLakeAnalyticsAccount.Update {
    private CreateDataLakeAnalyticsAccountParameters createParameter;
    private UpdateDataLakeAnalyticsAccountParameters updateParameter;
    DataLakeAnalyticsAccountImpl(String name, DataLakeAnalyticsAccountInner inner, DataLakeAnalyticsManager manager) {
        super(name, inner, manager);
        this.createParameter = new CreateDataLakeAnalyticsAccountParameters();
        this.updateParameter = new UpdateDataLakeAnalyticsAccountParameters();
    }

    @Override
    public Observable<DataLakeAnalyticsAccount> createResourceAsync() {
        AccountsInner client = this.manager().inner().accounts();
        this.createParameter.withLocation(inner().location());
        this.createParameter.withTags(inner().getTags());
        return client.createAsync(this.resourceGroupName(), this.name(), this.createParameter)
            .map(new Func1<DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccountInner>() {
               @Override
               public DataLakeAnalyticsAccountInner call(DataLakeAnalyticsAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    public Observable<DataLakeAnalyticsAccount> updateResourceAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.updateAsync(this.resourceGroupName(), this.name(), this.updateParameter)
            .map(new Func1<DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccountInner>() {
               @Override
               public DataLakeAnalyticsAccountInner call(DataLakeAnalyticsAccountInner resource) {
                   resetCreateUpdateParameters();
                   return resource;
               }
            })
            .map(innerToFluentMap(this));
    }

    @Override
    protected Observable<DataLakeAnalyticsAccountInner> getInnerAsync() {
        AccountsInner client = this.manager().inner().accounts();
        return client.getByResourceGroupAsync(this.resourceGroupName(), this.name());
    }

    @Override
    public boolean isInCreateMode() {
        return this.inner().id() == null;
    }

    private void resetCreateUpdateParameters() {
        this.createParameter = new CreateDataLakeAnalyticsAccountParameters();
        this.updateParameter = new UpdateDataLakeAnalyticsAccountParameters();
    }

    @Override
    public UUID accountId() {
        return this.inner().accountId();
    }

    @Override
    public List<ComputePolicy> computePolicies() {
        List<ComputePolicy> lst = new ArrayList<ComputePolicy>();
        if (this.inner().computePolicies() != null) {
            for (ComputePolicyInner inner : this.inner().computePolicies()) {
                lst.add( new ComputePolicyImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public DateTime creationTime() {
        return this.inner().creationTime();
    }

    @Override
    public TierType currentTier() {
        return this.inner().currentTier();
    }

    @Override
    public List<DataLakeStoreAccountInformation> dataLakeStoreAccounts() {
        List<DataLakeStoreAccountInformation> lst = new ArrayList<DataLakeStoreAccountInformation>();
        if (this.inner().dataLakeStoreAccounts() != null) {
            for (DataLakeStoreAccountInformationInner inner : this.inner().dataLakeStoreAccounts()) {
                lst.add( new DataLakeStoreAccountInformationImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public String defaultDataLakeStoreAccount() {
        return this.inner().defaultDataLakeStoreAccount();
    }

    @Override
    public String endpoint() {
        return this.inner().endpoint();
    }

    @Override
    public FirewallAllowAzureIpsState firewallAllowAzureIps() {
        return this.inner().firewallAllowAzureIps();
    }

    @Override
    public List<FirewallRule> firewallRules() {
        List<FirewallRule> lst = new ArrayList<FirewallRule>();
        if (this.inner().firewallRules() != null) {
            for (FirewallRuleInner inner : this.inner().firewallRules()) {
                lst.add( new FirewallRuleImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public FirewallState firewallState() {
        return this.inner().firewallState();
    }

    @Override
    public DateTime lastModifiedTime() {
        return this.inner().lastModifiedTime();
    }

    @Override
    public Integer maxDegreeOfParallelism() {
        return this.inner().maxDegreeOfParallelism();
    }

    @Override
    public Integer maxDegreeOfParallelismPerJob() {
        return this.inner().maxDegreeOfParallelismPerJob();
    }

    @Override
    public Integer maxJobCount() {
        return this.inner().maxJobCount();
    }

    @Override
    public Integer minPriorityPerJob() {
        return this.inner().minPriorityPerJob();
    }

    @Override
    public TierType newTier() {
        return this.inner().newTier();
    }

    @Override
    public DataLakeAnalyticsAccountStatus provisioningState() {
        return this.inner().provisioningState();
    }

    @Override
    public Integer queryStoreRetention() {
        return this.inner().queryStoreRetention();
    }

    @Override
    public DataLakeAnalyticsAccountState state() {
        return this.inner().state();
    }

    @Override
    public List<StorageAccountInformation> storageAccounts() {
        List<StorageAccountInformation> lst = new ArrayList<StorageAccountInformation>();
        if (this.inner().storageAccounts() != null) {
            for (StorageAccountInformationInner inner : this.inner().storageAccounts()) {
                lst.add( new StorageAccountInformationImpl(inner, manager()));
            }
        }
        return lst;
    }

    @Override
    public Integer systemMaxDegreeOfParallelism() {
        return this.inner().systemMaxDegreeOfParallelism();
    }

    @Override
    public Integer systemMaxJobCount() {
        return this.inner().systemMaxJobCount();
    }

    @Override
    public DataLakeAnalyticsAccountImpl withDataLakeStoreAccountsForCreate(List<AddDataLakeStoreWithAccountParameters> dataLakeStoreAccounts) {
        this.createParameter.withDataLakeStoreAccounts(dataLakeStoreAccounts);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withDefaultDataLakeStoreAccount(String defaultDataLakeStoreAccount) {
        this.createParameter.withDefaultDataLakeStoreAccount(defaultDataLakeStoreAccount);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withComputePoliciesForCreate(List<CreateComputePolicyWithAccountParameters> computePolicies) {
        this.createParameter.withComputePolicies(computePolicies);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withFirewallRulesForCreate(List<CreateFirewallRuleWithAccountParameters> firewallRules) {
        this.createParameter.withFirewallRules(firewallRules);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withStorageAccountsForCreate(List<AddStorageAccountWithAccountParameters> storageAccounts) {
        this.createParameter.withStorageAccounts(storageAccounts);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withComputePoliciesForUpdate(List<UpdateComputePolicyWithAccountParameters> computePolicies) {
        this.updateParameter.withComputePolicies(computePolicies);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withDataLakeStoreAccountsForUpdate(List<UpdateDataLakeStoreWithAccountParameters> dataLakeStoreAccounts) {
        this.updateParameter.withDataLakeStoreAccounts(dataLakeStoreAccounts);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withFirewallRulesForUpdate(List<UpdateFirewallRuleWithAccountParameters> firewallRules) {
        this.updateParameter.withFirewallRules(firewallRules);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withStorageAccountsForUpdate(List<UpdateStorageAccountWithAccountParameters> storageAccounts) {
        this.updateParameter.withStorageAccounts(storageAccounts);
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withFirewallAllowAzureIps(FirewallAllowAzureIpsState firewallAllowAzureIps) {
        if (isInCreateMode()) {
            this.createParameter.withFirewallAllowAzureIps(firewallAllowAzureIps);
        } else {
            this.updateParameter.withFirewallAllowAzureIps(firewallAllowAzureIps);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withFirewallState(FirewallState firewallState) {
        if (isInCreateMode()) {
            this.createParameter.withFirewallState(firewallState);
        } else {
            this.updateParameter.withFirewallState(firewallState);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withMaxDegreeOfParallelism(Integer maxDegreeOfParallelism) {
        if (isInCreateMode()) {
            this.createParameter.withMaxDegreeOfParallelism(maxDegreeOfParallelism);
        } else {
            this.updateParameter.withMaxDegreeOfParallelism(maxDegreeOfParallelism);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withMaxDegreeOfParallelismPerJob(Integer maxDegreeOfParallelismPerJob) {
        if (isInCreateMode()) {
            this.createParameter.withMaxDegreeOfParallelismPerJob(maxDegreeOfParallelismPerJob);
        } else {
            this.updateParameter.withMaxDegreeOfParallelismPerJob(maxDegreeOfParallelismPerJob);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withMaxJobCount(Integer maxJobCount) {
        if (isInCreateMode()) {
            this.createParameter.withMaxJobCount(maxJobCount);
        } else {
            this.updateParameter.withMaxJobCount(maxJobCount);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withMinPriorityPerJob(Integer minPriorityPerJob) {
        if (isInCreateMode()) {
            this.createParameter.withMinPriorityPerJob(minPriorityPerJob);
        } else {
            this.updateParameter.withMinPriorityPerJob(minPriorityPerJob);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withNewTier(TierType newTier) {
        if (isInCreateMode()) {
            this.createParameter.withNewTier(newTier);
        } else {
            this.updateParameter.withNewTier(newTier);
        }
        return this;
    }

    @Override
    public DataLakeAnalyticsAccountImpl withQueryStoreRetention(Integer queryStoreRetention) {
        if (isInCreateMode()) {
            this.createParameter.withQueryStoreRetention(queryStoreRetention);
        } else {
            this.updateParameter.withQueryStoreRetention(queryStoreRetention);
        }
        return this;
    }

}
