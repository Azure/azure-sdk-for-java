/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * def
 */

package com.microsoft.azure.management.datalakeanalytics.v2016_11_01.implementation;

import com.microsoft.azure.arm.resources.collection.implementation.GroupableResourcesCoreImpl;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.Accounts;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.DataLakeAnalyticsAccount;
import rx.Observable;
import rx.Completable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import com.microsoft.azure.arm.resources.ResourceUtilsCore;
import com.microsoft.azure.arm.utils.RXMapper;
import rx.functions.Func1;
import com.microsoft.azure.PagedList;
import com.microsoft.azure.Page;
import com.microsoft.azure.arm.utils.PagedListConverter;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.NameAvailabilityInformation;
import com.microsoft.azure.management.datalakeanalytics.v2016_11_01.CheckNameAvailabilityParameters;

class AccountsImpl extends GroupableResourcesCoreImpl<DataLakeAnalyticsAccount, DataLakeAnalyticsAccountImpl, DataLakeAnalyticsAccountInner, AccountsInner, DataLakeAnalyticsManager>  implements Accounts {
    protected AccountsImpl(DataLakeAnalyticsManager manager) {
        super(manager.inner().accounts(), manager);
    }

    @Override
    protected Observable<DataLakeAnalyticsAccountInner> getInnerAsync(String resourceGroupName, String name) {
        AccountsInner client = this.inner();
        return client.getByResourceGroupAsync(resourceGroupName, name);
    }

    @Override
    protected Completable deleteInnerAsync(String resourceGroupName, String name) {
        AccountsInner client = this.inner();
        return client.deleteAsync(resourceGroupName, name).toCompletable();
    }

    @Override
    public Observable<String> deleteByIdsAsync(Collection<String> ids) {
        if (ids == null || ids.isEmpty()) {
            return Observable.empty();
        }
        Collection<Observable<String>> observables = new ArrayList<>();
        for (String id : ids) {
            final String resourceGroupName = ResourceUtilsCore.groupFromResourceId(id);
            final String name = ResourceUtilsCore.nameFromResourceId(id);
            Observable<String> o = RXMapper.map(this.inner().deleteAsync(resourceGroupName, name), id);
            observables.add(o);
        }
        return Observable.mergeDelayError(observables);
    }

    @Override
    public Observable<String> deleteByIdsAsync(String...ids) {
        return this.deleteByIdsAsync(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public void deleteByIds(Collection<String> ids) {
        if (ids != null && !ids.isEmpty()) {
            this.deleteByIdsAsync(ids).toBlocking().last();
        }
    }

    @Override
    public void deleteByIds(String...ids) {
        this.deleteByIds(new ArrayList<String>(Arrays.asList(ids)));
    }

    @Override
    public PagedList<DataLakeAnalyticsAccount> listByResourceGroup(String resourceGroupName) {
        AccountsInner client = this.inner();
        PagedListConverter<DataLakeAnalyticsAccountBasicInner, DataLakeAnalyticsAccount> converter =
            new PagedListConverter<DataLakeAnalyticsAccountBasicInner, DataLakeAnalyticsAccount>() {
            @Override
            public Observable<DataLakeAnalyticsAccount> typeConvertAsync(DataLakeAnalyticsAccountBasicInner inner) {
                 return Observable.just(inner)
                        .flatMap(new Func1<DataLakeAnalyticsAccountBasicInner, Observable<DataLakeAnalyticsAccountInner>>() {
                            @Override
                            public Observable<DataLakeAnalyticsAccountInner> call(DataLakeAnalyticsAccountBasicInner inner) {
                                return getInnerAsync(ResourceUtilsCore.groupFromResourceId(inner.id()), ResourceUtilsCore.nameFromResourceId(inner.id()));
                            }
                        })
                        .map(new Func1<DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccount>() {
                            @Override
                            public DataLakeAnalyticsAccount call(DataLakeAnalyticsAccountInner inner) {
                                return wrapModel(inner);
                            }
                        });
                }
            };
        return converter.convert(client.listByResourceGroup(resourceGroupName));
    }

    @Override
    public Observable<DataLakeAnalyticsAccount> listByResourceGroupAsync(String resourceGroupName) {
        AccountsInner client = this.inner();
        return client.listByResourceGroupAsync(resourceGroupName)
        .flatMapIterable(new Func1<Page<DataLakeAnalyticsAccountBasicInner>, Iterable<DataLakeAnalyticsAccountBasicInner>>() {
            @Override
            public Iterable<DataLakeAnalyticsAccountBasicInner> call(Page<DataLakeAnalyticsAccountBasicInner> page) {
                return page.items();
            }
        })
        .flatMap(new Func1<DataLakeAnalyticsAccountBasicInner, Observable<DataLakeAnalyticsAccountInner>>() {
            @Override
            public Observable<DataLakeAnalyticsAccountInner> call(DataLakeAnalyticsAccountBasicInner inner) {
                return getInnerAsync(ResourceUtilsCore.groupFromResourceId(inner.id()), ResourceUtilsCore.nameFromResourceId(inner.id()));
            }
        })
        .map(new Func1<DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccount>() {
            @Override
            public DataLakeAnalyticsAccount call(DataLakeAnalyticsAccountInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public PagedList<DataLakeAnalyticsAccount> list() {
        AccountsInner client = this.inner();
        PagedListConverter<DataLakeAnalyticsAccountBasicInner, DataLakeAnalyticsAccount> converter =
            new PagedListConverter<DataLakeAnalyticsAccountBasicInner, DataLakeAnalyticsAccount>() {
            @Override
            public Observable<DataLakeAnalyticsAccount> typeConvertAsync(DataLakeAnalyticsAccountBasicInner inner) {
                 return Observable.just(inner)
                        .flatMap(new Func1<DataLakeAnalyticsAccountBasicInner, Observable<DataLakeAnalyticsAccountInner>>() {
                            @Override
                            public Observable<DataLakeAnalyticsAccountInner> call(DataLakeAnalyticsAccountBasicInner inner) {
                                return getInnerAsync(ResourceUtilsCore.groupFromResourceId(inner.id()), ResourceUtilsCore.nameFromResourceId(inner.id()));
                            }
                        })
                        .map(new Func1<DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccount>() {
                            @Override
                            public DataLakeAnalyticsAccount call(DataLakeAnalyticsAccountInner inner) {
                                return wrapModel(inner);
                            }
                        });
                }
            };
        return converter.convert(client.list());
    }

    @Override
    public Observable<DataLakeAnalyticsAccount> listAsync() {
        AccountsInner client = this.inner();
        return client.listAsync()
        .flatMapIterable(new Func1<Page<DataLakeAnalyticsAccountBasicInner>, Iterable<DataLakeAnalyticsAccountBasicInner>>() {
            @Override
            public Iterable<DataLakeAnalyticsAccountBasicInner> call(Page<DataLakeAnalyticsAccountBasicInner> page) {
                return page.items();
            }
        })
        .flatMap(new Func1<DataLakeAnalyticsAccountBasicInner, Observable<DataLakeAnalyticsAccountInner>>() {
            @Override
            public Observable<DataLakeAnalyticsAccountInner> call(DataLakeAnalyticsAccountBasicInner inner) {
                return getInnerAsync(ResourceUtilsCore.groupFromResourceId(inner.id()), ResourceUtilsCore.nameFromResourceId(inner.id()));
            }
        })
        .map(new Func1<DataLakeAnalyticsAccountInner, DataLakeAnalyticsAccount>() {
            @Override
            public DataLakeAnalyticsAccount call(DataLakeAnalyticsAccountInner inner) {
                return wrapModel(inner);
            }
        });
    }

    @Override
    public DataLakeAnalyticsAccountImpl define(String name) {
        return wrapModel(name);
    }

    @Override
    protected DataLakeAnalyticsAccountImpl wrapModel(DataLakeAnalyticsAccountInner inner) {
        return  new DataLakeAnalyticsAccountImpl(inner.name(), inner, manager());
    }

    @Override
    protected DataLakeAnalyticsAccountImpl wrapModel(String name) {
        return new DataLakeAnalyticsAccountImpl(name, new DataLakeAnalyticsAccountInner(), this.manager());
    }

    @Override
    public Observable<NameAvailabilityInformation> checkNameAvailabilityAsync(String location, CheckNameAvailabilityParameters parameters) {
        AccountsInner client = this.inner();
        return client.checkNameAvailabilityAsync(location, parameters)
        .map(new Func1<NameAvailabilityInformationInner, NameAvailabilityInformation>() {
            @Override
            public NameAvailabilityInformation call(NameAvailabilityInformationInner inner) {
                return new NameAvailabilityInformationImpl(inner, manager());
            }
        });
    }

}
