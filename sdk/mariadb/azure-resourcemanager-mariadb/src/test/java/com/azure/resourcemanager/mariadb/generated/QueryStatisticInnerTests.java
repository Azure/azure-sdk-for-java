// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.fluent.models.QueryStatisticInner;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class QueryStatisticInnerTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueryStatisticInner model = BinaryData.fromString(
            "{\"properties\":{\"queryId\":\"uzycispnqza\",\"startTime\":\"2021-01-22T12:22:34Z\",\"endTime\":\"2021-09-24T15:39:46Z\",\"aggregationFunction\":\"pyydhi\",\"databaseNames\":[\"qqkpikadrg\",\"tqagnbuynh\"],\"queryExecutionCount\":2182211353058323076,\"metricName\":\"ebf\",\"metricDisplayName\":\"arbu\",\"metricValue\":99.74449639356344,\"metricValueUnit\":\"na\"},\"id\":\"zmhjrunmp\",\"name\":\"ttdbhrbnl\",\"type\":\"nkxmyskpbhenbtk\"}")
            .toObject(QueryStatisticInner.class);
        Assertions.assertEquals("uzycispnqza", model.queryId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-22T12:22:34Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-24T15:39:46Z"), model.endTime());
        Assertions.assertEquals("pyydhi", model.aggregationFunction());
        Assertions.assertEquals("qqkpikadrg", model.databaseNames().get(0));
        Assertions.assertEquals(2182211353058323076L, model.queryExecutionCount());
        Assertions.assertEquals("ebf", model.metricName());
        Assertions.assertEquals("arbu", model.metricDisplayName());
        Assertions.assertEquals(99.74449639356344D, model.metricValue());
        Assertions.assertEquals("na", model.metricValueUnit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueryStatisticInner model = new QueryStatisticInner().withQueryId("uzycispnqza")
            .withStartTime(OffsetDateTime.parse("2021-01-22T12:22:34Z"))
            .withEndTime(OffsetDateTime.parse("2021-09-24T15:39:46Z"))
            .withAggregationFunction("pyydhi")
            .withDatabaseNames(Arrays.asList("qqkpikadrg", "tqagnbuynh"))
            .withQueryExecutionCount(2182211353058323076L)
            .withMetricName("ebf")
            .withMetricDisplayName("arbu")
            .withMetricValue(99.74449639356344D)
            .withMetricValueUnit("na");
        model = BinaryData.fromObject(model).toObject(QueryStatisticInner.class);
        Assertions.assertEquals("uzycispnqza", model.queryId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-01-22T12:22:34Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-24T15:39:46Z"), model.endTime());
        Assertions.assertEquals("pyydhi", model.aggregationFunction());
        Assertions.assertEquals("qqkpikadrg", model.databaseNames().get(0));
        Assertions.assertEquals(2182211353058323076L, model.queryExecutionCount());
        Assertions.assertEquals("ebf", model.metricName());
        Assertions.assertEquals("arbu", model.metricDisplayName());
        Assertions.assertEquals(99.74449639356344D, model.metricValue());
        Assertions.assertEquals("na", model.metricValueUnit());
    }
}
