// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.fluent.models.QueryStatisticProperties;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.junit.jupiter.api.Assertions;

public final class QueryStatisticPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        QueryStatisticProperties model = BinaryData.fromString(
            "{\"queryId\":\"ywn\",\"startTime\":\"2021-09-02T16:16:29Z\",\"endTime\":\"2021-03-03T06:00:33Z\",\"aggregationFunction\":\"nlqidybyxczf\",\"databaseNames\":[\"aaxdbabphlwrq\",\"fkts\",\"hsucoc\"],\"queryExecutionCount\":8773922705393803928,\"metricName\":\"zt\",\"metricDisplayName\":\"twwrqp\",\"metricValue\":64.95738011898911,\"metricValueUnit\":\"zywbiex\"}")
            .toObject(QueryStatisticProperties.class);
        Assertions.assertEquals("ywn", model.queryId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T16:16:29Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-03T06:00:33Z"), model.endTime());
        Assertions.assertEquals("nlqidybyxczf", model.aggregationFunction());
        Assertions.assertEquals("aaxdbabphlwrq", model.databaseNames().get(0));
        Assertions.assertEquals(8773922705393803928L, model.queryExecutionCount());
        Assertions.assertEquals("zt", model.metricName());
        Assertions.assertEquals("twwrqp", model.metricDisplayName());
        Assertions.assertEquals(64.95738011898911D, model.metricValue());
        Assertions.assertEquals("zywbiex", model.metricValueUnit());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        QueryStatisticProperties model = new QueryStatisticProperties().withQueryId("ywn")
            .withStartTime(OffsetDateTime.parse("2021-09-02T16:16:29Z"))
            .withEndTime(OffsetDateTime.parse("2021-03-03T06:00:33Z"))
            .withAggregationFunction("nlqidybyxczf")
            .withDatabaseNames(Arrays.asList("aaxdbabphlwrq", "fkts", "hsucoc"))
            .withQueryExecutionCount(8773922705393803928L)
            .withMetricName("zt")
            .withMetricDisplayName("twwrqp")
            .withMetricValue(64.95738011898911D)
            .withMetricValueUnit("zywbiex");
        model = BinaryData.fromObject(model).toObject(QueryStatisticProperties.class);
        Assertions.assertEquals("ywn", model.queryId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-09-02T16:16:29Z"), model.startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-03-03T06:00:33Z"), model.endTime());
        Assertions.assertEquals("nlqidybyxczf", model.aggregationFunction());
        Assertions.assertEquals("aaxdbabphlwrq", model.databaseNames().get(0));
        Assertions.assertEquals(8773922705393803928L, model.queryExecutionCount());
        Assertions.assertEquals("zt", model.metricName());
        Assertions.assertEquals("twwrqp", model.metricDisplayName());
        Assertions.assertEquals(64.95738011898911D, model.metricValue());
        Assertions.assertEquals("zywbiex", model.metricValueUnit());
    }
}
