// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.fluent.models.ServerProperties;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.ServerState;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import com.azure.resourcemanager.mariadb.models.StorageProfile;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ServerPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerProperties model = BinaryData.fromString(
            "{\"administratorLogin\":\"n\",\"version\":\"10.2\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLS1_0\",\"userVisibleState\":\"Dropping\",\"fullyQualifiedDomainName\":\"umjgrtfwvuk\",\"earliestRestoreDate\":\"2021-07-06T14:12:06Z\",\"storageProfile\":{\"backupRetentionDays\":1991761310,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":70776342,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"nyejhkryhtnap\",\"masterServerId\":\"wlokjyem\",\"replicaCapacity\":1665801665,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"id\":\"xzjnchgejs\",\"properties\":{\"privateEndpoint\":{\"id\":\"ailzydehojwyahu\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"pmqnja\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Ready\"}},{\"id\":\"prozvcputegjvwmf\",\"properties\":{\"privateEndpoint\":{\"id\":\"cmdv\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"u\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Rejecting\"}},{\"id\":\"kjozkrwfnd\",\"properties\":{\"privateEndpoint\":{\"id\":\"pslwejdpvw\"},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"qpsoacctazak\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Rejecting\"}},{\"id\":\"cr\",\"properties\":{\"privateEndpoint\":{\"id\":\"fdosyg\"},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"aojakhmsbzjhcrz\",\"actionsRequired\":\"None\"},\"provisioningState\":\"Approving\"}}]}")
            .toObject(ServerProperties.class);
        Assertions.assertEquals("n", model.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, model.version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_0, model.minimalTlsVersion());
        Assertions.assertEquals(ServerState.DROPPING, model.userVisibleState());
        Assertions.assertEquals("umjgrtfwvuk", model.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T14:12:06Z"), model.earliestRestoreDate());
        Assertions.assertEquals(1991761310, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(70776342, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("nyejhkryhtnap", model.replicationRole());
        Assertions.assertEquals("wlokjyem", model.masterServerId());
        Assertions.assertEquals(1665801665, model.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, model.publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerProperties model = new ServerProperties().withAdministratorLogin("n")
            .withVersion(ServerVersion.ONE_ZERO_TWO)
            .withSslEnforcement(SslEnforcementEnum.ENABLED)
            .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_0)
            .withUserVisibleState(ServerState.DROPPING)
            .withFullyQualifiedDomainName("umjgrtfwvuk")
            .withEarliestRestoreDate(OffsetDateTime.parse("2021-07-06T14:12:06Z"))
            .withStorageProfile(new StorageProfile().withBackupRetentionDays(1991761310)
                .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                .withStorageMB(70776342)
                .withStorageAutogrow(StorageAutogrow.ENABLED))
            .withReplicationRole("nyejhkryhtnap")
            .withMasterServerId("wlokjyem")
            .withReplicaCapacity(1665801665)
            .withPublicNetworkAccess(PublicNetworkAccessEnum.DISABLED);
        model = BinaryData.fromObject(model).toObject(ServerProperties.class);
        Assertions.assertEquals("n", model.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, model.version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_0, model.minimalTlsVersion());
        Assertions.assertEquals(ServerState.DROPPING, model.userVisibleState());
        Assertions.assertEquals("umjgrtfwvuk", model.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-06T14:12:06Z"), model.earliestRestoreDate());
        Assertions.assertEquals(1991761310, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(70776342, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("nyejhkryhtnap", model.replicationRole());
        Assertions.assertEquals("wlokjyem", model.masterServerId());
        Assertions.assertEquals(1665801665, model.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, model.publicNetworkAccess());
    }
}
