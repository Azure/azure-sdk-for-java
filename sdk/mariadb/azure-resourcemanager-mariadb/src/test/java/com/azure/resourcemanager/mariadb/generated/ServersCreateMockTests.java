// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.Server;
import com.azure.resourcemanager.mariadb.models.ServerPropertiesForCreate;
import com.azure.resourcemanager.mariadb.models.ServerState;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.Sku;
import com.azure.resourcemanager.mariadb.models.SkuTier;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import com.azure.resourcemanager.mariadb.models.StorageProfile;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServersCreateMockTests {
    @Test
    public void testCreate() throws Exception {
        String responseStr
            = "{\"sku\":{\"name\":\"ziuiefozbhdm\",\"tier\":\"MemoryOptimized\",\"capacity\":1101350352,\"size\":\"hoftr\",\"family\":\"equi\"},\"properties\":{\"administratorLogin\":\"icslfaoq\",\"version\":\"10.3\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_1\",\"userVisibleState\":\"Ready\",\"fullyQualifiedDomainName\":\"swhccsphk\",\"earliestRestoreDate\":\"2021-11-16T11:43:34Z\",\"storageProfile\":{\"backupRetentionDays\":2029165180,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":1063869072,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"gwol\",\"masterServerId\":\"czbwemhairsbr\",\"replicaCapacity\":565998030,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"id\":\"ypqwdxggiccc\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Rejected\",\"description\":\"exmk\"},\"provisioningState\":\"Ready\"}}]},\"location\":\"stvlzywemhzrnc\",\"tags\":{\"bsfgytguslfea\":\"clusiy\",\"qukyhejhzi\":\"cy\",\"srp\":\"xgfpelolppv\",\"zraehtwd\":\"vu\"},\"id\":\"r\",\"name\":\"tswiby\",\"type\":\"cdl\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MariaDBManager manager = MariaDBManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        Server response = manager.servers()
            .define("lmnguxaw")
            .withRegion("dlmkkzevdl")
            .withExistingResourceGroup("qgsfraoyzkoow")
            .withProperties(new ServerPropertiesForCreate().withVersion(ServerVersion.ONE_ZERO_THREE)
                .withSslEnforcement(SslEnforcementEnum.DISABLED)
                .withMinimalTlsVersion(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED)
                .withPublicNetworkAccess(PublicNetworkAccessEnum.ENABLED)
                .withStorageProfile(new StorageProfile().withBackupRetentionDays(306340067)
                    .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                    .withStorageMB(357492176)
                    .withStorageAutogrow(StorageAutogrow.DISABLED)))
            .withTags(mapOf("vogvbbejdcngqqmo", "pusdstt", "rwr", "kufgmj", "u", "grtwae", "inrfdwoyu", "zkopb"))
            .withSku(new Sku().withName("ldsyuuximerqfob")
                .withTier(SkuTier.GENERAL_PURPOSE)
                .withCapacity(634741251)
                .withSize("ykutwpf")
                .withFamily("a"))
            .create();

        Assertions.assertEquals("stvlzywemhzrnc", response.location());
        Assertions.assertEquals("clusiy", response.tags().get("bsfgytguslfea"));
        Assertions.assertEquals("ziuiefozbhdm", response.sku().name());
        Assertions.assertEquals(SkuTier.MEMORY_OPTIMIZED, response.sku().tier());
        Assertions.assertEquals(1101350352, response.sku().capacity());
        Assertions.assertEquals("hoftr", response.sku().size());
        Assertions.assertEquals("equi", response.sku().family());
        Assertions.assertEquals("icslfaoq", response.administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_THREE, response.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, response.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, response.minimalTlsVersion());
        Assertions.assertEquals(ServerState.READY, response.userVisibleState());
        Assertions.assertEquals("swhccsphk", response.fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-16T11:43:34Z"), response.earliestRestoreDate());
        Assertions.assertEquals(2029165180, response.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED, response.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1063869072, response.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, response.storageProfile().storageAutogrow());
        Assertions.assertEquals("gwol", response.replicationRole());
        Assertions.assertEquals("czbwemhairsbr", response.masterServerId());
        Assertions.assertEquals(565998030, response.replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, response.publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
