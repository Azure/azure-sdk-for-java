// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.fluent.models.ServerInner;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.ServerListResult;
import com.azure.resourcemanager.mariadb.models.ServerState;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.Sku;
import com.azure.resourcemanager.mariadb.models.SkuTier;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import com.azure.resourcemanager.mariadb.models.StorageProfile;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class ServerListResultTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerListResult model = BinaryData.fromString(
            "{\"value\":[{\"sku\":{\"name\":\"qeof\",\"tier\":\"GeneralPurpose\",\"capacity\":1722437661,\"size\":\"qjbasvms\",\"family\":\"qulngsntnbybkzgc\"},\"properties\":{\"administratorLogin\":\"clxxwrljdo\",\"version\":\"10.3\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLSEnforcementDisabled\",\"userVisibleState\":\"Ready\",\"fullyQualifiedDomainName\":\"cjdkwtnhxbnjbi\",\"earliestRestoreDate\":\"2021-06-26T03:50:20Z\",\"storageProfile\":{\"backupRetentionDays\":1218196264,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":280192097,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"jwnzlljfmp\",\"masterServerId\":\"ebvmgxsabkyqd\",\"replicaCapacity\":922988316,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"zdzevndh\",\"properties\":{}},{\"id\":\"pdappds\",\"properties\":{}},{\"id\":\"vwrwj\",\"properties\":{}}]},\"location\":\"usnhutje\",\"tags\":{\"hugjzzdatqxhoc\":\"rl\",\"ozwyiftyhxhuro\":\"geablgphuticndvk\"},\"id\":\"ftyxolniw\",\"name\":\"wcukjfkgiawxk\",\"type\":\"ryplwckbasyypn\"},{\"sku\":{\"name\":\"hsgcbacphejkot\",\"tier\":\"Basic\",\"capacity\":813482060,\"size\":\"l\",\"family\":\"dlikwyqkgfgibma\"},\"properties\":{\"administratorLogin\":\"keqsrxybzqqedq\",\"version\":\"10.3\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLSEnforcementDisabled\",\"userVisibleState\":\"Ready\",\"fullyQualifiedDomainName\":\"lmmnkzsmodmglo\",\"earliestRestoreDate\":\"2021-09-06T12:10:22Z\",\"storageProfile\":{\"backupRetentionDays\":1951665736,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":2110455897,\"storageAutogrow\":\"Enabled\"},\"replicationRole\":\"ktapspwgcuertu\",\"masterServerId\":\"dosvqwhbmdgbbjf\",\"replicaCapacity\":763703494,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"id\":\"xppbhtqqro\",\"properties\":{}},{\"id\":\"fpsalgbqu\",\"properties\":{}}]},\"location\":\"gjyjgzjaoyfhrtxi\",\"tags\":{\"vlejuvfqa\":\"rkujy\",\"xgjvtbv\":\"rlyxwjkcprbnw\"},\"id\":\"ysszdnrujqguh\",\"name\":\"uouq\",\"type\":\"prwzwbnguitnwui\"}]}")
            .toObject(ServerListResult.class);
        Assertions.assertEquals("usnhutje", model.value().get(0).location());
        Assertions.assertEquals("rl", model.value().get(0).tags().get("hugjzzdatqxhoc"));
        Assertions.assertEquals("qeof", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.GENERAL_PURPOSE, model.value().get(0).sku().tier());
        Assertions.assertEquals(1722437661, model.value().get(0).sku().capacity());
        Assertions.assertEquals("qjbasvms", model.value().get(0).sku().size());
        Assertions.assertEquals("qulngsntnbybkzgc", model.value().get(0).sku().family());
        Assertions.assertEquals("clxxwrljdo", model.value().get(0).administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_THREE, model.value().get(0).version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, model.value().get(0).sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED,
            model.value().get(0).minimalTlsVersion());
        Assertions.assertEquals(ServerState.READY, model.value().get(0).userVisibleState());
        Assertions.assertEquals("cjdkwtnhxbnjbi", model.value().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T03:50:20Z"),
            model.value().get(0).earliestRestoreDate());
        Assertions.assertEquals(1218196264, model.value().get(0).storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED,
            model.value().get(0).storageProfile().geoRedundantBackup());
        Assertions.assertEquals(280192097, model.value().get(0).storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, model.value().get(0).storageProfile().storageAutogrow());
        Assertions.assertEquals("jwnzlljfmp", model.value().get(0).replicationRole());
        Assertions.assertEquals("ebvmgxsabkyqd", model.value().get(0).masterServerId());
        Assertions.assertEquals(922988316, model.value().get(0).replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.value().get(0).publicNetworkAccess());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerListResult model = new ServerListResult().withValue(Arrays.asList(
            new ServerInner().withLocation("usnhutje")
                .withTags(mapOf("hugjzzdatqxhoc", "rl", "ozwyiftyhxhuro", "geablgphuticndvk"))
                .withSku(new Sku().withName("qeof")
                    .withTier(SkuTier.GENERAL_PURPOSE)
                    .withCapacity(1722437661)
                    .withSize("qjbasvms")
                    .withFamily("qulngsntnbybkzgc"))
                .withAdministratorLogin("clxxwrljdo")
                .withVersion(ServerVersion.ONE_ZERO_THREE)
                .withSslEnforcement(SslEnforcementEnum.ENABLED)
                .withMinimalTlsVersion(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED)
                .withUserVisibleState(ServerState.READY)
                .withFullyQualifiedDomainName("cjdkwtnhxbnjbi")
                .withEarliestRestoreDate(OffsetDateTime.parse("2021-06-26T03:50:20Z"))
                .withStorageProfile(new StorageProfile().withBackupRetentionDays(1218196264)
                    .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                    .withStorageMB(280192097)
                    .withStorageAutogrow(StorageAutogrow.DISABLED))
                .withReplicationRole("jwnzlljfmp")
                .withMasterServerId("ebvmgxsabkyqd")
                .withReplicaCapacity(922988316)
                .withPublicNetworkAccess(PublicNetworkAccessEnum.ENABLED),
            new ServerInner().withLocation("gjyjgzjaoyfhrtxi")
                .withTags(mapOf("vlejuvfqa", "rkujy", "xgjvtbv", "rlyxwjkcprbnw"))
                .withSku(new Sku().withName("hsgcbacphejkot")
                    .withTier(SkuTier.BASIC)
                    .withCapacity(813482060)
                    .withSize("l")
                    .withFamily("dlikwyqkgfgibma"))
                .withAdministratorLogin("keqsrxybzqqedq")
                .withVersion(ServerVersion.ONE_ZERO_THREE)
                .withSslEnforcement(SslEnforcementEnum.DISABLED)
                .withMinimalTlsVersion(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED)
                .withUserVisibleState(ServerState.READY)
                .withFullyQualifiedDomainName("lmmnkzsmodmglo")
                .withEarliestRestoreDate(OffsetDateTime.parse("2021-09-06T12:10:22Z"))
                .withStorageProfile(new StorageProfile().withBackupRetentionDays(1951665736)
                    .withGeoRedundantBackup(GeoRedundantBackup.DISABLED)
                    .withStorageMB(2110455897)
                    .withStorageAutogrow(StorageAutogrow.ENABLED))
                .withReplicationRole("ktapspwgcuertu")
                .withMasterServerId("dosvqwhbmdgbbjf")
                .withReplicaCapacity(763703494)
                .withPublicNetworkAccess(PublicNetworkAccessEnum.DISABLED)));
        model = BinaryData.fromObject(model).toObject(ServerListResult.class);
        Assertions.assertEquals("usnhutje", model.value().get(0).location());
        Assertions.assertEquals("rl", model.value().get(0).tags().get("hugjzzdatqxhoc"));
        Assertions.assertEquals("qeof", model.value().get(0).sku().name());
        Assertions.assertEquals(SkuTier.GENERAL_PURPOSE, model.value().get(0).sku().tier());
        Assertions.assertEquals(1722437661, model.value().get(0).sku().capacity());
        Assertions.assertEquals("qjbasvms", model.value().get(0).sku().size());
        Assertions.assertEquals("qulngsntnbybkzgc", model.value().get(0).sku().family());
        Assertions.assertEquals("clxxwrljdo", model.value().get(0).administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_THREE, model.value().get(0).version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, model.value().get(0).sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLSENFORCEMENT_DISABLED,
            model.value().get(0).minimalTlsVersion());
        Assertions.assertEquals(ServerState.READY, model.value().get(0).userVisibleState());
        Assertions.assertEquals("cjdkwtnhxbnjbi", model.value().get(0).fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-26T03:50:20Z"),
            model.value().get(0).earliestRestoreDate());
        Assertions.assertEquals(1218196264, model.value().get(0).storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED,
            model.value().get(0).storageProfile().geoRedundantBackup());
        Assertions.assertEquals(280192097, model.value().get(0).storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED, model.value().get(0).storageProfile().storageAutogrow());
        Assertions.assertEquals("jwnzlljfmp", model.value().get(0).replicationRole());
        Assertions.assertEquals("ebvmgxsabkyqd", model.value().get(0).masterServerId());
        Assertions.assertEquals(922988316, model.value().get(0).replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, model.value().get(0).publicNetworkAccess());
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
