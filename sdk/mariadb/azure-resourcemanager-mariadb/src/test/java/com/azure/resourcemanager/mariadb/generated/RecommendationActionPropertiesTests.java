// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.fluent.models.RecommendationActionProperties;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import org.junit.jupiter.api.Assertions;

public final class RecommendationActionPropertiesTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        RecommendationActionProperties model = BinaryData.fromString(
            "{\"advisorName\":\"zmh\",\"sessionId\":\"ongmtsa\",\"actionId\":1151721891,\"createdTime\":\"2021-07-03T11:39:07Z\",\"expirationTime\":\"2021-10-07T01:22:52Z\",\"reason\":\"p\",\"recommendationType\":\"knftguvriuh\",\"details\":{\"ro\":\"mdyvxqtayriw\",\"mcqibycnojv\":\"qbex\",\"zhpvgqzcjrvxd\":\"nmefqsgzvahapj\"}}")
            .toObject(RecommendationActionProperties.class);
        Assertions.assertEquals("zmh", model.advisorName());
        Assertions.assertEquals("ongmtsa", model.sessionId());
        Assertions.assertEquals(1151721891, model.actionId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T11:39:07Z"), model.createdTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T01:22:52Z"), model.expirationTime());
        Assertions.assertEquals("p", model.reason());
        Assertions.assertEquals("knftguvriuh", model.recommendationType());
        Assertions.assertEquals("mdyvxqtayriw", model.details().get("ro"));
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        RecommendationActionProperties model = new RecommendationActionProperties().withAdvisorName("zmh")
            .withSessionId("ongmtsa")
            .withActionId(1151721891)
            .withCreatedTime(OffsetDateTime.parse("2021-07-03T11:39:07Z"))
            .withExpirationTime(OffsetDateTime.parse("2021-10-07T01:22:52Z"))
            .withReason("p")
            .withRecommendationType("knftguvriuh")
            .withDetails(mapOf("ro", "mdyvxqtayriw", "mcqibycnojv", "qbex", "zhpvgqzcjrvxd", "nmefqsgzvahapj"));
        model = BinaryData.fromObject(model).toObject(RecommendationActionProperties.class);
        Assertions.assertEquals("zmh", model.advisorName());
        Assertions.assertEquals("ongmtsa", model.sessionId());
        Assertions.assertEquals(1151721891, model.actionId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-07-03T11:39:07Z"), model.createdTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-07T01:22:52Z"), model.expirationTime());
        Assertions.assertEquals("p", model.reason());
        Assertions.assertEquals("knftguvriuh", model.recommendationType());
        Assertions.assertEquals("mdyvxqtayriw", model.details().get("ro"));
    }

    // Use "Map.of" if available
    @SuppressWarnings("unchecked")
    private static <T> Map<String, T> mapOf(Object... inputs) {
        Map<String, T> map = new HashMap<>();
        for (int i = 0; i < inputs.length; i += 2) {
            String key = (String) inputs[i];
            T value = (T) inputs[i + 1];
            map.put(key, value);
        }
        return map;
    }
}
