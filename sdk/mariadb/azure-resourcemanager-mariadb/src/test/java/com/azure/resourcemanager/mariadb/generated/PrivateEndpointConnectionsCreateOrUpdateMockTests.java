// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.PrivateEndpointConnection;
import com.azure.resourcemanager.mariadb.models.PrivateEndpointProperty;
import com.azure.resourcemanager.mariadb.models.PrivateLinkServiceConnectionStateProperty;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class PrivateEndpointConnectionsCreateOrUpdateMockTests {
    @Test
    public void testCreateOrUpdate() throws Exception {
        String responseStr
            = "{\"properties\":{\"privateEndpoint\":{\"id\":\"vcpwpgclrc\"},\"privateLinkServiceConnectionState\":{\"status\":\"tso\",\"description\":\"frkenxpmyyefrp\",\"actionsRequired\":\"dnqqskawaoqvmmb\"},\"provisioningState\":\"Succeeded\"},\"id\":\"qlkzme\",\"name\":\"nitgvkxlz\",\"type\":\"qdrfegcealzxwhc\"}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MariaDBManager manager = MariaDBManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PrivateEndpointConnection response = manager.privateEndpointConnections()
            .define("gpmuneqsxvmhfbuz")
            .withExistingServer("kuqgsjjxundxgket", "zhhzjhfjmhvvmu")
            .withPrivateEndpoint(new PrivateEndpointProperty().withId("sasbhu"))
            .withPrivateLinkServiceConnectionState(
                new PrivateLinkServiceConnectionStateProperty().withStatus("pohyuemslynsqyr")
                    .withDescription("foobrlttyms"))
            .create();

        Assertions.assertEquals("vcpwpgclrc", response.privateEndpoint().id());
        Assertions.assertEquals("tso", response.privateLinkServiceConnectionState().status());
        Assertions.assertEquals("frkenxpmyyefrp", response.privateLinkServiceConnectionState().description());
    }
}
