// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.Server;
import com.azure.resourcemanager.mariadb.models.ServerState;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.SkuTier;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServersListByResourceGroupMockTests {
    @Test
    public void testListByResourceGroup() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"xacqqudfnbyx\",\"tier\":\"GeneralPurpose\",\"capacity\":1598677133,\"size\":\"yvayffimrzr\",\"family\":\"zqogse\"},\"properties\":{\"administratorLogin\":\"vfdnwnwmewzsyyce\",\"version\":\"10.3\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLS1_1\",\"userVisibleState\":\"Ready\",\"fullyQualifiedDomainName\":\"frxtrthzvaytdwk\",\"earliestRestoreDate\":\"2021-05-13T06:01:09Z\",\"storageProfile\":{\"backupRetentionDays\":1725477484,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":31333478,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"i\",\"masterServerId\":\"vpdtiirqtdqoa\",\"replicaCapacity\":200859544,\"publicNetworkAccess\":\"Enabled\",\"privateEndpointConnections\":[{\"id\":\"quyfx\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"ptramxj\"},\"provisioningState\":\"Dropping\"}},{\"id\":\"wnwxuqlcvyd\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"ooaojkniodkooebw\"},\"provisioningState\":\"Approving\"}},{\"id\":\"emmsbvdkc\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Pending\",\"description\":\"infwjlfltkacjve\"},\"provisioningState\":\"Approving\"}},{\"id\":\"foakgg\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Disconnected\",\"description\":\"ao\"},\"provisioningState\":\"Dropping\"}}]},\"location\":\"lpqblylsyxk\",\"tags\":{\"gxsds\":\"sjervti\"},\"id\":\"uem\",\"name\":\"sbzkf\",\"type\":\"beyvpnqicvinvkjj\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MariaDBManager manager = MariaDBManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Server> response
            = manager.servers().listByResourceGroup("sofwqmzqalkrmnji", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("lpqblylsyxk", response.iterator().next().location());
        Assertions.assertEquals("sjervti", response.iterator().next().tags().get("gxsds"));
        Assertions.assertEquals("xacqqudfnbyx", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.GENERAL_PURPOSE, response.iterator().next().sku().tier());
        Assertions.assertEquals(1598677133, response.iterator().next().sku().capacity());
        Assertions.assertEquals("yvayffimrzr", response.iterator().next().sku().size());
        Assertions.assertEquals("zqogse", response.iterator().next().sku().family());
        Assertions.assertEquals("vfdnwnwmewzsyyce", response.iterator().next().administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_THREE, response.iterator().next().version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, response.iterator().next().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, response.iterator().next().minimalTlsVersion());
        Assertions.assertEquals(ServerState.READY, response.iterator().next().userVisibleState());
        Assertions.assertEquals("frxtrthzvaytdwk", response.iterator().next().fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-05-13T06:01:09Z"),
            response.iterator().next().earliestRestoreDate());
        Assertions.assertEquals(1725477484, response.iterator().next().storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.DISABLED,
            response.iterator().next().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(31333478, response.iterator().next().storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED,
            response.iterator().next().storageProfile().storageAutogrow());
        Assertions.assertEquals("i", response.iterator().next().replicationRole());
        Assertions.assertEquals("vpdtiirqtdqoa", response.iterator().next().masterServerId());
        Assertions.assertEquals(200859544, response.iterator().next().replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.ENABLED, response.iterator().next().publicNetworkAccess());
    }
}
