// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.models.TopQueryStatisticsInput;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class TopQueryStatisticsInputTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        TopQueryStatisticsInput model = BinaryData.fromString(
            "{\"properties\":{\"numberOfTopQueries\":795615702,\"aggregationFunction\":\"eyueaxibxujwb\",\"observedMetric\":\"qwalmuzyoxaepd\",\"observationStartTime\":\"2021-06-08T12:36:20Z\",\"observationEndTime\":\"2021-11-04T14:15:47Z\",\"aggregationWindow\":\"ancuxrhd\"}}")
            .toObject(TopQueryStatisticsInput.class);
        Assertions.assertEquals(795615702, model.numberOfTopQueries());
        Assertions.assertEquals("eyueaxibxujwb", model.aggregationFunction());
        Assertions.assertEquals("qwalmuzyoxaepd", model.observedMetric());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-08T12:36:20Z"), model.observationStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T14:15:47Z"), model.observationEndTime());
        Assertions.assertEquals("ancuxrhd", model.aggregationWindow());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        TopQueryStatisticsInput model = new TopQueryStatisticsInput().withNumberOfTopQueries(795615702)
            .withAggregationFunction("eyueaxibxujwb")
            .withObservedMetric("qwalmuzyoxaepd")
            .withObservationStartTime(OffsetDateTime.parse("2021-06-08T12:36:20Z"))
            .withObservationEndTime(OffsetDateTime.parse("2021-11-04T14:15:47Z"))
            .withAggregationWindow("ancuxrhd");
        model = BinaryData.fromObject(model).toObject(TopQueryStatisticsInput.class);
        Assertions.assertEquals(795615702, model.numberOfTopQueries());
        Assertions.assertEquals("eyueaxibxujwb", model.aggregationFunction());
        Assertions.assertEquals("qwalmuzyoxaepd", model.observedMetric());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-08T12:36:20Z"), model.observationStartTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-11-04T14:15:47Z"), model.observationEndTime());
        Assertions.assertEquals("ancuxrhd", model.aggregationWindow());
    }
}
