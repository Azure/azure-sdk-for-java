// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.Server;
import com.azure.resourcemanager.mariadb.models.ServerState;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.SkuTier;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class ServersListMockTests {
    @Test
    public void testList() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"sku\":{\"name\":\"n\",\"tier\":\"MemoryOptimized\",\"capacity\":641008490,\"size\":\"czelpcirel\",\"family\":\"eae\"},\"properties\":{\"administratorLogin\":\"bfatklddxbjhwu\",\"version\":\"10.2\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLS1_1\",\"userVisibleState\":\"Disabled\",\"fullyQualifiedDomainName\":\"youlp\",\"earliestRestoreDate\":\"2021-09-04T05:53:47Z\",\"storageProfile\":{\"backupRetentionDays\":1536946764,\"geoRedundantBackup\":\"Disabled\",\"storageMB\":1902797615,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"osytxitcskfckt\",\"masterServerId\":\"miekkezzikhlyfjh\",\"replicaCapacity\":810404828,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[]},\"location\":\"dunyg\",\"tags\":{\"fatpxllrxcyjmoa\":\"idb\",\"arm\":\"su\",\"rw\":\"wdmjsjqbjhhyx\",\"duhpk\":\"yc\"},\"id\":\"kgymareqnajxqug\",\"name\":\"hky\",\"type\":\"ubeddg\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MariaDBManager manager =
            MariaDBManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Server> response = manager.servers().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("dunyg", response.iterator().next().location());
        Assertions.assertEquals("idb", response.iterator().next().tags().get("fatpxllrxcyjmoa"));
        Assertions.assertEquals("n", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.MEMORY_OPTIMIZED, response.iterator().next().sku().tier());
        Assertions.assertEquals(641008490, response.iterator().next().sku().capacity());
        Assertions.assertEquals("czelpcirel", response.iterator().next().sku().size());
        Assertions.assertEquals("eae", response.iterator().next().sku().family());
        Assertions.assertEquals("bfatklddxbjhwu", response.iterator().next().administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, response.iterator().next().version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, response.iterator().next().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_1, response.iterator().next().minimalTlsVersion());
        Assertions.assertEquals(ServerState.DISABLED, response.iterator().next().userVisibleState());
        Assertions.assertEquals("youlp", response.iterator().next().fullyQualifiedDomainName());
        Assertions
            .assertEquals(
                OffsetDateTime.parse("2021-09-04T05:53:47Z"), response.iterator().next().earliestRestoreDate());
        Assertions.assertEquals(1536946764, response.iterator().next().storageProfile().backupRetentionDays());
        Assertions
            .assertEquals(
                GeoRedundantBackup.DISABLED, response.iterator().next().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1902797615, response.iterator().next().storageProfile().storageMB());
        Assertions
            .assertEquals(StorageAutogrow.DISABLED, response.iterator().next().storageProfile().storageAutogrow());
        Assertions.assertEquals("osytxitcskfckt", response.iterator().next().replicationRole());
        Assertions.assertEquals("miekkezzikhlyfjh", response.iterator().next().masterServerId());
        Assertions.assertEquals(810404828, response.iterator().next().replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, response.iterator().next().publicNetworkAccess());
    }
}
