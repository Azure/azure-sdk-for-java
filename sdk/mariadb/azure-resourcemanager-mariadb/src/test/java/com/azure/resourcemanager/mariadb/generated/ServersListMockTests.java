// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.Server;
import com.azure.resourcemanager.mariadb.models.ServerState;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.SkuTier;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class ServersListMockTests {
    @Test
    public void testList() throws Exception {
        String responseStr
            = "{\"value\":[{\"sku\":{\"name\":\"xrbuukzclew\",\"tier\":\"GeneralPurpose\",\"capacity\":460922562,\"size\":\"aztz\",\"family\":\"fn\"},\"properties\":{\"administratorLogin\":\"wyfzqwhxxbuyqa\",\"version\":\"10.3\",\"sslEnforcement\":\"Enabled\",\"minimalTlsVersion\":\"TLS1_0\",\"userVisibleState\":\"Dropping\",\"fullyQualifiedDomainName\":\"iolxor\",\"earliestRestoreDate\":\"2021-10-02T12:11:14Z\",\"storageProfile\":{\"backupRetentionDays\":1321856720,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":618891293,\"storageAutogrow\":\"Disabled\"},\"replicationRole\":\"qwcsdbnwdcfhuc\",\"masterServerId\":\"pfuvglsbjjca\",\"replicaCapacity\":1995846414,\"publicNetworkAccess\":\"Disabled\",\"privateEndpointConnections\":[{\"id\":\"dut\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"r\"},\"provisioningState\":\"Rejecting\"}},{\"id\":\"vcofudfl\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"bgdknnqv\"},\"provisioningState\":\"Failed\"}},{\"id\":\"qntorudsgsahmkyc\",\"properties\":{\"privateEndpoint\":{},\"privateLinkServiceConnectionState\":{\"status\":\"Approved\",\"description\":\"juetaebur\"},\"provisioningState\":\"Dropping\"}}]},\"location\":\"movsmzlxwabmqoe\",\"tags\":{\"mqlgk\":\"frvtpuqu\",\"ongbjcnt\":\"btndo\"},\"id\":\"jitcjedftwwaez\",\"name\":\"ojvdcpzfoqo\",\"type\":\"i\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MariaDBManager manager = MariaDBManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<Server> response = manager.servers().list(com.azure.core.util.Context.NONE);

        Assertions.assertEquals("movsmzlxwabmqoe", response.iterator().next().location());
        Assertions.assertEquals("frvtpuqu", response.iterator().next().tags().get("mqlgk"));
        Assertions.assertEquals("xrbuukzclew", response.iterator().next().sku().name());
        Assertions.assertEquals(SkuTier.GENERAL_PURPOSE, response.iterator().next().sku().tier());
        Assertions.assertEquals(460922562, response.iterator().next().sku().capacity());
        Assertions.assertEquals("aztz", response.iterator().next().sku().size());
        Assertions.assertEquals("fn", response.iterator().next().sku().family());
        Assertions.assertEquals("wyfzqwhxxbuyqa", response.iterator().next().administratorLogin());
        Assertions.assertEquals(ServerVersion.ONE_ZERO_THREE, response.iterator().next().version());
        Assertions.assertEquals(SslEnforcementEnum.ENABLED, response.iterator().next().sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_0, response.iterator().next().minimalTlsVersion());
        Assertions.assertEquals(ServerState.DROPPING, response.iterator().next().userVisibleState());
        Assertions.assertEquals("iolxor", response.iterator().next().fullyQualifiedDomainName());
        Assertions.assertEquals(OffsetDateTime.parse("2021-10-02T12:11:14Z"),
            response.iterator().next().earliestRestoreDate());
        Assertions.assertEquals(1321856720, response.iterator().next().storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED,
            response.iterator().next().storageProfile().geoRedundantBackup());
        Assertions.assertEquals(618891293, response.iterator().next().storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.DISABLED,
            response.iterator().next().storageProfile().storageAutogrow());
        Assertions.assertEquals("qwcsdbnwdcfhuc", response.iterator().next().replicationRole());
        Assertions.assertEquals("pfuvglsbjjca", response.iterator().next().masterServerId());
        Assertions.assertEquals(1995846414, response.iterator().next().replicaCapacity());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, response.iterator().next().publicNetworkAccess());
    }
}
