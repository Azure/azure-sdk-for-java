// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.test.http.MockHttpResponse;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.WaitStatistic;
import com.azure.resourcemanager.mariadb.models.WaitStatisticsInput;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Mono;

public final class WaitStatisticsListByServerMockTests {
    @Test
    public void testListByServer() throws Exception {
        String responseStr
            = "{\"value\":[{\"properties\":{\"startTime\":\"2021-02-08T00:20:36Z\",\"endTime\":\"2021-08-15T13:12:30Z\",\"eventName\":\"iykhy\",\"eventTypeName\":\"fvjlboxqvkjlmx\",\"queryId\":3072021334506042533,\"databaseName\":\"nhdwdigumbnra\",\"userId\":3202980934281786678,\"count\":1713814039822414166,\"totalTimeInMs\":35.34592005466792},\"id\":\"sdzhezww\",\"name\":\"aiqyuvvfo\",\"type\":\"kphhq\"}]}";

        HttpClient httpClient
            = response -> Mono.just(new MockHttpResponse(response, 200, responseStr.getBytes(StandardCharsets.UTF_8)));
        MariaDBManager manager = MariaDBManager.configure()
            .withHttpClient(httpClient)
            .authenticate(tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<WaitStatistic> response = manager.waitStatistics()
            .listByServer("dticokpvzml", "t",
                new WaitStatisticsInput().withObservationStartTime(OffsetDateTime.parse("2021-08-29T10:44:42Z"))
                    .withObservationEndTime(OffsetDateTime.parse("2021-01-29T20:58:55Z"))
                    .withAggregationWindow("gxobfirclnp"),
                com.azure.core.util.Context.NONE);

        Assertions.assertEquals(OffsetDateTime.parse("2021-02-08T00:20:36Z"), response.iterator().next().startTime());
        Assertions.assertEquals(OffsetDateTime.parse("2021-08-15T13:12:30Z"), response.iterator().next().endTime());
        Assertions.assertEquals("iykhy", response.iterator().next().eventName());
        Assertions.assertEquals("fvjlboxqvkjlmx", response.iterator().next().eventTypeName());
        Assertions.assertEquals(3072021334506042533L, response.iterator().next().queryId());
        Assertions.assertEquals("nhdwdigumbnra", response.iterator().next().databaseName());
        Assertions.assertEquals(3202980934281786678L, response.iterator().next().userId());
        Assertions.assertEquals(1713814039822414166L, response.iterator().next().count());
        Assertions.assertEquals(35.34592005466792D, response.iterator().next().totalTimeInMs());
    }
}
