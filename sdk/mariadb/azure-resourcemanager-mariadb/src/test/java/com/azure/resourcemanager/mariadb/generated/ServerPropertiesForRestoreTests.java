// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.util.BinaryData;
import com.azure.resourcemanager.mariadb.models.GeoRedundantBackup;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.ServerPropertiesForRestore;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageAutogrow;
import com.azure.resourcemanager.mariadb.models.StorageProfile;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;

public final class ServerPropertiesForRestoreTests {
    @org.junit.jupiter.api.Test
    public void testDeserialize() throws Exception {
        ServerPropertiesForRestore model = BinaryData.fromString(
            "{\"createMode\":\"PointInTimeRestore\",\"sourceServerId\":\"mueedndrdvstk\",\"restorePointInTime\":\"2021-06-15T19:49:02Z\",\"version\":\"10.2\",\"sslEnforcement\":\"Disabled\",\"minimalTlsVersion\":\"TLS1_0\",\"publicNetworkAccess\":\"Disabled\",\"storageProfile\":{\"backupRetentionDays\":669500000,\"geoRedundantBackup\":\"Enabled\",\"storageMB\":1434664141,\"storageAutogrow\":\"Enabled\"}}")
            .toObject(ServerPropertiesForRestore.class);
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, model.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_0, model.minimalTlsVersion());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals(669500000, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1434664141, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("mueedndrdvstk", model.sourceServerId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-15T19:49:02Z"), model.restorePointInTime());
    }

    @org.junit.jupiter.api.Test
    public void testSerialize() throws Exception {
        ServerPropertiesForRestore model = new ServerPropertiesForRestore().withVersion(ServerVersion.ONE_ZERO_TWO)
            .withSslEnforcement(SslEnforcementEnum.DISABLED)
            .withMinimalTlsVersion(MinimalTlsVersionEnum.TLS1_0)
            .withPublicNetworkAccess(PublicNetworkAccessEnum.DISABLED)
            .withStorageProfile(new StorageProfile().withBackupRetentionDays(669500000)
                .withGeoRedundantBackup(GeoRedundantBackup.ENABLED)
                .withStorageMB(1434664141)
                .withStorageAutogrow(StorageAutogrow.ENABLED))
            .withSourceServerId("mueedndrdvstk")
            .withRestorePointInTime(OffsetDateTime.parse("2021-06-15T19:49:02Z"));
        model = BinaryData.fromObject(model).toObject(ServerPropertiesForRestore.class);
        Assertions.assertEquals(ServerVersion.ONE_ZERO_TWO, model.version());
        Assertions.assertEquals(SslEnforcementEnum.DISABLED, model.sslEnforcement());
        Assertions.assertEquals(MinimalTlsVersionEnum.TLS1_0, model.minimalTlsVersion());
        Assertions.assertEquals(PublicNetworkAccessEnum.DISABLED, model.publicNetworkAccess());
        Assertions.assertEquals(669500000, model.storageProfile().backupRetentionDays());
        Assertions.assertEquals(GeoRedundantBackup.ENABLED, model.storageProfile().geoRedundantBackup());
        Assertions.assertEquals(1434664141, model.storageProfile().storageMB());
        Assertions.assertEquals(StorageAutogrow.ENABLED, model.storageProfile().storageAutogrow());
        Assertions.assertEquals("mueedndrdvstk", model.sourceServerId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-06-15T19:49:02Z"), model.restorePointInTime());
    }
}
