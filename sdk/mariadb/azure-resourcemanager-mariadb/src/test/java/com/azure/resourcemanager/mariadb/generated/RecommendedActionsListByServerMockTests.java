// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.generated;

import com.azure.core.credential.AccessToken;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpRequest;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.PagedIterable;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.profile.AzureProfile;
import com.azure.resourcemanager.mariadb.MariaDBManager;
import com.azure.resourcemanager.mariadb.models.RecommendationAction;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.mockito.Mockito;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

public final class RecommendedActionsListByServerMockTests {
    @Test
    public void testListByServer() throws Exception {
        HttpClient httpClient = Mockito.mock(HttpClient.class);
        HttpResponse httpResponse = Mockito.mock(HttpResponse.class);
        ArgumentCaptor<HttpRequest> httpRequest = ArgumentCaptor.forClass(HttpRequest.class);

        String responseStr =
            "{\"value\":[{\"properties\":{\"advisorName\":\"cyohpfkyrkdbd\",\"sessionId\":\"ogsjkmnwqjno\",\"actionId\":1666235741,\"createdTime\":\"2021-12-10T12:55:18Z\",\"expirationTime\":\"2021-03-17T05:15:51Z\",\"reason\":\"iacegfnmn\",\"recommendationType\":\"pmvmemfnczdwvv\",\"details\":{\"db\":\"xlllchp\",\"vsjcswsmystuluqy\":\"evwrdnhfuk\",\"qbmfpjbabwidf\":\"fcvlerch\"}},\"id\":\"xsspuunnoxyhk\",\"name\":\"g\",\"type\":\"ddrihpf\"}]}";

        Mockito.when(httpResponse.getStatusCode()).thenReturn(200);
        Mockito.when(httpResponse.getHeaders()).thenReturn(new HttpHeaders());
        Mockito
            .when(httpResponse.getBody())
            .thenReturn(Flux.just(ByteBuffer.wrap(responseStr.getBytes(StandardCharsets.UTF_8))));
        Mockito
            .when(httpResponse.getBodyAsByteArray())
            .thenReturn(Mono.just(responseStr.getBytes(StandardCharsets.UTF_8)));
        Mockito
            .when(httpClient.send(httpRequest.capture(), Mockito.any()))
            .thenReturn(
                Mono
                    .defer(
                        () -> {
                            Mockito.when(httpResponse.getRequest()).thenReturn(httpRequest.getValue());
                            return Mono.just(httpResponse);
                        }));

        MariaDBManager manager =
            MariaDBManager
                .configure()
                .withHttpClient(httpClient)
                .authenticate(
                    tokenRequestContext -> Mono.just(new AccessToken("this_is_a_token", OffsetDateTime.MAX)),
                    new AzureProfile("", "", AzureEnvironment.AZURE));

        PagedIterable<RecommendationAction> response =
            manager
                .recommendedActions()
                .listByServer("yxccyb", "payakkud", "px", "wjplma", com.azure.core.util.Context.NONE);

        Assertions.assertEquals("cyohpfkyrkdbd", response.iterator().next().advisorName());
        Assertions.assertEquals("ogsjkmnwqjno", response.iterator().next().sessionId());
        Assertions.assertEquals(1666235741, response.iterator().next().actionId());
        Assertions.assertEquals(OffsetDateTime.parse("2021-12-10T12:55:18Z"), response.iterator().next().createdTime());
        Assertions
            .assertEquals(OffsetDateTime.parse("2021-03-17T05:15:51Z"), response.iterator().next().expirationTime());
        Assertions.assertEquals("iacegfnmn", response.iterator().next().reason());
        Assertions.assertEquals("pmvmemfnczdwvv", response.iterator().next().recommendationType());
        Assertions.assertEquals("xlllchp", response.iterator().next().details().get("db"));
    }
}
