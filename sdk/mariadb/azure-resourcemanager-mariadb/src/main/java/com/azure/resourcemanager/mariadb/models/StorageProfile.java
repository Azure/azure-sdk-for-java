// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Storage Profile properties of a server.
 */
@Fluent
public final class StorageProfile implements JsonSerializable<StorageProfile> {
    /*
     * Backup retention days for the server.
     */
    private Integer backupRetentionDays;

    /*
     * Enable Geo-redundant or not for server backup.
     */
    private GeoRedundantBackup geoRedundantBackup;

    /*
     * Max storage allowed for a server.
     */
    private Integer storageMB;

    /*
     * Enable Storage Auto Grow.
     */
    private StorageAutogrow storageAutogrow;

    /**
     * Creates an instance of StorageProfile class.
     */
    public StorageProfile() {
    }

    /**
     * Get the backupRetentionDays property: Backup retention days for the server.
     * 
     * @return the backupRetentionDays value.
     */
    public Integer backupRetentionDays() {
        return this.backupRetentionDays;
    }

    /**
     * Set the backupRetentionDays property: Backup retention days for the server.
     * 
     * @param backupRetentionDays the backupRetentionDays value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withBackupRetentionDays(Integer backupRetentionDays) {
        this.backupRetentionDays = backupRetentionDays;
        return this;
    }

    /**
     * Get the geoRedundantBackup property: Enable Geo-redundant or not for server backup.
     * 
     * @return the geoRedundantBackup value.
     */
    public GeoRedundantBackup geoRedundantBackup() {
        return this.geoRedundantBackup;
    }

    /**
     * Set the geoRedundantBackup property: Enable Geo-redundant or not for server backup.
     * 
     * @param geoRedundantBackup the geoRedundantBackup value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withGeoRedundantBackup(GeoRedundantBackup geoRedundantBackup) {
        this.geoRedundantBackup = geoRedundantBackup;
        return this;
    }

    /**
     * Get the storageMB property: Max storage allowed for a server.
     * 
     * @return the storageMB value.
     */
    public Integer storageMB() {
        return this.storageMB;
    }

    /**
     * Set the storageMB property: Max storage allowed for a server.
     * 
     * @param storageMB the storageMB value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withStorageMB(Integer storageMB) {
        this.storageMB = storageMB;
        return this;
    }

    /**
     * Get the storageAutogrow property: Enable Storage Auto Grow.
     * 
     * @return the storageAutogrow value.
     */
    public StorageAutogrow storageAutogrow() {
        return this.storageAutogrow;
    }

    /**
     * Set the storageAutogrow property: Enable Storage Auto Grow.
     * 
     * @param storageAutogrow the storageAutogrow value to set.
     * @return the StorageProfile object itself.
     */
    public StorageProfile withStorageAutogrow(StorageAutogrow storageAutogrow) {
        this.storageAutogrow = storageAutogrow;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeNumberField("backupRetentionDays", this.backupRetentionDays);
        jsonWriter.writeStringField("geoRedundantBackup",
            this.geoRedundantBackup == null ? null : this.geoRedundantBackup.toString());
        jsonWriter.writeNumberField("storageMB", this.storageMB);
        jsonWriter.writeStringField("storageAutogrow",
            this.storageAutogrow == null ? null : this.storageAutogrow.toString());
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of StorageProfile from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of StorageProfile if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the StorageProfile.
     */
    public static StorageProfile fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            StorageProfile deserializedStorageProfile = new StorageProfile();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("backupRetentionDays".equals(fieldName)) {
                    deserializedStorageProfile.backupRetentionDays = reader.getNullable(JsonReader::getInt);
                } else if ("geoRedundantBackup".equals(fieldName)) {
                    deserializedStorageProfile.geoRedundantBackup = GeoRedundantBackup.fromString(reader.getString());
                } else if ("storageMB".equals(fieldName)) {
                    deserializedStorageProfile.storageMB = reader.getNullable(JsonReader::getInt);
                } else if ("storageAutogrow".equals(fieldName)) {
                    deserializedStorageProfile.storageAutogrow = StorageAutogrow.fromString(reader.getString());
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedStorageProfile;
        });
    }
}
