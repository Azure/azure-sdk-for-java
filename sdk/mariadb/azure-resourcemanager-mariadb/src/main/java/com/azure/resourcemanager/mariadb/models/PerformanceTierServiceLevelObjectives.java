// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * Service level objectives for performance tier.
 */
@Fluent
public final class PerformanceTierServiceLevelObjectives
    implements JsonSerializable<PerformanceTierServiceLevelObjectives> {
    /*
     * ID for the service level objective.
     */
    private String id;

    /*
     * Edition of the performance tier.
     */
    private String edition;

    /*
     * vCore associated with the service level objective
     */
    private Integer vCore;

    /*
     * Hardware generation associated with the service level objective
     */
    private String hardwareGeneration;

    /*
     * Maximum Backup retention in days for the performance tier edition
     */
    private Integer maxBackupRetentionDays;

    /*
     * Minimum Backup retention in days for the performance tier edition
     */
    private Integer minBackupRetentionDays;

    /*
     * Max storage allowed for a server.
     */
    private Integer maxStorageMB;

    /*
     * Max storage allowed for a server.
     */
    private Integer minStorageMB;

    /**
     * Creates an instance of PerformanceTierServiceLevelObjectives class.
     */
    public PerformanceTierServiceLevelObjectives() {
    }

    /**
     * Get the id property: ID for the service level objective.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: ID for the service level objective.
     * 
     * @param id the id value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the edition property: Edition of the performance tier.
     * 
     * @return the edition value.
     */
    public String edition() {
        return this.edition;
    }

    /**
     * Set the edition property: Edition of the performance tier.
     * 
     * @param edition the edition value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withEdition(String edition) {
        this.edition = edition;
        return this;
    }

    /**
     * Get the vCore property: vCore associated with the service level objective.
     * 
     * @return the vCore value.
     */
    public Integer vCore() {
        return this.vCore;
    }

    /**
     * Set the vCore property: vCore associated with the service level objective.
     * 
     * @param vCore the vCore value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withVCore(Integer vCore) {
        this.vCore = vCore;
        return this;
    }

    /**
     * Get the hardwareGeneration property: Hardware generation associated with the service level objective.
     * 
     * @return the hardwareGeneration value.
     */
    public String hardwareGeneration() {
        return this.hardwareGeneration;
    }

    /**
     * Set the hardwareGeneration property: Hardware generation associated with the service level objective.
     * 
     * @param hardwareGeneration the hardwareGeneration value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withHardwareGeneration(String hardwareGeneration) {
        this.hardwareGeneration = hardwareGeneration;
        return this;
    }

    /**
     * Get the maxBackupRetentionDays property: Maximum Backup retention in days for the performance tier edition.
     * 
     * @return the maxBackupRetentionDays value.
     */
    public Integer maxBackupRetentionDays() {
        return this.maxBackupRetentionDays;
    }

    /**
     * Set the maxBackupRetentionDays property: Maximum Backup retention in days for the performance tier edition.
     * 
     * @param maxBackupRetentionDays the maxBackupRetentionDays value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withMaxBackupRetentionDays(Integer maxBackupRetentionDays) {
        this.maxBackupRetentionDays = maxBackupRetentionDays;
        return this;
    }

    /**
     * Get the minBackupRetentionDays property: Minimum Backup retention in days for the performance tier edition.
     * 
     * @return the minBackupRetentionDays value.
     */
    public Integer minBackupRetentionDays() {
        return this.minBackupRetentionDays;
    }

    /**
     * Set the minBackupRetentionDays property: Minimum Backup retention in days for the performance tier edition.
     * 
     * @param minBackupRetentionDays the minBackupRetentionDays value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withMinBackupRetentionDays(Integer minBackupRetentionDays) {
        this.minBackupRetentionDays = minBackupRetentionDays;
        return this;
    }

    /**
     * Get the maxStorageMB property: Max storage allowed for a server.
     * 
     * @return the maxStorageMB value.
     */
    public Integer maxStorageMB() {
        return this.maxStorageMB;
    }

    /**
     * Set the maxStorageMB property: Max storage allowed for a server.
     * 
     * @param maxStorageMB the maxStorageMB value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withMaxStorageMB(Integer maxStorageMB) {
        this.maxStorageMB = maxStorageMB;
        return this;
    }

    /**
     * Get the minStorageMB property: Max storage allowed for a server.
     * 
     * @return the minStorageMB value.
     */
    public Integer minStorageMB() {
        return this.minStorageMB;
    }

    /**
     * Set the minStorageMB property: Max storage allowed for a server.
     * 
     * @param minStorageMB the minStorageMB value to set.
     * @return the PerformanceTierServiceLevelObjectives object itself.
     */
    public PerformanceTierServiceLevelObjectives withMinStorageMB(Integer minStorageMB) {
        this.minStorageMB = minStorageMB;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("id", this.id);
        jsonWriter.writeStringField("edition", this.edition);
        jsonWriter.writeNumberField("vCore", this.vCore);
        jsonWriter.writeStringField("hardwareGeneration", this.hardwareGeneration);
        jsonWriter.writeNumberField("maxBackupRetentionDays", this.maxBackupRetentionDays);
        jsonWriter.writeNumberField("minBackupRetentionDays", this.minBackupRetentionDays);
        jsonWriter.writeNumberField("maxStorageMB", this.maxStorageMB);
        jsonWriter.writeNumberField("minStorageMB", this.minStorageMB);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of PerformanceTierServiceLevelObjectives from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of PerformanceTierServiceLevelObjectives if the JsonReader was pointing to an instance of it,
     * or null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the PerformanceTierServiceLevelObjectives.
     */
    public static PerformanceTierServiceLevelObjectives fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            PerformanceTierServiceLevelObjectives deserializedPerformanceTierServiceLevelObjectives
                = new PerformanceTierServiceLevelObjectives();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("id".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.id = reader.getString();
                } else if ("edition".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.edition = reader.getString();
                } else if ("vCore".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.vCore = reader.getNullable(JsonReader::getInt);
                } else if ("hardwareGeneration".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.hardwareGeneration = reader.getString();
                } else if ("maxBackupRetentionDays".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.maxBackupRetentionDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("minBackupRetentionDays".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.minBackupRetentionDays
                        = reader.getNullable(JsonReader::getInt);
                } else if ("maxStorageMB".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.maxStorageMB
                        = reader.getNullable(JsonReader::getInt);
                } else if ("minStorageMB".equals(fieldName)) {
                    deserializedPerformanceTierServiceLevelObjectives.minStorageMB
                        = reader.getNullable(JsonReader::getInt);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedPerformanceTierServiceLevelObjectives;
        });
    }
}
