// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb;

import com.azure.core.credential.TokenCredential;
import com.azure.core.http.HttpClient;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.AddDatePolicy;
import com.azure.core.http.policy.BearerTokenAuthenticationPolicy;
import com.azure.core.http.policy.HttpLogOptions;
import com.azure.core.http.policy.HttpLoggingPolicy;
import com.azure.core.http.policy.HttpPipelinePolicy;
import com.azure.core.http.policy.HttpPolicyProviders;
import com.azure.core.http.policy.RequestIdPolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.management.profile.AzureProfile;
import com.azure.core.util.Configuration;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.mariadb.fluent.MariaDBManagementClient;
import com.azure.resourcemanager.mariadb.implementation.AdvisorsImpl;
import com.azure.resourcemanager.mariadb.implementation.CheckNameAvailabilitiesImpl;
import com.azure.resourcemanager.mariadb.implementation.ConfigurationsImpl;
import com.azure.resourcemanager.mariadb.implementation.DatabasesImpl;
import com.azure.resourcemanager.mariadb.implementation.FirewallRulesImpl;
import com.azure.resourcemanager.mariadb.implementation.LocationBasedPerformanceTiersImpl;
import com.azure.resourcemanager.mariadb.implementation.LocationBasedRecommendedActionSessionsOperationStatusImpl;
import com.azure.resourcemanager.mariadb.implementation.LocationBasedRecommendedActionSessionsResultsImpl;
import com.azure.resourcemanager.mariadb.implementation.LogFilesImpl;
import com.azure.resourcemanager.mariadb.implementation.MariaDBManagementClientBuilder;
import com.azure.resourcemanager.mariadb.implementation.OperationsImpl;
import com.azure.resourcemanager.mariadb.implementation.PrivateEndpointConnectionsImpl;
import com.azure.resourcemanager.mariadb.implementation.PrivateLinkResourcesImpl;
import com.azure.resourcemanager.mariadb.implementation.QueryTextsImpl;
import com.azure.resourcemanager.mariadb.implementation.RecommendedActionsImpl;
import com.azure.resourcemanager.mariadb.implementation.RecoverableServersImpl;
import com.azure.resourcemanager.mariadb.implementation.ReplicasImpl;
import com.azure.resourcemanager.mariadb.implementation.ResourceProvidersImpl;
import com.azure.resourcemanager.mariadb.implementation.ServerBasedPerformanceTiersImpl;
import com.azure.resourcemanager.mariadb.implementation.ServerParametersImpl;
import com.azure.resourcemanager.mariadb.implementation.ServerSecurityAlertPoliciesImpl;
import com.azure.resourcemanager.mariadb.implementation.ServersImpl;
import com.azure.resourcemanager.mariadb.implementation.TopQueryStatisticsImpl;
import com.azure.resourcemanager.mariadb.implementation.VirtualNetworkRulesImpl;
import com.azure.resourcemanager.mariadb.implementation.WaitStatisticsImpl;
import com.azure.resourcemanager.mariadb.models.Advisors;
import com.azure.resourcemanager.mariadb.models.CheckNameAvailabilities;
import com.azure.resourcemanager.mariadb.models.Configurations;
import com.azure.resourcemanager.mariadb.models.Databases;
import com.azure.resourcemanager.mariadb.models.FirewallRules;
import com.azure.resourcemanager.mariadb.models.LocationBasedPerformanceTiers;
import com.azure.resourcemanager.mariadb.models.LocationBasedRecommendedActionSessionsOperationStatus;
import com.azure.resourcemanager.mariadb.models.LocationBasedRecommendedActionSessionsResults;
import com.azure.resourcemanager.mariadb.models.LogFiles;
import com.azure.resourcemanager.mariadb.models.Operations;
import com.azure.resourcemanager.mariadb.models.PrivateEndpointConnections;
import com.azure.resourcemanager.mariadb.models.PrivateLinkResources;
import com.azure.resourcemanager.mariadb.models.QueryTexts;
import com.azure.resourcemanager.mariadb.models.RecommendedActions;
import com.azure.resourcemanager.mariadb.models.RecoverableServers;
import com.azure.resourcemanager.mariadb.models.Replicas;
import com.azure.resourcemanager.mariadb.models.ResourceProviders;
import com.azure.resourcemanager.mariadb.models.ServerBasedPerformanceTiers;
import com.azure.resourcemanager.mariadb.models.ServerParameters;
import com.azure.resourcemanager.mariadb.models.ServerSecurityAlertPolicies;
import com.azure.resourcemanager.mariadb.models.Servers;
import com.azure.resourcemanager.mariadb.models.TopQueryStatistics;
import com.azure.resourcemanager.mariadb.models.VirtualNetworkRules;
import com.azure.resourcemanager.mariadb.models.WaitStatistics;
import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Entry point to MariaDBManager. The Microsoft Azure management API provides create, read, update, and delete
 * functionality for Azure MariaDB resources including servers, databases, firewall rules, VNET rules, log files and
 * configurations with new business model.
 */
public final class MariaDBManager {
    private Servers servers;

    private Replicas replicas;

    private FirewallRules firewallRules;

    private VirtualNetworkRules virtualNetworkRules;

    private Databases databases;

    private Configurations configurations;

    private ServerParameters serverParameters;

    private LogFiles logFiles;

    private RecoverableServers recoverableServers;

    private ServerBasedPerformanceTiers serverBasedPerformanceTiers;

    private LocationBasedPerformanceTiers locationBasedPerformanceTiers;

    private CheckNameAvailabilities checkNameAvailabilities;

    private Operations operations;

    private QueryTexts queryTexts;

    private TopQueryStatistics topQueryStatistics;

    private WaitStatistics waitStatistics;

    private ResourceProviders resourceProviders;

    private Advisors advisors;

    private RecommendedActions recommendedActions;

    private LocationBasedRecommendedActionSessionsOperationStatus locationBasedRecommendedActionSessionsOperationStatus;

    private LocationBasedRecommendedActionSessionsResults locationBasedRecommendedActionSessionsResults;

    private PrivateEndpointConnections privateEndpointConnections;

    private PrivateLinkResources privateLinkResources;

    private ServerSecurityAlertPolicies serverSecurityAlertPolicies;

    private final MariaDBManagementClient clientObject;

    private MariaDBManager(HttpPipeline httpPipeline, AzureProfile profile, Duration defaultPollInterval) {
        Objects.requireNonNull(httpPipeline, "'httpPipeline' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        this.clientObject =
            new MariaDBManagementClientBuilder()
                .pipeline(httpPipeline)
                .endpoint(profile.getEnvironment().getResourceManagerEndpoint())
                .subscriptionId(profile.getSubscriptionId())
                .defaultPollInterval(defaultPollInterval)
                .buildClient();
    }

    /**
     * Creates an instance of MariaDB service API entry point.
     *
     * @param credential the credential to use.
     * @param profile the Azure profile for client.
     * @return the MariaDB service API instance.
     */
    public static MariaDBManager authenticate(TokenCredential credential, AzureProfile profile) {
        Objects.requireNonNull(credential, "'credential' cannot be null.");
        Objects.requireNonNull(profile, "'profile' cannot be null.");
        return configure().authenticate(credential, profile);
    }

    /**
     * Gets a Configurable instance that can be used to create MariaDBManager with optional configuration.
     *
     * @return the Configurable instance allowing configurations.
     */
    public static Configurable configure() {
        return new MariaDBManager.Configurable();
    }

    /** The Configurable allowing configurations to be set. */
    public static final class Configurable {
        private final ClientLogger logger = new ClientLogger(Configurable.class);

        private HttpClient httpClient;
        private HttpLogOptions httpLogOptions;
        private final List<HttpPipelinePolicy> policies = new ArrayList<>();
        private RetryPolicy retryPolicy;
        private Duration defaultPollInterval;

        private Configurable() {
        }

        /**
         * Sets the http client.
         *
         * @param httpClient the HTTP client.
         * @return the configurable object itself.
         */
        public Configurable withHttpClient(HttpClient httpClient) {
            this.httpClient = Objects.requireNonNull(httpClient, "'httpClient' cannot be null.");
            return this;
        }

        /**
         * Sets the logging options to the HTTP pipeline.
         *
         * @param httpLogOptions the HTTP log options.
         * @return the configurable object itself.
         */
        public Configurable withLogOptions(HttpLogOptions httpLogOptions) {
            this.httpLogOptions = Objects.requireNonNull(httpLogOptions, "'httpLogOptions' cannot be null.");
            return this;
        }

        /**
         * Adds the pipeline policy to the HTTP pipeline.
         *
         * @param policy the HTTP pipeline policy.
         * @return the configurable object itself.
         */
        public Configurable withPolicy(HttpPipelinePolicy policy) {
            this.policies.add(Objects.requireNonNull(policy, "'policy' cannot be null."));
            return this;
        }

        /**
         * Sets the retry policy to the HTTP pipeline.
         *
         * @param retryPolicy the HTTP pipeline retry policy.
         * @return the configurable object itself.
         */
        public Configurable withRetryPolicy(RetryPolicy retryPolicy) {
            this.retryPolicy = Objects.requireNonNull(retryPolicy, "'retryPolicy' cannot be null.");
            return this;
        }

        /**
         * Sets the default poll interval, used when service does not provide "Retry-After" header.
         *
         * @param defaultPollInterval the default poll interval.
         * @return the configurable object itself.
         */
        public Configurable withDefaultPollInterval(Duration defaultPollInterval) {
            this.defaultPollInterval = Objects.requireNonNull(defaultPollInterval, "'retryPolicy' cannot be null.");
            if (this.defaultPollInterval.isNegative()) {
                throw logger.logExceptionAsError(new IllegalArgumentException("'httpPipeline' cannot be negative"));
            }
            return this;
        }

        /**
         * Creates an instance of MariaDB service API entry point.
         *
         * @param credential the credential to use.
         * @param profile the Azure profile for client.
         * @return the MariaDB service API instance.
         */
        public MariaDBManager authenticate(TokenCredential credential, AzureProfile profile) {
            Objects.requireNonNull(credential, "'credential' cannot be null.");
            Objects.requireNonNull(profile, "'profile' cannot be null.");

            StringBuilder userAgentBuilder = new StringBuilder();
            userAgentBuilder
                .append("azsdk-java")
                .append("-")
                .append("com.azure.resourcemanager.mariadb")
                .append("/")
                .append("1.0.0-beta.1");
            if (!Configuration.getGlobalConfiguration().get("AZURE_TELEMETRY_DISABLED", false)) {
                userAgentBuilder
                    .append(" (")
                    .append(Configuration.getGlobalConfiguration().get("java.version"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.name"))
                    .append("; ")
                    .append(Configuration.getGlobalConfiguration().get("os.version"))
                    .append("; auto-generated)");
            } else {
                userAgentBuilder.append(" (auto-generated)");
            }

            if (retryPolicy == null) {
                retryPolicy = new RetryPolicy("Retry-After", ChronoUnit.SECONDS);
            }
            List<HttpPipelinePolicy> policies = new ArrayList<>();
            policies.add(new UserAgentPolicy(userAgentBuilder.toString()));
            policies.add(new RequestIdPolicy());
            HttpPolicyProviders.addBeforeRetryPolicies(policies);
            policies.add(retryPolicy);
            policies.add(new AddDatePolicy());
            policies
                .add(
                    new BearerTokenAuthenticationPolicy(
                        credential, profile.getEnvironment().getManagementEndpoint() + "/.default"));
            policies.addAll(this.policies);
            HttpPolicyProviders.addAfterRetryPolicies(policies);
            policies.add(new HttpLoggingPolicy(httpLogOptions));
            HttpPipeline httpPipeline =
                new HttpPipelineBuilder()
                    .httpClient(httpClient)
                    .policies(policies.toArray(new HttpPipelinePolicy[0]))
                    .build();
            return new MariaDBManager(httpPipeline, profile, defaultPollInterval);
        }
    }

    /** @return Resource collection API of Servers. */
    public Servers servers() {
        if (this.servers == null) {
            this.servers = new ServersImpl(clientObject.getServers(), this);
        }
        return servers;
    }

    /** @return Resource collection API of Replicas. */
    public Replicas replicas() {
        if (this.replicas == null) {
            this.replicas = new ReplicasImpl(clientObject.getReplicas(), this);
        }
        return replicas;
    }

    /** @return Resource collection API of FirewallRules. */
    public FirewallRules firewallRules() {
        if (this.firewallRules == null) {
            this.firewallRules = new FirewallRulesImpl(clientObject.getFirewallRules(), this);
        }
        return firewallRules;
    }

    /** @return Resource collection API of VirtualNetworkRules. */
    public VirtualNetworkRules virtualNetworkRules() {
        if (this.virtualNetworkRules == null) {
            this.virtualNetworkRules = new VirtualNetworkRulesImpl(clientObject.getVirtualNetworkRules(), this);
        }
        return virtualNetworkRules;
    }

    /** @return Resource collection API of Databases. */
    public Databases databases() {
        if (this.databases == null) {
            this.databases = new DatabasesImpl(clientObject.getDatabases(), this);
        }
        return databases;
    }

    /** @return Resource collection API of Configurations. */
    public Configurations configurations() {
        if (this.configurations == null) {
            this.configurations = new ConfigurationsImpl(clientObject.getConfigurations(), this);
        }
        return configurations;
    }

    /** @return Resource collection API of ServerParameters. */
    public ServerParameters serverParameters() {
        if (this.serverParameters == null) {
            this.serverParameters = new ServerParametersImpl(clientObject.getServerParameters(), this);
        }
        return serverParameters;
    }

    /** @return Resource collection API of LogFiles. */
    public LogFiles logFiles() {
        if (this.logFiles == null) {
            this.logFiles = new LogFilesImpl(clientObject.getLogFiles(), this);
        }
        return logFiles;
    }

    /** @return Resource collection API of RecoverableServers. */
    public RecoverableServers recoverableServers() {
        if (this.recoverableServers == null) {
            this.recoverableServers = new RecoverableServersImpl(clientObject.getRecoverableServers(), this);
        }
        return recoverableServers;
    }

    /** @return Resource collection API of ServerBasedPerformanceTiers. */
    public ServerBasedPerformanceTiers serverBasedPerformanceTiers() {
        if (this.serverBasedPerformanceTiers == null) {
            this.serverBasedPerformanceTiers =
                new ServerBasedPerformanceTiersImpl(clientObject.getServerBasedPerformanceTiers(), this);
        }
        return serverBasedPerformanceTiers;
    }

    /** @return Resource collection API of LocationBasedPerformanceTiers. */
    public LocationBasedPerformanceTiers locationBasedPerformanceTiers() {
        if (this.locationBasedPerformanceTiers == null) {
            this.locationBasedPerformanceTiers =
                new LocationBasedPerformanceTiersImpl(clientObject.getLocationBasedPerformanceTiers(), this);
        }
        return locationBasedPerformanceTiers;
    }

    /** @return Resource collection API of CheckNameAvailabilities. */
    public CheckNameAvailabilities checkNameAvailabilities() {
        if (this.checkNameAvailabilities == null) {
            this.checkNameAvailabilities =
                new CheckNameAvailabilitiesImpl(clientObject.getCheckNameAvailabilities(), this);
        }
        return checkNameAvailabilities;
    }

    /** @return Resource collection API of Operations. */
    public Operations operations() {
        if (this.operations == null) {
            this.operations = new OperationsImpl(clientObject.getOperations(), this);
        }
        return operations;
    }

    /** @return Resource collection API of QueryTexts. */
    public QueryTexts queryTexts() {
        if (this.queryTexts == null) {
            this.queryTexts = new QueryTextsImpl(clientObject.getQueryTexts(), this);
        }
        return queryTexts;
    }

    /** @return Resource collection API of TopQueryStatistics. */
    public TopQueryStatistics topQueryStatistics() {
        if (this.topQueryStatistics == null) {
            this.topQueryStatistics = new TopQueryStatisticsImpl(clientObject.getTopQueryStatistics(), this);
        }
        return topQueryStatistics;
    }

    /** @return Resource collection API of WaitStatistics. */
    public WaitStatistics waitStatistics() {
        if (this.waitStatistics == null) {
            this.waitStatistics = new WaitStatisticsImpl(clientObject.getWaitStatistics(), this);
        }
        return waitStatistics;
    }

    /** @return Resource collection API of ResourceProviders. */
    public ResourceProviders resourceProviders() {
        if (this.resourceProviders == null) {
            this.resourceProviders = new ResourceProvidersImpl(clientObject.getResourceProviders(), this);
        }
        return resourceProviders;
    }

    /** @return Resource collection API of Advisors. */
    public Advisors advisors() {
        if (this.advisors == null) {
            this.advisors = new AdvisorsImpl(clientObject.getAdvisors(), this);
        }
        return advisors;
    }

    /** @return Resource collection API of RecommendedActions. */
    public RecommendedActions recommendedActions() {
        if (this.recommendedActions == null) {
            this.recommendedActions = new RecommendedActionsImpl(clientObject.getRecommendedActions(), this);
        }
        return recommendedActions;
    }

    /** @return Resource collection API of LocationBasedRecommendedActionSessionsOperationStatus. */
    public LocationBasedRecommendedActionSessionsOperationStatus
        locationBasedRecommendedActionSessionsOperationStatus() {
        if (this.locationBasedRecommendedActionSessionsOperationStatus == null) {
            this.locationBasedRecommendedActionSessionsOperationStatus =
                new LocationBasedRecommendedActionSessionsOperationStatusImpl(
                    clientObject.getLocationBasedRecommendedActionSessionsOperationStatus(), this);
        }
        return locationBasedRecommendedActionSessionsOperationStatus;
    }

    /** @return Resource collection API of LocationBasedRecommendedActionSessionsResults. */
    public LocationBasedRecommendedActionSessionsResults locationBasedRecommendedActionSessionsResults() {
        if (this.locationBasedRecommendedActionSessionsResults == null) {
            this.locationBasedRecommendedActionSessionsResults =
                new LocationBasedRecommendedActionSessionsResultsImpl(
                    clientObject.getLocationBasedRecommendedActionSessionsResults(), this);
        }
        return locationBasedRecommendedActionSessionsResults;
    }

    /** @return Resource collection API of PrivateEndpointConnections. */
    public PrivateEndpointConnections privateEndpointConnections() {
        if (this.privateEndpointConnections == null) {
            this.privateEndpointConnections =
                new PrivateEndpointConnectionsImpl(clientObject.getPrivateEndpointConnections(), this);
        }
        return privateEndpointConnections;
    }

    /** @return Resource collection API of PrivateLinkResources. */
    public PrivateLinkResources privateLinkResources() {
        if (this.privateLinkResources == null) {
            this.privateLinkResources = new PrivateLinkResourcesImpl(clientObject.getPrivateLinkResources(), this);
        }
        return privateLinkResources;
    }

    /** @return Resource collection API of ServerSecurityAlertPolicies. */
    public ServerSecurityAlertPolicies serverSecurityAlertPolicies() {
        if (this.serverSecurityAlertPolicies == null) {
            this.serverSecurityAlertPolicies =
                new ServerSecurityAlertPoliciesImpl(clientObject.getServerSecurityAlertPolicies(), this);
        }
        return serverSecurityAlertPolicies;
    }

    /**
     * @return Wrapped service client MariaDBManagementClient providing direct access to the underlying auto-generated
     *     API implementation, based on Azure REST API.
     */
    public MariaDBManagementClient serviceClient() {
        return this.clientObject;
    }
}
