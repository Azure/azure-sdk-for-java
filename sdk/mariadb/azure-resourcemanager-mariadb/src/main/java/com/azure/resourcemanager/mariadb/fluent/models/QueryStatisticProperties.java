// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;

/**
 * The properties of a query statistic.
 */
@Fluent
public final class QueryStatisticProperties implements JsonSerializable<QueryStatisticProperties> {
    /*
     * Database query identifier.
     */
    private String queryId;

    /*
     * Observation start time.
     */
    private OffsetDateTime startTime;

    /*
     * Observation end time.
     */
    private OffsetDateTime endTime;

    /*
     * Aggregation function name.
     */
    private String aggregationFunction;

    /*
     * The list of database names.
     */
    private List<String> databaseNames;

    /*
     * Number of query executions in this time interval.
     */
    private Long queryExecutionCount;

    /*
     * Metric name.
     */
    private String metricName;

    /*
     * Metric display name.
     */
    private String metricDisplayName;

    /*
     * Metric value.
     */
    private Double metricValue;

    /*
     * Metric value unit.
     */
    private String metricValueUnit;

    /**
     * Creates an instance of QueryStatisticProperties class.
     */
    public QueryStatisticProperties() {
    }

    /**
     * Get the queryId property: Database query identifier.
     * 
     * @return the queryId value.
     */
    public String queryId() {
        return this.queryId;
    }

    /**
     * Set the queryId property: Database query identifier.
     * 
     * @param queryId the queryId value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withQueryId(String queryId) {
        this.queryId = queryId;
        return this;
    }

    /**
     * Get the startTime property: Observation start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Observation start time.
     * 
     * @param startTime the startTime value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Observation end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Observation end time.
     * 
     * @param endTime the endTime value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the aggregationFunction property: Aggregation function name.
     * 
     * @return the aggregationFunction value.
     */
    public String aggregationFunction() {
        return this.aggregationFunction;
    }

    /**
     * Set the aggregationFunction property: Aggregation function name.
     * 
     * @param aggregationFunction the aggregationFunction value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withAggregationFunction(String aggregationFunction) {
        this.aggregationFunction = aggregationFunction;
        return this;
    }

    /**
     * Get the databaseNames property: The list of database names.
     * 
     * @return the databaseNames value.
     */
    public List<String> databaseNames() {
        return this.databaseNames;
    }

    /**
     * Set the databaseNames property: The list of database names.
     * 
     * @param databaseNames the databaseNames value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withDatabaseNames(List<String> databaseNames) {
        this.databaseNames = databaseNames;
        return this;
    }

    /**
     * Get the queryExecutionCount property: Number of query executions in this time interval.
     * 
     * @return the queryExecutionCount value.
     */
    public Long queryExecutionCount() {
        return this.queryExecutionCount;
    }

    /**
     * Set the queryExecutionCount property: Number of query executions in this time interval.
     * 
     * @param queryExecutionCount the queryExecutionCount value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withQueryExecutionCount(Long queryExecutionCount) {
        this.queryExecutionCount = queryExecutionCount;
        return this;
    }

    /**
     * Get the metricName property: Metric name.
     * 
     * @return the metricName value.
     */
    public String metricName() {
        return this.metricName;
    }

    /**
     * Set the metricName property: Metric name.
     * 
     * @param metricName the metricName value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withMetricName(String metricName) {
        this.metricName = metricName;
        return this;
    }

    /**
     * Get the metricDisplayName property: Metric display name.
     * 
     * @return the metricDisplayName value.
     */
    public String metricDisplayName() {
        return this.metricDisplayName;
    }

    /**
     * Set the metricDisplayName property: Metric display name.
     * 
     * @param metricDisplayName the metricDisplayName value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withMetricDisplayName(String metricDisplayName) {
        this.metricDisplayName = metricDisplayName;
        return this;
    }

    /**
     * Get the metricValue property: Metric value.
     * 
     * @return the metricValue value.
     */
    public Double metricValue() {
        return this.metricValue;
    }

    /**
     * Set the metricValue property: Metric value.
     * 
     * @param metricValue the metricValue value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withMetricValue(Double metricValue) {
        this.metricValue = metricValue;
        return this;
    }

    /**
     * Get the metricValueUnit property: Metric value unit.
     * 
     * @return the metricValueUnit value.
     */
    public String metricValueUnit() {
        return this.metricValueUnit;
    }

    /**
     * Set the metricValueUnit property: Metric value unit.
     * 
     * @param metricValueUnit the metricValueUnit value to set.
     * @return the QueryStatisticProperties object itself.
     */
    public QueryStatisticProperties withMetricValueUnit(String metricValueUnit) {
        this.metricValueUnit = metricValueUnit;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("queryId", this.queryId);
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("aggregationFunction", this.aggregationFunction);
        jsonWriter.writeArrayField("databaseNames", this.databaseNames,
            (writer, element) -> writer.writeString(element));
        jsonWriter.writeNumberField("queryExecutionCount", this.queryExecutionCount);
        jsonWriter.writeStringField("metricName", this.metricName);
        jsonWriter.writeStringField("metricDisplayName", this.metricDisplayName);
        jsonWriter.writeNumberField("metricValue", this.metricValue);
        jsonWriter.writeStringField("metricValueUnit", this.metricValueUnit);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryStatisticProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryStatisticProperties if the JsonReader was pointing to an instance of it, or null if
     * it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryStatisticProperties.
     */
    public static QueryStatisticProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryStatisticProperties deserializedQueryStatisticProperties = new QueryStatisticProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("queryId".equals(fieldName)) {
                    deserializedQueryStatisticProperties.queryId = reader.getString();
                } else if ("startTime".equals(fieldName)) {
                    deserializedQueryStatisticProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedQueryStatisticProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("aggregationFunction".equals(fieldName)) {
                    deserializedQueryStatisticProperties.aggregationFunction = reader.getString();
                } else if ("databaseNames".equals(fieldName)) {
                    List<String> databaseNames = reader.readArray(reader1 -> reader1.getString());
                    deserializedQueryStatisticProperties.databaseNames = databaseNames;
                } else if ("queryExecutionCount".equals(fieldName)) {
                    deserializedQueryStatisticProperties.queryExecutionCount = reader.getNullable(JsonReader::getLong);
                } else if ("metricName".equals(fieldName)) {
                    deserializedQueryStatisticProperties.metricName = reader.getString();
                } else if ("metricDisplayName".equals(fieldName)) {
                    deserializedQueryStatisticProperties.metricDisplayName = reader.getString();
                } else if ("metricValue".equals(fieldName)) {
                    deserializedQueryStatisticProperties.metricValue = reader.getNullable(JsonReader::getDouble);
                } else if ("metricValueUnit".equals(fieldName)) {
                    deserializedQueryStatisticProperties.metricValueUnit = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryStatisticProperties;
        });
    }
}
