// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;

/**
 * The properties of a recommendation action.
 */
@Fluent
public final class RecommendationActionProperties implements JsonSerializable<RecommendationActionProperties> {
    /*
     * Advisor name.
     */
    private String advisorName;

    /*
     * Recommendation action session identifier.
     */
    private String sessionId;

    /*
     * Recommendation action identifier.
     */
    private Integer actionId;

    /*
     * Recommendation action creation time.
     */
    private OffsetDateTime createdTime;

    /*
     * Recommendation action expiration time.
     */
    private OffsetDateTime expirationTime;

    /*
     * Recommendation action reason.
     */
    private String reason;

    /*
     * Recommendation action type.
     */
    private String recommendationType;

    /*
     * Recommendation action details.
     */
    private Map<String, String> details;

    /**
     * Creates an instance of RecommendationActionProperties class.
     */
    public RecommendationActionProperties() {
    }

    /**
     * Get the advisorName property: Advisor name.
     * 
     * @return the advisorName value.
     */
    public String advisorName() {
        return this.advisorName;
    }

    /**
     * Set the advisorName property: Advisor name.
     * 
     * @param advisorName the advisorName value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withAdvisorName(String advisorName) {
        this.advisorName = advisorName;
        return this;
    }

    /**
     * Get the sessionId property: Recommendation action session identifier.
     * 
     * @return the sessionId value.
     */
    public String sessionId() {
        return this.sessionId;
    }

    /**
     * Set the sessionId property: Recommendation action session identifier.
     * 
     * @param sessionId the sessionId value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withSessionId(String sessionId) {
        this.sessionId = sessionId;
        return this;
    }

    /**
     * Get the actionId property: Recommendation action identifier.
     * 
     * @return the actionId value.
     */
    public Integer actionId() {
        return this.actionId;
    }

    /**
     * Set the actionId property: Recommendation action identifier.
     * 
     * @param actionId the actionId value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withActionId(Integer actionId) {
        this.actionId = actionId;
        return this;
    }

    /**
     * Get the createdTime property: Recommendation action creation time.
     * 
     * @return the createdTime value.
     */
    public OffsetDateTime createdTime() {
        return this.createdTime;
    }

    /**
     * Set the createdTime property: Recommendation action creation time.
     * 
     * @param createdTime the createdTime value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withCreatedTime(OffsetDateTime createdTime) {
        this.createdTime = createdTime;
        return this;
    }

    /**
     * Get the expirationTime property: Recommendation action expiration time.
     * 
     * @return the expirationTime value.
     */
    public OffsetDateTime expirationTime() {
        return this.expirationTime;
    }

    /**
     * Set the expirationTime property: Recommendation action expiration time.
     * 
     * @param expirationTime the expirationTime value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withExpirationTime(OffsetDateTime expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }

    /**
     * Get the reason property: Recommendation action reason.
     * 
     * @return the reason value.
     */
    public String reason() {
        return this.reason;
    }

    /**
     * Set the reason property: Recommendation action reason.
     * 
     * @param reason the reason value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withReason(String reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the recommendationType property: Recommendation action type.
     * 
     * @return the recommendationType value.
     */
    public String recommendationType() {
        return this.recommendationType;
    }

    /**
     * Set the recommendationType property: Recommendation action type.
     * 
     * @param recommendationType the recommendationType value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withRecommendationType(String recommendationType) {
        this.recommendationType = recommendationType;
        return this;
    }

    /**
     * Get the details property: Recommendation action details.
     * 
     * @return the details value.
     */
    public Map<String, String> details() {
        return this.details;
    }

    /**
     * Set the details property: Recommendation action details.
     * 
     * @param details the details value to set.
     * @return the RecommendationActionProperties object itself.
     */
    public RecommendationActionProperties withDetails(Map<String, String> details) {
        this.details = details;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("advisorName", this.advisorName);
        jsonWriter.writeStringField("sessionId", this.sessionId);
        jsonWriter.writeNumberField("actionId", this.actionId);
        jsonWriter.writeStringField("createdTime",
            this.createdTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.createdTime));
        jsonWriter.writeStringField("expirationTime",
            this.expirationTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.expirationTime));
        jsonWriter.writeStringField("reason", this.reason);
        jsonWriter.writeStringField("recommendationType", this.recommendationType);
        jsonWriter.writeMapField("details", this.details, (writer, element) -> writer.writeString(element));
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of RecommendationActionProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of RecommendationActionProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the RecommendationActionProperties.
     */
    public static RecommendationActionProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            RecommendationActionProperties deserializedRecommendationActionProperties
                = new RecommendationActionProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("advisorName".equals(fieldName)) {
                    deserializedRecommendationActionProperties.advisorName = reader.getString();
                } else if ("sessionId".equals(fieldName)) {
                    deserializedRecommendationActionProperties.sessionId = reader.getString();
                } else if ("actionId".equals(fieldName)) {
                    deserializedRecommendationActionProperties.actionId = reader.getNullable(JsonReader::getInt);
                } else if ("createdTime".equals(fieldName)) {
                    deserializedRecommendationActionProperties.createdTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("expirationTime".equals(fieldName)) {
                    deserializedRecommendationActionProperties.expirationTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("reason".equals(fieldName)) {
                    deserializedRecommendationActionProperties.reason = reader.getString();
                } else if ("recommendationType".equals(fieldName)) {
                    deserializedRecommendationActionProperties.recommendationType = reader.getString();
                } else if ("details".equals(fieldName)) {
                    Map<String, String> details = reader.readMap(reader1 -> reader1.getString());
                    deserializedRecommendationActionProperties.details = details;
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedRecommendationActionProperties;
        });
    }
}
