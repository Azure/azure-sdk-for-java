// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mariadb.models.MinimalTlsVersionEnum;
import com.azure.resourcemanager.mariadb.models.PublicNetworkAccessEnum;
import com.azure.resourcemanager.mariadb.models.ServerVersion;
import com.azure.resourcemanager.mariadb.models.SslEnforcementEnum;
import com.azure.resourcemanager.mariadb.models.StorageProfile;
import java.io.IOException;

/**
 * The properties that can be updated for a server.
 */
@Fluent
public final class ServerUpdateParametersProperties implements JsonSerializable<ServerUpdateParametersProperties> {
    /*
     * Storage profile of a server.
     */
    private StorageProfile storageProfile;

    /*
     * The password of the administrator login.
     */
    private String administratorLoginPassword;

    /*
     * The version of a server.
     */
    private ServerVersion version;

    /*
     * Enable ssl enforcement or not when connect to server.
     */
    private SslEnforcementEnum sslEnforcement;

    /*
     * Enforce a minimal Tls version for the server.
     */
    private MinimalTlsVersionEnum minimalTlsVersion;

    /*
     * Whether or not public network access is allowed for this server. Value is optional but if passed in, must be
     * 'Enabled' or 'Disabled'
     */
    private PublicNetworkAccessEnum publicNetworkAccess;

    /*
     * The replication role of the server.
     */
    private String replicationRole;

    /**
     * Creates an instance of ServerUpdateParametersProperties class.
     */
    public ServerUpdateParametersProperties() {
    }

    /**
     * Get the storageProfile property: Storage profile of a server.
     * 
     * @return the storageProfile value.
     */
    public StorageProfile storageProfile() {
        return this.storageProfile;
    }

    /**
     * Set the storageProfile property: Storage profile of a server.
     * 
     * @param storageProfile the storageProfile value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withStorageProfile(StorageProfile storageProfile) {
        this.storageProfile = storageProfile;
        return this;
    }

    /**
     * Get the administratorLoginPassword property: The password of the administrator login.
     * 
     * @return the administratorLoginPassword value.
     */
    public String administratorLoginPassword() {
        return this.administratorLoginPassword;
    }

    /**
     * Set the administratorLoginPassword property: The password of the administrator login.
     * 
     * @param administratorLoginPassword the administratorLoginPassword value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withAdministratorLoginPassword(String administratorLoginPassword) {
        this.administratorLoginPassword = administratorLoginPassword;
        return this;
    }

    /**
     * Get the version property: The version of a server.
     * 
     * @return the version value.
     */
    public ServerVersion version() {
        return this.version;
    }

    /**
     * Set the version property: The version of a server.
     * 
     * @param version the version value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withVersion(ServerVersion version) {
        this.version = version;
        return this;
    }

    /**
     * Get the sslEnforcement property: Enable ssl enforcement or not when connect to server.
     * 
     * @return the sslEnforcement value.
     */
    public SslEnforcementEnum sslEnforcement() {
        return this.sslEnforcement;
    }

    /**
     * Set the sslEnforcement property: Enable ssl enforcement or not when connect to server.
     * 
     * @param sslEnforcement the sslEnforcement value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withSslEnforcement(SslEnforcementEnum sslEnforcement) {
        this.sslEnforcement = sslEnforcement;
        return this;
    }

    /**
     * Get the minimalTlsVersion property: Enforce a minimal Tls version for the server.
     * 
     * @return the minimalTlsVersion value.
     */
    public MinimalTlsVersionEnum minimalTlsVersion() {
        return this.minimalTlsVersion;
    }

    /**
     * Set the minimalTlsVersion property: Enforce a minimal Tls version for the server.
     * 
     * @param minimalTlsVersion the minimalTlsVersion value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withMinimalTlsVersion(MinimalTlsVersionEnum minimalTlsVersion) {
        this.minimalTlsVersion = minimalTlsVersion;
        return this;
    }

    /**
     * Get the publicNetworkAccess property: Whether or not public network access is allowed for this server. Value is
     * optional but if passed in, must be 'Enabled' or 'Disabled'.
     * 
     * @return the publicNetworkAccess value.
     */
    public PublicNetworkAccessEnum publicNetworkAccess() {
        return this.publicNetworkAccess;
    }

    /**
     * Set the publicNetworkAccess property: Whether or not public network access is allowed for this server. Value is
     * optional but if passed in, must be 'Enabled' or 'Disabled'.
     * 
     * @param publicNetworkAccess the publicNetworkAccess value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withPublicNetworkAccess(PublicNetworkAccessEnum publicNetworkAccess) {
        this.publicNetworkAccess = publicNetworkAccess;
        return this;
    }

    /**
     * Get the replicationRole property: The replication role of the server.
     * 
     * @return the replicationRole value.
     */
    public String replicationRole() {
        return this.replicationRole;
    }

    /**
     * Set the replicationRole property: The replication role of the server.
     * 
     * @param replicationRole the replicationRole value to set.
     * @return the ServerUpdateParametersProperties object itself.
     */
    public ServerUpdateParametersProperties withReplicationRole(String replicationRole) {
        this.replicationRole = replicationRole;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (storageProfile() != null) {
            storageProfile().validate();
        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("storageProfile", this.storageProfile);
        jsonWriter.writeStringField("administratorLoginPassword", this.administratorLoginPassword);
        jsonWriter.writeStringField("version", this.version == null ? null : this.version.toString());
        jsonWriter.writeStringField("sslEnforcement",
            this.sslEnforcement == null ? null : this.sslEnforcement.toString());
        jsonWriter.writeStringField("minimalTlsVersion",
            this.minimalTlsVersion == null ? null : this.minimalTlsVersion.toString());
        jsonWriter.writeStringField("publicNetworkAccess",
            this.publicNetworkAccess == null ? null : this.publicNetworkAccess.toString());
        jsonWriter.writeStringField("replicationRole", this.replicationRole);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of ServerUpdateParametersProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of ServerUpdateParametersProperties if the JsonReader was pointing to an instance of it, or
     * null if it was pointing to JSON null.
     * @throws IOException If an error occurs while reading the ServerUpdateParametersProperties.
     */
    public static ServerUpdateParametersProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            ServerUpdateParametersProperties deserializedServerUpdateParametersProperties
                = new ServerUpdateParametersProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("storageProfile".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.storageProfile = StorageProfile.fromJson(reader);
                } else if ("administratorLoginPassword".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.administratorLoginPassword = reader.getString();
                } else if ("version".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.version = ServerVersion.fromString(reader.getString());
                } else if ("sslEnforcement".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.sslEnforcement
                        = SslEnforcementEnum.fromString(reader.getString());
                } else if ("minimalTlsVersion".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.minimalTlsVersion
                        = MinimalTlsVersionEnum.fromString(reader.getString());
                } else if ("publicNetworkAccess".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.publicNetworkAccess
                        = PublicNetworkAccessEnum.fromString(reader.getString());
                } else if ("replicationRole".equals(fieldName)) {
                    deserializedServerUpdateParametersProperties.replicationRole = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedServerUpdateParametersProperties;
        });
    }
}
