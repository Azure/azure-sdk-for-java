// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;

/**
 * The properties of a query text.
 */
@Fluent
public final class QueryTextProperties implements JsonSerializable<QueryTextProperties> {
    /*
     * Query identifier unique to the server.
     */
    private String queryId;

    /*
     * Query text.
     */
    private String queryText;

    /**
     * Creates an instance of QueryTextProperties class.
     */
    public QueryTextProperties() {
    }

    /**
     * Get the queryId property: Query identifier unique to the server.
     * 
     * @return the queryId value.
     */
    public String queryId() {
        return this.queryId;
    }

    /**
     * Set the queryId property: Query identifier unique to the server.
     * 
     * @param queryId the queryId value to set.
     * @return the QueryTextProperties object itself.
     */
    public QueryTextProperties withQueryId(String queryId) {
        this.queryId = queryId;
        return this;
    }

    /**
     * Get the queryText property: Query text.
     * 
     * @return the queryText value.
     */
    public String queryText() {
        return this.queryText;
    }

    /**
     * Set the queryText property: Query text.
     * 
     * @param queryText the queryText value to set.
     * @return the QueryTextProperties object itself.
     */
    public QueryTextProperties withQueryText(String queryText) {
        this.queryText = queryText;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("queryId", this.queryId);
        jsonWriter.writeStringField("queryText", this.queryText);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of QueryTextProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of QueryTextProperties if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IOException If an error occurs while reading the QueryTextProperties.
     */
    public static QueryTextProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            QueryTextProperties deserializedQueryTextProperties = new QueryTextProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("queryId".equals(fieldName)) {
                    deserializedQueryTextProperties.queryId = reader.getString();
                } else if ("queryText".equals(fieldName)) {
                    deserializedQueryTextProperties.queryText = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedQueryTextProperties;
        });
    }
}
