// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import com.azure.resourcemanager.mariadb.fluent.models.WaitStatisticsInputProperties;
import java.io.IOException;
import java.time.OffsetDateTime;

/**
 * Input to get wait statistics.
 */
@Fluent
public final class WaitStatisticsInput implements JsonSerializable<WaitStatisticsInput> {
    /*
     * The properties of a wait statistics input.
     */
    private WaitStatisticsInputProperties innerProperties = new WaitStatisticsInputProperties();

    /**
     * Creates an instance of WaitStatisticsInput class.
     */
    public WaitStatisticsInput() {
    }

    /**
     * Get the innerProperties property: The properties of a wait statistics input.
     * 
     * @return the innerProperties value.
     */
    private WaitStatisticsInputProperties innerProperties() {
        return this.innerProperties;
    }

    /**
     * Get the observationStartTime property: Observation start time.
     * 
     * @return the observationStartTime value.
     */
    public OffsetDateTime observationStartTime() {
        return this.innerProperties() == null ? null : this.innerProperties().observationStartTime();
    }

    /**
     * Set the observationStartTime property: Observation start time.
     * 
     * @param observationStartTime the observationStartTime value to set.
     * @return the WaitStatisticsInput object itself.
     */
    public WaitStatisticsInput withObservationStartTime(OffsetDateTime observationStartTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WaitStatisticsInputProperties();
        }
        this.innerProperties().withObservationStartTime(observationStartTime);
        return this;
    }

    /**
     * Get the observationEndTime property: Observation end time.
     * 
     * @return the observationEndTime value.
     */
    public OffsetDateTime observationEndTime() {
        return this.innerProperties() == null ? null : this.innerProperties().observationEndTime();
    }

    /**
     * Set the observationEndTime property: Observation end time.
     * 
     * @param observationEndTime the observationEndTime value to set.
     * @return the WaitStatisticsInput object itself.
     */
    public WaitStatisticsInput withObservationEndTime(OffsetDateTime observationEndTime) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WaitStatisticsInputProperties();
        }
        this.innerProperties().withObservationEndTime(observationEndTime);
        return this;
    }

    /**
     * Get the aggregationWindow property: Aggregation interval type in ISO 8601 format.
     * 
     * @return the aggregationWindow value.
     */
    public String aggregationWindow() {
        return this.innerProperties() == null ? null : this.innerProperties().aggregationWindow();
    }

    /**
     * Set the aggregationWindow property: Aggregation interval type in ISO 8601 format.
     * 
     * @param aggregationWindow the aggregationWindow value to set.
     * @return the WaitStatisticsInput object itself.
     */
    public WaitStatisticsInput withAggregationWindow(String aggregationWindow) {
        if (this.innerProperties() == null) {
            this.innerProperties = new WaitStatisticsInputProperties();
        }
        this.innerProperties().withAggregationWindow(aggregationWindow);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (innerProperties() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property innerProperties in model WaitStatisticsInput"));
        } else {
            innerProperties().validate();
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WaitStatisticsInput.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeJsonField("properties", this.innerProperties);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WaitStatisticsInput from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WaitStatisticsInput if the JsonReader was pointing to an instance of it, or null if it was
     * pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WaitStatisticsInput.
     */
    public static WaitStatisticsInput fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WaitStatisticsInput deserializedWaitStatisticsInput = new WaitStatisticsInput();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("properties".equals(fieldName)) {
                    deserializedWaitStatisticsInput.innerProperties = WaitStatisticsInputProperties.fromJson(reader);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWaitStatisticsInput;
        });
    }
}
