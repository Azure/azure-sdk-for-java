// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties for input to get wait statistics.
 */
@Fluent
public final class WaitStatisticsInputProperties implements JsonSerializable<WaitStatisticsInputProperties> {
    /*
     * Observation start time.
     */
    private OffsetDateTime observationStartTime;

    /*
     * Observation end time.
     */
    private OffsetDateTime observationEndTime;

    /*
     * Aggregation interval type in ISO 8601 format.
     */
    private String aggregationWindow;

    /**
     * Creates an instance of WaitStatisticsInputProperties class.
     */
    public WaitStatisticsInputProperties() {
    }

    /**
     * Get the observationStartTime property: Observation start time.
     * 
     * @return the observationStartTime value.
     */
    public OffsetDateTime observationStartTime() {
        return this.observationStartTime;
    }

    /**
     * Set the observationStartTime property: Observation start time.
     * 
     * @param observationStartTime the observationStartTime value to set.
     * @return the WaitStatisticsInputProperties object itself.
     */
    public WaitStatisticsInputProperties withObservationStartTime(OffsetDateTime observationStartTime) {
        this.observationStartTime = observationStartTime;
        return this;
    }

    /**
     * Get the observationEndTime property: Observation end time.
     * 
     * @return the observationEndTime value.
     */
    public OffsetDateTime observationEndTime() {
        return this.observationEndTime;
    }

    /**
     * Set the observationEndTime property: Observation end time.
     * 
     * @param observationEndTime the observationEndTime value to set.
     * @return the WaitStatisticsInputProperties object itself.
     */
    public WaitStatisticsInputProperties withObservationEndTime(OffsetDateTime observationEndTime) {
        this.observationEndTime = observationEndTime;
        return this;
    }

    /**
     * Get the aggregationWindow property: Aggregation interval type in ISO 8601 format.
     * 
     * @return the aggregationWindow value.
     */
    public String aggregationWindow() {
        return this.aggregationWindow;
    }

    /**
     * Set the aggregationWindow property: Aggregation interval type in ISO 8601 format.
     * 
     * @param aggregationWindow the aggregationWindow value to set.
     * @return the WaitStatisticsInputProperties object itself.
     */
    public WaitStatisticsInputProperties withAggregationWindow(String aggregationWindow) {
        this.aggregationWindow = aggregationWindow;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (observationStartTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property observationStartTime in model WaitStatisticsInputProperties"));
        }
        if (observationEndTime() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property observationEndTime in model WaitStatisticsInputProperties"));
        }
        if (aggregationWindow() == null) {
            throw LOGGER.atError()
                .log(new IllegalArgumentException(
                    "Missing required property aggregationWindow in model WaitStatisticsInputProperties"));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(WaitStatisticsInputProperties.class);

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("observationStartTime",
            this.observationStartTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.observationStartTime));
        jsonWriter.writeStringField("observationEndTime",
            this.observationEndTime == null
                ? null
                : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.observationEndTime));
        jsonWriter.writeStringField("aggregationWindow", this.aggregationWindow);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WaitStatisticsInputProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WaitStatisticsInputProperties if the JsonReader was pointing to an instance of it, or null
     * if it was pointing to JSON null.
     * @throws IllegalStateException If the deserialized JSON object was missing any required properties.
     * @throws IOException If an error occurs while reading the WaitStatisticsInputProperties.
     */
    public static WaitStatisticsInputProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WaitStatisticsInputProperties deserializedWaitStatisticsInputProperties
                = new WaitStatisticsInputProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("observationStartTime".equals(fieldName)) {
                    deserializedWaitStatisticsInputProperties.observationStartTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("observationEndTime".equals(fieldName)) {
                    deserializedWaitStatisticsInputProperties.observationEndTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("aggregationWindow".equals(fieldName)) {
                    deserializedWaitStatisticsInputProperties.aggregationWindow = reader.getString();
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWaitStatisticsInputProperties;
        });
    }
}
