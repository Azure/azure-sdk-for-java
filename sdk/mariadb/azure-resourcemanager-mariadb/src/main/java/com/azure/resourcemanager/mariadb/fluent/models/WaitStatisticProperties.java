// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.mariadb.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.core.util.CoreUtils;
import com.azure.json.JsonReader;
import com.azure.json.JsonSerializable;
import com.azure.json.JsonToken;
import com.azure.json.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.time.format.DateTimeFormatter;

/**
 * The properties of a wait statistic.
 */
@Fluent
public final class WaitStatisticProperties implements JsonSerializable<WaitStatisticProperties> {
    /*
     * Observation start time.
     */
    private OffsetDateTime startTime;

    /*
     * Observation end time.
     */
    private OffsetDateTime endTime;

    /*
     * Wait event name.
     */
    private String eventName;

    /*
     * Wait event type name.
     */
    private String eventTypeName;

    /*
     * Database query identifier.
     */
    private Long queryId;

    /*
     * Database Name.
     */
    private String databaseName;

    /*
     * Database user identifier.
     */
    private Long userId;

    /*
     * Wait event count observed in this time interval.
     */
    private Long count;

    /*
     * Total time of wait in milliseconds in this time interval.
     */
    private Double totalTimeInMs;

    /**
     * Creates an instance of WaitStatisticProperties class.
     */
    public WaitStatisticProperties() {
    }

    /**
     * Get the startTime property: Observation start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: Observation start time.
     * 
     * @param startTime the startTime value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the endTime property: Observation end time.
     * 
     * @return the endTime value.
     */
    public OffsetDateTime endTime() {
        return this.endTime;
    }

    /**
     * Set the endTime property: Observation end time.
     * 
     * @param endTime the endTime value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withEndTime(OffsetDateTime endTime) {
        this.endTime = endTime;
        return this;
    }

    /**
     * Get the eventName property: Wait event name.
     * 
     * @return the eventName value.
     */
    public String eventName() {
        return this.eventName;
    }

    /**
     * Set the eventName property: Wait event name.
     * 
     * @param eventName the eventName value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withEventName(String eventName) {
        this.eventName = eventName;
        return this;
    }

    /**
     * Get the eventTypeName property: Wait event type name.
     * 
     * @return the eventTypeName value.
     */
    public String eventTypeName() {
        return this.eventTypeName;
    }

    /**
     * Set the eventTypeName property: Wait event type name.
     * 
     * @param eventTypeName the eventTypeName value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withEventTypeName(String eventTypeName) {
        this.eventTypeName = eventTypeName;
        return this;
    }

    /**
     * Get the queryId property: Database query identifier.
     * 
     * @return the queryId value.
     */
    public Long queryId() {
        return this.queryId;
    }

    /**
     * Set the queryId property: Database query identifier.
     * 
     * @param queryId the queryId value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withQueryId(Long queryId) {
        this.queryId = queryId;
        return this;
    }

    /**
     * Get the databaseName property: Database Name.
     * 
     * @return the databaseName value.
     */
    public String databaseName() {
        return this.databaseName;
    }

    /**
     * Set the databaseName property: Database Name.
     * 
     * @param databaseName the databaseName value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withDatabaseName(String databaseName) {
        this.databaseName = databaseName;
        return this;
    }

    /**
     * Get the userId property: Database user identifier.
     * 
     * @return the userId value.
     */
    public Long userId() {
        return this.userId;
    }

    /**
     * Set the userId property: Database user identifier.
     * 
     * @param userId the userId value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withUserId(Long userId) {
        this.userId = userId;
        return this;
    }

    /**
     * Get the count property: Wait event count observed in this time interval.
     * 
     * @return the count value.
     */
    public Long count() {
        return this.count;
    }

    /**
     * Set the count property: Wait event count observed in this time interval.
     * 
     * @param count the count value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withCount(Long count) {
        this.count = count;
        return this;
    }

    /**
     * Get the totalTimeInMs property: Total time of wait in milliseconds in this time interval.
     * 
     * @return the totalTimeInMs value.
     */
    public Double totalTimeInMs() {
        return this.totalTimeInMs;
    }

    /**
     * Set the totalTimeInMs property: Total time of wait in milliseconds in this time interval.
     * 
     * @param totalTimeInMs the totalTimeInMs value to set.
     * @return the WaitStatisticProperties object itself.
     */
    public WaitStatisticProperties withTotalTimeInMs(Double totalTimeInMs) {
        this.totalTimeInMs = totalTimeInMs;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public JsonWriter toJson(JsonWriter jsonWriter) throws IOException {
        jsonWriter.writeStartObject();
        jsonWriter.writeStringField("startTime",
            this.startTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.startTime));
        jsonWriter.writeStringField("endTime",
            this.endTime == null ? null : DateTimeFormatter.ISO_OFFSET_DATE_TIME.format(this.endTime));
        jsonWriter.writeStringField("eventName", this.eventName);
        jsonWriter.writeStringField("eventTypeName", this.eventTypeName);
        jsonWriter.writeNumberField("queryId", this.queryId);
        jsonWriter.writeStringField("databaseName", this.databaseName);
        jsonWriter.writeNumberField("userId", this.userId);
        jsonWriter.writeNumberField("count", this.count);
        jsonWriter.writeNumberField("totalTimeInMs", this.totalTimeInMs);
        return jsonWriter.writeEndObject();
    }

    /**
     * Reads an instance of WaitStatisticProperties from the JsonReader.
     * 
     * @param jsonReader The JsonReader being read.
     * @return An instance of WaitStatisticProperties if the JsonReader was pointing to an instance of it, or null if it
     * was pointing to JSON null.
     * @throws IOException If an error occurs while reading the WaitStatisticProperties.
     */
    public static WaitStatisticProperties fromJson(JsonReader jsonReader) throws IOException {
        return jsonReader.readObject(reader -> {
            WaitStatisticProperties deserializedWaitStatisticProperties = new WaitStatisticProperties();
            while (reader.nextToken() != JsonToken.END_OBJECT) {
                String fieldName = reader.getFieldName();
                reader.nextToken();

                if ("startTime".equals(fieldName)) {
                    deserializedWaitStatisticProperties.startTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("endTime".equals(fieldName)) {
                    deserializedWaitStatisticProperties.endTime = reader
                        .getNullable(nonNullReader -> CoreUtils.parseBestOffsetDateTime(nonNullReader.getString()));
                } else if ("eventName".equals(fieldName)) {
                    deserializedWaitStatisticProperties.eventName = reader.getString();
                } else if ("eventTypeName".equals(fieldName)) {
                    deserializedWaitStatisticProperties.eventTypeName = reader.getString();
                } else if ("queryId".equals(fieldName)) {
                    deserializedWaitStatisticProperties.queryId = reader.getNullable(JsonReader::getLong);
                } else if ("databaseName".equals(fieldName)) {
                    deserializedWaitStatisticProperties.databaseName = reader.getString();
                } else if ("userId".equals(fieldName)) {
                    deserializedWaitStatisticProperties.userId = reader.getNullable(JsonReader::getLong);
                } else if ("count".equals(fieldName)) {
                    deserializedWaitStatisticProperties.count = reader.getNullable(JsonReader::getLong);
                } else if ("totalTimeInMs".equals(fieldName)) {
                    deserializedWaitStatisticProperties.totalTimeInMs = reader.getNullable(JsonReader::getDouble);
                } else {
                    reader.skipChildren();
                }
            }

            return deserializedWaitStatisticProperties;
        });
    }
}
