/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 */

package com.microsoft.azure.management.network.v2020_05_01;

import com.microsoft.azure.arm.model.HasInner;
import com.microsoft.azure.arm.resources.models.Resource;
import com.microsoft.azure.arm.resources.models.GroupableResourceCore;
import com.microsoft.azure.arm.resources.models.HasResourceGroup;
import com.microsoft.azure.arm.model.Refreshable;
import com.microsoft.azure.arm.model.Updatable;
import com.microsoft.azure.arm.model.Appliable;
import com.microsoft.azure.arm.model.Creatable;
import com.microsoft.azure.arm.resources.models.HasManager;
import com.microsoft.azure.management.network.v2020_05_01.implementation.NetworkManager;
import com.microsoft.azure.SubResource;
import com.microsoft.azure.management.network.v2020_05_01.implementation.SecurityPartnerProviderInner;

/**
 * Type representing SecurityPartnerProvider.
 */
public interface SecurityPartnerProvider extends HasInner<SecurityPartnerProviderInner>, Resource, GroupableResourceCore<NetworkManager, SecurityPartnerProviderInner>, HasResourceGroup, Refreshable<SecurityPartnerProvider>, Updatable<SecurityPartnerProvider.Update>, HasManager<NetworkManager> {
    /**
     * @return the connectionStatus value.
     */
    SecurityPartnerProviderConnectionStatus connectionStatus();

    /**
     * @return the etag value.
     */
    String etag();

    /**
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * @return the securityProviderName value.
     */
    SecurityProviderName securityProviderName();

    /**
     * @return the virtualHub value.
     */
    SubResource virtualHub();

    /**
     * The entirety of the SecurityPartnerProvider definition.
     */
    interface Definition extends DefinitionStages.Blank, DefinitionStages.WithGroup, DefinitionStages.WithCreate {
    }

    /**
     * Grouping of SecurityPartnerProvider definition stages.
     */
    interface DefinitionStages {
        /**
         * The first stage of a SecurityPartnerProvider definition.
         */
        interface Blank extends GroupableResourceCore.DefinitionWithRegion<WithGroup> {
        }

        /**
         * The stage of the SecurityPartnerProvider definition allowing to specify the resource group.
         */
        interface WithGroup extends GroupableResourceCore.DefinitionStages.WithGroup<WithCreate> {
        }

        /**
         * The stage of the securitypartnerprovider definition allowing to specify SecurityProviderName.
         */
        interface WithSecurityProviderName {
            /**
             * Specifies securityProviderName.
             * @param securityProviderName The security provider name. Possible values include: 'ZScaler', 'IBoss', 'Checkpoint'
             * @return the next definition stage
             */
            WithCreate withSecurityProviderName(SecurityProviderName securityProviderName);
        }

        /**
         * The stage of the securitypartnerprovider definition allowing to specify VirtualHub.
         */
        interface WithVirtualHub {
            /**
             * Specifies virtualHub.
             * @param virtualHub The virtualHub to which the Security Partner Provider belongs
             * @return the next definition stage
             */
            WithCreate withVirtualHub(SubResource virtualHub);
        }

        /**
         * The stage of the definition which contains all the minimum required inputs for
         * the resource to be created (via {@link WithCreate#create()}), but also allows
         * for any other optional settings to be specified.
         */
        interface WithCreate extends Creatable<SecurityPartnerProvider>, Resource.DefinitionWithTags<WithCreate>, DefinitionStages.WithSecurityProviderName, DefinitionStages.WithVirtualHub {
        }
    }
    /**
     * The template for a SecurityPartnerProvider update operation, containing all the settings that can be modified.
     */
    interface Update extends Appliable<SecurityPartnerProvider>, Resource.UpdateWithTags<Update>, UpdateStages.WithSecurityProviderName, UpdateStages.WithVirtualHub {
    }

    /**
     * Grouping of SecurityPartnerProvider update stages.
     */
    interface UpdateStages {
        /**
         * The stage of the securitypartnerprovider update allowing to specify SecurityProviderName.
         */
        interface WithSecurityProviderName {
            /**
             * Specifies securityProviderName.
             * @param securityProviderName The security provider name. Possible values include: 'ZScaler', 'IBoss', 'Checkpoint'
             * @return the next update stage
             */
            Update withSecurityProviderName(SecurityProviderName securityProviderName);
        }

        /**
         * The stage of the securitypartnerprovider update allowing to specify VirtualHub.
         */
        interface WithVirtualHub {
            /**
             * Specifies virtualHub.
             * @param virtualHub The virtualHub to which the Security Partner Provider belongs
             * @return the next update stage
             */
            Update withVirtualHub(SubResource virtualHub);
        }

    }
}
