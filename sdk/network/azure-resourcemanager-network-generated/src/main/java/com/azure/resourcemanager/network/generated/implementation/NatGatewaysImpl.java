// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.NatGatewaysClient;
import com.azure.resourcemanager.network.generated.fluent.models.NatGatewayInner;
import com.azure.resourcemanager.network.generated.models.NatGateway;
import com.azure.resourcemanager.network.generated.models.NatGateways;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class NatGatewaysImpl implements NatGateways {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(NatGatewaysImpl.class);

    private final NatGatewaysClient innerClient;

    private final NetworkManager serviceManager;

    public NatGatewaysImpl(NatGatewaysClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String natGatewayName) {
        this.serviceClient().delete(resourceGroupName, natGatewayName);
    }

    public void delete(String resourceGroupName, String natGatewayName, Context context) {
        this.serviceClient().delete(resourceGroupName, natGatewayName, context);
    }

    public NatGateway getByResourceGroup(String resourceGroupName, String natGatewayName) {
        NatGatewayInner inner = this.serviceClient().getByResourceGroup(resourceGroupName, natGatewayName);
        if (inner != null) {
            return new NatGatewayImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<NatGateway> getByResourceGroupWithResponse(
        String resourceGroupName, String natGatewayName, String expand, Context context) {
        Response<NatGatewayInner> inner =
            this.serviceClient().getByResourceGroupWithResponse(resourceGroupName, natGatewayName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new NatGatewayImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<NatGateway> list() {
        PagedIterable<NatGatewayInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new NatGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<NatGateway> list(Context context) {
        PagedIterable<NatGatewayInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new NatGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<NatGateway> listByResourceGroup(String resourceGroupName) {
        PagedIterable<NatGatewayInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new NatGatewayImpl(inner1, this.manager()));
    }

    public PagedIterable<NatGateway> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<NatGatewayInner> inner = this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new NatGatewayImpl(inner1, this.manager()));
    }

    public NatGateway getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String natGatewayName = Utils.getValueFromIdByName(id, "natGateways");
        if (natGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natGateways'.", id)));
        }
        String localExpand = null;
        return this
            .getByResourceGroupWithResponse(resourceGroupName, natGatewayName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<NatGateway> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String natGatewayName = Utils.getValueFromIdByName(id, "natGateways");
        if (natGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natGateways'.", id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, natGatewayName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String natGatewayName = Utils.getValueFromIdByName(id, "natGateways");
        if (natGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natGateways'.", id)));
        }
        this.delete(resourceGroupName, natGatewayName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String natGatewayName = Utils.getValueFromIdByName(id, "natGateways");
        if (natGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natGateways'.", id)));
        }
        this.delete(resourceGroupName, natGatewayName, context);
    }

    private NatGatewaysClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public NatGatewayImpl define(String name) {
        return new NatGatewayImpl(name, this.manager());
    }
}
