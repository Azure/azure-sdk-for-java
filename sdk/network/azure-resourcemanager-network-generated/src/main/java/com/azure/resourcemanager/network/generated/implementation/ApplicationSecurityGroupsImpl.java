// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.ApplicationSecurityGroupsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ApplicationSecurityGroupInner;
import com.azure.resourcemanager.network.generated.models.ApplicationSecurityGroup;
import com.azure.resourcemanager.network.generated.models.ApplicationSecurityGroups;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ApplicationSecurityGroupsImpl implements ApplicationSecurityGroups {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ApplicationSecurityGroupsImpl.class);

    private final ApplicationSecurityGroupsClient innerClient;

    private final NetworkManager serviceManager;

    public ApplicationSecurityGroupsImpl(ApplicationSecurityGroupsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void deleteByResourceGroup(String resourceGroupName, String applicationSecurityGroupName) {
        this.serviceClient().delete(resourceGroupName, applicationSecurityGroupName);
    }

    public void delete(String resourceGroupName, String applicationSecurityGroupName, Context context) {
        this.serviceClient().delete(resourceGroupName, applicationSecurityGroupName, context);
    }

    public ApplicationSecurityGroup getByResourceGroup(String resourceGroupName, String applicationSecurityGroupName) {
        ApplicationSecurityGroupInner inner =
            this.serviceClient().getByResourceGroup(resourceGroupName, applicationSecurityGroupName);
        if (inner != null) {
            return new ApplicationSecurityGroupImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ApplicationSecurityGroup> getByResourceGroupWithResponse(
        String resourceGroupName, String applicationSecurityGroupName, Context context) {
        Response<ApplicationSecurityGroupInner> inner =
            this
                .serviceClient()
                .getByResourceGroupWithResponse(resourceGroupName, applicationSecurityGroupName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ApplicationSecurityGroupImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ApplicationSecurityGroup> list() {
        PagedIterable<ApplicationSecurityGroupInner> inner = this.serviceClient().list();
        return inner.mapPage(inner1 -> new ApplicationSecurityGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationSecurityGroup> list(Context context) {
        PagedIterable<ApplicationSecurityGroupInner> inner = this.serviceClient().list(context);
        return inner.mapPage(inner1 -> new ApplicationSecurityGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationSecurityGroup> listByResourceGroup(String resourceGroupName) {
        PagedIterable<ApplicationSecurityGroupInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName);
        return inner.mapPage(inner1 -> new ApplicationSecurityGroupImpl(inner1, this.manager()));
    }

    public PagedIterable<ApplicationSecurityGroup> listByResourceGroup(String resourceGroupName, Context context) {
        PagedIterable<ApplicationSecurityGroupInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, context);
        return inner.mapPage(inner1 -> new ApplicationSecurityGroupImpl(inner1, this.manager()));
    }

    public ApplicationSecurityGroup getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationSecurityGroupName = Utils.getValueFromIdByName(id, "applicationSecurityGroups");
        if (applicationSecurityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationSecurityGroups'.",
                                id)));
        }
        return this
            .getByResourceGroupWithResponse(resourceGroupName, applicationSecurityGroupName, Context.NONE)
            .getValue();
    }

    public Response<ApplicationSecurityGroup> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationSecurityGroupName = Utils.getValueFromIdByName(id, "applicationSecurityGroups");
        if (applicationSecurityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationSecurityGroups'.",
                                id)));
        }
        return this.getByResourceGroupWithResponse(resourceGroupName, applicationSecurityGroupName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationSecurityGroupName = Utils.getValueFromIdByName(id, "applicationSecurityGroups");
        if (applicationSecurityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationSecurityGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, applicationSecurityGroupName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String applicationSecurityGroupName = Utils.getValueFromIdByName(id, "applicationSecurityGroups");
        if (applicationSecurityGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'applicationSecurityGroups'.",
                                id)));
        }
        this.delete(resourceGroupName, applicationSecurityGroupName, context);
    }

    private ApplicationSecurityGroupsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public ApplicationSecurityGroupImpl define(String name) {
        return new ApplicationSecurityGroupImpl(name, this.manager());
    }
}
