// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.LoadBalancerBackendAddressPoolsClient;
import com.azure.resourcemanager.network.generated.fluent.models.BackendAddressPoolInner;
import com.azure.resourcemanager.network.generated.models.BackendAddressPool;
import com.azure.resourcemanager.network.generated.models.LoadBalancerBackendAddressPools;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class LoadBalancerBackendAddressPoolsImpl implements LoadBalancerBackendAddressPools {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(LoadBalancerBackendAddressPoolsImpl.class);

    private final LoadBalancerBackendAddressPoolsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public LoadBalancerBackendAddressPoolsImpl(
        LoadBalancerBackendAddressPoolsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<BackendAddressPool> list(String resourceGroupName, String loadBalancerName) {
        PagedIterable<BackendAddressPoolInner> inner = this.serviceClient().list(resourceGroupName, loadBalancerName);
        return Utils.mapPage(inner, inner1 -> new BackendAddressPoolImpl(inner1, this.manager()));
    }

    public PagedIterable<BackendAddressPool> list(String resourceGroupName, String loadBalancerName, Context context) {
        PagedIterable<BackendAddressPoolInner> inner =
            this.serviceClient().list(resourceGroupName, loadBalancerName, context);
        return Utils.mapPage(inner, inner1 -> new BackendAddressPoolImpl(inner1, this.manager()));
    }

    public BackendAddressPool get(String resourceGroupName, String loadBalancerName, String backendAddressPoolName) {
        BackendAddressPoolInner inner =
            this.serviceClient().get(resourceGroupName, loadBalancerName, backendAddressPoolName);
        if (inner != null) {
            return new BackendAddressPoolImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<BackendAddressPool> getWithResponse(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName, Context context) {
        Response<BackendAddressPoolInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new BackendAddressPoolImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String loadBalancerName, String backendAddressPoolName) {
        this.serviceClient().delete(resourceGroupName, loadBalancerName, backendAddressPoolName);
    }

    public void delete(
        String resourceGroupName, String loadBalancerName, String backendAddressPoolName, Context context) {
        this.serviceClient().delete(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }

    public BackendAddressPool getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String backendAddressPoolName = Utils.getValueFromIdByName(id, "backendAddressPools");
        if (backendAddressPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'backendAddressPools'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, loadBalancerName, backendAddressPoolName, Context.NONE)
            .getValue();
    }

    public Response<BackendAddressPool> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String backendAddressPoolName = Utils.getValueFromIdByName(id, "backendAddressPools");
        if (backendAddressPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'backendAddressPools'.", id)));
        }
        return this.getWithResponse(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String backendAddressPoolName = Utils.getValueFromIdByName(id, "backendAddressPools");
        if (backendAddressPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'backendAddressPools'.", id)));
        }
        this.delete(resourceGroupName, loadBalancerName, backendAddressPoolName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String backendAddressPoolName = Utils.getValueFromIdByName(id, "backendAddressPools");
        if (backendAddressPoolName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'backendAddressPools'.", id)));
        }
        this.delete(resourceGroupName, loadBalancerName, backendAddressPoolName, context);
    }

    private LoadBalancerBackendAddressPoolsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public BackendAddressPoolImpl define(String name) {
        return new BackendAddressPoolImpl(name, this.manager());
    }
}
