// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.VpnLinkConnectionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.VpnSiteLinkConnectionInner;
import com.azure.resourcemanager.network.generated.models.VpnLinkConnections;
import com.azure.resourcemanager.network.generated.models.VpnSiteLinkConnection;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class VpnLinkConnectionsImpl implements VpnLinkConnections {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VpnLinkConnectionsImpl.class);

    private final VpnLinkConnectionsClient innerClient;

    private final NetworkManager serviceManager;

    public VpnLinkConnectionsImpl(VpnLinkConnectionsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<VpnSiteLinkConnection> listByVpnConnection(
        String resourceGroupName, String gatewayName, String connectionName) {
        PagedIterable<VpnSiteLinkConnectionInner> inner =
            this.serviceClient().listByVpnConnection(resourceGroupName, gatewayName, connectionName);
        return inner.mapPage(inner1 -> new VpnSiteLinkConnectionImpl(inner1, this.manager()));
    }

    public PagedIterable<VpnSiteLinkConnection> listByVpnConnection(
        String resourceGroupName, String gatewayName, String connectionName, Context context) {
        PagedIterable<VpnSiteLinkConnectionInner> inner =
            this.serviceClient().listByVpnConnection(resourceGroupName, gatewayName, connectionName, context);
        return inner.mapPage(inner1 -> new VpnSiteLinkConnectionImpl(inner1, this.manager()));
    }

    private VpnLinkConnectionsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }
}
