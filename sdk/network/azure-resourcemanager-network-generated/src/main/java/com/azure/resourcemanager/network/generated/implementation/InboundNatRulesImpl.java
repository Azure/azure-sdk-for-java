// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.InboundNatRulesClient;
import com.azure.resourcemanager.network.generated.fluent.models.InboundNatRuleInner;
import com.azure.resourcemanager.network.generated.models.InboundNatRule;
import com.azure.resourcemanager.network.generated.models.InboundNatRules;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class InboundNatRulesImpl implements InboundNatRules {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(InboundNatRulesImpl.class);

    private final InboundNatRulesClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public InboundNatRulesImpl(
        InboundNatRulesClient innerClient, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public PagedIterable<InboundNatRule> list(String resourceGroupName, String loadBalancerName) {
        PagedIterable<InboundNatRuleInner> inner = this.serviceClient().list(resourceGroupName, loadBalancerName);
        return Utils.mapPage(inner, inner1 -> new InboundNatRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<InboundNatRule> list(String resourceGroupName, String loadBalancerName, Context context) {
        PagedIterable<InboundNatRuleInner> inner =
            this.serviceClient().list(resourceGroupName, loadBalancerName, context);
        return Utils.mapPage(inner, inner1 -> new InboundNatRuleImpl(inner1, this.manager()));
    }

    public void delete(String resourceGroupName, String loadBalancerName, String inboundNatRuleName) {
        this.serviceClient().delete(resourceGroupName, loadBalancerName, inboundNatRuleName);
    }

    public void delete(String resourceGroupName, String loadBalancerName, String inboundNatRuleName, Context context) {
        this.serviceClient().delete(resourceGroupName, loadBalancerName, inboundNatRuleName, context);
    }

    public InboundNatRule get(String resourceGroupName, String loadBalancerName, String inboundNatRuleName) {
        InboundNatRuleInner inner = this.serviceClient().get(resourceGroupName, loadBalancerName, inboundNatRuleName);
        if (inner != null) {
            return new InboundNatRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<InboundNatRule> getWithResponse(
        String resourceGroupName, String loadBalancerName, String inboundNatRuleName, String expand, Context context) {
        Response<InboundNatRuleInner> inner =
            this
                .serviceClient()
                .getWithResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, expand, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new InboundNatRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public InboundNatRule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String inboundNatRuleName = Utils.getValueFromIdByName(id, "inboundNatRules");
        if (inboundNatRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inboundNatRules'.", id)));
        }
        String localExpand = null;
        return this
            .getWithResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, localExpand, Context.NONE)
            .getValue();
    }

    public Response<InboundNatRule> getByIdWithResponse(String id, String expand, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String inboundNatRuleName = Utils.getValueFromIdByName(id, "inboundNatRules");
        if (inboundNatRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inboundNatRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, loadBalancerName, inboundNatRuleName, expand, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String inboundNatRuleName = Utils.getValueFromIdByName(id, "inboundNatRules");
        if (inboundNatRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inboundNatRules'.", id)));
        }
        this.delete(resourceGroupName, loadBalancerName, inboundNatRuleName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String loadBalancerName = Utils.getValueFromIdByName(id, "loadBalancers");
        if (loadBalancerName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'loadBalancers'.", id)));
        }
        String inboundNatRuleName = Utils.getValueFromIdByName(id, "inboundNatRules");
        if (inboundNatRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'inboundNatRules'.", id)));
        }
        this.delete(resourceGroupName, loadBalancerName, inboundNatRuleName, context);
    }

    private InboundNatRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public InboundNatRuleImpl define(String name) {
        return new InboundNatRuleImpl(name, this.manager());
    }
}
