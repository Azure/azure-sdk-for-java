// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.LocalNetworkGatewayInner;
import com.azure.resourcemanager.network.generated.fluent.models.VirtualNetworkGatewayConnectionInner;
import com.azure.resourcemanager.network.generated.fluent.models.VirtualNetworkGatewayInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of VirtualNetworkGatewayConnection. */
public interface VirtualNetworkGatewayConnection {
    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the authorizationKey property: The authorizationKey.
     *
     * @return the authorizationKey value.
     */
    String authorizationKey();

    /**
     * Gets the virtualNetworkGateway1 property: The reference to virtual network gateway resource.
     *
     * @return the virtualNetworkGateway1 value.
     */
    VirtualNetworkGateway virtualNetworkGateway1();

    /**
     * Gets the virtualNetworkGateway2 property: The reference to virtual network gateway resource.
     *
     * @return the virtualNetworkGateway2 value.
     */
    VirtualNetworkGateway virtualNetworkGateway2();

    /**
     * Gets the localNetworkGateway2 property: The reference to local network gateway resource.
     *
     * @return the localNetworkGateway2 value.
     */
    LocalNetworkGateway localNetworkGateway2();

    /**
     * Gets the ingressNatRules property: List of ingress NatRules.
     *
     * @return the ingressNatRules value.
     */
    List<SubResource> ingressNatRules();

    /**
     * Gets the egressNatRules property: List of egress NatRules.
     *
     * @return the egressNatRules value.
     */
    List<SubResource> egressNatRules();

    /**
     * Gets the connectionType property: Gateway connection type.
     *
     * @return the connectionType value.
     */
    VirtualNetworkGatewayConnectionType connectionType();

    /**
     * Gets the connectionProtocol property: Connection protocol used for this connection.
     *
     * @return the connectionProtocol value.
     */
    VirtualNetworkGatewayConnectionProtocol connectionProtocol();

    /**
     * Gets the routingWeight property: The routing weight.
     *
     * @return the routingWeight value.
     */
    Integer routingWeight();

    /**
     * Gets the dpdTimeoutSeconds property: The dead peer detection timeout of this connection in seconds.
     *
     * @return the dpdTimeoutSeconds value.
     */
    Integer dpdTimeoutSeconds();

    /**
     * Gets the connectionMode property: The connection mode for this connection.
     *
     * @return the connectionMode value.
     */
    VirtualNetworkGatewayConnectionMode connectionMode();

    /**
     * Gets the sharedKey property: The IPSec shared key.
     *
     * @return the sharedKey value.
     */
    String sharedKey();

    /**
     * Gets the connectionStatus property: Virtual Network Gateway connection status.
     *
     * @return the connectionStatus value.
     */
    VirtualNetworkGatewayConnectionStatus connectionStatus();

    /**
     * Gets the tunnelConnectionStatus property: Collection of all tunnels' connection health status.
     *
     * @return the tunnelConnectionStatus value.
     */
    List<TunnelConnectionHealth> tunnelConnectionStatus();

    /**
     * Gets the egressBytesTransferred property: The egress bytes transferred in this connection.
     *
     * @return the egressBytesTransferred value.
     */
    Long egressBytesTransferred();

    /**
     * Gets the ingressBytesTransferred property: The ingress bytes transferred in this connection.
     *
     * @return the ingressBytesTransferred value.
     */
    Long ingressBytesTransferred();

    /**
     * Gets the peer property: The reference to peerings resource.
     *
     * @return the peer value.
     */
    SubResource peer();

    /**
     * Gets the enableBgp property: EnableBgp flag.
     *
     * @return the enableBgp value.
     */
    Boolean enableBgp();

    /**
     * Gets the useLocalAzureIpAddress property: Use private local Azure IP for the connection.
     *
     * @return the useLocalAzureIpAddress value.
     */
    Boolean useLocalAzureIpAddress();

    /**
     * Gets the usePolicyBasedTrafficSelectors property: Enable policy-based traffic selectors.
     *
     * @return the usePolicyBasedTrafficSelectors value.
     */
    Boolean usePolicyBasedTrafficSelectors();

    /**
     * Gets the ipsecPolicies property: The IPSec Policies to be considered by this connection.
     *
     * @return the ipsecPolicies value.
     */
    List<IpsecPolicy> ipsecPolicies();

    /**
     * Gets the trafficSelectorPolicies property: The Traffic Selector Policies to be considered by this connection.
     *
     * @return the trafficSelectorPolicies value.
     */
    List<TrafficSelectorPolicy> trafficSelectorPolicies();

    /**
     * Gets the resourceGuid property: The resource GUID property of the virtual network gateway connection resource.
     *
     * @return the resourceGuid value.
     */
    String resourceGuid();

    /**
     * Gets the provisioningState property: The provisioning state of the virtual network gateway connection resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the expressRouteGatewayBypass property: Bypass ExpressRoute Gateway for data forwarding.
     *
     * @return the expressRouteGatewayBypass value.
     */
    Boolean expressRouteGatewayBypass();

    /**
     * Gets the id property: Resource ID.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.network.generated.fluent.models.VirtualNetworkGatewayConnectionInner
     * object.
     *
     * @return the inner object.
     */
    VirtualNetworkGatewayConnectionInner innerModel();

    /** The entirety of the VirtualNetworkGatewayConnection definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithVirtualNetworkGateway1,
            DefinitionStages.WithConnectionType,
            DefinitionStages.WithCreate {
    }
    /** The VirtualNetworkGatewayConnection definition stages. */
    interface DefinitionStages {
        /** The first stage of the VirtualNetworkGatewayConnection definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithVirtualNetworkGateway1 withExistingResourceGroup(String resourceGroupName);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify virtualNetworkGateway1. */
        interface WithVirtualNetworkGateway1 {
            /**
             * Specifies the virtualNetworkGateway1 property: The reference to virtual network gateway resource..
             *
             * @param virtualNetworkGateway1 The reference to virtual network gateway resource.
             * @return the next definition stage.
             */
            WithConnectionType withVirtualNetworkGateway1(VirtualNetworkGatewayInner virtualNetworkGateway1);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify connectionType. */
        interface WithConnectionType {
            /**
             * Specifies the connectionType property: Gateway connection type..
             *
             * @param connectionType Gateway connection type.
             * @return the next definition stage.
             */
            WithCreate withConnectionType(VirtualNetworkGatewayConnectionType connectionType);
        }
        /**
         * The stage of the VirtualNetworkGatewayConnection definition which contains all the minimum required
         * properties for the resource to be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithAuthorizationKey,
                DefinitionStages.WithVirtualNetworkGateway2,
                DefinitionStages.WithLocalNetworkGateway2,
                DefinitionStages.WithIngressNatRules,
                DefinitionStages.WithEgressNatRules,
                DefinitionStages.WithConnectionProtocol,
                DefinitionStages.WithRoutingWeight,
                DefinitionStages.WithDpdTimeoutSeconds,
                DefinitionStages.WithConnectionMode,
                DefinitionStages.WithSharedKey,
                DefinitionStages.WithPeer,
                DefinitionStages.WithEnableBgp,
                DefinitionStages.WithUseLocalAzureIpAddress,
                DefinitionStages.WithUsePolicyBasedTrafficSelectors,
                DefinitionStages.WithIpsecPolicies,
                DefinitionStages.WithTrafficSelectorPolicies,
                DefinitionStages.WithExpressRouteGatewayBypass {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            VirtualNetworkGatewayConnection create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            VirtualNetworkGatewayConnection create(Context context);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify authorizationKey. */
        interface WithAuthorizationKey {
            /**
             * Specifies the authorizationKey property: The authorizationKey..
             *
             * @param authorizationKey The authorizationKey.
             * @return the next definition stage.
             */
            WithCreate withAuthorizationKey(String authorizationKey);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify virtualNetworkGateway2. */
        interface WithVirtualNetworkGateway2 {
            /**
             * Specifies the virtualNetworkGateway2 property: The reference to virtual network gateway resource..
             *
             * @param virtualNetworkGateway2 The reference to virtual network gateway resource.
             * @return the next definition stage.
             */
            WithCreate withVirtualNetworkGateway2(VirtualNetworkGatewayInner virtualNetworkGateway2);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify localNetworkGateway2. */
        interface WithLocalNetworkGateway2 {
            /**
             * Specifies the localNetworkGateway2 property: The reference to local network gateway resource..
             *
             * @param localNetworkGateway2 The reference to local network gateway resource.
             * @return the next definition stage.
             */
            WithCreate withLocalNetworkGateway2(LocalNetworkGatewayInner localNetworkGateway2);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify ingressNatRules. */
        interface WithIngressNatRules {
            /**
             * Specifies the ingressNatRules property: List of ingress NatRules..
             *
             * @param ingressNatRules List of ingress NatRules.
             * @return the next definition stage.
             */
            WithCreate withIngressNatRules(List<SubResource> ingressNatRules);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify egressNatRules. */
        interface WithEgressNatRules {
            /**
             * Specifies the egressNatRules property: List of egress NatRules..
             *
             * @param egressNatRules List of egress NatRules.
             * @return the next definition stage.
             */
            WithCreate withEgressNatRules(List<SubResource> egressNatRules);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify connectionProtocol. */
        interface WithConnectionProtocol {
            /**
             * Specifies the connectionProtocol property: Connection protocol used for this connection..
             *
             * @param connectionProtocol Connection protocol used for this connection.
             * @return the next definition stage.
             */
            WithCreate withConnectionProtocol(VirtualNetworkGatewayConnectionProtocol connectionProtocol);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify routingWeight. */
        interface WithRoutingWeight {
            /**
             * Specifies the routingWeight property: The routing weight..
             *
             * @param routingWeight The routing weight.
             * @return the next definition stage.
             */
            WithCreate withRoutingWeight(Integer routingWeight);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify dpdTimeoutSeconds. */
        interface WithDpdTimeoutSeconds {
            /**
             * Specifies the dpdTimeoutSeconds property: The dead peer detection timeout of this connection in seconds..
             *
             * @param dpdTimeoutSeconds The dead peer detection timeout of this connection in seconds.
             * @return the next definition stage.
             */
            WithCreate withDpdTimeoutSeconds(Integer dpdTimeoutSeconds);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify connectionMode. */
        interface WithConnectionMode {
            /**
             * Specifies the connectionMode property: The connection mode for this connection..
             *
             * @param connectionMode The connection mode for this connection.
             * @return the next definition stage.
             */
            WithCreate withConnectionMode(VirtualNetworkGatewayConnectionMode connectionMode);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify sharedKey. */
        interface WithSharedKey {
            /**
             * Specifies the sharedKey property: The IPSec shared key..
             *
             * @param sharedKey The IPSec shared key.
             * @return the next definition stage.
             */
            WithCreate withSharedKey(String sharedKey);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify peer. */
        interface WithPeer {
            /**
             * Specifies the peer property: The reference to peerings resource..
             *
             * @param peer The reference to peerings resource.
             * @return the next definition stage.
             */
            WithCreate withPeer(SubResource peer);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify enableBgp. */
        interface WithEnableBgp {
            /**
             * Specifies the enableBgp property: EnableBgp flag..
             *
             * @param enableBgp EnableBgp flag.
             * @return the next definition stage.
             */
            WithCreate withEnableBgp(Boolean enableBgp);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify useLocalAzureIpAddress. */
        interface WithUseLocalAzureIpAddress {
            /**
             * Specifies the useLocalAzureIpAddress property: Use private local Azure IP for the connection..
             *
             * @param useLocalAzureIpAddress Use private local Azure IP for the connection.
             * @return the next definition stage.
             */
            WithCreate withUseLocalAzureIpAddress(Boolean useLocalAzureIpAddress);
        }
        /**
         * The stage of the VirtualNetworkGatewayConnection definition allowing to specify
         * usePolicyBasedTrafficSelectors.
         */
        interface WithUsePolicyBasedTrafficSelectors {
            /**
             * Specifies the usePolicyBasedTrafficSelectors property: Enable policy-based traffic selectors..
             *
             * @param usePolicyBasedTrafficSelectors Enable policy-based traffic selectors.
             * @return the next definition stage.
             */
            WithCreate withUsePolicyBasedTrafficSelectors(Boolean usePolicyBasedTrafficSelectors);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify ipsecPolicies. */
        interface WithIpsecPolicies {
            /**
             * Specifies the ipsecPolicies property: The IPSec Policies to be considered by this connection..
             *
             * @param ipsecPolicies The IPSec Policies to be considered by this connection.
             * @return the next definition stage.
             */
            WithCreate withIpsecPolicies(List<IpsecPolicy> ipsecPolicies);
        }
        /** The stage of the VirtualNetworkGatewayConnection definition allowing to specify trafficSelectorPolicies. */
        interface WithTrafficSelectorPolicies {
            /**
             * Specifies the trafficSelectorPolicies property: The Traffic Selector Policies to be considered by this
             * connection..
             *
             * @param trafficSelectorPolicies The Traffic Selector Policies to be considered by this connection.
             * @return the next definition stage.
             */
            WithCreate withTrafficSelectorPolicies(List<TrafficSelectorPolicy> trafficSelectorPolicies);
        }
        /**
         * The stage of the VirtualNetworkGatewayConnection definition allowing to specify expressRouteGatewayBypass.
         */
        interface WithExpressRouteGatewayBypass {
            /**
             * Specifies the expressRouteGatewayBypass property: Bypass ExpressRoute Gateway for data forwarding..
             *
             * @param expressRouteGatewayBypass Bypass ExpressRoute Gateway for data forwarding.
             * @return the next definition stage.
             */
            WithCreate withExpressRouteGatewayBypass(Boolean expressRouteGatewayBypass);
        }
    }
    /**
     * Begins update for the VirtualNetworkGatewayConnection resource.
     *
     * @return the stage of resource update.
     */
    VirtualNetworkGatewayConnection.Update update();

    /** The template for VirtualNetworkGatewayConnection update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        VirtualNetworkGatewayConnection apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        VirtualNetworkGatewayConnection apply(Context context);
    }
    /** The VirtualNetworkGatewayConnection update stages. */
    interface UpdateStages {
        /** The stage of the VirtualNetworkGatewayConnection update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    VirtualNetworkGatewayConnection refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    VirtualNetworkGatewayConnection refresh(Context context);

    /**
     * Starts packet capture on virtual network gateway connection in the specified resource group.
     *
     * @param parameters Virtual network gateway packet capture parameters supplied to start packet capture on gateway
     *     connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.network.generated.models.ErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String startPacketCapture(VpnPacketCaptureStartParameters parameters);

    /**
     * Starts packet capture on virtual network gateway connection in the specified resource group.
     *
     * @throws com.azure.resourcemanager.network.generated.models.ErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String startPacketCapture();

    /**
     * Starts packet capture on virtual network gateway connection in the specified resource group.
     *
     * @param parameters Virtual network gateway packet capture parameters supplied to start packet capture on gateway
     *     connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.network.generated.models.ErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String startPacketCapture(VpnPacketCaptureStartParameters parameters, Context context);

    /**
     * Stops packet capture on virtual network gateway connection in the specified resource group.
     *
     * @param parameters Virtual network gateway packet capture parameters supplied to stop packet capture on gateway
     *     connection.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.network.generated.models.ErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String stopPacketCapture(VpnPacketCaptureStopParameters parameters);

    /**
     * Stops packet capture on virtual network gateway connection in the specified resource group.
     *
     * @param parameters Virtual network gateway packet capture parameters supplied to stop packet capture on gateway
     *     connection.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.resourcemanager.network.generated.models.ErrorException thrown if the request is rejected by
     *     server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String stopPacketCapture(VpnPacketCaptureStopParameters parameters, Context context);

    /**
     * Lists IKE Security Associations for the virtual network gateway connection in the specified resource group.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String getIkeSas();

    /**
     * Lists IKE Security Associations for the virtual network gateway connection in the specified resource group.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    String getIkeSas(Context context);

    /**
     * Resets the virtual network gateway connection specified.
     *
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetConnection();

    /**
     * Resets the virtual network gateway connection specified.
     *
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void resetConnection(Context context);
}
