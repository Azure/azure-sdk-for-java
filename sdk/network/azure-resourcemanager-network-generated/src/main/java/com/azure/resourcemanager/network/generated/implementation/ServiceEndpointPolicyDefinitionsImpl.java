// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.ServiceEndpointPolicyDefinitionsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ServiceEndpointPolicyDefinitionInner;
import com.azure.resourcemanager.network.generated.models.ServiceEndpointPolicyDefinition;
import com.azure.resourcemanager.network.generated.models.ServiceEndpointPolicyDefinitions;

public final class ServiceEndpointPolicyDefinitionsImpl implements ServiceEndpointPolicyDefinitions {
    private static final ClientLogger LOGGER = new ClientLogger(ServiceEndpointPolicyDefinitionsImpl.class);

    private final ServiceEndpointPolicyDefinitionsClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public ServiceEndpointPolicyDefinitionsImpl(
        ServiceEndpointPolicyDefinitionsClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public void delete(
        String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName) {
        this.serviceClient().delete(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName);
    }

    public void delete(
        String resourceGroupName,
        String serviceEndpointPolicyName,
        String serviceEndpointPolicyDefinitionName,
        Context context) {
        this
            .serviceClient()
            .delete(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, context);
    }

    public ServiceEndpointPolicyDefinition get(
        String resourceGroupName, String serviceEndpointPolicyName, String serviceEndpointPolicyDefinitionName) {
        ServiceEndpointPolicyDefinitionInner inner =
            this.serviceClient().get(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName);
        if (inner != null) {
            return new ServiceEndpointPolicyDefinitionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ServiceEndpointPolicyDefinition> getWithResponse(
        String resourceGroupName,
        String serviceEndpointPolicyName,
        String serviceEndpointPolicyDefinitionName,
        Context context) {
        Response<ServiceEndpointPolicyDefinitionInner> inner =
            this
                .serviceClient()
                .getWithResponse(
                    resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ServiceEndpointPolicyDefinitionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PagedIterable<ServiceEndpointPolicyDefinition> listByResourceGroup(
        String resourceGroupName, String serviceEndpointPolicyName) {
        PagedIterable<ServiceEndpointPolicyDefinitionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, serviceEndpointPolicyName);
        return Utils.mapPage(inner, inner1 -> new ServiceEndpointPolicyDefinitionImpl(inner1, this.manager()));
    }

    public PagedIterable<ServiceEndpointPolicyDefinition> listByResourceGroup(
        String resourceGroupName, String serviceEndpointPolicyName, Context context) {
        PagedIterable<ServiceEndpointPolicyDefinitionInner> inner =
            this.serviceClient().listByResourceGroup(resourceGroupName, serviceEndpointPolicyName, context);
        return Utils.mapPage(inner, inner1 -> new ServiceEndpointPolicyDefinitionImpl(inner1, this.manager()));
    }

    public ServiceEndpointPolicyDefinition getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceEndpointPolicyName = Utils.getValueFromIdByName(id, "serviceEndpointPolicies");
        if (serviceEndpointPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceEndpointPolicies'.",
                                id)));
        }
        String serviceEndpointPolicyDefinitionName = Utils.getValueFromIdByName(id, "serviceEndpointPolicyDefinitions");
        if (serviceEndpointPolicyDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'serviceEndpointPolicyDefinitions'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, Context.NONE)
            .getValue();
    }

    public Response<ServiceEndpointPolicyDefinition> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceEndpointPolicyName = Utils.getValueFromIdByName(id, "serviceEndpointPolicies");
        if (serviceEndpointPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceEndpointPolicies'.",
                                id)));
        }
        String serviceEndpointPolicyDefinitionName = Utils.getValueFromIdByName(id, "serviceEndpointPolicyDefinitions");
        if (serviceEndpointPolicyDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'serviceEndpointPolicyDefinitions'.",
                                id)));
        }
        return this
            .getWithResponse(
                resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceEndpointPolicyName = Utils.getValueFromIdByName(id, "serviceEndpointPolicies");
        if (serviceEndpointPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceEndpointPolicies'.",
                                id)));
        }
        String serviceEndpointPolicyDefinitionName = Utils.getValueFromIdByName(id, "serviceEndpointPolicyDefinitions");
        if (serviceEndpointPolicyDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'serviceEndpointPolicyDefinitions'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String serviceEndpointPolicyName = Utils.getValueFromIdByName(id, "serviceEndpointPolicies");
        if (serviceEndpointPolicyName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'serviceEndpointPolicies'.",
                                id)));
        }
        String serviceEndpointPolicyDefinitionName = Utils.getValueFromIdByName(id, "serviceEndpointPolicyDefinitions");
        if (serviceEndpointPolicyDefinitionName == null) {
            throw LOGGER
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment"
                                    + " 'serviceEndpointPolicyDefinitions'.",
                                id)));
        }
        this.delete(resourceGroupName, serviceEndpointPolicyName, serviceEndpointPolicyDefinitionName, context);
    }

    private ServiceEndpointPolicyDefinitionsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public ServiceEndpointPolicyDefinitionImpl define(String name) {
        return new ServiceEndpointPolicyDefinitionImpl(name, this.manager());
    }
}
