// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteCircuitConnectionInner;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteCircuitPeeringInner;
import com.azure.resourcemanager.network.generated.fluent.models.ExpressRouteCircuitStatsInner;
import com.azure.resourcemanager.network.generated.fluent.models.PeerExpressRouteCircuitConnectionInner;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitConnection;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitPeering;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitPeeringConfig;
import com.azure.resourcemanager.network.generated.models.ExpressRouteCircuitStats;
import com.azure.resourcemanager.network.generated.models.ExpressRouteConnectionId;
import com.azure.resourcemanager.network.generated.models.ExpressRoutePeeringState;
import com.azure.resourcemanager.network.generated.models.ExpressRoutePeeringType;
import com.azure.resourcemanager.network.generated.models.Ipv6ExpressRouteCircuitPeeringConfig;
import com.azure.resourcemanager.network.generated.models.PeerExpressRouteCircuitConnection;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class ExpressRouteCircuitPeeringImpl
    implements ExpressRouteCircuitPeering, ExpressRouteCircuitPeering.Definition, ExpressRouteCircuitPeering.Update {
    private ExpressRouteCircuitPeeringInner innerObject;

    private final NetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String type() {
        return this.innerModel().type();
    }

    public ExpressRoutePeeringType peeringType() {
        return this.innerModel().peeringType();
    }

    public ExpressRoutePeeringState state() {
        return this.innerModel().state();
    }

    public Integer azureAsn() {
        return this.innerModel().azureAsn();
    }

    public Long peerAsn() {
        return this.innerModel().peerAsn();
    }

    public String primaryPeerAddressPrefix() {
        return this.innerModel().primaryPeerAddressPrefix();
    }

    public String secondaryPeerAddressPrefix() {
        return this.innerModel().secondaryPeerAddressPrefix();
    }

    public String primaryAzurePort() {
        return this.innerModel().primaryAzurePort();
    }

    public String secondaryAzurePort() {
        return this.innerModel().secondaryAzurePort();
    }

    public String sharedKey() {
        return this.innerModel().sharedKey();
    }

    public Integer vlanId() {
        return this.innerModel().vlanId();
    }

    public ExpressRouteCircuitPeeringConfig microsoftPeeringConfig() {
        return this.innerModel().microsoftPeeringConfig();
    }

    public ExpressRouteCircuitStats stats() {
        ExpressRouteCircuitStatsInner inner = this.innerModel().stats();
        if (inner != null) {
            return new ExpressRouteCircuitStatsImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String gatewayManagerEtag() {
        return this.innerModel().gatewayManagerEtag();
    }

    public String lastModifiedBy() {
        return this.innerModel().lastModifiedBy();
    }

    public SubResource routeFilter() {
        return this.innerModel().routeFilter();
    }

    public Ipv6ExpressRouteCircuitPeeringConfig ipv6PeeringConfig() {
        return this.innerModel().ipv6PeeringConfig();
    }

    public ExpressRouteConnectionId expressRouteConnection() {
        return this.innerModel().expressRouteConnection();
    }

    public List<ExpressRouteCircuitConnection> connections() {
        List<ExpressRouteCircuitConnectionInner> inner = this.innerModel().connections();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new ExpressRouteCircuitConnectionImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<PeerExpressRouteCircuitConnection> peeredConnections() {
        List<PeerExpressRouteCircuitConnectionInner> inner = this.innerModel().peeredConnections();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new PeerExpressRouteCircuitConnectionImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public ExpressRouteCircuitPeeringInner innerModel() {
        return this.innerObject;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String circuitName;

    private String peeringName;

    public ExpressRouteCircuitPeeringImpl withExistingExpressRouteCircuit(
        String resourceGroupName, String circuitName) {
        this.resourceGroupName = resourceGroupName;
        this.circuitName = circuitName;
        return this;
    }

    public ExpressRouteCircuitPeering create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteCircuitPeerings()
                .createOrUpdate(resourceGroupName, circuitName, peeringName, this.innerModel(), Context.NONE);
        return this;
    }

    public ExpressRouteCircuitPeering create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteCircuitPeerings()
                .createOrUpdate(resourceGroupName, circuitName, peeringName, this.innerModel(), context);
        return this;
    }

    ExpressRouteCircuitPeeringImpl(String name, NetworkManager serviceManager) {
        this.innerObject = new ExpressRouteCircuitPeeringInner();
        this.serviceManager = serviceManager;
        this.peeringName = name;
    }

    public ExpressRouteCircuitPeeringImpl update() {
        return this;
    }

    public ExpressRouteCircuitPeering apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteCircuitPeerings()
                .createOrUpdate(resourceGroupName, circuitName, peeringName, this.innerModel(), Context.NONE);
        return this;
    }

    public ExpressRouteCircuitPeering apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteCircuitPeerings()
                .createOrUpdate(resourceGroupName, circuitName, peeringName, this.innerModel(), context);
        return this;
    }

    ExpressRouteCircuitPeeringImpl(ExpressRouteCircuitPeeringInner innerObject, NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.circuitName = Utils.getValueFromIdByName(innerObject.id(), "expressRouteCircuits");
        this.peeringName = Utils.getValueFromIdByName(innerObject.id(), "peerings");
    }

    public ExpressRouteCircuitPeering refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteCircuitPeerings()
                .getWithResponse(resourceGroupName, circuitName, peeringName, Context.NONE)
                .getValue();
        return this;
    }

    public ExpressRouteCircuitPeering refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getExpressRouteCircuitPeerings()
                .getWithResponse(resourceGroupName, circuitName, peeringName, context)
                .getValue();
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withPeeringType(ExpressRoutePeeringType peeringType) {
        this.innerModel().withPeeringType(peeringType);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withState(ExpressRoutePeeringState state) {
        this.innerModel().withState(state);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withAzureAsn(Integer azureAsn) {
        this.innerModel().withAzureAsn(azureAsn);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withPeerAsn(Long peerAsn) {
        this.innerModel().withPeerAsn(peerAsn);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withPrimaryPeerAddressPrefix(String primaryPeerAddressPrefix) {
        this.innerModel().withPrimaryPeerAddressPrefix(primaryPeerAddressPrefix);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withSecondaryPeerAddressPrefix(String secondaryPeerAddressPrefix) {
        this.innerModel().withSecondaryPeerAddressPrefix(secondaryPeerAddressPrefix);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withPrimaryAzurePort(String primaryAzurePort) {
        this.innerModel().withPrimaryAzurePort(primaryAzurePort);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withSecondaryAzurePort(String secondaryAzurePort) {
        this.innerModel().withSecondaryAzurePort(secondaryAzurePort);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withSharedKey(String sharedKey) {
        this.innerModel().withSharedKey(sharedKey);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withVlanId(Integer vlanId) {
        this.innerModel().withVlanId(vlanId);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withMicrosoftPeeringConfig(
        ExpressRouteCircuitPeeringConfig microsoftPeeringConfig) {
        this.innerModel().withMicrosoftPeeringConfig(microsoftPeeringConfig);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withStats(ExpressRouteCircuitStatsInner stats) {
        this.innerModel().withStats(stats);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withGatewayManagerEtag(String gatewayManagerEtag) {
        this.innerModel().withGatewayManagerEtag(gatewayManagerEtag);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withRouteFilter(SubResource routeFilter) {
        this.innerModel().withRouteFilter(routeFilter);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withIpv6PeeringConfig(
        Ipv6ExpressRouteCircuitPeeringConfig ipv6PeeringConfig) {
        this.innerModel().withIpv6PeeringConfig(ipv6PeeringConfig);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withExpressRouteConnection(ExpressRouteConnectionId expressRouteConnection) {
        this.innerModel().withExpressRouteConnection(expressRouteConnection);
        return this;
    }

    public ExpressRouteCircuitPeeringImpl withConnections(List<ExpressRouteCircuitConnectionInner> connections) {
        this.innerModel().withConnections(connections);
        return this;
    }
}
