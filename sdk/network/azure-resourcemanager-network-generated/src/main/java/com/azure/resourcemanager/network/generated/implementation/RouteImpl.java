// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.models.RouteInner;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.Route;
import com.azure.resourcemanager.network.generated.models.RouteNextHopType;

public final class RouteImpl implements Route, Route.Definition, Route.Update {
    private RouteInner innerObject;

    private final NetworkManager serviceManager;

    public String id() {
        return this.innerModel().id();
    }

    public String name() {
        return this.innerModel().name();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String addressPrefix() {
        return this.innerModel().addressPrefix();
    }

    public RouteNextHopType nextHopType() {
        return this.innerModel().nextHopType();
    }

    public String nextHopIpAddress() {
        return this.innerModel().nextHopIpAddress();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public Boolean hasBgpOverride() {
        return this.innerModel().hasBgpOverride();
    }

    public RouteInner innerModel() {
        return this.innerObject;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String routeTableName;

    private String routeName;

    public RouteImpl withExistingRouteTable(String resourceGroupName, String routeTableName) {
        this.resourceGroupName = resourceGroupName;
        this.routeTableName = routeTableName;
        return this;
    }

    public Route create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRoutes()
                .createOrUpdate(resourceGroupName, routeTableName, routeName, this.innerModel(), Context.NONE);
        return this;
    }

    public Route create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRoutes()
                .createOrUpdate(resourceGroupName, routeTableName, routeName, this.innerModel(), context);
        return this;
    }

    RouteImpl(String name, NetworkManager serviceManager) {
        this.innerObject = new RouteInner();
        this.serviceManager = serviceManager;
        this.routeName = name;
    }

    public RouteImpl update() {
        return this;
    }

    public Route apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRoutes()
                .createOrUpdate(resourceGroupName, routeTableName, routeName, this.innerModel(), Context.NONE);
        return this;
    }

    public Route apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRoutes()
                .createOrUpdate(resourceGroupName, routeTableName, routeName, this.innerModel(), context);
        return this;
    }

    RouteImpl(RouteInner innerObject, NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.routeTableName = Utils.getValueFromIdByName(innerObject.id(), "routeTables");
        this.routeName = Utils.getValueFromIdByName(innerObject.id(), "routes");
    }

    public Route refresh() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRoutes()
                .getWithResponse(resourceGroupName, routeTableName, routeName, Context.NONE)
                .getValue();
        return this;
    }

    public Route refresh(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getRoutes()
                .getWithResponse(resourceGroupName, routeTableName, routeName, context)
                .getValue();
        return this;
    }

    public RouteImpl withName(String name) {
        this.innerModel().withName(name);
        return this;
    }

    public RouteImpl withType(String type) {
        this.innerModel().withType(type);
        return this;
    }

    public RouteImpl withAddressPrefix(String addressPrefix) {
        this.innerModel().withAddressPrefix(addressPrefix);
        return this;
    }

    public RouteImpl withNextHopType(RouteNextHopType nextHopType) {
        this.innerModel().withNextHopType(nextHopType);
        return this;
    }

    public RouteImpl withNextHopIpAddress(String nextHopIpAddress) {
        this.innerModel().withNextHopIpAddress(nextHopIpAddress);
        return this;
    }

    public RouteImpl withHasBgpOverride(Boolean hasBgpOverride) {
        this.innerModel().withHasBgpOverride(hasBgpOverride);
        return this;
    }
}
