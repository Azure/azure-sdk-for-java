// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.management.Region;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.BackendAddressPoolInner;
import com.azure.resourcemanager.network.generated.fluent.models.FrontendIpConfigurationInner;
import com.azure.resourcemanager.network.generated.fluent.models.InboundNatRuleInner;
import com.azure.resourcemanager.network.generated.fluent.models.LoadBalancerInner;
import com.azure.resourcemanager.network.generated.fluent.models.LoadBalancingRuleInner;
import com.azure.resourcemanager.network.generated.fluent.models.OutboundRuleInner;
import com.azure.resourcemanager.network.generated.fluent.models.ProbeInner;
import com.azure.resourcemanager.network.generated.models.BackendAddressPool;
import com.azure.resourcemanager.network.generated.models.ExtendedLocation;
import com.azure.resourcemanager.network.generated.models.FrontendIpConfiguration;
import com.azure.resourcemanager.network.generated.models.InboundNatPool;
import com.azure.resourcemanager.network.generated.models.InboundNatRule;
import com.azure.resourcemanager.network.generated.models.LoadBalancer;
import com.azure.resourcemanager.network.generated.models.LoadBalancerSku;
import com.azure.resourcemanager.network.generated.models.LoadBalancingRule;
import com.azure.resourcemanager.network.generated.models.OutboundRule;
import com.azure.resourcemanager.network.generated.models.Probe;
import com.azure.resourcemanager.network.generated.models.ProvisioningState;
import com.azure.resourcemanager.network.generated.models.TagsObject;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public final class LoadBalancerImpl implements LoadBalancer, LoadBalancer.Definition, LoadBalancer.Update {
    private LoadBalancerInner innerObject;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public String name() {
        return this.innerModel().name();
    }

    public String type() {
        return this.innerModel().type();
    }

    public String location() {
        return this.innerModel().location();
    }

    public Map<String, String> tags() {
        Map<String, String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public ExtendedLocation extendedLocation() {
        return this.innerModel().extendedLocation();
    }

    public LoadBalancerSku sku() {
        return this.innerModel().sku();
    }

    public String etag() {
        return this.innerModel().etag();
    }

    public List<FrontendIpConfiguration> frontendIpConfigurations() {
        List<FrontendIpConfigurationInner> inner = this.innerModel().frontendIpConfigurations();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new FrontendIpConfigurationImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<BackendAddressPool> backendAddressPools() {
        List<BackendAddressPoolInner> inner = this.innerModel().backendAddressPools();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new BackendAddressPoolImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<LoadBalancingRule> loadBalancingRules() {
        List<LoadBalancingRuleInner> inner = this.innerModel().loadBalancingRules();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new LoadBalancingRuleImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<Probe> probes() {
        List<ProbeInner> inner = this.innerModel().probes();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner.stream().map(inner1 -> new ProbeImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<InboundNatRule> inboundNatRules() {
        List<InboundNatRuleInner> inner = this.innerModel().inboundNatRules();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new InboundNatRuleImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public List<InboundNatPool> inboundNatPools() {
        List<InboundNatPool> inner = this.innerModel().inboundNatPools();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public List<OutboundRule> outboundRules() {
        List<OutboundRuleInner> inner = this.innerModel().outboundRules();
        if (inner != null) {
            return Collections
                .unmodifiableList(
                    inner
                        .stream()
                        .map(inner1 -> new OutboundRuleImpl(inner1, this.manager()))
                        .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public String resourceGuid() {
        return this.innerModel().resourceGuid();
    }

    public ProvisioningState provisioningState() {
        return this.innerModel().provisioningState();
    }

    public String id() {
        return this.innerModel().id();
    }

    public Region region() {
        return Region.fromName(this.regionName());
    }

    public String regionName() {
        return this.location();
    }

    public LoadBalancerInner innerModel() {
        return this.innerObject;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    private String resourceGroupName;

    private String loadBalancerName;

    private TagsObject updateParameters;

    public LoadBalancerImpl withExistingResourceGroup(String resourceGroupName) {
        this.resourceGroupName = resourceGroupName;
        return this;
    }

    public LoadBalancer create() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLoadBalancers()
                .createOrUpdate(resourceGroupName, loadBalancerName, this.innerModel(), Context.NONE);
        return this;
    }

    public LoadBalancer create(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLoadBalancers()
                .createOrUpdate(resourceGroupName, loadBalancerName, this.innerModel(), context);
        return this;
    }

    LoadBalancerImpl(String name, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = new LoadBalancerInner();
        this.serviceManager = serviceManager;
        this.loadBalancerName = name;
    }

    public LoadBalancerImpl update() {
        this.updateParameters = new TagsObject();
        return this;
    }

    public LoadBalancer apply() {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLoadBalancers()
                .updateTagsWithResponse(resourceGroupName, loadBalancerName, updateParameters, Context.NONE)
                .getValue();
        return this;
    }

    public LoadBalancer apply(Context context) {
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLoadBalancers()
                .updateTagsWithResponse(resourceGroupName, loadBalancerName, updateParameters, context)
                .getValue();
        return this;
    }

    LoadBalancerImpl(
        LoadBalancerInner innerObject, com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
        this.resourceGroupName = Utils.getValueFromIdByName(innerObject.id(), "resourceGroups");
        this.loadBalancerName = Utils.getValueFromIdByName(innerObject.id(), "loadBalancers");
    }

    public LoadBalancer refresh() {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLoadBalancers()
                .getByResourceGroupWithResponse(resourceGroupName, loadBalancerName, localExpand, Context.NONE)
                .getValue();
        return this;
    }

    public LoadBalancer refresh(Context context) {
        String localExpand = null;
        this.innerObject =
            serviceManager
                .serviceClient()
                .getLoadBalancers()
                .getByResourceGroupWithResponse(resourceGroupName, loadBalancerName, localExpand, context)
                .getValue();
        return this;
    }

    public LoadBalancerImpl withRegion(Region location) {
        this.innerModel().withLocation(location.toString());
        return this;
    }

    public LoadBalancerImpl withRegion(String location) {
        this.innerModel().withLocation(location);
        return this;
    }

    public LoadBalancerImpl withTags(Map<String, String> tags) {
        if (isInCreateMode()) {
            this.innerModel().withTags(tags);
            return this;
        } else {
            this.updateParameters.withTags(tags);
            return this;
        }
    }

    public LoadBalancerImpl withExtendedLocation(ExtendedLocation extendedLocation) {
        this.innerModel().withExtendedLocation(extendedLocation);
        return this;
    }

    public LoadBalancerImpl withSku(LoadBalancerSku sku) {
        this.innerModel().withSku(sku);
        return this;
    }

    public LoadBalancerImpl withFrontendIpConfigurations(List<FrontendIpConfigurationInner> frontendIpConfigurations) {
        this.innerModel().withFrontendIpConfigurations(frontendIpConfigurations);
        return this;
    }

    public LoadBalancerImpl withBackendAddressPools(List<BackendAddressPoolInner> backendAddressPools) {
        this.innerModel().withBackendAddressPools(backendAddressPools);
        return this;
    }

    public LoadBalancerImpl withLoadBalancingRules(List<LoadBalancingRuleInner> loadBalancingRules) {
        this.innerModel().withLoadBalancingRules(loadBalancingRules);
        return this;
    }

    public LoadBalancerImpl withProbes(List<ProbeInner> probes) {
        this.innerModel().withProbes(probes);
        return this;
    }

    public LoadBalancerImpl withInboundNatRules(List<InboundNatRuleInner> inboundNatRules) {
        this.innerModel().withInboundNatRules(inboundNatRules);
        return this;
    }

    public LoadBalancerImpl withInboundNatPools(List<InboundNatPool> inboundNatPools) {
        this.innerModel().withInboundNatPools(inboundNatPools);
        return this;
    }

    public LoadBalancerImpl withOutboundRules(List<OutboundRuleInner> outboundRules) {
        this.innerModel().withOutboundRules(outboundRules);
        return this;
    }

    private boolean isInCreateMode() {
        return this.innerModel().id() == null;
    }
}
