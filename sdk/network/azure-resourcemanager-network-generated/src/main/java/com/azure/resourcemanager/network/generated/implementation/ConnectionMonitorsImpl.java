// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.NetworkManager;
import com.azure.resourcemanager.network.generated.fluent.ConnectionMonitorsClient;
import com.azure.resourcemanager.network.generated.fluent.models.ConnectionMonitorQueryResultInner;
import com.azure.resourcemanager.network.generated.fluent.models.ConnectionMonitorResultInner;
import com.azure.resourcemanager.network.generated.models.ConnectionMonitorQueryResult;
import com.azure.resourcemanager.network.generated.models.ConnectionMonitorResult;
import com.azure.resourcemanager.network.generated.models.ConnectionMonitors;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class ConnectionMonitorsImpl implements ConnectionMonitors {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(ConnectionMonitorsImpl.class);

    private final ConnectionMonitorsClient innerClient;

    private final NetworkManager serviceManager;

    public ConnectionMonitorsImpl(ConnectionMonitorsClient innerClient, NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public ConnectionMonitorResult get(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName) {
        ConnectionMonitorResultInner inner =
            this.serviceClient().get(resourceGroupName, networkWatcherName, connectionMonitorName);
        if (inner != null) {
            return new ConnectionMonitorResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<ConnectionMonitorResult> getWithResponse(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName, Context context) {
        Response<ConnectionMonitorResultInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, networkWatcherName, connectionMonitorName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new ConnectionMonitorResultImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String networkWatcherName, String connectionMonitorName) {
        this.serviceClient().delete(resourceGroupName, networkWatcherName, connectionMonitorName);
    }

    public void delete(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName, Context context) {
        this.serviceClient().delete(resourceGroupName, networkWatcherName, connectionMonitorName, context);
    }

    public void stop(String resourceGroupName, String networkWatcherName, String connectionMonitorName) {
        this.serviceClient().stop(resourceGroupName, networkWatcherName, connectionMonitorName);
    }

    public void stop(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName, Context context) {
        this.serviceClient().stop(resourceGroupName, networkWatcherName, connectionMonitorName, context);
    }

    public void start(String resourceGroupName, String networkWatcherName, String connectionMonitorName) {
        this.serviceClient().start(resourceGroupName, networkWatcherName, connectionMonitorName);
    }

    public void start(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName, Context context) {
        this.serviceClient().start(resourceGroupName, networkWatcherName, connectionMonitorName, context);
    }

    public ConnectionMonitorQueryResult query(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName) {
        ConnectionMonitorQueryResultInner inner =
            this.serviceClient().query(resourceGroupName, networkWatcherName, connectionMonitorName);
        if (inner != null) {
            return new ConnectionMonitorQueryResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public ConnectionMonitorQueryResult query(
        String resourceGroupName, String networkWatcherName, String connectionMonitorName, Context context) {
        ConnectionMonitorQueryResultInner inner =
            this.serviceClient().query(resourceGroupName, networkWatcherName, connectionMonitorName, context);
        if (inner != null) {
            return new ConnectionMonitorQueryResultImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public PagedIterable<ConnectionMonitorResult> list(String resourceGroupName, String networkWatcherName) {
        PagedIterable<ConnectionMonitorResultInner> inner =
            this.serviceClient().list(resourceGroupName, networkWatcherName);
        return inner.mapPage(inner1 -> new ConnectionMonitorResultImpl(inner1, this.manager()));
    }

    public PagedIterable<ConnectionMonitorResult> list(
        String resourceGroupName, String networkWatcherName, Context context) {
        PagedIterable<ConnectionMonitorResultInner> inner =
            this.serviceClient().list(resourceGroupName, networkWatcherName, context);
        return inner.mapPage(inner1 -> new ConnectionMonitorResultImpl(inner1, this.manager()));
    }

    public ConnectionMonitorResult getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkWatcherName = Utils.getValueFromIdByName(id, "networkWatchers");
        if (networkWatcherName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkWatchers'.", id)));
        }
        String connectionMonitorName = Utils.getValueFromIdByName(id, "connectionMonitors");
        if (connectionMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitors'.", id)));
        }
        return this
            .getWithResponse(resourceGroupName, networkWatcherName, connectionMonitorName, Context.NONE)
            .getValue();
    }

    public Response<ConnectionMonitorResult> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkWatcherName = Utils.getValueFromIdByName(id, "networkWatchers");
        if (networkWatcherName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkWatchers'.", id)));
        }
        String connectionMonitorName = Utils.getValueFromIdByName(id, "connectionMonitors");
        if (connectionMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitors'.", id)));
        }
        return this.getWithResponse(resourceGroupName, networkWatcherName, connectionMonitorName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkWatcherName = Utils.getValueFromIdByName(id, "networkWatchers");
        if (networkWatcherName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkWatchers'.", id)));
        }
        String connectionMonitorName = Utils.getValueFromIdByName(id, "connectionMonitors");
        if (connectionMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitors'.", id)));
        }
        this.delete(resourceGroupName, networkWatcherName, connectionMonitorName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String networkWatcherName = Utils.getValueFromIdByName(id, "networkWatchers");
        if (networkWatcherName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'networkWatchers'.", id)));
        }
        String connectionMonitorName = Utils.getValueFromIdByName(id, "connectionMonitors");
        if (connectionMonitorName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'connectionMonitors'.", id)));
        }
        this.delete(resourceGroupName, networkWatcherName, connectionMonitorName, context);
    }

    private ConnectionMonitorsClient serviceClient() {
        return this.innerClient;
    }

    private NetworkManager manager() {
        return this.serviceManager;
    }

    public ConnectionMonitorResultImpl define(String name) {
        return new ConnectionMonitorResultImpl(name, this.manager());
    }
}
