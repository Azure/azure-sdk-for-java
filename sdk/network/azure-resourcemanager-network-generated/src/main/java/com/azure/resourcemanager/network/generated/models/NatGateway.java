// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.models;

import com.azure.core.management.Region;
import com.azure.core.management.SubResource;
import com.azure.core.util.Context;
import com.azure.resourcemanager.network.generated.fluent.models.NatGatewayInner;
import java.util.List;
import java.util.Map;

/** An immutable client-side representation of NatGateway. */
public interface NatGateway {
    /**
     * Gets the name property: The name of the resource.
     *
     * @return the name value.
     */
    String name();

    /**
     * Gets the type property: The type of the resource.
     *
     * @return the type value.
     */
    String type();

    /**
     * Gets the location property: The geo-location where the resource lives.
     *
     * @return the location value.
     */
    String location();

    /**
     * Gets the tags property: Resource tags.
     *
     * @return the tags value.
     */
    Map<String, String> tags();

    /**
     * Gets the sku property: The nat gateway SKU.
     *
     * @return the sku value.
     */
    NatGatewaySku sku();

    /**
     * Gets the zones property: A list of availability zones denoting the zone in which Nat Gateway should be deployed.
     *
     * @return the zones value.
     */
    List<String> zones();

    /**
     * Gets the etag property: A unique read-only string that changes whenever the resource is updated.
     *
     * @return the etag value.
     */
    String etag();

    /**
     * Gets the idleTimeoutInMinutes property: The idle timeout of the nat gateway.
     *
     * @return the idleTimeoutInMinutes value.
     */
    Integer idleTimeoutInMinutes();

    /**
     * Gets the publicIpAddresses property: An array of public ip addresses associated with the nat gateway resource.
     *
     * @return the publicIpAddresses value.
     */
    List<SubResource> publicIpAddresses();

    /**
     * Gets the publicIpPrefixes property: An array of public ip prefixes associated with the nat gateway resource.
     *
     * @return the publicIpPrefixes value.
     */
    List<SubResource> publicIpPrefixes();

    /**
     * Gets the subnets property: An array of references to the subnets using this nat gateway resource.
     *
     * @return the subnets value.
     */
    List<SubResource> subnets();

    /**
     * Gets the resourceGuid property: The resource GUID property of the NAT gateway resource.
     *
     * @return the resourceGuid value.
     */
    String resourceGuid();

    /**
     * Gets the provisioningState property: The provisioning state of the NAT gateway resource.
     *
     * @return the provisioningState value.
     */
    ProvisioningState provisioningState();

    /**
     * Gets the id property: Resource ID.
     *
     * @return the id value.
     */
    String id();

    /**
     * Gets the region of the resource.
     *
     * @return the region of the resource.
     */
    Region region();

    /**
     * Gets the name of the resource region.
     *
     * @return the name of the resource region.
     */
    String regionName();

    /**
     * Gets the inner com.azure.resourcemanager.network.generated.fluent.models.NatGatewayInner object.
     *
     * @return the inner object.
     */
    NatGatewayInner innerModel();

    /** The entirety of the NatGateway definition. */
    interface Definition
        extends DefinitionStages.Blank,
            DefinitionStages.WithLocation,
            DefinitionStages.WithResourceGroup,
            DefinitionStages.WithCreate {
    }
    /** The NatGateway definition stages. */
    interface DefinitionStages {
        /** The first stage of the NatGateway definition. */
        interface Blank extends WithLocation {
        }
        /** The stage of the NatGateway definition allowing to specify location. */
        interface WithLocation {
            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(Region location);

            /**
             * Specifies the region for the resource.
             *
             * @param location The geo-location where the resource lives.
             * @return the next definition stage.
             */
            WithResourceGroup withRegion(String location);
        }
        /** The stage of the NatGateway definition allowing to specify parent resource. */
        interface WithResourceGroup {
            /**
             * Specifies resourceGroupName.
             *
             * @param resourceGroupName The name of the resource group.
             * @return the next definition stage.
             */
            WithCreate withExistingResourceGroup(String resourceGroupName);
        }
        /**
         * The stage of the NatGateway definition which contains all the minimum required properties for the resource to
         * be created, but also allows for any other optional properties to be specified.
         */
        interface WithCreate
            extends DefinitionStages.WithTags,
                DefinitionStages.WithSku,
                DefinitionStages.WithZones,
                DefinitionStages.WithIdleTimeoutInMinutes,
                DefinitionStages.WithPublicIpAddresses,
                DefinitionStages.WithPublicIpPrefixes {
            /**
             * Executes the create request.
             *
             * @return the created resource.
             */
            NatGateway create();

            /**
             * Executes the create request.
             *
             * @param context The context to associate with this operation.
             * @return the created resource.
             */
            NatGateway create(Context context);
        }
        /** The stage of the NatGateway definition allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            WithCreate withTags(Map<String, String> tags);
        }
        /** The stage of the NatGateway definition allowing to specify sku. */
        interface WithSku {
            /**
             * Specifies the sku property: The nat gateway SKU..
             *
             * @param sku The nat gateway SKU.
             * @return the next definition stage.
             */
            WithCreate withSku(NatGatewaySku sku);
        }
        /** The stage of the NatGateway definition allowing to specify zones. */
        interface WithZones {
            /**
             * Specifies the zones property: A list of availability zones denoting the zone in which Nat Gateway should
             * be deployed..
             *
             * @param zones A list of availability zones denoting the zone in which Nat Gateway should be deployed.
             * @return the next definition stage.
             */
            WithCreate withZones(List<String> zones);
        }
        /** The stage of the NatGateway definition allowing to specify idleTimeoutInMinutes. */
        interface WithIdleTimeoutInMinutes {
            /**
             * Specifies the idleTimeoutInMinutes property: The idle timeout of the nat gateway..
             *
             * @param idleTimeoutInMinutes The idle timeout of the nat gateway.
             * @return the next definition stage.
             */
            WithCreate withIdleTimeoutInMinutes(Integer idleTimeoutInMinutes);
        }
        /** The stage of the NatGateway definition allowing to specify publicIpAddresses. */
        interface WithPublicIpAddresses {
            /**
             * Specifies the publicIpAddresses property: An array of public ip addresses associated with the nat gateway
             * resource..
             *
             * @param publicIpAddresses An array of public ip addresses associated with the nat gateway resource.
             * @return the next definition stage.
             */
            WithCreate withPublicIpAddresses(List<SubResource> publicIpAddresses);
        }
        /** The stage of the NatGateway definition allowing to specify publicIpPrefixes. */
        interface WithPublicIpPrefixes {
            /**
             * Specifies the publicIpPrefixes property: An array of public ip prefixes associated with the nat gateway
             * resource..
             *
             * @param publicIpPrefixes An array of public ip prefixes associated with the nat gateway resource.
             * @return the next definition stage.
             */
            WithCreate withPublicIpPrefixes(List<SubResource> publicIpPrefixes);
        }
    }
    /**
     * Begins update for the NatGateway resource.
     *
     * @return the stage of resource update.
     */
    NatGateway.Update update();

    /** The template for NatGateway update. */
    interface Update extends UpdateStages.WithTags {
        /**
         * Executes the update request.
         *
         * @return the updated resource.
         */
        NatGateway apply();

        /**
         * Executes the update request.
         *
         * @param context The context to associate with this operation.
         * @return the updated resource.
         */
        NatGateway apply(Context context);
    }
    /** The NatGateway update stages. */
    interface UpdateStages {
        /** The stage of the NatGateway update allowing to specify tags. */
        interface WithTags {
            /**
             * Specifies the tags property: Resource tags..
             *
             * @param tags Resource tags.
             * @return the next definition stage.
             */
            Update withTags(Map<String, String> tags);
        }
    }
    /**
     * Refreshes the resource to sync with Azure.
     *
     * @return the refreshed resource.
     */
    NatGateway refresh();

    /**
     * Refreshes the resource to sync with Azure.
     *
     * @param context The context to associate with this operation.
     * @return the refreshed resource.
     */
    NatGateway refresh(Context context);
}
