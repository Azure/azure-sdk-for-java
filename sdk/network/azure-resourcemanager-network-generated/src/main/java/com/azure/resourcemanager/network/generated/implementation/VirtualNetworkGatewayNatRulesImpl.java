// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.resourcemanager.network.generated.implementation;

import com.azure.core.http.rest.PagedIterable;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.resourcemanager.network.generated.fluent.VirtualNetworkGatewayNatRulesClient;
import com.azure.resourcemanager.network.generated.fluent.models.VirtualNetworkGatewayNatRuleInner;
import com.azure.resourcemanager.network.generated.models.VirtualNetworkGatewayNatRule;
import com.azure.resourcemanager.network.generated.models.VirtualNetworkGatewayNatRules;
import com.fasterxml.jackson.annotation.JsonIgnore;

public final class VirtualNetworkGatewayNatRulesImpl implements VirtualNetworkGatewayNatRules {
    @JsonIgnore private final ClientLogger logger = new ClientLogger(VirtualNetworkGatewayNatRulesImpl.class);

    private final VirtualNetworkGatewayNatRulesClient innerClient;

    private final com.azure.resourcemanager.network.generated.NetworkManager serviceManager;

    public VirtualNetworkGatewayNatRulesImpl(
        VirtualNetworkGatewayNatRulesClient innerClient,
        com.azure.resourcemanager.network.generated.NetworkManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public VirtualNetworkGatewayNatRule get(
        String resourceGroupName, String virtualNetworkGatewayName, String natRuleName) {
        VirtualNetworkGatewayNatRuleInner inner =
            this.serviceClient().get(resourceGroupName, virtualNetworkGatewayName, natRuleName);
        if (inner != null) {
            return new VirtualNetworkGatewayNatRuleImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<VirtualNetworkGatewayNatRule> getWithResponse(
        String resourceGroupName, String virtualNetworkGatewayName, String natRuleName, Context context) {
        Response<VirtualNetworkGatewayNatRuleInner> inner =
            this.serviceClient().getWithResponse(resourceGroupName, virtualNetworkGatewayName, natRuleName, context);
        if (inner != null) {
            return new SimpleResponse<>(
                inner.getRequest(),
                inner.getStatusCode(),
                inner.getHeaders(),
                new VirtualNetworkGatewayNatRuleImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public void delete(String resourceGroupName, String virtualNetworkGatewayName, String natRuleName) {
        this.serviceClient().delete(resourceGroupName, virtualNetworkGatewayName, natRuleName);
    }

    public void delete(
        String resourceGroupName, String virtualNetworkGatewayName, String natRuleName, Context context) {
        this.serviceClient().delete(resourceGroupName, virtualNetworkGatewayName, natRuleName, context);
    }

    public PagedIterable<VirtualNetworkGatewayNatRule> listByVirtualNetworkGateway(
        String resourceGroupName, String virtualNetworkGatewayName) {
        PagedIterable<VirtualNetworkGatewayNatRuleInner> inner =
            this.serviceClient().listByVirtualNetworkGateway(resourceGroupName, virtualNetworkGatewayName);
        return Utils.mapPage(inner, inner1 -> new VirtualNetworkGatewayNatRuleImpl(inner1, this.manager()));
    }

    public PagedIterable<VirtualNetworkGatewayNatRule> listByVirtualNetworkGateway(
        String resourceGroupName, String virtualNetworkGatewayName, Context context) {
        PagedIterable<VirtualNetworkGatewayNatRuleInner> inner =
            this.serviceClient().listByVirtualNetworkGateway(resourceGroupName, virtualNetworkGatewayName, context);
        return Utils.mapPage(inner, inner1 -> new VirtualNetworkGatewayNatRuleImpl(inner1, this.manager()));
    }

    public VirtualNetworkGatewayNatRule getById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkGatewayName = Utils.getValueFromIdByName(id, "virtualNetworkGateways");
        if (virtualNetworkGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkGateways'.",
                                id)));
        }
        String natRuleName = Utils.getValueFromIdByName(id, "natRules");
        if (natRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualNetworkGatewayName, natRuleName, Context.NONE).getValue();
    }

    public Response<VirtualNetworkGatewayNatRule> getByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkGatewayName = Utils.getValueFromIdByName(id, "virtualNetworkGateways");
        if (virtualNetworkGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkGateways'.",
                                id)));
        }
        String natRuleName = Utils.getValueFromIdByName(id, "natRules");
        if (natRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natRules'.", id)));
        }
        return this.getWithResponse(resourceGroupName, virtualNetworkGatewayName, natRuleName, context);
    }

    public void deleteById(String id) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkGatewayName = Utils.getValueFromIdByName(id, "virtualNetworkGateways");
        if (virtualNetworkGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkGateways'.",
                                id)));
        }
        String natRuleName = Utils.getValueFromIdByName(id, "natRules");
        if (natRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natRules'.", id)));
        }
        this.delete(resourceGroupName, virtualNetworkGatewayName, natRuleName, Context.NONE);
    }

    public void deleteByIdWithResponse(String id, Context context) {
        String resourceGroupName = Utils.getValueFromIdByName(id, "resourceGroups");
        if (resourceGroupName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format("The resource ID '%s' is not valid. Missing path segment 'resourceGroups'.", id)));
        }
        String virtualNetworkGatewayName = Utils.getValueFromIdByName(id, "virtualNetworkGateways");
        if (virtualNetworkGatewayName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String
                            .format(
                                "The resource ID '%s' is not valid. Missing path segment 'virtualNetworkGateways'.",
                                id)));
        }
        String natRuleName = Utils.getValueFromIdByName(id, "natRules");
        if (natRuleName == null) {
            throw logger
                .logExceptionAsError(
                    new IllegalArgumentException(
                        String.format("The resource ID '%s' is not valid. Missing path segment 'natRules'.", id)));
        }
        this.delete(resourceGroupName, virtualNetworkGatewayName, natRuleName, context);
    }

    private VirtualNetworkGatewayNatRulesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.resourcemanager.network.generated.NetworkManager manager() {
        return this.serviceManager;
    }

    public VirtualNetworkGatewayNatRuleImpl define(String name) {
        return new VirtualNetworkGatewayNatRuleImpl(name, this.manager());
    }
}
